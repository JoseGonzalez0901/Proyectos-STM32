
Solar_tracker4.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cd30  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005c4  0800cdf0  0800cdf0  0001cdf0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d3b4  0800d3b4  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800d3b4  0800d3b4  0001d3b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d3bc  0800d3bc  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d3bc  0800d3bc  0001d3bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d3c0  0800d3c0  0001d3c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800d3c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000040c  200001e0  0800d5a4  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005ec  0800d5a4  000205ec  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001845a  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f57  00000000  00000000  00038662  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001570  00000000  00000000  0003b5c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001448  00000000  00000000  0003cb30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ba23  00000000  00000000  0003df78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018d94  00000000  00000000  0005999b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000afcb0  00000000  00000000  0007272f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001223df  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000060e0  00000000  00000000  00122430  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200001e0 	.word	0x200001e0
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800cdd4 	.word	0x0800cdd4

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200001e4 	.word	0x200001e4
 8000100:	0800cdd4 	.word	0x0800cdd4

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_uqi>:
 8000114:	b402      	push	{r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	5c09      	ldrb	r1, [r1, r0]
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	448e      	add	lr, r1
 8000122:	bc02      	pop	{r1}
 8000124:	4770      	bx	lr
 8000126:	46c0      	nop			; (mov r8, r8)

08000128 <__gnu_thumb1_case_shi>:
 8000128:	b403      	push	{r0, r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0040      	lsls	r0, r0, #1
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	5e09      	ldrsh	r1, [r1, r0]
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	448e      	add	lr, r1
 8000138:	bc03      	pop	{r0, r1}
 800013a:	4770      	bx	lr

0800013c <__udivsi3>:
 800013c:	2200      	movs	r2, #0
 800013e:	0843      	lsrs	r3, r0, #1
 8000140:	428b      	cmp	r3, r1
 8000142:	d374      	bcc.n	800022e <__udivsi3+0xf2>
 8000144:	0903      	lsrs	r3, r0, #4
 8000146:	428b      	cmp	r3, r1
 8000148:	d35f      	bcc.n	800020a <__udivsi3+0xce>
 800014a:	0a03      	lsrs	r3, r0, #8
 800014c:	428b      	cmp	r3, r1
 800014e:	d344      	bcc.n	80001da <__udivsi3+0x9e>
 8000150:	0b03      	lsrs	r3, r0, #12
 8000152:	428b      	cmp	r3, r1
 8000154:	d328      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d30d      	bcc.n	8000178 <__udivsi3+0x3c>
 800015c:	22ff      	movs	r2, #255	; 0xff
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	ba12      	rev	r2, r2
 8000162:	0c03      	lsrs	r3, r0, #16
 8000164:	428b      	cmp	r3, r1
 8000166:	d302      	bcc.n	800016e <__udivsi3+0x32>
 8000168:	1212      	asrs	r2, r2, #8
 800016a:	0209      	lsls	r1, r1, #8
 800016c:	d065      	beq.n	800023a <__udivsi3+0xfe>
 800016e:	0b03      	lsrs	r3, r0, #12
 8000170:	428b      	cmp	r3, r1
 8000172:	d319      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000174:	e000      	b.n	8000178 <__udivsi3+0x3c>
 8000176:	0a09      	lsrs	r1, r1, #8
 8000178:	0bc3      	lsrs	r3, r0, #15
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x46>
 800017e:	03cb      	lsls	r3, r1, #15
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b83      	lsrs	r3, r0, #14
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x52>
 800018a:	038b      	lsls	r3, r1, #14
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b43      	lsrs	r3, r0, #13
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x5e>
 8000196:	034b      	lsls	r3, r1, #13
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b03      	lsrs	r3, r0, #12
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x6a>
 80001a2:	030b      	lsls	r3, r1, #12
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0ac3      	lsrs	r3, r0, #11
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x76>
 80001ae:	02cb      	lsls	r3, r1, #11
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a83      	lsrs	r3, r0, #10
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x82>
 80001ba:	028b      	lsls	r3, r1, #10
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a43      	lsrs	r3, r0, #9
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x8e>
 80001c6:	024b      	lsls	r3, r1, #9
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a03      	lsrs	r3, r0, #8
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x9a>
 80001d2:	020b      	lsls	r3, r1, #8
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	d2cd      	bcs.n	8000176 <__udivsi3+0x3a>
 80001da:	09c3      	lsrs	r3, r0, #7
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xa8>
 80001e0:	01cb      	lsls	r3, r1, #7
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0983      	lsrs	r3, r0, #6
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xb4>
 80001ec:	018b      	lsls	r3, r1, #6
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0943      	lsrs	r3, r0, #5
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xc0>
 80001f8:	014b      	lsls	r3, r1, #5
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0903      	lsrs	r3, r0, #4
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xcc>
 8000204:	010b      	lsls	r3, r1, #4
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	08c3      	lsrs	r3, r0, #3
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xd8>
 8000210:	00cb      	lsls	r3, r1, #3
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0883      	lsrs	r3, r0, #2
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xe4>
 800021c:	008b      	lsls	r3, r1, #2
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0843      	lsrs	r3, r0, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xf0>
 8000228:	004b      	lsls	r3, r1, #1
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	1a41      	subs	r1, r0, r1
 8000230:	d200      	bcs.n	8000234 <__udivsi3+0xf8>
 8000232:	4601      	mov	r1, r0
 8000234:	4152      	adcs	r2, r2
 8000236:	4610      	mov	r0, r2
 8000238:	4770      	bx	lr
 800023a:	e7ff      	b.n	800023c <__udivsi3+0x100>
 800023c:	b501      	push	{r0, lr}
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f8f0 	bl	8000424 <__aeabi_idiv0>
 8000244:	bd02      	pop	{r1, pc}
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_uidivmod>:
 8000248:	2900      	cmp	r1, #0
 800024a:	d0f7      	beq.n	800023c <__udivsi3+0x100>
 800024c:	e776      	b.n	800013c <__udivsi3>
 800024e:	4770      	bx	lr

08000250 <__divsi3>:
 8000250:	4603      	mov	r3, r0
 8000252:	430b      	orrs	r3, r1
 8000254:	d47f      	bmi.n	8000356 <__divsi3+0x106>
 8000256:	2200      	movs	r2, #0
 8000258:	0843      	lsrs	r3, r0, #1
 800025a:	428b      	cmp	r3, r1
 800025c:	d374      	bcc.n	8000348 <__divsi3+0xf8>
 800025e:	0903      	lsrs	r3, r0, #4
 8000260:	428b      	cmp	r3, r1
 8000262:	d35f      	bcc.n	8000324 <__divsi3+0xd4>
 8000264:	0a03      	lsrs	r3, r0, #8
 8000266:	428b      	cmp	r3, r1
 8000268:	d344      	bcc.n	80002f4 <__divsi3+0xa4>
 800026a:	0b03      	lsrs	r3, r0, #12
 800026c:	428b      	cmp	r3, r1
 800026e:	d328      	bcc.n	80002c2 <__divsi3+0x72>
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d30d      	bcc.n	8000292 <__divsi3+0x42>
 8000276:	22ff      	movs	r2, #255	; 0xff
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	ba12      	rev	r2, r2
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	428b      	cmp	r3, r1
 8000280:	d302      	bcc.n	8000288 <__divsi3+0x38>
 8000282:	1212      	asrs	r2, r2, #8
 8000284:	0209      	lsls	r1, r1, #8
 8000286:	d065      	beq.n	8000354 <__divsi3+0x104>
 8000288:	0b03      	lsrs	r3, r0, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d319      	bcc.n	80002c2 <__divsi3+0x72>
 800028e:	e000      	b.n	8000292 <__divsi3+0x42>
 8000290:	0a09      	lsrs	r1, r1, #8
 8000292:	0bc3      	lsrs	r3, r0, #15
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x4c>
 8000298:	03cb      	lsls	r3, r1, #15
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b83      	lsrs	r3, r0, #14
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x58>
 80002a4:	038b      	lsls	r3, r1, #14
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b43      	lsrs	r3, r0, #13
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x64>
 80002b0:	034b      	lsls	r3, r1, #13
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b03      	lsrs	r3, r0, #12
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x70>
 80002bc:	030b      	lsls	r3, r1, #12
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0ac3      	lsrs	r3, r0, #11
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x7c>
 80002c8:	02cb      	lsls	r3, r1, #11
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a83      	lsrs	r3, r0, #10
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x88>
 80002d4:	028b      	lsls	r3, r1, #10
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a43      	lsrs	r3, r0, #9
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x94>
 80002e0:	024b      	lsls	r3, r1, #9
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a03      	lsrs	r3, r0, #8
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0xa0>
 80002ec:	020b      	lsls	r3, r1, #8
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	d2cd      	bcs.n	8000290 <__divsi3+0x40>
 80002f4:	09c3      	lsrs	r3, r0, #7
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xae>
 80002fa:	01cb      	lsls	r3, r1, #7
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0983      	lsrs	r3, r0, #6
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xba>
 8000306:	018b      	lsls	r3, r1, #6
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0943      	lsrs	r3, r0, #5
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xc6>
 8000312:	014b      	lsls	r3, r1, #5
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0903      	lsrs	r3, r0, #4
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xd2>
 800031e:	010b      	lsls	r3, r1, #4
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	08c3      	lsrs	r3, r0, #3
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xde>
 800032a:	00cb      	lsls	r3, r1, #3
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0883      	lsrs	r3, r0, #2
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xea>
 8000336:	008b      	lsls	r3, r1, #2
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0843      	lsrs	r3, r0, #1
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xf6>
 8000342:	004b      	lsls	r3, r1, #1
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	1a41      	subs	r1, r0, r1
 800034a:	d200      	bcs.n	800034e <__divsi3+0xfe>
 800034c:	4601      	mov	r1, r0
 800034e:	4152      	adcs	r2, r2
 8000350:	4610      	mov	r0, r2
 8000352:	4770      	bx	lr
 8000354:	e05d      	b.n	8000412 <__divsi3+0x1c2>
 8000356:	0fca      	lsrs	r2, r1, #31
 8000358:	d000      	beq.n	800035c <__divsi3+0x10c>
 800035a:	4249      	negs	r1, r1
 800035c:	1003      	asrs	r3, r0, #32
 800035e:	d300      	bcc.n	8000362 <__divsi3+0x112>
 8000360:	4240      	negs	r0, r0
 8000362:	4053      	eors	r3, r2
 8000364:	2200      	movs	r2, #0
 8000366:	469c      	mov	ip, r3
 8000368:	0903      	lsrs	r3, r0, #4
 800036a:	428b      	cmp	r3, r1
 800036c:	d32d      	bcc.n	80003ca <__divsi3+0x17a>
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d312      	bcc.n	800039a <__divsi3+0x14a>
 8000374:	22fc      	movs	r2, #252	; 0xfc
 8000376:	0189      	lsls	r1, r1, #6
 8000378:	ba12      	rev	r2, r2
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d30c      	bcc.n	800039a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d308      	bcc.n	800039a <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d304      	bcc.n	800039a <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	d03a      	beq.n	800040a <__divsi3+0x1ba>
 8000394:	1192      	asrs	r2, r2, #6
 8000396:	e000      	b.n	800039a <__divsi3+0x14a>
 8000398:	0989      	lsrs	r1, r1, #6
 800039a:	09c3      	lsrs	r3, r0, #7
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x154>
 80003a0:	01cb      	lsls	r3, r1, #7
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0983      	lsrs	r3, r0, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x160>
 80003ac:	018b      	lsls	r3, r1, #6
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0943      	lsrs	r3, r0, #5
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x16c>
 80003b8:	014b      	lsls	r3, r1, #5
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0903      	lsrs	r3, r0, #4
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x178>
 80003c4:	010b      	lsls	r3, r1, #4
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	08c3      	lsrs	r3, r0, #3
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x184>
 80003d0:	00cb      	lsls	r3, r1, #3
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0883      	lsrs	r3, r0, #2
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x190>
 80003dc:	008b      	lsls	r3, r1, #2
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	d2d9      	bcs.n	8000398 <__divsi3+0x148>
 80003e4:	0843      	lsrs	r3, r0, #1
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d301      	bcc.n	80003ee <__divsi3+0x19e>
 80003ea:	004b      	lsls	r3, r1, #1
 80003ec:	1ac0      	subs	r0, r0, r3
 80003ee:	4152      	adcs	r2, r2
 80003f0:	1a41      	subs	r1, r0, r1
 80003f2:	d200      	bcs.n	80003f6 <__divsi3+0x1a6>
 80003f4:	4601      	mov	r1, r0
 80003f6:	4663      	mov	r3, ip
 80003f8:	4152      	adcs	r2, r2
 80003fa:	105b      	asrs	r3, r3, #1
 80003fc:	4610      	mov	r0, r2
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x1b4>
 8000400:	4240      	negs	r0, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d500      	bpl.n	8000408 <__divsi3+0x1b8>
 8000406:	4249      	negs	r1, r1
 8000408:	4770      	bx	lr
 800040a:	4663      	mov	r3, ip
 800040c:	105b      	asrs	r3, r3, #1
 800040e:	d300      	bcc.n	8000412 <__divsi3+0x1c2>
 8000410:	4240      	negs	r0, r0
 8000412:	b501      	push	{r0, lr}
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f805 	bl	8000424 <__aeabi_idiv0>
 800041a:	bd02      	pop	{r1, pc}

0800041c <__aeabi_idivmod>:
 800041c:	2900      	cmp	r1, #0
 800041e:	d0f8      	beq.n	8000412 <__divsi3+0x1c2>
 8000420:	e716      	b.n	8000250 <__divsi3>
 8000422:	4770      	bx	lr

08000424 <__aeabi_idiv0>:
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdrcmple>:
 8000428:	4684      	mov	ip, r0
 800042a:	0010      	movs	r0, r2
 800042c:	4662      	mov	r2, ip
 800042e:	468c      	mov	ip, r1
 8000430:	0019      	movs	r1, r3
 8000432:	4663      	mov	r3, ip
 8000434:	e000      	b.n	8000438 <__aeabi_cdcmpeq>
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_cdcmpeq>:
 8000438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043a:	f000 fff9 	bl	8001430 <__ledf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	d401      	bmi.n	8000446 <__aeabi_cdcmpeq+0xe>
 8000442:	2100      	movs	r1, #0
 8000444:	42c8      	cmn	r0, r1
 8000446:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000448 <__aeabi_dcmpeq>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f000 ff49 	bl	80012e0 <__eqdf2>
 800044e:	4240      	negs	r0, r0
 8000450:	3001      	adds	r0, #1
 8000452:	bd10      	pop	{r4, pc}

08000454 <__aeabi_dcmplt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f000 ffeb 	bl	8001430 <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	db01      	blt.n	8000462 <__aeabi_dcmplt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_dcmple>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f000 ffe1 	bl	8001430 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dd01      	ble.n	8000476 <__aeabi_dcmple+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmpgt>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f000 ff71 	bl	8001364 <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dc01      	bgt.n	800048a <__aeabi_dcmpgt+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpge>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f000 ff67 	bl	8001364 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	da01      	bge.n	800049e <__aeabi_dcmpge+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_uldivmod>:
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d111      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004a8:	2a00      	cmp	r2, #0
 80004aa:	d10f      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004ac:	2900      	cmp	r1, #0
 80004ae:	d100      	bne.n	80004b2 <__aeabi_uldivmod+0xe>
 80004b0:	2800      	cmp	r0, #0
 80004b2:	d002      	beq.n	80004ba <__aeabi_uldivmod+0x16>
 80004b4:	2100      	movs	r1, #0
 80004b6:	43c9      	mvns	r1, r1
 80004b8:	0008      	movs	r0, r1
 80004ba:	b407      	push	{r0, r1, r2}
 80004bc:	4802      	ldr	r0, [pc, #8]	; (80004c8 <__aeabi_uldivmod+0x24>)
 80004be:	a102      	add	r1, pc, #8	; (adr r1, 80004c8 <__aeabi_uldivmod+0x24>)
 80004c0:	1840      	adds	r0, r0, r1
 80004c2:	9002      	str	r0, [sp, #8]
 80004c4:	bd03      	pop	{r0, r1, pc}
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	ffffff5d 	.word	0xffffff5d
 80004cc:	b403      	push	{r0, r1}
 80004ce:	4668      	mov	r0, sp
 80004d0:	b501      	push	{r0, lr}
 80004d2:	9802      	ldr	r0, [sp, #8]
 80004d4:	f000 f806 	bl	80004e4 <__udivmoddi4>
 80004d8:	9b01      	ldr	r3, [sp, #4]
 80004da:	469e      	mov	lr, r3
 80004dc:	b002      	add	sp, #8
 80004de:	bc0c      	pop	{r2, r3}
 80004e0:	4770      	bx	lr
 80004e2:	46c0      	nop			; (mov r8, r8)

080004e4 <__udivmoddi4>:
 80004e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004e6:	4657      	mov	r7, sl
 80004e8:	464e      	mov	r6, r9
 80004ea:	4645      	mov	r5, r8
 80004ec:	46de      	mov	lr, fp
 80004ee:	b5e0      	push	{r5, r6, r7, lr}
 80004f0:	0004      	movs	r4, r0
 80004f2:	000d      	movs	r5, r1
 80004f4:	4692      	mov	sl, r2
 80004f6:	4699      	mov	r9, r3
 80004f8:	b083      	sub	sp, #12
 80004fa:	428b      	cmp	r3, r1
 80004fc:	d830      	bhi.n	8000560 <__udivmoddi4+0x7c>
 80004fe:	d02d      	beq.n	800055c <__udivmoddi4+0x78>
 8000500:	4649      	mov	r1, r9
 8000502:	4650      	mov	r0, sl
 8000504:	f001 ff8e 	bl	8002424 <__clzdi2>
 8000508:	0029      	movs	r1, r5
 800050a:	0006      	movs	r6, r0
 800050c:	0020      	movs	r0, r4
 800050e:	f001 ff89 	bl	8002424 <__clzdi2>
 8000512:	1a33      	subs	r3, r6, r0
 8000514:	4698      	mov	r8, r3
 8000516:	3b20      	subs	r3, #32
 8000518:	469b      	mov	fp, r3
 800051a:	d433      	bmi.n	8000584 <__udivmoddi4+0xa0>
 800051c:	465a      	mov	r2, fp
 800051e:	4653      	mov	r3, sl
 8000520:	4093      	lsls	r3, r2
 8000522:	4642      	mov	r2, r8
 8000524:	001f      	movs	r7, r3
 8000526:	4653      	mov	r3, sl
 8000528:	4093      	lsls	r3, r2
 800052a:	001e      	movs	r6, r3
 800052c:	42af      	cmp	r7, r5
 800052e:	d83a      	bhi.n	80005a6 <__udivmoddi4+0xc2>
 8000530:	42af      	cmp	r7, r5
 8000532:	d100      	bne.n	8000536 <__udivmoddi4+0x52>
 8000534:	e078      	b.n	8000628 <__udivmoddi4+0x144>
 8000536:	465b      	mov	r3, fp
 8000538:	1ba4      	subs	r4, r4, r6
 800053a:	41bd      	sbcs	r5, r7
 800053c:	2b00      	cmp	r3, #0
 800053e:	da00      	bge.n	8000542 <__udivmoddi4+0x5e>
 8000540:	e075      	b.n	800062e <__udivmoddi4+0x14a>
 8000542:	2200      	movs	r2, #0
 8000544:	2300      	movs	r3, #0
 8000546:	9200      	str	r2, [sp, #0]
 8000548:	9301      	str	r3, [sp, #4]
 800054a:	2301      	movs	r3, #1
 800054c:	465a      	mov	r2, fp
 800054e:	4093      	lsls	r3, r2
 8000550:	9301      	str	r3, [sp, #4]
 8000552:	2301      	movs	r3, #1
 8000554:	4642      	mov	r2, r8
 8000556:	4093      	lsls	r3, r2
 8000558:	9300      	str	r3, [sp, #0]
 800055a:	e028      	b.n	80005ae <__udivmoddi4+0xca>
 800055c:	4282      	cmp	r2, r0
 800055e:	d9cf      	bls.n	8000500 <__udivmoddi4+0x1c>
 8000560:	2200      	movs	r2, #0
 8000562:	2300      	movs	r3, #0
 8000564:	9200      	str	r2, [sp, #0]
 8000566:	9301      	str	r3, [sp, #4]
 8000568:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800056a:	2b00      	cmp	r3, #0
 800056c:	d001      	beq.n	8000572 <__udivmoddi4+0x8e>
 800056e:	601c      	str	r4, [r3, #0]
 8000570:	605d      	str	r5, [r3, #4]
 8000572:	9800      	ldr	r0, [sp, #0]
 8000574:	9901      	ldr	r1, [sp, #4]
 8000576:	b003      	add	sp, #12
 8000578:	bcf0      	pop	{r4, r5, r6, r7}
 800057a:	46bb      	mov	fp, r7
 800057c:	46b2      	mov	sl, r6
 800057e:	46a9      	mov	r9, r5
 8000580:	46a0      	mov	r8, r4
 8000582:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000584:	4642      	mov	r2, r8
 8000586:	2320      	movs	r3, #32
 8000588:	1a9b      	subs	r3, r3, r2
 800058a:	4652      	mov	r2, sl
 800058c:	40da      	lsrs	r2, r3
 800058e:	4641      	mov	r1, r8
 8000590:	0013      	movs	r3, r2
 8000592:	464a      	mov	r2, r9
 8000594:	408a      	lsls	r2, r1
 8000596:	0017      	movs	r7, r2
 8000598:	4642      	mov	r2, r8
 800059a:	431f      	orrs	r7, r3
 800059c:	4653      	mov	r3, sl
 800059e:	4093      	lsls	r3, r2
 80005a0:	001e      	movs	r6, r3
 80005a2:	42af      	cmp	r7, r5
 80005a4:	d9c4      	bls.n	8000530 <__udivmoddi4+0x4c>
 80005a6:	2200      	movs	r2, #0
 80005a8:	2300      	movs	r3, #0
 80005aa:	9200      	str	r2, [sp, #0]
 80005ac:	9301      	str	r3, [sp, #4]
 80005ae:	4643      	mov	r3, r8
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d0d9      	beq.n	8000568 <__udivmoddi4+0x84>
 80005b4:	07fb      	lsls	r3, r7, #31
 80005b6:	0872      	lsrs	r2, r6, #1
 80005b8:	431a      	orrs	r2, r3
 80005ba:	4646      	mov	r6, r8
 80005bc:	087b      	lsrs	r3, r7, #1
 80005be:	e00e      	b.n	80005de <__udivmoddi4+0xfa>
 80005c0:	42ab      	cmp	r3, r5
 80005c2:	d101      	bne.n	80005c8 <__udivmoddi4+0xe4>
 80005c4:	42a2      	cmp	r2, r4
 80005c6:	d80c      	bhi.n	80005e2 <__udivmoddi4+0xfe>
 80005c8:	1aa4      	subs	r4, r4, r2
 80005ca:	419d      	sbcs	r5, r3
 80005cc:	2001      	movs	r0, #1
 80005ce:	1924      	adds	r4, r4, r4
 80005d0:	416d      	adcs	r5, r5
 80005d2:	2100      	movs	r1, #0
 80005d4:	3e01      	subs	r6, #1
 80005d6:	1824      	adds	r4, r4, r0
 80005d8:	414d      	adcs	r5, r1
 80005da:	2e00      	cmp	r6, #0
 80005dc:	d006      	beq.n	80005ec <__udivmoddi4+0x108>
 80005de:	42ab      	cmp	r3, r5
 80005e0:	d9ee      	bls.n	80005c0 <__udivmoddi4+0xdc>
 80005e2:	3e01      	subs	r6, #1
 80005e4:	1924      	adds	r4, r4, r4
 80005e6:	416d      	adcs	r5, r5
 80005e8:	2e00      	cmp	r6, #0
 80005ea:	d1f8      	bne.n	80005de <__udivmoddi4+0xfa>
 80005ec:	9800      	ldr	r0, [sp, #0]
 80005ee:	9901      	ldr	r1, [sp, #4]
 80005f0:	465b      	mov	r3, fp
 80005f2:	1900      	adds	r0, r0, r4
 80005f4:	4169      	adcs	r1, r5
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	db24      	blt.n	8000644 <__udivmoddi4+0x160>
 80005fa:	002b      	movs	r3, r5
 80005fc:	465a      	mov	r2, fp
 80005fe:	4644      	mov	r4, r8
 8000600:	40d3      	lsrs	r3, r2
 8000602:	002a      	movs	r2, r5
 8000604:	40e2      	lsrs	r2, r4
 8000606:	001c      	movs	r4, r3
 8000608:	465b      	mov	r3, fp
 800060a:	0015      	movs	r5, r2
 800060c:	2b00      	cmp	r3, #0
 800060e:	db2a      	blt.n	8000666 <__udivmoddi4+0x182>
 8000610:	0026      	movs	r6, r4
 8000612:	409e      	lsls	r6, r3
 8000614:	0033      	movs	r3, r6
 8000616:	0026      	movs	r6, r4
 8000618:	4647      	mov	r7, r8
 800061a:	40be      	lsls	r6, r7
 800061c:	0032      	movs	r2, r6
 800061e:	1a80      	subs	r0, r0, r2
 8000620:	4199      	sbcs	r1, r3
 8000622:	9000      	str	r0, [sp, #0]
 8000624:	9101      	str	r1, [sp, #4]
 8000626:	e79f      	b.n	8000568 <__udivmoddi4+0x84>
 8000628:	42a3      	cmp	r3, r4
 800062a:	d8bc      	bhi.n	80005a6 <__udivmoddi4+0xc2>
 800062c:	e783      	b.n	8000536 <__udivmoddi4+0x52>
 800062e:	4642      	mov	r2, r8
 8000630:	2320      	movs	r3, #32
 8000632:	2100      	movs	r1, #0
 8000634:	1a9b      	subs	r3, r3, r2
 8000636:	2200      	movs	r2, #0
 8000638:	9100      	str	r1, [sp, #0]
 800063a:	9201      	str	r2, [sp, #4]
 800063c:	2201      	movs	r2, #1
 800063e:	40da      	lsrs	r2, r3
 8000640:	9201      	str	r2, [sp, #4]
 8000642:	e786      	b.n	8000552 <__udivmoddi4+0x6e>
 8000644:	4642      	mov	r2, r8
 8000646:	2320      	movs	r3, #32
 8000648:	1a9b      	subs	r3, r3, r2
 800064a:	002a      	movs	r2, r5
 800064c:	4646      	mov	r6, r8
 800064e:	409a      	lsls	r2, r3
 8000650:	0023      	movs	r3, r4
 8000652:	40f3      	lsrs	r3, r6
 8000654:	4644      	mov	r4, r8
 8000656:	4313      	orrs	r3, r2
 8000658:	002a      	movs	r2, r5
 800065a:	40e2      	lsrs	r2, r4
 800065c:	001c      	movs	r4, r3
 800065e:	465b      	mov	r3, fp
 8000660:	0015      	movs	r5, r2
 8000662:	2b00      	cmp	r3, #0
 8000664:	dad4      	bge.n	8000610 <__udivmoddi4+0x12c>
 8000666:	4642      	mov	r2, r8
 8000668:	002f      	movs	r7, r5
 800066a:	2320      	movs	r3, #32
 800066c:	0026      	movs	r6, r4
 800066e:	4097      	lsls	r7, r2
 8000670:	1a9b      	subs	r3, r3, r2
 8000672:	40de      	lsrs	r6, r3
 8000674:	003b      	movs	r3, r7
 8000676:	4333      	orrs	r3, r6
 8000678:	e7cd      	b.n	8000616 <__udivmoddi4+0x132>
 800067a:	46c0      	nop			; (mov r8, r8)

0800067c <__aeabi_dadd>:
 800067c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800067e:	464f      	mov	r7, r9
 8000680:	4646      	mov	r6, r8
 8000682:	46d6      	mov	lr, sl
 8000684:	000d      	movs	r5, r1
 8000686:	0004      	movs	r4, r0
 8000688:	b5c0      	push	{r6, r7, lr}
 800068a:	001f      	movs	r7, r3
 800068c:	0011      	movs	r1, r2
 800068e:	0328      	lsls	r0, r5, #12
 8000690:	0f62      	lsrs	r2, r4, #29
 8000692:	0a40      	lsrs	r0, r0, #9
 8000694:	4310      	orrs	r0, r2
 8000696:	007a      	lsls	r2, r7, #1
 8000698:	0d52      	lsrs	r2, r2, #21
 800069a:	00e3      	lsls	r3, r4, #3
 800069c:	033c      	lsls	r4, r7, #12
 800069e:	4691      	mov	r9, r2
 80006a0:	0a64      	lsrs	r4, r4, #9
 80006a2:	0ffa      	lsrs	r2, r7, #31
 80006a4:	0f4f      	lsrs	r7, r1, #29
 80006a6:	006e      	lsls	r6, r5, #1
 80006a8:	4327      	orrs	r7, r4
 80006aa:	4692      	mov	sl, r2
 80006ac:	46b8      	mov	r8, r7
 80006ae:	0d76      	lsrs	r6, r6, #21
 80006b0:	0fed      	lsrs	r5, r5, #31
 80006b2:	00c9      	lsls	r1, r1, #3
 80006b4:	4295      	cmp	r5, r2
 80006b6:	d100      	bne.n	80006ba <__aeabi_dadd+0x3e>
 80006b8:	e099      	b.n	80007ee <__aeabi_dadd+0x172>
 80006ba:	464c      	mov	r4, r9
 80006bc:	1b34      	subs	r4, r6, r4
 80006be:	46a4      	mov	ip, r4
 80006c0:	2c00      	cmp	r4, #0
 80006c2:	dc00      	bgt.n	80006c6 <__aeabi_dadd+0x4a>
 80006c4:	e07c      	b.n	80007c0 <__aeabi_dadd+0x144>
 80006c6:	464a      	mov	r2, r9
 80006c8:	2a00      	cmp	r2, #0
 80006ca:	d100      	bne.n	80006ce <__aeabi_dadd+0x52>
 80006cc:	e0b8      	b.n	8000840 <__aeabi_dadd+0x1c4>
 80006ce:	4ac5      	ldr	r2, [pc, #788]	; (80009e4 <__aeabi_dadd+0x368>)
 80006d0:	4296      	cmp	r6, r2
 80006d2:	d100      	bne.n	80006d6 <__aeabi_dadd+0x5a>
 80006d4:	e11c      	b.n	8000910 <__aeabi_dadd+0x294>
 80006d6:	2280      	movs	r2, #128	; 0x80
 80006d8:	003c      	movs	r4, r7
 80006da:	0412      	lsls	r2, r2, #16
 80006dc:	4314      	orrs	r4, r2
 80006de:	46a0      	mov	r8, r4
 80006e0:	4662      	mov	r2, ip
 80006e2:	2a38      	cmp	r2, #56	; 0x38
 80006e4:	dd00      	ble.n	80006e8 <__aeabi_dadd+0x6c>
 80006e6:	e161      	b.n	80009ac <__aeabi_dadd+0x330>
 80006e8:	2a1f      	cmp	r2, #31
 80006ea:	dd00      	ble.n	80006ee <__aeabi_dadd+0x72>
 80006ec:	e1cc      	b.n	8000a88 <__aeabi_dadd+0x40c>
 80006ee:	4664      	mov	r4, ip
 80006f0:	2220      	movs	r2, #32
 80006f2:	1b12      	subs	r2, r2, r4
 80006f4:	4644      	mov	r4, r8
 80006f6:	4094      	lsls	r4, r2
 80006f8:	000f      	movs	r7, r1
 80006fa:	46a1      	mov	r9, r4
 80006fc:	4664      	mov	r4, ip
 80006fe:	4091      	lsls	r1, r2
 8000700:	40e7      	lsrs	r7, r4
 8000702:	464c      	mov	r4, r9
 8000704:	1e4a      	subs	r2, r1, #1
 8000706:	4191      	sbcs	r1, r2
 8000708:	433c      	orrs	r4, r7
 800070a:	4642      	mov	r2, r8
 800070c:	4321      	orrs	r1, r4
 800070e:	4664      	mov	r4, ip
 8000710:	40e2      	lsrs	r2, r4
 8000712:	1a80      	subs	r0, r0, r2
 8000714:	1a5c      	subs	r4, r3, r1
 8000716:	42a3      	cmp	r3, r4
 8000718:	419b      	sbcs	r3, r3
 800071a:	425f      	negs	r7, r3
 800071c:	1bc7      	subs	r7, r0, r7
 800071e:	023b      	lsls	r3, r7, #8
 8000720:	d400      	bmi.n	8000724 <__aeabi_dadd+0xa8>
 8000722:	e0d0      	b.n	80008c6 <__aeabi_dadd+0x24a>
 8000724:	027f      	lsls	r7, r7, #9
 8000726:	0a7f      	lsrs	r7, r7, #9
 8000728:	2f00      	cmp	r7, #0
 800072a:	d100      	bne.n	800072e <__aeabi_dadd+0xb2>
 800072c:	e0ff      	b.n	800092e <__aeabi_dadd+0x2b2>
 800072e:	0038      	movs	r0, r7
 8000730:	f001 fe5a 	bl	80023e8 <__clzsi2>
 8000734:	0001      	movs	r1, r0
 8000736:	3908      	subs	r1, #8
 8000738:	2320      	movs	r3, #32
 800073a:	0022      	movs	r2, r4
 800073c:	1a5b      	subs	r3, r3, r1
 800073e:	408f      	lsls	r7, r1
 8000740:	40da      	lsrs	r2, r3
 8000742:	408c      	lsls	r4, r1
 8000744:	4317      	orrs	r7, r2
 8000746:	42b1      	cmp	r1, r6
 8000748:	da00      	bge.n	800074c <__aeabi_dadd+0xd0>
 800074a:	e0ff      	b.n	800094c <__aeabi_dadd+0x2d0>
 800074c:	1b89      	subs	r1, r1, r6
 800074e:	1c4b      	adds	r3, r1, #1
 8000750:	2b1f      	cmp	r3, #31
 8000752:	dd00      	ble.n	8000756 <__aeabi_dadd+0xda>
 8000754:	e0a8      	b.n	80008a8 <__aeabi_dadd+0x22c>
 8000756:	2220      	movs	r2, #32
 8000758:	0039      	movs	r1, r7
 800075a:	1ad2      	subs	r2, r2, r3
 800075c:	0020      	movs	r0, r4
 800075e:	4094      	lsls	r4, r2
 8000760:	4091      	lsls	r1, r2
 8000762:	40d8      	lsrs	r0, r3
 8000764:	1e62      	subs	r2, r4, #1
 8000766:	4194      	sbcs	r4, r2
 8000768:	40df      	lsrs	r7, r3
 800076a:	2600      	movs	r6, #0
 800076c:	4301      	orrs	r1, r0
 800076e:	430c      	orrs	r4, r1
 8000770:	0763      	lsls	r3, r4, #29
 8000772:	d009      	beq.n	8000788 <__aeabi_dadd+0x10c>
 8000774:	230f      	movs	r3, #15
 8000776:	4023      	ands	r3, r4
 8000778:	2b04      	cmp	r3, #4
 800077a:	d005      	beq.n	8000788 <__aeabi_dadd+0x10c>
 800077c:	1d23      	adds	r3, r4, #4
 800077e:	42a3      	cmp	r3, r4
 8000780:	41a4      	sbcs	r4, r4
 8000782:	4264      	negs	r4, r4
 8000784:	193f      	adds	r7, r7, r4
 8000786:	001c      	movs	r4, r3
 8000788:	023b      	lsls	r3, r7, #8
 800078a:	d400      	bmi.n	800078e <__aeabi_dadd+0x112>
 800078c:	e09e      	b.n	80008cc <__aeabi_dadd+0x250>
 800078e:	4b95      	ldr	r3, [pc, #596]	; (80009e4 <__aeabi_dadd+0x368>)
 8000790:	3601      	adds	r6, #1
 8000792:	429e      	cmp	r6, r3
 8000794:	d100      	bne.n	8000798 <__aeabi_dadd+0x11c>
 8000796:	e0b7      	b.n	8000908 <__aeabi_dadd+0x28c>
 8000798:	4a93      	ldr	r2, [pc, #588]	; (80009e8 <__aeabi_dadd+0x36c>)
 800079a:	08e4      	lsrs	r4, r4, #3
 800079c:	4017      	ands	r7, r2
 800079e:	077b      	lsls	r3, r7, #29
 80007a0:	0571      	lsls	r1, r6, #21
 80007a2:	027f      	lsls	r7, r7, #9
 80007a4:	4323      	orrs	r3, r4
 80007a6:	0b3f      	lsrs	r7, r7, #12
 80007a8:	0d4a      	lsrs	r2, r1, #21
 80007aa:	0512      	lsls	r2, r2, #20
 80007ac:	433a      	orrs	r2, r7
 80007ae:	07ed      	lsls	r5, r5, #31
 80007b0:	432a      	orrs	r2, r5
 80007b2:	0018      	movs	r0, r3
 80007b4:	0011      	movs	r1, r2
 80007b6:	bce0      	pop	{r5, r6, r7}
 80007b8:	46ba      	mov	sl, r7
 80007ba:	46b1      	mov	r9, r6
 80007bc:	46a8      	mov	r8, r5
 80007be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007c0:	2c00      	cmp	r4, #0
 80007c2:	d04b      	beq.n	800085c <__aeabi_dadd+0x1e0>
 80007c4:	464c      	mov	r4, r9
 80007c6:	1ba4      	subs	r4, r4, r6
 80007c8:	46a4      	mov	ip, r4
 80007ca:	2e00      	cmp	r6, #0
 80007cc:	d000      	beq.n	80007d0 <__aeabi_dadd+0x154>
 80007ce:	e123      	b.n	8000a18 <__aeabi_dadd+0x39c>
 80007d0:	0004      	movs	r4, r0
 80007d2:	431c      	orrs	r4, r3
 80007d4:	d100      	bne.n	80007d8 <__aeabi_dadd+0x15c>
 80007d6:	e1af      	b.n	8000b38 <__aeabi_dadd+0x4bc>
 80007d8:	4662      	mov	r2, ip
 80007da:	1e54      	subs	r4, r2, #1
 80007dc:	2a01      	cmp	r2, #1
 80007de:	d100      	bne.n	80007e2 <__aeabi_dadd+0x166>
 80007e0:	e215      	b.n	8000c0e <__aeabi_dadd+0x592>
 80007e2:	4d80      	ldr	r5, [pc, #512]	; (80009e4 <__aeabi_dadd+0x368>)
 80007e4:	45ac      	cmp	ip, r5
 80007e6:	d100      	bne.n	80007ea <__aeabi_dadd+0x16e>
 80007e8:	e1c8      	b.n	8000b7c <__aeabi_dadd+0x500>
 80007ea:	46a4      	mov	ip, r4
 80007ec:	e11b      	b.n	8000a26 <__aeabi_dadd+0x3aa>
 80007ee:	464a      	mov	r2, r9
 80007f0:	1ab2      	subs	r2, r6, r2
 80007f2:	4694      	mov	ip, r2
 80007f4:	2a00      	cmp	r2, #0
 80007f6:	dc00      	bgt.n	80007fa <__aeabi_dadd+0x17e>
 80007f8:	e0ac      	b.n	8000954 <__aeabi_dadd+0x2d8>
 80007fa:	464a      	mov	r2, r9
 80007fc:	2a00      	cmp	r2, #0
 80007fe:	d043      	beq.n	8000888 <__aeabi_dadd+0x20c>
 8000800:	4a78      	ldr	r2, [pc, #480]	; (80009e4 <__aeabi_dadd+0x368>)
 8000802:	4296      	cmp	r6, r2
 8000804:	d100      	bne.n	8000808 <__aeabi_dadd+0x18c>
 8000806:	e1af      	b.n	8000b68 <__aeabi_dadd+0x4ec>
 8000808:	2280      	movs	r2, #128	; 0x80
 800080a:	003c      	movs	r4, r7
 800080c:	0412      	lsls	r2, r2, #16
 800080e:	4314      	orrs	r4, r2
 8000810:	46a0      	mov	r8, r4
 8000812:	4662      	mov	r2, ip
 8000814:	2a38      	cmp	r2, #56	; 0x38
 8000816:	dc67      	bgt.n	80008e8 <__aeabi_dadd+0x26c>
 8000818:	2a1f      	cmp	r2, #31
 800081a:	dc00      	bgt.n	800081e <__aeabi_dadd+0x1a2>
 800081c:	e15f      	b.n	8000ade <__aeabi_dadd+0x462>
 800081e:	4647      	mov	r7, r8
 8000820:	3a20      	subs	r2, #32
 8000822:	40d7      	lsrs	r7, r2
 8000824:	4662      	mov	r2, ip
 8000826:	2a20      	cmp	r2, #32
 8000828:	d005      	beq.n	8000836 <__aeabi_dadd+0x1ba>
 800082a:	4664      	mov	r4, ip
 800082c:	2240      	movs	r2, #64	; 0x40
 800082e:	1b12      	subs	r2, r2, r4
 8000830:	4644      	mov	r4, r8
 8000832:	4094      	lsls	r4, r2
 8000834:	4321      	orrs	r1, r4
 8000836:	1e4a      	subs	r2, r1, #1
 8000838:	4191      	sbcs	r1, r2
 800083a:	000c      	movs	r4, r1
 800083c:	433c      	orrs	r4, r7
 800083e:	e057      	b.n	80008f0 <__aeabi_dadd+0x274>
 8000840:	003a      	movs	r2, r7
 8000842:	430a      	orrs	r2, r1
 8000844:	d100      	bne.n	8000848 <__aeabi_dadd+0x1cc>
 8000846:	e105      	b.n	8000a54 <__aeabi_dadd+0x3d8>
 8000848:	0022      	movs	r2, r4
 800084a:	3a01      	subs	r2, #1
 800084c:	2c01      	cmp	r4, #1
 800084e:	d100      	bne.n	8000852 <__aeabi_dadd+0x1d6>
 8000850:	e182      	b.n	8000b58 <__aeabi_dadd+0x4dc>
 8000852:	4c64      	ldr	r4, [pc, #400]	; (80009e4 <__aeabi_dadd+0x368>)
 8000854:	45a4      	cmp	ip, r4
 8000856:	d05b      	beq.n	8000910 <__aeabi_dadd+0x294>
 8000858:	4694      	mov	ip, r2
 800085a:	e741      	b.n	80006e0 <__aeabi_dadd+0x64>
 800085c:	4c63      	ldr	r4, [pc, #396]	; (80009ec <__aeabi_dadd+0x370>)
 800085e:	1c77      	adds	r7, r6, #1
 8000860:	4227      	tst	r7, r4
 8000862:	d000      	beq.n	8000866 <__aeabi_dadd+0x1ea>
 8000864:	e0c4      	b.n	80009f0 <__aeabi_dadd+0x374>
 8000866:	0004      	movs	r4, r0
 8000868:	431c      	orrs	r4, r3
 800086a:	2e00      	cmp	r6, #0
 800086c:	d000      	beq.n	8000870 <__aeabi_dadd+0x1f4>
 800086e:	e169      	b.n	8000b44 <__aeabi_dadd+0x4c8>
 8000870:	2c00      	cmp	r4, #0
 8000872:	d100      	bne.n	8000876 <__aeabi_dadd+0x1fa>
 8000874:	e1bf      	b.n	8000bf6 <__aeabi_dadd+0x57a>
 8000876:	4644      	mov	r4, r8
 8000878:	430c      	orrs	r4, r1
 800087a:	d000      	beq.n	800087e <__aeabi_dadd+0x202>
 800087c:	e1d0      	b.n	8000c20 <__aeabi_dadd+0x5a4>
 800087e:	0742      	lsls	r2, r0, #29
 8000880:	08db      	lsrs	r3, r3, #3
 8000882:	4313      	orrs	r3, r2
 8000884:	08c0      	lsrs	r0, r0, #3
 8000886:	e029      	b.n	80008dc <__aeabi_dadd+0x260>
 8000888:	003a      	movs	r2, r7
 800088a:	430a      	orrs	r2, r1
 800088c:	d100      	bne.n	8000890 <__aeabi_dadd+0x214>
 800088e:	e170      	b.n	8000b72 <__aeabi_dadd+0x4f6>
 8000890:	4662      	mov	r2, ip
 8000892:	4664      	mov	r4, ip
 8000894:	3a01      	subs	r2, #1
 8000896:	2c01      	cmp	r4, #1
 8000898:	d100      	bne.n	800089c <__aeabi_dadd+0x220>
 800089a:	e0e0      	b.n	8000a5e <__aeabi_dadd+0x3e2>
 800089c:	4c51      	ldr	r4, [pc, #324]	; (80009e4 <__aeabi_dadd+0x368>)
 800089e:	45a4      	cmp	ip, r4
 80008a0:	d100      	bne.n	80008a4 <__aeabi_dadd+0x228>
 80008a2:	e161      	b.n	8000b68 <__aeabi_dadd+0x4ec>
 80008a4:	4694      	mov	ip, r2
 80008a6:	e7b4      	b.n	8000812 <__aeabi_dadd+0x196>
 80008a8:	003a      	movs	r2, r7
 80008aa:	391f      	subs	r1, #31
 80008ac:	40ca      	lsrs	r2, r1
 80008ae:	0011      	movs	r1, r2
 80008b0:	2b20      	cmp	r3, #32
 80008b2:	d003      	beq.n	80008bc <__aeabi_dadd+0x240>
 80008b4:	2240      	movs	r2, #64	; 0x40
 80008b6:	1ad3      	subs	r3, r2, r3
 80008b8:	409f      	lsls	r7, r3
 80008ba:	433c      	orrs	r4, r7
 80008bc:	1e63      	subs	r3, r4, #1
 80008be:	419c      	sbcs	r4, r3
 80008c0:	2700      	movs	r7, #0
 80008c2:	2600      	movs	r6, #0
 80008c4:	430c      	orrs	r4, r1
 80008c6:	0763      	lsls	r3, r4, #29
 80008c8:	d000      	beq.n	80008cc <__aeabi_dadd+0x250>
 80008ca:	e753      	b.n	8000774 <__aeabi_dadd+0xf8>
 80008cc:	46b4      	mov	ip, r6
 80008ce:	08e4      	lsrs	r4, r4, #3
 80008d0:	077b      	lsls	r3, r7, #29
 80008d2:	4323      	orrs	r3, r4
 80008d4:	08f8      	lsrs	r0, r7, #3
 80008d6:	4a43      	ldr	r2, [pc, #268]	; (80009e4 <__aeabi_dadd+0x368>)
 80008d8:	4594      	cmp	ip, r2
 80008da:	d01d      	beq.n	8000918 <__aeabi_dadd+0x29c>
 80008dc:	4662      	mov	r2, ip
 80008de:	0307      	lsls	r7, r0, #12
 80008e0:	0552      	lsls	r2, r2, #21
 80008e2:	0b3f      	lsrs	r7, r7, #12
 80008e4:	0d52      	lsrs	r2, r2, #21
 80008e6:	e760      	b.n	80007aa <__aeabi_dadd+0x12e>
 80008e8:	4644      	mov	r4, r8
 80008ea:	430c      	orrs	r4, r1
 80008ec:	1e62      	subs	r2, r4, #1
 80008ee:	4194      	sbcs	r4, r2
 80008f0:	18e4      	adds	r4, r4, r3
 80008f2:	429c      	cmp	r4, r3
 80008f4:	419b      	sbcs	r3, r3
 80008f6:	425f      	negs	r7, r3
 80008f8:	183f      	adds	r7, r7, r0
 80008fa:	023b      	lsls	r3, r7, #8
 80008fc:	d5e3      	bpl.n	80008c6 <__aeabi_dadd+0x24a>
 80008fe:	4b39      	ldr	r3, [pc, #228]	; (80009e4 <__aeabi_dadd+0x368>)
 8000900:	3601      	adds	r6, #1
 8000902:	429e      	cmp	r6, r3
 8000904:	d000      	beq.n	8000908 <__aeabi_dadd+0x28c>
 8000906:	e0b5      	b.n	8000a74 <__aeabi_dadd+0x3f8>
 8000908:	0032      	movs	r2, r6
 800090a:	2700      	movs	r7, #0
 800090c:	2300      	movs	r3, #0
 800090e:	e74c      	b.n	80007aa <__aeabi_dadd+0x12e>
 8000910:	0742      	lsls	r2, r0, #29
 8000912:	08db      	lsrs	r3, r3, #3
 8000914:	4313      	orrs	r3, r2
 8000916:	08c0      	lsrs	r0, r0, #3
 8000918:	001a      	movs	r2, r3
 800091a:	4302      	orrs	r2, r0
 800091c:	d100      	bne.n	8000920 <__aeabi_dadd+0x2a4>
 800091e:	e1e1      	b.n	8000ce4 <__aeabi_dadd+0x668>
 8000920:	2780      	movs	r7, #128	; 0x80
 8000922:	033f      	lsls	r7, r7, #12
 8000924:	4307      	orrs	r7, r0
 8000926:	033f      	lsls	r7, r7, #12
 8000928:	4a2e      	ldr	r2, [pc, #184]	; (80009e4 <__aeabi_dadd+0x368>)
 800092a:	0b3f      	lsrs	r7, r7, #12
 800092c:	e73d      	b.n	80007aa <__aeabi_dadd+0x12e>
 800092e:	0020      	movs	r0, r4
 8000930:	f001 fd5a 	bl	80023e8 <__clzsi2>
 8000934:	0001      	movs	r1, r0
 8000936:	3118      	adds	r1, #24
 8000938:	291f      	cmp	r1, #31
 800093a:	dc00      	bgt.n	800093e <__aeabi_dadd+0x2c2>
 800093c:	e6fc      	b.n	8000738 <__aeabi_dadd+0xbc>
 800093e:	3808      	subs	r0, #8
 8000940:	4084      	lsls	r4, r0
 8000942:	0027      	movs	r7, r4
 8000944:	2400      	movs	r4, #0
 8000946:	42b1      	cmp	r1, r6
 8000948:	db00      	blt.n	800094c <__aeabi_dadd+0x2d0>
 800094a:	e6ff      	b.n	800074c <__aeabi_dadd+0xd0>
 800094c:	4a26      	ldr	r2, [pc, #152]	; (80009e8 <__aeabi_dadd+0x36c>)
 800094e:	1a76      	subs	r6, r6, r1
 8000950:	4017      	ands	r7, r2
 8000952:	e70d      	b.n	8000770 <__aeabi_dadd+0xf4>
 8000954:	2a00      	cmp	r2, #0
 8000956:	d02f      	beq.n	80009b8 <__aeabi_dadd+0x33c>
 8000958:	464a      	mov	r2, r9
 800095a:	1b92      	subs	r2, r2, r6
 800095c:	4694      	mov	ip, r2
 800095e:	2e00      	cmp	r6, #0
 8000960:	d100      	bne.n	8000964 <__aeabi_dadd+0x2e8>
 8000962:	e0ad      	b.n	8000ac0 <__aeabi_dadd+0x444>
 8000964:	4a1f      	ldr	r2, [pc, #124]	; (80009e4 <__aeabi_dadd+0x368>)
 8000966:	4591      	cmp	r9, r2
 8000968:	d100      	bne.n	800096c <__aeabi_dadd+0x2f0>
 800096a:	e10f      	b.n	8000b8c <__aeabi_dadd+0x510>
 800096c:	2280      	movs	r2, #128	; 0x80
 800096e:	0412      	lsls	r2, r2, #16
 8000970:	4310      	orrs	r0, r2
 8000972:	4662      	mov	r2, ip
 8000974:	2a38      	cmp	r2, #56	; 0x38
 8000976:	dd00      	ble.n	800097a <__aeabi_dadd+0x2fe>
 8000978:	e10f      	b.n	8000b9a <__aeabi_dadd+0x51e>
 800097a:	2a1f      	cmp	r2, #31
 800097c:	dd00      	ble.n	8000980 <__aeabi_dadd+0x304>
 800097e:	e180      	b.n	8000c82 <__aeabi_dadd+0x606>
 8000980:	4664      	mov	r4, ip
 8000982:	2220      	movs	r2, #32
 8000984:	001e      	movs	r6, r3
 8000986:	1b12      	subs	r2, r2, r4
 8000988:	4667      	mov	r7, ip
 800098a:	0004      	movs	r4, r0
 800098c:	4093      	lsls	r3, r2
 800098e:	4094      	lsls	r4, r2
 8000990:	40fe      	lsrs	r6, r7
 8000992:	1e5a      	subs	r2, r3, #1
 8000994:	4193      	sbcs	r3, r2
 8000996:	40f8      	lsrs	r0, r7
 8000998:	4334      	orrs	r4, r6
 800099a:	431c      	orrs	r4, r3
 800099c:	4480      	add	r8, r0
 800099e:	1864      	adds	r4, r4, r1
 80009a0:	428c      	cmp	r4, r1
 80009a2:	41bf      	sbcs	r7, r7
 80009a4:	427f      	negs	r7, r7
 80009a6:	464e      	mov	r6, r9
 80009a8:	4447      	add	r7, r8
 80009aa:	e7a6      	b.n	80008fa <__aeabi_dadd+0x27e>
 80009ac:	4642      	mov	r2, r8
 80009ae:	430a      	orrs	r2, r1
 80009b0:	0011      	movs	r1, r2
 80009b2:	1e4a      	subs	r2, r1, #1
 80009b4:	4191      	sbcs	r1, r2
 80009b6:	e6ad      	b.n	8000714 <__aeabi_dadd+0x98>
 80009b8:	4c0c      	ldr	r4, [pc, #48]	; (80009ec <__aeabi_dadd+0x370>)
 80009ba:	1c72      	adds	r2, r6, #1
 80009bc:	4222      	tst	r2, r4
 80009be:	d000      	beq.n	80009c2 <__aeabi_dadd+0x346>
 80009c0:	e0a1      	b.n	8000b06 <__aeabi_dadd+0x48a>
 80009c2:	0002      	movs	r2, r0
 80009c4:	431a      	orrs	r2, r3
 80009c6:	2e00      	cmp	r6, #0
 80009c8:	d000      	beq.n	80009cc <__aeabi_dadd+0x350>
 80009ca:	e0fa      	b.n	8000bc2 <__aeabi_dadd+0x546>
 80009cc:	2a00      	cmp	r2, #0
 80009ce:	d100      	bne.n	80009d2 <__aeabi_dadd+0x356>
 80009d0:	e145      	b.n	8000c5e <__aeabi_dadd+0x5e2>
 80009d2:	003a      	movs	r2, r7
 80009d4:	430a      	orrs	r2, r1
 80009d6:	d000      	beq.n	80009da <__aeabi_dadd+0x35e>
 80009d8:	e146      	b.n	8000c68 <__aeabi_dadd+0x5ec>
 80009da:	0742      	lsls	r2, r0, #29
 80009dc:	08db      	lsrs	r3, r3, #3
 80009de:	4313      	orrs	r3, r2
 80009e0:	08c0      	lsrs	r0, r0, #3
 80009e2:	e77b      	b.n	80008dc <__aeabi_dadd+0x260>
 80009e4:	000007ff 	.word	0x000007ff
 80009e8:	ff7fffff 	.word	0xff7fffff
 80009ec:	000007fe 	.word	0x000007fe
 80009f0:	4647      	mov	r7, r8
 80009f2:	1a5c      	subs	r4, r3, r1
 80009f4:	1bc2      	subs	r2, r0, r7
 80009f6:	42a3      	cmp	r3, r4
 80009f8:	41bf      	sbcs	r7, r7
 80009fa:	427f      	negs	r7, r7
 80009fc:	46b9      	mov	r9, r7
 80009fe:	0017      	movs	r7, r2
 8000a00:	464a      	mov	r2, r9
 8000a02:	1abf      	subs	r7, r7, r2
 8000a04:	023a      	lsls	r2, r7, #8
 8000a06:	d500      	bpl.n	8000a0a <__aeabi_dadd+0x38e>
 8000a08:	e08d      	b.n	8000b26 <__aeabi_dadd+0x4aa>
 8000a0a:	0023      	movs	r3, r4
 8000a0c:	433b      	orrs	r3, r7
 8000a0e:	d000      	beq.n	8000a12 <__aeabi_dadd+0x396>
 8000a10:	e68a      	b.n	8000728 <__aeabi_dadd+0xac>
 8000a12:	2000      	movs	r0, #0
 8000a14:	2500      	movs	r5, #0
 8000a16:	e761      	b.n	80008dc <__aeabi_dadd+0x260>
 8000a18:	4cb4      	ldr	r4, [pc, #720]	; (8000cec <__aeabi_dadd+0x670>)
 8000a1a:	45a1      	cmp	r9, r4
 8000a1c:	d100      	bne.n	8000a20 <__aeabi_dadd+0x3a4>
 8000a1e:	e0ad      	b.n	8000b7c <__aeabi_dadd+0x500>
 8000a20:	2480      	movs	r4, #128	; 0x80
 8000a22:	0424      	lsls	r4, r4, #16
 8000a24:	4320      	orrs	r0, r4
 8000a26:	4664      	mov	r4, ip
 8000a28:	2c38      	cmp	r4, #56	; 0x38
 8000a2a:	dc3d      	bgt.n	8000aa8 <__aeabi_dadd+0x42c>
 8000a2c:	4662      	mov	r2, ip
 8000a2e:	2c1f      	cmp	r4, #31
 8000a30:	dd00      	ble.n	8000a34 <__aeabi_dadd+0x3b8>
 8000a32:	e0b7      	b.n	8000ba4 <__aeabi_dadd+0x528>
 8000a34:	2520      	movs	r5, #32
 8000a36:	001e      	movs	r6, r3
 8000a38:	1b2d      	subs	r5, r5, r4
 8000a3a:	0004      	movs	r4, r0
 8000a3c:	40ab      	lsls	r3, r5
 8000a3e:	40ac      	lsls	r4, r5
 8000a40:	40d6      	lsrs	r6, r2
 8000a42:	40d0      	lsrs	r0, r2
 8000a44:	4642      	mov	r2, r8
 8000a46:	1e5d      	subs	r5, r3, #1
 8000a48:	41ab      	sbcs	r3, r5
 8000a4a:	4334      	orrs	r4, r6
 8000a4c:	1a12      	subs	r2, r2, r0
 8000a4e:	4690      	mov	r8, r2
 8000a50:	4323      	orrs	r3, r4
 8000a52:	e02c      	b.n	8000aae <__aeabi_dadd+0x432>
 8000a54:	0742      	lsls	r2, r0, #29
 8000a56:	08db      	lsrs	r3, r3, #3
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	08c0      	lsrs	r0, r0, #3
 8000a5c:	e73b      	b.n	80008d6 <__aeabi_dadd+0x25a>
 8000a5e:	185c      	adds	r4, r3, r1
 8000a60:	429c      	cmp	r4, r3
 8000a62:	419b      	sbcs	r3, r3
 8000a64:	4440      	add	r0, r8
 8000a66:	425b      	negs	r3, r3
 8000a68:	18c7      	adds	r7, r0, r3
 8000a6a:	2601      	movs	r6, #1
 8000a6c:	023b      	lsls	r3, r7, #8
 8000a6e:	d400      	bmi.n	8000a72 <__aeabi_dadd+0x3f6>
 8000a70:	e729      	b.n	80008c6 <__aeabi_dadd+0x24a>
 8000a72:	2602      	movs	r6, #2
 8000a74:	4a9e      	ldr	r2, [pc, #632]	; (8000cf0 <__aeabi_dadd+0x674>)
 8000a76:	0863      	lsrs	r3, r4, #1
 8000a78:	4017      	ands	r7, r2
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	4014      	ands	r4, r2
 8000a7e:	431c      	orrs	r4, r3
 8000a80:	07fb      	lsls	r3, r7, #31
 8000a82:	431c      	orrs	r4, r3
 8000a84:	087f      	lsrs	r7, r7, #1
 8000a86:	e673      	b.n	8000770 <__aeabi_dadd+0xf4>
 8000a88:	4644      	mov	r4, r8
 8000a8a:	3a20      	subs	r2, #32
 8000a8c:	40d4      	lsrs	r4, r2
 8000a8e:	4662      	mov	r2, ip
 8000a90:	2a20      	cmp	r2, #32
 8000a92:	d005      	beq.n	8000aa0 <__aeabi_dadd+0x424>
 8000a94:	4667      	mov	r7, ip
 8000a96:	2240      	movs	r2, #64	; 0x40
 8000a98:	1bd2      	subs	r2, r2, r7
 8000a9a:	4647      	mov	r7, r8
 8000a9c:	4097      	lsls	r7, r2
 8000a9e:	4339      	orrs	r1, r7
 8000aa0:	1e4a      	subs	r2, r1, #1
 8000aa2:	4191      	sbcs	r1, r2
 8000aa4:	4321      	orrs	r1, r4
 8000aa6:	e635      	b.n	8000714 <__aeabi_dadd+0x98>
 8000aa8:	4303      	orrs	r3, r0
 8000aaa:	1e58      	subs	r0, r3, #1
 8000aac:	4183      	sbcs	r3, r0
 8000aae:	1acc      	subs	r4, r1, r3
 8000ab0:	42a1      	cmp	r1, r4
 8000ab2:	41bf      	sbcs	r7, r7
 8000ab4:	4643      	mov	r3, r8
 8000ab6:	427f      	negs	r7, r7
 8000ab8:	4655      	mov	r5, sl
 8000aba:	464e      	mov	r6, r9
 8000abc:	1bdf      	subs	r7, r3, r7
 8000abe:	e62e      	b.n	800071e <__aeabi_dadd+0xa2>
 8000ac0:	0002      	movs	r2, r0
 8000ac2:	431a      	orrs	r2, r3
 8000ac4:	d100      	bne.n	8000ac8 <__aeabi_dadd+0x44c>
 8000ac6:	e0bd      	b.n	8000c44 <__aeabi_dadd+0x5c8>
 8000ac8:	4662      	mov	r2, ip
 8000aca:	4664      	mov	r4, ip
 8000acc:	3a01      	subs	r2, #1
 8000ace:	2c01      	cmp	r4, #1
 8000ad0:	d100      	bne.n	8000ad4 <__aeabi_dadd+0x458>
 8000ad2:	e0e5      	b.n	8000ca0 <__aeabi_dadd+0x624>
 8000ad4:	4c85      	ldr	r4, [pc, #532]	; (8000cec <__aeabi_dadd+0x670>)
 8000ad6:	45a4      	cmp	ip, r4
 8000ad8:	d058      	beq.n	8000b8c <__aeabi_dadd+0x510>
 8000ada:	4694      	mov	ip, r2
 8000adc:	e749      	b.n	8000972 <__aeabi_dadd+0x2f6>
 8000ade:	4664      	mov	r4, ip
 8000ae0:	2220      	movs	r2, #32
 8000ae2:	1b12      	subs	r2, r2, r4
 8000ae4:	4644      	mov	r4, r8
 8000ae6:	4094      	lsls	r4, r2
 8000ae8:	000f      	movs	r7, r1
 8000aea:	46a1      	mov	r9, r4
 8000aec:	4664      	mov	r4, ip
 8000aee:	4091      	lsls	r1, r2
 8000af0:	40e7      	lsrs	r7, r4
 8000af2:	464c      	mov	r4, r9
 8000af4:	1e4a      	subs	r2, r1, #1
 8000af6:	4191      	sbcs	r1, r2
 8000af8:	433c      	orrs	r4, r7
 8000afa:	4642      	mov	r2, r8
 8000afc:	430c      	orrs	r4, r1
 8000afe:	4661      	mov	r1, ip
 8000b00:	40ca      	lsrs	r2, r1
 8000b02:	1880      	adds	r0, r0, r2
 8000b04:	e6f4      	b.n	80008f0 <__aeabi_dadd+0x274>
 8000b06:	4c79      	ldr	r4, [pc, #484]	; (8000cec <__aeabi_dadd+0x670>)
 8000b08:	42a2      	cmp	r2, r4
 8000b0a:	d100      	bne.n	8000b0e <__aeabi_dadd+0x492>
 8000b0c:	e6fd      	b.n	800090a <__aeabi_dadd+0x28e>
 8000b0e:	1859      	adds	r1, r3, r1
 8000b10:	4299      	cmp	r1, r3
 8000b12:	419b      	sbcs	r3, r3
 8000b14:	4440      	add	r0, r8
 8000b16:	425f      	negs	r7, r3
 8000b18:	19c7      	adds	r7, r0, r7
 8000b1a:	07fc      	lsls	r4, r7, #31
 8000b1c:	0849      	lsrs	r1, r1, #1
 8000b1e:	0016      	movs	r6, r2
 8000b20:	430c      	orrs	r4, r1
 8000b22:	087f      	lsrs	r7, r7, #1
 8000b24:	e6cf      	b.n	80008c6 <__aeabi_dadd+0x24a>
 8000b26:	1acc      	subs	r4, r1, r3
 8000b28:	42a1      	cmp	r1, r4
 8000b2a:	41bf      	sbcs	r7, r7
 8000b2c:	4643      	mov	r3, r8
 8000b2e:	427f      	negs	r7, r7
 8000b30:	1a18      	subs	r0, r3, r0
 8000b32:	4655      	mov	r5, sl
 8000b34:	1bc7      	subs	r7, r0, r7
 8000b36:	e5f7      	b.n	8000728 <__aeabi_dadd+0xac>
 8000b38:	08c9      	lsrs	r1, r1, #3
 8000b3a:	077b      	lsls	r3, r7, #29
 8000b3c:	4655      	mov	r5, sl
 8000b3e:	430b      	orrs	r3, r1
 8000b40:	08f8      	lsrs	r0, r7, #3
 8000b42:	e6c8      	b.n	80008d6 <__aeabi_dadd+0x25a>
 8000b44:	2c00      	cmp	r4, #0
 8000b46:	d000      	beq.n	8000b4a <__aeabi_dadd+0x4ce>
 8000b48:	e081      	b.n	8000c4e <__aeabi_dadd+0x5d2>
 8000b4a:	4643      	mov	r3, r8
 8000b4c:	430b      	orrs	r3, r1
 8000b4e:	d115      	bne.n	8000b7c <__aeabi_dadd+0x500>
 8000b50:	2080      	movs	r0, #128	; 0x80
 8000b52:	2500      	movs	r5, #0
 8000b54:	0300      	lsls	r0, r0, #12
 8000b56:	e6e3      	b.n	8000920 <__aeabi_dadd+0x2a4>
 8000b58:	1a5c      	subs	r4, r3, r1
 8000b5a:	42a3      	cmp	r3, r4
 8000b5c:	419b      	sbcs	r3, r3
 8000b5e:	1bc7      	subs	r7, r0, r7
 8000b60:	425b      	negs	r3, r3
 8000b62:	2601      	movs	r6, #1
 8000b64:	1aff      	subs	r7, r7, r3
 8000b66:	e5da      	b.n	800071e <__aeabi_dadd+0xa2>
 8000b68:	0742      	lsls	r2, r0, #29
 8000b6a:	08db      	lsrs	r3, r3, #3
 8000b6c:	4313      	orrs	r3, r2
 8000b6e:	08c0      	lsrs	r0, r0, #3
 8000b70:	e6d2      	b.n	8000918 <__aeabi_dadd+0x29c>
 8000b72:	0742      	lsls	r2, r0, #29
 8000b74:	08db      	lsrs	r3, r3, #3
 8000b76:	4313      	orrs	r3, r2
 8000b78:	08c0      	lsrs	r0, r0, #3
 8000b7a:	e6ac      	b.n	80008d6 <__aeabi_dadd+0x25a>
 8000b7c:	4643      	mov	r3, r8
 8000b7e:	4642      	mov	r2, r8
 8000b80:	08c9      	lsrs	r1, r1, #3
 8000b82:	075b      	lsls	r3, r3, #29
 8000b84:	4655      	mov	r5, sl
 8000b86:	430b      	orrs	r3, r1
 8000b88:	08d0      	lsrs	r0, r2, #3
 8000b8a:	e6c5      	b.n	8000918 <__aeabi_dadd+0x29c>
 8000b8c:	4643      	mov	r3, r8
 8000b8e:	4642      	mov	r2, r8
 8000b90:	075b      	lsls	r3, r3, #29
 8000b92:	08c9      	lsrs	r1, r1, #3
 8000b94:	430b      	orrs	r3, r1
 8000b96:	08d0      	lsrs	r0, r2, #3
 8000b98:	e6be      	b.n	8000918 <__aeabi_dadd+0x29c>
 8000b9a:	4303      	orrs	r3, r0
 8000b9c:	001c      	movs	r4, r3
 8000b9e:	1e63      	subs	r3, r4, #1
 8000ba0:	419c      	sbcs	r4, r3
 8000ba2:	e6fc      	b.n	800099e <__aeabi_dadd+0x322>
 8000ba4:	0002      	movs	r2, r0
 8000ba6:	3c20      	subs	r4, #32
 8000ba8:	40e2      	lsrs	r2, r4
 8000baa:	0014      	movs	r4, r2
 8000bac:	4662      	mov	r2, ip
 8000bae:	2a20      	cmp	r2, #32
 8000bb0:	d003      	beq.n	8000bba <__aeabi_dadd+0x53e>
 8000bb2:	2540      	movs	r5, #64	; 0x40
 8000bb4:	1aad      	subs	r5, r5, r2
 8000bb6:	40a8      	lsls	r0, r5
 8000bb8:	4303      	orrs	r3, r0
 8000bba:	1e58      	subs	r0, r3, #1
 8000bbc:	4183      	sbcs	r3, r0
 8000bbe:	4323      	orrs	r3, r4
 8000bc0:	e775      	b.n	8000aae <__aeabi_dadd+0x432>
 8000bc2:	2a00      	cmp	r2, #0
 8000bc4:	d0e2      	beq.n	8000b8c <__aeabi_dadd+0x510>
 8000bc6:	003a      	movs	r2, r7
 8000bc8:	430a      	orrs	r2, r1
 8000bca:	d0cd      	beq.n	8000b68 <__aeabi_dadd+0x4ec>
 8000bcc:	0742      	lsls	r2, r0, #29
 8000bce:	08db      	lsrs	r3, r3, #3
 8000bd0:	4313      	orrs	r3, r2
 8000bd2:	2280      	movs	r2, #128	; 0x80
 8000bd4:	08c0      	lsrs	r0, r0, #3
 8000bd6:	0312      	lsls	r2, r2, #12
 8000bd8:	4210      	tst	r0, r2
 8000bda:	d006      	beq.n	8000bea <__aeabi_dadd+0x56e>
 8000bdc:	08fc      	lsrs	r4, r7, #3
 8000bde:	4214      	tst	r4, r2
 8000be0:	d103      	bne.n	8000bea <__aeabi_dadd+0x56e>
 8000be2:	0020      	movs	r0, r4
 8000be4:	08cb      	lsrs	r3, r1, #3
 8000be6:	077a      	lsls	r2, r7, #29
 8000be8:	4313      	orrs	r3, r2
 8000bea:	0f5a      	lsrs	r2, r3, #29
 8000bec:	00db      	lsls	r3, r3, #3
 8000bee:	0752      	lsls	r2, r2, #29
 8000bf0:	08db      	lsrs	r3, r3, #3
 8000bf2:	4313      	orrs	r3, r2
 8000bf4:	e690      	b.n	8000918 <__aeabi_dadd+0x29c>
 8000bf6:	4643      	mov	r3, r8
 8000bf8:	430b      	orrs	r3, r1
 8000bfa:	d100      	bne.n	8000bfe <__aeabi_dadd+0x582>
 8000bfc:	e709      	b.n	8000a12 <__aeabi_dadd+0x396>
 8000bfe:	4643      	mov	r3, r8
 8000c00:	4642      	mov	r2, r8
 8000c02:	08c9      	lsrs	r1, r1, #3
 8000c04:	075b      	lsls	r3, r3, #29
 8000c06:	4655      	mov	r5, sl
 8000c08:	430b      	orrs	r3, r1
 8000c0a:	08d0      	lsrs	r0, r2, #3
 8000c0c:	e666      	b.n	80008dc <__aeabi_dadd+0x260>
 8000c0e:	1acc      	subs	r4, r1, r3
 8000c10:	42a1      	cmp	r1, r4
 8000c12:	4189      	sbcs	r1, r1
 8000c14:	1a3f      	subs	r7, r7, r0
 8000c16:	4249      	negs	r1, r1
 8000c18:	4655      	mov	r5, sl
 8000c1a:	2601      	movs	r6, #1
 8000c1c:	1a7f      	subs	r7, r7, r1
 8000c1e:	e57e      	b.n	800071e <__aeabi_dadd+0xa2>
 8000c20:	4642      	mov	r2, r8
 8000c22:	1a5c      	subs	r4, r3, r1
 8000c24:	1a87      	subs	r7, r0, r2
 8000c26:	42a3      	cmp	r3, r4
 8000c28:	4192      	sbcs	r2, r2
 8000c2a:	4252      	negs	r2, r2
 8000c2c:	1abf      	subs	r7, r7, r2
 8000c2e:	023a      	lsls	r2, r7, #8
 8000c30:	d53d      	bpl.n	8000cae <__aeabi_dadd+0x632>
 8000c32:	1acc      	subs	r4, r1, r3
 8000c34:	42a1      	cmp	r1, r4
 8000c36:	4189      	sbcs	r1, r1
 8000c38:	4643      	mov	r3, r8
 8000c3a:	4249      	negs	r1, r1
 8000c3c:	1a1f      	subs	r7, r3, r0
 8000c3e:	4655      	mov	r5, sl
 8000c40:	1a7f      	subs	r7, r7, r1
 8000c42:	e595      	b.n	8000770 <__aeabi_dadd+0xf4>
 8000c44:	077b      	lsls	r3, r7, #29
 8000c46:	08c9      	lsrs	r1, r1, #3
 8000c48:	430b      	orrs	r3, r1
 8000c4a:	08f8      	lsrs	r0, r7, #3
 8000c4c:	e643      	b.n	80008d6 <__aeabi_dadd+0x25a>
 8000c4e:	4644      	mov	r4, r8
 8000c50:	08db      	lsrs	r3, r3, #3
 8000c52:	430c      	orrs	r4, r1
 8000c54:	d130      	bne.n	8000cb8 <__aeabi_dadd+0x63c>
 8000c56:	0742      	lsls	r2, r0, #29
 8000c58:	4313      	orrs	r3, r2
 8000c5a:	08c0      	lsrs	r0, r0, #3
 8000c5c:	e65c      	b.n	8000918 <__aeabi_dadd+0x29c>
 8000c5e:	077b      	lsls	r3, r7, #29
 8000c60:	08c9      	lsrs	r1, r1, #3
 8000c62:	430b      	orrs	r3, r1
 8000c64:	08f8      	lsrs	r0, r7, #3
 8000c66:	e639      	b.n	80008dc <__aeabi_dadd+0x260>
 8000c68:	185c      	adds	r4, r3, r1
 8000c6a:	429c      	cmp	r4, r3
 8000c6c:	419b      	sbcs	r3, r3
 8000c6e:	4440      	add	r0, r8
 8000c70:	425b      	negs	r3, r3
 8000c72:	18c7      	adds	r7, r0, r3
 8000c74:	023b      	lsls	r3, r7, #8
 8000c76:	d400      	bmi.n	8000c7a <__aeabi_dadd+0x5fe>
 8000c78:	e625      	b.n	80008c6 <__aeabi_dadd+0x24a>
 8000c7a:	4b1d      	ldr	r3, [pc, #116]	; (8000cf0 <__aeabi_dadd+0x674>)
 8000c7c:	2601      	movs	r6, #1
 8000c7e:	401f      	ands	r7, r3
 8000c80:	e621      	b.n	80008c6 <__aeabi_dadd+0x24a>
 8000c82:	0004      	movs	r4, r0
 8000c84:	3a20      	subs	r2, #32
 8000c86:	40d4      	lsrs	r4, r2
 8000c88:	4662      	mov	r2, ip
 8000c8a:	2a20      	cmp	r2, #32
 8000c8c:	d004      	beq.n	8000c98 <__aeabi_dadd+0x61c>
 8000c8e:	2240      	movs	r2, #64	; 0x40
 8000c90:	4666      	mov	r6, ip
 8000c92:	1b92      	subs	r2, r2, r6
 8000c94:	4090      	lsls	r0, r2
 8000c96:	4303      	orrs	r3, r0
 8000c98:	1e5a      	subs	r2, r3, #1
 8000c9a:	4193      	sbcs	r3, r2
 8000c9c:	431c      	orrs	r4, r3
 8000c9e:	e67e      	b.n	800099e <__aeabi_dadd+0x322>
 8000ca0:	185c      	adds	r4, r3, r1
 8000ca2:	428c      	cmp	r4, r1
 8000ca4:	4189      	sbcs	r1, r1
 8000ca6:	4440      	add	r0, r8
 8000ca8:	4249      	negs	r1, r1
 8000caa:	1847      	adds	r7, r0, r1
 8000cac:	e6dd      	b.n	8000a6a <__aeabi_dadd+0x3ee>
 8000cae:	0023      	movs	r3, r4
 8000cb0:	433b      	orrs	r3, r7
 8000cb2:	d100      	bne.n	8000cb6 <__aeabi_dadd+0x63a>
 8000cb4:	e6ad      	b.n	8000a12 <__aeabi_dadd+0x396>
 8000cb6:	e606      	b.n	80008c6 <__aeabi_dadd+0x24a>
 8000cb8:	0744      	lsls	r4, r0, #29
 8000cba:	4323      	orrs	r3, r4
 8000cbc:	2480      	movs	r4, #128	; 0x80
 8000cbe:	08c0      	lsrs	r0, r0, #3
 8000cc0:	0324      	lsls	r4, r4, #12
 8000cc2:	4220      	tst	r0, r4
 8000cc4:	d008      	beq.n	8000cd8 <__aeabi_dadd+0x65c>
 8000cc6:	4642      	mov	r2, r8
 8000cc8:	08d6      	lsrs	r6, r2, #3
 8000cca:	4226      	tst	r6, r4
 8000ccc:	d104      	bne.n	8000cd8 <__aeabi_dadd+0x65c>
 8000cce:	4655      	mov	r5, sl
 8000cd0:	0030      	movs	r0, r6
 8000cd2:	08cb      	lsrs	r3, r1, #3
 8000cd4:	0751      	lsls	r1, r2, #29
 8000cd6:	430b      	orrs	r3, r1
 8000cd8:	0f5a      	lsrs	r2, r3, #29
 8000cda:	00db      	lsls	r3, r3, #3
 8000cdc:	08db      	lsrs	r3, r3, #3
 8000cde:	0752      	lsls	r2, r2, #29
 8000ce0:	4313      	orrs	r3, r2
 8000ce2:	e619      	b.n	8000918 <__aeabi_dadd+0x29c>
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	4a01      	ldr	r2, [pc, #4]	; (8000cec <__aeabi_dadd+0x670>)
 8000ce8:	001f      	movs	r7, r3
 8000cea:	e55e      	b.n	80007aa <__aeabi_dadd+0x12e>
 8000cec:	000007ff 	.word	0x000007ff
 8000cf0:	ff7fffff 	.word	0xff7fffff

08000cf4 <__aeabi_ddiv>:
 8000cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cf6:	4657      	mov	r7, sl
 8000cf8:	464e      	mov	r6, r9
 8000cfa:	4645      	mov	r5, r8
 8000cfc:	46de      	mov	lr, fp
 8000cfe:	b5e0      	push	{r5, r6, r7, lr}
 8000d00:	4681      	mov	r9, r0
 8000d02:	0005      	movs	r5, r0
 8000d04:	030c      	lsls	r4, r1, #12
 8000d06:	0048      	lsls	r0, r1, #1
 8000d08:	4692      	mov	sl, r2
 8000d0a:	001f      	movs	r7, r3
 8000d0c:	b085      	sub	sp, #20
 8000d0e:	0b24      	lsrs	r4, r4, #12
 8000d10:	0d40      	lsrs	r0, r0, #21
 8000d12:	0fce      	lsrs	r6, r1, #31
 8000d14:	2800      	cmp	r0, #0
 8000d16:	d100      	bne.n	8000d1a <__aeabi_ddiv+0x26>
 8000d18:	e156      	b.n	8000fc8 <__aeabi_ddiv+0x2d4>
 8000d1a:	4bd4      	ldr	r3, [pc, #848]	; (800106c <__aeabi_ddiv+0x378>)
 8000d1c:	4298      	cmp	r0, r3
 8000d1e:	d100      	bne.n	8000d22 <__aeabi_ddiv+0x2e>
 8000d20:	e172      	b.n	8001008 <__aeabi_ddiv+0x314>
 8000d22:	0f6b      	lsrs	r3, r5, #29
 8000d24:	00e4      	lsls	r4, r4, #3
 8000d26:	431c      	orrs	r4, r3
 8000d28:	2380      	movs	r3, #128	; 0x80
 8000d2a:	041b      	lsls	r3, r3, #16
 8000d2c:	4323      	orrs	r3, r4
 8000d2e:	4698      	mov	r8, r3
 8000d30:	4bcf      	ldr	r3, [pc, #828]	; (8001070 <__aeabi_ddiv+0x37c>)
 8000d32:	00ed      	lsls	r5, r5, #3
 8000d34:	469b      	mov	fp, r3
 8000d36:	2300      	movs	r3, #0
 8000d38:	4699      	mov	r9, r3
 8000d3a:	4483      	add	fp, r0
 8000d3c:	9300      	str	r3, [sp, #0]
 8000d3e:	033c      	lsls	r4, r7, #12
 8000d40:	007b      	lsls	r3, r7, #1
 8000d42:	4650      	mov	r0, sl
 8000d44:	0b24      	lsrs	r4, r4, #12
 8000d46:	0d5b      	lsrs	r3, r3, #21
 8000d48:	0fff      	lsrs	r7, r7, #31
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d100      	bne.n	8000d50 <__aeabi_ddiv+0x5c>
 8000d4e:	e11f      	b.n	8000f90 <__aeabi_ddiv+0x29c>
 8000d50:	4ac6      	ldr	r2, [pc, #792]	; (800106c <__aeabi_ddiv+0x378>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d100      	bne.n	8000d58 <__aeabi_ddiv+0x64>
 8000d56:	e162      	b.n	800101e <__aeabi_ddiv+0x32a>
 8000d58:	49c5      	ldr	r1, [pc, #788]	; (8001070 <__aeabi_ddiv+0x37c>)
 8000d5a:	0f42      	lsrs	r2, r0, #29
 8000d5c:	468c      	mov	ip, r1
 8000d5e:	00e4      	lsls	r4, r4, #3
 8000d60:	4659      	mov	r1, fp
 8000d62:	4314      	orrs	r4, r2
 8000d64:	2280      	movs	r2, #128	; 0x80
 8000d66:	4463      	add	r3, ip
 8000d68:	0412      	lsls	r2, r2, #16
 8000d6a:	1acb      	subs	r3, r1, r3
 8000d6c:	4314      	orrs	r4, r2
 8000d6e:	469b      	mov	fp, r3
 8000d70:	00c2      	lsls	r2, r0, #3
 8000d72:	2000      	movs	r0, #0
 8000d74:	0033      	movs	r3, r6
 8000d76:	407b      	eors	r3, r7
 8000d78:	469a      	mov	sl, r3
 8000d7a:	464b      	mov	r3, r9
 8000d7c:	2b0f      	cmp	r3, #15
 8000d7e:	d827      	bhi.n	8000dd0 <__aeabi_ddiv+0xdc>
 8000d80:	49bc      	ldr	r1, [pc, #752]	; (8001074 <__aeabi_ddiv+0x380>)
 8000d82:	009b      	lsls	r3, r3, #2
 8000d84:	58cb      	ldr	r3, [r1, r3]
 8000d86:	469f      	mov	pc, r3
 8000d88:	46b2      	mov	sl, r6
 8000d8a:	9b00      	ldr	r3, [sp, #0]
 8000d8c:	2b02      	cmp	r3, #2
 8000d8e:	d016      	beq.n	8000dbe <__aeabi_ddiv+0xca>
 8000d90:	2b03      	cmp	r3, #3
 8000d92:	d100      	bne.n	8000d96 <__aeabi_ddiv+0xa2>
 8000d94:	e28e      	b.n	80012b4 <__aeabi_ddiv+0x5c0>
 8000d96:	2b01      	cmp	r3, #1
 8000d98:	d000      	beq.n	8000d9c <__aeabi_ddiv+0xa8>
 8000d9a:	e0d9      	b.n	8000f50 <__aeabi_ddiv+0x25c>
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	2400      	movs	r4, #0
 8000da0:	2500      	movs	r5, #0
 8000da2:	4652      	mov	r2, sl
 8000da4:	051b      	lsls	r3, r3, #20
 8000da6:	4323      	orrs	r3, r4
 8000da8:	07d2      	lsls	r2, r2, #31
 8000daa:	4313      	orrs	r3, r2
 8000dac:	0028      	movs	r0, r5
 8000dae:	0019      	movs	r1, r3
 8000db0:	b005      	add	sp, #20
 8000db2:	bcf0      	pop	{r4, r5, r6, r7}
 8000db4:	46bb      	mov	fp, r7
 8000db6:	46b2      	mov	sl, r6
 8000db8:	46a9      	mov	r9, r5
 8000dba:	46a0      	mov	r8, r4
 8000dbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000dbe:	2400      	movs	r4, #0
 8000dc0:	2500      	movs	r5, #0
 8000dc2:	4baa      	ldr	r3, [pc, #680]	; (800106c <__aeabi_ddiv+0x378>)
 8000dc4:	e7ed      	b.n	8000da2 <__aeabi_ddiv+0xae>
 8000dc6:	46ba      	mov	sl, r7
 8000dc8:	46a0      	mov	r8, r4
 8000dca:	0015      	movs	r5, r2
 8000dcc:	9000      	str	r0, [sp, #0]
 8000dce:	e7dc      	b.n	8000d8a <__aeabi_ddiv+0x96>
 8000dd0:	4544      	cmp	r4, r8
 8000dd2:	d200      	bcs.n	8000dd6 <__aeabi_ddiv+0xe2>
 8000dd4:	e1c7      	b.n	8001166 <__aeabi_ddiv+0x472>
 8000dd6:	d100      	bne.n	8000dda <__aeabi_ddiv+0xe6>
 8000dd8:	e1c2      	b.n	8001160 <__aeabi_ddiv+0x46c>
 8000dda:	2301      	movs	r3, #1
 8000ddc:	425b      	negs	r3, r3
 8000dde:	469c      	mov	ip, r3
 8000de0:	002e      	movs	r6, r5
 8000de2:	4640      	mov	r0, r8
 8000de4:	2500      	movs	r5, #0
 8000de6:	44e3      	add	fp, ip
 8000de8:	0223      	lsls	r3, r4, #8
 8000dea:	0e14      	lsrs	r4, r2, #24
 8000dec:	431c      	orrs	r4, r3
 8000dee:	0c1b      	lsrs	r3, r3, #16
 8000df0:	4699      	mov	r9, r3
 8000df2:	0423      	lsls	r3, r4, #16
 8000df4:	0c1f      	lsrs	r7, r3, #16
 8000df6:	0212      	lsls	r2, r2, #8
 8000df8:	4649      	mov	r1, r9
 8000dfa:	9200      	str	r2, [sp, #0]
 8000dfc:	9701      	str	r7, [sp, #4]
 8000dfe:	f7ff fa23 	bl	8000248 <__aeabi_uidivmod>
 8000e02:	0002      	movs	r2, r0
 8000e04:	437a      	muls	r2, r7
 8000e06:	040b      	lsls	r3, r1, #16
 8000e08:	0c31      	lsrs	r1, r6, #16
 8000e0a:	4680      	mov	r8, r0
 8000e0c:	4319      	orrs	r1, r3
 8000e0e:	428a      	cmp	r2, r1
 8000e10:	d907      	bls.n	8000e22 <__aeabi_ddiv+0x12e>
 8000e12:	2301      	movs	r3, #1
 8000e14:	425b      	negs	r3, r3
 8000e16:	469c      	mov	ip, r3
 8000e18:	1909      	adds	r1, r1, r4
 8000e1a:	44e0      	add	r8, ip
 8000e1c:	428c      	cmp	r4, r1
 8000e1e:	d800      	bhi.n	8000e22 <__aeabi_ddiv+0x12e>
 8000e20:	e207      	b.n	8001232 <__aeabi_ddiv+0x53e>
 8000e22:	1a88      	subs	r0, r1, r2
 8000e24:	4649      	mov	r1, r9
 8000e26:	f7ff fa0f 	bl	8000248 <__aeabi_uidivmod>
 8000e2a:	0409      	lsls	r1, r1, #16
 8000e2c:	468c      	mov	ip, r1
 8000e2e:	0431      	lsls	r1, r6, #16
 8000e30:	4666      	mov	r6, ip
 8000e32:	9a01      	ldr	r2, [sp, #4]
 8000e34:	0c09      	lsrs	r1, r1, #16
 8000e36:	4342      	muls	r2, r0
 8000e38:	0003      	movs	r3, r0
 8000e3a:	4331      	orrs	r1, r6
 8000e3c:	428a      	cmp	r2, r1
 8000e3e:	d904      	bls.n	8000e4a <__aeabi_ddiv+0x156>
 8000e40:	1909      	adds	r1, r1, r4
 8000e42:	3b01      	subs	r3, #1
 8000e44:	428c      	cmp	r4, r1
 8000e46:	d800      	bhi.n	8000e4a <__aeabi_ddiv+0x156>
 8000e48:	e1ed      	b.n	8001226 <__aeabi_ddiv+0x532>
 8000e4a:	1a88      	subs	r0, r1, r2
 8000e4c:	4642      	mov	r2, r8
 8000e4e:	0412      	lsls	r2, r2, #16
 8000e50:	431a      	orrs	r2, r3
 8000e52:	4690      	mov	r8, r2
 8000e54:	4641      	mov	r1, r8
 8000e56:	9b00      	ldr	r3, [sp, #0]
 8000e58:	040e      	lsls	r6, r1, #16
 8000e5a:	0c1b      	lsrs	r3, r3, #16
 8000e5c:	001f      	movs	r7, r3
 8000e5e:	9302      	str	r3, [sp, #8]
 8000e60:	9b00      	ldr	r3, [sp, #0]
 8000e62:	0c36      	lsrs	r6, r6, #16
 8000e64:	041b      	lsls	r3, r3, #16
 8000e66:	0c19      	lsrs	r1, r3, #16
 8000e68:	000b      	movs	r3, r1
 8000e6a:	4373      	muls	r3, r6
 8000e6c:	0c12      	lsrs	r2, r2, #16
 8000e6e:	437e      	muls	r6, r7
 8000e70:	9103      	str	r1, [sp, #12]
 8000e72:	4351      	muls	r1, r2
 8000e74:	437a      	muls	r2, r7
 8000e76:	0c1f      	lsrs	r7, r3, #16
 8000e78:	46bc      	mov	ip, r7
 8000e7a:	1876      	adds	r6, r6, r1
 8000e7c:	4466      	add	r6, ip
 8000e7e:	42b1      	cmp	r1, r6
 8000e80:	d903      	bls.n	8000e8a <__aeabi_ddiv+0x196>
 8000e82:	2180      	movs	r1, #128	; 0x80
 8000e84:	0249      	lsls	r1, r1, #9
 8000e86:	468c      	mov	ip, r1
 8000e88:	4462      	add	r2, ip
 8000e8a:	0c31      	lsrs	r1, r6, #16
 8000e8c:	188a      	adds	r2, r1, r2
 8000e8e:	0431      	lsls	r1, r6, #16
 8000e90:	041e      	lsls	r6, r3, #16
 8000e92:	0c36      	lsrs	r6, r6, #16
 8000e94:	198e      	adds	r6, r1, r6
 8000e96:	4290      	cmp	r0, r2
 8000e98:	d302      	bcc.n	8000ea0 <__aeabi_ddiv+0x1ac>
 8000e9a:	d112      	bne.n	8000ec2 <__aeabi_ddiv+0x1ce>
 8000e9c:	42b5      	cmp	r5, r6
 8000e9e:	d210      	bcs.n	8000ec2 <__aeabi_ddiv+0x1ce>
 8000ea0:	4643      	mov	r3, r8
 8000ea2:	1e59      	subs	r1, r3, #1
 8000ea4:	9b00      	ldr	r3, [sp, #0]
 8000ea6:	469c      	mov	ip, r3
 8000ea8:	4465      	add	r5, ip
 8000eaa:	001f      	movs	r7, r3
 8000eac:	429d      	cmp	r5, r3
 8000eae:	419b      	sbcs	r3, r3
 8000eb0:	425b      	negs	r3, r3
 8000eb2:	191b      	adds	r3, r3, r4
 8000eb4:	18c0      	adds	r0, r0, r3
 8000eb6:	4284      	cmp	r4, r0
 8000eb8:	d200      	bcs.n	8000ebc <__aeabi_ddiv+0x1c8>
 8000eba:	e1a0      	b.n	80011fe <__aeabi_ddiv+0x50a>
 8000ebc:	d100      	bne.n	8000ec0 <__aeabi_ddiv+0x1cc>
 8000ebe:	e19b      	b.n	80011f8 <__aeabi_ddiv+0x504>
 8000ec0:	4688      	mov	r8, r1
 8000ec2:	1bae      	subs	r6, r5, r6
 8000ec4:	42b5      	cmp	r5, r6
 8000ec6:	41ad      	sbcs	r5, r5
 8000ec8:	1a80      	subs	r0, r0, r2
 8000eca:	426d      	negs	r5, r5
 8000ecc:	1b40      	subs	r0, r0, r5
 8000ece:	4284      	cmp	r4, r0
 8000ed0:	d100      	bne.n	8000ed4 <__aeabi_ddiv+0x1e0>
 8000ed2:	e1d5      	b.n	8001280 <__aeabi_ddiv+0x58c>
 8000ed4:	4649      	mov	r1, r9
 8000ed6:	f7ff f9b7 	bl	8000248 <__aeabi_uidivmod>
 8000eda:	9a01      	ldr	r2, [sp, #4]
 8000edc:	040b      	lsls	r3, r1, #16
 8000ede:	4342      	muls	r2, r0
 8000ee0:	0c31      	lsrs	r1, r6, #16
 8000ee2:	0005      	movs	r5, r0
 8000ee4:	4319      	orrs	r1, r3
 8000ee6:	428a      	cmp	r2, r1
 8000ee8:	d900      	bls.n	8000eec <__aeabi_ddiv+0x1f8>
 8000eea:	e16c      	b.n	80011c6 <__aeabi_ddiv+0x4d2>
 8000eec:	1a88      	subs	r0, r1, r2
 8000eee:	4649      	mov	r1, r9
 8000ef0:	f7ff f9aa 	bl	8000248 <__aeabi_uidivmod>
 8000ef4:	9a01      	ldr	r2, [sp, #4]
 8000ef6:	0436      	lsls	r6, r6, #16
 8000ef8:	4342      	muls	r2, r0
 8000efa:	0409      	lsls	r1, r1, #16
 8000efc:	0c36      	lsrs	r6, r6, #16
 8000efe:	0003      	movs	r3, r0
 8000f00:	430e      	orrs	r6, r1
 8000f02:	42b2      	cmp	r2, r6
 8000f04:	d900      	bls.n	8000f08 <__aeabi_ddiv+0x214>
 8000f06:	e153      	b.n	80011b0 <__aeabi_ddiv+0x4bc>
 8000f08:	9803      	ldr	r0, [sp, #12]
 8000f0a:	1ab6      	subs	r6, r6, r2
 8000f0c:	0002      	movs	r2, r0
 8000f0e:	042d      	lsls	r5, r5, #16
 8000f10:	431d      	orrs	r5, r3
 8000f12:	9f02      	ldr	r7, [sp, #8]
 8000f14:	042b      	lsls	r3, r5, #16
 8000f16:	0c1b      	lsrs	r3, r3, #16
 8000f18:	435a      	muls	r2, r3
 8000f1a:	437b      	muls	r3, r7
 8000f1c:	469c      	mov	ip, r3
 8000f1e:	0c29      	lsrs	r1, r5, #16
 8000f20:	4348      	muls	r0, r1
 8000f22:	0c13      	lsrs	r3, r2, #16
 8000f24:	4484      	add	ip, r0
 8000f26:	4463      	add	r3, ip
 8000f28:	4379      	muls	r1, r7
 8000f2a:	4298      	cmp	r0, r3
 8000f2c:	d903      	bls.n	8000f36 <__aeabi_ddiv+0x242>
 8000f2e:	2080      	movs	r0, #128	; 0x80
 8000f30:	0240      	lsls	r0, r0, #9
 8000f32:	4684      	mov	ip, r0
 8000f34:	4461      	add	r1, ip
 8000f36:	0c18      	lsrs	r0, r3, #16
 8000f38:	0412      	lsls	r2, r2, #16
 8000f3a:	041b      	lsls	r3, r3, #16
 8000f3c:	0c12      	lsrs	r2, r2, #16
 8000f3e:	1841      	adds	r1, r0, r1
 8000f40:	189b      	adds	r3, r3, r2
 8000f42:	428e      	cmp	r6, r1
 8000f44:	d200      	bcs.n	8000f48 <__aeabi_ddiv+0x254>
 8000f46:	e0ff      	b.n	8001148 <__aeabi_ddiv+0x454>
 8000f48:	d100      	bne.n	8000f4c <__aeabi_ddiv+0x258>
 8000f4a:	e0fa      	b.n	8001142 <__aeabi_ddiv+0x44e>
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	431d      	orrs	r5, r3
 8000f50:	4a49      	ldr	r2, [pc, #292]	; (8001078 <__aeabi_ddiv+0x384>)
 8000f52:	445a      	add	r2, fp
 8000f54:	2a00      	cmp	r2, #0
 8000f56:	dc00      	bgt.n	8000f5a <__aeabi_ddiv+0x266>
 8000f58:	e0aa      	b.n	80010b0 <__aeabi_ddiv+0x3bc>
 8000f5a:	076b      	lsls	r3, r5, #29
 8000f5c:	d000      	beq.n	8000f60 <__aeabi_ddiv+0x26c>
 8000f5e:	e13d      	b.n	80011dc <__aeabi_ddiv+0x4e8>
 8000f60:	08ed      	lsrs	r5, r5, #3
 8000f62:	4643      	mov	r3, r8
 8000f64:	01db      	lsls	r3, r3, #7
 8000f66:	d506      	bpl.n	8000f76 <__aeabi_ddiv+0x282>
 8000f68:	4642      	mov	r2, r8
 8000f6a:	4b44      	ldr	r3, [pc, #272]	; (800107c <__aeabi_ddiv+0x388>)
 8000f6c:	401a      	ands	r2, r3
 8000f6e:	4690      	mov	r8, r2
 8000f70:	2280      	movs	r2, #128	; 0x80
 8000f72:	00d2      	lsls	r2, r2, #3
 8000f74:	445a      	add	r2, fp
 8000f76:	4b42      	ldr	r3, [pc, #264]	; (8001080 <__aeabi_ddiv+0x38c>)
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	dd00      	ble.n	8000f7e <__aeabi_ddiv+0x28a>
 8000f7c:	e71f      	b.n	8000dbe <__aeabi_ddiv+0xca>
 8000f7e:	4643      	mov	r3, r8
 8000f80:	075b      	lsls	r3, r3, #29
 8000f82:	431d      	orrs	r5, r3
 8000f84:	4643      	mov	r3, r8
 8000f86:	0552      	lsls	r2, r2, #21
 8000f88:	025c      	lsls	r4, r3, #9
 8000f8a:	0b24      	lsrs	r4, r4, #12
 8000f8c:	0d53      	lsrs	r3, r2, #21
 8000f8e:	e708      	b.n	8000da2 <__aeabi_ddiv+0xae>
 8000f90:	4652      	mov	r2, sl
 8000f92:	4322      	orrs	r2, r4
 8000f94:	d100      	bne.n	8000f98 <__aeabi_ddiv+0x2a4>
 8000f96:	e07b      	b.n	8001090 <__aeabi_ddiv+0x39c>
 8000f98:	2c00      	cmp	r4, #0
 8000f9a:	d100      	bne.n	8000f9e <__aeabi_ddiv+0x2aa>
 8000f9c:	e0fa      	b.n	8001194 <__aeabi_ddiv+0x4a0>
 8000f9e:	0020      	movs	r0, r4
 8000fa0:	f001 fa22 	bl	80023e8 <__clzsi2>
 8000fa4:	0002      	movs	r2, r0
 8000fa6:	3a0b      	subs	r2, #11
 8000fa8:	231d      	movs	r3, #29
 8000faa:	0001      	movs	r1, r0
 8000fac:	1a9b      	subs	r3, r3, r2
 8000fae:	4652      	mov	r2, sl
 8000fb0:	3908      	subs	r1, #8
 8000fb2:	40da      	lsrs	r2, r3
 8000fb4:	408c      	lsls	r4, r1
 8000fb6:	4314      	orrs	r4, r2
 8000fb8:	4652      	mov	r2, sl
 8000fba:	408a      	lsls	r2, r1
 8000fbc:	4b31      	ldr	r3, [pc, #196]	; (8001084 <__aeabi_ddiv+0x390>)
 8000fbe:	4458      	add	r0, fp
 8000fc0:	469b      	mov	fp, r3
 8000fc2:	4483      	add	fp, r0
 8000fc4:	2000      	movs	r0, #0
 8000fc6:	e6d5      	b.n	8000d74 <__aeabi_ddiv+0x80>
 8000fc8:	464b      	mov	r3, r9
 8000fca:	4323      	orrs	r3, r4
 8000fcc:	4698      	mov	r8, r3
 8000fce:	d044      	beq.n	800105a <__aeabi_ddiv+0x366>
 8000fd0:	2c00      	cmp	r4, #0
 8000fd2:	d100      	bne.n	8000fd6 <__aeabi_ddiv+0x2e2>
 8000fd4:	e0ce      	b.n	8001174 <__aeabi_ddiv+0x480>
 8000fd6:	0020      	movs	r0, r4
 8000fd8:	f001 fa06 	bl	80023e8 <__clzsi2>
 8000fdc:	0001      	movs	r1, r0
 8000fde:	0002      	movs	r2, r0
 8000fe0:	390b      	subs	r1, #11
 8000fe2:	231d      	movs	r3, #29
 8000fe4:	1a5b      	subs	r3, r3, r1
 8000fe6:	4649      	mov	r1, r9
 8000fe8:	0010      	movs	r0, r2
 8000fea:	40d9      	lsrs	r1, r3
 8000fec:	3808      	subs	r0, #8
 8000fee:	4084      	lsls	r4, r0
 8000ff0:	000b      	movs	r3, r1
 8000ff2:	464d      	mov	r5, r9
 8000ff4:	4323      	orrs	r3, r4
 8000ff6:	4698      	mov	r8, r3
 8000ff8:	4085      	lsls	r5, r0
 8000ffa:	4823      	ldr	r0, [pc, #140]	; (8001088 <__aeabi_ddiv+0x394>)
 8000ffc:	1a83      	subs	r3, r0, r2
 8000ffe:	469b      	mov	fp, r3
 8001000:	2300      	movs	r3, #0
 8001002:	4699      	mov	r9, r3
 8001004:	9300      	str	r3, [sp, #0]
 8001006:	e69a      	b.n	8000d3e <__aeabi_ddiv+0x4a>
 8001008:	464b      	mov	r3, r9
 800100a:	4323      	orrs	r3, r4
 800100c:	4698      	mov	r8, r3
 800100e:	d11d      	bne.n	800104c <__aeabi_ddiv+0x358>
 8001010:	2308      	movs	r3, #8
 8001012:	4699      	mov	r9, r3
 8001014:	3b06      	subs	r3, #6
 8001016:	2500      	movs	r5, #0
 8001018:	4683      	mov	fp, r0
 800101a:	9300      	str	r3, [sp, #0]
 800101c:	e68f      	b.n	8000d3e <__aeabi_ddiv+0x4a>
 800101e:	4652      	mov	r2, sl
 8001020:	4322      	orrs	r2, r4
 8001022:	d109      	bne.n	8001038 <__aeabi_ddiv+0x344>
 8001024:	2302      	movs	r3, #2
 8001026:	4649      	mov	r1, r9
 8001028:	4319      	orrs	r1, r3
 800102a:	4b18      	ldr	r3, [pc, #96]	; (800108c <__aeabi_ddiv+0x398>)
 800102c:	4689      	mov	r9, r1
 800102e:	469c      	mov	ip, r3
 8001030:	2400      	movs	r4, #0
 8001032:	2002      	movs	r0, #2
 8001034:	44e3      	add	fp, ip
 8001036:	e69d      	b.n	8000d74 <__aeabi_ddiv+0x80>
 8001038:	2303      	movs	r3, #3
 800103a:	464a      	mov	r2, r9
 800103c:	431a      	orrs	r2, r3
 800103e:	4b13      	ldr	r3, [pc, #76]	; (800108c <__aeabi_ddiv+0x398>)
 8001040:	4691      	mov	r9, r2
 8001042:	469c      	mov	ip, r3
 8001044:	4652      	mov	r2, sl
 8001046:	2003      	movs	r0, #3
 8001048:	44e3      	add	fp, ip
 800104a:	e693      	b.n	8000d74 <__aeabi_ddiv+0x80>
 800104c:	230c      	movs	r3, #12
 800104e:	4699      	mov	r9, r3
 8001050:	3b09      	subs	r3, #9
 8001052:	46a0      	mov	r8, r4
 8001054:	4683      	mov	fp, r0
 8001056:	9300      	str	r3, [sp, #0]
 8001058:	e671      	b.n	8000d3e <__aeabi_ddiv+0x4a>
 800105a:	2304      	movs	r3, #4
 800105c:	4699      	mov	r9, r3
 800105e:	2300      	movs	r3, #0
 8001060:	469b      	mov	fp, r3
 8001062:	3301      	adds	r3, #1
 8001064:	2500      	movs	r5, #0
 8001066:	9300      	str	r3, [sp, #0]
 8001068:	e669      	b.n	8000d3e <__aeabi_ddiv+0x4a>
 800106a:	46c0      	nop			; (mov r8, r8)
 800106c:	000007ff 	.word	0x000007ff
 8001070:	fffffc01 	.word	0xfffffc01
 8001074:	0800ced0 	.word	0x0800ced0
 8001078:	000003ff 	.word	0x000003ff
 800107c:	feffffff 	.word	0xfeffffff
 8001080:	000007fe 	.word	0x000007fe
 8001084:	000003f3 	.word	0x000003f3
 8001088:	fffffc0d 	.word	0xfffffc0d
 800108c:	fffff801 	.word	0xfffff801
 8001090:	4649      	mov	r1, r9
 8001092:	2301      	movs	r3, #1
 8001094:	4319      	orrs	r1, r3
 8001096:	4689      	mov	r9, r1
 8001098:	2400      	movs	r4, #0
 800109a:	2001      	movs	r0, #1
 800109c:	e66a      	b.n	8000d74 <__aeabi_ddiv+0x80>
 800109e:	2300      	movs	r3, #0
 80010a0:	2480      	movs	r4, #128	; 0x80
 80010a2:	469a      	mov	sl, r3
 80010a4:	2500      	movs	r5, #0
 80010a6:	4b8a      	ldr	r3, [pc, #552]	; (80012d0 <__aeabi_ddiv+0x5dc>)
 80010a8:	0324      	lsls	r4, r4, #12
 80010aa:	e67a      	b.n	8000da2 <__aeabi_ddiv+0xae>
 80010ac:	2501      	movs	r5, #1
 80010ae:	426d      	negs	r5, r5
 80010b0:	2301      	movs	r3, #1
 80010b2:	1a9b      	subs	r3, r3, r2
 80010b4:	2b38      	cmp	r3, #56	; 0x38
 80010b6:	dd00      	ble.n	80010ba <__aeabi_ddiv+0x3c6>
 80010b8:	e670      	b.n	8000d9c <__aeabi_ddiv+0xa8>
 80010ba:	2b1f      	cmp	r3, #31
 80010bc:	dc00      	bgt.n	80010c0 <__aeabi_ddiv+0x3cc>
 80010be:	e0bf      	b.n	8001240 <__aeabi_ddiv+0x54c>
 80010c0:	211f      	movs	r1, #31
 80010c2:	4249      	negs	r1, r1
 80010c4:	1a8a      	subs	r2, r1, r2
 80010c6:	4641      	mov	r1, r8
 80010c8:	40d1      	lsrs	r1, r2
 80010ca:	000a      	movs	r2, r1
 80010cc:	2b20      	cmp	r3, #32
 80010ce:	d004      	beq.n	80010da <__aeabi_ddiv+0x3e6>
 80010d0:	4641      	mov	r1, r8
 80010d2:	4b80      	ldr	r3, [pc, #512]	; (80012d4 <__aeabi_ddiv+0x5e0>)
 80010d4:	445b      	add	r3, fp
 80010d6:	4099      	lsls	r1, r3
 80010d8:	430d      	orrs	r5, r1
 80010da:	1e6b      	subs	r3, r5, #1
 80010dc:	419d      	sbcs	r5, r3
 80010de:	2307      	movs	r3, #7
 80010e0:	432a      	orrs	r2, r5
 80010e2:	001d      	movs	r5, r3
 80010e4:	2400      	movs	r4, #0
 80010e6:	4015      	ands	r5, r2
 80010e8:	4213      	tst	r3, r2
 80010ea:	d100      	bne.n	80010ee <__aeabi_ddiv+0x3fa>
 80010ec:	e0d4      	b.n	8001298 <__aeabi_ddiv+0x5a4>
 80010ee:	210f      	movs	r1, #15
 80010f0:	2300      	movs	r3, #0
 80010f2:	4011      	ands	r1, r2
 80010f4:	2904      	cmp	r1, #4
 80010f6:	d100      	bne.n	80010fa <__aeabi_ddiv+0x406>
 80010f8:	e0cb      	b.n	8001292 <__aeabi_ddiv+0x59e>
 80010fa:	1d11      	adds	r1, r2, #4
 80010fc:	4291      	cmp	r1, r2
 80010fe:	4192      	sbcs	r2, r2
 8001100:	4252      	negs	r2, r2
 8001102:	189b      	adds	r3, r3, r2
 8001104:	000a      	movs	r2, r1
 8001106:	0219      	lsls	r1, r3, #8
 8001108:	d400      	bmi.n	800110c <__aeabi_ddiv+0x418>
 800110a:	e0c2      	b.n	8001292 <__aeabi_ddiv+0x59e>
 800110c:	2301      	movs	r3, #1
 800110e:	2400      	movs	r4, #0
 8001110:	2500      	movs	r5, #0
 8001112:	e646      	b.n	8000da2 <__aeabi_ddiv+0xae>
 8001114:	2380      	movs	r3, #128	; 0x80
 8001116:	4641      	mov	r1, r8
 8001118:	031b      	lsls	r3, r3, #12
 800111a:	4219      	tst	r1, r3
 800111c:	d008      	beq.n	8001130 <__aeabi_ddiv+0x43c>
 800111e:	421c      	tst	r4, r3
 8001120:	d106      	bne.n	8001130 <__aeabi_ddiv+0x43c>
 8001122:	431c      	orrs	r4, r3
 8001124:	0324      	lsls	r4, r4, #12
 8001126:	46ba      	mov	sl, r7
 8001128:	0015      	movs	r5, r2
 800112a:	4b69      	ldr	r3, [pc, #420]	; (80012d0 <__aeabi_ddiv+0x5dc>)
 800112c:	0b24      	lsrs	r4, r4, #12
 800112e:	e638      	b.n	8000da2 <__aeabi_ddiv+0xae>
 8001130:	2480      	movs	r4, #128	; 0x80
 8001132:	4643      	mov	r3, r8
 8001134:	0324      	lsls	r4, r4, #12
 8001136:	431c      	orrs	r4, r3
 8001138:	0324      	lsls	r4, r4, #12
 800113a:	46b2      	mov	sl, r6
 800113c:	4b64      	ldr	r3, [pc, #400]	; (80012d0 <__aeabi_ddiv+0x5dc>)
 800113e:	0b24      	lsrs	r4, r4, #12
 8001140:	e62f      	b.n	8000da2 <__aeabi_ddiv+0xae>
 8001142:	2b00      	cmp	r3, #0
 8001144:	d100      	bne.n	8001148 <__aeabi_ddiv+0x454>
 8001146:	e703      	b.n	8000f50 <__aeabi_ddiv+0x25c>
 8001148:	19a6      	adds	r6, r4, r6
 800114a:	1e68      	subs	r0, r5, #1
 800114c:	42a6      	cmp	r6, r4
 800114e:	d200      	bcs.n	8001152 <__aeabi_ddiv+0x45e>
 8001150:	e08d      	b.n	800126e <__aeabi_ddiv+0x57a>
 8001152:	428e      	cmp	r6, r1
 8001154:	d200      	bcs.n	8001158 <__aeabi_ddiv+0x464>
 8001156:	e0a3      	b.n	80012a0 <__aeabi_ddiv+0x5ac>
 8001158:	d100      	bne.n	800115c <__aeabi_ddiv+0x468>
 800115a:	e0b3      	b.n	80012c4 <__aeabi_ddiv+0x5d0>
 800115c:	0005      	movs	r5, r0
 800115e:	e6f5      	b.n	8000f4c <__aeabi_ddiv+0x258>
 8001160:	42aa      	cmp	r2, r5
 8001162:	d900      	bls.n	8001166 <__aeabi_ddiv+0x472>
 8001164:	e639      	b.n	8000dda <__aeabi_ddiv+0xe6>
 8001166:	4643      	mov	r3, r8
 8001168:	07de      	lsls	r6, r3, #31
 800116a:	0858      	lsrs	r0, r3, #1
 800116c:	086b      	lsrs	r3, r5, #1
 800116e:	431e      	orrs	r6, r3
 8001170:	07ed      	lsls	r5, r5, #31
 8001172:	e639      	b.n	8000de8 <__aeabi_ddiv+0xf4>
 8001174:	4648      	mov	r0, r9
 8001176:	f001 f937 	bl	80023e8 <__clzsi2>
 800117a:	0001      	movs	r1, r0
 800117c:	0002      	movs	r2, r0
 800117e:	3115      	adds	r1, #21
 8001180:	3220      	adds	r2, #32
 8001182:	291c      	cmp	r1, #28
 8001184:	dc00      	bgt.n	8001188 <__aeabi_ddiv+0x494>
 8001186:	e72c      	b.n	8000fe2 <__aeabi_ddiv+0x2ee>
 8001188:	464b      	mov	r3, r9
 800118a:	3808      	subs	r0, #8
 800118c:	4083      	lsls	r3, r0
 800118e:	2500      	movs	r5, #0
 8001190:	4698      	mov	r8, r3
 8001192:	e732      	b.n	8000ffa <__aeabi_ddiv+0x306>
 8001194:	f001 f928 	bl	80023e8 <__clzsi2>
 8001198:	0003      	movs	r3, r0
 800119a:	001a      	movs	r2, r3
 800119c:	3215      	adds	r2, #21
 800119e:	3020      	adds	r0, #32
 80011a0:	2a1c      	cmp	r2, #28
 80011a2:	dc00      	bgt.n	80011a6 <__aeabi_ddiv+0x4b2>
 80011a4:	e700      	b.n	8000fa8 <__aeabi_ddiv+0x2b4>
 80011a6:	4654      	mov	r4, sl
 80011a8:	3b08      	subs	r3, #8
 80011aa:	2200      	movs	r2, #0
 80011ac:	409c      	lsls	r4, r3
 80011ae:	e705      	b.n	8000fbc <__aeabi_ddiv+0x2c8>
 80011b0:	1936      	adds	r6, r6, r4
 80011b2:	3b01      	subs	r3, #1
 80011b4:	42b4      	cmp	r4, r6
 80011b6:	d900      	bls.n	80011ba <__aeabi_ddiv+0x4c6>
 80011b8:	e6a6      	b.n	8000f08 <__aeabi_ddiv+0x214>
 80011ba:	42b2      	cmp	r2, r6
 80011bc:	d800      	bhi.n	80011c0 <__aeabi_ddiv+0x4cc>
 80011be:	e6a3      	b.n	8000f08 <__aeabi_ddiv+0x214>
 80011c0:	1e83      	subs	r3, r0, #2
 80011c2:	1936      	adds	r6, r6, r4
 80011c4:	e6a0      	b.n	8000f08 <__aeabi_ddiv+0x214>
 80011c6:	1909      	adds	r1, r1, r4
 80011c8:	3d01      	subs	r5, #1
 80011ca:	428c      	cmp	r4, r1
 80011cc:	d900      	bls.n	80011d0 <__aeabi_ddiv+0x4dc>
 80011ce:	e68d      	b.n	8000eec <__aeabi_ddiv+0x1f8>
 80011d0:	428a      	cmp	r2, r1
 80011d2:	d800      	bhi.n	80011d6 <__aeabi_ddiv+0x4e2>
 80011d4:	e68a      	b.n	8000eec <__aeabi_ddiv+0x1f8>
 80011d6:	1e85      	subs	r5, r0, #2
 80011d8:	1909      	adds	r1, r1, r4
 80011da:	e687      	b.n	8000eec <__aeabi_ddiv+0x1f8>
 80011dc:	230f      	movs	r3, #15
 80011de:	402b      	ands	r3, r5
 80011e0:	2b04      	cmp	r3, #4
 80011e2:	d100      	bne.n	80011e6 <__aeabi_ddiv+0x4f2>
 80011e4:	e6bc      	b.n	8000f60 <__aeabi_ddiv+0x26c>
 80011e6:	2305      	movs	r3, #5
 80011e8:	425b      	negs	r3, r3
 80011ea:	42ab      	cmp	r3, r5
 80011ec:	419b      	sbcs	r3, r3
 80011ee:	3504      	adds	r5, #4
 80011f0:	425b      	negs	r3, r3
 80011f2:	08ed      	lsrs	r5, r5, #3
 80011f4:	4498      	add	r8, r3
 80011f6:	e6b4      	b.n	8000f62 <__aeabi_ddiv+0x26e>
 80011f8:	42af      	cmp	r7, r5
 80011fa:	d900      	bls.n	80011fe <__aeabi_ddiv+0x50a>
 80011fc:	e660      	b.n	8000ec0 <__aeabi_ddiv+0x1cc>
 80011fe:	4282      	cmp	r2, r0
 8001200:	d804      	bhi.n	800120c <__aeabi_ddiv+0x518>
 8001202:	d000      	beq.n	8001206 <__aeabi_ddiv+0x512>
 8001204:	e65c      	b.n	8000ec0 <__aeabi_ddiv+0x1cc>
 8001206:	42ae      	cmp	r6, r5
 8001208:	d800      	bhi.n	800120c <__aeabi_ddiv+0x518>
 800120a:	e659      	b.n	8000ec0 <__aeabi_ddiv+0x1cc>
 800120c:	2302      	movs	r3, #2
 800120e:	425b      	negs	r3, r3
 8001210:	469c      	mov	ip, r3
 8001212:	9b00      	ldr	r3, [sp, #0]
 8001214:	44e0      	add	r8, ip
 8001216:	469c      	mov	ip, r3
 8001218:	4465      	add	r5, ip
 800121a:	429d      	cmp	r5, r3
 800121c:	419b      	sbcs	r3, r3
 800121e:	425b      	negs	r3, r3
 8001220:	191b      	adds	r3, r3, r4
 8001222:	18c0      	adds	r0, r0, r3
 8001224:	e64d      	b.n	8000ec2 <__aeabi_ddiv+0x1ce>
 8001226:	428a      	cmp	r2, r1
 8001228:	d800      	bhi.n	800122c <__aeabi_ddiv+0x538>
 800122a:	e60e      	b.n	8000e4a <__aeabi_ddiv+0x156>
 800122c:	1e83      	subs	r3, r0, #2
 800122e:	1909      	adds	r1, r1, r4
 8001230:	e60b      	b.n	8000e4a <__aeabi_ddiv+0x156>
 8001232:	428a      	cmp	r2, r1
 8001234:	d800      	bhi.n	8001238 <__aeabi_ddiv+0x544>
 8001236:	e5f4      	b.n	8000e22 <__aeabi_ddiv+0x12e>
 8001238:	1e83      	subs	r3, r0, #2
 800123a:	4698      	mov	r8, r3
 800123c:	1909      	adds	r1, r1, r4
 800123e:	e5f0      	b.n	8000e22 <__aeabi_ddiv+0x12e>
 8001240:	4925      	ldr	r1, [pc, #148]	; (80012d8 <__aeabi_ddiv+0x5e4>)
 8001242:	0028      	movs	r0, r5
 8001244:	4459      	add	r1, fp
 8001246:	408d      	lsls	r5, r1
 8001248:	4642      	mov	r2, r8
 800124a:	408a      	lsls	r2, r1
 800124c:	1e69      	subs	r1, r5, #1
 800124e:	418d      	sbcs	r5, r1
 8001250:	4641      	mov	r1, r8
 8001252:	40d8      	lsrs	r0, r3
 8001254:	40d9      	lsrs	r1, r3
 8001256:	4302      	orrs	r2, r0
 8001258:	432a      	orrs	r2, r5
 800125a:	000b      	movs	r3, r1
 800125c:	0751      	lsls	r1, r2, #29
 800125e:	d100      	bne.n	8001262 <__aeabi_ddiv+0x56e>
 8001260:	e751      	b.n	8001106 <__aeabi_ddiv+0x412>
 8001262:	210f      	movs	r1, #15
 8001264:	4011      	ands	r1, r2
 8001266:	2904      	cmp	r1, #4
 8001268:	d000      	beq.n	800126c <__aeabi_ddiv+0x578>
 800126a:	e746      	b.n	80010fa <__aeabi_ddiv+0x406>
 800126c:	e74b      	b.n	8001106 <__aeabi_ddiv+0x412>
 800126e:	0005      	movs	r5, r0
 8001270:	428e      	cmp	r6, r1
 8001272:	d000      	beq.n	8001276 <__aeabi_ddiv+0x582>
 8001274:	e66a      	b.n	8000f4c <__aeabi_ddiv+0x258>
 8001276:	9a00      	ldr	r2, [sp, #0]
 8001278:	4293      	cmp	r3, r2
 800127a:	d000      	beq.n	800127e <__aeabi_ddiv+0x58a>
 800127c:	e666      	b.n	8000f4c <__aeabi_ddiv+0x258>
 800127e:	e667      	b.n	8000f50 <__aeabi_ddiv+0x25c>
 8001280:	4a16      	ldr	r2, [pc, #88]	; (80012dc <__aeabi_ddiv+0x5e8>)
 8001282:	445a      	add	r2, fp
 8001284:	2a00      	cmp	r2, #0
 8001286:	dc00      	bgt.n	800128a <__aeabi_ddiv+0x596>
 8001288:	e710      	b.n	80010ac <__aeabi_ddiv+0x3b8>
 800128a:	2301      	movs	r3, #1
 800128c:	2500      	movs	r5, #0
 800128e:	4498      	add	r8, r3
 8001290:	e667      	b.n	8000f62 <__aeabi_ddiv+0x26e>
 8001292:	075d      	lsls	r5, r3, #29
 8001294:	025b      	lsls	r3, r3, #9
 8001296:	0b1c      	lsrs	r4, r3, #12
 8001298:	08d2      	lsrs	r2, r2, #3
 800129a:	2300      	movs	r3, #0
 800129c:	4315      	orrs	r5, r2
 800129e:	e580      	b.n	8000da2 <__aeabi_ddiv+0xae>
 80012a0:	9800      	ldr	r0, [sp, #0]
 80012a2:	3d02      	subs	r5, #2
 80012a4:	0042      	lsls	r2, r0, #1
 80012a6:	4282      	cmp	r2, r0
 80012a8:	41bf      	sbcs	r7, r7
 80012aa:	427f      	negs	r7, r7
 80012ac:	193c      	adds	r4, r7, r4
 80012ae:	1936      	adds	r6, r6, r4
 80012b0:	9200      	str	r2, [sp, #0]
 80012b2:	e7dd      	b.n	8001270 <__aeabi_ddiv+0x57c>
 80012b4:	2480      	movs	r4, #128	; 0x80
 80012b6:	4643      	mov	r3, r8
 80012b8:	0324      	lsls	r4, r4, #12
 80012ba:	431c      	orrs	r4, r3
 80012bc:	0324      	lsls	r4, r4, #12
 80012be:	4b04      	ldr	r3, [pc, #16]	; (80012d0 <__aeabi_ddiv+0x5dc>)
 80012c0:	0b24      	lsrs	r4, r4, #12
 80012c2:	e56e      	b.n	8000da2 <__aeabi_ddiv+0xae>
 80012c4:	9a00      	ldr	r2, [sp, #0]
 80012c6:	429a      	cmp	r2, r3
 80012c8:	d3ea      	bcc.n	80012a0 <__aeabi_ddiv+0x5ac>
 80012ca:	0005      	movs	r5, r0
 80012cc:	e7d3      	b.n	8001276 <__aeabi_ddiv+0x582>
 80012ce:	46c0      	nop			; (mov r8, r8)
 80012d0:	000007ff 	.word	0x000007ff
 80012d4:	0000043e 	.word	0x0000043e
 80012d8:	0000041e 	.word	0x0000041e
 80012dc:	000003ff 	.word	0x000003ff

080012e0 <__eqdf2>:
 80012e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012e2:	464e      	mov	r6, r9
 80012e4:	4645      	mov	r5, r8
 80012e6:	46de      	mov	lr, fp
 80012e8:	4657      	mov	r7, sl
 80012ea:	4690      	mov	r8, r2
 80012ec:	b5e0      	push	{r5, r6, r7, lr}
 80012ee:	0017      	movs	r7, r2
 80012f0:	031a      	lsls	r2, r3, #12
 80012f2:	0b12      	lsrs	r2, r2, #12
 80012f4:	0005      	movs	r5, r0
 80012f6:	4684      	mov	ip, r0
 80012f8:	4819      	ldr	r0, [pc, #100]	; (8001360 <__eqdf2+0x80>)
 80012fa:	030e      	lsls	r6, r1, #12
 80012fc:	004c      	lsls	r4, r1, #1
 80012fe:	4691      	mov	r9, r2
 8001300:	005a      	lsls	r2, r3, #1
 8001302:	0fdb      	lsrs	r3, r3, #31
 8001304:	469b      	mov	fp, r3
 8001306:	0b36      	lsrs	r6, r6, #12
 8001308:	0d64      	lsrs	r4, r4, #21
 800130a:	0fc9      	lsrs	r1, r1, #31
 800130c:	0d52      	lsrs	r2, r2, #21
 800130e:	4284      	cmp	r4, r0
 8001310:	d019      	beq.n	8001346 <__eqdf2+0x66>
 8001312:	4282      	cmp	r2, r0
 8001314:	d010      	beq.n	8001338 <__eqdf2+0x58>
 8001316:	2001      	movs	r0, #1
 8001318:	4294      	cmp	r4, r2
 800131a:	d10e      	bne.n	800133a <__eqdf2+0x5a>
 800131c:	454e      	cmp	r6, r9
 800131e:	d10c      	bne.n	800133a <__eqdf2+0x5a>
 8001320:	2001      	movs	r0, #1
 8001322:	45c4      	cmp	ip, r8
 8001324:	d109      	bne.n	800133a <__eqdf2+0x5a>
 8001326:	4559      	cmp	r1, fp
 8001328:	d017      	beq.n	800135a <__eqdf2+0x7a>
 800132a:	2c00      	cmp	r4, #0
 800132c:	d105      	bne.n	800133a <__eqdf2+0x5a>
 800132e:	0030      	movs	r0, r6
 8001330:	4328      	orrs	r0, r5
 8001332:	1e43      	subs	r3, r0, #1
 8001334:	4198      	sbcs	r0, r3
 8001336:	e000      	b.n	800133a <__eqdf2+0x5a>
 8001338:	2001      	movs	r0, #1
 800133a:	bcf0      	pop	{r4, r5, r6, r7}
 800133c:	46bb      	mov	fp, r7
 800133e:	46b2      	mov	sl, r6
 8001340:	46a9      	mov	r9, r5
 8001342:	46a0      	mov	r8, r4
 8001344:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001346:	0033      	movs	r3, r6
 8001348:	2001      	movs	r0, #1
 800134a:	432b      	orrs	r3, r5
 800134c:	d1f5      	bne.n	800133a <__eqdf2+0x5a>
 800134e:	42a2      	cmp	r2, r4
 8001350:	d1f3      	bne.n	800133a <__eqdf2+0x5a>
 8001352:	464b      	mov	r3, r9
 8001354:	433b      	orrs	r3, r7
 8001356:	d1f0      	bne.n	800133a <__eqdf2+0x5a>
 8001358:	e7e2      	b.n	8001320 <__eqdf2+0x40>
 800135a:	2000      	movs	r0, #0
 800135c:	e7ed      	b.n	800133a <__eqdf2+0x5a>
 800135e:	46c0      	nop			; (mov r8, r8)
 8001360:	000007ff 	.word	0x000007ff

08001364 <__gedf2>:
 8001364:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001366:	4647      	mov	r7, r8
 8001368:	46ce      	mov	lr, r9
 800136a:	0004      	movs	r4, r0
 800136c:	0018      	movs	r0, r3
 800136e:	0016      	movs	r6, r2
 8001370:	031b      	lsls	r3, r3, #12
 8001372:	0b1b      	lsrs	r3, r3, #12
 8001374:	4d2d      	ldr	r5, [pc, #180]	; (800142c <__gedf2+0xc8>)
 8001376:	004a      	lsls	r2, r1, #1
 8001378:	4699      	mov	r9, r3
 800137a:	b580      	push	{r7, lr}
 800137c:	0043      	lsls	r3, r0, #1
 800137e:	030f      	lsls	r7, r1, #12
 8001380:	46a4      	mov	ip, r4
 8001382:	46b0      	mov	r8, r6
 8001384:	0b3f      	lsrs	r7, r7, #12
 8001386:	0d52      	lsrs	r2, r2, #21
 8001388:	0fc9      	lsrs	r1, r1, #31
 800138a:	0d5b      	lsrs	r3, r3, #21
 800138c:	0fc0      	lsrs	r0, r0, #31
 800138e:	42aa      	cmp	r2, r5
 8001390:	d021      	beq.n	80013d6 <__gedf2+0x72>
 8001392:	42ab      	cmp	r3, r5
 8001394:	d013      	beq.n	80013be <__gedf2+0x5a>
 8001396:	2a00      	cmp	r2, #0
 8001398:	d122      	bne.n	80013e0 <__gedf2+0x7c>
 800139a:	433c      	orrs	r4, r7
 800139c:	2b00      	cmp	r3, #0
 800139e:	d102      	bne.n	80013a6 <__gedf2+0x42>
 80013a0:	464d      	mov	r5, r9
 80013a2:	432e      	orrs	r6, r5
 80013a4:	d022      	beq.n	80013ec <__gedf2+0x88>
 80013a6:	2c00      	cmp	r4, #0
 80013a8:	d010      	beq.n	80013cc <__gedf2+0x68>
 80013aa:	4281      	cmp	r1, r0
 80013ac:	d022      	beq.n	80013f4 <__gedf2+0x90>
 80013ae:	2002      	movs	r0, #2
 80013b0:	3901      	subs	r1, #1
 80013b2:	4008      	ands	r0, r1
 80013b4:	3801      	subs	r0, #1
 80013b6:	bcc0      	pop	{r6, r7}
 80013b8:	46b9      	mov	r9, r7
 80013ba:	46b0      	mov	r8, r6
 80013bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013be:	464d      	mov	r5, r9
 80013c0:	432e      	orrs	r6, r5
 80013c2:	d129      	bne.n	8001418 <__gedf2+0xb4>
 80013c4:	2a00      	cmp	r2, #0
 80013c6:	d1f0      	bne.n	80013aa <__gedf2+0x46>
 80013c8:	433c      	orrs	r4, r7
 80013ca:	d1ee      	bne.n	80013aa <__gedf2+0x46>
 80013cc:	2800      	cmp	r0, #0
 80013ce:	d1f2      	bne.n	80013b6 <__gedf2+0x52>
 80013d0:	2001      	movs	r0, #1
 80013d2:	4240      	negs	r0, r0
 80013d4:	e7ef      	b.n	80013b6 <__gedf2+0x52>
 80013d6:	003d      	movs	r5, r7
 80013d8:	4325      	orrs	r5, r4
 80013da:	d11d      	bne.n	8001418 <__gedf2+0xb4>
 80013dc:	4293      	cmp	r3, r2
 80013de:	d0ee      	beq.n	80013be <__gedf2+0x5a>
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d1e2      	bne.n	80013aa <__gedf2+0x46>
 80013e4:	464c      	mov	r4, r9
 80013e6:	4326      	orrs	r6, r4
 80013e8:	d1df      	bne.n	80013aa <__gedf2+0x46>
 80013ea:	e7e0      	b.n	80013ae <__gedf2+0x4a>
 80013ec:	2000      	movs	r0, #0
 80013ee:	2c00      	cmp	r4, #0
 80013f0:	d0e1      	beq.n	80013b6 <__gedf2+0x52>
 80013f2:	e7dc      	b.n	80013ae <__gedf2+0x4a>
 80013f4:	429a      	cmp	r2, r3
 80013f6:	dc0a      	bgt.n	800140e <__gedf2+0xaa>
 80013f8:	dbe8      	blt.n	80013cc <__gedf2+0x68>
 80013fa:	454f      	cmp	r7, r9
 80013fc:	d8d7      	bhi.n	80013ae <__gedf2+0x4a>
 80013fe:	d00e      	beq.n	800141e <__gedf2+0xba>
 8001400:	2000      	movs	r0, #0
 8001402:	454f      	cmp	r7, r9
 8001404:	d2d7      	bcs.n	80013b6 <__gedf2+0x52>
 8001406:	2900      	cmp	r1, #0
 8001408:	d0e2      	beq.n	80013d0 <__gedf2+0x6c>
 800140a:	0008      	movs	r0, r1
 800140c:	e7d3      	b.n	80013b6 <__gedf2+0x52>
 800140e:	4243      	negs	r3, r0
 8001410:	4158      	adcs	r0, r3
 8001412:	0040      	lsls	r0, r0, #1
 8001414:	3801      	subs	r0, #1
 8001416:	e7ce      	b.n	80013b6 <__gedf2+0x52>
 8001418:	2002      	movs	r0, #2
 800141a:	4240      	negs	r0, r0
 800141c:	e7cb      	b.n	80013b6 <__gedf2+0x52>
 800141e:	45c4      	cmp	ip, r8
 8001420:	d8c5      	bhi.n	80013ae <__gedf2+0x4a>
 8001422:	2000      	movs	r0, #0
 8001424:	45c4      	cmp	ip, r8
 8001426:	d2c6      	bcs.n	80013b6 <__gedf2+0x52>
 8001428:	e7ed      	b.n	8001406 <__gedf2+0xa2>
 800142a:	46c0      	nop			; (mov r8, r8)
 800142c:	000007ff 	.word	0x000007ff

08001430 <__ledf2>:
 8001430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001432:	4647      	mov	r7, r8
 8001434:	46ce      	mov	lr, r9
 8001436:	0004      	movs	r4, r0
 8001438:	0018      	movs	r0, r3
 800143a:	0016      	movs	r6, r2
 800143c:	031b      	lsls	r3, r3, #12
 800143e:	0b1b      	lsrs	r3, r3, #12
 8001440:	4d2c      	ldr	r5, [pc, #176]	; (80014f4 <__ledf2+0xc4>)
 8001442:	004a      	lsls	r2, r1, #1
 8001444:	4699      	mov	r9, r3
 8001446:	b580      	push	{r7, lr}
 8001448:	0043      	lsls	r3, r0, #1
 800144a:	030f      	lsls	r7, r1, #12
 800144c:	46a4      	mov	ip, r4
 800144e:	46b0      	mov	r8, r6
 8001450:	0b3f      	lsrs	r7, r7, #12
 8001452:	0d52      	lsrs	r2, r2, #21
 8001454:	0fc9      	lsrs	r1, r1, #31
 8001456:	0d5b      	lsrs	r3, r3, #21
 8001458:	0fc0      	lsrs	r0, r0, #31
 800145a:	42aa      	cmp	r2, r5
 800145c:	d00d      	beq.n	800147a <__ledf2+0x4a>
 800145e:	42ab      	cmp	r3, r5
 8001460:	d010      	beq.n	8001484 <__ledf2+0x54>
 8001462:	2a00      	cmp	r2, #0
 8001464:	d127      	bne.n	80014b6 <__ledf2+0x86>
 8001466:	433c      	orrs	r4, r7
 8001468:	2b00      	cmp	r3, #0
 800146a:	d111      	bne.n	8001490 <__ledf2+0x60>
 800146c:	464d      	mov	r5, r9
 800146e:	432e      	orrs	r6, r5
 8001470:	d10e      	bne.n	8001490 <__ledf2+0x60>
 8001472:	2000      	movs	r0, #0
 8001474:	2c00      	cmp	r4, #0
 8001476:	d015      	beq.n	80014a4 <__ledf2+0x74>
 8001478:	e00e      	b.n	8001498 <__ledf2+0x68>
 800147a:	003d      	movs	r5, r7
 800147c:	4325      	orrs	r5, r4
 800147e:	d110      	bne.n	80014a2 <__ledf2+0x72>
 8001480:	4293      	cmp	r3, r2
 8001482:	d118      	bne.n	80014b6 <__ledf2+0x86>
 8001484:	464d      	mov	r5, r9
 8001486:	432e      	orrs	r6, r5
 8001488:	d10b      	bne.n	80014a2 <__ledf2+0x72>
 800148a:	2a00      	cmp	r2, #0
 800148c:	d102      	bne.n	8001494 <__ledf2+0x64>
 800148e:	433c      	orrs	r4, r7
 8001490:	2c00      	cmp	r4, #0
 8001492:	d00b      	beq.n	80014ac <__ledf2+0x7c>
 8001494:	4281      	cmp	r1, r0
 8001496:	d014      	beq.n	80014c2 <__ledf2+0x92>
 8001498:	2002      	movs	r0, #2
 800149a:	3901      	subs	r1, #1
 800149c:	4008      	ands	r0, r1
 800149e:	3801      	subs	r0, #1
 80014a0:	e000      	b.n	80014a4 <__ledf2+0x74>
 80014a2:	2002      	movs	r0, #2
 80014a4:	bcc0      	pop	{r6, r7}
 80014a6:	46b9      	mov	r9, r7
 80014a8:	46b0      	mov	r8, r6
 80014aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014ac:	2800      	cmp	r0, #0
 80014ae:	d1f9      	bne.n	80014a4 <__ledf2+0x74>
 80014b0:	2001      	movs	r0, #1
 80014b2:	4240      	negs	r0, r0
 80014b4:	e7f6      	b.n	80014a4 <__ledf2+0x74>
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d1ec      	bne.n	8001494 <__ledf2+0x64>
 80014ba:	464c      	mov	r4, r9
 80014bc:	4326      	orrs	r6, r4
 80014be:	d1e9      	bne.n	8001494 <__ledf2+0x64>
 80014c0:	e7ea      	b.n	8001498 <__ledf2+0x68>
 80014c2:	429a      	cmp	r2, r3
 80014c4:	dd04      	ble.n	80014d0 <__ledf2+0xa0>
 80014c6:	4243      	negs	r3, r0
 80014c8:	4158      	adcs	r0, r3
 80014ca:	0040      	lsls	r0, r0, #1
 80014cc:	3801      	subs	r0, #1
 80014ce:	e7e9      	b.n	80014a4 <__ledf2+0x74>
 80014d0:	429a      	cmp	r2, r3
 80014d2:	dbeb      	blt.n	80014ac <__ledf2+0x7c>
 80014d4:	454f      	cmp	r7, r9
 80014d6:	d8df      	bhi.n	8001498 <__ledf2+0x68>
 80014d8:	d006      	beq.n	80014e8 <__ledf2+0xb8>
 80014da:	2000      	movs	r0, #0
 80014dc:	454f      	cmp	r7, r9
 80014de:	d2e1      	bcs.n	80014a4 <__ledf2+0x74>
 80014e0:	2900      	cmp	r1, #0
 80014e2:	d0e5      	beq.n	80014b0 <__ledf2+0x80>
 80014e4:	0008      	movs	r0, r1
 80014e6:	e7dd      	b.n	80014a4 <__ledf2+0x74>
 80014e8:	45c4      	cmp	ip, r8
 80014ea:	d8d5      	bhi.n	8001498 <__ledf2+0x68>
 80014ec:	2000      	movs	r0, #0
 80014ee:	45c4      	cmp	ip, r8
 80014f0:	d2d8      	bcs.n	80014a4 <__ledf2+0x74>
 80014f2:	e7f5      	b.n	80014e0 <__ledf2+0xb0>
 80014f4:	000007ff 	.word	0x000007ff

080014f8 <__aeabi_dmul>:
 80014f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014fa:	4657      	mov	r7, sl
 80014fc:	464e      	mov	r6, r9
 80014fe:	4645      	mov	r5, r8
 8001500:	46de      	mov	lr, fp
 8001502:	b5e0      	push	{r5, r6, r7, lr}
 8001504:	4698      	mov	r8, r3
 8001506:	030c      	lsls	r4, r1, #12
 8001508:	004b      	lsls	r3, r1, #1
 800150a:	0006      	movs	r6, r0
 800150c:	4692      	mov	sl, r2
 800150e:	b087      	sub	sp, #28
 8001510:	0b24      	lsrs	r4, r4, #12
 8001512:	0d5b      	lsrs	r3, r3, #21
 8001514:	0fcf      	lsrs	r7, r1, #31
 8001516:	2b00      	cmp	r3, #0
 8001518:	d100      	bne.n	800151c <__aeabi_dmul+0x24>
 800151a:	e15c      	b.n	80017d6 <__aeabi_dmul+0x2de>
 800151c:	4ad9      	ldr	r2, [pc, #868]	; (8001884 <__aeabi_dmul+0x38c>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d100      	bne.n	8001524 <__aeabi_dmul+0x2c>
 8001522:	e175      	b.n	8001810 <__aeabi_dmul+0x318>
 8001524:	0f42      	lsrs	r2, r0, #29
 8001526:	00e4      	lsls	r4, r4, #3
 8001528:	4314      	orrs	r4, r2
 800152a:	2280      	movs	r2, #128	; 0x80
 800152c:	0412      	lsls	r2, r2, #16
 800152e:	4314      	orrs	r4, r2
 8001530:	4ad5      	ldr	r2, [pc, #852]	; (8001888 <__aeabi_dmul+0x390>)
 8001532:	00c5      	lsls	r5, r0, #3
 8001534:	4694      	mov	ip, r2
 8001536:	4463      	add	r3, ip
 8001538:	9300      	str	r3, [sp, #0]
 800153a:	2300      	movs	r3, #0
 800153c:	4699      	mov	r9, r3
 800153e:	469b      	mov	fp, r3
 8001540:	4643      	mov	r3, r8
 8001542:	4642      	mov	r2, r8
 8001544:	031e      	lsls	r6, r3, #12
 8001546:	0fd2      	lsrs	r2, r2, #31
 8001548:	005b      	lsls	r3, r3, #1
 800154a:	4650      	mov	r0, sl
 800154c:	4690      	mov	r8, r2
 800154e:	0b36      	lsrs	r6, r6, #12
 8001550:	0d5b      	lsrs	r3, r3, #21
 8001552:	d100      	bne.n	8001556 <__aeabi_dmul+0x5e>
 8001554:	e120      	b.n	8001798 <__aeabi_dmul+0x2a0>
 8001556:	4acb      	ldr	r2, [pc, #812]	; (8001884 <__aeabi_dmul+0x38c>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d100      	bne.n	800155e <__aeabi_dmul+0x66>
 800155c:	e162      	b.n	8001824 <__aeabi_dmul+0x32c>
 800155e:	49ca      	ldr	r1, [pc, #808]	; (8001888 <__aeabi_dmul+0x390>)
 8001560:	0f42      	lsrs	r2, r0, #29
 8001562:	468c      	mov	ip, r1
 8001564:	9900      	ldr	r1, [sp, #0]
 8001566:	4463      	add	r3, ip
 8001568:	00f6      	lsls	r6, r6, #3
 800156a:	468c      	mov	ip, r1
 800156c:	4316      	orrs	r6, r2
 800156e:	2280      	movs	r2, #128	; 0x80
 8001570:	449c      	add	ip, r3
 8001572:	0412      	lsls	r2, r2, #16
 8001574:	4663      	mov	r3, ip
 8001576:	4316      	orrs	r6, r2
 8001578:	00c2      	lsls	r2, r0, #3
 800157a:	2000      	movs	r0, #0
 800157c:	9300      	str	r3, [sp, #0]
 800157e:	9900      	ldr	r1, [sp, #0]
 8001580:	4643      	mov	r3, r8
 8001582:	3101      	adds	r1, #1
 8001584:	468c      	mov	ip, r1
 8001586:	4649      	mov	r1, r9
 8001588:	407b      	eors	r3, r7
 800158a:	9301      	str	r3, [sp, #4]
 800158c:	290f      	cmp	r1, #15
 800158e:	d826      	bhi.n	80015de <__aeabi_dmul+0xe6>
 8001590:	4bbe      	ldr	r3, [pc, #760]	; (800188c <__aeabi_dmul+0x394>)
 8001592:	0089      	lsls	r1, r1, #2
 8001594:	5859      	ldr	r1, [r3, r1]
 8001596:	468f      	mov	pc, r1
 8001598:	4643      	mov	r3, r8
 800159a:	9301      	str	r3, [sp, #4]
 800159c:	0034      	movs	r4, r6
 800159e:	0015      	movs	r5, r2
 80015a0:	4683      	mov	fp, r0
 80015a2:	465b      	mov	r3, fp
 80015a4:	2b02      	cmp	r3, #2
 80015a6:	d016      	beq.n	80015d6 <__aeabi_dmul+0xde>
 80015a8:	2b03      	cmp	r3, #3
 80015aa:	d100      	bne.n	80015ae <__aeabi_dmul+0xb6>
 80015ac:	e203      	b.n	80019b6 <__aeabi_dmul+0x4be>
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d000      	beq.n	80015b4 <__aeabi_dmul+0xbc>
 80015b2:	e0cd      	b.n	8001750 <__aeabi_dmul+0x258>
 80015b4:	2200      	movs	r2, #0
 80015b6:	2400      	movs	r4, #0
 80015b8:	2500      	movs	r5, #0
 80015ba:	9b01      	ldr	r3, [sp, #4]
 80015bc:	0512      	lsls	r2, r2, #20
 80015be:	4322      	orrs	r2, r4
 80015c0:	07db      	lsls	r3, r3, #31
 80015c2:	431a      	orrs	r2, r3
 80015c4:	0028      	movs	r0, r5
 80015c6:	0011      	movs	r1, r2
 80015c8:	b007      	add	sp, #28
 80015ca:	bcf0      	pop	{r4, r5, r6, r7}
 80015cc:	46bb      	mov	fp, r7
 80015ce:	46b2      	mov	sl, r6
 80015d0:	46a9      	mov	r9, r5
 80015d2:	46a0      	mov	r8, r4
 80015d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015d6:	2400      	movs	r4, #0
 80015d8:	2500      	movs	r5, #0
 80015da:	4aaa      	ldr	r2, [pc, #680]	; (8001884 <__aeabi_dmul+0x38c>)
 80015dc:	e7ed      	b.n	80015ba <__aeabi_dmul+0xc2>
 80015de:	0c28      	lsrs	r0, r5, #16
 80015e0:	042d      	lsls	r5, r5, #16
 80015e2:	0c2d      	lsrs	r5, r5, #16
 80015e4:	002b      	movs	r3, r5
 80015e6:	0c11      	lsrs	r1, r2, #16
 80015e8:	0412      	lsls	r2, r2, #16
 80015ea:	0c12      	lsrs	r2, r2, #16
 80015ec:	4353      	muls	r3, r2
 80015ee:	4698      	mov	r8, r3
 80015f0:	0013      	movs	r3, r2
 80015f2:	002f      	movs	r7, r5
 80015f4:	4343      	muls	r3, r0
 80015f6:	4699      	mov	r9, r3
 80015f8:	434f      	muls	r7, r1
 80015fa:	444f      	add	r7, r9
 80015fc:	46bb      	mov	fp, r7
 80015fe:	4647      	mov	r7, r8
 8001600:	000b      	movs	r3, r1
 8001602:	0c3f      	lsrs	r7, r7, #16
 8001604:	46ba      	mov	sl, r7
 8001606:	4343      	muls	r3, r0
 8001608:	44da      	add	sl, fp
 800160a:	9302      	str	r3, [sp, #8]
 800160c:	45d1      	cmp	r9, sl
 800160e:	d904      	bls.n	800161a <__aeabi_dmul+0x122>
 8001610:	2780      	movs	r7, #128	; 0x80
 8001612:	027f      	lsls	r7, r7, #9
 8001614:	46b9      	mov	r9, r7
 8001616:	444b      	add	r3, r9
 8001618:	9302      	str	r3, [sp, #8]
 800161a:	4653      	mov	r3, sl
 800161c:	0c1b      	lsrs	r3, r3, #16
 800161e:	469b      	mov	fp, r3
 8001620:	4653      	mov	r3, sl
 8001622:	041f      	lsls	r7, r3, #16
 8001624:	4643      	mov	r3, r8
 8001626:	041b      	lsls	r3, r3, #16
 8001628:	0c1b      	lsrs	r3, r3, #16
 800162a:	4698      	mov	r8, r3
 800162c:	003b      	movs	r3, r7
 800162e:	4443      	add	r3, r8
 8001630:	9304      	str	r3, [sp, #16]
 8001632:	0c33      	lsrs	r3, r6, #16
 8001634:	0436      	lsls	r6, r6, #16
 8001636:	0c36      	lsrs	r6, r6, #16
 8001638:	4698      	mov	r8, r3
 800163a:	0033      	movs	r3, r6
 800163c:	4343      	muls	r3, r0
 800163e:	4699      	mov	r9, r3
 8001640:	4643      	mov	r3, r8
 8001642:	4343      	muls	r3, r0
 8001644:	002f      	movs	r7, r5
 8001646:	469a      	mov	sl, r3
 8001648:	4643      	mov	r3, r8
 800164a:	4377      	muls	r7, r6
 800164c:	435d      	muls	r5, r3
 800164e:	0c38      	lsrs	r0, r7, #16
 8001650:	444d      	add	r5, r9
 8001652:	1945      	adds	r5, r0, r5
 8001654:	45a9      	cmp	r9, r5
 8001656:	d903      	bls.n	8001660 <__aeabi_dmul+0x168>
 8001658:	2380      	movs	r3, #128	; 0x80
 800165a:	025b      	lsls	r3, r3, #9
 800165c:	4699      	mov	r9, r3
 800165e:	44ca      	add	sl, r9
 8001660:	043f      	lsls	r7, r7, #16
 8001662:	0c28      	lsrs	r0, r5, #16
 8001664:	0c3f      	lsrs	r7, r7, #16
 8001666:	042d      	lsls	r5, r5, #16
 8001668:	19ed      	adds	r5, r5, r7
 800166a:	0c27      	lsrs	r7, r4, #16
 800166c:	0424      	lsls	r4, r4, #16
 800166e:	0c24      	lsrs	r4, r4, #16
 8001670:	0003      	movs	r3, r0
 8001672:	0020      	movs	r0, r4
 8001674:	4350      	muls	r0, r2
 8001676:	437a      	muls	r2, r7
 8001678:	4691      	mov	r9, r2
 800167a:	003a      	movs	r2, r7
 800167c:	4453      	add	r3, sl
 800167e:	9305      	str	r3, [sp, #20]
 8001680:	0c03      	lsrs	r3, r0, #16
 8001682:	469a      	mov	sl, r3
 8001684:	434a      	muls	r2, r1
 8001686:	4361      	muls	r1, r4
 8001688:	4449      	add	r1, r9
 800168a:	4451      	add	r1, sl
 800168c:	44ab      	add	fp, r5
 800168e:	4589      	cmp	r9, r1
 8001690:	d903      	bls.n	800169a <__aeabi_dmul+0x1a2>
 8001692:	2380      	movs	r3, #128	; 0x80
 8001694:	025b      	lsls	r3, r3, #9
 8001696:	4699      	mov	r9, r3
 8001698:	444a      	add	r2, r9
 800169a:	0400      	lsls	r0, r0, #16
 800169c:	0c0b      	lsrs	r3, r1, #16
 800169e:	0c00      	lsrs	r0, r0, #16
 80016a0:	0409      	lsls	r1, r1, #16
 80016a2:	1809      	adds	r1, r1, r0
 80016a4:	0020      	movs	r0, r4
 80016a6:	4699      	mov	r9, r3
 80016a8:	4643      	mov	r3, r8
 80016aa:	4370      	muls	r0, r6
 80016ac:	435c      	muls	r4, r3
 80016ae:	437e      	muls	r6, r7
 80016b0:	435f      	muls	r7, r3
 80016b2:	0c03      	lsrs	r3, r0, #16
 80016b4:	4698      	mov	r8, r3
 80016b6:	19a4      	adds	r4, r4, r6
 80016b8:	4444      	add	r4, r8
 80016ba:	444a      	add	r2, r9
 80016bc:	9703      	str	r7, [sp, #12]
 80016be:	42a6      	cmp	r6, r4
 80016c0:	d904      	bls.n	80016cc <__aeabi_dmul+0x1d4>
 80016c2:	2380      	movs	r3, #128	; 0x80
 80016c4:	025b      	lsls	r3, r3, #9
 80016c6:	4698      	mov	r8, r3
 80016c8:	4447      	add	r7, r8
 80016ca:	9703      	str	r7, [sp, #12]
 80016cc:	0423      	lsls	r3, r4, #16
 80016ce:	9e02      	ldr	r6, [sp, #8]
 80016d0:	469a      	mov	sl, r3
 80016d2:	9b05      	ldr	r3, [sp, #20]
 80016d4:	445e      	add	r6, fp
 80016d6:	4698      	mov	r8, r3
 80016d8:	42ae      	cmp	r6, r5
 80016da:	41ad      	sbcs	r5, r5
 80016dc:	1876      	adds	r6, r6, r1
 80016de:	428e      	cmp	r6, r1
 80016e0:	4189      	sbcs	r1, r1
 80016e2:	0400      	lsls	r0, r0, #16
 80016e4:	0c00      	lsrs	r0, r0, #16
 80016e6:	4450      	add	r0, sl
 80016e8:	4440      	add	r0, r8
 80016ea:	426d      	negs	r5, r5
 80016ec:	1947      	adds	r7, r0, r5
 80016ee:	46b8      	mov	r8, r7
 80016f0:	4693      	mov	fp, r2
 80016f2:	4249      	negs	r1, r1
 80016f4:	4689      	mov	r9, r1
 80016f6:	44c3      	add	fp, r8
 80016f8:	44d9      	add	r9, fp
 80016fa:	4298      	cmp	r0, r3
 80016fc:	4180      	sbcs	r0, r0
 80016fe:	45a8      	cmp	r8, r5
 8001700:	41ad      	sbcs	r5, r5
 8001702:	4593      	cmp	fp, r2
 8001704:	4192      	sbcs	r2, r2
 8001706:	4589      	cmp	r9, r1
 8001708:	4189      	sbcs	r1, r1
 800170a:	426d      	negs	r5, r5
 800170c:	4240      	negs	r0, r0
 800170e:	4328      	orrs	r0, r5
 8001710:	0c24      	lsrs	r4, r4, #16
 8001712:	4252      	negs	r2, r2
 8001714:	4249      	negs	r1, r1
 8001716:	430a      	orrs	r2, r1
 8001718:	9b03      	ldr	r3, [sp, #12]
 800171a:	1900      	adds	r0, r0, r4
 800171c:	1880      	adds	r0, r0, r2
 800171e:	18c7      	adds	r7, r0, r3
 8001720:	464b      	mov	r3, r9
 8001722:	0ddc      	lsrs	r4, r3, #23
 8001724:	9b04      	ldr	r3, [sp, #16]
 8001726:	0275      	lsls	r5, r6, #9
 8001728:	431d      	orrs	r5, r3
 800172a:	1e6a      	subs	r2, r5, #1
 800172c:	4195      	sbcs	r5, r2
 800172e:	464b      	mov	r3, r9
 8001730:	0df6      	lsrs	r6, r6, #23
 8001732:	027f      	lsls	r7, r7, #9
 8001734:	4335      	orrs	r5, r6
 8001736:	025a      	lsls	r2, r3, #9
 8001738:	433c      	orrs	r4, r7
 800173a:	4315      	orrs	r5, r2
 800173c:	01fb      	lsls	r3, r7, #7
 800173e:	d400      	bmi.n	8001742 <__aeabi_dmul+0x24a>
 8001740:	e11c      	b.n	800197c <__aeabi_dmul+0x484>
 8001742:	2101      	movs	r1, #1
 8001744:	086a      	lsrs	r2, r5, #1
 8001746:	400d      	ands	r5, r1
 8001748:	4315      	orrs	r5, r2
 800174a:	07e2      	lsls	r2, r4, #31
 800174c:	4315      	orrs	r5, r2
 800174e:	0864      	lsrs	r4, r4, #1
 8001750:	494f      	ldr	r1, [pc, #316]	; (8001890 <__aeabi_dmul+0x398>)
 8001752:	4461      	add	r1, ip
 8001754:	2900      	cmp	r1, #0
 8001756:	dc00      	bgt.n	800175a <__aeabi_dmul+0x262>
 8001758:	e0b0      	b.n	80018bc <__aeabi_dmul+0x3c4>
 800175a:	076b      	lsls	r3, r5, #29
 800175c:	d009      	beq.n	8001772 <__aeabi_dmul+0x27a>
 800175e:	220f      	movs	r2, #15
 8001760:	402a      	ands	r2, r5
 8001762:	2a04      	cmp	r2, #4
 8001764:	d005      	beq.n	8001772 <__aeabi_dmul+0x27a>
 8001766:	1d2a      	adds	r2, r5, #4
 8001768:	42aa      	cmp	r2, r5
 800176a:	41ad      	sbcs	r5, r5
 800176c:	426d      	negs	r5, r5
 800176e:	1964      	adds	r4, r4, r5
 8001770:	0015      	movs	r5, r2
 8001772:	01e3      	lsls	r3, r4, #7
 8001774:	d504      	bpl.n	8001780 <__aeabi_dmul+0x288>
 8001776:	2180      	movs	r1, #128	; 0x80
 8001778:	4a46      	ldr	r2, [pc, #280]	; (8001894 <__aeabi_dmul+0x39c>)
 800177a:	00c9      	lsls	r1, r1, #3
 800177c:	4014      	ands	r4, r2
 800177e:	4461      	add	r1, ip
 8001780:	4a45      	ldr	r2, [pc, #276]	; (8001898 <__aeabi_dmul+0x3a0>)
 8001782:	4291      	cmp	r1, r2
 8001784:	dd00      	ble.n	8001788 <__aeabi_dmul+0x290>
 8001786:	e726      	b.n	80015d6 <__aeabi_dmul+0xde>
 8001788:	0762      	lsls	r2, r4, #29
 800178a:	08ed      	lsrs	r5, r5, #3
 800178c:	0264      	lsls	r4, r4, #9
 800178e:	0549      	lsls	r1, r1, #21
 8001790:	4315      	orrs	r5, r2
 8001792:	0b24      	lsrs	r4, r4, #12
 8001794:	0d4a      	lsrs	r2, r1, #21
 8001796:	e710      	b.n	80015ba <__aeabi_dmul+0xc2>
 8001798:	4652      	mov	r2, sl
 800179a:	4332      	orrs	r2, r6
 800179c:	d100      	bne.n	80017a0 <__aeabi_dmul+0x2a8>
 800179e:	e07f      	b.n	80018a0 <__aeabi_dmul+0x3a8>
 80017a0:	2e00      	cmp	r6, #0
 80017a2:	d100      	bne.n	80017a6 <__aeabi_dmul+0x2ae>
 80017a4:	e0dc      	b.n	8001960 <__aeabi_dmul+0x468>
 80017a6:	0030      	movs	r0, r6
 80017a8:	f000 fe1e 	bl	80023e8 <__clzsi2>
 80017ac:	0002      	movs	r2, r0
 80017ae:	3a0b      	subs	r2, #11
 80017b0:	231d      	movs	r3, #29
 80017b2:	0001      	movs	r1, r0
 80017b4:	1a9b      	subs	r3, r3, r2
 80017b6:	4652      	mov	r2, sl
 80017b8:	3908      	subs	r1, #8
 80017ba:	40da      	lsrs	r2, r3
 80017bc:	408e      	lsls	r6, r1
 80017be:	4316      	orrs	r6, r2
 80017c0:	4652      	mov	r2, sl
 80017c2:	408a      	lsls	r2, r1
 80017c4:	9b00      	ldr	r3, [sp, #0]
 80017c6:	4935      	ldr	r1, [pc, #212]	; (800189c <__aeabi_dmul+0x3a4>)
 80017c8:	1a18      	subs	r0, r3, r0
 80017ca:	0003      	movs	r3, r0
 80017cc:	468c      	mov	ip, r1
 80017ce:	4463      	add	r3, ip
 80017d0:	2000      	movs	r0, #0
 80017d2:	9300      	str	r3, [sp, #0]
 80017d4:	e6d3      	b.n	800157e <__aeabi_dmul+0x86>
 80017d6:	0025      	movs	r5, r4
 80017d8:	4305      	orrs	r5, r0
 80017da:	d04a      	beq.n	8001872 <__aeabi_dmul+0x37a>
 80017dc:	2c00      	cmp	r4, #0
 80017de:	d100      	bne.n	80017e2 <__aeabi_dmul+0x2ea>
 80017e0:	e0b0      	b.n	8001944 <__aeabi_dmul+0x44c>
 80017e2:	0020      	movs	r0, r4
 80017e4:	f000 fe00 	bl	80023e8 <__clzsi2>
 80017e8:	0001      	movs	r1, r0
 80017ea:	0002      	movs	r2, r0
 80017ec:	390b      	subs	r1, #11
 80017ee:	231d      	movs	r3, #29
 80017f0:	0010      	movs	r0, r2
 80017f2:	1a5b      	subs	r3, r3, r1
 80017f4:	0031      	movs	r1, r6
 80017f6:	0035      	movs	r5, r6
 80017f8:	3808      	subs	r0, #8
 80017fa:	4084      	lsls	r4, r0
 80017fc:	40d9      	lsrs	r1, r3
 80017fe:	4085      	lsls	r5, r0
 8001800:	430c      	orrs	r4, r1
 8001802:	4826      	ldr	r0, [pc, #152]	; (800189c <__aeabi_dmul+0x3a4>)
 8001804:	1a83      	subs	r3, r0, r2
 8001806:	9300      	str	r3, [sp, #0]
 8001808:	2300      	movs	r3, #0
 800180a:	4699      	mov	r9, r3
 800180c:	469b      	mov	fp, r3
 800180e:	e697      	b.n	8001540 <__aeabi_dmul+0x48>
 8001810:	0005      	movs	r5, r0
 8001812:	4325      	orrs	r5, r4
 8001814:	d126      	bne.n	8001864 <__aeabi_dmul+0x36c>
 8001816:	2208      	movs	r2, #8
 8001818:	9300      	str	r3, [sp, #0]
 800181a:	2302      	movs	r3, #2
 800181c:	2400      	movs	r4, #0
 800181e:	4691      	mov	r9, r2
 8001820:	469b      	mov	fp, r3
 8001822:	e68d      	b.n	8001540 <__aeabi_dmul+0x48>
 8001824:	4652      	mov	r2, sl
 8001826:	9b00      	ldr	r3, [sp, #0]
 8001828:	4332      	orrs	r2, r6
 800182a:	d110      	bne.n	800184e <__aeabi_dmul+0x356>
 800182c:	4915      	ldr	r1, [pc, #84]	; (8001884 <__aeabi_dmul+0x38c>)
 800182e:	2600      	movs	r6, #0
 8001830:	468c      	mov	ip, r1
 8001832:	4463      	add	r3, ip
 8001834:	4649      	mov	r1, r9
 8001836:	9300      	str	r3, [sp, #0]
 8001838:	2302      	movs	r3, #2
 800183a:	4319      	orrs	r1, r3
 800183c:	4689      	mov	r9, r1
 800183e:	2002      	movs	r0, #2
 8001840:	e69d      	b.n	800157e <__aeabi_dmul+0x86>
 8001842:	465b      	mov	r3, fp
 8001844:	9701      	str	r7, [sp, #4]
 8001846:	2b02      	cmp	r3, #2
 8001848:	d000      	beq.n	800184c <__aeabi_dmul+0x354>
 800184a:	e6ad      	b.n	80015a8 <__aeabi_dmul+0xb0>
 800184c:	e6c3      	b.n	80015d6 <__aeabi_dmul+0xde>
 800184e:	4a0d      	ldr	r2, [pc, #52]	; (8001884 <__aeabi_dmul+0x38c>)
 8001850:	2003      	movs	r0, #3
 8001852:	4694      	mov	ip, r2
 8001854:	4463      	add	r3, ip
 8001856:	464a      	mov	r2, r9
 8001858:	9300      	str	r3, [sp, #0]
 800185a:	2303      	movs	r3, #3
 800185c:	431a      	orrs	r2, r3
 800185e:	4691      	mov	r9, r2
 8001860:	4652      	mov	r2, sl
 8001862:	e68c      	b.n	800157e <__aeabi_dmul+0x86>
 8001864:	220c      	movs	r2, #12
 8001866:	9300      	str	r3, [sp, #0]
 8001868:	2303      	movs	r3, #3
 800186a:	0005      	movs	r5, r0
 800186c:	4691      	mov	r9, r2
 800186e:	469b      	mov	fp, r3
 8001870:	e666      	b.n	8001540 <__aeabi_dmul+0x48>
 8001872:	2304      	movs	r3, #4
 8001874:	4699      	mov	r9, r3
 8001876:	2300      	movs	r3, #0
 8001878:	9300      	str	r3, [sp, #0]
 800187a:	3301      	adds	r3, #1
 800187c:	2400      	movs	r4, #0
 800187e:	469b      	mov	fp, r3
 8001880:	e65e      	b.n	8001540 <__aeabi_dmul+0x48>
 8001882:	46c0      	nop			; (mov r8, r8)
 8001884:	000007ff 	.word	0x000007ff
 8001888:	fffffc01 	.word	0xfffffc01
 800188c:	0800cf10 	.word	0x0800cf10
 8001890:	000003ff 	.word	0x000003ff
 8001894:	feffffff 	.word	0xfeffffff
 8001898:	000007fe 	.word	0x000007fe
 800189c:	fffffc0d 	.word	0xfffffc0d
 80018a0:	4649      	mov	r1, r9
 80018a2:	2301      	movs	r3, #1
 80018a4:	4319      	orrs	r1, r3
 80018a6:	4689      	mov	r9, r1
 80018a8:	2600      	movs	r6, #0
 80018aa:	2001      	movs	r0, #1
 80018ac:	e667      	b.n	800157e <__aeabi_dmul+0x86>
 80018ae:	2300      	movs	r3, #0
 80018b0:	2480      	movs	r4, #128	; 0x80
 80018b2:	2500      	movs	r5, #0
 80018b4:	4a43      	ldr	r2, [pc, #268]	; (80019c4 <__aeabi_dmul+0x4cc>)
 80018b6:	9301      	str	r3, [sp, #4]
 80018b8:	0324      	lsls	r4, r4, #12
 80018ba:	e67e      	b.n	80015ba <__aeabi_dmul+0xc2>
 80018bc:	2001      	movs	r0, #1
 80018be:	1a40      	subs	r0, r0, r1
 80018c0:	2838      	cmp	r0, #56	; 0x38
 80018c2:	dd00      	ble.n	80018c6 <__aeabi_dmul+0x3ce>
 80018c4:	e676      	b.n	80015b4 <__aeabi_dmul+0xbc>
 80018c6:	281f      	cmp	r0, #31
 80018c8:	dd5b      	ble.n	8001982 <__aeabi_dmul+0x48a>
 80018ca:	221f      	movs	r2, #31
 80018cc:	0023      	movs	r3, r4
 80018ce:	4252      	negs	r2, r2
 80018d0:	1a51      	subs	r1, r2, r1
 80018d2:	40cb      	lsrs	r3, r1
 80018d4:	0019      	movs	r1, r3
 80018d6:	2820      	cmp	r0, #32
 80018d8:	d003      	beq.n	80018e2 <__aeabi_dmul+0x3ea>
 80018da:	4a3b      	ldr	r2, [pc, #236]	; (80019c8 <__aeabi_dmul+0x4d0>)
 80018dc:	4462      	add	r2, ip
 80018de:	4094      	lsls	r4, r2
 80018e0:	4325      	orrs	r5, r4
 80018e2:	1e6a      	subs	r2, r5, #1
 80018e4:	4195      	sbcs	r5, r2
 80018e6:	002a      	movs	r2, r5
 80018e8:	430a      	orrs	r2, r1
 80018ea:	2107      	movs	r1, #7
 80018ec:	000d      	movs	r5, r1
 80018ee:	2400      	movs	r4, #0
 80018f0:	4015      	ands	r5, r2
 80018f2:	4211      	tst	r1, r2
 80018f4:	d05b      	beq.n	80019ae <__aeabi_dmul+0x4b6>
 80018f6:	210f      	movs	r1, #15
 80018f8:	2400      	movs	r4, #0
 80018fa:	4011      	ands	r1, r2
 80018fc:	2904      	cmp	r1, #4
 80018fe:	d053      	beq.n	80019a8 <__aeabi_dmul+0x4b0>
 8001900:	1d11      	adds	r1, r2, #4
 8001902:	4291      	cmp	r1, r2
 8001904:	4192      	sbcs	r2, r2
 8001906:	4252      	negs	r2, r2
 8001908:	18a4      	adds	r4, r4, r2
 800190a:	000a      	movs	r2, r1
 800190c:	0223      	lsls	r3, r4, #8
 800190e:	d54b      	bpl.n	80019a8 <__aeabi_dmul+0x4b0>
 8001910:	2201      	movs	r2, #1
 8001912:	2400      	movs	r4, #0
 8001914:	2500      	movs	r5, #0
 8001916:	e650      	b.n	80015ba <__aeabi_dmul+0xc2>
 8001918:	2380      	movs	r3, #128	; 0x80
 800191a:	031b      	lsls	r3, r3, #12
 800191c:	421c      	tst	r4, r3
 800191e:	d009      	beq.n	8001934 <__aeabi_dmul+0x43c>
 8001920:	421e      	tst	r6, r3
 8001922:	d107      	bne.n	8001934 <__aeabi_dmul+0x43c>
 8001924:	4333      	orrs	r3, r6
 8001926:	031c      	lsls	r4, r3, #12
 8001928:	4643      	mov	r3, r8
 800192a:	0015      	movs	r5, r2
 800192c:	0b24      	lsrs	r4, r4, #12
 800192e:	4a25      	ldr	r2, [pc, #148]	; (80019c4 <__aeabi_dmul+0x4cc>)
 8001930:	9301      	str	r3, [sp, #4]
 8001932:	e642      	b.n	80015ba <__aeabi_dmul+0xc2>
 8001934:	2280      	movs	r2, #128	; 0x80
 8001936:	0312      	lsls	r2, r2, #12
 8001938:	4314      	orrs	r4, r2
 800193a:	0324      	lsls	r4, r4, #12
 800193c:	4a21      	ldr	r2, [pc, #132]	; (80019c4 <__aeabi_dmul+0x4cc>)
 800193e:	0b24      	lsrs	r4, r4, #12
 8001940:	9701      	str	r7, [sp, #4]
 8001942:	e63a      	b.n	80015ba <__aeabi_dmul+0xc2>
 8001944:	f000 fd50 	bl	80023e8 <__clzsi2>
 8001948:	0001      	movs	r1, r0
 800194a:	0002      	movs	r2, r0
 800194c:	3115      	adds	r1, #21
 800194e:	3220      	adds	r2, #32
 8001950:	291c      	cmp	r1, #28
 8001952:	dc00      	bgt.n	8001956 <__aeabi_dmul+0x45e>
 8001954:	e74b      	b.n	80017ee <__aeabi_dmul+0x2f6>
 8001956:	0034      	movs	r4, r6
 8001958:	3808      	subs	r0, #8
 800195a:	2500      	movs	r5, #0
 800195c:	4084      	lsls	r4, r0
 800195e:	e750      	b.n	8001802 <__aeabi_dmul+0x30a>
 8001960:	f000 fd42 	bl	80023e8 <__clzsi2>
 8001964:	0003      	movs	r3, r0
 8001966:	001a      	movs	r2, r3
 8001968:	3215      	adds	r2, #21
 800196a:	3020      	adds	r0, #32
 800196c:	2a1c      	cmp	r2, #28
 800196e:	dc00      	bgt.n	8001972 <__aeabi_dmul+0x47a>
 8001970:	e71e      	b.n	80017b0 <__aeabi_dmul+0x2b8>
 8001972:	4656      	mov	r6, sl
 8001974:	3b08      	subs	r3, #8
 8001976:	2200      	movs	r2, #0
 8001978:	409e      	lsls	r6, r3
 800197a:	e723      	b.n	80017c4 <__aeabi_dmul+0x2cc>
 800197c:	9b00      	ldr	r3, [sp, #0]
 800197e:	469c      	mov	ip, r3
 8001980:	e6e6      	b.n	8001750 <__aeabi_dmul+0x258>
 8001982:	4912      	ldr	r1, [pc, #72]	; (80019cc <__aeabi_dmul+0x4d4>)
 8001984:	0022      	movs	r2, r4
 8001986:	4461      	add	r1, ip
 8001988:	002e      	movs	r6, r5
 800198a:	408d      	lsls	r5, r1
 800198c:	408a      	lsls	r2, r1
 800198e:	40c6      	lsrs	r6, r0
 8001990:	1e69      	subs	r1, r5, #1
 8001992:	418d      	sbcs	r5, r1
 8001994:	4332      	orrs	r2, r6
 8001996:	432a      	orrs	r2, r5
 8001998:	40c4      	lsrs	r4, r0
 800199a:	0753      	lsls	r3, r2, #29
 800199c:	d0b6      	beq.n	800190c <__aeabi_dmul+0x414>
 800199e:	210f      	movs	r1, #15
 80019a0:	4011      	ands	r1, r2
 80019a2:	2904      	cmp	r1, #4
 80019a4:	d1ac      	bne.n	8001900 <__aeabi_dmul+0x408>
 80019a6:	e7b1      	b.n	800190c <__aeabi_dmul+0x414>
 80019a8:	0765      	lsls	r5, r4, #29
 80019aa:	0264      	lsls	r4, r4, #9
 80019ac:	0b24      	lsrs	r4, r4, #12
 80019ae:	08d2      	lsrs	r2, r2, #3
 80019b0:	4315      	orrs	r5, r2
 80019b2:	2200      	movs	r2, #0
 80019b4:	e601      	b.n	80015ba <__aeabi_dmul+0xc2>
 80019b6:	2280      	movs	r2, #128	; 0x80
 80019b8:	0312      	lsls	r2, r2, #12
 80019ba:	4314      	orrs	r4, r2
 80019bc:	0324      	lsls	r4, r4, #12
 80019be:	4a01      	ldr	r2, [pc, #4]	; (80019c4 <__aeabi_dmul+0x4cc>)
 80019c0:	0b24      	lsrs	r4, r4, #12
 80019c2:	e5fa      	b.n	80015ba <__aeabi_dmul+0xc2>
 80019c4:	000007ff 	.word	0x000007ff
 80019c8:	0000043e 	.word	0x0000043e
 80019cc:	0000041e 	.word	0x0000041e

080019d0 <__aeabi_dsub>:
 80019d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019d2:	4657      	mov	r7, sl
 80019d4:	464e      	mov	r6, r9
 80019d6:	4645      	mov	r5, r8
 80019d8:	46de      	mov	lr, fp
 80019da:	b5e0      	push	{r5, r6, r7, lr}
 80019dc:	001e      	movs	r6, r3
 80019de:	0017      	movs	r7, r2
 80019e0:	004a      	lsls	r2, r1, #1
 80019e2:	030b      	lsls	r3, r1, #12
 80019e4:	0d52      	lsrs	r2, r2, #21
 80019e6:	0a5b      	lsrs	r3, r3, #9
 80019e8:	4690      	mov	r8, r2
 80019ea:	0f42      	lsrs	r2, r0, #29
 80019ec:	431a      	orrs	r2, r3
 80019ee:	0fcd      	lsrs	r5, r1, #31
 80019f0:	4ccd      	ldr	r4, [pc, #820]	; (8001d28 <__aeabi_dsub+0x358>)
 80019f2:	0331      	lsls	r1, r6, #12
 80019f4:	00c3      	lsls	r3, r0, #3
 80019f6:	4694      	mov	ip, r2
 80019f8:	0070      	lsls	r0, r6, #1
 80019fa:	0f7a      	lsrs	r2, r7, #29
 80019fc:	0a49      	lsrs	r1, r1, #9
 80019fe:	00ff      	lsls	r7, r7, #3
 8001a00:	469a      	mov	sl, r3
 8001a02:	46b9      	mov	r9, r7
 8001a04:	0d40      	lsrs	r0, r0, #21
 8001a06:	0ff6      	lsrs	r6, r6, #31
 8001a08:	4311      	orrs	r1, r2
 8001a0a:	42a0      	cmp	r0, r4
 8001a0c:	d100      	bne.n	8001a10 <__aeabi_dsub+0x40>
 8001a0e:	e0b1      	b.n	8001b74 <__aeabi_dsub+0x1a4>
 8001a10:	2201      	movs	r2, #1
 8001a12:	4056      	eors	r6, r2
 8001a14:	46b3      	mov	fp, r6
 8001a16:	42b5      	cmp	r5, r6
 8001a18:	d100      	bne.n	8001a1c <__aeabi_dsub+0x4c>
 8001a1a:	e088      	b.n	8001b2e <__aeabi_dsub+0x15e>
 8001a1c:	4642      	mov	r2, r8
 8001a1e:	1a12      	subs	r2, r2, r0
 8001a20:	2a00      	cmp	r2, #0
 8001a22:	dc00      	bgt.n	8001a26 <__aeabi_dsub+0x56>
 8001a24:	e0ae      	b.n	8001b84 <__aeabi_dsub+0x1b4>
 8001a26:	2800      	cmp	r0, #0
 8001a28:	d100      	bne.n	8001a2c <__aeabi_dsub+0x5c>
 8001a2a:	e0c1      	b.n	8001bb0 <__aeabi_dsub+0x1e0>
 8001a2c:	48be      	ldr	r0, [pc, #760]	; (8001d28 <__aeabi_dsub+0x358>)
 8001a2e:	4580      	cmp	r8, r0
 8001a30:	d100      	bne.n	8001a34 <__aeabi_dsub+0x64>
 8001a32:	e151      	b.n	8001cd8 <__aeabi_dsub+0x308>
 8001a34:	2080      	movs	r0, #128	; 0x80
 8001a36:	0400      	lsls	r0, r0, #16
 8001a38:	4301      	orrs	r1, r0
 8001a3a:	2a38      	cmp	r2, #56	; 0x38
 8001a3c:	dd00      	ble.n	8001a40 <__aeabi_dsub+0x70>
 8001a3e:	e17b      	b.n	8001d38 <__aeabi_dsub+0x368>
 8001a40:	2a1f      	cmp	r2, #31
 8001a42:	dd00      	ble.n	8001a46 <__aeabi_dsub+0x76>
 8001a44:	e1ee      	b.n	8001e24 <__aeabi_dsub+0x454>
 8001a46:	2020      	movs	r0, #32
 8001a48:	003e      	movs	r6, r7
 8001a4a:	1a80      	subs	r0, r0, r2
 8001a4c:	000c      	movs	r4, r1
 8001a4e:	40d6      	lsrs	r6, r2
 8001a50:	40d1      	lsrs	r1, r2
 8001a52:	4087      	lsls	r7, r0
 8001a54:	4662      	mov	r2, ip
 8001a56:	4084      	lsls	r4, r0
 8001a58:	1a52      	subs	r2, r2, r1
 8001a5a:	1e78      	subs	r0, r7, #1
 8001a5c:	4187      	sbcs	r7, r0
 8001a5e:	4694      	mov	ip, r2
 8001a60:	4334      	orrs	r4, r6
 8001a62:	4327      	orrs	r7, r4
 8001a64:	1bdc      	subs	r4, r3, r7
 8001a66:	42a3      	cmp	r3, r4
 8001a68:	419b      	sbcs	r3, r3
 8001a6a:	4662      	mov	r2, ip
 8001a6c:	425b      	negs	r3, r3
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	4699      	mov	r9, r3
 8001a72:	464b      	mov	r3, r9
 8001a74:	021b      	lsls	r3, r3, #8
 8001a76:	d400      	bmi.n	8001a7a <__aeabi_dsub+0xaa>
 8001a78:	e118      	b.n	8001cac <__aeabi_dsub+0x2dc>
 8001a7a:	464b      	mov	r3, r9
 8001a7c:	0258      	lsls	r0, r3, #9
 8001a7e:	0a43      	lsrs	r3, r0, #9
 8001a80:	4699      	mov	r9, r3
 8001a82:	464b      	mov	r3, r9
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d100      	bne.n	8001a8a <__aeabi_dsub+0xba>
 8001a88:	e137      	b.n	8001cfa <__aeabi_dsub+0x32a>
 8001a8a:	4648      	mov	r0, r9
 8001a8c:	f000 fcac 	bl	80023e8 <__clzsi2>
 8001a90:	0001      	movs	r1, r0
 8001a92:	3908      	subs	r1, #8
 8001a94:	2320      	movs	r3, #32
 8001a96:	0022      	movs	r2, r4
 8001a98:	4648      	mov	r0, r9
 8001a9a:	1a5b      	subs	r3, r3, r1
 8001a9c:	40da      	lsrs	r2, r3
 8001a9e:	4088      	lsls	r0, r1
 8001aa0:	408c      	lsls	r4, r1
 8001aa2:	4643      	mov	r3, r8
 8001aa4:	4310      	orrs	r0, r2
 8001aa6:	4588      	cmp	r8, r1
 8001aa8:	dd00      	ble.n	8001aac <__aeabi_dsub+0xdc>
 8001aaa:	e136      	b.n	8001d1a <__aeabi_dsub+0x34a>
 8001aac:	1ac9      	subs	r1, r1, r3
 8001aae:	1c4b      	adds	r3, r1, #1
 8001ab0:	2b1f      	cmp	r3, #31
 8001ab2:	dd00      	ble.n	8001ab6 <__aeabi_dsub+0xe6>
 8001ab4:	e0ea      	b.n	8001c8c <__aeabi_dsub+0x2bc>
 8001ab6:	2220      	movs	r2, #32
 8001ab8:	0026      	movs	r6, r4
 8001aba:	1ad2      	subs	r2, r2, r3
 8001abc:	0001      	movs	r1, r0
 8001abe:	4094      	lsls	r4, r2
 8001ac0:	40de      	lsrs	r6, r3
 8001ac2:	40d8      	lsrs	r0, r3
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	4091      	lsls	r1, r2
 8001ac8:	1e62      	subs	r2, r4, #1
 8001aca:	4194      	sbcs	r4, r2
 8001acc:	4681      	mov	r9, r0
 8001ace:	4698      	mov	r8, r3
 8001ad0:	4331      	orrs	r1, r6
 8001ad2:	430c      	orrs	r4, r1
 8001ad4:	0763      	lsls	r3, r4, #29
 8001ad6:	d009      	beq.n	8001aec <__aeabi_dsub+0x11c>
 8001ad8:	230f      	movs	r3, #15
 8001ada:	4023      	ands	r3, r4
 8001adc:	2b04      	cmp	r3, #4
 8001ade:	d005      	beq.n	8001aec <__aeabi_dsub+0x11c>
 8001ae0:	1d23      	adds	r3, r4, #4
 8001ae2:	42a3      	cmp	r3, r4
 8001ae4:	41a4      	sbcs	r4, r4
 8001ae6:	4264      	negs	r4, r4
 8001ae8:	44a1      	add	r9, r4
 8001aea:	001c      	movs	r4, r3
 8001aec:	464b      	mov	r3, r9
 8001aee:	021b      	lsls	r3, r3, #8
 8001af0:	d400      	bmi.n	8001af4 <__aeabi_dsub+0x124>
 8001af2:	e0de      	b.n	8001cb2 <__aeabi_dsub+0x2e2>
 8001af4:	4641      	mov	r1, r8
 8001af6:	4b8c      	ldr	r3, [pc, #560]	; (8001d28 <__aeabi_dsub+0x358>)
 8001af8:	3101      	adds	r1, #1
 8001afa:	4299      	cmp	r1, r3
 8001afc:	d100      	bne.n	8001b00 <__aeabi_dsub+0x130>
 8001afe:	e0e7      	b.n	8001cd0 <__aeabi_dsub+0x300>
 8001b00:	464b      	mov	r3, r9
 8001b02:	488a      	ldr	r0, [pc, #552]	; (8001d2c <__aeabi_dsub+0x35c>)
 8001b04:	08e4      	lsrs	r4, r4, #3
 8001b06:	4003      	ands	r3, r0
 8001b08:	0018      	movs	r0, r3
 8001b0a:	0549      	lsls	r1, r1, #21
 8001b0c:	075b      	lsls	r3, r3, #29
 8001b0e:	0240      	lsls	r0, r0, #9
 8001b10:	4323      	orrs	r3, r4
 8001b12:	0d4a      	lsrs	r2, r1, #21
 8001b14:	0b04      	lsrs	r4, r0, #12
 8001b16:	0512      	lsls	r2, r2, #20
 8001b18:	07ed      	lsls	r5, r5, #31
 8001b1a:	4322      	orrs	r2, r4
 8001b1c:	432a      	orrs	r2, r5
 8001b1e:	0018      	movs	r0, r3
 8001b20:	0011      	movs	r1, r2
 8001b22:	bcf0      	pop	{r4, r5, r6, r7}
 8001b24:	46bb      	mov	fp, r7
 8001b26:	46b2      	mov	sl, r6
 8001b28:	46a9      	mov	r9, r5
 8001b2a:	46a0      	mov	r8, r4
 8001b2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b2e:	4642      	mov	r2, r8
 8001b30:	1a12      	subs	r2, r2, r0
 8001b32:	2a00      	cmp	r2, #0
 8001b34:	dd52      	ble.n	8001bdc <__aeabi_dsub+0x20c>
 8001b36:	2800      	cmp	r0, #0
 8001b38:	d100      	bne.n	8001b3c <__aeabi_dsub+0x16c>
 8001b3a:	e09c      	b.n	8001c76 <__aeabi_dsub+0x2a6>
 8001b3c:	45a0      	cmp	r8, r4
 8001b3e:	d100      	bne.n	8001b42 <__aeabi_dsub+0x172>
 8001b40:	e0ca      	b.n	8001cd8 <__aeabi_dsub+0x308>
 8001b42:	2080      	movs	r0, #128	; 0x80
 8001b44:	0400      	lsls	r0, r0, #16
 8001b46:	4301      	orrs	r1, r0
 8001b48:	2a38      	cmp	r2, #56	; 0x38
 8001b4a:	dd00      	ble.n	8001b4e <__aeabi_dsub+0x17e>
 8001b4c:	e149      	b.n	8001de2 <__aeabi_dsub+0x412>
 8001b4e:	2a1f      	cmp	r2, #31
 8001b50:	dc00      	bgt.n	8001b54 <__aeabi_dsub+0x184>
 8001b52:	e197      	b.n	8001e84 <__aeabi_dsub+0x4b4>
 8001b54:	0010      	movs	r0, r2
 8001b56:	000e      	movs	r6, r1
 8001b58:	3820      	subs	r0, #32
 8001b5a:	40c6      	lsrs	r6, r0
 8001b5c:	2a20      	cmp	r2, #32
 8001b5e:	d004      	beq.n	8001b6a <__aeabi_dsub+0x19a>
 8001b60:	2040      	movs	r0, #64	; 0x40
 8001b62:	1a82      	subs	r2, r0, r2
 8001b64:	4091      	lsls	r1, r2
 8001b66:	430f      	orrs	r7, r1
 8001b68:	46b9      	mov	r9, r7
 8001b6a:	464c      	mov	r4, r9
 8001b6c:	1e62      	subs	r2, r4, #1
 8001b6e:	4194      	sbcs	r4, r2
 8001b70:	4334      	orrs	r4, r6
 8001b72:	e13a      	b.n	8001dea <__aeabi_dsub+0x41a>
 8001b74:	000a      	movs	r2, r1
 8001b76:	433a      	orrs	r2, r7
 8001b78:	d028      	beq.n	8001bcc <__aeabi_dsub+0x1fc>
 8001b7a:	46b3      	mov	fp, r6
 8001b7c:	42b5      	cmp	r5, r6
 8001b7e:	d02b      	beq.n	8001bd8 <__aeabi_dsub+0x208>
 8001b80:	4a6b      	ldr	r2, [pc, #428]	; (8001d30 <__aeabi_dsub+0x360>)
 8001b82:	4442      	add	r2, r8
 8001b84:	2a00      	cmp	r2, #0
 8001b86:	d05d      	beq.n	8001c44 <__aeabi_dsub+0x274>
 8001b88:	4642      	mov	r2, r8
 8001b8a:	4644      	mov	r4, r8
 8001b8c:	1a82      	subs	r2, r0, r2
 8001b8e:	2c00      	cmp	r4, #0
 8001b90:	d000      	beq.n	8001b94 <__aeabi_dsub+0x1c4>
 8001b92:	e0f5      	b.n	8001d80 <__aeabi_dsub+0x3b0>
 8001b94:	4665      	mov	r5, ip
 8001b96:	431d      	orrs	r5, r3
 8001b98:	d100      	bne.n	8001b9c <__aeabi_dsub+0x1cc>
 8001b9a:	e19c      	b.n	8001ed6 <__aeabi_dsub+0x506>
 8001b9c:	1e55      	subs	r5, r2, #1
 8001b9e:	2a01      	cmp	r2, #1
 8001ba0:	d100      	bne.n	8001ba4 <__aeabi_dsub+0x1d4>
 8001ba2:	e1fb      	b.n	8001f9c <__aeabi_dsub+0x5cc>
 8001ba4:	4c60      	ldr	r4, [pc, #384]	; (8001d28 <__aeabi_dsub+0x358>)
 8001ba6:	42a2      	cmp	r2, r4
 8001ba8:	d100      	bne.n	8001bac <__aeabi_dsub+0x1dc>
 8001baa:	e1bd      	b.n	8001f28 <__aeabi_dsub+0x558>
 8001bac:	002a      	movs	r2, r5
 8001bae:	e0f0      	b.n	8001d92 <__aeabi_dsub+0x3c2>
 8001bb0:	0008      	movs	r0, r1
 8001bb2:	4338      	orrs	r0, r7
 8001bb4:	d100      	bne.n	8001bb8 <__aeabi_dsub+0x1e8>
 8001bb6:	e0c3      	b.n	8001d40 <__aeabi_dsub+0x370>
 8001bb8:	1e50      	subs	r0, r2, #1
 8001bba:	2a01      	cmp	r2, #1
 8001bbc:	d100      	bne.n	8001bc0 <__aeabi_dsub+0x1f0>
 8001bbe:	e1a8      	b.n	8001f12 <__aeabi_dsub+0x542>
 8001bc0:	4c59      	ldr	r4, [pc, #356]	; (8001d28 <__aeabi_dsub+0x358>)
 8001bc2:	42a2      	cmp	r2, r4
 8001bc4:	d100      	bne.n	8001bc8 <__aeabi_dsub+0x1f8>
 8001bc6:	e087      	b.n	8001cd8 <__aeabi_dsub+0x308>
 8001bc8:	0002      	movs	r2, r0
 8001bca:	e736      	b.n	8001a3a <__aeabi_dsub+0x6a>
 8001bcc:	2201      	movs	r2, #1
 8001bce:	4056      	eors	r6, r2
 8001bd0:	46b3      	mov	fp, r6
 8001bd2:	42b5      	cmp	r5, r6
 8001bd4:	d000      	beq.n	8001bd8 <__aeabi_dsub+0x208>
 8001bd6:	e721      	b.n	8001a1c <__aeabi_dsub+0x4c>
 8001bd8:	4a55      	ldr	r2, [pc, #340]	; (8001d30 <__aeabi_dsub+0x360>)
 8001bda:	4442      	add	r2, r8
 8001bdc:	2a00      	cmp	r2, #0
 8001bde:	d100      	bne.n	8001be2 <__aeabi_dsub+0x212>
 8001be0:	e0b5      	b.n	8001d4e <__aeabi_dsub+0x37e>
 8001be2:	4642      	mov	r2, r8
 8001be4:	4644      	mov	r4, r8
 8001be6:	1a82      	subs	r2, r0, r2
 8001be8:	2c00      	cmp	r4, #0
 8001bea:	d100      	bne.n	8001bee <__aeabi_dsub+0x21e>
 8001bec:	e138      	b.n	8001e60 <__aeabi_dsub+0x490>
 8001bee:	4e4e      	ldr	r6, [pc, #312]	; (8001d28 <__aeabi_dsub+0x358>)
 8001bf0:	42b0      	cmp	r0, r6
 8001bf2:	d100      	bne.n	8001bf6 <__aeabi_dsub+0x226>
 8001bf4:	e1de      	b.n	8001fb4 <__aeabi_dsub+0x5e4>
 8001bf6:	2680      	movs	r6, #128	; 0x80
 8001bf8:	4664      	mov	r4, ip
 8001bfa:	0436      	lsls	r6, r6, #16
 8001bfc:	4334      	orrs	r4, r6
 8001bfe:	46a4      	mov	ip, r4
 8001c00:	2a38      	cmp	r2, #56	; 0x38
 8001c02:	dd00      	ble.n	8001c06 <__aeabi_dsub+0x236>
 8001c04:	e196      	b.n	8001f34 <__aeabi_dsub+0x564>
 8001c06:	2a1f      	cmp	r2, #31
 8001c08:	dd00      	ble.n	8001c0c <__aeabi_dsub+0x23c>
 8001c0a:	e224      	b.n	8002056 <__aeabi_dsub+0x686>
 8001c0c:	2620      	movs	r6, #32
 8001c0e:	1ab4      	subs	r4, r6, r2
 8001c10:	46a2      	mov	sl, r4
 8001c12:	4664      	mov	r4, ip
 8001c14:	4656      	mov	r6, sl
 8001c16:	40b4      	lsls	r4, r6
 8001c18:	46a1      	mov	r9, r4
 8001c1a:	001c      	movs	r4, r3
 8001c1c:	464e      	mov	r6, r9
 8001c1e:	40d4      	lsrs	r4, r2
 8001c20:	4326      	orrs	r6, r4
 8001c22:	0034      	movs	r4, r6
 8001c24:	4656      	mov	r6, sl
 8001c26:	40b3      	lsls	r3, r6
 8001c28:	1e5e      	subs	r6, r3, #1
 8001c2a:	41b3      	sbcs	r3, r6
 8001c2c:	431c      	orrs	r4, r3
 8001c2e:	4663      	mov	r3, ip
 8001c30:	40d3      	lsrs	r3, r2
 8001c32:	18c9      	adds	r1, r1, r3
 8001c34:	19e4      	adds	r4, r4, r7
 8001c36:	42bc      	cmp	r4, r7
 8001c38:	41bf      	sbcs	r7, r7
 8001c3a:	427f      	negs	r7, r7
 8001c3c:	46b9      	mov	r9, r7
 8001c3e:	4680      	mov	r8, r0
 8001c40:	4489      	add	r9, r1
 8001c42:	e0d8      	b.n	8001df6 <__aeabi_dsub+0x426>
 8001c44:	4640      	mov	r0, r8
 8001c46:	4c3b      	ldr	r4, [pc, #236]	; (8001d34 <__aeabi_dsub+0x364>)
 8001c48:	3001      	adds	r0, #1
 8001c4a:	4220      	tst	r0, r4
 8001c4c:	d000      	beq.n	8001c50 <__aeabi_dsub+0x280>
 8001c4e:	e0b4      	b.n	8001dba <__aeabi_dsub+0x3ea>
 8001c50:	4640      	mov	r0, r8
 8001c52:	2800      	cmp	r0, #0
 8001c54:	d000      	beq.n	8001c58 <__aeabi_dsub+0x288>
 8001c56:	e144      	b.n	8001ee2 <__aeabi_dsub+0x512>
 8001c58:	4660      	mov	r0, ip
 8001c5a:	4318      	orrs	r0, r3
 8001c5c:	d100      	bne.n	8001c60 <__aeabi_dsub+0x290>
 8001c5e:	e190      	b.n	8001f82 <__aeabi_dsub+0x5b2>
 8001c60:	0008      	movs	r0, r1
 8001c62:	4338      	orrs	r0, r7
 8001c64:	d000      	beq.n	8001c68 <__aeabi_dsub+0x298>
 8001c66:	e1aa      	b.n	8001fbe <__aeabi_dsub+0x5ee>
 8001c68:	4661      	mov	r1, ip
 8001c6a:	08db      	lsrs	r3, r3, #3
 8001c6c:	0749      	lsls	r1, r1, #29
 8001c6e:	430b      	orrs	r3, r1
 8001c70:	4661      	mov	r1, ip
 8001c72:	08cc      	lsrs	r4, r1, #3
 8001c74:	e027      	b.n	8001cc6 <__aeabi_dsub+0x2f6>
 8001c76:	0008      	movs	r0, r1
 8001c78:	4338      	orrs	r0, r7
 8001c7a:	d061      	beq.n	8001d40 <__aeabi_dsub+0x370>
 8001c7c:	1e50      	subs	r0, r2, #1
 8001c7e:	2a01      	cmp	r2, #1
 8001c80:	d100      	bne.n	8001c84 <__aeabi_dsub+0x2b4>
 8001c82:	e139      	b.n	8001ef8 <__aeabi_dsub+0x528>
 8001c84:	42a2      	cmp	r2, r4
 8001c86:	d027      	beq.n	8001cd8 <__aeabi_dsub+0x308>
 8001c88:	0002      	movs	r2, r0
 8001c8a:	e75d      	b.n	8001b48 <__aeabi_dsub+0x178>
 8001c8c:	0002      	movs	r2, r0
 8001c8e:	391f      	subs	r1, #31
 8001c90:	40ca      	lsrs	r2, r1
 8001c92:	0011      	movs	r1, r2
 8001c94:	2b20      	cmp	r3, #32
 8001c96:	d003      	beq.n	8001ca0 <__aeabi_dsub+0x2d0>
 8001c98:	2240      	movs	r2, #64	; 0x40
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	4098      	lsls	r0, r3
 8001c9e:	4304      	orrs	r4, r0
 8001ca0:	1e63      	subs	r3, r4, #1
 8001ca2:	419c      	sbcs	r4, r3
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	4699      	mov	r9, r3
 8001ca8:	4698      	mov	r8, r3
 8001caa:	430c      	orrs	r4, r1
 8001cac:	0763      	lsls	r3, r4, #29
 8001cae:	d000      	beq.n	8001cb2 <__aeabi_dsub+0x2e2>
 8001cb0:	e712      	b.n	8001ad8 <__aeabi_dsub+0x108>
 8001cb2:	464b      	mov	r3, r9
 8001cb4:	464a      	mov	r2, r9
 8001cb6:	08e4      	lsrs	r4, r4, #3
 8001cb8:	075b      	lsls	r3, r3, #29
 8001cba:	4323      	orrs	r3, r4
 8001cbc:	08d4      	lsrs	r4, r2, #3
 8001cbe:	4642      	mov	r2, r8
 8001cc0:	4919      	ldr	r1, [pc, #100]	; (8001d28 <__aeabi_dsub+0x358>)
 8001cc2:	428a      	cmp	r2, r1
 8001cc4:	d00e      	beq.n	8001ce4 <__aeabi_dsub+0x314>
 8001cc6:	0324      	lsls	r4, r4, #12
 8001cc8:	0552      	lsls	r2, r2, #21
 8001cca:	0b24      	lsrs	r4, r4, #12
 8001ccc:	0d52      	lsrs	r2, r2, #21
 8001cce:	e722      	b.n	8001b16 <__aeabi_dsub+0x146>
 8001cd0:	000a      	movs	r2, r1
 8001cd2:	2400      	movs	r4, #0
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	e71e      	b.n	8001b16 <__aeabi_dsub+0x146>
 8001cd8:	08db      	lsrs	r3, r3, #3
 8001cda:	4662      	mov	r2, ip
 8001cdc:	0752      	lsls	r2, r2, #29
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	4662      	mov	r2, ip
 8001ce2:	08d4      	lsrs	r4, r2, #3
 8001ce4:	001a      	movs	r2, r3
 8001ce6:	4322      	orrs	r2, r4
 8001ce8:	d100      	bne.n	8001cec <__aeabi_dsub+0x31c>
 8001cea:	e1fc      	b.n	80020e6 <__aeabi_dsub+0x716>
 8001cec:	2280      	movs	r2, #128	; 0x80
 8001cee:	0312      	lsls	r2, r2, #12
 8001cf0:	4314      	orrs	r4, r2
 8001cf2:	0324      	lsls	r4, r4, #12
 8001cf4:	4a0c      	ldr	r2, [pc, #48]	; (8001d28 <__aeabi_dsub+0x358>)
 8001cf6:	0b24      	lsrs	r4, r4, #12
 8001cf8:	e70d      	b.n	8001b16 <__aeabi_dsub+0x146>
 8001cfa:	0020      	movs	r0, r4
 8001cfc:	f000 fb74 	bl	80023e8 <__clzsi2>
 8001d00:	0001      	movs	r1, r0
 8001d02:	3118      	adds	r1, #24
 8001d04:	291f      	cmp	r1, #31
 8001d06:	dc00      	bgt.n	8001d0a <__aeabi_dsub+0x33a>
 8001d08:	e6c4      	b.n	8001a94 <__aeabi_dsub+0xc4>
 8001d0a:	3808      	subs	r0, #8
 8001d0c:	4084      	lsls	r4, r0
 8001d0e:	4643      	mov	r3, r8
 8001d10:	0020      	movs	r0, r4
 8001d12:	2400      	movs	r4, #0
 8001d14:	4588      	cmp	r8, r1
 8001d16:	dc00      	bgt.n	8001d1a <__aeabi_dsub+0x34a>
 8001d18:	e6c8      	b.n	8001aac <__aeabi_dsub+0xdc>
 8001d1a:	4a04      	ldr	r2, [pc, #16]	; (8001d2c <__aeabi_dsub+0x35c>)
 8001d1c:	1a5b      	subs	r3, r3, r1
 8001d1e:	4010      	ands	r0, r2
 8001d20:	4698      	mov	r8, r3
 8001d22:	4681      	mov	r9, r0
 8001d24:	e6d6      	b.n	8001ad4 <__aeabi_dsub+0x104>
 8001d26:	46c0      	nop			; (mov r8, r8)
 8001d28:	000007ff 	.word	0x000007ff
 8001d2c:	ff7fffff 	.word	0xff7fffff
 8001d30:	fffff801 	.word	0xfffff801
 8001d34:	000007fe 	.word	0x000007fe
 8001d38:	430f      	orrs	r7, r1
 8001d3a:	1e7a      	subs	r2, r7, #1
 8001d3c:	4197      	sbcs	r7, r2
 8001d3e:	e691      	b.n	8001a64 <__aeabi_dsub+0x94>
 8001d40:	4661      	mov	r1, ip
 8001d42:	08db      	lsrs	r3, r3, #3
 8001d44:	0749      	lsls	r1, r1, #29
 8001d46:	430b      	orrs	r3, r1
 8001d48:	4661      	mov	r1, ip
 8001d4a:	08cc      	lsrs	r4, r1, #3
 8001d4c:	e7b8      	b.n	8001cc0 <__aeabi_dsub+0x2f0>
 8001d4e:	4640      	mov	r0, r8
 8001d50:	4cd3      	ldr	r4, [pc, #844]	; (80020a0 <__aeabi_dsub+0x6d0>)
 8001d52:	3001      	adds	r0, #1
 8001d54:	4220      	tst	r0, r4
 8001d56:	d000      	beq.n	8001d5a <__aeabi_dsub+0x38a>
 8001d58:	e0a2      	b.n	8001ea0 <__aeabi_dsub+0x4d0>
 8001d5a:	4640      	mov	r0, r8
 8001d5c:	2800      	cmp	r0, #0
 8001d5e:	d000      	beq.n	8001d62 <__aeabi_dsub+0x392>
 8001d60:	e101      	b.n	8001f66 <__aeabi_dsub+0x596>
 8001d62:	4660      	mov	r0, ip
 8001d64:	4318      	orrs	r0, r3
 8001d66:	d100      	bne.n	8001d6a <__aeabi_dsub+0x39a>
 8001d68:	e15e      	b.n	8002028 <__aeabi_dsub+0x658>
 8001d6a:	0008      	movs	r0, r1
 8001d6c:	4338      	orrs	r0, r7
 8001d6e:	d000      	beq.n	8001d72 <__aeabi_dsub+0x3a2>
 8001d70:	e15f      	b.n	8002032 <__aeabi_dsub+0x662>
 8001d72:	4661      	mov	r1, ip
 8001d74:	08db      	lsrs	r3, r3, #3
 8001d76:	0749      	lsls	r1, r1, #29
 8001d78:	430b      	orrs	r3, r1
 8001d7a:	4661      	mov	r1, ip
 8001d7c:	08cc      	lsrs	r4, r1, #3
 8001d7e:	e7a2      	b.n	8001cc6 <__aeabi_dsub+0x2f6>
 8001d80:	4dc8      	ldr	r5, [pc, #800]	; (80020a4 <__aeabi_dsub+0x6d4>)
 8001d82:	42a8      	cmp	r0, r5
 8001d84:	d100      	bne.n	8001d88 <__aeabi_dsub+0x3b8>
 8001d86:	e0cf      	b.n	8001f28 <__aeabi_dsub+0x558>
 8001d88:	2580      	movs	r5, #128	; 0x80
 8001d8a:	4664      	mov	r4, ip
 8001d8c:	042d      	lsls	r5, r5, #16
 8001d8e:	432c      	orrs	r4, r5
 8001d90:	46a4      	mov	ip, r4
 8001d92:	2a38      	cmp	r2, #56	; 0x38
 8001d94:	dc56      	bgt.n	8001e44 <__aeabi_dsub+0x474>
 8001d96:	2a1f      	cmp	r2, #31
 8001d98:	dd00      	ble.n	8001d9c <__aeabi_dsub+0x3cc>
 8001d9a:	e0d1      	b.n	8001f40 <__aeabi_dsub+0x570>
 8001d9c:	2520      	movs	r5, #32
 8001d9e:	001e      	movs	r6, r3
 8001da0:	1aad      	subs	r5, r5, r2
 8001da2:	4664      	mov	r4, ip
 8001da4:	40ab      	lsls	r3, r5
 8001da6:	40ac      	lsls	r4, r5
 8001da8:	40d6      	lsrs	r6, r2
 8001daa:	1e5d      	subs	r5, r3, #1
 8001dac:	41ab      	sbcs	r3, r5
 8001dae:	4334      	orrs	r4, r6
 8001db0:	4323      	orrs	r3, r4
 8001db2:	4664      	mov	r4, ip
 8001db4:	40d4      	lsrs	r4, r2
 8001db6:	1b09      	subs	r1, r1, r4
 8001db8:	e049      	b.n	8001e4e <__aeabi_dsub+0x47e>
 8001dba:	4660      	mov	r0, ip
 8001dbc:	1bdc      	subs	r4, r3, r7
 8001dbe:	1a46      	subs	r6, r0, r1
 8001dc0:	42a3      	cmp	r3, r4
 8001dc2:	4180      	sbcs	r0, r0
 8001dc4:	4240      	negs	r0, r0
 8001dc6:	4681      	mov	r9, r0
 8001dc8:	0030      	movs	r0, r6
 8001dca:	464e      	mov	r6, r9
 8001dcc:	1b80      	subs	r0, r0, r6
 8001dce:	4681      	mov	r9, r0
 8001dd0:	0200      	lsls	r0, r0, #8
 8001dd2:	d476      	bmi.n	8001ec2 <__aeabi_dsub+0x4f2>
 8001dd4:	464b      	mov	r3, r9
 8001dd6:	4323      	orrs	r3, r4
 8001dd8:	d000      	beq.n	8001ddc <__aeabi_dsub+0x40c>
 8001dda:	e652      	b.n	8001a82 <__aeabi_dsub+0xb2>
 8001ddc:	2400      	movs	r4, #0
 8001dde:	2500      	movs	r5, #0
 8001de0:	e771      	b.n	8001cc6 <__aeabi_dsub+0x2f6>
 8001de2:	4339      	orrs	r1, r7
 8001de4:	000c      	movs	r4, r1
 8001de6:	1e62      	subs	r2, r4, #1
 8001de8:	4194      	sbcs	r4, r2
 8001dea:	18e4      	adds	r4, r4, r3
 8001dec:	429c      	cmp	r4, r3
 8001dee:	419b      	sbcs	r3, r3
 8001df0:	425b      	negs	r3, r3
 8001df2:	4463      	add	r3, ip
 8001df4:	4699      	mov	r9, r3
 8001df6:	464b      	mov	r3, r9
 8001df8:	021b      	lsls	r3, r3, #8
 8001dfa:	d400      	bmi.n	8001dfe <__aeabi_dsub+0x42e>
 8001dfc:	e756      	b.n	8001cac <__aeabi_dsub+0x2dc>
 8001dfe:	2301      	movs	r3, #1
 8001e00:	469c      	mov	ip, r3
 8001e02:	4ba8      	ldr	r3, [pc, #672]	; (80020a4 <__aeabi_dsub+0x6d4>)
 8001e04:	44e0      	add	r8, ip
 8001e06:	4598      	cmp	r8, r3
 8001e08:	d038      	beq.n	8001e7c <__aeabi_dsub+0x4ac>
 8001e0a:	464b      	mov	r3, r9
 8001e0c:	48a6      	ldr	r0, [pc, #664]	; (80020a8 <__aeabi_dsub+0x6d8>)
 8001e0e:	2201      	movs	r2, #1
 8001e10:	4003      	ands	r3, r0
 8001e12:	0018      	movs	r0, r3
 8001e14:	0863      	lsrs	r3, r4, #1
 8001e16:	4014      	ands	r4, r2
 8001e18:	431c      	orrs	r4, r3
 8001e1a:	07c3      	lsls	r3, r0, #31
 8001e1c:	431c      	orrs	r4, r3
 8001e1e:	0843      	lsrs	r3, r0, #1
 8001e20:	4699      	mov	r9, r3
 8001e22:	e657      	b.n	8001ad4 <__aeabi_dsub+0x104>
 8001e24:	0010      	movs	r0, r2
 8001e26:	000e      	movs	r6, r1
 8001e28:	3820      	subs	r0, #32
 8001e2a:	40c6      	lsrs	r6, r0
 8001e2c:	2a20      	cmp	r2, #32
 8001e2e:	d004      	beq.n	8001e3a <__aeabi_dsub+0x46a>
 8001e30:	2040      	movs	r0, #64	; 0x40
 8001e32:	1a82      	subs	r2, r0, r2
 8001e34:	4091      	lsls	r1, r2
 8001e36:	430f      	orrs	r7, r1
 8001e38:	46b9      	mov	r9, r7
 8001e3a:	464f      	mov	r7, r9
 8001e3c:	1e7a      	subs	r2, r7, #1
 8001e3e:	4197      	sbcs	r7, r2
 8001e40:	4337      	orrs	r7, r6
 8001e42:	e60f      	b.n	8001a64 <__aeabi_dsub+0x94>
 8001e44:	4662      	mov	r2, ip
 8001e46:	431a      	orrs	r2, r3
 8001e48:	0013      	movs	r3, r2
 8001e4a:	1e5a      	subs	r2, r3, #1
 8001e4c:	4193      	sbcs	r3, r2
 8001e4e:	1afc      	subs	r4, r7, r3
 8001e50:	42a7      	cmp	r7, r4
 8001e52:	41bf      	sbcs	r7, r7
 8001e54:	427f      	negs	r7, r7
 8001e56:	1bcb      	subs	r3, r1, r7
 8001e58:	4699      	mov	r9, r3
 8001e5a:	465d      	mov	r5, fp
 8001e5c:	4680      	mov	r8, r0
 8001e5e:	e608      	b.n	8001a72 <__aeabi_dsub+0xa2>
 8001e60:	4666      	mov	r6, ip
 8001e62:	431e      	orrs	r6, r3
 8001e64:	d100      	bne.n	8001e68 <__aeabi_dsub+0x498>
 8001e66:	e0be      	b.n	8001fe6 <__aeabi_dsub+0x616>
 8001e68:	1e56      	subs	r6, r2, #1
 8001e6a:	2a01      	cmp	r2, #1
 8001e6c:	d100      	bne.n	8001e70 <__aeabi_dsub+0x4a0>
 8001e6e:	e109      	b.n	8002084 <__aeabi_dsub+0x6b4>
 8001e70:	4c8c      	ldr	r4, [pc, #560]	; (80020a4 <__aeabi_dsub+0x6d4>)
 8001e72:	42a2      	cmp	r2, r4
 8001e74:	d100      	bne.n	8001e78 <__aeabi_dsub+0x4a8>
 8001e76:	e119      	b.n	80020ac <__aeabi_dsub+0x6dc>
 8001e78:	0032      	movs	r2, r6
 8001e7a:	e6c1      	b.n	8001c00 <__aeabi_dsub+0x230>
 8001e7c:	4642      	mov	r2, r8
 8001e7e:	2400      	movs	r4, #0
 8001e80:	2300      	movs	r3, #0
 8001e82:	e648      	b.n	8001b16 <__aeabi_dsub+0x146>
 8001e84:	2020      	movs	r0, #32
 8001e86:	000c      	movs	r4, r1
 8001e88:	1a80      	subs	r0, r0, r2
 8001e8a:	003e      	movs	r6, r7
 8001e8c:	4087      	lsls	r7, r0
 8001e8e:	4084      	lsls	r4, r0
 8001e90:	40d6      	lsrs	r6, r2
 8001e92:	1e78      	subs	r0, r7, #1
 8001e94:	4187      	sbcs	r7, r0
 8001e96:	40d1      	lsrs	r1, r2
 8001e98:	4334      	orrs	r4, r6
 8001e9a:	433c      	orrs	r4, r7
 8001e9c:	448c      	add	ip, r1
 8001e9e:	e7a4      	b.n	8001dea <__aeabi_dsub+0x41a>
 8001ea0:	4a80      	ldr	r2, [pc, #512]	; (80020a4 <__aeabi_dsub+0x6d4>)
 8001ea2:	4290      	cmp	r0, r2
 8001ea4:	d100      	bne.n	8001ea8 <__aeabi_dsub+0x4d8>
 8001ea6:	e0e9      	b.n	800207c <__aeabi_dsub+0x6ac>
 8001ea8:	19df      	adds	r7, r3, r7
 8001eaa:	429f      	cmp	r7, r3
 8001eac:	419b      	sbcs	r3, r3
 8001eae:	4461      	add	r1, ip
 8001eb0:	425b      	negs	r3, r3
 8001eb2:	18c9      	adds	r1, r1, r3
 8001eb4:	07cc      	lsls	r4, r1, #31
 8001eb6:	087f      	lsrs	r7, r7, #1
 8001eb8:	084b      	lsrs	r3, r1, #1
 8001eba:	4699      	mov	r9, r3
 8001ebc:	4680      	mov	r8, r0
 8001ebe:	433c      	orrs	r4, r7
 8001ec0:	e6f4      	b.n	8001cac <__aeabi_dsub+0x2dc>
 8001ec2:	1afc      	subs	r4, r7, r3
 8001ec4:	42a7      	cmp	r7, r4
 8001ec6:	41bf      	sbcs	r7, r7
 8001ec8:	4663      	mov	r3, ip
 8001eca:	427f      	negs	r7, r7
 8001ecc:	1ac9      	subs	r1, r1, r3
 8001ece:	1bcb      	subs	r3, r1, r7
 8001ed0:	4699      	mov	r9, r3
 8001ed2:	465d      	mov	r5, fp
 8001ed4:	e5d5      	b.n	8001a82 <__aeabi_dsub+0xb2>
 8001ed6:	08ff      	lsrs	r7, r7, #3
 8001ed8:	074b      	lsls	r3, r1, #29
 8001eda:	465d      	mov	r5, fp
 8001edc:	433b      	orrs	r3, r7
 8001ede:	08cc      	lsrs	r4, r1, #3
 8001ee0:	e6ee      	b.n	8001cc0 <__aeabi_dsub+0x2f0>
 8001ee2:	4662      	mov	r2, ip
 8001ee4:	431a      	orrs	r2, r3
 8001ee6:	d000      	beq.n	8001eea <__aeabi_dsub+0x51a>
 8001ee8:	e082      	b.n	8001ff0 <__aeabi_dsub+0x620>
 8001eea:	000b      	movs	r3, r1
 8001eec:	433b      	orrs	r3, r7
 8001eee:	d11b      	bne.n	8001f28 <__aeabi_dsub+0x558>
 8001ef0:	2480      	movs	r4, #128	; 0x80
 8001ef2:	2500      	movs	r5, #0
 8001ef4:	0324      	lsls	r4, r4, #12
 8001ef6:	e6f9      	b.n	8001cec <__aeabi_dsub+0x31c>
 8001ef8:	19dc      	adds	r4, r3, r7
 8001efa:	429c      	cmp	r4, r3
 8001efc:	419b      	sbcs	r3, r3
 8001efe:	4461      	add	r1, ip
 8001f00:	4689      	mov	r9, r1
 8001f02:	425b      	negs	r3, r3
 8001f04:	4499      	add	r9, r3
 8001f06:	464b      	mov	r3, r9
 8001f08:	021b      	lsls	r3, r3, #8
 8001f0a:	d444      	bmi.n	8001f96 <__aeabi_dsub+0x5c6>
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	4698      	mov	r8, r3
 8001f10:	e6cc      	b.n	8001cac <__aeabi_dsub+0x2dc>
 8001f12:	1bdc      	subs	r4, r3, r7
 8001f14:	4662      	mov	r2, ip
 8001f16:	42a3      	cmp	r3, r4
 8001f18:	419b      	sbcs	r3, r3
 8001f1a:	1a51      	subs	r1, r2, r1
 8001f1c:	425b      	negs	r3, r3
 8001f1e:	1acb      	subs	r3, r1, r3
 8001f20:	4699      	mov	r9, r3
 8001f22:	2301      	movs	r3, #1
 8001f24:	4698      	mov	r8, r3
 8001f26:	e5a4      	b.n	8001a72 <__aeabi_dsub+0xa2>
 8001f28:	08ff      	lsrs	r7, r7, #3
 8001f2a:	074b      	lsls	r3, r1, #29
 8001f2c:	465d      	mov	r5, fp
 8001f2e:	433b      	orrs	r3, r7
 8001f30:	08cc      	lsrs	r4, r1, #3
 8001f32:	e6d7      	b.n	8001ce4 <__aeabi_dsub+0x314>
 8001f34:	4662      	mov	r2, ip
 8001f36:	431a      	orrs	r2, r3
 8001f38:	0014      	movs	r4, r2
 8001f3a:	1e63      	subs	r3, r4, #1
 8001f3c:	419c      	sbcs	r4, r3
 8001f3e:	e679      	b.n	8001c34 <__aeabi_dsub+0x264>
 8001f40:	0015      	movs	r5, r2
 8001f42:	4664      	mov	r4, ip
 8001f44:	3d20      	subs	r5, #32
 8001f46:	40ec      	lsrs	r4, r5
 8001f48:	46a0      	mov	r8, r4
 8001f4a:	2a20      	cmp	r2, #32
 8001f4c:	d005      	beq.n	8001f5a <__aeabi_dsub+0x58a>
 8001f4e:	2540      	movs	r5, #64	; 0x40
 8001f50:	4664      	mov	r4, ip
 8001f52:	1aaa      	subs	r2, r5, r2
 8001f54:	4094      	lsls	r4, r2
 8001f56:	4323      	orrs	r3, r4
 8001f58:	469a      	mov	sl, r3
 8001f5a:	4654      	mov	r4, sl
 8001f5c:	1e63      	subs	r3, r4, #1
 8001f5e:	419c      	sbcs	r4, r3
 8001f60:	4643      	mov	r3, r8
 8001f62:	4323      	orrs	r3, r4
 8001f64:	e773      	b.n	8001e4e <__aeabi_dsub+0x47e>
 8001f66:	4662      	mov	r2, ip
 8001f68:	431a      	orrs	r2, r3
 8001f6a:	d023      	beq.n	8001fb4 <__aeabi_dsub+0x5e4>
 8001f6c:	000a      	movs	r2, r1
 8001f6e:	433a      	orrs	r2, r7
 8001f70:	d000      	beq.n	8001f74 <__aeabi_dsub+0x5a4>
 8001f72:	e0a0      	b.n	80020b6 <__aeabi_dsub+0x6e6>
 8001f74:	4662      	mov	r2, ip
 8001f76:	08db      	lsrs	r3, r3, #3
 8001f78:	0752      	lsls	r2, r2, #29
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	4662      	mov	r2, ip
 8001f7e:	08d4      	lsrs	r4, r2, #3
 8001f80:	e6b0      	b.n	8001ce4 <__aeabi_dsub+0x314>
 8001f82:	000b      	movs	r3, r1
 8001f84:	433b      	orrs	r3, r7
 8001f86:	d100      	bne.n	8001f8a <__aeabi_dsub+0x5ba>
 8001f88:	e728      	b.n	8001ddc <__aeabi_dsub+0x40c>
 8001f8a:	08ff      	lsrs	r7, r7, #3
 8001f8c:	074b      	lsls	r3, r1, #29
 8001f8e:	465d      	mov	r5, fp
 8001f90:	433b      	orrs	r3, r7
 8001f92:	08cc      	lsrs	r4, r1, #3
 8001f94:	e697      	b.n	8001cc6 <__aeabi_dsub+0x2f6>
 8001f96:	2302      	movs	r3, #2
 8001f98:	4698      	mov	r8, r3
 8001f9a:	e736      	b.n	8001e0a <__aeabi_dsub+0x43a>
 8001f9c:	1afc      	subs	r4, r7, r3
 8001f9e:	42a7      	cmp	r7, r4
 8001fa0:	41bf      	sbcs	r7, r7
 8001fa2:	4663      	mov	r3, ip
 8001fa4:	427f      	negs	r7, r7
 8001fa6:	1ac9      	subs	r1, r1, r3
 8001fa8:	1bcb      	subs	r3, r1, r7
 8001faa:	4699      	mov	r9, r3
 8001fac:	2301      	movs	r3, #1
 8001fae:	465d      	mov	r5, fp
 8001fb0:	4698      	mov	r8, r3
 8001fb2:	e55e      	b.n	8001a72 <__aeabi_dsub+0xa2>
 8001fb4:	074b      	lsls	r3, r1, #29
 8001fb6:	08ff      	lsrs	r7, r7, #3
 8001fb8:	433b      	orrs	r3, r7
 8001fba:	08cc      	lsrs	r4, r1, #3
 8001fbc:	e692      	b.n	8001ce4 <__aeabi_dsub+0x314>
 8001fbe:	1bdc      	subs	r4, r3, r7
 8001fc0:	4660      	mov	r0, ip
 8001fc2:	42a3      	cmp	r3, r4
 8001fc4:	41b6      	sbcs	r6, r6
 8001fc6:	1a40      	subs	r0, r0, r1
 8001fc8:	4276      	negs	r6, r6
 8001fca:	1b80      	subs	r0, r0, r6
 8001fcc:	4681      	mov	r9, r0
 8001fce:	0200      	lsls	r0, r0, #8
 8001fd0:	d560      	bpl.n	8002094 <__aeabi_dsub+0x6c4>
 8001fd2:	1afc      	subs	r4, r7, r3
 8001fd4:	42a7      	cmp	r7, r4
 8001fd6:	41bf      	sbcs	r7, r7
 8001fd8:	4663      	mov	r3, ip
 8001fda:	427f      	negs	r7, r7
 8001fdc:	1ac9      	subs	r1, r1, r3
 8001fde:	1bcb      	subs	r3, r1, r7
 8001fe0:	4699      	mov	r9, r3
 8001fe2:	465d      	mov	r5, fp
 8001fe4:	e576      	b.n	8001ad4 <__aeabi_dsub+0x104>
 8001fe6:	08ff      	lsrs	r7, r7, #3
 8001fe8:	074b      	lsls	r3, r1, #29
 8001fea:	433b      	orrs	r3, r7
 8001fec:	08cc      	lsrs	r4, r1, #3
 8001fee:	e667      	b.n	8001cc0 <__aeabi_dsub+0x2f0>
 8001ff0:	000a      	movs	r2, r1
 8001ff2:	08db      	lsrs	r3, r3, #3
 8001ff4:	433a      	orrs	r2, r7
 8001ff6:	d100      	bne.n	8001ffa <__aeabi_dsub+0x62a>
 8001ff8:	e66f      	b.n	8001cda <__aeabi_dsub+0x30a>
 8001ffa:	4662      	mov	r2, ip
 8001ffc:	0752      	lsls	r2, r2, #29
 8001ffe:	4313      	orrs	r3, r2
 8002000:	4662      	mov	r2, ip
 8002002:	08d4      	lsrs	r4, r2, #3
 8002004:	2280      	movs	r2, #128	; 0x80
 8002006:	0312      	lsls	r2, r2, #12
 8002008:	4214      	tst	r4, r2
 800200a:	d007      	beq.n	800201c <__aeabi_dsub+0x64c>
 800200c:	08c8      	lsrs	r0, r1, #3
 800200e:	4210      	tst	r0, r2
 8002010:	d104      	bne.n	800201c <__aeabi_dsub+0x64c>
 8002012:	465d      	mov	r5, fp
 8002014:	0004      	movs	r4, r0
 8002016:	08fb      	lsrs	r3, r7, #3
 8002018:	0749      	lsls	r1, r1, #29
 800201a:	430b      	orrs	r3, r1
 800201c:	0f5a      	lsrs	r2, r3, #29
 800201e:	00db      	lsls	r3, r3, #3
 8002020:	08db      	lsrs	r3, r3, #3
 8002022:	0752      	lsls	r2, r2, #29
 8002024:	4313      	orrs	r3, r2
 8002026:	e65d      	b.n	8001ce4 <__aeabi_dsub+0x314>
 8002028:	074b      	lsls	r3, r1, #29
 800202a:	08ff      	lsrs	r7, r7, #3
 800202c:	433b      	orrs	r3, r7
 800202e:	08cc      	lsrs	r4, r1, #3
 8002030:	e649      	b.n	8001cc6 <__aeabi_dsub+0x2f6>
 8002032:	19dc      	adds	r4, r3, r7
 8002034:	429c      	cmp	r4, r3
 8002036:	419b      	sbcs	r3, r3
 8002038:	4461      	add	r1, ip
 800203a:	4689      	mov	r9, r1
 800203c:	425b      	negs	r3, r3
 800203e:	4499      	add	r9, r3
 8002040:	464b      	mov	r3, r9
 8002042:	021b      	lsls	r3, r3, #8
 8002044:	d400      	bmi.n	8002048 <__aeabi_dsub+0x678>
 8002046:	e631      	b.n	8001cac <__aeabi_dsub+0x2dc>
 8002048:	464a      	mov	r2, r9
 800204a:	4b17      	ldr	r3, [pc, #92]	; (80020a8 <__aeabi_dsub+0x6d8>)
 800204c:	401a      	ands	r2, r3
 800204e:	2301      	movs	r3, #1
 8002050:	4691      	mov	r9, r2
 8002052:	4698      	mov	r8, r3
 8002054:	e62a      	b.n	8001cac <__aeabi_dsub+0x2dc>
 8002056:	0016      	movs	r6, r2
 8002058:	4664      	mov	r4, ip
 800205a:	3e20      	subs	r6, #32
 800205c:	40f4      	lsrs	r4, r6
 800205e:	46a0      	mov	r8, r4
 8002060:	2a20      	cmp	r2, #32
 8002062:	d005      	beq.n	8002070 <__aeabi_dsub+0x6a0>
 8002064:	2640      	movs	r6, #64	; 0x40
 8002066:	4664      	mov	r4, ip
 8002068:	1ab2      	subs	r2, r6, r2
 800206a:	4094      	lsls	r4, r2
 800206c:	4323      	orrs	r3, r4
 800206e:	469a      	mov	sl, r3
 8002070:	4654      	mov	r4, sl
 8002072:	1e63      	subs	r3, r4, #1
 8002074:	419c      	sbcs	r4, r3
 8002076:	4643      	mov	r3, r8
 8002078:	431c      	orrs	r4, r3
 800207a:	e5db      	b.n	8001c34 <__aeabi_dsub+0x264>
 800207c:	0002      	movs	r2, r0
 800207e:	2400      	movs	r4, #0
 8002080:	2300      	movs	r3, #0
 8002082:	e548      	b.n	8001b16 <__aeabi_dsub+0x146>
 8002084:	19dc      	adds	r4, r3, r7
 8002086:	42bc      	cmp	r4, r7
 8002088:	41bf      	sbcs	r7, r7
 800208a:	4461      	add	r1, ip
 800208c:	4689      	mov	r9, r1
 800208e:	427f      	negs	r7, r7
 8002090:	44b9      	add	r9, r7
 8002092:	e738      	b.n	8001f06 <__aeabi_dsub+0x536>
 8002094:	464b      	mov	r3, r9
 8002096:	4323      	orrs	r3, r4
 8002098:	d100      	bne.n	800209c <__aeabi_dsub+0x6cc>
 800209a:	e69f      	b.n	8001ddc <__aeabi_dsub+0x40c>
 800209c:	e606      	b.n	8001cac <__aeabi_dsub+0x2dc>
 800209e:	46c0      	nop			; (mov r8, r8)
 80020a0:	000007fe 	.word	0x000007fe
 80020a4:	000007ff 	.word	0x000007ff
 80020a8:	ff7fffff 	.word	0xff7fffff
 80020ac:	08ff      	lsrs	r7, r7, #3
 80020ae:	074b      	lsls	r3, r1, #29
 80020b0:	433b      	orrs	r3, r7
 80020b2:	08cc      	lsrs	r4, r1, #3
 80020b4:	e616      	b.n	8001ce4 <__aeabi_dsub+0x314>
 80020b6:	4662      	mov	r2, ip
 80020b8:	08db      	lsrs	r3, r3, #3
 80020ba:	0752      	lsls	r2, r2, #29
 80020bc:	4313      	orrs	r3, r2
 80020be:	4662      	mov	r2, ip
 80020c0:	08d4      	lsrs	r4, r2, #3
 80020c2:	2280      	movs	r2, #128	; 0x80
 80020c4:	0312      	lsls	r2, r2, #12
 80020c6:	4214      	tst	r4, r2
 80020c8:	d007      	beq.n	80020da <__aeabi_dsub+0x70a>
 80020ca:	08c8      	lsrs	r0, r1, #3
 80020cc:	4210      	tst	r0, r2
 80020ce:	d104      	bne.n	80020da <__aeabi_dsub+0x70a>
 80020d0:	465d      	mov	r5, fp
 80020d2:	0004      	movs	r4, r0
 80020d4:	08fb      	lsrs	r3, r7, #3
 80020d6:	0749      	lsls	r1, r1, #29
 80020d8:	430b      	orrs	r3, r1
 80020da:	0f5a      	lsrs	r2, r3, #29
 80020dc:	00db      	lsls	r3, r3, #3
 80020de:	0752      	lsls	r2, r2, #29
 80020e0:	08db      	lsrs	r3, r3, #3
 80020e2:	4313      	orrs	r3, r2
 80020e4:	e5fe      	b.n	8001ce4 <__aeabi_dsub+0x314>
 80020e6:	2300      	movs	r3, #0
 80020e8:	4a01      	ldr	r2, [pc, #4]	; (80020f0 <__aeabi_dsub+0x720>)
 80020ea:	001c      	movs	r4, r3
 80020ec:	e513      	b.n	8001b16 <__aeabi_dsub+0x146>
 80020ee:	46c0      	nop			; (mov r8, r8)
 80020f0:	000007ff 	.word	0x000007ff

080020f4 <__aeabi_dcmpun>:
 80020f4:	b570      	push	{r4, r5, r6, lr}
 80020f6:	0005      	movs	r5, r0
 80020f8:	480c      	ldr	r0, [pc, #48]	; (800212c <__aeabi_dcmpun+0x38>)
 80020fa:	031c      	lsls	r4, r3, #12
 80020fc:	0016      	movs	r6, r2
 80020fe:	005b      	lsls	r3, r3, #1
 8002100:	030a      	lsls	r2, r1, #12
 8002102:	0049      	lsls	r1, r1, #1
 8002104:	0b12      	lsrs	r2, r2, #12
 8002106:	0d49      	lsrs	r1, r1, #21
 8002108:	0b24      	lsrs	r4, r4, #12
 800210a:	0d5b      	lsrs	r3, r3, #21
 800210c:	4281      	cmp	r1, r0
 800210e:	d008      	beq.n	8002122 <__aeabi_dcmpun+0x2e>
 8002110:	4a06      	ldr	r2, [pc, #24]	; (800212c <__aeabi_dcmpun+0x38>)
 8002112:	2000      	movs	r0, #0
 8002114:	4293      	cmp	r3, r2
 8002116:	d103      	bne.n	8002120 <__aeabi_dcmpun+0x2c>
 8002118:	0020      	movs	r0, r4
 800211a:	4330      	orrs	r0, r6
 800211c:	1e43      	subs	r3, r0, #1
 800211e:	4198      	sbcs	r0, r3
 8002120:	bd70      	pop	{r4, r5, r6, pc}
 8002122:	2001      	movs	r0, #1
 8002124:	432a      	orrs	r2, r5
 8002126:	d1fb      	bne.n	8002120 <__aeabi_dcmpun+0x2c>
 8002128:	e7f2      	b.n	8002110 <__aeabi_dcmpun+0x1c>
 800212a:	46c0      	nop			; (mov r8, r8)
 800212c:	000007ff 	.word	0x000007ff

08002130 <__aeabi_d2iz>:
 8002130:	000a      	movs	r2, r1
 8002132:	b530      	push	{r4, r5, lr}
 8002134:	4c13      	ldr	r4, [pc, #76]	; (8002184 <__aeabi_d2iz+0x54>)
 8002136:	0053      	lsls	r3, r2, #1
 8002138:	0309      	lsls	r1, r1, #12
 800213a:	0005      	movs	r5, r0
 800213c:	0b09      	lsrs	r1, r1, #12
 800213e:	2000      	movs	r0, #0
 8002140:	0d5b      	lsrs	r3, r3, #21
 8002142:	0fd2      	lsrs	r2, r2, #31
 8002144:	42a3      	cmp	r3, r4
 8002146:	dd04      	ble.n	8002152 <__aeabi_d2iz+0x22>
 8002148:	480f      	ldr	r0, [pc, #60]	; (8002188 <__aeabi_d2iz+0x58>)
 800214a:	4283      	cmp	r3, r0
 800214c:	dd02      	ble.n	8002154 <__aeabi_d2iz+0x24>
 800214e:	4b0f      	ldr	r3, [pc, #60]	; (800218c <__aeabi_d2iz+0x5c>)
 8002150:	18d0      	adds	r0, r2, r3
 8002152:	bd30      	pop	{r4, r5, pc}
 8002154:	2080      	movs	r0, #128	; 0x80
 8002156:	0340      	lsls	r0, r0, #13
 8002158:	4301      	orrs	r1, r0
 800215a:	480d      	ldr	r0, [pc, #52]	; (8002190 <__aeabi_d2iz+0x60>)
 800215c:	1ac0      	subs	r0, r0, r3
 800215e:	281f      	cmp	r0, #31
 8002160:	dd08      	ble.n	8002174 <__aeabi_d2iz+0x44>
 8002162:	480c      	ldr	r0, [pc, #48]	; (8002194 <__aeabi_d2iz+0x64>)
 8002164:	1ac3      	subs	r3, r0, r3
 8002166:	40d9      	lsrs	r1, r3
 8002168:	000b      	movs	r3, r1
 800216a:	4258      	negs	r0, r3
 800216c:	2a00      	cmp	r2, #0
 800216e:	d1f0      	bne.n	8002152 <__aeabi_d2iz+0x22>
 8002170:	0018      	movs	r0, r3
 8002172:	e7ee      	b.n	8002152 <__aeabi_d2iz+0x22>
 8002174:	4c08      	ldr	r4, [pc, #32]	; (8002198 <__aeabi_d2iz+0x68>)
 8002176:	40c5      	lsrs	r5, r0
 8002178:	46a4      	mov	ip, r4
 800217a:	4463      	add	r3, ip
 800217c:	4099      	lsls	r1, r3
 800217e:	000b      	movs	r3, r1
 8002180:	432b      	orrs	r3, r5
 8002182:	e7f2      	b.n	800216a <__aeabi_d2iz+0x3a>
 8002184:	000003fe 	.word	0x000003fe
 8002188:	0000041d 	.word	0x0000041d
 800218c:	7fffffff 	.word	0x7fffffff
 8002190:	00000433 	.word	0x00000433
 8002194:	00000413 	.word	0x00000413
 8002198:	fffffbed 	.word	0xfffffbed

0800219c <__aeabi_i2d>:
 800219c:	b570      	push	{r4, r5, r6, lr}
 800219e:	2800      	cmp	r0, #0
 80021a0:	d016      	beq.n	80021d0 <__aeabi_i2d+0x34>
 80021a2:	17c3      	asrs	r3, r0, #31
 80021a4:	18c5      	adds	r5, r0, r3
 80021a6:	405d      	eors	r5, r3
 80021a8:	0fc4      	lsrs	r4, r0, #31
 80021aa:	0028      	movs	r0, r5
 80021ac:	f000 f91c 	bl	80023e8 <__clzsi2>
 80021b0:	4a11      	ldr	r2, [pc, #68]	; (80021f8 <__aeabi_i2d+0x5c>)
 80021b2:	1a12      	subs	r2, r2, r0
 80021b4:	280a      	cmp	r0, #10
 80021b6:	dc16      	bgt.n	80021e6 <__aeabi_i2d+0x4a>
 80021b8:	0003      	movs	r3, r0
 80021ba:	002e      	movs	r6, r5
 80021bc:	3315      	adds	r3, #21
 80021be:	409e      	lsls	r6, r3
 80021c0:	230b      	movs	r3, #11
 80021c2:	1a18      	subs	r0, r3, r0
 80021c4:	40c5      	lsrs	r5, r0
 80021c6:	0552      	lsls	r2, r2, #21
 80021c8:	032d      	lsls	r5, r5, #12
 80021ca:	0b2d      	lsrs	r5, r5, #12
 80021cc:	0d53      	lsrs	r3, r2, #21
 80021ce:	e003      	b.n	80021d8 <__aeabi_i2d+0x3c>
 80021d0:	2400      	movs	r4, #0
 80021d2:	2300      	movs	r3, #0
 80021d4:	2500      	movs	r5, #0
 80021d6:	2600      	movs	r6, #0
 80021d8:	051b      	lsls	r3, r3, #20
 80021da:	432b      	orrs	r3, r5
 80021dc:	07e4      	lsls	r4, r4, #31
 80021de:	4323      	orrs	r3, r4
 80021e0:	0030      	movs	r0, r6
 80021e2:	0019      	movs	r1, r3
 80021e4:	bd70      	pop	{r4, r5, r6, pc}
 80021e6:	380b      	subs	r0, #11
 80021e8:	4085      	lsls	r5, r0
 80021ea:	0552      	lsls	r2, r2, #21
 80021ec:	032d      	lsls	r5, r5, #12
 80021ee:	2600      	movs	r6, #0
 80021f0:	0b2d      	lsrs	r5, r5, #12
 80021f2:	0d53      	lsrs	r3, r2, #21
 80021f4:	e7f0      	b.n	80021d8 <__aeabi_i2d+0x3c>
 80021f6:	46c0      	nop			; (mov r8, r8)
 80021f8:	0000041e 	.word	0x0000041e

080021fc <__aeabi_ui2d>:
 80021fc:	b510      	push	{r4, lr}
 80021fe:	1e04      	subs	r4, r0, #0
 8002200:	d010      	beq.n	8002224 <__aeabi_ui2d+0x28>
 8002202:	f000 f8f1 	bl	80023e8 <__clzsi2>
 8002206:	4b0f      	ldr	r3, [pc, #60]	; (8002244 <__aeabi_ui2d+0x48>)
 8002208:	1a1b      	subs	r3, r3, r0
 800220a:	280a      	cmp	r0, #10
 800220c:	dc11      	bgt.n	8002232 <__aeabi_ui2d+0x36>
 800220e:	220b      	movs	r2, #11
 8002210:	0021      	movs	r1, r4
 8002212:	1a12      	subs	r2, r2, r0
 8002214:	40d1      	lsrs	r1, r2
 8002216:	3015      	adds	r0, #21
 8002218:	030a      	lsls	r2, r1, #12
 800221a:	055b      	lsls	r3, r3, #21
 800221c:	4084      	lsls	r4, r0
 800221e:	0b12      	lsrs	r2, r2, #12
 8002220:	0d5b      	lsrs	r3, r3, #21
 8002222:	e001      	b.n	8002228 <__aeabi_ui2d+0x2c>
 8002224:	2300      	movs	r3, #0
 8002226:	2200      	movs	r2, #0
 8002228:	051b      	lsls	r3, r3, #20
 800222a:	4313      	orrs	r3, r2
 800222c:	0020      	movs	r0, r4
 800222e:	0019      	movs	r1, r3
 8002230:	bd10      	pop	{r4, pc}
 8002232:	0022      	movs	r2, r4
 8002234:	380b      	subs	r0, #11
 8002236:	4082      	lsls	r2, r0
 8002238:	055b      	lsls	r3, r3, #21
 800223a:	0312      	lsls	r2, r2, #12
 800223c:	2400      	movs	r4, #0
 800223e:	0b12      	lsrs	r2, r2, #12
 8002240:	0d5b      	lsrs	r3, r3, #21
 8002242:	e7f1      	b.n	8002228 <__aeabi_ui2d+0x2c>
 8002244:	0000041e 	.word	0x0000041e

08002248 <__aeabi_f2d>:
 8002248:	b570      	push	{r4, r5, r6, lr}
 800224a:	0043      	lsls	r3, r0, #1
 800224c:	0246      	lsls	r6, r0, #9
 800224e:	0fc4      	lsrs	r4, r0, #31
 8002250:	20fe      	movs	r0, #254	; 0xfe
 8002252:	0e1b      	lsrs	r3, r3, #24
 8002254:	1c59      	adds	r1, r3, #1
 8002256:	0a75      	lsrs	r5, r6, #9
 8002258:	4208      	tst	r0, r1
 800225a:	d00c      	beq.n	8002276 <__aeabi_f2d+0x2e>
 800225c:	22e0      	movs	r2, #224	; 0xe0
 800225e:	0092      	lsls	r2, r2, #2
 8002260:	4694      	mov	ip, r2
 8002262:	076d      	lsls	r5, r5, #29
 8002264:	0b36      	lsrs	r6, r6, #12
 8002266:	4463      	add	r3, ip
 8002268:	051b      	lsls	r3, r3, #20
 800226a:	4333      	orrs	r3, r6
 800226c:	07e4      	lsls	r4, r4, #31
 800226e:	4323      	orrs	r3, r4
 8002270:	0028      	movs	r0, r5
 8002272:	0019      	movs	r1, r3
 8002274:	bd70      	pop	{r4, r5, r6, pc}
 8002276:	2b00      	cmp	r3, #0
 8002278:	d114      	bne.n	80022a4 <__aeabi_f2d+0x5c>
 800227a:	2d00      	cmp	r5, #0
 800227c:	d01b      	beq.n	80022b6 <__aeabi_f2d+0x6e>
 800227e:	0028      	movs	r0, r5
 8002280:	f000 f8b2 	bl	80023e8 <__clzsi2>
 8002284:	280a      	cmp	r0, #10
 8002286:	dc1c      	bgt.n	80022c2 <__aeabi_f2d+0x7a>
 8002288:	230b      	movs	r3, #11
 800228a:	002e      	movs	r6, r5
 800228c:	1a1b      	subs	r3, r3, r0
 800228e:	40de      	lsrs	r6, r3
 8002290:	0003      	movs	r3, r0
 8002292:	3315      	adds	r3, #21
 8002294:	409d      	lsls	r5, r3
 8002296:	4a0e      	ldr	r2, [pc, #56]	; (80022d0 <__aeabi_f2d+0x88>)
 8002298:	0336      	lsls	r6, r6, #12
 800229a:	1a12      	subs	r2, r2, r0
 800229c:	0552      	lsls	r2, r2, #21
 800229e:	0b36      	lsrs	r6, r6, #12
 80022a0:	0d53      	lsrs	r3, r2, #21
 80022a2:	e7e1      	b.n	8002268 <__aeabi_f2d+0x20>
 80022a4:	2d00      	cmp	r5, #0
 80022a6:	d009      	beq.n	80022bc <__aeabi_f2d+0x74>
 80022a8:	2280      	movs	r2, #128	; 0x80
 80022aa:	0b36      	lsrs	r6, r6, #12
 80022ac:	0312      	lsls	r2, r2, #12
 80022ae:	4b09      	ldr	r3, [pc, #36]	; (80022d4 <__aeabi_f2d+0x8c>)
 80022b0:	076d      	lsls	r5, r5, #29
 80022b2:	4316      	orrs	r6, r2
 80022b4:	e7d8      	b.n	8002268 <__aeabi_f2d+0x20>
 80022b6:	2300      	movs	r3, #0
 80022b8:	2600      	movs	r6, #0
 80022ba:	e7d5      	b.n	8002268 <__aeabi_f2d+0x20>
 80022bc:	2600      	movs	r6, #0
 80022be:	4b05      	ldr	r3, [pc, #20]	; (80022d4 <__aeabi_f2d+0x8c>)
 80022c0:	e7d2      	b.n	8002268 <__aeabi_f2d+0x20>
 80022c2:	0003      	movs	r3, r0
 80022c4:	3b0b      	subs	r3, #11
 80022c6:	409d      	lsls	r5, r3
 80022c8:	002e      	movs	r6, r5
 80022ca:	2500      	movs	r5, #0
 80022cc:	e7e3      	b.n	8002296 <__aeabi_f2d+0x4e>
 80022ce:	46c0      	nop			; (mov r8, r8)
 80022d0:	00000389 	.word	0x00000389
 80022d4:	000007ff 	.word	0x000007ff

080022d8 <__aeabi_d2f>:
 80022d8:	0002      	movs	r2, r0
 80022da:	004b      	lsls	r3, r1, #1
 80022dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022de:	0d5b      	lsrs	r3, r3, #21
 80022e0:	030c      	lsls	r4, r1, #12
 80022e2:	4e3d      	ldr	r6, [pc, #244]	; (80023d8 <__aeabi_d2f+0x100>)
 80022e4:	0a64      	lsrs	r4, r4, #9
 80022e6:	0f40      	lsrs	r0, r0, #29
 80022e8:	1c5f      	adds	r7, r3, #1
 80022ea:	0fc9      	lsrs	r1, r1, #31
 80022ec:	4304      	orrs	r4, r0
 80022ee:	00d5      	lsls	r5, r2, #3
 80022f0:	4237      	tst	r7, r6
 80022f2:	d00a      	beq.n	800230a <__aeabi_d2f+0x32>
 80022f4:	4839      	ldr	r0, [pc, #228]	; (80023dc <__aeabi_d2f+0x104>)
 80022f6:	181e      	adds	r6, r3, r0
 80022f8:	2efe      	cmp	r6, #254	; 0xfe
 80022fa:	dd16      	ble.n	800232a <__aeabi_d2f+0x52>
 80022fc:	20ff      	movs	r0, #255	; 0xff
 80022fe:	2400      	movs	r4, #0
 8002300:	05c0      	lsls	r0, r0, #23
 8002302:	4320      	orrs	r0, r4
 8002304:	07c9      	lsls	r1, r1, #31
 8002306:	4308      	orrs	r0, r1
 8002308:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800230a:	2b00      	cmp	r3, #0
 800230c:	d106      	bne.n	800231c <__aeabi_d2f+0x44>
 800230e:	432c      	orrs	r4, r5
 8002310:	d026      	beq.n	8002360 <__aeabi_d2f+0x88>
 8002312:	2205      	movs	r2, #5
 8002314:	0192      	lsls	r2, r2, #6
 8002316:	0a54      	lsrs	r4, r2, #9
 8002318:	b2d8      	uxtb	r0, r3
 800231a:	e7f1      	b.n	8002300 <__aeabi_d2f+0x28>
 800231c:	4325      	orrs	r5, r4
 800231e:	d0ed      	beq.n	80022fc <__aeabi_d2f+0x24>
 8002320:	2080      	movs	r0, #128	; 0x80
 8002322:	03c0      	lsls	r0, r0, #15
 8002324:	4304      	orrs	r4, r0
 8002326:	20ff      	movs	r0, #255	; 0xff
 8002328:	e7ea      	b.n	8002300 <__aeabi_d2f+0x28>
 800232a:	2e00      	cmp	r6, #0
 800232c:	dd1b      	ble.n	8002366 <__aeabi_d2f+0x8e>
 800232e:	0192      	lsls	r2, r2, #6
 8002330:	1e53      	subs	r3, r2, #1
 8002332:	419a      	sbcs	r2, r3
 8002334:	00e4      	lsls	r4, r4, #3
 8002336:	0f6d      	lsrs	r5, r5, #29
 8002338:	4322      	orrs	r2, r4
 800233a:	432a      	orrs	r2, r5
 800233c:	0753      	lsls	r3, r2, #29
 800233e:	d048      	beq.n	80023d2 <__aeabi_d2f+0xfa>
 8002340:	230f      	movs	r3, #15
 8002342:	4013      	ands	r3, r2
 8002344:	2b04      	cmp	r3, #4
 8002346:	d000      	beq.n	800234a <__aeabi_d2f+0x72>
 8002348:	3204      	adds	r2, #4
 800234a:	2380      	movs	r3, #128	; 0x80
 800234c:	04db      	lsls	r3, r3, #19
 800234e:	4013      	ands	r3, r2
 8002350:	d03f      	beq.n	80023d2 <__aeabi_d2f+0xfa>
 8002352:	1c70      	adds	r0, r6, #1
 8002354:	2efe      	cmp	r6, #254	; 0xfe
 8002356:	d0d1      	beq.n	80022fc <__aeabi_d2f+0x24>
 8002358:	0192      	lsls	r2, r2, #6
 800235a:	0a54      	lsrs	r4, r2, #9
 800235c:	b2c0      	uxtb	r0, r0
 800235e:	e7cf      	b.n	8002300 <__aeabi_d2f+0x28>
 8002360:	2000      	movs	r0, #0
 8002362:	2400      	movs	r4, #0
 8002364:	e7cc      	b.n	8002300 <__aeabi_d2f+0x28>
 8002366:	0032      	movs	r2, r6
 8002368:	3217      	adds	r2, #23
 800236a:	db22      	blt.n	80023b2 <__aeabi_d2f+0xda>
 800236c:	2080      	movs	r0, #128	; 0x80
 800236e:	0400      	lsls	r0, r0, #16
 8002370:	4320      	orrs	r0, r4
 8002372:	241e      	movs	r4, #30
 8002374:	1ba4      	subs	r4, r4, r6
 8002376:	2c1f      	cmp	r4, #31
 8002378:	dd1d      	ble.n	80023b6 <__aeabi_d2f+0xde>
 800237a:	2202      	movs	r2, #2
 800237c:	4252      	negs	r2, r2
 800237e:	1b96      	subs	r6, r2, r6
 8002380:	0002      	movs	r2, r0
 8002382:	40f2      	lsrs	r2, r6
 8002384:	0016      	movs	r6, r2
 8002386:	2c20      	cmp	r4, #32
 8002388:	d004      	beq.n	8002394 <__aeabi_d2f+0xbc>
 800238a:	4a15      	ldr	r2, [pc, #84]	; (80023e0 <__aeabi_d2f+0x108>)
 800238c:	4694      	mov	ip, r2
 800238e:	4463      	add	r3, ip
 8002390:	4098      	lsls	r0, r3
 8002392:	4305      	orrs	r5, r0
 8002394:	002a      	movs	r2, r5
 8002396:	1e53      	subs	r3, r2, #1
 8002398:	419a      	sbcs	r2, r3
 800239a:	4332      	orrs	r2, r6
 800239c:	2600      	movs	r6, #0
 800239e:	0753      	lsls	r3, r2, #29
 80023a0:	d1ce      	bne.n	8002340 <__aeabi_d2f+0x68>
 80023a2:	2480      	movs	r4, #128	; 0x80
 80023a4:	0013      	movs	r3, r2
 80023a6:	04e4      	lsls	r4, r4, #19
 80023a8:	2001      	movs	r0, #1
 80023aa:	4023      	ands	r3, r4
 80023ac:	4222      	tst	r2, r4
 80023ae:	d1d3      	bne.n	8002358 <__aeabi_d2f+0x80>
 80023b0:	e7b0      	b.n	8002314 <__aeabi_d2f+0x3c>
 80023b2:	2300      	movs	r3, #0
 80023b4:	e7ad      	b.n	8002312 <__aeabi_d2f+0x3a>
 80023b6:	4a0b      	ldr	r2, [pc, #44]	; (80023e4 <__aeabi_d2f+0x10c>)
 80023b8:	4694      	mov	ip, r2
 80023ba:	002a      	movs	r2, r5
 80023bc:	40e2      	lsrs	r2, r4
 80023be:	0014      	movs	r4, r2
 80023c0:	002a      	movs	r2, r5
 80023c2:	4463      	add	r3, ip
 80023c4:	409a      	lsls	r2, r3
 80023c6:	4098      	lsls	r0, r3
 80023c8:	1e55      	subs	r5, r2, #1
 80023ca:	41aa      	sbcs	r2, r5
 80023cc:	4302      	orrs	r2, r0
 80023ce:	4322      	orrs	r2, r4
 80023d0:	e7e4      	b.n	800239c <__aeabi_d2f+0xc4>
 80023d2:	0033      	movs	r3, r6
 80023d4:	e79e      	b.n	8002314 <__aeabi_d2f+0x3c>
 80023d6:	46c0      	nop			; (mov r8, r8)
 80023d8:	000007fe 	.word	0x000007fe
 80023dc:	fffffc80 	.word	0xfffffc80
 80023e0:	fffffca2 	.word	0xfffffca2
 80023e4:	fffffc82 	.word	0xfffffc82

080023e8 <__clzsi2>:
 80023e8:	211c      	movs	r1, #28
 80023ea:	2301      	movs	r3, #1
 80023ec:	041b      	lsls	r3, r3, #16
 80023ee:	4298      	cmp	r0, r3
 80023f0:	d301      	bcc.n	80023f6 <__clzsi2+0xe>
 80023f2:	0c00      	lsrs	r0, r0, #16
 80023f4:	3910      	subs	r1, #16
 80023f6:	0a1b      	lsrs	r3, r3, #8
 80023f8:	4298      	cmp	r0, r3
 80023fa:	d301      	bcc.n	8002400 <__clzsi2+0x18>
 80023fc:	0a00      	lsrs	r0, r0, #8
 80023fe:	3908      	subs	r1, #8
 8002400:	091b      	lsrs	r3, r3, #4
 8002402:	4298      	cmp	r0, r3
 8002404:	d301      	bcc.n	800240a <__clzsi2+0x22>
 8002406:	0900      	lsrs	r0, r0, #4
 8002408:	3904      	subs	r1, #4
 800240a:	a202      	add	r2, pc, #8	; (adr r2, 8002414 <__clzsi2+0x2c>)
 800240c:	5c10      	ldrb	r0, [r2, r0]
 800240e:	1840      	adds	r0, r0, r1
 8002410:	4770      	bx	lr
 8002412:	46c0      	nop			; (mov r8, r8)
 8002414:	02020304 	.word	0x02020304
 8002418:	01010101 	.word	0x01010101
	...

08002424 <__clzdi2>:
 8002424:	b510      	push	{r4, lr}
 8002426:	2900      	cmp	r1, #0
 8002428:	d103      	bne.n	8002432 <__clzdi2+0xe>
 800242a:	f7ff ffdd 	bl	80023e8 <__clzsi2>
 800242e:	3020      	adds	r0, #32
 8002430:	e002      	b.n	8002438 <__clzdi2+0x14>
 8002432:	0008      	movs	r0, r1
 8002434:	f7ff ffd8 	bl	80023e8 <__clzsi2>
 8002438:	bd10      	pop	{r4, pc}
 800243a:	46c0      	nop			; (mov r8, r8)

0800243c <DS1307_Init>:
	
/**
 * @brief Initializes the DS1307 module. Sets clock halt bit to 0 to start timing.
 * @param hi2c User I2C handle pointer.
 */
void DS1307_Init(I2C_HandleTypeDef *hi2c) {
 800243c:	b580      	push	{r7, lr}
 800243e:	b082      	sub	sp, #8
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
	_ds1307_ui2c = hi2c;
 8002444:	4b04      	ldr	r3, [pc, #16]	; (8002458 <DS1307_Init+0x1c>)
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	601a      	str	r2, [r3, #0]
	DS1307_SetClockHalt(0);
 800244a:	2000      	movs	r0, #0
 800244c:	f000 f806 	bl	800245c <DS1307_SetClockHalt>
}
 8002450:	46c0      	nop			; (mov r8, r8)
 8002452:	46bd      	mov	sp, r7
 8002454:	b002      	add	sp, #8
 8002456:	bd80      	pop	{r7, pc}
 8002458:	200001fc 	.word	0x200001fc

0800245c <DS1307_SetClockHalt>:

/**
 * @brief Sets clock halt bit.
 * @param halt Clock halt bit to set, 0 or 1. 0 to start timing, 0 to stop.
 */
void DS1307_SetClockHalt(uint8_t halt) {
 800245c:	b590      	push	{r4, r7, lr}
 800245e:	b085      	sub	sp, #20
 8002460:	af00      	add	r7, sp, #0
 8002462:	0002      	movs	r2, r0
 8002464:	1dfb      	adds	r3, r7, #7
 8002466:	701a      	strb	r2, [r3, #0]
	uint8_t ch = (halt ? 1 << 7 : 0);
 8002468:	1dfb      	adds	r3, r7, #7
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d001      	beq.n	8002474 <DS1307_SetClockHalt+0x18>
 8002470:	2280      	movs	r2, #128	; 0x80
 8002472:	e000      	b.n	8002476 <DS1307_SetClockHalt+0x1a>
 8002474:	2200      	movs	r2, #0
 8002476:	240f      	movs	r4, #15
 8002478:	193b      	adds	r3, r7, r4
 800247a:	701a      	strb	r2, [r3, #0]
	DS1307_SetRegByte(DS1307_REG_SECOND, ch | (DS1307_GetRegByte(DS1307_REG_SECOND) & 0x7f));
 800247c:	2000      	movs	r0, #0
 800247e:	f000 f835 	bl	80024ec <DS1307_GetRegByte>
 8002482:	0003      	movs	r3, r0
 8002484:	b25b      	sxtb	r3, r3
 8002486:	227f      	movs	r2, #127	; 0x7f
 8002488:	4013      	ands	r3, r2
 800248a:	b25a      	sxtb	r2, r3
 800248c:	193b      	adds	r3, r7, r4
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	b25b      	sxtb	r3, r3
 8002492:	4313      	orrs	r3, r2
 8002494:	b25b      	sxtb	r3, r3
 8002496:	b2db      	uxtb	r3, r3
 8002498:	0019      	movs	r1, r3
 800249a:	2000      	movs	r0, #0
 800249c:	f000 f804 	bl	80024a8 <DS1307_SetRegByte>
}
 80024a0:	46c0      	nop			; (mov r8, r8)
 80024a2:	46bd      	mov	sp, r7
 80024a4:	b005      	add	sp, #20
 80024a6:	bd90      	pop	{r4, r7, pc}

080024a8 <DS1307_SetRegByte>:
/**
 * @brief Sets the byte in the designated DS1307 register to value.
 * @param regAddr Register address to write.
 * @param val Value to set, 0 to 255.
 */
void DS1307_SetRegByte(uint8_t regAddr, uint8_t val) {
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b086      	sub	sp, #24
 80024ac:	af02      	add	r7, sp, #8
 80024ae:	0002      	movs	r2, r0
 80024b0:	1dfb      	adds	r3, r7, #7
 80024b2:	701a      	strb	r2, [r3, #0]
 80024b4:	1dbb      	adds	r3, r7, #6
 80024b6:	1c0a      	adds	r2, r1, #0
 80024b8:	701a      	strb	r2, [r3, #0]
	uint8_t bytes[2] = { regAddr, val };
 80024ba:	210c      	movs	r1, #12
 80024bc:	187b      	adds	r3, r7, r1
 80024be:	1dfa      	adds	r2, r7, #7
 80024c0:	7812      	ldrb	r2, [r2, #0]
 80024c2:	701a      	strb	r2, [r3, #0]
 80024c4:	187b      	adds	r3, r7, r1
 80024c6:	1dba      	adds	r2, r7, #6
 80024c8:	7812      	ldrb	r2, [r2, #0]
 80024ca:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(_ds1307_ui2c, DS1307_I2C_ADDR << 1, bytes, 2, DS1307_TIMEOUT);
 80024cc:	4b06      	ldr	r3, [pc, #24]	; (80024e8 <DS1307_SetRegByte+0x40>)
 80024ce:	6818      	ldr	r0, [r3, #0]
 80024d0:	187a      	adds	r2, r7, r1
 80024d2:	23fa      	movs	r3, #250	; 0xfa
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	9300      	str	r3, [sp, #0]
 80024d8:	2302      	movs	r3, #2
 80024da:	21d0      	movs	r1, #208	; 0xd0
 80024dc:	f003 f9ee 	bl	80058bc <HAL_I2C_Master_Transmit>
}
 80024e0:	46c0      	nop			; (mov r8, r8)
 80024e2:	46bd      	mov	sp, r7
 80024e4:	b004      	add	sp, #16
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	200001fc 	.word	0x200001fc

080024ec <DS1307_GetRegByte>:
/**
 * @brief Gets the byte in the designated DS1307 register.
 * @param regAddr Register address to read.
 * @return Value stored in the register, 0 to 255.
 */
uint8_t DS1307_GetRegByte(uint8_t regAddr) {
 80024ec:	b590      	push	{r4, r7, lr}
 80024ee:	b087      	sub	sp, #28
 80024f0:	af02      	add	r7, sp, #8
 80024f2:	0002      	movs	r2, r0
 80024f4:	1dfb      	adds	r3, r7, #7
 80024f6:	701a      	strb	r2, [r3, #0]
	uint8_t val;
	HAL_I2C_Master_Transmit(_ds1307_ui2c, DS1307_I2C_ADDR << 1, &regAddr, 1, DS1307_TIMEOUT);
 80024f8:	4b0d      	ldr	r3, [pc, #52]	; (8002530 <DS1307_GetRegByte+0x44>)
 80024fa:	6818      	ldr	r0, [r3, #0]
 80024fc:	1dfa      	adds	r2, r7, #7
 80024fe:	23fa      	movs	r3, #250	; 0xfa
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	9300      	str	r3, [sp, #0]
 8002504:	2301      	movs	r3, #1
 8002506:	21d0      	movs	r1, #208	; 0xd0
 8002508:	f003 f9d8 	bl	80058bc <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_ds1307_ui2c, DS1307_I2C_ADDR << 1, &val, 1, DS1307_TIMEOUT);
 800250c:	4b08      	ldr	r3, [pc, #32]	; (8002530 <DS1307_GetRegByte+0x44>)
 800250e:	6818      	ldr	r0, [r3, #0]
 8002510:	240f      	movs	r4, #15
 8002512:	193a      	adds	r2, r7, r4
 8002514:	23fa      	movs	r3, #250	; 0xfa
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	9300      	str	r3, [sp, #0]
 800251a:	2301      	movs	r3, #1
 800251c:	21d0      	movs	r1, #208	; 0xd0
 800251e:	f003 fad5 	bl	8005acc <HAL_I2C_Master_Receive>
	return val;
 8002522:	193b      	adds	r3, r7, r4
 8002524:	781b      	ldrb	r3, [r3, #0]
}
 8002526:	0018      	movs	r0, r3
 8002528:	46bd      	mov	sp, r7
 800252a:	b005      	add	sp, #20
 800252c:	bd90      	pop	{r4, r7, pc}
 800252e:	46c0      	nop			; (mov r8, r8)
 8002530:	200001fc 	.word	0x200001fc

08002534 <DS1307_GetDate>:

/**
 * @brief Gets the current day of month.
 * @return Day of month, 1 to 31.
 */
uint8_t DS1307_GetDate(void) {
 8002534:	b580      	push	{r7, lr}
 8002536:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_DATE));
 8002538:	2004      	movs	r0, #4
 800253a:	f7ff ffd7 	bl	80024ec <DS1307_GetRegByte>
 800253e:	0003      	movs	r3, r0
 8002540:	0018      	movs	r0, r3
 8002542:	f000 f85d 	bl	8002600 <DS1307_DecodeBCD>
 8002546:	0003      	movs	r3, r0
}
 8002548:	0018      	movs	r0, r3
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}

0800254e <DS1307_GetMonth>:

/**
 * @brief Gets the current month.
 * @return Month, 1 to 12.
 */
uint8_t DS1307_GetMonth(void) {
 800254e:	b580      	push	{r7, lr}
 8002550:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_MONTH));
 8002552:	2005      	movs	r0, #5
 8002554:	f7ff ffca 	bl	80024ec <DS1307_GetRegByte>
 8002558:	0003      	movs	r3, r0
 800255a:	0018      	movs	r0, r3
 800255c:	f000 f850 	bl	8002600 <DS1307_DecodeBCD>
 8002560:	0003      	movs	r3, r0
}
 8002562:	0018      	movs	r0, r3
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}

08002568 <DS1307_GetYear>:

/**
 * @brief Gets the current year.
 * @return Year, 2000 to 2099.
 */
uint16_t DS1307_GetYear(void) {
 8002568:	b580      	push	{r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af00      	add	r7, sp, #0
	uint16_t cen = DS1307_GetRegByte(DS1307_REG_CENT) * 100;
 800256e:	2010      	movs	r0, #16
 8002570:	f7ff ffbc 	bl	80024ec <DS1307_GetRegByte>
 8002574:	0003      	movs	r3, r0
 8002576:	b29a      	uxth	r2, r3
 8002578:	1dbb      	adds	r3, r7, #6
 800257a:	2164      	movs	r1, #100	; 0x64
 800257c:	434a      	muls	r2, r1
 800257e:	801a      	strh	r2, [r3, #0]
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_YEAR)) + cen;
 8002580:	2006      	movs	r0, #6
 8002582:	f7ff ffb3 	bl	80024ec <DS1307_GetRegByte>
 8002586:	0003      	movs	r3, r0
 8002588:	0018      	movs	r0, r3
 800258a:	f000 f839 	bl	8002600 <DS1307_DecodeBCD>
 800258e:	0003      	movs	r3, r0
 8002590:	b29a      	uxth	r2, r3
 8002592:	1dbb      	adds	r3, r7, #6
 8002594:	881b      	ldrh	r3, [r3, #0]
 8002596:	18d3      	adds	r3, r2, r3
 8002598:	b29b      	uxth	r3, r3
}
 800259a:	0018      	movs	r0, r3
 800259c:	46bd      	mov	sp, r7
 800259e:	b002      	add	sp, #8
 80025a0:	bd80      	pop	{r7, pc}

080025a2 <DS1307_GetHour>:

/**
 * @brief Gets the current hour in 24h format.
 * @return Hour in 24h format, 0 to 23.
 */
uint8_t DS1307_GetHour(void) {
 80025a2:	b580      	push	{r7, lr}
 80025a4:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_HOUR) & 0x3f);
 80025a6:	2002      	movs	r0, #2
 80025a8:	f7ff ffa0 	bl	80024ec <DS1307_GetRegByte>
 80025ac:	0003      	movs	r3, r0
 80025ae:	001a      	movs	r2, r3
 80025b0:	233f      	movs	r3, #63	; 0x3f
 80025b2:	4013      	ands	r3, r2
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	0018      	movs	r0, r3
 80025b8:	f000 f822 	bl	8002600 <DS1307_DecodeBCD>
 80025bc:	0003      	movs	r3, r0
}
 80025be:	0018      	movs	r0, r3
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}

080025c4 <DS1307_GetMinute>:

/**
 * @brief Gets the current minute.
 * @return Minute, 0 to 59.
 */
uint8_t DS1307_GetMinute(void) {
 80025c4:	b580      	push	{r7, lr}
 80025c6:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_MINUTE));
 80025c8:	2001      	movs	r0, #1
 80025ca:	f7ff ff8f 	bl	80024ec <DS1307_GetRegByte>
 80025ce:	0003      	movs	r3, r0
 80025d0:	0018      	movs	r0, r3
 80025d2:	f000 f815 	bl	8002600 <DS1307_DecodeBCD>
 80025d6:	0003      	movs	r3, r0
}
 80025d8:	0018      	movs	r0, r3
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}

080025de <DS1307_GetSecond>:

/**
 * @brief Gets the current second. Clock halt bit not included.
 * @return Second, 0 to 59.
 */
uint8_t DS1307_GetSecond(void) {
 80025de:	b580      	push	{r7, lr}
 80025e0:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_SECOND) & 0x7f);
 80025e2:	2000      	movs	r0, #0
 80025e4:	f7ff ff82 	bl	80024ec <DS1307_GetRegByte>
 80025e8:	0003      	movs	r3, r0
 80025ea:	001a      	movs	r2, r3
 80025ec:	237f      	movs	r3, #127	; 0x7f
 80025ee:	4013      	ands	r3, r2
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	0018      	movs	r0, r3
 80025f4:	f000 f804 	bl	8002600 <DS1307_DecodeBCD>
 80025f8:	0003      	movs	r3, r0
}
 80025fa:	0018      	movs	r0, r3
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}

08002600 <DS1307_DecodeBCD>:
/**
 * @brief Decodes the raw binary value stored in registers to decimal format.
 * @param bin Binary-coded decimal value retrieved from register, 0 to 255.
 * @return Decoded decimal value.
 */
uint8_t DS1307_DecodeBCD(uint8_t bin) {
 8002600:	b580      	push	{r7, lr}
 8002602:	b082      	sub	sp, #8
 8002604:	af00      	add	r7, sp, #0
 8002606:	0002      	movs	r2, r0
 8002608:	1dfb      	adds	r3, r7, #7
 800260a:	701a      	strb	r2, [r3, #0]
	return (((bin & 0xf0) >> 4) * 10) + (bin & 0x0f);
 800260c:	1dfb      	adds	r3, r7, #7
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	091b      	lsrs	r3, r3, #4
 8002612:	b2db      	uxtb	r3, r3
 8002614:	1c1a      	adds	r2, r3, #0
 8002616:	0092      	lsls	r2, r2, #2
 8002618:	18d3      	adds	r3, r2, r3
 800261a:	18db      	adds	r3, r3, r3
 800261c:	b2da      	uxtb	r2, r3
 800261e:	1dfb      	adds	r3, r7, #7
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	210f      	movs	r1, #15
 8002624:	400b      	ands	r3, r1
 8002626:	b2db      	uxtb	r3, r3
 8002628:	18d3      	adds	r3, r2, r3
 800262a:	b2db      	uxtb	r3, r3
}
 800262c:	0018      	movs	r0, r3
 800262e:	46bd      	mov	sp, r7
 8002630:	b002      	add	sp, #8
 8002632:	bd80      	pop	{r7, pc}

08002634 <HAL_GPIO_EXTI_Rising_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b082      	sub	sp, #8
 8002638:	af00      	add	r7, sp, #0
 800263a:	0002      	movs	r2, r0
 800263c:	1dbb      	adds	r3, r7, #6
 800263e:	801a      	strh	r2, [r3, #0]
	velocidad=velocidad+1;
 8002640:	4b04      	ldr	r3, [pc, #16]	; (8002654 <HAL_GPIO_EXTI_Rising_Callback+0x20>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	1c5a      	adds	r2, r3, #1
 8002646:	4b03      	ldr	r3, [pc, #12]	; (8002654 <HAL_GPIO_EXTI_Rising_Callback+0x20>)
 8002648:	601a      	str	r2, [r3, #0]

}
 800264a:	46c0      	nop			; (mov r8, r8)
 800264c:	46bd      	mov	sp, r7
 800264e:	b002      	add	sp, #8
 8002650:	bd80      	pop	{r7, pc}
 8002652:	46c0      	nop			; (mov r8, r8)
 8002654:	200005b0 	.word	0x200005b0

08002658 <clean>:

void clean()
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0

	for (int var = 0; var < 200; ++var)
 800265e:	2300      	movs	r3, #0
 8002660:	607b      	str	r3, [r7, #4]
 8002662:	e007      	b.n	8002674 <clean+0x1c>
	{
		buff[var]='\0';
 8002664:	4a07      	ldr	r2, [pc, #28]	; (8002684 <clean+0x2c>)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	18d3      	adds	r3, r2, r3
 800266a:	2200      	movs	r2, #0
 800266c:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 200; ++var)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	3301      	adds	r3, #1
 8002672:	607b      	str	r3, [r7, #4]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2bc7      	cmp	r3, #199	; 0xc7
 8002678:	ddf4      	ble.n	8002664 <clean+0xc>
	}



}
 800267a:	46c0      	nop			; (mov r8, r8)
 800267c:	46c0      	nop			; (mov r8, r8)
 800267e:	46bd      	mov	sp, r7
 8002680:	b002      	add	sp, #8
 8002682:	bd80      	pop	{r7, pc}
 8002684:	200004d8 	.word	0x200004d8

08002688 <MPU6050_Read_Accel>:

}


void MPU6050_Read_Accel (void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b086      	sub	sp, #24
 800268c:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6]="\0";
 800268e:	003b      	movs	r3, r7
 8002690:	2200      	movs	r2, #0
 8002692:	601a      	str	r2, [r3, #0]
 8002694:	2200      	movs	r2, #0
 8002696:	809a      	strh	r2, [r3, #4]

	// Read 6 BYTES of data starting from ACCEL_XOUT_H register

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 8002698:	4835      	ldr	r0, [pc, #212]	; (8002770 <MPU6050_Read_Accel+0xe8>)
 800269a:	23fa      	movs	r3, #250	; 0xfa
 800269c:	009b      	lsls	r3, r3, #2
 800269e:	9302      	str	r3, [sp, #8]
 80026a0:	2306      	movs	r3, #6
 80026a2:	9301      	str	r3, [sp, #4]
 80026a4:	003b      	movs	r3, r7
 80026a6:	9300      	str	r3, [sp, #0]
 80026a8:	2301      	movs	r3, #1
 80026aa:	223b      	movs	r2, #59	; 0x3b
 80026ac:	21d0      	movs	r1, #208	; 0xd0
 80026ae:	f003 fb15 	bl	8005cdc <HAL_I2C_Mem_Read>

	Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 80026b2:	003b      	movs	r3, r7
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	021b      	lsls	r3, r3, #8
 80026b8:	b21a      	sxth	r2, r3
 80026ba:	003b      	movs	r3, r7
 80026bc:	785b      	ldrb	r3, [r3, #1]
 80026be:	b21b      	sxth	r3, r3
 80026c0:	4313      	orrs	r3, r2
 80026c2:	b21a      	sxth	r2, r3
 80026c4:	4b2b      	ldr	r3, [pc, #172]	; (8002774 <MPU6050_Read_Accel+0xec>)
 80026c6:	801a      	strh	r2, [r3, #0]
	Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 80026c8:	003b      	movs	r3, r7
 80026ca:	789b      	ldrb	r3, [r3, #2]
 80026cc:	021b      	lsls	r3, r3, #8
 80026ce:	b21a      	sxth	r2, r3
 80026d0:	003b      	movs	r3, r7
 80026d2:	78db      	ldrb	r3, [r3, #3]
 80026d4:	b21b      	sxth	r3, r3
 80026d6:	4313      	orrs	r3, r2
 80026d8:	b21a      	sxth	r2, r3
 80026da:	4b27      	ldr	r3, [pc, #156]	; (8002778 <MPU6050_Read_Accel+0xf0>)
 80026dc:	801a      	strh	r2, [r3, #0]
	Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 80026de:	003b      	movs	r3, r7
 80026e0:	791b      	ldrb	r3, [r3, #4]
 80026e2:	021b      	lsls	r3, r3, #8
 80026e4:	b21a      	sxth	r2, r3
 80026e6:	003b      	movs	r3, r7
 80026e8:	795b      	ldrb	r3, [r3, #5]
 80026ea:	b21b      	sxth	r3, r3
 80026ec:	4313      	orrs	r3, r2
 80026ee:	b21a      	sxth	r2, r3
 80026f0:	4b22      	ldr	r3, [pc, #136]	; (800277c <MPU6050_Read_Accel+0xf4>)
 80026f2:	801a      	strh	r2, [r3, #0]
	/*** convert the RAW values into acceleration in 'g'
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 16384.0
	     for more details check ACCEL_CONFIG Register              ****/

	Ax = Accel_X_RAW/16384.0;
 80026f4:	4b1f      	ldr	r3, [pc, #124]	; (8002774 <MPU6050_Read_Accel+0xec>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	5e9b      	ldrsh	r3, [r3, r2]
 80026fa:	0018      	movs	r0, r3
 80026fc:	f7ff fd4e 	bl	800219c <__aeabi_i2d>
 8002700:	2200      	movs	r2, #0
 8002702:	4b1f      	ldr	r3, [pc, #124]	; (8002780 <MPU6050_Read_Accel+0xf8>)
 8002704:	f7fe faf6 	bl	8000cf4 <__aeabi_ddiv>
 8002708:	0002      	movs	r2, r0
 800270a:	000b      	movs	r3, r1
 800270c:	0010      	movs	r0, r2
 800270e:	0019      	movs	r1, r3
 8002710:	f7ff fde2 	bl	80022d8 <__aeabi_d2f>
 8002714:	1c02      	adds	r2, r0, #0
 8002716:	4b1b      	ldr	r3, [pc, #108]	; (8002784 <MPU6050_Read_Accel+0xfc>)
 8002718:	601a      	str	r2, [r3, #0]
	Ay = Accel_Y_RAW/16384.0;
 800271a:	4b17      	ldr	r3, [pc, #92]	; (8002778 <MPU6050_Read_Accel+0xf0>)
 800271c:	2200      	movs	r2, #0
 800271e:	5e9b      	ldrsh	r3, [r3, r2]
 8002720:	0018      	movs	r0, r3
 8002722:	f7ff fd3b 	bl	800219c <__aeabi_i2d>
 8002726:	2200      	movs	r2, #0
 8002728:	4b15      	ldr	r3, [pc, #84]	; (8002780 <MPU6050_Read_Accel+0xf8>)
 800272a:	f7fe fae3 	bl	8000cf4 <__aeabi_ddiv>
 800272e:	0002      	movs	r2, r0
 8002730:	000b      	movs	r3, r1
 8002732:	0010      	movs	r0, r2
 8002734:	0019      	movs	r1, r3
 8002736:	f7ff fdcf 	bl	80022d8 <__aeabi_d2f>
 800273a:	1c02      	adds	r2, r0, #0
 800273c:	4b12      	ldr	r3, [pc, #72]	; (8002788 <MPU6050_Read_Accel+0x100>)
 800273e:	601a      	str	r2, [r3, #0]
	Az = Accel_Z_RAW/16384.0;
 8002740:	4b0e      	ldr	r3, [pc, #56]	; (800277c <MPU6050_Read_Accel+0xf4>)
 8002742:	2200      	movs	r2, #0
 8002744:	5e9b      	ldrsh	r3, [r3, r2]
 8002746:	0018      	movs	r0, r3
 8002748:	f7ff fd28 	bl	800219c <__aeabi_i2d>
 800274c:	2200      	movs	r2, #0
 800274e:	4b0c      	ldr	r3, [pc, #48]	; (8002780 <MPU6050_Read_Accel+0xf8>)
 8002750:	f7fe fad0 	bl	8000cf4 <__aeabi_ddiv>
 8002754:	0002      	movs	r2, r0
 8002756:	000b      	movs	r3, r1
 8002758:	0010      	movs	r0, r2
 800275a:	0019      	movs	r1, r3
 800275c:	f7ff fdbc 	bl	80022d8 <__aeabi_d2f>
 8002760:	1c02      	adds	r2, r0, #0
 8002762:	4b0a      	ldr	r3, [pc, #40]	; (800278c <MPU6050_Read_Accel+0x104>)
 8002764:	601a      	str	r2, [r3, #0]
}
 8002766:	46c0      	nop			; (mov r8, r8)
 8002768:	46bd      	mov	sp, r7
 800276a:	b002      	add	sp, #8
 800276c:	bd80      	pop	{r7, pc}
 800276e:	46c0      	nop			; (mov r8, r8)
 8002770:	200002c0 	.word	0x200002c0
 8002774:	200004b2 	.word	0x200004b2
 8002778:	200004b4 	.word	0x200004b4
 800277c:	200004b6 	.word	0x200004b6
 8002780:	40d00000 	.word	0x40d00000
 8002784:	200004c0 	.word	0x200004c0
 8002788:	200004c4 	.word	0x200004c4
 800278c:	200004c8 	.word	0x200004c8

08002790 <MPU6050_Read_Gyro>:


void MPU6050_Read_Gyro (void)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b086      	sub	sp, #24
 8002794:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6]="\0";
 8002796:	003b      	movs	r3, r7
 8002798:	2200      	movs	r2, #0
 800279a:	601a      	str	r2, [r3, #0]
 800279c:	2200      	movs	r2, #0
 800279e:	809a      	strh	r2, [r3, #4]

	// Read 6 BYTES of data starting from GYRO_XOUT_H register

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 80027a0:	4835      	ldr	r0, [pc, #212]	; (8002878 <MPU6050_Read_Gyro+0xe8>)
 80027a2:	23fa      	movs	r3, #250	; 0xfa
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	9302      	str	r3, [sp, #8]
 80027a8:	2306      	movs	r3, #6
 80027aa:	9301      	str	r3, [sp, #4]
 80027ac:	003b      	movs	r3, r7
 80027ae:	9300      	str	r3, [sp, #0]
 80027b0:	2301      	movs	r3, #1
 80027b2:	2243      	movs	r2, #67	; 0x43
 80027b4:	21d0      	movs	r1, #208	; 0xd0
 80027b6:	f003 fa91 	bl	8005cdc <HAL_I2C_Mem_Read>

	Gyro_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 80027ba:	003b      	movs	r3, r7
 80027bc:	781b      	ldrb	r3, [r3, #0]
 80027be:	021b      	lsls	r3, r3, #8
 80027c0:	b21a      	sxth	r2, r3
 80027c2:	003b      	movs	r3, r7
 80027c4:	785b      	ldrb	r3, [r3, #1]
 80027c6:	b21b      	sxth	r3, r3
 80027c8:	4313      	orrs	r3, r2
 80027ca:	b21a      	sxth	r2, r3
 80027cc:	4b2b      	ldr	r3, [pc, #172]	; (800287c <MPU6050_Read_Gyro+0xec>)
 80027ce:	801a      	strh	r2, [r3, #0]
	Gyro_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 80027d0:	003b      	movs	r3, r7
 80027d2:	789b      	ldrb	r3, [r3, #2]
 80027d4:	021b      	lsls	r3, r3, #8
 80027d6:	b21a      	sxth	r2, r3
 80027d8:	003b      	movs	r3, r7
 80027da:	78db      	ldrb	r3, [r3, #3]
 80027dc:	b21b      	sxth	r3, r3
 80027de:	4313      	orrs	r3, r2
 80027e0:	b21a      	sxth	r2, r3
 80027e2:	4b27      	ldr	r3, [pc, #156]	; (8002880 <MPU6050_Read_Gyro+0xf0>)
 80027e4:	801a      	strh	r2, [r3, #0]
	Gyro_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 80027e6:	003b      	movs	r3, r7
 80027e8:	791b      	ldrb	r3, [r3, #4]
 80027ea:	021b      	lsls	r3, r3, #8
 80027ec:	b21a      	sxth	r2, r3
 80027ee:	003b      	movs	r3, r7
 80027f0:	795b      	ldrb	r3, [r3, #5]
 80027f2:	b21b      	sxth	r3, r3
 80027f4:	4313      	orrs	r3, r2
 80027f6:	b21a      	sxth	r2, r3
 80027f8:	4b22      	ldr	r3, [pc, #136]	; (8002884 <MPU6050_Read_Gyro+0xf4>)
 80027fa:	801a      	strh	r2, [r3, #0]
	/*** convert the RAW values into dps (°/s)
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 131.0
	     for more details check GYRO_CONFIG Register              ****/

	Gx = Gyro_X_RAW/131.0;
 80027fc:	4b1f      	ldr	r3, [pc, #124]	; (800287c <MPU6050_Read_Gyro+0xec>)
 80027fe:	2200      	movs	r2, #0
 8002800:	5e9b      	ldrsh	r3, [r3, r2]
 8002802:	0018      	movs	r0, r3
 8002804:	f7ff fcca 	bl	800219c <__aeabi_i2d>
 8002808:	2200      	movs	r2, #0
 800280a:	4b1f      	ldr	r3, [pc, #124]	; (8002888 <MPU6050_Read_Gyro+0xf8>)
 800280c:	f7fe fa72 	bl	8000cf4 <__aeabi_ddiv>
 8002810:	0002      	movs	r2, r0
 8002812:	000b      	movs	r3, r1
 8002814:	0010      	movs	r0, r2
 8002816:	0019      	movs	r1, r3
 8002818:	f7ff fd5e 	bl	80022d8 <__aeabi_d2f>
 800281c:	1c02      	adds	r2, r0, #0
 800281e:	4b1b      	ldr	r3, [pc, #108]	; (800288c <MPU6050_Read_Gyro+0xfc>)
 8002820:	601a      	str	r2, [r3, #0]
	Gy = Gyro_Y_RAW/131.0;
 8002822:	4b17      	ldr	r3, [pc, #92]	; (8002880 <MPU6050_Read_Gyro+0xf0>)
 8002824:	2200      	movs	r2, #0
 8002826:	5e9b      	ldrsh	r3, [r3, r2]
 8002828:	0018      	movs	r0, r3
 800282a:	f7ff fcb7 	bl	800219c <__aeabi_i2d>
 800282e:	2200      	movs	r2, #0
 8002830:	4b15      	ldr	r3, [pc, #84]	; (8002888 <MPU6050_Read_Gyro+0xf8>)
 8002832:	f7fe fa5f 	bl	8000cf4 <__aeabi_ddiv>
 8002836:	0002      	movs	r2, r0
 8002838:	000b      	movs	r3, r1
 800283a:	0010      	movs	r0, r2
 800283c:	0019      	movs	r1, r3
 800283e:	f7ff fd4b 	bl	80022d8 <__aeabi_d2f>
 8002842:	1c02      	adds	r2, r0, #0
 8002844:	4b12      	ldr	r3, [pc, #72]	; (8002890 <MPU6050_Read_Gyro+0x100>)
 8002846:	601a      	str	r2, [r3, #0]
	Gz = Gyro_Z_RAW/131.0;
 8002848:	4b0e      	ldr	r3, [pc, #56]	; (8002884 <MPU6050_Read_Gyro+0xf4>)
 800284a:	2200      	movs	r2, #0
 800284c:	5e9b      	ldrsh	r3, [r3, r2]
 800284e:	0018      	movs	r0, r3
 8002850:	f7ff fca4 	bl	800219c <__aeabi_i2d>
 8002854:	2200      	movs	r2, #0
 8002856:	4b0c      	ldr	r3, [pc, #48]	; (8002888 <MPU6050_Read_Gyro+0xf8>)
 8002858:	f7fe fa4c 	bl	8000cf4 <__aeabi_ddiv>
 800285c:	0002      	movs	r2, r0
 800285e:	000b      	movs	r3, r1
 8002860:	0010      	movs	r0, r2
 8002862:	0019      	movs	r1, r3
 8002864:	f7ff fd38 	bl	80022d8 <__aeabi_d2f>
 8002868:	1c02      	adds	r2, r0, #0
 800286a:	4b0a      	ldr	r3, [pc, #40]	; (8002894 <MPU6050_Read_Gyro+0x104>)
 800286c:	601a      	str	r2, [r3, #0]
}
 800286e:	46c0      	nop			; (mov r8, r8)
 8002870:	46bd      	mov	sp, r7
 8002872:	b002      	add	sp, #8
 8002874:	bd80      	pop	{r7, pc}
 8002876:	46c0      	nop			; (mov r8, r8)
 8002878:	200002c0 	.word	0x200002c0
 800287c:	200004b8 	.word	0x200004b8
 8002880:	200004ba 	.word	0x200004ba
 8002884:	200004bc 	.word	0x200004bc
 8002888:	40606000 	.word	0x40606000
 800288c:	200004cc 	.word	0x200004cc
 8002890:	200004d0 	.word	0x200004d0
 8002894:	200004d4 	.word	0x200004d4

08002898 <temperatura>:



void temperatura(){
 8002898:	b580      	push	{r7, lr}
 800289a:	b082      	sub	sp, #8
 800289c:	af02      	add	r7, sp, #8
buf[0] = REG_TEMP;
 800289e:	2200      	movs	r2, #0
 80028a0:	4b2b      	ldr	r3, [pc, #172]	; (8002950 <temperatura+0xb8>)
 80028a2:	701a      	strb	r2, [r3, #0]
ret = HAL_I2C_Master_Transmit(&hi2c1, TMP102_ADDR, buf, 1, HAL_MAX_DELAY);
 80028a4:	2390      	movs	r3, #144	; 0x90
 80028a6:	b299      	uxth	r1, r3
 80028a8:	4a29      	ldr	r2, [pc, #164]	; (8002950 <temperatura+0xb8>)
 80028aa:	482a      	ldr	r0, [pc, #168]	; (8002954 <temperatura+0xbc>)
 80028ac:	2301      	movs	r3, #1
 80028ae:	425b      	negs	r3, r3
 80028b0:	9300      	str	r3, [sp, #0]
 80028b2:	2301      	movs	r3, #1
 80028b4:	f003 f802 	bl	80058bc <HAL_I2C_Master_Transmit>
 80028b8:	0003      	movs	r3, r0
 80028ba:	001a      	movs	r2, r3
 80028bc:	4b26      	ldr	r3, [pc, #152]	; (8002958 <temperatura+0xc0>)
 80028be:	701a      	strb	r2, [r3, #0]
ret = HAL_I2C_Master_Receive(&hi2c1, TMP102_ADDR, buf, 2, HAL_MAX_DELAY);
 80028c0:	2390      	movs	r3, #144	; 0x90
 80028c2:	b299      	uxth	r1, r3
 80028c4:	4a22      	ldr	r2, [pc, #136]	; (8002950 <temperatura+0xb8>)
 80028c6:	4823      	ldr	r0, [pc, #140]	; (8002954 <temperatura+0xbc>)
 80028c8:	2301      	movs	r3, #1
 80028ca:	425b      	negs	r3, r3
 80028cc:	9300      	str	r3, [sp, #0]
 80028ce:	2302      	movs	r3, #2
 80028d0:	f003 f8fc 	bl	8005acc <HAL_I2C_Master_Receive>
 80028d4:	0003      	movs	r3, r0
 80028d6:	001a      	movs	r2, r3
 80028d8:	4b1f      	ldr	r3, [pc, #124]	; (8002958 <temperatura+0xc0>)
 80028da:	701a      	strb	r2, [r3, #0]
val = ((int16_t)buf[0] << 4) | (buf[1] >> 4);
 80028dc:	4b1c      	ldr	r3, [pc, #112]	; (8002950 <temperatura+0xb8>)
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	011b      	lsls	r3, r3, #4
 80028e2:	b21a      	sxth	r2, r3
 80028e4:	4b1a      	ldr	r3, [pc, #104]	; (8002950 <temperatura+0xb8>)
 80028e6:	785b      	ldrb	r3, [r3, #1]
 80028e8:	091b      	lsrs	r3, r3, #4
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	b21b      	sxth	r3, r3
 80028ee:	4313      	orrs	r3, r2
 80028f0:	b21a      	sxth	r2, r3
 80028f2:	4b1a      	ldr	r3, [pc, #104]	; (800295c <temperatura+0xc4>)
 80028f4:	801a      	strh	r2, [r3, #0]

if ( val > 0x7FF ) {  val |= 0xF000; }
 80028f6:	4b19      	ldr	r3, [pc, #100]	; (800295c <temperatura+0xc4>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	5e9a      	ldrsh	r2, [r3, r2]
 80028fc:	2380      	movs	r3, #128	; 0x80
 80028fe:	011b      	lsls	r3, r3, #4
 8002900:	429a      	cmp	r2, r3
 8002902:	db07      	blt.n	8002914 <temperatura+0x7c>
 8002904:	4b15      	ldr	r3, [pc, #84]	; (800295c <temperatura+0xc4>)
 8002906:	2200      	movs	r2, #0
 8002908:	5e9b      	ldrsh	r3, [r3, r2]
 800290a:	4a15      	ldr	r2, [pc, #84]	; (8002960 <temperatura+0xc8>)
 800290c:	4313      	orrs	r3, r2
 800290e:	b21a      	sxth	r2, r3
 8002910:	4b12      	ldr	r3, [pc, #72]	; (800295c <temperatura+0xc4>)
 8002912:	801a      	strh	r2, [r3, #0]

// Convertir a (Celsius)
temp_c = val * 0.0625;
 8002914:	4b11      	ldr	r3, [pc, #68]	; (800295c <temperatura+0xc4>)
 8002916:	2200      	movs	r2, #0
 8002918:	5e9b      	ldrsh	r3, [r3, r2]
 800291a:	0018      	movs	r0, r3
 800291c:	f7ff fc3e 	bl	800219c <__aeabi_i2d>
 8002920:	2200      	movs	r2, #0
 8002922:	4b10      	ldr	r3, [pc, #64]	; (8002964 <temperatura+0xcc>)
 8002924:	f7fe fde8 	bl	80014f8 <__aeabi_dmul>
 8002928:	0002      	movs	r2, r0
 800292a:	000b      	movs	r3, r1
 800292c:	0010      	movs	r0, r2
 800292e:	0019      	movs	r1, r3
 8002930:	f7ff fbfe 	bl	8002130 <__aeabi_d2iz>
 8002934:	0002      	movs	r2, r0
 8002936:	4b0c      	ldr	r3, [pc, #48]	; (8002968 <temperatura+0xd0>)
 8002938:	601a      	str	r2, [r3, #0]
sprintf(temp,"%i",temp_c);
 800293a:	4b0b      	ldr	r3, [pc, #44]	; (8002968 <temperatura+0xd0>)
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	490b      	ldr	r1, [pc, #44]	; (800296c <temperatura+0xd4>)
 8002940:	4b0b      	ldr	r3, [pc, #44]	; (8002970 <temperatura+0xd8>)
 8002942:	0018      	movs	r0, r3
 8002944:	f007 fef8 	bl	800a738 <siprintf>
}
 8002948:	46c0      	nop			; (mov r8, r8)
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
 800294e:	46c0      	nop			; (mov r8, r8)
 8002950:	20000494 	.word	0x20000494
 8002954:	200002c0 	.word	0x200002c0
 8002958:	200004be 	.word	0x200004be
 800295c:	200004a0 	.word	0x200004a0
 8002960:	fffff000 	.word	0xfffff000
 8002964:	3fb00000 	.word	0x3fb00000
 8002968:	200004a4 	.word	0x200004a4
 800296c:	0800cdf0 	.word	0x0800cdf0
 8002970:	200004a8 	.word	0x200004a8

08002974 <transmit>:
void transmit(char *ID)
{
 8002974:	b590      	push	{r4, r7, lr}
 8002976:	b093      	sub	sp, #76	; 0x4c
 8002978:	af02      	add	r7, sp, #8
 800297a:	6078      	str	r0, [r7, #4]
	char mensaje1[50]="\0";
 800297c:	240c      	movs	r4, #12
 800297e:	193b      	adds	r3, r7, r4
 8002980:	2200      	movs	r2, #0
 8002982:	601a      	str	r2, [r3, #0]
 8002984:	3304      	adds	r3, #4
 8002986:	222e      	movs	r2, #46	; 0x2e
 8002988:	2100      	movs	r1, #0
 800298a:	0018      	movs	r0, r3
 800298c:	f007 fa5e 	bl	8009e4c <memset>
	if(strstr(ID,"Temp"))
 8002990:	4a40      	ldr	r2, [pc, #256]	; (8002a94 <transmit+0x120>)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	0011      	movs	r1, r2
 8002996:	0018      	movs	r0, r3
 8002998:	f007 fefb 	bl	800a792 <strstr>
 800299c:	1e03      	subs	r3, r0, #0
 800299e:	d005      	beq.n	80029ac <transmit+0x38>
		{
		sprintf(mensaje1,"Temp.txt=\"%s\"",temp);
 80029a0:	4a3d      	ldr	r2, [pc, #244]	; (8002a98 <transmit+0x124>)
 80029a2:	493e      	ldr	r1, [pc, #248]	; (8002a9c <transmit+0x128>)
 80029a4:	193b      	adds	r3, r7, r4
 80029a6:	0018      	movs	r0, r3
 80029a8:	f007 fec6 	bl	800a738 <siprintf>
		}
	if(strstr(ID,"GX"))
 80029ac:	4a3c      	ldr	r2, [pc, #240]	; (8002aa0 <transmit+0x12c>)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	0011      	movs	r1, r2
 80029b2:	0018      	movs	r0, r3
 80029b4:	f007 feed 	bl	800a792 <strstr>
 80029b8:	1e03      	subs	r3, r0, #0
 80029ba:	d00b      	beq.n	80029d4 <transmit+0x60>
		{
	      sprintf(mensaje1,"GX.txt=\"%.4f\"",Gx);
 80029bc:	4b39      	ldr	r3, [pc, #228]	; (8002aa4 <transmit+0x130>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	1c18      	adds	r0, r3, #0
 80029c2:	f7ff fc41 	bl	8002248 <__aeabi_f2d>
 80029c6:	0002      	movs	r2, r0
 80029c8:	000b      	movs	r3, r1
 80029ca:	4937      	ldr	r1, [pc, #220]	; (8002aa8 <transmit+0x134>)
 80029cc:	200c      	movs	r0, #12
 80029ce:	1838      	adds	r0, r7, r0
 80029d0:	f007 feb2 	bl	800a738 <siprintf>
		}
	if(strstr(ID,"GY"))
 80029d4:	4a35      	ldr	r2, [pc, #212]	; (8002aac <transmit+0x138>)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	0011      	movs	r1, r2
 80029da:	0018      	movs	r0, r3
 80029dc:	f007 fed9 	bl	800a792 <strstr>
 80029e0:	1e03      	subs	r3, r0, #0
 80029e2:	d00b      	beq.n	80029fc <transmit+0x88>
		{
		sprintf(mensaje1,"GY.txt=\"%.4f\"",Gy);
 80029e4:	4b32      	ldr	r3, [pc, #200]	; (8002ab0 <transmit+0x13c>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	1c18      	adds	r0, r3, #0
 80029ea:	f7ff fc2d 	bl	8002248 <__aeabi_f2d>
 80029ee:	0002      	movs	r2, r0
 80029f0:	000b      	movs	r3, r1
 80029f2:	4930      	ldr	r1, [pc, #192]	; (8002ab4 <transmit+0x140>)
 80029f4:	200c      	movs	r0, #12
 80029f6:	1838      	adds	r0, r7, r0
 80029f8:	f007 fe9e 	bl	800a738 <siprintf>
		}
	if(strstr(ID,"Anemo"))
 80029fc:	4a2e      	ldr	r2, [pc, #184]	; (8002ab8 <transmit+0x144>)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	0011      	movs	r1, r2
 8002a02:	0018      	movs	r0, r3
 8002a04:	f007 fec5 	bl	800a792 <strstr>
 8002a08:	1e03      	subs	r3, r0, #0
 8002a0a:	d008      	beq.n	8002a1e <transmit+0xaa>
		{

   	sprintf(mensaje1,"Anemo.txt=\"%i\"",velocidad*2);
 8002a0c:	4b2b      	ldr	r3, [pc, #172]	; (8002abc <transmit+0x148>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	005a      	lsls	r2, r3, #1
 8002a12:	492b      	ldr	r1, [pc, #172]	; (8002ac0 <transmit+0x14c>)
 8002a14:	230c      	movs	r3, #12
 8002a16:	18fb      	adds	r3, r7, r3
 8002a18:	0018      	movs	r0, r3
 8002a1a:	f007 fe8d 	bl	800a738 <siprintf>


		}
	if(strstr(ID,"Hora"))
 8002a1e:	4a29      	ldr	r2, [pc, #164]	; (8002ac4 <transmit+0x150>)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	0011      	movs	r1, r2
 8002a24:	0018      	movs	r0, r3
 8002a26:	f007 feb4 	bl	800a792 <strstr>
 8002a2a:	1e03      	subs	r3, r0, #0
 8002a2c:	d00c      	beq.n	8002a48 <transmit+0xd4>
	{

		sprintf(mensaje1,"Time.txt=\"%i:%i:%i\"",actual.Hour,actual.Minutes,actual.Second);
 8002a2e:	4b26      	ldr	r3, [pc, #152]	; (8002ac8 <transmit+0x154>)
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	4b25      	ldr	r3, [pc, #148]	; (8002ac8 <transmit+0x154>)
 8002a34:	685c      	ldr	r4, [r3, #4]
 8002a36:	4b24      	ldr	r3, [pc, #144]	; (8002ac8 <transmit+0x154>)
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	4924      	ldr	r1, [pc, #144]	; (8002acc <transmit+0x158>)
 8002a3c:	200c      	movs	r0, #12
 8002a3e:	1838      	adds	r0, r7, r0
 8002a40:	9300      	str	r3, [sp, #0]
 8002a42:	0023      	movs	r3, r4
 8002a44:	f007 fe78 	bl	800a738 <siprintf>
	}
	if(strstr(ID,MENU))
 8002a48:	4a21      	ldr	r2, [pc, #132]	; (8002ad0 <transmit+0x15c>)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	0011      	movs	r1, r2
 8002a4e:	0018      	movs	r0, r3
 8002a50:	f007 fe9f 	bl	800a792 <strstr>
 8002a54:	1e03      	subs	r3, r0, #0
 8002a56:	d006      	beq.n	8002a66 <transmit+0xf2>
	{
		sprintf(mensaje1,"%s",MENU);
 8002a58:	4a1d      	ldr	r2, [pc, #116]	; (8002ad0 <transmit+0x15c>)
 8002a5a:	491e      	ldr	r1, [pc, #120]	; (8002ad4 <transmit+0x160>)
 8002a5c:	230c      	movs	r3, #12
 8002a5e:	18fb      	adds	r3, r7, r3
 8002a60:	0018      	movs	r0, r3
 8002a62:	f007 fe69 	bl	800a738 <siprintf>
	}


	strcat(mensaje1,(char*)final);
 8002a66:	4a1c      	ldr	r2, [pc, #112]	; (8002ad8 <transmit+0x164>)
 8002a68:	240c      	movs	r4, #12
 8002a6a:	193b      	adds	r3, r7, r4
 8002a6c:	0011      	movs	r1, r2
 8002a6e:	0018      	movs	r0, r3
 8002a70:	f007 fe82 	bl	800a778 <strcat>
	HAL_UART_Transmit(&huart1, (uint8_t*)mensaje1,strlen(mensaje1),HAL_MAX_DELAY);
 8002a74:	193b      	adds	r3, r7, r4
 8002a76:	0018      	movs	r0, r3
 8002a78:	f7fd fb44 	bl	8000104 <strlen>
 8002a7c:	0003      	movs	r3, r0
 8002a7e:	b29a      	uxth	r2, r3
 8002a80:	2301      	movs	r3, #1
 8002a82:	425b      	negs	r3, r3
 8002a84:	1939      	adds	r1, r7, r4
 8002a86:	4815      	ldr	r0, [pc, #84]	; (8002adc <transmit+0x168>)
 8002a88:	f005 f98e 	bl	8007da8 <HAL_UART_Transmit>
}
 8002a8c:	46c0      	nop			; (mov r8, r8)
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	b011      	add	sp, #68	; 0x44
 8002a92:	bd90      	pop	{r4, r7, pc}
 8002a94:	0800cdf4 	.word	0x0800cdf4
 8002a98:	200004a8 	.word	0x200004a8
 8002a9c:	0800cdfc 	.word	0x0800cdfc
 8002aa0:	0800ce0c 	.word	0x0800ce0c
 8002aa4:	200004cc 	.word	0x200004cc
 8002aa8:	0800ce10 	.word	0x0800ce10
 8002aac:	0800ce20 	.word	0x0800ce20
 8002ab0:	200004d0 	.word	0x200004d0
 8002ab4:	0800ce24 	.word	0x0800ce24
 8002ab8:	0800ce34 	.word	0x0800ce34
 8002abc:	200005b0 	.word	0x200005b0
 8002ac0:	0800ce3c 	.word	0x0800ce3c
 8002ac4:	0800ce4c 	.word	0x0800ce4c
 8002ac8:	200005b8 	.word	0x200005b8
 8002acc:	0800ce54 	.word	0x0800ce54
 8002ad0:	0800ce68 	.word	0x0800ce68
 8002ad4:	0800ce70 	.word	0x0800ce70
 8002ad8:	20000000 	.word	0x20000000
 8002adc:	20000358 	.word	0x20000358

08002ae0 <Recive>:
void Recive(char *string)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b082      	sub	sp, #8
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
	if(strstr(string,"ARRIBA"))
 8002ae8:	4a43      	ldr	r2, [pc, #268]	; (8002bf8 <Recive+0x118>)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	0011      	movs	r1, r2
 8002aee:	0018      	movs	r0, r3
 8002af0:	f007 fe4f 	bl	800a792 <strstr>
 8002af4:	1e03      	subs	r3, r0, #0
 8002af6:	d002      	beq.n	8002afe <Recive+0x1e>
	{
		Move=ARRIBA;
 8002af8:	4b40      	ldr	r3, [pc, #256]	; (8002bfc <Recive+0x11c>)
 8002afa:	2200      	movs	r2, #0
 8002afc:	601a      	str	r2, [r3, #0]
	}
	if(strstr(string,"ABAJO"))
 8002afe:	4a40      	ldr	r2, [pc, #256]	; (8002c00 <Recive+0x120>)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	0011      	movs	r1, r2
 8002b04:	0018      	movs	r0, r3
 8002b06:	f007 fe44 	bl	800a792 <strstr>
 8002b0a:	1e03      	subs	r3, r0, #0
 8002b0c:	d002      	beq.n	8002b14 <Recive+0x34>
	{
		Move=ABAJO;
 8002b0e:	4b3b      	ldr	r3, [pc, #236]	; (8002bfc <Recive+0x11c>)
 8002b10:	2201      	movs	r2, #1
 8002b12:	601a      	str	r2, [r3, #0]
	}
	if(strstr(string,"IZQUIERDA"))
 8002b14:	4a3b      	ldr	r2, [pc, #236]	; (8002c04 <Recive+0x124>)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	0011      	movs	r1, r2
 8002b1a:	0018      	movs	r0, r3
 8002b1c:	f007 fe39 	bl	800a792 <strstr>
 8002b20:	1e03      	subs	r3, r0, #0
 8002b22:	d002      	beq.n	8002b2a <Recive+0x4a>
	{
		Move=IZQUIERDA;
 8002b24:	4b35      	ldr	r3, [pc, #212]	; (8002bfc <Recive+0x11c>)
 8002b26:	2202      	movs	r2, #2
 8002b28:	601a      	str	r2, [r3, #0]
	}
	if(strstr(string,"DERECHA"))
 8002b2a:	4a37      	ldr	r2, [pc, #220]	; (8002c08 <Recive+0x128>)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	0011      	movs	r1, r2
 8002b30:	0018      	movs	r0, r3
 8002b32:	f007 fe2e 	bl	800a792 <strstr>
 8002b36:	1e03      	subs	r3, r0, #0
 8002b38:	d002      	beq.n	8002b40 <Recive+0x60>
	{
		Move=DERECHA;
 8002b3a:	4b30      	ldr	r3, [pc, #192]	; (8002bfc <Recive+0x11c>)
 8002b3c:	2203      	movs	r2, #3
 8002b3e:	601a      	str	r2, [r3, #0]
	}
	if(strstr(string,"STOP"))
 8002b40:	4a32      	ldr	r2, [pc, #200]	; (8002c0c <Recive+0x12c>)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	0011      	movs	r1, r2
 8002b46:	0018      	movs	r0, r3
 8002b48:	f007 fe23 	bl	800a792 <strstr>
 8002b4c:	1e03      	subs	r3, r0, #0
 8002b4e:	d002      	beq.n	8002b56 <Recive+0x76>
	{
		Move=STOP;
 8002b50:	4b2a      	ldr	r3, [pc, #168]	; (8002bfc <Recive+0x11c>)
 8002b52:	2204      	movs	r2, #4
 8002b54:	601a      	str	r2, [r3, #0]
	}
	if(strstr(string,"STOP1"))
 8002b56:	4a2e      	ldr	r2, [pc, #184]	; (8002c10 <Recive+0x130>)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	0011      	movs	r1, r2
 8002b5c:	0018      	movs	r0, r3
 8002b5e:	f007 fe18 	bl	800a792 <strstr>
 8002b62:	1e03      	subs	r3, r0, #0
 8002b64:	d018      	beq.n	8002b98 <Recive+0xb8>
	{
		if(!bit_parada)
 8002b66:	4b2b      	ldr	r3, [pc, #172]	; (8002c14 <Recive+0x134>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d106      	bne.n	8002b7c <Recive+0x9c>
		{
			Move=STOP;
 8002b6e:	4b23      	ldr	r3, [pc, #140]	; (8002bfc <Recive+0x11c>)
 8002b70:	2204      	movs	r2, #4
 8002b72:	601a      	str	r2, [r3, #0]
			Mode=MANUAL;
 8002b74:	4b28      	ldr	r3, [pc, #160]	; (8002c18 <Recive+0x138>)
 8002b76:	2206      	movs	r2, #6
 8002b78:	601a      	str	r2, [r3, #0]
 8002b7a:	e005      	b.n	8002b88 <Recive+0xa8>
		}
		else
		{
			Move=ABSOLUTO;
 8002b7c:	4b1f      	ldr	r3, [pc, #124]	; (8002bfc <Recive+0x11c>)
 8002b7e:	2208      	movs	r2, #8
 8002b80:	601a      	str	r2, [r3, #0]
			Mode=AUTO;
 8002b82:	4b25      	ldr	r3, [pc, #148]	; (8002c18 <Recive+0x138>)
 8002b84:	2205      	movs	r2, #5
 8002b86:	601a      	str	r2, [r3, #0]

		}
		bit_parada=!bit_parada;
 8002b88:	4b22      	ldr	r3, [pc, #136]	; (8002c14 <Recive+0x134>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	425a      	negs	r2, r3
 8002b8e:	4153      	adcs	r3, r2
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	001a      	movs	r2, r3
 8002b94:	4b1f      	ldr	r3, [pc, #124]	; (8002c14 <Recive+0x134>)
 8002b96:	601a      	str	r2, [r3, #0]
	}
	if(strstr(string,"AUTO"))
 8002b98:	4a20      	ldr	r2, [pc, #128]	; (8002c1c <Recive+0x13c>)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	0011      	movs	r1, r2
 8002b9e:	0018      	movs	r0, r3
 8002ba0:	f007 fdf7 	bl	800a792 <strstr>
 8002ba4:	1e03      	subs	r3, r0, #0
 8002ba6:	d002      	beq.n	8002bae <Recive+0xce>
	{
	    Mode=AUTO;
 8002ba8:	4b1b      	ldr	r3, [pc, #108]	; (8002c18 <Recive+0x138>)
 8002baa:	2205      	movs	r2, #5
 8002bac:	601a      	str	r2, [r3, #0]
	}
	if(strstr(string,"MANUAL"))
 8002bae:	4a1c      	ldr	r2, [pc, #112]	; (8002c20 <Recive+0x140>)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	0011      	movs	r1, r2
 8002bb4:	0018      	movs	r0, r3
 8002bb6:	f007 fdec 	bl	800a792 <strstr>
 8002bba:	1e03      	subs	r3, r0, #0
 8002bbc:	d002      	beq.n	8002bc4 <Recive+0xe4>
	{
		Mode=MANUAL;
 8002bbe:	4b16      	ldr	r3, [pc, #88]	; (8002c18 <Recive+0x138>)
 8002bc0:	2206      	movs	r2, #6
 8002bc2:	601a      	str	r2, [r3, #0]
	}
	if(strstr(string,"VERTICAL"))
 8002bc4:	4a17      	ldr	r2, [pc, #92]	; (8002c24 <Recive+0x144>)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	0011      	movs	r1, r2
 8002bca:	0018      	movs	r0, r3
 8002bcc:	f007 fde1 	bl	800a792 <strstr>
 8002bd0:	1e03      	subs	r3, r0, #0
 8002bd2:	d002      	beq.n	8002bda <Recive+0xfa>
	{
		Move=VERTICAL;
 8002bd4:	4b09      	ldr	r3, [pc, #36]	; (8002bfc <Recive+0x11c>)
 8002bd6:	2207      	movs	r2, #7
 8002bd8:	601a      	str	r2, [r3, #0]
	}
	if(strstr(string,"ABSOLUTO"))
 8002bda:	4a13      	ldr	r2, [pc, #76]	; (8002c28 <Recive+0x148>)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	0011      	movs	r1, r2
 8002be0:	0018      	movs	r0, r3
 8002be2:	f007 fdd6 	bl	800a792 <strstr>
 8002be6:	1e03      	subs	r3, r0, #0
 8002be8:	d002      	beq.n	8002bf0 <Recive+0x110>
	{
		Move=ABSOLUTO;
 8002bea:	4b04      	ldr	r3, [pc, #16]	; (8002bfc <Recive+0x11c>)
 8002bec:	2208      	movs	r2, #8
 8002bee:	601a      	str	r2, [r3, #0]

	}
}
 8002bf0:	46c0      	nop			; (mov r8, r8)
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	b002      	add	sp, #8
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	0800ce74 	.word	0x0800ce74
 8002bfc:	2000048c 	.word	0x2000048c
 8002c00:	0800ce7c 	.word	0x0800ce7c
 8002c04:	0800ce84 	.word	0x0800ce84
 8002c08:	0800ce90 	.word	0x0800ce90
 8002c0c:	0800ce98 	.word	0x0800ce98
 8002c10:	0800cea0 	.word	0x0800cea0
 8002c14:	200005b4 	.word	0x200005b4
 8002c18:	20000490 	.word	0x20000490
 8002c1c:	0800cea8 	.word	0x0800cea8
 8002c20:	0800ceb0 	.word	0x0800ceb0
 8002c24:	0800ceb8 	.word	0x0800ceb8
 8002c28:	0800cec4 	.word	0x0800cec4

08002c2c <Movimiento>:
void Movimiento(int move)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b082      	sub	sp, #8
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
	if(move==ABAJO)//GIRAR HACIA LA ARRIBA
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d10d      	bne.n	8002c56 <Movimiento+0x2a>
	{
		HAL_GPIO_WritePin(EJEY_GPIO_Port,EJEY_Pin,True);
 8002c3a:	2380      	movs	r3, #128	; 0x80
 8002c3c:	00d9      	lsls	r1, r3, #3
 8002c3e:	23a0      	movs	r3, #160	; 0xa0
 8002c40:	05db      	lsls	r3, r3, #23
 8002c42:	2200      	movs	r2, #0
 8002c44:	0018      	movs	r0, r3
 8002c46:	f002 fd51 	bl	80056ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EJE_Y_GPIO_Port,EJE_Y_Pin,False);
 8002c4a:	4b3b      	ldr	r3, [pc, #236]	; (8002d38 <Movimiento+0x10c>)
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	2108      	movs	r1, #8
 8002c50:	0018      	movs	r0, r3
 8002c52:	f002 fd4b 	bl	80056ec <HAL_GPIO_WritePin>
	}
	if(move==ARRIBA)//GIRAR HACIA LA ABAJO
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d10d      	bne.n	8002c78 <Movimiento+0x4c>
	{
		HAL_GPIO_WritePin(EJEY_GPIO_Port,EJEY_Pin,False);
 8002c5c:	2380      	movs	r3, #128	; 0x80
 8002c5e:	00d9      	lsls	r1, r3, #3
 8002c60:	23a0      	movs	r3, #160	; 0xa0
 8002c62:	05db      	lsls	r3, r3, #23
 8002c64:	2201      	movs	r2, #1
 8002c66:	0018      	movs	r0, r3
 8002c68:	f002 fd40 	bl	80056ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EJE_Y_GPIO_Port,EJE_Y_Pin,True);
 8002c6c:	4b32      	ldr	r3, [pc, #200]	; (8002d38 <Movimiento+0x10c>)
 8002c6e:	2200      	movs	r2, #0
 8002c70:	2108      	movs	r1, #8
 8002c72:	0018      	movs	r0, r3
 8002c74:	f002 fd3a 	bl	80056ec <HAL_GPIO_WritePin>
	}
	if(move==DERECHA)//GIRAR HACIA LA DERECHA
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2b03      	cmp	r3, #3
 8002c7c:	d10b      	bne.n	8002c96 <Movimiento+0x6a>
	{
		HAL_GPIO_WritePin(EJEX_GPIO_Port,EJEX_Pin,True);
 8002c7e:	4b2e      	ldr	r3, [pc, #184]	; (8002d38 <Movimiento+0x10c>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	2110      	movs	r1, #16
 8002c84:	0018      	movs	r0, r3
 8002c86:	f002 fd31 	bl	80056ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EJE_X_GPIO_Port,EJE_X_Pin,False);
 8002c8a:	4b2b      	ldr	r3, [pc, #172]	; (8002d38 <Movimiento+0x10c>)
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	2120      	movs	r1, #32
 8002c90:	0018      	movs	r0, r3
 8002c92:	f002 fd2b 	bl	80056ec <HAL_GPIO_WritePin>
	}
	if(move==IZQUIERDA)//GIRAR HACIA LA IZQUIERDA
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2b02      	cmp	r3, #2
 8002c9a:	d10b      	bne.n	8002cb4 <Movimiento+0x88>
	{
		HAL_GPIO_WritePin(EJEX_GPIO_Port,EJEX_Pin,False);
 8002c9c:	4b26      	ldr	r3, [pc, #152]	; (8002d38 <Movimiento+0x10c>)
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	2110      	movs	r1, #16
 8002ca2:	0018      	movs	r0, r3
 8002ca4:	f002 fd22 	bl	80056ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EJE_X_GPIO_Port,EJE_X_Pin,True);
 8002ca8:	4b23      	ldr	r3, [pc, #140]	; (8002d38 <Movimiento+0x10c>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	2120      	movs	r1, #32
 8002cae:	0018      	movs	r0, r3
 8002cb0:	f002 fd1c 	bl	80056ec <HAL_GPIO_WritePin>
	}
	if(move==STOP)//PARAR EQUIPO
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2b04      	cmp	r3, #4
 8002cb8:	d119      	bne.n	8002cee <Movimiento+0xc2>
	{
		HAL_GPIO_WritePin(EJEY_GPIO_Port,EJEY_Pin,False);
 8002cba:	2380      	movs	r3, #128	; 0x80
 8002cbc:	00d9      	lsls	r1, r3, #3
 8002cbe:	23a0      	movs	r3, #160	; 0xa0
 8002cc0:	05db      	lsls	r3, r3, #23
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	0018      	movs	r0, r3
 8002cc6:	f002 fd11 	bl	80056ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EJE_Y_GPIO_Port,EJE_Y_Pin,False);
 8002cca:	4b1b      	ldr	r3, [pc, #108]	; (8002d38 <Movimiento+0x10c>)
 8002ccc:	2201      	movs	r2, #1
 8002cce:	2108      	movs	r1, #8
 8002cd0:	0018      	movs	r0, r3
 8002cd2:	f002 fd0b 	bl	80056ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EJEX_GPIO_Port,EJEX_Pin,False);
 8002cd6:	4b18      	ldr	r3, [pc, #96]	; (8002d38 <Movimiento+0x10c>)
 8002cd8:	2201      	movs	r2, #1
 8002cda:	2110      	movs	r1, #16
 8002cdc:	0018      	movs	r0, r3
 8002cde:	f002 fd05 	bl	80056ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EJE_X_GPIO_Port,EJE_X_Pin,False);
 8002ce2:	4b15      	ldr	r3, [pc, #84]	; (8002d38 <Movimiento+0x10c>)
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	2120      	movs	r1, #32
 8002ce8:	0018      	movs	r0, r3
 8002cea:	f002 fcff 	bl	80056ec <HAL_GPIO_WritePin>
	}
	if(move==STOP_X)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2b09      	cmp	r3, #9
 8002cf2:	d10b      	bne.n	8002d0c <Movimiento+0xe0>
	{
		HAL_GPIO_WritePin(EJEX_GPIO_Port,EJEX_Pin,False);
 8002cf4:	4b10      	ldr	r3, [pc, #64]	; (8002d38 <Movimiento+0x10c>)
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	2110      	movs	r1, #16
 8002cfa:	0018      	movs	r0, r3
 8002cfc:	f002 fcf6 	bl	80056ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EJE_X_GPIO_Port,EJE_X_Pin,False);
 8002d00:	4b0d      	ldr	r3, [pc, #52]	; (8002d38 <Movimiento+0x10c>)
 8002d02:	2201      	movs	r2, #1
 8002d04:	2120      	movs	r1, #32
 8002d06:	0018      	movs	r0, r3
 8002d08:	f002 fcf0 	bl	80056ec <HAL_GPIO_WritePin>
	}
	if(move==STOP_Y)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2b0a      	cmp	r3, #10
 8002d10:	d10d      	bne.n	8002d2e <Movimiento+0x102>
	{
		HAL_GPIO_WritePin(EJEY_GPIO_Port,EJEY_Pin,False);
 8002d12:	2380      	movs	r3, #128	; 0x80
 8002d14:	00d9      	lsls	r1, r3, #3
 8002d16:	23a0      	movs	r3, #160	; 0xa0
 8002d18:	05db      	lsls	r3, r3, #23
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	0018      	movs	r0, r3
 8002d1e:	f002 fce5 	bl	80056ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EJE_Y_GPIO_Port,EJE_Y_Pin,False);
 8002d22:	4b05      	ldr	r3, [pc, #20]	; (8002d38 <Movimiento+0x10c>)
 8002d24:	2201      	movs	r2, #1
 8002d26:	2108      	movs	r1, #8
 8002d28:	0018      	movs	r0, r3
 8002d2a:	f002 fcdf 	bl	80056ec <HAL_GPIO_WritePin>
	}
}
 8002d2e:	46c0      	nop			; (mov r8, r8)
 8002d30:	46bd      	mov	sp, r7
 8002d32:	b002      	add	sp, #8
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	46c0      	nop			; (mov r8, r8)
 8002d38:	50000400 	.word	0x50000400

08002d3c <Medida>:
void Medida()
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	af00      	add	r7, sp, #0
	 EJEX=((3.3*ADC_MEDIDAS[0])*Factor)/4095;//ejex ldr3
 8002d40:	4b5e      	ldr	r3, [pc, #376]	; (8002ebc <Medida+0x180>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	0018      	movs	r0, r3
 8002d46:	f7ff fa59 	bl	80021fc <__aeabi_ui2d>
 8002d4a:	4a5d      	ldr	r2, [pc, #372]	; (8002ec0 <Medida+0x184>)
 8002d4c:	4b5d      	ldr	r3, [pc, #372]	; (8002ec4 <Medida+0x188>)
 8002d4e:	f7fe fbd3 	bl	80014f8 <__aeabi_dmul>
 8002d52:	0002      	movs	r2, r0
 8002d54:	000b      	movs	r3, r1
 8002d56:	0010      	movs	r0, r2
 8002d58:	0019      	movs	r1, r3
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	4b5a      	ldr	r3, [pc, #360]	; (8002ec8 <Medida+0x18c>)
 8002d5e:	f7fe fbcb 	bl	80014f8 <__aeabi_dmul>
 8002d62:	0002      	movs	r2, r0
 8002d64:	000b      	movs	r3, r1
 8002d66:	0010      	movs	r0, r2
 8002d68:	0019      	movs	r1, r3
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	4b57      	ldr	r3, [pc, #348]	; (8002ecc <Medida+0x190>)
 8002d6e:	f7fd ffc1 	bl	8000cf4 <__aeabi_ddiv>
 8002d72:	0002      	movs	r2, r0
 8002d74:	000b      	movs	r3, r1
 8002d76:	0010      	movs	r0, r2
 8002d78:	0019      	movs	r1, r3
 8002d7a:	f7ff f9d9 	bl	8002130 <__aeabi_d2iz>
 8002d7e:	0002      	movs	r2, r0
 8002d80:	4b53      	ldr	r3, [pc, #332]	; (8002ed0 <Medida+0x194>)
 8002d82:	601a      	str	r2, [r3, #0]
	 EJE_Y=((3.3*ADC_MEDIDAS[1])*Factor)/4095;//eje_y ldr4
 8002d84:	4b4d      	ldr	r3, [pc, #308]	; (8002ebc <Medida+0x180>)
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	0018      	movs	r0, r3
 8002d8a:	f7ff fa37 	bl	80021fc <__aeabi_ui2d>
 8002d8e:	4a4c      	ldr	r2, [pc, #304]	; (8002ec0 <Medida+0x184>)
 8002d90:	4b4c      	ldr	r3, [pc, #304]	; (8002ec4 <Medida+0x188>)
 8002d92:	f7fe fbb1 	bl	80014f8 <__aeabi_dmul>
 8002d96:	0002      	movs	r2, r0
 8002d98:	000b      	movs	r3, r1
 8002d9a:	0010      	movs	r0, r2
 8002d9c:	0019      	movs	r1, r3
 8002d9e:	2200      	movs	r2, #0
 8002da0:	4b49      	ldr	r3, [pc, #292]	; (8002ec8 <Medida+0x18c>)
 8002da2:	f7fe fba9 	bl	80014f8 <__aeabi_dmul>
 8002da6:	0002      	movs	r2, r0
 8002da8:	000b      	movs	r3, r1
 8002daa:	0010      	movs	r0, r2
 8002dac:	0019      	movs	r1, r3
 8002dae:	2200      	movs	r2, #0
 8002db0:	4b46      	ldr	r3, [pc, #280]	; (8002ecc <Medida+0x190>)
 8002db2:	f7fd ff9f 	bl	8000cf4 <__aeabi_ddiv>
 8002db6:	0002      	movs	r2, r0
 8002db8:	000b      	movs	r3, r1
 8002dba:	0010      	movs	r0, r2
 8002dbc:	0019      	movs	r1, r3
 8002dbe:	f7ff f9b7 	bl	8002130 <__aeabi_d2iz>
 8002dc2:	0002      	movs	r2, r0
 8002dc4:	4b43      	ldr	r3, [pc, #268]	; (8002ed4 <Medida+0x198>)
 8002dc6:	601a      	str	r2, [r3, #0]
	 EJEY=((3.3*ADC_MEDIDAS[2])*Factor)/4095;//ejey ldr2
 8002dc8:	4b3c      	ldr	r3, [pc, #240]	; (8002ebc <Medida+0x180>)
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	0018      	movs	r0, r3
 8002dce:	f7ff fa15 	bl	80021fc <__aeabi_ui2d>
 8002dd2:	4a3b      	ldr	r2, [pc, #236]	; (8002ec0 <Medida+0x184>)
 8002dd4:	4b3b      	ldr	r3, [pc, #236]	; (8002ec4 <Medida+0x188>)
 8002dd6:	f7fe fb8f 	bl	80014f8 <__aeabi_dmul>
 8002dda:	0002      	movs	r2, r0
 8002ddc:	000b      	movs	r3, r1
 8002dde:	0010      	movs	r0, r2
 8002de0:	0019      	movs	r1, r3
 8002de2:	2200      	movs	r2, #0
 8002de4:	4b38      	ldr	r3, [pc, #224]	; (8002ec8 <Medida+0x18c>)
 8002de6:	f7fe fb87 	bl	80014f8 <__aeabi_dmul>
 8002dea:	0002      	movs	r2, r0
 8002dec:	000b      	movs	r3, r1
 8002dee:	0010      	movs	r0, r2
 8002df0:	0019      	movs	r1, r3
 8002df2:	2200      	movs	r2, #0
 8002df4:	4b35      	ldr	r3, [pc, #212]	; (8002ecc <Medida+0x190>)
 8002df6:	f7fd ff7d 	bl	8000cf4 <__aeabi_ddiv>
 8002dfa:	0002      	movs	r2, r0
 8002dfc:	000b      	movs	r3, r1
 8002dfe:	0010      	movs	r0, r2
 8002e00:	0019      	movs	r1, r3
 8002e02:	f7ff f995 	bl	8002130 <__aeabi_d2iz>
 8002e06:	0002      	movs	r2, r0
 8002e08:	4b33      	ldr	r3, [pc, #204]	; (8002ed8 <Medida+0x19c>)
 8002e0a:	601a      	str	r2, [r3, #0]
	 EJE_X=((3.3*ADC_MEDIDAS[3])*Factor)/4095;//eje_x ldr1
 8002e0c:	4b2b      	ldr	r3, [pc, #172]	; (8002ebc <Medida+0x180>)
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	0018      	movs	r0, r3
 8002e12:	f7ff f9f3 	bl	80021fc <__aeabi_ui2d>
 8002e16:	4a2a      	ldr	r2, [pc, #168]	; (8002ec0 <Medida+0x184>)
 8002e18:	4b2a      	ldr	r3, [pc, #168]	; (8002ec4 <Medida+0x188>)
 8002e1a:	f7fe fb6d 	bl	80014f8 <__aeabi_dmul>
 8002e1e:	0002      	movs	r2, r0
 8002e20:	000b      	movs	r3, r1
 8002e22:	0010      	movs	r0, r2
 8002e24:	0019      	movs	r1, r3
 8002e26:	2200      	movs	r2, #0
 8002e28:	4b27      	ldr	r3, [pc, #156]	; (8002ec8 <Medida+0x18c>)
 8002e2a:	f7fe fb65 	bl	80014f8 <__aeabi_dmul>
 8002e2e:	0002      	movs	r2, r0
 8002e30:	000b      	movs	r3, r1
 8002e32:	0010      	movs	r0, r2
 8002e34:	0019      	movs	r1, r3
 8002e36:	2200      	movs	r2, #0
 8002e38:	4b24      	ldr	r3, [pc, #144]	; (8002ecc <Medida+0x190>)
 8002e3a:	f7fd ff5b 	bl	8000cf4 <__aeabi_ddiv>
 8002e3e:	0002      	movs	r2, r0
 8002e40:	000b      	movs	r3, r1
 8002e42:	0010      	movs	r0, r2
 8002e44:	0019      	movs	r1, r3
 8002e46:	f7ff f973 	bl	8002130 <__aeabi_d2iz>
 8002e4a:	0002      	movs	r2, r0
 8002e4c:	4b23      	ldr	r3, [pc, #140]	; (8002edc <Medida+0x1a0>)
 8002e4e:	601a      	str	r2, [r3, #0]
	if(EJEY-Tolerancia>EJE_Y)
 8002e50:	4b21      	ldr	r3, [pc, #132]	; (8002ed8 <Medida+0x19c>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	1f5a      	subs	r2, r3, #5
 8002e56:	4b1f      	ldr	r3, [pc, #124]	; (8002ed4 <Medida+0x198>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	dd03      	ble.n	8002e66 <Medida+0x12a>
	{
		Movimiento(IZQUIERDA);
 8002e5e:	2002      	movs	r0, #2
 8002e60:	f7ff fee4 	bl	8002c2c <Movimiento>
 8002e64:	e00d      	b.n	8002e82 <Medida+0x146>
	}
	else if(EJEY+Tolerancia<EJE_Y)
 8002e66:	4b1c      	ldr	r3, [pc, #112]	; (8002ed8 <Medida+0x19c>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	1d5a      	adds	r2, r3, #5
 8002e6c:	4b19      	ldr	r3, [pc, #100]	; (8002ed4 <Medida+0x198>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	429a      	cmp	r2, r3
 8002e72:	da03      	bge.n	8002e7c <Medida+0x140>
	{
		Movimiento(DERECHA);
 8002e74:	2003      	movs	r0, #3
 8002e76:	f7ff fed9 	bl	8002c2c <Movimiento>
 8002e7a:	e002      	b.n	8002e82 <Medida+0x146>
	}
	else
	{
		Movimiento(STOP_Y);
 8002e7c:	200a      	movs	r0, #10
 8002e7e:	f7ff fed5 	bl	8002c2c <Movimiento>
	}
	if(EJEX-Tolerancia>EJE_X)
 8002e82:	4b13      	ldr	r3, [pc, #76]	; (8002ed0 <Medida+0x194>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	1f5a      	subs	r2, r3, #5
 8002e88:	4b14      	ldr	r3, [pc, #80]	; (8002edc <Medida+0x1a0>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	dd03      	ble.n	8002e98 <Medida+0x15c>
	{
		Movimiento(ARRIBA);
 8002e90:	2000      	movs	r0, #0
 8002e92:	f7ff fecb 	bl	8002c2c <Movimiento>
	else
	{
		Movimiento(STOP_X);
	}

}
 8002e96:	e00d      	b.n	8002eb4 <Medida+0x178>
	else if(EJEX+Tolerancia<EJE_X)
 8002e98:	4b0d      	ldr	r3, [pc, #52]	; (8002ed0 <Medida+0x194>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	1d5a      	adds	r2, r3, #5
 8002e9e:	4b0f      	ldr	r3, [pc, #60]	; (8002edc <Medida+0x1a0>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	da03      	bge.n	8002eae <Medida+0x172>
		Movimiento(ABAJO);
 8002ea6:	2001      	movs	r0, #1
 8002ea8:	f7ff fec0 	bl	8002c2c <Movimiento>
}
 8002eac:	e002      	b.n	8002eb4 <Medida+0x178>
		Movimiento(STOP_X);
 8002eae:	2009      	movs	r0, #9
 8002eb0:	f7ff febc 	bl	8002c2c <Movimiento>
}
 8002eb4:	46c0      	nop			; (mov r8, r8)
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	46c0      	nop			; (mov r8, r8)
 8002ebc:	20000478 	.word	0x20000478
 8002ec0:	66666666 	.word	0x66666666
 8002ec4:	400a6666 	.word	0x400a6666
 8002ec8:	40590000 	.word	0x40590000
 8002ecc:	40affe00 	.word	0x40affe00
 8002ed0:	200005a0 	.word	0x200005a0
 8002ed4:	200005ac 	.word	0x200005ac
 8002ed8:	200005a8 	.word	0x200005a8
 8002edc:	200005a4 	.word	0x200005a4

08002ee0 <Hora_ACTUAL>:
void Hora_ACTUAL(typedeftime *time)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b082      	sub	sp, #8
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
	time->Hour=DS1307_GetHour();
 8002ee8:	f7ff fb5b 	bl	80025a2 <DS1307_GetHour>
 8002eec:	0003      	movs	r3, r0
 8002eee:	001a      	movs	r2, r3
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	601a      	str	r2, [r3, #0]
	time->Minutes=DS1307_GetMinute();
 8002ef4:	f7ff fb66 	bl	80025c4 <DS1307_GetMinute>
 8002ef8:	0003      	movs	r3, r0
 8002efa:	001a      	movs	r2, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	605a      	str	r2, [r3, #4]
	time->Second=DS1307_GetSecond();
 8002f00:	f7ff fb6d 	bl	80025de <DS1307_GetSecond>
 8002f04:	0003      	movs	r3, r0
 8002f06:	001a      	movs	r2, r3
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	609a      	str	r2, [r3, #8]
	time->Fecha.Day=DS1307_GetDate();
 8002f0c:	f7ff fb12 	bl	8002534 <DS1307_GetDate>
 8002f10:	0003      	movs	r3, r0
 8002f12:	001a      	movs	r2, r3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	60da      	str	r2, [r3, #12]
	time->Fecha.Month=DS1307_GetMonth();
 8002f18:	f7ff fb19 	bl	800254e <DS1307_GetMonth>
 8002f1c:	0003      	movs	r3, r0
 8002f1e:	001a      	movs	r2, r3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	611a      	str	r2, [r3, #16]
	time->Fecha.Year=DS1307_GetYear();
 8002f24:	f7ff fb20 	bl	8002568 <DS1307_GetYear>
 8002f28:	0003      	movs	r3, r0
 8002f2a:	001a      	movs	r2, r3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	615a      	str	r2, [r3, #20]
}
 8002f30:	46c0      	nop			; (mov r8, r8)
 8002f32:	46bd      	mov	sp, r7
 8002f34:	b002      	add	sp, #8
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002f3c:	f000 ff34 	bl	8003da8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002f40:	f000 f8b8 	bl	80030b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002f44:	f000 fb2a 	bl	800359c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002f48:	f000 fabc 	bl	80034c4 <MX_USART2_UART_Init>
  MX_DMA_Init();
 8002f4c:	f000 fb08 	bl	8003560 <MX_DMA_Init>
  MX_ADC1_Init();
 8002f50:	f000 f930 	bl	80031b4 <MX_ADC1_Init>
  MX_I2C1_Init();
 8002f54:	f000 f9d0 	bl	80032f8 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8002f58:	f000 fa66 	bl	8003428 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8002f5c:	f000 fa0c 	bl	8003378 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  	HAL_ADC_Start_DMA(&hadc1,ADC_MEDIDAS,4);
 8002f60:	4946      	ldr	r1, [pc, #280]	; (800307c <main+0x144>)
 8002f62:	4b47      	ldr	r3, [pc, #284]	; (8003080 <main+0x148>)
 8002f64:	2204      	movs	r2, #4
 8002f66:	0018      	movs	r0, r3
 8002f68:	f001 face 	bl	8004508 <HAL_ADC_Start_DMA>
	HAL_UART_Receive_IT(&huart1,&Rx ,1);
 8002f6c:	4945      	ldr	r1, [pc, #276]	; (8003084 <main+0x14c>)
 8002f6e:	4b46      	ldr	r3, [pc, #280]	; (8003088 <main+0x150>)
 8002f70:	2201      	movs	r2, #1
 8002f72:	0018      	movs	r0, r3
 8002f74:	f004 ffc4 	bl	8007f00 <HAL_UART_Receive_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 8002f78:	4b44      	ldr	r3, [pc, #272]	; (800308c <main+0x154>)
 8002f7a:	0018      	movs	r0, r3
 8002f7c:	f004 fa98 	bl	80074b0 <HAL_TIM_Base_Start_IT>
	transmit(MENU);
 8002f80:	4b43      	ldr	r3, [pc, #268]	; (8003090 <main+0x158>)
 8002f82:	0018      	movs	r0, r3
 8002f84:	f7ff fcf6 	bl	8002974 <transmit>
	Move=ABSOLUTO;
 8002f88:	4b42      	ldr	r3, [pc, #264]	; (8003094 <main+0x15c>)
 8002f8a:	2208      	movs	r2, #8
 8002f8c:	601a      	str	r2, [r3, #0]
	Mode=MANUAL;
 8002f8e:	4b42      	ldr	r3, [pc, #264]	; (8003098 <main+0x160>)
 8002f90:	2206      	movs	r2, #6
 8002f92:	601a      	str	r2, [r3, #0]
	DS1307_Init(&hi2c1);
 8002f94:	4b41      	ldr	r3, [pc, #260]	; (800309c <main+0x164>)
 8002f96:	0018      	movs	r0, r3
 8002f98:	f7ff fa50 	bl	800243c <DS1307_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	  	  temperatura();
 8002f9c:	f7ff fc7c 	bl	8002898 <temperatura>
	  	  MPU6050_Read_Accel();
 8002fa0:	f7ff fb72 	bl	8002688 <MPU6050_Read_Accel>
	  	  MPU6050_Read_Gyro();
 8002fa4:	f7ff fbf4 	bl	8002790 <MPU6050_Read_Gyro>

	  transmit("Anemo");
 8002fa8:	4b3d      	ldr	r3, [pc, #244]	; (80030a0 <main+0x168>)
 8002faa:	0018      	movs	r0, r3
 8002fac:	f7ff fce2 	bl	8002974 <transmit>
	  Hora_ACTUAL(&actual);
 8002fb0:	4b3c      	ldr	r3, [pc, #240]	; (80030a4 <main+0x16c>)
 8002fb2:	0018      	movs	r0, r3
 8002fb4:	f7ff ff94 	bl	8002ee0 <Hora_ACTUAL>
	  transmit("Hora");
 8002fb8:	4b3b      	ldr	r3, [pc, #236]	; (80030a8 <main+0x170>)
 8002fba:	0018      	movs	r0, r3
 8002fbc:	f7ff fcda 	bl	8002974 <transmit>
	  	  if(Move==ABSOLUTO)
 8002fc0:	4b34      	ldr	r3, [pc, #208]	; (8003094 <main+0x15c>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	2b08      	cmp	r3, #8
 8002fc6:	d10f      	bne.n	8002fe8 <main+0xb0>
	  	  {
	  			Movimiento(DERECHA);
 8002fc8:	2003      	movs	r0, #3
 8002fca:	f7ff fe2f 	bl	8002c2c <Movimiento>
	  			Movimiento(ARRIBA);
 8002fce:	2000      	movs	r0, #0
 8002fd0:	f7ff fe2c 	bl	8002c2c <Movimiento>
	  			HAL_Delay(20000);
 8002fd4:	4b35      	ldr	r3, [pc, #212]	; (80030ac <main+0x174>)
 8002fd6:	0018      	movs	r0, r3
 8002fd8:	f000 ff6c 	bl	8003eb4 <HAL_Delay>
	  			Movimiento(STOP);
 8002fdc:	2004      	movs	r0, #4
 8002fde:	f7ff fe25 	bl	8002c2c <Movimiento>
	  			Move=STOP;
 8002fe2:	4b2c      	ldr	r3, [pc, #176]	; (8003094 <main+0x15c>)
 8002fe4:	2204      	movs	r2, #4
 8002fe6:	601a      	str	r2, [r3, #0]
	  	  }
	  	  if(Move==VERTICAL)
 8002fe8:	4b2a      	ldr	r3, [pc, #168]	; (8003094 <main+0x15c>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	2b07      	cmp	r3, #7
 8002fee:	d134      	bne.n	800305a <main+0x122>
	  	  {
	  			Movimiento(DERECHA);
 8002ff0:	2003      	movs	r0, #3
 8002ff2:	f7ff fe1b 	bl	8002c2c <Movimiento>
	  			Movimiento(ARRIBA);
 8002ff6:	2000      	movs	r0, #0
 8002ff8:	f7ff fe18 	bl	8002c2c <Movimiento>
	  			HAL_Delay(20000);
 8002ffc:	4b2b      	ldr	r3, [pc, #172]	; (80030ac <main+0x174>)
 8002ffe:	0018      	movs	r0, r3
 8003000:	f000 ff58 	bl	8003eb4 <HAL_Delay>
	  			Movimiento(STOP);
 8003004:	2004      	movs	r0, #4
 8003006:	f7ff fe11 	bl	8002c2c <Movimiento>
	  			HAL_Delay(100);
 800300a:	2064      	movs	r0, #100	; 0x64
 800300c:	f000 ff52 	bl	8003eb4 <HAL_Delay>
	  			Movimiento(IZQUIERDA);
 8003010:	2002      	movs	r0, #2
 8003012:	f7ff fe0b 	bl	8002c2c <Movimiento>
	  			Movimiento(ABAJO);
 8003016:	2001      	movs	r0, #1
 8003018:	f7ff fe08 	bl	8002c2c <Movimiento>
	  			HAL_Delay(6000);
 800301c:	4b24      	ldr	r3, [pc, #144]	; (80030b0 <main+0x178>)
 800301e:	0018      	movs	r0, r3
 8003020:	f000 ff48 	bl	8003eb4 <HAL_Delay>
	  			Movimiento(STOP);
 8003024:	2004      	movs	r0, #4
 8003026:	f7ff fe01 	bl	8002c2c <Movimiento>
	  			HAL_Delay(100);
 800302a:	2064      	movs	r0, #100	; 0x64
 800302c:	f000 ff42 	bl	8003eb4 <HAL_Delay>
	  			Movimiento(IZQUIERDA);
 8003030:	2002      	movs	r0, #2
 8003032:	f7ff fdfb 	bl	8002c2c <Movimiento>
	  			HAL_Delay(6000);
 8003036:	4b1e      	ldr	r3, [pc, #120]	; (80030b0 <main+0x178>)
 8003038:	0018      	movs	r0, r3
 800303a:	f000 ff3b 	bl	8003eb4 <HAL_Delay>
	  			Movimiento(STOP);
 800303e:	2004      	movs	r0, #4
 8003040:	f7ff fdf4 	bl	8002c2c <Movimiento>
	  			Movimiento(ABAJO);
 8003044:	2001      	movs	r0, #1
 8003046:	f7ff fdf1 	bl	8002c2c <Movimiento>
	  			HAL_Delay(2000);
 800304a:	23fa      	movs	r3, #250	; 0xfa
 800304c:	00db      	lsls	r3, r3, #3
 800304e:	0018      	movs	r0, r3
 8003050:	f000 ff30 	bl	8003eb4 <HAL_Delay>
	  			Move=STOP;
 8003054:	4b0f      	ldr	r3, [pc, #60]	; (8003094 <main+0x15c>)
 8003056:	2204      	movs	r2, #4
 8003058:	601a      	str	r2, [r3, #0]
	  	  }
	  	  if(Mode==MANUAL)
 800305a:	4b0f      	ldr	r3, [pc, #60]	; (8003098 <main+0x160>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	2b06      	cmp	r3, #6
 8003060:	d104      	bne.n	800306c <main+0x134>
	  	  {
	  		Movimiento(Move);
 8003062:	4b0c      	ldr	r3, [pc, #48]	; (8003094 <main+0x15c>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	0018      	movs	r0, r3
 8003068:	f7ff fde0 	bl	8002c2c <Movimiento>
	  	  }

	  	  if(Mode==AUTO)
 800306c:	4b0a      	ldr	r3, [pc, #40]	; (8003098 <main+0x160>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	2b05      	cmp	r3, #5
 8003072:	d193      	bne.n	8002f9c <main+0x64>
	  	  {
	  		Medida();
 8003074:	f7ff fe62 	bl	8002d3c <Medida>
	  	  temperatura();
 8003078:	e790      	b.n	8002f9c <main+0x64>
 800307a:	46c0      	nop			; (mov r8, r8)
 800307c:	20000478 	.word	0x20000478
 8003080:	20000200 	.word	0x20000200
 8003084:	20000488 	.word	0x20000488
 8003088:	20000358 	.word	0x20000358
 800308c:	2000030c 	.word	0x2000030c
 8003090:	0800ce68 	.word	0x0800ce68
 8003094:	2000048c 	.word	0x2000048c
 8003098:	20000490 	.word	0x20000490
 800309c:	200002c0 	.word	0x200002c0
 80030a0:	0800ce34 	.word	0x0800ce34
 80030a4:	200005b8 	.word	0x200005b8
 80030a8:	0800ce4c 	.word	0x0800ce4c
 80030ac:	00004e20 	.word	0x00004e20
 80030b0:	00001770 	.word	0x00001770

080030b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80030b4:	b590      	push	{r4, r7, lr}
 80030b6:	b0a1      	sub	sp, #132	; 0x84
 80030b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80030ba:	2448      	movs	r4, #72	; 0x48
 80030bc:	193b      	adds	r3, r7, r4
 80030be:	0018      	movs	r0, r3
 80030c0:	2338      	movs	r3, #56	; 0x38
 80030c2:	001a      	movs	r2, r3
 80030c4:	2100      	movs	r1, #0
 80030c6:	f006 fec1 	bl	8009e4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80030ca:	2338      	movs	r3, #56	; 0x38
 80030cc:	18fb      	adds	r3, r7, r3
 80030ce:	0018      	movs	r0, r3
 80030d0:	2310      	movs	r3, #16
 80030d2:	001a      	movs	r2, r3
 80030d4:	2100      	movs	r1, #0
 80030d6:	f006 feb9 	bl	8009e4c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80030da:	1d3b      	adds	r3, r7, #4
 80030dc:	0018      	movs	r0, r3
 80030de:	2334      	movs	r3, #52	; 0x34
 80030e0:	001a      	movs	r2, r3
 80030e2:	2100      	movs	r1, #0
 80030e4:	f006 feb2 	bl	8009e4c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80030e8:	2380      	movs	r3, #128	; 0x80
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	0018      	movs	r0, r3
 80030ee:	f003 fabf 	bl	8006670 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80030f2:	193b      	adds	r3, r7, r4
 80030f4:	2202      	movs	r2, #2
 80030f6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80030f8:	193b      	adds	r3, r7, r4
 80030fa:	2280      	movs	r2, #128	; 0x80
 80030fc:	0052      	lsls	r2, r2, #1
 80030fe:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8003100:	0021      	movs	r1, r4
 8003102:	187b      	adds	r3, r7, r1
 8003104:	2200      	movs	r2, #0
 8003106:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003108:	187b      	adds	r3, r7, r1
 800310a:	2240      	movs	r2, #64	; 0x40
 800310c:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800310e:	187b      	adds	r3, r7, r1
 8003110:	2202      	movs	r2, #2
 8003112:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003114:	187b      	adds	r3, r7, r1
 8003116:	2202      	movs	r2, #2
 8003118:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800311a:	187b      	adds	r3, r7, r1
 800311c:	2200      	movs	r2, #0
 800311e:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8003120:	187b      	adds	r3, r7, r1
 8003122:	2208      	movs	r2, #8
 8003124:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003126:	187b      	adds	r3, r7, r1
 8003128:	2280      	movs	r2, #128	; 0x80
 800312a:	0292      	lsls	r2, r2, #10
 800312c:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800312e:	187b      	adds	r3, r7, r1
 8003130:	2280      	movs	r2, #128	; 0x80
 8003132:	0492      	lsls	r2, r2, #18
 8003134:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003136:	187b      	adds	r3, r7, r1
 8003138:	2280      	movs	r2, #128	; 0x80
 800313a:	0592      	lsls	r2, r2, #22
 800313c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800313e:	187b      	adds	r3, r7, r1
 8003140:	0018      	movs	r0, r3
 8003142:	f003 fae1 	bl	8006708 <HAL_RCC_OscConfig>
 8003146:	1e03      	subs	r3, r0, #0
 8003148:	d001      	beq.n	800314e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800314a:	f000 fb1b 	bl	8003784 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800314e:	2138      	movs	r1, #56	; 0x38
 8003150:	187b      	adds	r3, r7, r1
 8003152:	2207      	movs	r2, #7
 8003154:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003156:	187b      	adds	r3, r7, r1
 8003158:	2202      	movs	r2, #2
 800315a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800315c:	187b      	adds	r3, r7, r1
 800315e:	2200      	movs	r2, #0
 8003160:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003162:	187b      	adds	r3, r7, r1
 8003164:	2200      	movs	r2, #0
 8003166:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003168:	187b      	adds	r3, r7, r1
 800316a:	2102      	movs	r1, #2
 800316c:	0018      	movs	r0, r3
 800316e:	f003 fde5 	bl	8006d3c <HAL_RCC_ClockConfig>
 8003172:	1e03      	subs	r3, r0, #0
 8003174:	d001      	beq.n	800317a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8003176:	f000 fb05 	bl	8003784 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 800317a:	1d3b      	adds	r3, r7, #4
 800317c:	4a0c      	ldr	r2, [pc, #48]	; (80031b0 <SystemClock_Config+0xfc>)
 800317e:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8003180:	1d3b      	adds	r3, r7, #4
 8003182:	2200      	movs	r2, #0
 8003184:	605a      	str	r2, [r3, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003186:	1d3b      	adds	r3, r7, #4
 8003188:	2200      	movs	r2, #0
 800318a:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800318c:	1d3b      	adds	r3, r7, #4
 800318e:	2200      	movs	r2, #0
 8003190:	611a      	str	r2, [r3, #16]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8003192:	1d3b      	adds	r3, r7, #4
 8003194:	2200      	movs	r2, #0
 8003196:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003198:	1d3b      	adds	r3, r7, #4
 800319a:	0018      	movs	r0, r3
 800319c:	f003 ff78 	bl	8007090 <HAL_RCCEx_PeriphCLKConfig>
 80031a0:	1e03      	subs	r3, r0, #0
 80031a2:	d001      	beq.n	80031a8 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 80031a4:	f000 faee 	bl	8003784 <Error_Handler>
  }
}
 80031a8:	46c0      	nop			; (mov r8, r8)
 80031aa:	46bd      	mov	sp, r7
 80031ac:	b021      	add	sp, #132	; 0x84
 80031ae:	bd90      	pop	{r4, r7, pc}
 80031b0:	00004023 	.word	0x00004023

080031b4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b084      	sub	sp, #16
 80031b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80031ba:	1d3b      	adds	r3, r7, #4
 80031bc:	0018      	movs	r0, r3
 80031be:	230c      	movs	r3, #12
 80031c0:	001a      	movs	r2, r3
 80031c2:	2100      	movs	r1, #0
 80031c4:	f006 fe42 	bl	8009e4c <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80031c8:	4b46      	ldr	r3, [pc, #280]	; (80032e4 <MX_ADC1_Init+0x130>)
 80031ca:	4a47      	ldr	r2, [pc, #284]	; (80032e8 <MX_ADC1_Init+0x134>)
 80031cc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80031ce:	4b45      	ldr	r3, [pc, #276]	; (80032e4 <MX_ADC1_Init+0x130>)
 80031d0:	2280      	movs	r2, #128	; 0x80
 80031d2:	05d2      	lsls	r2, r2, #23
 80031d4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80031d6:	4b43      	ldr	r3, [pc, #268]	; (80032e4 <MX_ADC1_Init+0x130>)
 80031d8:	2200      	movs	r2, #0
 80031da:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80031dc:	4b41      	ldr	r3, [pc, #260]	; (80032e4 <MX_ADC1_Init+0x130>)
 80031de:	2200      	movs	r2, #0
 80031e0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80031e2:	4b40      	ldr	r3, [pc, #256]	; (80032e4 <MX_ADC1_Init+0x130>)
 80031e4:	2280      	movs	r2, #128	; 0x80
 80031e6:	0392      	lsls	r2, r2, #14
 80031e8:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80031ea:	4b3e      	ldr	r3, [pc, #248]	; (80032e4 <MX_ADC1_Init+0x130>)
 80031ec:	2204      	movs	r2, #4
 80031ee:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80031f0:	4b3c      	ldr	r3, [pc, #240]	; (80032e4 <MX_ADC1_Init+0x130>)
 80031f2:	2200      	movs	r2, #0
 80031f4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80031f6:	4b3b      	ldr	r3, [pc, #236]	; (80032e4 <MX_ADC1_Init+0x130>)
 80031f8:	2200      	movs	r2, #0
 80031fa:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80031fc:	4b39      	ldr	r3, [pc, #228]	; (80032e4 <MX_ADC1_Init+0x130>)
 80031fe:	2201      	movs	r2, #1
 8003200:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 4;
 8003202:	4b38      	ldr	r3, [pc, #224]	; (80032e4 <MX_ADC1_Init+0x130>)
 8003204:	2204      	movs	r2, #4
 8003206:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003208:	4b36      	ldr	r3, [pc, #216]	; (80032e4 <MX_ADC1_Init+0x130>)
 800320a:	2220      	movs	r2, #32
 800320c:	2100      	movs	r1, #0
 800320e:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003210:	4b34      	ldr	r3, [pc, #208]	; (80032e4 <MX_ADC1_Init+0x130>)
 8003212:	2200      	movs	r2, #0
 8003214:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003216:	4b33      	ldr	r3, [pc, #204]	; (80032e4 <MX_ADC1_Init+0x130>)
 8003218:	2200      	movs	r2, #0
 800321a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800321c:	4b31      	ldr	r3, [pc, #196]	; (80032e4 <MX_ADC1_Init+0x130>)
 800321e:	222c      	movs	r2, #44	; 0x2c
 8003220:	2101      	movs	r1, #1
 8003222:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003224:	4b2f      	ldr	r3, [pc, #188]	; (80032e4 <MX_ADC1_Init+0x130>)
 8003226:	2200      	movs	r2, #0
 8003228:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 800322a:	4b2e      	ldr	r3, [pc, #184]	; (80032e4 <MX_ADC1_Init+0x130>)
 800322c:	2207      	movs	r2, #7
 800322e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8003230:	4b2c      	ldr	r3, [pc, #176]	; (80032e4 <MX_ADC1_Init+0x130>)
 8003232:	2200      	movs	r2, #0
 8003234:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8003236:	4b2b      	ldr	r3, [pc, #172]	; (80032e4 <MX_ADC1_Init+0x130>)
 8003238:	223c      	movs	r2, #60	; 0x3c
 800323a:	2100      	movs	r1, #0
 800323c:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800323e:	4b29      	ldr	r3, [pc, #164]	; (80032e4 <MX_ADC1_Init+0x130>)
 8003240:	2200      	movs	r2, #0
 8003242:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003244:	4b27      	ldr	r3, [pc, #156]	; (80032e4 <MX_ADC1_Init+0x130>)
 8003246:	0018      	movs	r0, r3
 8003248:	f000 ffb6 	bl	80041b8 <HAL_ADC_Init>
 800324c:	1e03      	subs	r3, r0, #0
 800324e:	d001      	beq.n	8003254 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 8003250:	f000 fa98 	bl	8003784 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8003254:	1d3b      	adds	r3, r7, #4
 8003256:	2201      	movs	r2, #1
 8003258:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800325a:	1d3b      	adds	r3, r7, #4
 800325c:	2200      	movs	r2, #0
 800325e:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8003260:	1d3b      	adds	r3, r7, #4
 8003262:	2200      	movs	r2, #0
 8003264:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003266:	1d3a      	adds	r2, r7, #4
 8003268:	4b1e      	ldr	r3, [pc, #120]	; (80032e4 <MX_ADC1_Init+0x130>)
 800326a:	0011      	movs	r1, r2
 800326c:	0018      	movs	r0, r3
 800326e:	f001 f9f1 	bl	8004654 <HAL_ADC_ConfigChannel>
 8003272:	1e03      	subs	r3, r0, #0
 8003274:	d001      	beq.n	800327a <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8003276:	f000 fa85 	bl	8003784 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800327a:	1d3b      	adds	r3, r7, #4
 800327c:	4a1b      	ldr	r2, [pc, #108]	; (80032ec <MX_ADC1_Init+0x138>)
 800327e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8003280:	1d3b      	adds	r3, r7, #4
 8003282:	2204      	movs	r2, #4
 8003284:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003286:	1d3a      	adds	r2, r7, #4
 8003288:	4b16      	ldr	r3, [pc, #88]	; (80032e4 <MX_ADC1_Init+0x130>)
 800328a:	0011      	movs	r1, r2
 800328c:	0018      	movs	r0, r3
 800328e:	f001 f9e1 	bl	8004654 <HAL_ADC_ConfigChannel>
 8003292:	1e03      	subs	r3, r0, #0
 8003294:	d001      	beq.n	800329a <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 8003296:	f000 fa75 	bl	8003784 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800329a:	1d3b      	adds	r3, r7, #4
 800329c:	4a14      	ldr	r2, [pc, #80]	; (80032f0 <MX_ADC1_Init+0x13c>)
 800329e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80032a0:	1d3b      	adds	r3, r7, #4
 80032a2:	2208      	movs	r2, #8
 80032a4:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80032a6:	1d3a      	adds	r2, r7, #4
 80032a8:	4b0e      	ldr	r3, [pc, #56]	; (80032e4 <MX_ADC1_Init+0x130>)
 80032aa:	0011      	movs	r1, r2
 80032ac:	0018      	movs	r0, r3
 80032ae:	f001 f9d1 	bl	8004654 <HAL_ADC_ConfigChannel>
 80032b2:	1e03      	subs	r3, r0, #0
 80032b4:	d001      	beq.n	80032ba <MX_ADC1_Init+0x106>
  {
    Error_Handler();
 80032b6:	f000 fa65 	bl	8003784 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80032ba:	1d3b      	adds	r3, r7, #4
 80032bc:	4a0d      	ldr	r2, [pc, #52]	; (80032f4 <MX_ADC1_Init+0x140>)
 80032be:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80032c0:	1d3b      	adds	r3, r7, #4
 80032c2:	220c      	movs	r2, #12
 80032c4:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80032c6:	1d3a      	adds	r2, r7, #4
 80032c8:	4b06      	ldr	r3, [pc, #24]	; (80032e4 <MX_ADC1_Init+0x130>)
 80032ca:	0011      	movs	r1, r2
 80032cc:	0018      	movs	r0, r3
 80032ce:	f001 f9c1 	bl	8004654 <HAL_ADC_ConfigChannel>
 80032d2:	1e03      	subs	r3, r0, #0
 80032d4:	d001      	beq.n	80032da <MX_ADC1_Init+0x126>
  {
    Error_Handler();
 80032d6:	f000 fa55 	bl	8003784 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80032da:	46c0      	nop			; (mov r8, r8)
 80032dc:	46bd      	mov	sp, r7
 80032de:	b004      	add	sp, #16
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	46c0      	nop			; (mov r8, r8)
 80032e4:	20000200 	.word	0x20000200
 80032e8:	40012400 	.word	0x40012400
 80032ec:	04000002 	.word	0x04000002
 80032f0:	10000010 	.word	0x10000010
 80032f4:	24000200 	.word	0x24000200

080032f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80032fc:	4b1b      	ldr	r3, [pc, #108]	; (800336c <MX_I2C1_Init+0x74>)
 80032fe:	4a1c      	ldr	r2, [pc, #112]	; (8003370 <MX_I2C1_Init+0x78>)
 8003300:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 8003302:	4b1a      	ldr	r3, [pc, #104]	; (800336c <MX_I2C1_Init+0x74>)
 8003304:	4a1b      	ldr	r2, [pc, #108]	; (8003374 <MX_I2C1_Init+0x7c>)
 8003306:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003308:	4b18      	ldr	r3, [pc, #96]	; (800336c <MX_I2C1_Init+0x74>)
 800330a:	2200      	movs	r2, #0
 800330c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800330e:	4b17      	ldr	r3, [pc, #92]	; (800336c <MX_I2C1_Init+0x74>)
 8003310:	2201      	movs	r2, #1
 8003312:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003314:	4b15      	ldr	r3, [pc, #84]	; (800336c <MX_I2C1_Init+0x74>)
 8003316:	2200      	movs	r2, #0
 8003318:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800331a:	4b14      	ldr	r3, [pc, #80]	; (800336c <MX_I2C1_Init+0x74>)
 800331c:	2200      	movs	r2, #0
 800331e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003320:	4b12      	ldr	r3, [pc, #72]	; (800336c <MX_I2C1_Init+0x74>)
 8003322:	2200      	movs	r2, #0
 8003324:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003326:	4b11      	ldr	r3, [pc, #68]	; (800336c <MX_I2C1_Init+0x74>)
 8003328:	2200      	movs	r2, #0
 800332a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800332c:	4b0f      	ldr	r3, [pc, #60]	; (800336c <MX_I2C1_Init+0x74>)
 800332e:	2200      	movs	r2, #0
 8003330:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003332:	4b0e      	ldr	r3, [pc, #56]	; (800336c <MX_I2C1_Init+0x74>)
 8003334:	0018      	movs	r0, r3
 8003336:	f002 fa2b 	bl	8005790 <HAL_I2C_Init>
 800333a:	1e03      	subs	r3, r0, #0
 800333c:	d001      	beq.n	8003342 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800333e:	f000 fa21 	bl	8003784 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003342:	4b0a      	ldr	r3, [pc, #40]	; (800336c <MX_I2C1_Init+0x74>)
 8003344:	2100      	movs	r1, #0
 8003346:	0018      	movs	r0, r3
 8003348:	f003 f8fa 	bl	8006540 <HAL_I2CEx_ConfigAnalogFilter>
 800334c:	1e03      	subs	r3, r0, #0
 800334e:	d001      	beq.n	8003354 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003350:	f000 fa18 	bl	8003784 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003354:	4b05      	ldr	r3, [pc, #20]	; (800336c <MX_I2C1_Init+0x74>)
 8003356:	2100      	movs	r1, #0
 8003358:	0018      	movs	r0, r3
 800335a:	f003 f93d 	bl	80065d8 <HAL_I2CEx_ConfigDigitalFilter>
 800335e:	1e03      	subs	r3, r0, #0
 8003360:	d001      	beq.n	8003366 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8003362:	f000 fa0f 	bl	8003784 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003366:	46c0      	nop			; (mov r8, r8)
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}
 800336c:	200002c0 	.word	0x200002c0
 8003370:	40005400 	.word	0x40005400
 8003374:	10707dbc 	.word	0x10707dbc

08003378 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b088      	sub	sp, #32
 800337c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800337e:	2310      	movs	r3, #16
 8003380:	18fb      	adds	r3, r7, r3
 8003382:	0018      	movs	r0, r3
 8003384:	2310      	movs	r3, #16
 8003386:	001a      	movs	r2, r3
 8003388:	2100      	movs	r1, #0
 800338a:	f006 fd5f 	bl	8009e4c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800338e:	1d3b      	adds	r3, r7, #4
 8003390:	0018      	movs	r0, r3
 8003392:	230c      	movs	r3, #12
 8003394:	001a      	movs	r2, r3
 8003396:	2100      	movs	r1, #0
 8003398:	f006 fd58 	bl	8009e4c <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800339c:	4b1e      	ldr	r3, [pc, #120]	; (8003418 <MX_TIM3_Init+0xa0>)
 800339e:	4a1f      	ldr	r2, [pc, #124]	; (800341c <MX_TIM3_Init+0xa4>)
 80033a0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 6400-1;
 80033a2:	4b1d      	ldr	r3, [pc, #116]	; (8003418 <MX_TIM3_Init+0xa0>)
 80033a4:	4a1e      	ldr	r2, [pc, #120]	; (8003420 <MX_TIM3_Init+0xa8>)
 80033a6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033a8:	4b1b      	ldr	r3, [pc, #108]	; (8003418 <MX_TIM3_Init+0xa0>)
 80033aa:	2200      	movs	r2, #0
 80033ac:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 80033ae:	4b1a      	ldr	r3, [pc, #104]	; (8003418 <MX_TIM3_Init+0xa0>)
 80033b0:	4a1c      	ldr	r2, [pc, #112]	; (8003424 <MX_TIM3_Init+0xac>)
 80033b2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80033b4:	4b18      	ldr	r3, [pc, #96]	; (8003418 <MX_TIM3_Init+0xa0>)
 80033b6:	2200      	movs	r2, #0
 80033b8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80033ba:	4b17      	ldr	r3, [pc, #92]	; (8003418 <MX_TIM3_Init+0xa0>)
 80033bc:	2200      	movs	r2, #0
 80033be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80033c0:	4b15      	ldr	r3, [pc, #84]	; (8003418 <MX_TIM3_Init+0xa0>)
 80033c2:	0018      	movs	r0, r3
 80033c4:	f004 f81c 	bl	8007400 <HAL_TIM_Base_Init>
 80033c8:	1e03      	subs	r3, r0, #0
 80033ca:	d001      	beq.n	80033d0 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80033cc:	f000 f9da 	bl	8003784 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80033d0:	2110      	movs	r1, #16
 80033d2:	187b      	adds	r3, r7, r1
 80033d4:	2280      	movs	r2, #128	; 0x80
 80033d6:	0152      	lsls	r2, r2, #5
 80033d8:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80033da:	187a      	adds	r2, r7, r1
 80033dc:	4b0e      	ldr	r3, [pc, #56]	; (8003418 <MX_TIM3_Init+0xa0>)
 80033de:	0011      	movs	r1, r2
 80033e0:	0018      	movs	r0, r3
 80033e2:	f004 f9f3 	bl	80077cc <HAL_TIM_ConfigClockSource>
 80033e6:	1e03      	subs	r3, r0, #0
 80033e8:	d001      	beq.n	80033ee <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80033ea:	f000 f9cb 	bl	8003784 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80033ee:	1d3b      	adds	r3, r7, #4
 80033f0:	2200      	movs	r2, #0
 80033f2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80033f4:	1d3b      	adds	r3, r7, #4
 80033f6:	2200      	movs	r2, #0
 80033f8:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80033fa:	1d3a      	adds	r2, r7, #4
 80033fc:	4b06      	ldr	r3, [pc, #24]	; (8003418 <MX_TIM3_Init+0xa0>)
 80033fe:	0011      	movs	r1, r2
 8003400:	0018      	movs	r0, r3
 8003402:	f004 fbf5 	bl	8007bf0 <HAL_TIMEx_MasterConfigSynchronization>
 8003406:	1e03      	subs	r3, r0, #0
 8003408:	d001      	beq.n	800340e <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800340a:	f000 f9bb 	bl	8003784 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800340e:	46c0      	nop			; (mov r8, r8)
 8003410:	46bd      	mov	sp, r7
 8003412:	b008      	add	sp, #32
 8003414:	bd80      	pop	{r7, pc}
 8003416:	46c0      	nop			; (mov r8, r8)
 8003418:	2000030c 	.word	0x2000030c
 800341c:	40000400 	.word	0x40000400
 8003420:	000018ff 	.word	0x000018ff
 8003424:	0000270f 	.word	0x0000270f

08003428 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800342c:	4b23      	ldr	r3, [pc, #140]	; (80034bc <MX_USART1_UART_Init+0x94>)
 800342e:	4a24      	ldr	r2, [pc, #144]	; (80034c0 <MX_USART1_UART_Init+0x98>)
 8003430:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8003432:	4b22      	ldr	r3, [pc, #136]	; (80034bc <MX_USART1_UART_Init+0x94>)
 8003434:	2296      	movs	r2, #150	; 0x96
 8003436:	0192      	lsls	r2, r2, #6
 8003438:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800343a:	4b20      	ldr	r3, [pc, #128]	; (80034bc <MX_USART1_UART_Init+0x94>)
 800343c:	2200      	movs	r2, #0
 800343e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003440:	4b1e      	ldr	r3, [pc, #120]	; (80034bc <MX_USART1_UART_Init+0x94>)
 8003442:	2200      	movs	r2, #0
 8003444:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003446:	4b1d      	ldr	r3, [pc, #116]	; (80034bc <MX_USART1_UART_Init+0x94>)
 8003448:	2200      	movs	r2, #0
 800344a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800344c:	4b1b      	ldr	r3, [pc, #108]	; (80034bc <MX_USART1_UART_Init+0x94>)
 800344e:	220c      	movs	r2, #12
 8003450:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003452:	4b1a      	ldr	r3, [pc, #104]	; (80034bc <MX_USART1_UART_Init+0x94>)
 8003454:	2200      	movs	r2, #0
 8003456:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003458:	4b18      	ldr	r3, [pc, #96]	; (80034bc <MX_USART1_UART_Init+0x94>)
 800345a:	2200      	movs	r2, #0
 800345c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800345e:	4b17      	ldr	r3, [pc, #92]	; (80034bc <MX_USART1_UART_Init+0x94>)
 8003460:	2200      	movs	r2, #0
 8003462:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003464:	4b15      	ldr	r3, [pc, #84]	; (80034bc <MX_USART1_UART_Init+0x94>)
 8003466:	2200      	movs	r2, #0
 8003468:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800346a:	4b14      	ldr	r3, [pc, #80]	; (80034bc <MX_USART1_UART_Init+0x94>)
 800346c:	2200      	movs	r2, #0
 800346e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003470:	4b12      	ldr	r3, [pc, #72]	; (80034bc <MX_USART1_UART_Init+0x94>)
 8003472:	0018      	movs	r0, r3
 8003474:	f004 fc42 	bl	8007cfc <HAL_UART_Init>
 8003478:	1e03      	subs	r3, r0, #0
 800347a:	d001      	beq.n	8003480 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800347c:	f000 f982 	bl	8003784 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003480:	4b0e      	ldr	r3, [pc, #56]	; (80034bc <MX_USART1_UART_Init+0x94>)
 8003482:	2100      	movs	r1, #0
 8003484:	0018      	movs	r0, r3
 8003486:	f006 fbd7 	bl	8009c38 <HAL_UARTEx_SetTxFifoThreshold>
 800348a:	1e03      	subs	r3, r0, #0
 800348c:	d001      	beq.n	8003492 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800348e:	f000 f979 	bl	8003784 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003492:	4b0a      	ldr	r3, [pc, #40]	; (80034bc <MX_USART1_UART_Init+0x94>)
 8003494:	2100      	movs	r1, #0
 8003496:	0018      	movs	r0, r3
 8003498:	f006 fc0e 	bl	8009cb8 <HAL_UARTEx_SetRxFifoThreshold>
 800349c:	1e03      	subs	r3, r0, #0
 800349e:	d001      	beq.n	80034a4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80034a0:	f000 f970 	bl	8003784 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80034a4:	4b05      	ldr	r3, [pc, #20]	; (80034bc <MX_USART1_UART_Init+0x94>)
 80034a6:	0018      	movs	r0, r3
 80034a8:	f006 fb8c 	bl	8009bc4 <HAL_UARTEx_DisableFifoMode>
 80034ac:	1e03      	subs	r3, r0, #0
 80034ae:	d001      	beq.n	80034b4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80034b0:	f000 f968 	bl	8003784 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80034b4:	46c0      	nop			; (mov r8, r8)
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}
 80034ba:	46c0      	nop			; (mov r8, r8)
 80034bc:	20000358 	.word	0x20000358
 80034c0:	40013800 	.word	0x40013800

080034c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80034c8:	4b23      	ldr	r3, [pc, #140]	; (8003558 <MX_USART2_UART_Init+0x94>)
 80034ca:	4a24      	ldr	r2, [pc, #144]	; (800355c <MX_USART2_UART_Init+0x98>)
 80034cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80034ce:	4b22      	ldr	r3, [pc, #136]	; (8003558 <MX_USART2_UART_Init+0x94>)
 80034d0:	22e1      	movs	r2, #225	; 0xe1
 80034d2:	0252      	lsls	r2, r2, #9
 80034d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80034d6:	4b20      	ldr	r3, [pc, #128]	; (8003558 <MX_USART2_UART_Init+0x94>)
 80034d8:	2200      	movs	r2, #0
 80034da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80034dc:	4b1e      	ldr	r3, [pc, #120]	; (8003558 <MX_USART2_UART_Init+0x94>)
 80034de:	2200      	movs	r2, #0
 80034e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80034e2:	4b1d      	ldr	r3, [pc, #116]	; (8003558 <MX_USART2_UART_Init+0x94>)
 80034e4:	2200      	movs	r2, #0
 80034e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80034e8:	4b1b      	ldr	r3, [pc, #108]	; (8003558 <MX_USART2_UART_Init+0x94>)
 80034ea:	220c      	movs	r2, #12
 80034ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80034ee:	4b1a      	ldr	r3, [pc, #104]	; (8003558 <MX_USART2_UART_Init+0x94>)
 80034f0:	2200      	movs	r2, #0
 80034f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80034f4:	4b18      	ldr	r3, [pc, #96]	; (8003558 <MX_USART2_UART_Init+0x94>)
 80034f6:	2200      	movs	r2, #0
 80034f8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80034fa:	4b17      	ldr	r3, [pc, #92]	; (8003558 <MX_USART2_UART_Init+0x94>)
 80034fc:	2200      	movs	r2, #0
 80034fe:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003500:	4b15      	ldr	r3, [pc, #84]	; (8003558 <MX_USART2_UART_Init+0x94>)
 8003502:	2200      	movs	r2, #0
 8003504:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003506:	4b14      	ldr	r3, [pc, #80]	; (8003558 <MX_USART2_UART_Init+0x94>)
 8003508:	2200      	movs	r2, #0
 800350a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800350c:	4b12      	ldr	r3, [pc, #72]	; (8003558 <MX_USART2_UART_Init+0x94>)
 800350e:	0018      	movs	r0, r3
 8003510:	f004 fbf4 	bl	8007cfc <HAL_UART_Init>
 8003514:	1e03      	subs	r3, r0, #0
 8003516:	d001      	beq.n	800351c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8003518:	f000 f934 	bl	8003784 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800351c:	4b0e      	ldr	r3, [pc, #56]	; (8003558 <MX_USART2_UART_Init+0x94>)
 800351e:	2100      	movs	r1, #0
 8003520:	0018      	movs	r0, r3
 8003522:	f006 fb89 	bl	8009c38 <HAL_UARTEx_SetTxFifoThreshold>
 8003526:	1e03      	subs	r3, r0, #0
 8003528:	d001      	beq.n	800352e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800352a:	f000 f92b 	bl	8003784 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800352e:	4b0a      	ldr	r3, [pc, #40]	; (8003558 <MX_USART2_UART_Init+0x94>)
 8003530:	2100      	movs	r1, #0
 8003532:	0018      	movs	r0, r3
 8003534:	f006 fbc0 	bl	8009cb8 <HAL_UARTEx_SetRxFifoThreshold>
 8003538:	1e03      	subs	r3, r0, #0
 800353a:	d001      	beq.n	8003540 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800353c:	f000 f922 	bl	8003784 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8003540:	4b05      	ldr	r3, [pc, #20]	; (8003558 <MX_USART2_UART_Init+0x94>)
 8003542:	0018      	movs	r0, r3
 8003544:	f006 fb3e 	bl	8009bc4 <HAL_UARTEx_DisableFifoMode>
 8003548:	1e03      	subs	r3, r0, #0
 800354a:	d001      	beq.n	8003550 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800354c:	f000 f91a 	bl	8003784 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003550:	46c0      	nop			; (mov r8, r8)
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
 8003556:	46c0      	nop			; (mov r8, r8)
 8003558:	200003e8 	.word	0x200003e8
 800355c:	40004400 	.word	0x40004400

08003560 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b082      	sub	sp, #8
 8003564:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003566:	4b0c      	ldr	r3, [pc, #48]	; (8003598 <MX_DMA_Init+0x38>)
 8003568:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800356a:	4b0b      	ldr	r3, [pc, #44]	; (8003598 <MX_DMA_Init+0x38>)
 800356c:	2101      	movs	r1, #1
 800356e:	430a      	orrs	r2, r1
 8003570:	639a      	str	r2, [r3, #56]	; 0x38
 8003572:	4b09      	ldr	r3, [pc, #36]	; (8003598 <MX_DMA_Init+0x38>)
 8003574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003576:	2201      	movs	r2, #1
 8003578:	4013      	ands	r3, r2
 800357a:	607b      	str	r3, [r7, #4]
 800357c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800357e:	2200      	movs	r2, #0
 8003580:	2100      	movs	r1, #0
 8003582:	2009      	movs	r0, #9
 8003584:	f001 fbfe 	bl	8004d84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003588:	2009      	movs	r0, #9
 800358a:	f001 fc10 	bl	8004dae <HAL_NVIC_EnableIRQ>

}
 800358e:	46c0      	nop			; (mov r8, r8)
 8003590:	46bd      	mov	sp, r7
 8003592:	b002      	add	sp, #8
 8003594:	bd80      	pop	{r7, pc}
 8003596:	46c0      	nop			; (mov r8, r8)
 8003598:	40021000 	.word	0x40021000

0800359c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800359c:	b590      	push	{r4, r7, lr}
 800359e:	b08b      	sub	sp, #44	; 0x2c
 80035a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035a2:	2414      	movs	r4, #20
 80035a4:	193b      	adds	r3, r7, r4
 80035a6:	0018      	movs	r0, r3
 80035a8:	2314      	movs	r3, #20
 80035aa:	001a      	movs	r2, r3
 80035ac:	2100      	movs	r1, #0
 80035ae:	f006 fc4d 	bl	8009e4c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80035b2:	4b4c      	ldr	r3, [pc, #304]	; (80036e4 <MX_GPIO_Init+0x148>)
 80035b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035b6:	4b4b      	ldr	r3, [pc, #300]	; (80036e4 <MX_GPIO_Init+0x148>)
 80035b8:	2104      	movs	r1, #4
 80035ba:	430a      	orrs	r2, r1
 80035bc:	635a      	str	r2, [r3, #52]	; 0x34
 80035be:	4b49      	ldr	r3, [pc, #292]	; (80036e4 <MX_GPIO_Init+0x148>)
 80035c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035c2:	2204      	movs	r2, #4
 80035c4:	4013      	ands	r3, r2
 80035c6:	613b      	str	r3, [r7, #16]
 80035c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80035ca:	4b46      	ldr	r3, [pc, #280]	; (80036e4 <MX_GPIO_Init+0x148>)
 80035cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035ce:	4b45      	ldr	r3, [pc, #276]	; (80036e4 <MX_GPIO_Init+0x148>)
 80035d0:	2120      	movs	r1, #32
 80035d2:	430a      	orrs	r2, r1
 80035d4:	635a      	str	r2, [r3, #52]	; 0x34
 80035d6:	4b43      	ldr	r3, [pc, #268]	; (80036e4 <MX_GPIO_Init+0x148>)
 80035d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035da:	2220      	movs	r2, #32
 80035dc:	4013      	ands	r3, r2
 80035de:	60fb      	str	r3, [r7, #12]
 80035e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80035e2:	4b40      	ldr	r3, [pc, #256]	; (80036e4 <MX_GPIO_Init+0x148>)
 80035e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035e6:	4b3f      	ldr	r3, [pc, #252]	; (80036e4 <MX_GPIO_Init+0x148>)
 80035e8:	2101      	movs	r1, #1
 80035ea:	430a      	orrs	r2, r1
 80035ec:	635a      	str	r2, [r3, #52]	; 0x34
 80035ee:	4b3d      	ldr	r3, [pc, #244]	; (80036e4 <MX_GPIO_Init+0x148>)
 80035f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035f2:	2201      	movs	r2, #1
 80035f4:	4013      	ands	r3, r2
 80035f6:	60bb      	str	r3, [r7, #8]
 80035f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80035fa:	4b3a      	ldr	r3, [pc, #232]	; (80036e4 <MX_GPIO_Init+0x148>)
 80035fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035fe:	4b39      	ldr	r3, [pc, #228]	; (80036e4 <MX_GPIO_Init+0x148>)
 8003600:	2102      	movs	r1, #2
 8003602:	430a      	orrs	r2, r1
 8003604:	635a      	str	r2, [r3, #52]	; 0x34
 8003606:	4b37      	ldr	r3, [pc, #220]	; (80036e4 <MX_GPIO_Init+0x148>)
 8003608:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800360a:	2202      	movs	r2, #2
 800360c:	4013      	ands	r3, r2
 800360e:	607b      	str	r3, [r7, #4]
 8003610:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_GREEN_Pin|EJEY_Pin, GPIO_PIN_RESET);
 8003612:	2384      	movs	r3, #132	; 0x84
 8003614:	00d9      	lsls	r1, r3, #3
 8003616:	23a0      	movs	r3, #160	; 0xa0
 8003618:	05db      	lsls	r3, r3, #23
 800361a:	2200      	movs	r2, #0
 800361c:	0018      	movs	r0, r3
 800361e:	f002 f865 	bl	80056ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EJE_Y_Pin|EJEX_Pin|EJE_X_Pin, GPIO_PIN_RESET);
 8003622:	4b31      	ldr	r3, [pc, #196]	; (80036e8 <MX_GPIO_Init+0x14c>)
 8003624:	2200      	movs	r2, #0
 8003626:	2138      	movs	r1, #56	; 0x38
 8003628:	0018      	movs	r0, r3
 800362a:	f002 f85f 	bl	80056ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 800362e:	193b      	adds	r3, r7, r4
 8003630:	2220      	movs	r2, #32
 8003632:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003634:	193b      	adds	r3, r7, r4
 8003636:	2201      	movs	r2, #1
 8003638:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800363a:	193b      	adds	r3, r7, r4
 800363c:	2200      	movs	r2, #0
 800363e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003640:	193b      	adds	r3, r7, r4
 8003642:	2202      	movs	r2, #2
 8003644:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8003646:	193a      	adds	r2, r7, r4
 8003648:	23a0      	movs	r3, #160	; 0xa0
 800364a:	05db      	lsls	r3, r3, #23
 800364c:	0011      	movs	r1, r2
 800364e:	0018      	movs	r0, r3
 8003650:	f001 fee8 	bl	8005424 <HAL_GPIO_Init>

  /*Configure GPIO pin : Anemometro_Pin */
  GPIO_InitStruct.Pin = Anemometro_Pin;
 8003654:	193b      	adds	r3, r7, r4
 8003656:	2280      	movs	r2, #128	; 0x80
 8003658:	0052      	lsls	r2, r2, #1
 800365a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800365c:	193b      	adds	r3, r7, r4
 800365e:	2288      	movs	r2, #136	; 0x88
 8003660:	0352      	lsls	r2, r2, #13
 8003662:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003664:	193b      	adds	r3, r7, r4
 8003666:	2200      	movs	r2, #0
 8003668:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Anemometro_GPIO_Port, &GPIO_InitStruct);
 800366a:	193a      	adds	r2, r7, r4
 800366c:	23a0      	movs	r3, #160	; 0xa0
 800366e:	05db      	lsls	r3, r3, #23
 8003670:	0011      	movs	r1, r2
 8003672:	0018      	movs	r0, r3
 8003674:	f001 fed6 	bl	8005424 <HAL_GPIO_Init>

  /*Configure GPIO pin : EJEY_Pin */
  GPIO_InitStruct.Pin = EJEY_Pin;
 8003678:	0021      	movs	r1, r4
 800367a:	187b      	adds	r3, r7, r1
 800367c:	2280      	movs	r2, #128	; 0x80
 800367e:	00d2      	lsls	r2, r2, #3
 8003680:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003682:	000c      	movs	r4, r1
 8003684:	193b      	adds	r3, r7, r4
 8003686:	2201      	movs	r2, #1
 8003688:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800368a:	193b      	adds	r3, r7, r4
 800368c:	2200      	movs	r2, #0
 800368e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003690:	193b      	adds	r3, r7, r4
 8003692:	2200      	movs	r2, #0
 8003694:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(EJEY_GPIO_Port, &GPIO_InitStruct);
 8003696:	193a      	adds	r2, r7, r4
 8003698:	23a0      	movs	r3, #160	; 0xa0
 800369a:	05db      	lsls	r3, r3, #23
 800369c:	0011      	movs	r1, r2
 800369e:	0018      	movs	r0, r3
 80036a0:	f001 fec0 	bl	8005424 <HAL_GPIO_Init>

  /*Configure GPIO pins : EJE_Y_Pin EJEX_Pin EJE_X_Pin */
  GPIO_InitStruct.Pin = EJE_Y_Pin|EJEX_Pin|EJE_X_Pin;
 80036a4:	0021      	movs	r1, r4
 80036a6:	187b      	adds	r3, r7, r1
 80036a8:	2238      	movs	r2, #56	; 0x38
 80036aa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036ac:	187b      	adds	r3, r7, r1
 80036ae:	2201      	movs	r2, #1
 80036b0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036b2:	187b      	adds	r3, r7, r1
 80036b4:	2200      	movs	r2, #0
 80036b6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036b8:	187b      	adds	r3, r7, r1
 80036ba:	2200      	movs	r2, #0
 80036bc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036be:	187b      	adds	r3, r7, r1
 80036c0:	4a09      	ldr	r2, [pc, #36]	; (80036e8 <MX_GPIO_Init+0x14c>)
 80036c2:	0019      	movs	r1, r3
 80036c4:	0010      	movs	r0, r2
 80036c6:	f001 fead 	bl	8005424 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80036ca:	2200      	movs	r2, #0
 80036cc:	2100      	movs	r1, #0
 80036ce:	2007      	movs	r0, #7
 80036d0:	f001 fb58 	bl	8004d84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80036d4:	2007      	movs	r0, #7
 80036d6:	f001 fb6a 	bl	8004dae <HAL_NVIC_EnableIRQ>

}
 80036da:	46c0      	nop			; (mov r8, r8)
 80036dc:	46bd      	mov	sp, r7
 80036de:	b00b      	add	sp, #44	; 0x2c
 80036e0:	bd90      	pop	{r4, r7, pc}
 80036e2:	46c0      	nop			; (mov r8, r8)
 80036e4:	40021000 	.word	0x40021000
 80036e8:	50000400 	.word	0x50000400

080036ec <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b082      	sub	sp, #8
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
	if(velocidad>0)
 80036f4:	4b06      	ldr	r3, [pc, #24]	; (8003710 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	dd04      	ble.n	8003706 <HAL_TIM_PeriodElapsedCallback+0x1a>
	{
		velocidad--;
 80036fc:	4b04      	ldr	r3, [pc, #16]	; (8003710 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	1e5a      	subs	r2, r3, #1
 8003702:	4b03      	ldr	r3, [pc, #12]	; (8003710 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8003704:	601a      	str	r2, [r3, #0]
	}

}
 8003706:	46c0      	nop			; (mov r8, r8)
 8003708:	46bd      	mov	sp, r7
 800370a:	b002      	add	sp, #8
 800370c:	bd80      	pop	{r7, pc}
 800370e:	46c0      	nop			; (mov r8, r8)
 8003710:	200005b0 	.word	0x200005b0

08003714 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b082      	sub	sp, #8
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
	static int i=0;


	if(i<200&&Rx!='X')
 800371c:	4b15      	ldr	r3, [pc, #84]	; (8003774 <HAL_UART_RxCpltCallback+0x60>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	2bc7      	cmp	r3, #199	; 0xc7
 8003722:	dc0d      	bgt.n	8003740 <HAL_UART_RxCpltCallback+0x2c>
 8003724:	4b14      	ldr	r3, [pc, #80]	; (8003778 <HAL_UART_RxCpltCallback+0x64>)
 8003726:	781b      	ldrb	r3, [r3, #0]
 8003728:	2b58      	cmp	r3, #88	; 0x58
 800372a:	d009      	beq.n	8003740 <HAL_UART_RxCpltCallback+0x2c>
	{
		buff[i++]=Rx;
 800372c:	4b11      	ldr	r3, [pc, #68]	; (8003774 <HAL_UART_RxCpltCallback+0x60>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	1c59      	adds	r1, r3, #1
 8003732:	4a10      	ldr	r2, [pc, #64]	; (8003774 <HAL_UART_RxCpltCallback+0x60>)
 8003734:	6011      	str	r1, [r2, #0]
 8003736:	4a10      	ldr	r2, [pc, #64]	; (8003778 <HAL_UART_RxCpltCallback+0x64>)
 8003738:	7811      	ldrb	r1, [r2, #0]
 800373a:	4a10      	ldr	r2, [pc, #64]	; (800377c <HAL_UART_RxCpltCallback+0x68>)
 800373c:	54d1      	strb	r1, [r2, r3]
 800373e:	e002      	b.n	8003746 <HAL_UART_RxCpltCallback+0x32>
	}
	else
	{
		i=0;
 8003740:	4b0c      	ldr	r3, [pc, #48]	; (8003774 <HAL_UART_RxCpltCallback+0x60>)
 8003742:	2200      	movs	r2, #0
 8003744:	601a      	str	r2, [r3, #0]
	}
	if(Rx=='X')
 8003746:	4b0c      	ldr	r3, [pc, #48]	; (8003778 <HAL_UART_RxCpltCallback+0x64>)
 8003748:	781b      	ldrb	r3, [r3, #0]
 800374a:	2b58      	cmp	r3, #88	; 0x58
 800374c:	d108      	bne.n	8003760 <HAL_UART_RxCpltCallback+0x4c>
	{
		Recive(buff);
 800374e:	4b0b      	ldr	r3, [pc, #44]	; (800377c <HAL_UART_RxCpltCallback+0x68>)
 8003750:	0018      	movs	r0, r3
 8003752:	f7ff f9c5 	bl	8002ae0 <Recive>
		clean();
 8003756:	f7fe ff7f 	bl	8002658 <clean>
		i=0;
 800375a:	4b06      	ldr	r3, [pc, #24]	; (8003774 <HAL_UART_RxCpltCallback+0x60>)
 800375c:	2200      	movs	r2, #0
 800375e:	601a      	str	r2, [r3, #0]
	}

	 HAL_UART_Receive_IT(&huart1,&Rx,1);
 8003760:	4905      	ldr	r1, [pc, #20]	; (8003778 <HAL_UART_RxCpltCallback+0x64>)
 8003762:	4b07      	ldr	r3, [pc, #28]	; (8003780 <HAL_UART_RxCpltCallback+0x6c>)
 8003764:	2201      	movs	r2, #1
 8003766:	0018      	movs	r0, r3
 8003768:	f004 fbca 	bl	8007f00 <HAL_UART_Receive_IT>
}
 800376c:	46c0      	nop			; (mov r8, r8)
 800376e:	46bd      	mov	sp, r7
 8003770:	b002      	add	sp, #8
 8003772:	bd80      	pop	{r7, pc}
 8003774:	200005d0 	.word	0x200005d0
 8003778:	20000488 	.word	0x20000488
 800377c:	200004d8 	.word	0x200004d8
 8003780:	20000358 	.word	0x20000358

08003784 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003788:	b672      	cpsid	i
}
 800378a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800378c:	e7fe      	b.n	800378c <Error_Handler+0x8>
	...

08003790 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b082      	sub	sp, #8
 8003794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003796:	4b11      	ldr	r3, [pc, #68]	; (80037dc <HAL_MspInit+0x4c>)
 8003798:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800379a:	4b10      	ldr	r3, [pc, #64]	; (80037dc <HAL_MspInit+0x4c>)
 800379c:	2101      	movs	r1, #1
 800379e:	430a      	orrs	r2, r1
 80037a0:	641a      	str	r2, [r3, #64]	; 0x40
 80037a2:	4b0e      	ldr	r3, [pc, #56]	; (80037dc <HAL_MspInit+0x4c>)
 80037a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a6:	2201      	movs	r2, #1
 80037a8:	4013      	ands	r3, r2
 80037aa:	607b      	str	r3, [r7, #4]
 80037ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80037ae:	4b0b      	ldr	r3, [pc, #44]	; (80037dc <HAL_MspInit+0x4c>)
 80037b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80037b2:	4b0a      	ldr	r3, [pc, #40]	; (80037dc <HAL_MspInit+0x4c>)
 80037b4:	2180      	movs	r1, #128	; 0x80
 80037b6:	0549      	lsls	r1, r1, #21
 80037b8:	430a      	orrs	r2, r1
 80037ba:	63da      	str	r2, [r3, #60]	; 0x3c
 80037bc:	4b07      	ldr	r3, [pc, #28]	; (80037dc <HAL_MspInit+0x4c>)
 80037be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80037c0:	2380      	movs	r3, #128	; 0x80
 80037c2:	055b      	lsls	r3, r3, #21
 80037c4:	4013      	ands	r3, r2
 80037c6:	603b      	str	r3, [r7, #0]
 80037c8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 80037ca:	23c0      	movs	r3, #192	; 0xc0
 80037cc:	00db      	lsls	r3, r3, #3
 80037ce:	0018      	movs	r0, r3
 80037d0:	f000 fb94 	bl	8003efc <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80037d4:	46c0      	nop			; (mov r8, r8)
 80037d6:	46bd      	mov	sp, r7
 80037d8:	b002      	add	sp, #8
 80037da:	bd80      	pop	{r7, pc}
 80037dc:	40021000 	.word	0x40021000

080037e0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80037e0:	b590      	push	{r4, r7, lr}
 80037e2:	b08b      	sub	sp, #44	; 0x2c
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037e8:	2414      	movs	r4, #20
 80037ea:	193b      	adds	r3, r7, r4
 80037ec:	0018      	movs	r0, r3
 80037ee:	2314      	movs	r3, #20
 80037f0:	001a      	movs	r2, r3
 80037f2:	2100      	movs	r1, #0
 80037f4:	f006 fb2a 	bl	8009e4c <memset>
  if(hadc->Instance==ADC1)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a3b      	ldr	r2, [pc, #236]	; (80038ec <HAL_ADC_MspInit+0x10c>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d16f      	bne.n	80038e2 <HAL_ADC_MspInit+0x102>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8003802:	4b3b      	ldr	r3, [pc, #236]	; (80038f0 <HAL_ADC_MspInit+0x110>)
 8003804:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003806:	4b3a      	ldr	r3, [pc, #232]	; (80038f0 <HAL_ADC_MspInit+0x110>)
 8003808:	2180      	movs	r1, #128	; 0x80
 800380a:	0349      	lsls	r1, r1, #13
 800380c:	430a      	orrs	r2, r1
 800380e:	641a      	str	r2, [r3, #64]	; 0x40
 8003810:	4b37      	ldr	r3, [pc, #220]	; (80038f0 <HAL_ADC_MspInit+0x110>)
 8003812:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003814:	2380      	movs	r3, #128	; 0x80
 8003816:	035b      	lsls	r3, r3, #13
 8003818:	4013      	ands	r3, r2
 800381a:	613b      	str	r3, [r7, #16]
 800381c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800381e:	4b34      	ldr	r3, [pc, #208]	; (80038f0 <HAL_ADC_MspInit+0x110>)
 8003820:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003822:	4b33      	ldr	r3, [pc, #204]	; (80038f0 <HAL_ADC_MspInit+0x110>)
 8003824:	2101      	movs	r1, #1
 8003826:	430a      	orrs	r2, r1
 8003828:	635a      	str	r2, [r3, #52]	; 0x34
 800382a:	4b31      	ldr	r3, [pc, #196]	; (80038f0 <HAL_ADC_MspInit+0x110>)
 800382c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800382e:	2201      	movs	r2, #1
 8003830:	4013      	ands	r3, r2
 8003832:	60fb      	str	r3, [r7, #12]
 8003834:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003836:	4b2e      	ldr	r3, [pc, #184]	; (80038f0 <HAL_ADC_MspInit+0x110>)
 8003838:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800383a:	4b2d      	ldr	r3, [pc, #180]	; (80038f0 <HAL_ADC_MspInit+0x110>)
 800383c:	2102      	movs	r1, #2
 800383e:	430a      	orrs	r2, r1
 8003840:	635a      	str	r2, [r3, #52]	; 0x34
 8003842:	4b2b      	ldr	r3, [pc, #172]	; (80038f0 <HAL_ADC_MspInit+0x110>)
 8003844:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003846:	2202      	movs	r2, #2
 8003848:	4013      	ands	r3, r2
 800384a:	60bb      	str	r3, [r7, #8]
 800384c:	68bb      	ldr	r3, [r7, #8]
    PA0     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 800384e:	193b      	adds	r3, r7, r4
 8003850:	2213      	movs	r2, #19
 8003852:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003854:	193b      	adds	r3, r7, r4
 8003856:	2203      	movs	r2, #3
 8003858:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800385a:	193b      	adds	r3, r7, r4
 800385c:	2200      	movs	r2, #0
 800385e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003860:	193a      	adds	r2, r7, r4
 8003862:	23a0      	movs	r3, #160	; 0xa0
 8003864:	05db      	lsls	r3, r3, #23
 8003866:	0011      	movs	r1, r2
 8003868:	0018      	movs	r0, r3
 800386a:	f001 fddb 	bl	8005424 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800386e:	193b      	adds	r3, r7, r4
 8003870:	2202      	movs	r2, #2
 8003872:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003874:	193b      	adds	r3, r7, r4
 8003876:	2203      	movs	r2, #3
 8003878:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800387a:	193b      	adds	r3, r7, r4
 800387c:	2200      	movs	r2, #0
 800387e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003880:	193b      	adds	r3, r7, r4
 8003882:	4a1c      	ldr	r2, [pc, #112]	; (80038f4 <HAL_ADC_MspInit+0x114>)
 8003884:	0019      	movs	r1, r3
 8003886:	0010      	movs	r0, r2
 8003888:	f001 fdcc 	bl	8005424 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800388c:	4b1a      	ldr	r3, [pc, #104]	; (80038f8 <HAL_ADC_MspInit+0x118>)
 800388e:	4a1b      	ldr	r2, [pc, #108]	; (80038fc <HAL_ADC_MspInit+0x11c>)
 8003890:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8003892:	4b19      	ldr	r3, [pc, #100]	; (80038f8 <HAL_ADC_MspInit+0x118>)
 8003894:	2205      	movs	r2, #5
 8003896:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003898:	4b17      	ldr	r3, [pc, #92]	; (80038f8 <HAL_ADC_MspInit+0x118>)
 800389a:	2200      	movs	r2, #0
 800389c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800389e:	4b16      	ldr	r3, [pc, #88]	; (80038f8 <HAL_ADC_MspInit+0x118>)
 80038a0:	2200      	movs	r2, #0
 80038a2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80038a4:	4b14      	ldr	r3, [pc, #80]	; (80038f8 <HAL_ADC_MspInit+0x118>)
 80038a6:	2280      	movs	r2, #128	; 0x80
 80038a8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80038aa:	4b13      	ldr	r3, [pc, #76]	; (80038f8 <HAL_ADC_MspInit+0x118>)
 80038ac:	2280      	movs	r2, #128	; 0x80
 80038ae:	0092      	lsls	r2, r2, #2
 80038b0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80038b2:	4b11      	ldr	r3, [pc, #68]	; (80038f8 <HAL_ADC_MspInit+0x118>)
 80038b4:	2280      	movs	r2, #128	; 0x80
 80038b6:	0112      	lsls	r2, r2, #4
 80038b8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80038ba:	4b0f      	ldr	r3, [pc, #60]	; (80038f8 <HAL_ADC_MspInit+0x118>)
 80038bc:	2220      	movs	r2, #32
 80038be:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80038c0:	4b0d      	ldr	r3, [pc, #52]	; (80038f8 <HAL_ADC_MspInit+0x118>)
 80038c2:	2200      	movs	r2, #0
 80038c4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80038c6:	4b0c      	ldr	r3, [pc, #48]	; (80038f8 <HAL_ADC_MspInit+0x118>)
 80038c8:	0018      	movs	r0, r3
 80038ca:	f001 fa8d 	bl	8004de8 <HAL_DMA_Init>
 80038ce:	1e03      	subs	r3, r0, #0
 80038d0:	d001      	beq.n	80038d6 <HAL_ADC_MspInit+0xf6>
    {
      Error_Handler();
 80038d2:	f7ff ff57 	bl	8003784 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4a07      	ldr	r2, [pc, #28]	; (80038f8 <HAL_ADC_MspInit+0x118>)
 80038da:	651a      	str	r2, [r3, #80]	; 0x50
 80038dc:	4b06      	ldr	r3, [pc, #24]	; (80038f8 <HAL_ADC_MspInit+0x118>)
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80038e2:	46c0      	nop			; (mov r8, r8)
 80038e4:	46bd      	mov	sp, r7
 80038e6:	b00b      	add	sp, #44	; 0x2c
 80038e8:	bd90      	pop	{r4, r7, pc}
 80038ea:	46c0      	nop			; (mov r8, r8)
 80038ec:	40012400 	.word	0x40012400
 80038f0:	40021000 	.word	0x40021000
 80038f4:	50000400 	.word	0x50000400
 80038f8:	20000264 	.word	0x20000264
 80038fc:	40020008 	.word	0x40020008

08003900 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003900:	b590      	push	{r4, r7, lr}
 8003902:	b08b      	sub	sp, #44	; 0x2c
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003908:	2414      	movs	r4, #20
 800390a:	193b      	adds	r3, r7, r4
 800390c:	0018      	movs	r0, r3
 800390e:	2314      	movs	r3, #20
 8003910:	001a      	movs	r2, r3
 8003912:	2100      	movs	r1, #0
 8003914:	f006 fa9a 	bl	8009e4c <memset>
  if(hi2c->Instance==I2C1)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a2c      	ldr	r2, [pc, #176]	; (80039d0 <HAL_I2C_MspInit+0xd0>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d152      	bne.n	80039c8 <HAL_I2C_MspInit+0xc8>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003922:	4b2c      	ldr	r3, [pc, #176]	; (80039d4 <HAL_I2C_MspInit+0xd4>)
 8003924:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003926:	4b2b      	ldr	r3, [pc, #172]	; (80039d4 <HAL_I2C_MspInit+0xd4>)
 8003928:	2101      	movs	r1, #1
 800392a:	430a      	orrs	r2, r1
 800392c:	635a      	str	r2, [r3, #52]	; 0x34
 800392e:	4b29      	ldr	r3, [pc, #164]	; (80039d4 <HAL_I2C_MspInit+0xd4>)
 8003930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003932:	2201      	movs	r2, #1
 8003934:	4013      	ands	r3, r2
 8003936:	613b      	str	r3, [r7, #16]
 8003938:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800393a:	4b26      	ldr	r3, [pc, #152]	; (80039d4 <HAL_I2C_MspInit+0xd4>)
 800393c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800393e:	4b25      	ldr	r3, [pc, #148]	; (80039d4 <HAL_I2C_MspInit+0xd4>)
 8003940:	2102      	movs	r1, #2
 8003942:	430a      	orrs	r2, r1
 8003944:	635a      	str	r2, [r3, #52]	; 0x34
 8003946:	4b23      	ldr	r3, [pc, #140]	; (80039d4 <HAL_I2C_MspInit+0xd4>)
 8003948:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800394a:	2202      	movs	r2, #2
 800394c:	4013      	ands	r3, r2
 800394e:	60fb      	str	r3, [r7, #12]
 8003950:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003952:	193b      	adds	r3, r7, r4
 8003954:	2280      	movs	r2, #128	; 0x80
 8003956:	0092      	lsls	r2, r2, #2
 8003958:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800395a:	193b      	adds	r3, r7, r4
 800395c:	2212      	movs	r2, #18
 800395e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003960:	193b      	adds	r3, r7, r4
 8003962:	2200      	movs	r2, #0
 8003964:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003966:	193b      	adds	r3, r7, r4
 8003968:	2200      	movs	r2, #0
 800396a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 800396c:	193b      	adds	r3, r7, r4
 800396e:	2206      	movs	r2, #6
 8003970:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003972:	193a      	adds	r2, r7, r4
 8003974:	23a0      	movs	r3, #160	; 0xa0
 8003976:	05db      	lsls	r3, r3, #23
 8003978:	0011      	movs	r1, r2
 800397a:	0018      	movs	r0, r3
 800397c:	f001 fd52 	bl	8005424 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003980:	0021      	movs	r1, r4
 8003982:	187b      	adds	r3, r7, r1
 8003984:	2280      	movs	r2, #128	; 0x80
 8003986:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003988:	187b      	adds	r3, r7, r1
 800398a:	2212      	movs	r2, #18
 800398c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800398e:	187b      	adds	r3, r7, r1
 8003990:	2200      	movs	r2, #0
 8003992:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003994:	187b      	adds	r3, r7, r1
 8003996:	2200      	movs	r2, #0
 8003998:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 800399a:	187b      	adds	r3, r7, r1
 800399c:	2206      	movs	r2, #6
 800399e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039a0:	187b      	adds	r3, r7, r1
 80039a2:	4a0d      	ldr	r2, [pc, #52]	; (80039d8 <HAL_I2C_MspInit+0xd8>)
 80039a4:	0019      	movs	r1, r3
 80039a6:	0010      	movs	r0, r2
 80039a8:	f001 fd3c 	bl	8005424 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80039ac:	4b09      	ldr	r3, [pc, #36]	; (80039d4 <HAL_I2C_MspInit+0xd4>)
 80039ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039b0:	4b08      	ldr	r3, [pc, #32]	; (80039d4 <HAL_I2C_MspInit+0xd4>)
 80039b2:	2180      	movs	r1, #128	; 0x80
 80039b4:	0389      	lsls	r1, r1, #14
 80039b6:	430a      	orrs	r2, r1
 80039b8:	63da      	str	r2, [r3, #60]	; 0x3c
 80039ba:	4b06      	ldr	r3, [pc, #24]	; (80039d4 <HAL_I2C_MspInit+0xd4>)
 80039bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039be:	2380      	movs	r3, #128	; 0x80
 80039c0:	039b      	lsls	r3, r3, #14
 80039c2:	4013      	ands	r3, r2
 80039c4:	60bb      	str	r3, [r7, #8]
 80039c6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80039c8:	46c0      	nop			; (mov r8, r8)
 80039ca:	46bd      	mov	sp, r7
 80039cc:	b00b      	add	sp, #44	; 0x2c
 80039ce:	bd90      	pop	{r4, r7, pc}
 80039d0:	40005400 	.word	0x40005400
 80039d4:	40021000 	.word	0x40021000
 80039d8:	50000400 	.word	0x50000400

080039dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b084      	sub	sp, #16
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a0d      	ldr	r2, [pc, #52]	; (8003a20 <HAL_TIM_Base_MspInit+0x44>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d113      	bne.n	8003a16 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80039ee:	4b0d      	ldr	r3, [pc, #52]	; (8003a24 <HAL_TIM_Base_MspInit+0x48>)
 80039f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039f2:	4b0c      	ldr	r3, [pc, #48]	; (8003a24 <HAL_TIM_Base_MspInit+0x48>)
 80039f4:	2102      	movs	r1, #2
 80039f6:	430a      	orrs	r2, r1
 80039f8:	63da      	str	r2, [r3, #60]	; 0x3c
 80039fa:	4b0a      	ldr	r3, [pc, #40]	; (8003a24 <HAL_TIM_Base_MspInit+0x48>)
 80039fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039fe:	2202      	movs	r2, #2
 8003a00:	4013      	ands	r3, r2
 8003a02:	60fb      	str	r3, [r7, #12]
 8003a04:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003a06:	2200      	movs	r2, #0
 8003a08:	2100      	movs	r1, #0
 8003a0a:	2010      	movs	r0, #16
 8003a0c:	f001 f9ba 	bl	8004d84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003a10:	2010      	movs	r0, #16
 8003a12:	f001 f9cc 	bl	8004dae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003a16:	46c0      	nop			; (mov r8, r8)
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	b004      	add	sp, #16
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	46c0      	nop			; (mov r8, r8)
 8003a20:	40000400 	.word	0x40000400
 8003a24:	40021000 	.word	0x40021000

08003a28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003a28:	b590      	push	{r4, r7, lr}
 8003a2a:	b08d      	sub	sp, #52	; 0x34
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a30:	241c      	movs	r4, #28
 8003a32:	193b      	adds	r3, r7, r4
 8003a34:	0018      	movs	r0, r3
 8003a36:	2314      	movs	r3, #20
 8003a38:	001a      	movs	r2, r3
 8003a3a:	2100      	movs	r1, #0
 8003a3c:	f006 fa06 	bl	8009e4c <memset>
  if(huart->Instance==USART1)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a3a      	ldr	r2, [pc, #232]	; (8003b30 <HAL_UART_MspInit+0x108>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d138      	bne.n	8003abc <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003a4a:	4b3a      	ldr	r3, [pc, #232]	; (8003b34 <HAL_UART_MspInit+0x10c>)
 8003a4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a4e:	4b39      	ldr	r3, [pc, #228]	; (8003b34 <HAL_UART_MspInit+0x10c>)
 8003a50:	2180      	movs	r1, #128	; 0x80
 8003a52:	01c9      	lsls	r1, r1, #7
 8003a54:	430a      	orrs	r2, r1
 8003a56:	641a      	str	r2, [r3, #64]	; 0x40
 8003a58:	4b36      	ldr	r3, [pc, #216]	; (8003b34 <HAL_UART_MspInit+0x10c>)
 8003a5a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a5c:	2380      	movs	r3, #128	; 0x80
 8003a5e:	01db      	lsls	r3, r3, #7
 8003a60:	4013      	ands	r3, r2
 8003a62:	61bb      	str	r3, [r7, #24]
 8003a64:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a66:	4b33      	ldr	r3, [pc, #204]	; (8003b34 <HAL_UART_MspInit+0x10c>)
 8003a68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a6a:	4b32      	ldr	r3, [pc, #200]	; (8003b34 <HAL_UART_MspInit+0x10c>)
 8003a6c:	2104      	movs	r1, #4
 8003a6e:	430a      	orrs	r2, r1
 8003a70:	635a      	str	r2, [r3, #52]	; 0x34
 8003a72:	4b30      	ldr	r3, [pc, #192]	; (8003b34 <HAL_UART_MspInit+0x10c>)
 8003a74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a76:	2204      	movs	r2, #4
 8003a78:	4013      	ands	r3, r2
 8003a7a:	617b      	str	r3, [r7, #20]
 8003a7c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003a7e:	0021      	movs	r1, r4
 8003a80:	187b      	adds	r3, r7, r1
 8003a82:	2230      	movs	r2, #48	; 0x30
 8003a84:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a86:	187b      	adds	r3, r7, r1
 8003a88:	2202      	movs	r2, #2
 8003a8a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a8c:	187b      	adds	r3, r7, r1
 8003a8e:	2200      	movs	r2, #0
 8003a90:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a92:	187b      	adds	r3, r7, r1
 8003a94:	2200      	movs	r2, #0
 8003a96:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8003a98:	187b      	adds	r3, r7, r1
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a9e:	187b      	adds	r3, r7, r1
 8003aa0:	4a25      	ldr	r2, [pc, #148]	; (8003b38 <HAL_UART_MspInit+0x110>)
 8003aa2:	0019      	movs	r1, r3
 8003aa4:	0010      	movs	r0, r2
 8003aa6:	f001 fcbd 	bl	8005424 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003aaa:	2200      	movs	r2, #0
 8003aac:	2100      	movs	r1, #0
 8003aae:	201b      	movs	r0, #27
 8003ab0:	f001 f968 	bl	8004d84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003ab4:	201b      	movs	r0, #27
 8003ab6:	f001 f97a 	bl	8004dae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003aba:	e035      	b.n	8003b28 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a1e      	ldr	r2, [pc, #120]	; (8003b3c <HAL_UART_MspInit+0x114>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d130      	bne.n	8003b28 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003ac6:	4b1b      	ldr	r3, [pc, #108]	; (8003b34 <HAL_UART_MspInit+0x10c>)
 8003ac8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003aca:	4b1a      	ldr	r3, [pc, #104]	; (8003b34 <HAL_UART_MspInit+0x10c>)
 8003acc:	2180      	movs	r1, #128	; 0x80
 8003ace:	0289      	lsls	r1, r1, #10
 8003ad0:	430a      	orrs	r2, r1
 8003ad2:	63da      	str	r2, [r3, #60]	; 0x3c
 8003ad4:	4b17      	ldr	r3, [pc, #92]	; (8003b34 <HAL_UART_MspInit+0x10c>)
 8003ad6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ad8:	2380      	movs	r3, #128	; 0x80
 8003ada:	029b      	lsls	r3, r3, #10
 8003adc:	4013      	ands	r3, r2
 8003ade:	613b      	str	r3, [r7, #16]
 8003ae0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ae2:	4b14      	ldr	r3, [pc, #80]	; (8003b34 <HAL_UART_MspInit+0x10c>)
 8003ae4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ae6:	4b13      	ldr	r3, [pc, #76]	; (8003b34 <HAL_UART_MspInit+0x10c>)
 8003ae8:	2101      	movs	r1, #1
 8003aea:	430a      	orrs	r2, r1
 8003aec:	635a      	str	r2, [r3, #52]	; 0x34
 8003aee:	4b11      	ldr	r3, [pc, #68]	; (8003b34 <HAL_UART_MspInit+0x10c>)
 8003af0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003af2:	2201      	movs	r2, #1
 8003af4:	4013      	ands	r3, r2
 8003af6:	60fb      	str	r3, [r7, #12]
 8003af8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003afa:	211c      	movs	r1, #28
 8003afc:	187b      	adds	r3, r7, r1
 8003afe:	220c      	movs	r2, #12
 8003b00:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b02:	187b      	adds	r3, r7, r1
 8003b04:	2202      	movs	r2, #2
 8003b06:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b08:	187b      	adds	r3, r7, r1
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b0e:	187b      	adds	r3, r7, r1
 8003b10:	2200      	movs	r2, #0
 8003b12:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8003b14:	187b      	adds	r3, r7, r1
 8003b16:	2201      	movs	r2, #1
 8003b18:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b1a:	187a      	adds	r2, r7, r1
 8003b1c:	23a0      	movs	r3, #160	; 0xa0
 8003b1e:	05db      	lsls	r3, r3, #23
 8003b20:	0011      	movs	r1, r2
 8003b22:	0018      	movs	r0, r3
 8003b24:	f001 fc7e 	bl	8005424 <HAL_GPIO_Init>
}
 8003b28:	46c0      	nop			; (mov r8, r8)
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	b00d      	add	sp, #52	; 0x34
 8003b2e:	bd90      	pop	{r4, r7, pc}
 8003b30:	40013800 	.word	0x40013800
 8003b34:	40021000 	.word	0x40021000
 8003b38:	50000800 	.word	0x50000800
 8003b3c:	40004400 	.word	0x40004400

08003b40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003b44:	e7fe      	b.n	8003b44 <NMI_Handler+0x4>

08003b46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b46:	b580      	push	{r7, lr}
 8003b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b4a:	e7fe      	b.n	8003b4a <HardFault_Handler+0x4>

08003b4c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003b50:	46c0      	nop			; (mov r8, r8)
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}

08003b56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003b56:	b580      	push	{r7, lr}
 8003b58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003b5a:	46c0      	nop			; (mov r8, r8)
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}

08003b60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003b64:	f000 f98a 	bl	8003e7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003b68:	46c0      	nop			; (mov r8, r8)
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}

08003b6e <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8003b6e:	b580      	push	{r7, lr}
 8003b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8003b72:	2380      	movs	r3, #128	; 0x80
 8003b74:	005b      	lsls	r3, r3, #1
 8003b76:	0018      	movs	r0, r3
 8003b78:	f001 fdd6 	bl	8005728 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8003b7c:	46c0      	nop			; (mov r8, r8)
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
	...

08003b84 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003b88:	4b03      	ldr	r3, [pc, #12]	; (8003b98 <DMA1_Channel1_IRQHandler+0x14>)
 8003b8a:	0018      	movs	r0, r3
 8003b8c:	f001 fb08 	bl	80051a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003b90:	46c0      	nop			; (mov r8, r8)
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	46c0      	nop			; (mov r8, r8)
 8003b98:	20000264 	.word	0x20000264

08003b9c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003ba0:	4b03      	ldr	r3, [pc, #12]	; (8003bb0 <TIM3_IRQHandler+0x14>)
 8003ba2:	0018      	movs	r0, r3
 8003ba4:	f003 fce0 	bl	8007568 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003ba8:	46c0      	nop			; (mov r8, r8)
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	46c0      	nop			; (mov r8, r8)
 8003bb0:	2000030c 	.word	0x2000030c

08003bb4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003bb8:	4b03      	ldr	r3, [pc, #12]	; (8003bc8 <USART1_IRQHandler+0x14>)
 8003bba:	0018      	movs	r0, r3
 8003bbc:	f004 fa0a 	bl	8007fd4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003bc0:	46c0      	nop			; (mov r8, r8)
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	46c0      	nop			; (mov r8, r8)
 8003bc8:	20000358 	.word	0x20000358

08003bcc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	af00      	add	r7, sp, #0
	return 1;
 8003bd0:	2301      	movs	r3, #1
}
 8003bd2:	0018      	movs	r0, r3
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}

08003bd8 <_kill>:

int _kill(int pid, int sig)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b082      	sub	sp, #8
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003be2:	f006 f909 	bl	8009df8 <__errno>
 8003be6:	0003      	movs	r3, r0
 8003be8:	2216      	movs	r2, #22
 8003bea:	601a      	str	r2, [r3, #0]
	return -1;
 8003bec:	2301      	movs	r3, #1
 8003bee:	425b      	negs	r3, r3
}
 8003bf0:	0018      	movs	r0, r3
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	b002      	add	sp, #8
 8003bf6:	bd80      	pop	{r7, pc}

08003bf8 <_exit>:

void _exit (int status)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b082      	sub	sp, #8
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003c00:	2301      	movs	r3, #1
 8003c02:	425a      	negs	r2, r3
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	0011      	movs	r1, r2
 8003c08:	0018      	movs	r0, r3
 8003c0a:	f7ff ffe5 	bl	8003bd8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003c0e:	e7fe      	b.n	8003c0e <_exit+0x16>

08003c10 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b086      	sub	sp, #24
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	60f8      	str	r0, [r7, #12]
 8003c18:	60b9      	str	r1, [r7, #8]
 8003c1a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	617b      	str	r3, [r7, #20]
 8003c20:	e00a      	b.n	8003c38 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003c22:	e000      	b.n	8003c26 <_read+0x16>
 8003c24:	bf00      	nop
 8003c26:	0001      	movs	r1, r0
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	1c5a      	adds	r2, r3, #1
 8003c2c:	60ba      	str	r2, [r7, #8]
 8003c2e:	b2ca      	uxtb	r2, r1
 8003c30:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	3301      	adds	r3, #1
 8003c36:	617b      	str	r3, [r7, #20]
 8003c38:	697a      	ldr	r2, [r7, #20]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	dbf0      	blt.n	8003c22 <_read+0x12>
	}

return len;
 8003c40:	687b      	ldr	r3, [r7, #4]
}
 8003c42:	0018      	movs	r0, r3
 8003c44:	46bd      	mov	sp, r7
 8003c46:	b006      	add	sp, #24
 8003c48:	bd80      	pop	{r7, pc}

08003c4a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003c4a:	b580      	push	{r7, lr}
 8003c4c:	b086      	sub	sp, #24
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	60f8      	str	r0, [r7, #12]
 8003c52:	60b9      	str	r1, [r7, #8]
 8003c54:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c56:	2300      	movs	r3, #0
 8003c58:	617b      	str	r3, [r7, #20]
 8003c5a:	e009      	b.n	8003c70 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	1c5a      	adds	r2, r3, #1
 8003c60:	60ba      	str	r2, [r7, #8]
 8003c62:	781b      	ldrb	r3, [r3, #0]
 8003c64:	0018      	movs	r0, r3
 8003c66:	e000      	b.n	8003c6a <_write+0x20>
 8003c68:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	3301      	adds	r3, #1
 8003c6e:	617b      	str	r3, [r7, #20]
 8003c70:	697a      	ldr	r2, [r7, #20]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	429a      	cmp	r2, r3
 8003c76:	dbf1      	blt.n	8003c5c <_write+0x12>
	}
	return len;
 8003c78:	687b      	ldr	r3, [r7, #4]
}
 8003c7a:	0018      	movs	r0, r3
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	b006      	add	sp, #24
 8003c80:	bd80      	pop	{r7, pc}

08003c82 <_close>:

int _close(int file)
{
 8003c82:	b580      	push	{r7, lr}
 8003c84:	b082      	sub	sp, #8
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	6078      	str	r0, [r7, #4]
	return -1;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	425b      	negs	r3, r3
}
 8003c8e:	0018      	movs	r0, r3
 8003c90:	46bd      	mov	sp, r7
 8003c92:	b002      	add	sp, #8
 8003c94:	bd80      	pop	{r7, pc}

08003c96 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003c96:	b580      	push	{r7, lr}
 8003c98:	b082      	sub	sp, #8
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	6078      	str	r0, [r7, #4]
 8003c9e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	2280      	movs	r2, #128	; 0x80
 8003ca4:	0192      	lsls	r2, r2, #6
 8003ca6:	605a      	str	r2, [r3, #4]
	return 0;
 8003ca8:	2300      	movs	r3, #0
}
 8003caa:	0018      	movs	r0, r3
 8003cac:	46bd      	mov	sp, r7
 8003cae:	b002      	add	sp, #8
 8003cb0:	bd80      	pop	{r7, pc}

08003cb2 <_isatty>:

int _isatty(int file)
{
 8003cb2:	b580      	push	{r7, lr}
 8003cb4:	b082      	sub	sp, #8
 8003cb6:	af00      	add	r7, sp, #0
 8003cb8:	6078      	str	r0, [r7, #4]
	return 1;
 8003cba:	2301      	movs	r3, #1
}
 8003cbc:	0018      	movs	r0, r3
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	b002      	add	sp, #8
 8003cc2:	bd80      	pop	{r7, pc}

08003cc4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b084      	sub	sp, #16
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	60f8      	str	r0, [r7, #12]
 8003ccc:	60b9      	str	r1, [r7, #8]
 8003cce:	607a      	str	r2, [r7, #4]
	return 0;
 8003cd0:	2300      	movs	r3, #0
}
 8003cd2:	0018      	movs	r0, r3
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	b004      	add	sp, #16
 8003cd8:	bd80      	pop	{r7, pc}
	...

08003cdc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b086      	sub	sp, #24
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003ce4:	4a14      	ldr	r2, [pc, #80]	; (8003d38 <_sbrk+0x5c>)
 8003ce6:	4b15      	ldr	r3, [pc, #84]	; (8003d3c <_sbrk+0x60>)
 8003ce8:	1ad3      	subs	r3, r2, r3
 8003cea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003cf0:	4b13      	ldr	r3, [pc, #76]	; (8003d40 <_sbrk+0x64>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d102      	bne.n	8003cfe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003cf8:	4b11      	ldr	r3, [pc, #68]	; (8003d40 <_sbrk+0x64>)
 8003cfa:	4a12      	ldr	r2, [pc, #72]	; (8003d44 <_sbrk+0x68>)
 8003cfc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003cfe:	4b10      	ldr	r3, [pc, #64]	; (8003d40 <_sbrk+0x64>)
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	18d3      	adds	r3, r2, r3
 8003d06:	693a      	ldr	r2, [r7, #16]
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d207      	bcs.n	8003d1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003d0c:	f006 f874 	bl	8009df8 <__errno>
 8003d10:	0003      	movs	r3, r0
 8003d12:	220c      	movs	r2, #12
 8003d14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003d16:	2301      	movs	r3, #1
 8003d18:	425b      	negs	r3, r3
 8003d1a:	e009      	b.n	8003d30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003d1c:	4b08      	ldr	r3, [pc, #32]	; (8003d40 <_sbrk+0x64>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003d22:	4b07      	ldr	r3, [pc, #28]	; (8003d40 <_sbrk+0x64>)
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	18d2      	adds	r2, r2, r3
 8003d2a:	4b05      	ldr	r3, [pc, #20]	; (8003d40 <_sbrk+0x64>)
 8003d2c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
}
 8003d30:	0018      	movs	r0, r3
 8003d32:	46bd      	mov	sp, r7
 8003d34:	b006      	add	sp, #24
 8003d36:	bd80      	pop	{r7, pc}
 8003d38:	20009000 	.word	0x20009000
 8003d3c:	00000400 	.word	0x00000400
 8003d40:	200005d4 	.word	0x200005d4
 8003d44:	200005f0 	.word	0x200005f0

08003d48 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003d4c:	46c0      	nop			; (mov r8, r8)
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
	...

08003d54 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003d54:	480d      	ldr	r0, [pc, #52]	; (8003d8c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003d56:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003d58:	f7ff fff6 	bl	8003d48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003d5c:	480c      	ldr	r0, [pc, #48]	; (8003d90 <LoopForever+0x6>)
  ldr r1, =_edata
 8003d5e:	490d      	ldr	r1, [pc, #52]	; (8003d94 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003d60:	4a0d      	ldr	r2, [pc, #52]	; (8003d98 <LoopForever+0xe>)
  movs r3, #0
 8003d62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003d64:	e002      	b.n	8003d6c <LoopCopyDataInit>

08003d66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003d66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003d68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003d6a:	3304      	adds	r3, #4

08003d6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003d6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003d6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003d70:	d3f9      	bcc.n	8003d66 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003d72:	4a0a      	ldr	r2, [pc, #40]	; (8003d9c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003d74:	4c0a      	ldr	r4, [pc, #40]	; (8003da0 <LoopForever+0x16>)
  movs r3, #0
 8003d76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003d78:	e001      	b.n	8003d7e <LoopFillZerobss>

08003d7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003d7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003d7c:	3204      	adds	r2, #4

08003d7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003d7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003d80:	d3fb      	bcc.n	8003d7a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003d82:	f006 f83f 	bl	8009e04 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8003d86:	f7ff f8d7 	bl	8002f38 <main>

08003d8a <LoopForever>:

LoopForever:
  b LoopForever
 8003d8a:	e7fe      	b.n	8003d8a <LoopForever>
  ldr   r0, =_estack
 8003d8c:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8003d90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003d94:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8003d98:	0800d3c4 	.word	0x0800d3c4
  ldr r2, =_sbss
 8003d9c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8003da0:	200005ec 	.word	0x200005ec

08003da4 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003da4:	e7fe      	b.n	8003da4 <ADC1_COMP_IRQHandler>
	...

08003da8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b082      	sub	sp, #8
 8003dac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003dae:	1dfb      	adds	r3, r7, #7
 8003db0:	2200      	movs	r2, #0
 8003db2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003db4:	4b0b      	ldr	r3, [pc, #44]	; (8003de4 <HAL_Init+0x3c>)
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	4b0a      	ldr	r3, [pc, #40]	; (8003de4 <HAL_Init+0x3c>)
 8003dba:	2180      	movs	r1, #128	; 0x80
 8003dbc:	0049      	lsls	r1, r1, #1
 8003dbe:	430a      	orrs	r2, r1
 8003dc0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003dc2:	2000      	movs	r0, #0
 8003dc4:	f000 f810 	bl	8003de8 <HAL_InitTick>
 8003dc8:	1e03      	subs	r3, r0, #0
 8003dca:	d003      	beq.n	8003dd4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8003dcc:	1dfb      	adds	r3, r7, #7
 8003dce:	2201      	movs	r2, #1
 8003dd0:	701a      	strb	r2, [r3, #0]
 8003dd2:	e001      	b.n	8003dd8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8003dd4:	f7ff fcdc 	bl	8003790 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003dd8:	1dfb      	adds	r3, r7, #7
 8003dda:	781b      	ldrb	r3, [r3, #0]
}
 8003ddc:	0018      	movs	r0, r3
 8003dde:	46bd      	mov	sp, r7
 8003de0:	b002      	add	sp, #8
 8003de2:	bd80      	pop	{r7, pc}
 8003de4:	40022000 	.word	0x40022000

08003de8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003de8:	b590      	push	{r4, r7, lr}
 8003dea:	b085      	sub	sp, #20
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003df0:	230f      	movs	r3, #15
 8003df2:	18fb      	adds	r3, r7, r3
 8003df4:	2200      	movs	r2, #0
 8003df6:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8003df8:	4b1d      	ldr	r3, [pc, #116]	; (8003e70 <HAL_InitTick+0x88>)
 8003dfa:	781b      	ldrb	r3, [r3, #0]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d02b      	beq.n	8003e58 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8003e00:	4b1c      	ldr	r3, [pc, #112]	; (8003e74 <HAL_InitTick+0x8c>)
 8003e02:	681c      	ldr	r4, [r3, #0]
 8003e04:	4b1a      	ldr	r3, [pc, #104]	; (8003e70 <HAL_InitTick+0x88>)
 8003e06:	781b      	ldrb	r3, [r3, #0]
 8003e08:	0019      	movs	r1, r3
 8003e0a:	23fa      	movs	r3, #250	; 0xfa
 8003e0c:	0098      	lsls	r0, r3, #2
 8003e0e:	f7fc f995 	bl	800013c <__udivsi3>
 8003e12:	0003      	movs	r3, r0
 8003e14:	0019      	movs	r1, r3
 8003e16:	0020      	movs	r0, r4
 8003e18:	f7fc f990 	bl	800013c <__udivsi3>
 8003e1c:	0003      	movs	r3, r0
 8003e1e:	0018      	movs	r0, r3
 8003e20:	f000 ffd5 	bl	8004dce <HAL_SYSTICK_Config>
 8003e24:	1e03      	subs	r3, r0, #0
 8003e26:	d112      	bne.n	8003e4e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2b03      	cmp	r3, #3
 8003e2c:	d80a      	bhi.n	8003e44 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003e2e:	6879      	ldr	r1, [r7, #4]
 8003e30:	2301      	movs	r3, #1
 8003e32:	425b      	negs	r3, r3
 8003e34:	2200      	movs	r2, #0
 8003e36:	0018      	movs	r0, r3
 8003e38:	f000 ffa4 	bl	8004d84 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003e3c:	4b0e      	ldr	r3, [pc, #56]	; (8003e78 <HAL_InitTick+0x90>)
 8003e3e:	687a      	ldr	r2, [r7, #4]
 8003e40:	601a      	str	r2, [r3, #0]
 8003e42:	e00d      	b.n	8003e60 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8003e44:	230f      	movs	r3, #15
 8003e46:	18fb      	adds	r3, r7, r3
 8003e48:	2201      	movs	r2, #1
 8003e4a:	701a      	strb	r2, [r3, #0]
 8003e4c:	e008      	b.n	8003e60 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003e4e:	230f      	movs	r3, #15
 8003e50:	18fb      	adds	r3, r7, r3
 8003e52:	2201      	movs	r2, #1
 8003e54:	701a      	strb	r2, [r3, #0]
 8003e56:	e003      	b.n	8003e60 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003e58:	230f      	movs	r3, #15
 8003e5a:	18fb      	adds	r3, r7, r3
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8003e60:	230f      	movs	r3, #15
 8003e62:	18fb      	adds	r3, r7, r3
 8003e64:	781b      	ldrb	r3, [r3, #0]
}
 8003e66:	0018      	movs	r0, r3
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	b005      	add	sp, #20
 8003e6c:	bd90      	pop	{r4, r7, pc}
 8003e6e:	46c0      	nop			; (mov r8, r8)
 8003e70:	2000000c 	.word	0x2000000c
 8003e74:	20000004 	.word	0x20000004
 8003e78:	20000008 	.word	0x20000008

08003e7c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003e80:	4b05      	ldr	r3, [pc, #20]	; (8003e98 <HAL_IncTick+0x1c>)
 8003e82:	781b      	ldrb	r3, [r3, #0]
 8003e84:	001a      	movs	r2, r3
 8003e86:	4b05      	ldr	r3, [pc, #20]	; (8003e9c <HAL_IncTick+0x20>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	18d2      	adds	r2, r2, r3
 8003e8c:	4b03      	ldr	r3, [pc, #12]	; (8003e9c <HAL_IncTick+0x20>)
 8003e8e:	601a      	str	r2, [r3, #0]
}
 8003e90:	46c0      	nop			; (mov r8, r8)
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}
 8003e96:	46c0      	nop			; (mov r8, r8)
 8003e98:	2000000c 	.word	0x2000000c
 8003e9c:	200005d8 	.word	0x200005d8

08003ea0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	af00      	add	r7, sp, #0
  return uwTick;
 8003ea4:	4b02      	ldr	r3, [pc, #8]	; (8003eb0 <HAL_GetTick+0x10>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
}
 8003ea8:	0018      	movs	r0, r3
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}
 8003eae:	46c0      	nop			; (mov r8, r8)
 8003eb0:	200005d8 	.word	0x200005d8

08003eb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b084      	sub	sp, #16
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003ebc:	f7ff fff0 	bl	8003ea0 <HAL_GetTick>
 8003ec0:	0003      	movs	r3, r0
 8003ec2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	3301      	adds	r3, #1
 8003ecc:	d005      	beq.n	8003eda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003ece:	4b0a      	ldr	r3, [pc, #40]	; (8003ef8 <HAL_Delay+0x44>)
 8003ed0:	781b      	ldrb	r3, [r3, #0]
 8003ed2:	001a      	movs	r2, r3
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	189b      	adds	r3, r3, r2
 8003ed8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003eda:	46c0      	nop			; (mov r8, r8)
 8003edc:	f7ff ffe0 	bl	8003ea0 <HAL_GetTick>
 8003ee0:	0002      	movs	r2, r0
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	68fa      	ldr	r2, [r7, #12]
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d8f7      	bhi.n	8003edc <HAL_Delay+0x28>
  {
  }
}
 8003eec:	46c0      	nop			; (mov r8, r8)
 8003eee:	46c0      	nop			; (mov r8, r8)
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	b004      	add	sp, #16
 8003ef4:	bd80      	pop	{r7, pc}
 8003ef6:	46c0      	nop			; (mov r8, r8)
 8003ef8:	2000000c 	.word	0x2000000c

08003efc <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b082      	sub	sp, #8
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8003f04:	4b06      	ldr	r3, [pc, #24]	; (8003f20 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a06      	ldr	r2, [pc, #24]	; (8003f24 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8003f0a:	4013      	ands	r3, r2
 8003f0c:	0019      	movs	r1, r3
 8003f0e:	4b04      	ldr	r3, [pc, #16]	; (8003f20 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8003f10:	687a      	ldr	r2, [r7, #4]
 8003f12:	430a      	orrs	r2, r1
 8003f14:	601a      	str	r2, [r3, #0]
}
 8003f16:	46c0      	nop			; (mov r8, r8)
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	b002      	add	sp, #8
 8003f1c:	bd80      	pop	{r7, pc}
 8003f1e:	46c0      	nop			; (mov r8, r8)
 8003f20:	40010000 	.word	0x40010000
 8003f24:	fffff9ff 	.word	0xfffff9ff

08003f28 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b082      	sub	sp, #8
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
 8003f30:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a05      	ldr	r2, [pc, #20]	; (8003f4c <LL_ADC_SetCommonPathInternalCh+0x24>)
 8003f38:	401a      	ands	r2, r3
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	431a      	orrs	r2, r3
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	601a      	str	r2, [r3, #0]
}
 8003f42:	46c0      	nop			; (mov r8, r8)
 8003f44:	46bd      	mov	sp, r7
 8003f46:	b002      	add	sp, #8
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	46c0      	nop			; (mov r8, r8)
 8003f4c:	fe3fffff 	.word	0xfe3fffff

08003f50 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b082      	sub	sp, #8
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	23e0      	movs	r3, #224	; 0xe0
 8003f5e:	045b      	lsls	r3, r3, #17
 8003f60:	4013      	ands	r3, r2
}
 8003f62:	0018      	movs	r0, r3
 8003f64:	46bd      	mov	sp, r7
 8003f66:	b002      	add	sp, #8
 8003f68:	bd80      	pop	{r7, pc}

08003f6a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8003f6a:	b580      	push	{r7, lr}
 8003f6c:	b084      	sub	sp, #16
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	60f8      	str	r0, [r7, #12]
 8003f72:	60b9      	str	r1, [r7, #8]
 8003f74:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	695b      	ldr	r3, [r3, #20]
 8003f7a:	68ba      	ldr	r2, [r7, #8]
 8003f7c:	2104      	movs	r1, #4
 8003f7e:	400a      	ands	r2, r1
 8003f80:	2107      	movs	r1, #7
 8003f82:	4091      	lsls	r1, r2
 8003f84:	000a      	movs	r2, r1
 8003f86:	43d2      	mvns	r2, r2
 8003f88:	401a      	ands	r2, r3
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	2104      	movs	r1, #4
 8003f8e:	400b      	ands	r3, r1
 8003f90:	6879      	ldr	r1, [r7, #4]
 8003f92:	4099      	lsls	r1, r3
 8003f94:	000b      	movs	r3, r1
 8003f96:	431a      	orrs	r2, r3
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8003f9c:	46c0      	nop			; (mov r8, r8)
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	b004      	add	sp, #16
 8003fa2:	bd80      	pop	{r7, pc}

08003fa4 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b082      	sub	sp, #8
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	695b      	ldr	r3, [r3, #20]
 8003fb2:	683a      	ldr	r2, [r7, #0]
 8003fb4:	2104      	movs	r1, #4
 8003fb6:	400a      	ands	r2, r1
 8003fb8:	2107      	movs	r1, #7
 8003fba:	4091      	lsls	r1, r2
 8003fbc:	000a      	movs	r2, r1
 8003fbe:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	2104      	movs	r1, #4
 8003fc4:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8003fc6:	40da      	lsrs	r2, r3
 8003fc8:	0013      	movs	r3, r2
}
 8003fca:	0018      	movs	r0, r3
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	b002      	add	sp, #8
 8003fd0:	bd80      	pop	{r7, pc}

08003fd2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003fd2:	b580      	push	{r7, lr}
 8003fd4:	b082      	sub	sp, #8
 8003fd6:	af00      	add	r7, sp, #0
 8003fd8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	68da      	ldr	r2, [r3, #12]
 8003fde:	23c0      	movs	r3, #192	; 0xc0
 8003fe0:	011b      	lsls	r3, r3, #4
 8003fe2:	4013      	ands	r3, r2
 8003fe4:	d101      	bne.n	8003fea <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e000      	b.n	8003fec <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003fea:	2300      	movs	r3, #0
}
 8003fec:	0018      	movs	r0, r3
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	b002      	add	sp, #8
 8003ff2:	bd80      	pop	{r7, pc}

08003ff4 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b084      	sub	sp, #16
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	60f8      	str	r0, [r7, #12]
 8003ffc:	60b9      	str	r1, [r7, #8]
 8003ffe:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004004:	68ba      	ldr	r2, [r7, #8]
 8004006:	211f      	movs	r1, #31
 8004008:	400a      	ands	r2, r1
 800400a:	210f      	movs	r1, #15
 800400c:	4091      	lsls	r1, r2
 800400e:	000a      	movs	r2, r1
 8004010:	43d2      	mvns	r2, r2
 8004012:	401a      	ands	r2, r3
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	0e9b      	lsrs	r3, r3, #26
 8004018:	210f      	movs	r1, #15
 800401a:	4019      	ands	r1, r3
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	201f      	movs	r0, #31
 8004020:	4003      	ands	r3, r0
 8004022:	4099      	lsls	r1, r3
 8004024:	000b      	movs	r3, r1
 8004026:	431a      	orrs	r2, r3
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800402c:	46c0      	nop			; (mov r8, r8)
 800402e:	46bd      	mov	sp, r7
 8004030:	b004      	add	sp, #16
 8004032:	bd80      	pop	{r7, pc}

08004034 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b082      	sub	sp, #8
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
 800403c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	035b      	lsls	r3, r3, #13
 8004046:	0b5b      	lsrs	r3, r3, #13
 8004048:	431a      	orrs	r2, r3
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800404e:	46c0      	nop			; (mov r8, r8)
 8004050:	46bd      	mov	sp, r7
 8004052:	b002      	add	sp, #8
 8004054:	bd80      	pop	{r7, pc}

08004056 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8004056:	b580      	push	{r7, lr}
 8004058:	b082      	sub	sp, #8
 800405a:	af00      	add	r7, sp, #0
 800405c:	6078      	str	r0, [r7, #4]
 800405e:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004064:	683a      	ldr	r2, [r7, #0]
 8004066:	0352      	lsls	r2, r2, #13
 8004068:	0b52      	lsrs	r2, r2, #13
 800406a:	43d2      	mvns	r2, r2
 800406c:	401a      	ands	r2, r3
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004072:	46c0      	nop			; (mov r8, r8)
 8004074:	46bd      	mov	sp, r7
 8004076:	b002      	add	sp, #8
 8004078:	bd80      	pop	{r7, pc}
	...

0800407c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b084      	sub	sp, #16
 8004080:	af00      	add	r7, sp, #0
 8004082:	60f8      	str	r0, [r7, #12]
 8004084:	60b9      	str	r1, [r7, #8]
 8004086:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	695b      	ldr	r3, [r3, #20]
 800408c:	68ba      	ldr	r2, [r7, #8]
 800408e:	0212      	lsls	r2, r2, #8
 8004090:	43d2      	mvns	r2, r2
 8004092:	401a      	ands	r2, r3
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	021b      	lsls	r3, r3, #8
 8004098:	6879      	ldr	r1, [r7, #4]
 800409a:	400b      	ands	r3, r1
 800409c:	4904      	ldr	r1, [pc, #16]	; (80040b0 <LL_ADC_SetChannelSamplingTime+0x34>)
 800409e:	400b      	ands	r3, r1
 80040a0:	431a      	orrs	r2, r3
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80040a6:	46c0      	nop			; (mov r8, r8)
 80040a8:	46bd      	mov	sp, r7
 80040aa:	b004      	add	sp, #16
 80040ac:	bd80      	pop	{r7, pc}
 80040ae:	46c0      	nop			; (mov r8, r8)
 80040b0:	07ffff00 	.word	0x07ffff00

080040b4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b082      	sub	sp, #8
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	4a05      	ldr	r2, [pc, #20]	; (80040d8 <LL_ADC_EnableInternalRegulator+0x24>)
 80040c2:	4013      	ands	r3, r2
 80040c4:	2280      	movs	r2, #128	; 0x80
 80040c6:	0552      	lsls	r2, r2, #21
 80040c8:	431a      	orrs	r2, r3
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80040ce:	46c0      	nop			; (mov r8, r8)
 80040d0:	46bd      	mov	sp, r7
 80040d2:	b002      	add	sp, #8
 80040d4:	bd80      	pop	{r7, pc}
 80040d6:	46c0      	nop			; (mov r8, r8)
 80040d8:	6fffffe8 	.word	0x6fffffe8

080040dc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b082      	sub	sp, #8
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	689a      	ldr	r2, [r3, #8]
 80040e8:	2380      	movs	r3, #128	; 0x80
 80040ea:	055b      	lsls	r3, r3, #21
 80040ec:	401a      	ands	r2, r3
 80040ee:	2380      	movs	r3, #128	; 0x80
 80040f0:	055b      	lsls	r3, r3, #21
 80040f2:	429a      	cmp	r2, r3
 80040f4:	d101      	bne.n	80040fa <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80040f6:	2301      	movs	r3, #1
 80040f8:	e000      	b.n	80040fc <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80040fa:	2300      	movs	r3, #0
}
 80040fc:	0018      	movs	r0, r3
 80040fe:	46bd      	mov	sp, r7
 8004100:	b002      	add	sp, #8
 8004102:	bd80      	pop	{r7, pc}

08004104 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b082      	sub	sp, #8
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	4a04      	ldr	r2, [pc, #16]	; (8004124 <LL_ADC_Enable+0x20>)
 8004112:	4013      	ands	r3, r2
 8004114:	2201      	movs	r2, #1
 8004116:	431a      	orrs	r2, r3
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800411c:	46c0      	nop			; (mov r8, r8)
 800411e:	46bd      	mov	sp, r7
 8004120:	b002      	add	sp, #8
 8004122:	bd80      	pop	{r7, pc}
 8004124:	7fffffe8 	.word	0x7fffffe8

08004128 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b082      	sub	sp, #8
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	4a04      	ldr	r2, [pc, #16]	; (8004148 <LL_ADC_Disable+0x20>)
 8004136:	4013      	ands	r3, r2
 8004138:	2202      	movs	r2, #2
 800413a:	431a      	orrs	r2, r3
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8004140:	46c0      	nop			; (mov r8, r8)
 8004142:	46bd      	mov	sp, r7
 8004144:	b002      	add	sp, #8
 8004146:	bd80      	pop	{r7, pc}
 8004148:	7fffffe8 	.word	0x7fffffe8

0800414c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b082      	sub	sp, #8
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	2201      	movs	r2, #1
 800415a:	4013      	ands	r3, r2
 800415c:	2b01      	cmp	r3, #1
 800415e:	d101      	bne.n	8004164 <LL_ADC_IsEnabled+0x18>
 8004160:	2301      	movs	r3, #1
 8004162:	e000      	b.n	8004166 <LL_ADC_IsEnabled+0x1a>
 8004164:	2300      	movs	r3, #0
}
 8004166:	0018      	movs	r0, r3
 8004168:	46bd      	mov	sp, r7
 800416a:	b002      	add	sp, #8
 800416c:	bd80      	pop	{r7, pc}
	...

08004170 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b082      	sub	sp, #8
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	4a04      	ldr	r2, [pc, #16]	; (8004190 <LL_ADC_REG_StartConversion+0x20>)
 800417e:	4013      	ands	r3, r2
 8004180:	2204      	movs	r2, #4
 8004182:	431a      	orrs	r2, r3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004188:	46c0      	nop			; (mov r8, r8)
 800418a:	46bd      	mov	sp, r7
 800418c:	b002      	add	sp, #8
 800418e:	bd80      	pop	{r7, pc}
 8004190:	7fffffe8 	.word	0x7fffffe8

08004194 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b082      	sub	sp, #8
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	2204      	movs	r2, #4
 80041a2:	4013      	ands	r3, r2
 80041a4:	2b04      	cmp	r3, #4
 80041a6:	d101      	bne.n	80041ac <LL_ADC_REG_IsConversionOngoing+0x18>
 80041a8:	2301      	movs	r3, #1
 80041aa:	e000      	b.n	80041ae <LL_ADC_REG_IsConversionOngoing+0x1a>
 80041ac:	2300      	movs	r3, #0
}
 80041ae:	0018      	movs	r0, r3
 80041b0:	46bd      	mov	sp, r7
 80041b2:	b002      	add	sp, #8
 80041b4:	bd80      	pop	{r7, pc}
	...

080041b8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b088      	sub	sp, #32
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80041c0:	231f      	movs	r3, #31
 80041c2:	18fb      	adds	r3, r7, r3
 80041c4:	2200      	movs	r2, #0
 80041c6:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 80041c8:	2300      	movs	r3, #0
 80041ca:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 80041cc:	2300      	movs	r3, #0
 80041ce:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80041d0:	2300      	movs	r3, #0
 80041d2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d101      	bne.n	80041de <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e17f      	b.n	80044de <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d10a      	bne.n	80041fc <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	0018      	movs	r0, r3
 80041ea:	f7ff faf9 	bl	80037e0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2200      	movs	r2, #0
 80041f2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2254      	movs	r2, #84	; 0x54
 80041f8:	2100      	movs	r1, #0
 80041fa:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	0018      	movs	r0, r3
 8004202:	f7ff ff6b 	bl	80040dc <LL_ADC_IsInternalRegulatorEnabled>
 8004206:	1e03      	subs	r3, r0, #0
 8004208:	d115      	bne.n	8004236 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	0018      	movs	r0, r3
 8004210:	f7ff ff50 	bl	80040b4 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004214:	4bb4      	ldr	r3, [pc, #720]	; (80044e8 <HAL_ADC_Init+0x330>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	49b4      	ldr	r1, [pc, #720]	; (80044ec <HAL_ADC_Init+0x334>)
 800421a:	0018      	movs	r0, r3
 800421c:	f7fb ff8e 	bl	800013c <__udivsi3>
 8004220:	0003      	movs	r3, r0
 8004222:	3301      	adds	r3, #1
 8004224:	005b      	lsls	r3, r3, #1
 8004226:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004228:	e002      	b.n	8004230 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	3b01      	subs	r3, #1
 800422e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d1f9      	bne.n	800422a <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	0018      	movs	r0, r3
 800423c:	f7ff ff4e 	bl	80040dc <LL_ADC_IsInternalRegulatorEnabled>
 8004240:	1e03      	subs	r3, r0, #0
 8004242:	d10f      	bne.n	8004264 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004248:	2210      	movs	r2, #16
 800424a:	431a      	orrs	r2, r3
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004254:	2201      	movs	r2, #1
 8004256:	431a      	orrs	r2, r3
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800425c:	231f      	movs	r3, #31
 800425e:	18fb      	adds	r3, r7, r3
 8004260:	2201      	movs	r2, #1
 8004262:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	0018      	movs	r0, r3
 800426a:	f7ff ff93 	bl	8004194 <LL_ADC_REG_IsConversionOngoing>
 800426e:	0003      	movs	r3, r0
 8004270:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004276:	2210      	movs	r2, #16
 8004278:	4013      	ands	r3, r2
 800427a:	d000      	beq.n	800427e <HAL_ADC_Init+0xc6>
 800427c:	e122      	b.n	80044c4 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d000      	beq.n	8004286 <HAL_ADC_Init+0xce>
 8004284:	e11e      	b.n	80044c4 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800428a:	4a99      	ldr	r2, [pc, #612]	; (80044f0 <HAL_ADC_Init+0x338>)
 800428c:	4013      	ands	r3, r2
 800428e:	2202      	movs	r2, #2
 8004290:	431a      	orrs	r2, r3
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	0018      	movs	r0, r3
 800429c:	f7ff ff56 	bl	800414c <LL_ADC_IsEnabled>
 80042a0:	1e03      	subs	r3, r0, #0
 80042a2:	d000      	beq.n	80042a6 <HAL_ADC_Init+0xee>
 80042a4:	e0ad      	b.n	8004402 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	7e1b      	ldrb	r3, [r3, #24]
 80042ae:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80042b0:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	7e5b      	ldrb	r3, [r3, #25]
 80042b6:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80042b8:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	7e9b      	ldrb	r3, [r3, #26]
 80042be:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80042c0:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d002      	beq.n	80042d0 <HAL_ADC_Init+0x118>
 80042ca:	2380      	movs	r3, #128	; 0x80
 80042cc:	015b      	lsls	r3, r3, #5
 80042ce:	e000      	b.n	80042d2 <HAL_ADC_Init+0x11a>
 80042d0:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80042d2:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80042d8:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	691b      	ldr	r3, [r3, #16]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	da04      	bge.n	80042ec <HAL_ADC_Init+0x134>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	691b      	ldr	r3, [r3, #16]
 80042e6:	005b      	lsls	r3, r3, #1
 80042e8:	085b      	lsrs	r3, r3, #1
 80042ea:	e001      	b.n	80042f0 <HAL_ADC_Init+0x138>
 80042ec:	2380      	movs	r3, #128	; 0x80
 80042ee:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 80042f0:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	212c      	movs	r1, #44	; 0x2c
 80042f6:	5c5b      	ldrb	r3, [r3, r1]
 80042f8:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80042fa:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80042fc:	69ba      	ldr	r2, [r7, #24]
 80042fe:	4313      	orrs	r3, r2
 8004300:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2220      	movs	r2, #32
 8004306:	5c9b      	ldrb	r3, [r3, r2]
 8004308:	2b01      	cmp	r3, #1
 800430a:	d115      	bne.n	8004338 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	7e9b      	ldrb	r3, [r3, #26]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d105      	bne.n	8004320 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8004314:	69bb      	ldr	r3, [r7, #24]
 8004316:	2280      	movs	r2, #128	; 0x80
 8004318:	0252      	lsls	r2, r2, #9
 800431a:	4313      	orrs	r3, r2
 800431c:	61bb      	str	r3, [r7, #24]
 800431e:	e00b      	b.n	8004338 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004324:	2220      	movs	r2, #32
 8004326:	431a      	orrs	r2, r3
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004330:	2201      	movs	r2, #1
 8004332:	431a      	orrs	r2, r3
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800433c:	2b00      	cmp	r3, #0
 800433e:	d00a      	beq.n	8004356 <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004344:	23e0      	movs	r3, #224	; 0xe0
 8004346:	005b      	lsls	r3, r3, #1
 8004348:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800434e:	4313      	orrs	r3, r2
 8004350:	69ba      	ldr	r2, [r7, #24]
 8004352:	4313      	orrs	r3, r2
 8004354:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	68db      	ldr	r3, [r3, #12]
 800435c:	4a65      	ldr	r2, [pc, #404]	; (80044f4 <HAL_ADC_Init+0x33c>)
 800435e:	4013      	ands	r3, r2
 8004360:	0019      	movs	r1, r3
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	69ba      	ldr	r2, [r7, #24]
 8004368:	430a      	orrs	r2, r1
 800436a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	0f9b      	lsrs	r3, r3, #30
 8004372:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8004378:	4313      	orrs	r3, r2
 800437a:	697a      	ldr	r2, [r7, #20]
 800437c:	4313      	orrs	r3, r2
 800437e:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	223c      	movs	r2, #60	; 0x3c
 8004384:	5c9b      	ldrb	r3, [r3, r2]
 8004386:	2b01      	cmp	r3, #1
 8004388:	d111      	bne.n	80043ae <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	0f9b      	lsrs	r3, r3, #30
 8004390:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8004396:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 800439c:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 80043a2:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	4313      	orrs	r3, r2
 80043a8:	2201      	movs	r2, #1
 80043aa:	4313      	orrs	r3, r2
 80043ac:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	691b      	ldr	r3, [r3, #16]
 80043b4:	4a50      	ldr	r2, [pc, #320]	; (80044f8 <HAL_ADC_Init+0x340>)
 80043b6:	4013      	ands	r3, r2
 80043b8:	0019      	movs	r1, r3
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	697a      	ldr	r2, [r7, #20]
 80043c0:	430a      	orrs	r2, r1
 80043c2:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	685a      	ldr	r2, [r3, #4]
 80043c8:	23c0      	movs	r3, #192	; 0xc0
 80043ca:	061b      	lsls	r3, r3, #24
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d018      	beq.n	8004402 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80043d4:	2380      	movs	r3, #128	; 0x80
 80043d6:	05db      	lsls	r3, r3, #23
 80043d8:	429a      	cmp	r2, r3
 80043da:	d012      	beq.n	8004402 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80043e0:	2380      	movs	r3, #128	; 0x80
 80043e2:	061b      	lsls	r3, r3, #24
 80043e4:	429a      	cmp	r2, r3
 80043e6:	d00c      	beq.n	8004402 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80043e8:	4b44      	ldr	r3, [pc, #272]	; (80044fc <HAL_ADC_Init+0x344>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a44      	ldr	r2, [pc, #272]	; (8004500 <HAL_ADC_Init+0x348>)
 80043ee:	4013      	ands	r3, r2
 80043f0:	0019      	movs	r1, r3
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	685a      	ldr	r2, [r3, #4]
 80043f6:	23f0      	movs	r3, #240	; 0xf0
 80043f8:	039b      	lsls	r3, r3, #14
 80043fa:	401a      	ands	r2, r3
 80043fc:	4b3f      	ldr	r3, [pc, #252]	; (80044fc <HAL_ADC_Init+0x344>)
 80043fe:	430a      	orrs	r2, r1
 8004400:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6818      	ldr	r0, [r3, #0]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800440a:	001a      	movs	r2, r3
 800440c:	2100      	movs	r1, #0
 800440e:	f7ff fdac 	bl	8003f6a <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6818      	ldr	r0, [r3, #0]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800441a:	493a      	ldr	r1, [pc, #232]	; (8004504 <HAL_ADC_Init+0x34c>)
 800441c:	001a      	movs	r2, r3
 800441e:	f7ff fda4 	bl	8003f6a <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	691b      	ldr	r3, [r3, #16]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d109      	bne.n	800443e <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	2110      	movs	r1, #16
 8004436:	4249      	negs	r1, r1
 8004438:	430a      	orrs	r2, r1
 800443a:	629a      	str	r2, [r3, #40]	; 0x28
 800443c:	e018      	b.n	8004470 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	691a      	ldr	r2, [r3, #16]
 8004442:	2380      	movs	r3, #128	; 0x80
 8004444:	039b      	lsls	r3, r3, #14
 8004446:	429a      	cmp	r2, r3
 8004448:	d112      	bne.n	8004470 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	69db      	ldr	r3, [r3, #28]
 8004454:	3b01      	subs	r3, #1
 8004456:	009b      	lsls	r3, r3, #2
 8004458:	221c      	movs	r2, #28
 800445a:	4013      	ands	r3, r2
 800445c:	2210      	movs	r2, #16
 800445e:	4252      	negs	r2, r2
 8004460:	409a      	lsls	r2, r3
 8004462:	0011      	movs	r1, r2
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	430a      	orrs	r2, r1
 800446e:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	2100      	movs	r1, #0
 8004476:	0018      	movs	r0, r3
 8004478:	f7ff fd94 	bl	8003fa4 <LL_ADC_GetSamplingTimeCommonChannels>
 800447c:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004482:	429a      	cmp	r2, r3
 8004484:	d10b      	bne.n	800449e <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2200      	movs	r2, #0
 800448a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004490:	2203      	movs	r2, #3
 8004492:	4393      	bics	r3, r2
 8004494:	2201      	movs	r2, #1
 8004496:	431a      	orrs	r2, r3
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800449c:	e01c      	b.n	80044d8 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044a2:	2212      	movs	r2, #18
 80044a4:	4393      	bics	r3, r2
 80044a6:	2210      	movs	r2, #16
 80044a8:	431a      	orrs	r2, r3
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044b2:	2201      	movs	r2, #1
 80044b4:	431a      	orrs	r2, r3
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 80044ba:	231f      	movs	r3, #31
 80044bc:	18fb      	adds	r3, r7, r3
 80044be:	2201      	movs	r2, #1
 80044c0:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80044c2:	e009      	b.n	80044d8 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044c8:	2210      	movs	r2, #16
 80044ca:	431a      	orrs	r2, r3
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80044d0:	231f      	movs	r3, #31
 80044d2:	18fb      	adds	r3, r7, r3
 80044d4:	2201      	movs	r2, #1
 80044d6:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80044d8:	231f      	movs	r3, #31
 80044da:	18fb      	adds	r3, r7, r3
 80044dc:	781b      	ldrb	r3, [r3, #0]
}
 80044de:	0018      	movs	r0, r3
 80044e0:	46bd      	mov	sp, r7
 80044e2:	b008      	add	sp, #32
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	46c0      	nop			; (mov r8, r8)
 80044e8:	20000004 	.word	0x20000004
 80044ec:	00030d40 	.word	0x00030d40
 80044f0:	fffffefd 	.word	0xfffffefd
 80044f4:	fffe0201 	.word	0xfffe0201
 80044f8:	1ffffc02 	.word	0x1ffffc02
 80044fc:	40012708 	.word	0x40012708
 8004500:	ffc3ffff 	.word	0xffc3ffff
 8004504:	07ffff04 	.word	0x07ffff04

08004508 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004508:	b5b0      	push	{r4, r5, r7, lr}
 800450a:	b086      	sub	sp, #24
 800450c:	af00      	add	r7, sp, #0
 800450e:	60f8      	str	r0, [r7, #12]
 8004510:	60b9      	str	r1, [r7, #8]
 8004512:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	0018      	movs	r0, r3
 800451a:	f7ff fe3b 	bl	8004194 <LL_ADC_REG_IsConversionOngoing>
 800451e:	1e03      	subs	r3, r0, #0
 8004520:	d16c      	bne.n	80045fc <HAL_ADC_Start_DMA+0xf4>
  {
    __HAL_LOCK(hadc);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2254      	movs	r2, #84	; 0x54
 8004526:	5c9b      	ldrb	r3, [r3, r2]
 8004528:	2b01      	cmp	r3, #1
 800452a:	d101      	bne.n	8004530 <HAL_ADC_Start_DMA+0x28>
 800452c:	2302      	movs	r3, #2
 800452e:	e06c      	b.n	800460a <HAL_ADC_Start_DMA+0x102>
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2254      	movs	r2, #84	; 0x54
 8004534:	2101      	movs	r1, #1
 8004536:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	68db      	ldr	r3, [r3, #12]
 800453e:	2201      	movs	r2, #1
 8004540:	4013      	ands	r3, r2
 8004542:	d113      	bne.n	800456c <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	0018      	movs	r0, r3
 800454a:	f7ff fdff 	bl	800414c <LL_ADC_IsEnabled>
 800454e:	1e03      	subs	r3, r0, #0
 8004550:	d004      	beq.n	800455c <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	0018      	movs	r0, r3
 8004558:	f7ff fde6 	bl	8004128 <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	68da      	ldr	r2, [r3, #12]
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	2101      	movs	r1, #1
 8004568:	430a      	orrs	r2, r1
 800456a:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800456c:	2517      	movs	r5, #23
 800456e:	197c      	adds	r4, r7, r5
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	0018      	movs	r0, r3
 8004574:	f000 fa46 	bl	8004a04 <ADC_Enable>
 8004578:	0003      	movs	r3, r0
 800457a:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800457c:	002c      	movs	r4, r5
 800457e:	193b      	adds	r3, r7, r4
 8004580:	781b      	ldrb	r3, [r3, #0]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d13e      	bne.n	8004604 <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800458a:	4a22      	ldr	r2, [pc, #136]	; (8004614 <HAL_ADC_Start_DMA+0x10c>)
 800458c:	4013      	ands	r3, r2
 800458e:	2280      	movs	r2, #128	; 0x80
 8004590:	0052      	lsls	r2, r2, #1
 8004592:	431a      	orrs	r2, r3
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2200      	movs	r2, #0
 800459c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045a2:	4a1d      	ldr	r2, [pc, #116]	; (8004618 <HAL_ADC_Start_DMA+0x110>)
 80045a4:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045aa:	4a1c      	ldr	r2, [pc, #112]	; (800461c <HAL_ADC_Start_DMA+0x114>)
 80045ac:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045b2:	4a1b      	ldr	r2, [pc, #108]	; (8004620 <HAL_ADC_Start_DMA+0x118>)
 80045b4:	635a      	str	r2, [r3, #52]	; 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	221c      	movs	r2, #28
 80045bc:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2254      	movs	r2, #84	; 0x54
 80045c2:	2100      	movs	r1, #0
 80045c4:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	685a      	ldr	r2, [r3, #4]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	2110      	movs	r1, #16
 80045d2:	430a      	orrs	r2, r1
 80045d4:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	3340      	adds	r3, #64	; 0x40
 80045e0:	0019      	movs	r1, r3
 80045e2:	68ba      	ldr	r2, [r7, #8]
 80045e4:	193c      	adds	r4, r7, r4
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f000 fc88 	bl	8004efc <HAL_DMA_Start_IT>
 80045ec:	0003      	movs	r3, r0
 80045ee:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	0018      	movs	r0, r3
 80045f6:	f7ff fdbb 	bl	8004170 <LL_ADC_REG_StartConversion>
 80045fa:	e003      	b.n	8004604 <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80045fc:	2317      	movs	r3, #23
 80045fe:	18fb      	adds	r3, r7, r3
 8004600:	2202      	movs	r2, #2
 8004602:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8004604:	2317      	movs	r3, #23
 8004606:	18fb      	adds	r3, r7, r3
 8004608:	781b      	ldrb	r3, [r3, #0]
}
 800460a:	0018      	movs	r0, r3
 800460c:	46bd      	mov	sp, r7
 800460e:	b006      	add	sp, #24
 8004610:	bdb0      	pop	{r4, r5, r7, pc}
 8004612:	46c0      	nop			; (mov r8, r8)
 8004614:	fffff0fe 	.word	0xfffff0fe
 8004618:	08004b11 	.word	0x08004b11
 800461c:	08004bd9 	.word	0x08004bd9
 8004620:	08004bf7 	.word	0x08004bf7

08004624 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b082      	sub	sp, #8
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800462c:	46c0      	nop			; (mov r8, r8)
 800462e:	46bd      	mov	sp, r7
 8004630:	b002      	add	sp, #8
 8004632:	bd80      	pop	{r7, pc}

08004634 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b082      	sub	sp, #8
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800463c:	46c0      	nop			; (mov r8, r8)
 800463e:	46bd      	mov	sp, r7
 8004640:	b002      	add	sp, #8
 8004642:	bd80      	pop	{r7, pc}

08004644 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b082      	sub	sp, #8
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800464c:	46c0      	nop			; (mov r8, r8)
 800464e:	46bd      	mov	sp, r7
 8004650:	b002      	add	sp, #8
 8004652:	bd80      	pop	{r7, pc}

08004654 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b086      	sub	sp, #24
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
 800465c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800465e:	2317      	movs	r3, #23
 8004660:	18fb      	adds	r3, r7, r3
 8004662:	2200      	movs	r2, #0
 8004664:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004666:	2300      	movs	r3, #0
 8004668:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2254      	movs	r2, #84	; 0x54
 800466e:	5c9b      	ldrb	r3, [r3, r2]
 8004670:	2b01      	cmp	r3, #1
 8004672:	d101      	bne.n	8004678 <HAL_ADC_ConfigChannel+0x24>
 8004674:	2302      	movs	r3, #2
 8004676:	e1c0      	b.n	80049fa <HAL_ADC_ConfigChannel+0x3a6>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2254      	movs	r2, #84	; 0x54
 800467c:	2101      	movs	r1, #1
 800467e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	0018      	movs	r0, r3
 8004686:	f7ff fd85 	bl	8004194 <LL_ADC_REG_IsConversionOngoing>
 800468a:	1e03      	subs	r3, r0, #0
 800468c:	d000      	beq.n	8004690 <HAL_ADC_ConfigChannel+0x3c>
 800468e:	e1a3      	b.n	80049d8 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	2b02      	cmp	r3, #2
 8004696:	d100      	bne.n	800469a <HAL_ADC_ConfigChannel+0x46>
 8004698:	e143      	b.n	8004922 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	691a      	ldr	r2, [r3, #16]
 800469e:	2380      	movs	r3, #128	; 0x80
 80046a0:	061b      	lsls	r3, r3, #24
 80046a2:	429a      	cmp	r2, r3
 80046a4:	d004      	beq.n	80046b0 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80046aa:	4ac1      	ldr	r2, [pc, #772]	; (80049b0 <HAL_ADC_ConfigChannel+0x35c>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d108      	bne.n	80046c2 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	0019      	movs	r1, r3
 80046ba:	0010      	movs	r0, r2
 80046bc:	f7ff fcba 	bl	8004034 <LL_ADC_REG_SetSequencerChAdd>
 80046c0:	e0c9      	b.n	8004856 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	211f      	movs	r1, #31
 80046cc:	400b      	ands	r3, r1
 80046ce:	210f      	movs	r1, #15
 80046d0:	4099      	lsls	r1, r3
 80046d2:	000b      	movs	r3, r1
 80046d4:	43db      	mvns	r3, r3
 80046d6:	4013      	ands	r3, r2
 80046d8:	0019      	movs	r1, r3
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	035b      	lsls	r3, r3, #13
 80046e0:	0b5b      	lsrs	r3, r3, #13
 80046e2:	d105      	bne.n	80046f0 <HAL_ADC_ConfigChannel+0x9c>
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	0e9b      	lsrs	r3, r3, #26
 80046ea:	221f      	movs	r2, #31
 80046ec:	4013      	ands	r3, r2
 80046ee:	e098      	b.n	8004822 <HAL_ADC_ConfigChannel+0x1ce>
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	2201      	movs	r2, #1
 80046f6:	4013      	ands	r3, r2
 80046f8:	d000      	beq.n	80046fc <HAL_ADC_ConfigChannel+0xa8>
 80046fa:	e091      	b.n	8004820 <HAL_ADC_ConfigChannel+0x1cc>
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	2202      	movs	r2, #2
 8004702:	4013      	ands	r3, r2
 8004704:	d000      	beq.n	8004708 <HAL_ADC_ConfigChannel+0xb4>
 8004706:	e089      	b.n	800481c <HAL_ADC_ConfigChannel+0x1c8>
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	2204      	movs	r2, #4
 800470e:	4013      	ands	r3, r2
 8004710:	d000      	beq.n	8004714 <HAL_ADC_ConfigChannel+0xc0>
 8004712:	e081      	b.n	8004818 <HAL_ADC_ConfigChannel+0x1c4>
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	2208      	movs	r2, #8
 800471a:	4013      	ands	r3, r2
 800471c:	d000      	beq.n	8004720 <HAL_ADC_ConfigChannel+0xcc>
 800471e:	e079      	b.n	8004814 <HAL_ADC_ConfigChannel+0x1c0>
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	2210      	movs	r2, #16
 8004726:	4013      	ands	r3, r2
 8004728:	d000      	beq.n	800472c <HAL_ADC_ConfigChannel+0xd8>
 800472a:	e071      	b.n	8004810 <HAL_ADC_ConfigChannel+0x1bc>
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	2220      	movs	r2, #32
 8004732:	4013      	ands	r3, r2
 8004734:	d000      	beq.n	8004738 <HAL_ADC_ConfigChannel+0xe4>
 8004736:	e069      	b.n	800480c <HAL_ADC_ConfigChannel+0x1b8>
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	2240      	movs	r2, #64	; 0x40
 800473e:	4013      	ands	r3, r2
 8004740:	d000      	beq.n	8004744 <HAL_ADC_ConfigChannel+0xf0>
 8004742:	e061      	b.n	8004808 <HAL_ADC_ConfigChannel+0x1b4>
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	2280      	movs	r2, #128	; 0x80
 800474a:	4013      	ands	r3, r2
 800474c:	d000      	beq.n	8004750 <HAL_ADC_ConfigChannel+0xfc>
 800474e:	e059      	b.n	8004804 <HAL_ADC_ConfigChannel+0x1b0>
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	2380      	movs	r3, #128	; 0x80
 8004756:	005b      	lsls	r3, r3, #1
 8004758:	4013      	ands	r3, r2
 800475a:	d151      	bne.n	8004800 <HAL_ADC_ConfigChannel+0x1ac>
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	2380      	movs	r3, #128	; 0x80
 8004762:	009b      	lsls	r3, r3, #2
 8004764:	4013      	ands	r3, r2
 8004766:	d149      	bne.n	80047fc <HAL_ADC_ConfigChannel+0x1a8>
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	2380      	movs	r3, #128	; 0x80
 800476e:	00db      	lsls	r3, r3, #3
 8004770:	4013      	ands	r3, r2
 8004772:	d141      	bne.n	80047f8 <HAL_ADC_ConfigChannel+0x1a4>
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	2380      	movs	r3, #128	; 0x80
 800477a:	011b      	lsls	r3, r3, #4
 800477c:	4013      	ands	r3, r2
 800477e:	d139      	bne.n	80047f4 <HAL_ADC_ConfigChannel+0x1a0>
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	2380      	movs	r3, #128	; 0x80
 8004786:	015b      	lsls	r3, r3, #5
 8004788:	4013      	ands	r3, r2
 800478a:	d131      	bne.n	80047f0 <HAL_ADC_ConfigChannel+0x19c>
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	2380      	movs	r3, #128	; 0x80
 8004792:	019b      	lsls	r3, r3, #6
 8004794:	4013      	ands	r3, r2
 8004796:	d129      	bne.n	80047ec <HAL_ADC_ConfigChannel+0x198>
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	681a      	ldr	r2, [r3, #0]
 800479c:	2380      	movs	r3, #128	; 0x80
 800479e:	01db      	lsls	r3, r3, #7
 80047a0:	4013      	ands	r3, r2
 80047a2:	d121      	bne.n	80047e8 <HAL_ADC_ConfigChannel+0x194>
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	2380      	movs	r3, #128	; 0x80
 80047aa:	021b      	lsls	r3, r3, #8
 80047ac:	4013      	ands	r3, r2
 80047ae:	d119      	bne.n	80047e4 <HAL_ADC_ConfigChannel+0x190>
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	681a      	ldr	r2, [r3, #0]
 80047b4:	2380      	movs	r3, #128	; 0x80
 80047b6:	025b      	lsls	r3, r3, #9
 80047b8:	4013      	ands	r3, r2
 80047ba:	d111      	bne.n	80047e0 <HAL_ADC_ConfigChannel+0x18c>
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	2380      	movs	r3, #128	; 0x80
 80047c2:	029b      	lsls	r3, r3, #10
 80047c4:	4013      	ands	r3, r2
 80047c6:	d109      	bne.n	80047dc <HAL_ADC_ConfigChannel+0x188>
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	2380      	movs	r3, #128	; 0x80
 80047ce:	02db      	lsls	r3, r3, #11
 80047d0:	4013      	ands	r3, r2
 80047d2:	d001      	beq.n	80047d8 <HAL_ADC_ConfigChannel+0x184>
 80047d4:	2312      	movs	r3, #18
 80047d6:	e024      	b.n	8004822 <HAL_ADC_ConfigChannel+0x1ce>
 80047d8:	2300      	movs	r3, #0
 80047da:	e022      	b.n	8004822 <HAL_ADC_ConfigChannel+0x1ce>
 80047dc:	2311      	movs	r3, #17
 80047de:	e020      	b.n	8004822 <HAL_ADC_ConfigChannel+0x1ce>
 80047e0:	2310      	movs	r3, #16
 80047e2:	e01e      	b.n	8004822 <HAL_ADC_ConfigChannel+0x1ce>
 80047e4:	230f      	movs	r3, #15
 80047e6:	e01c      	b.n	8004822 <HAL_ADC_ConfigChannel+0x1ce>
 80047e8:	230e      	movs	r3, #14
 80047ea:	e01a      	b.n	8004822 <HAL_ADC_ConfigChannel+0x1ce>
 80047ec:	230d      	movs	r3, #13
 80047ee:	e018      	b.n	8004822 <HAL_ADC_ConfigChannel+0x1ce>
 80047f0:	230c      	movs	r3, #12
 80047f2:	e016      	b.n	8004822 <HAL_ADC_ConfigChannel+0x1ce>
 80047f4:	230b      	movs	r3, #11
 80047f6:	e014      	b.n	8004822 <HAL_ADC_ConfigChannel+0x1ce>
 80047f8:	230a      	movs	r3, #10
 80047fa:	e012      	b.n	8004822 <HAL_ADC_ConfigChannel+0x1ce>
 80047fc:	2309      	movs	r3, #9
 80047fe:	e010      	b.n	8004822 <HAL_ADC_ConfigChannel+0x1ce>
 8004800:	2308      	movs	r3, #8
 8004802:	e00e      	b.n	8004822 <HAL_ADC_ConfigChannel+0x1ce>
 8004804:	2307      	movs	r3, #7
 8004806:	e00c      	b.n	8004822 <HAL_ADC_ConfigChannel+0x1ce>
 8004808:	2306      	movs	r3, #6
 800480a:	e00a      	b.n	8004822 <HAL_ADC_ConfigChannel+0x1ce>
 800480c:	2305      	movs	r3, #5
 800480e:	e008      	b.n	8004822 <HAL_ADC_ConfigChannel+0x1ce>
 8004810:	2304      	movs	r3, #4
 8004812:	e006      	b.n	8004822 <HAL_ADC_ConfigChannel+0x1ce>
 8004814:	2303      	movs	r3, #3
 8004816:	e004      	b.n	8004822 <HAL_ADC_ConfigChannel+0x1ce>
 8004818:	2302      	movs	r3, #2
 800481a:	e002      	b.n	8004822 <HAL_ADC_ConfigChannel+0x1ce>
 800481c:	2301      	movs	r3, #1
 800481e:	e000      	b.n	8004822 <HAL_ADC_ConfigChannel+0x1ce>
 8004820:	2300      	movs	r3, #0
 8004822:	683a      	ldr	r2, [r7, #0]
 8004824:	6852      	ldr	r2, [r2, #4]
 8004826:	201f      	movs	r0, #31
 8004828:	4002      	ands	r2, r0
 800482a:	4093      	lsls	r3, r2
 800482c:	000a      	movs	r2, r1
 800482e:	431a      	orrs	r2, r3
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	089b      	lsrs	r3, r3, #2
 800483a:	1c5a      	adds	r2, r3, #1
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	69db      	ldr	r3, [r3, #28]
 8004840:	429a      	cmp	r2, r3
 8004842:	d808      	bhi.n	8004856 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6818      	ldr	r0, [r3, #0]
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	6859      	ldr	r1, [r3, #4]
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	001a      	movs	r2, r3
 8004852:	f7ff fbcf 	bl	8003ff4 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6818      	ldr	r0, [r3, #0]
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	6819      	ldr	r1, [r3, #0]
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	001a      	movs	r2, r3
 8004864:	f7ff fc0a 	bl	800407c <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	2b00      	cmp	r3, #0
 800486e:	db00      	blt.n	8004872 <HAL_ADC_ConfigChannel+0x21e>
 8004870:	e0bc      	b.n	80049ec <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004872:	4b50      	ldr	r3, [pc, #320]	; (80049b4 <HAL_ADC_ConfigChannel+0x360>)
 8004874:	0018      	movs	r0, r3
 8004876:	f7ff fb6b 	bl	8003f50 <LL_ADC_GetCommonPathInternalCh>
 800487a:	0003      	movs	r3, r0
 800487c:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a4d      	ldr	r2, [pc, #308]	; (80049b8 <HAL_ADC_ConfigChannel+0x364>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d122      	bne.n	80048ce <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004888:	693a      	ldr	r2, [r7, #16]
 800488a:	2380      	movs	r3, #128	; 0x80
 800488c:	041b      	lsls	r3, r3, #16
 800488e:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004890:	d11d      	bne.n	80048ce <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	2280      	movs	r2, #128	; 0x80
 8004896:	0412      	lsls	r2, r2, #16
 8004898:	4313      	orrs	r3, r2
 800489a:	4a46      	ldr	r2, [pc, #280]	; (80049b4 <HAL_ADC_ConfigChannel+0x360>)
 800489c:	0019      	movs	r1, r3
 800489e:	0010      	movs	r0, r2
 80048a0:	f7ff fb42 	bl	8003f28 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80048a4:	4b45      	ldr	r3, [pc, #276]	; (80049bc <HAL_ADC_ConfigChannel+0x368>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4945      	ldr	r1, [pc, #276]	; (80049c0 <HAL_ADC_ConfigChannel+0x36c>)
 80048aa:	0018      	movs	r0, r3
 80048ac:	f7fb fc46 	bl	800013c <__udivsi3>
 80048b0:	0003      	movs	r3, r0
 80048b2:	1c5a      	adds	r2, r3, #1
 80048b4:	0013      	movs	r3, r2
 80048b6:	005b      	lsls	r3, r3, #1
 80048b8:	189b      	adds	r3, r3, r2
 80048ba:	009b      	lsls	r3, r3, #2
 80048bc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80048be:	e002      	b.n	80048c6 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	3b01      	subs	r3, #1
 80048c4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d1f9      	bne.n	80048c0 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80048cc:	e08e      	b.n	80049ec <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a3c      	ldr	r2, [pc, #240]	; (80049c4 <HAL_ADC_ConfigChannel+0x370>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d10e      	bne.n	80048f6 <HAL_ADC_ConfigChannel+0x2a2>
 80048d8:	693a      	ldr	r2, [r7, #16]
 80048da:	2380      	movs	r3, #128	; 0x80
 80048dc:	045b      	lsls	r3, r3, #17
 80048de:	4013      	ands	r3, r2
 80048e0:	d109      	bne.n	80048f6 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	2280      	movs	r2, #128	; 0x80
 80048e6:	0452      	lsls	r2, r2, #17
 80048e8:	4313      	orrs	r3, r2
 80048ea:	4a32      	ldr	r2, [pc, #200]	; (80049b4 <HAL_ADC_ConfigChannel+0x360>)
 80048ec:	0019      	movs	r1, r3
 80048ee:	0010      	movs	r0, r2
 80048f0:	f7ff fb1a 	bl	8003f28 <LL_ADC_SetCommonPathInternalCh>
 80048f4:	e07a      	b.n	80049ec <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a33      	ldr	r2, [pc, #204]	; (80049c8 <HAL_ADC_ConfigChannel+0x374>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d000      	beq.n	8004902 <HAL_ADC_ConfigChannel+0x2ae>
 8004900:	e074      	b.n	80049ec <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004902:	693a      	ldr	r2, [r7, #16]
 8004904:	2380      	movs	r3, #128	; 0x80
 8004906:	03db      	lsls	r3, r3, #15
 8004908:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800490a:	d000      	beq.n	800490e <HAL_ADC_ConfigChannel+0x2ba>
 800490c:	e06e      	b.n	80049ec <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	2280      	movs	r2, #128	; 0x80
 8004912:	03d2      	lsls	r2, r2, #15
 8004914:	4313      	orrs	r3, r2
 8004916:	4a27      	ldr	r2, [pc, #156]	; (80049b4 <HAL_ADC_ConfigChannel+0x360>)
 8004918:	0019      	movs	r1, r3
 800491a:	0010      	movs	r0, r2
 800491c:	f7ff fb04 	bl	8003f28 <LL_ADC_SetCommonPathInternalCh>
 8004920:	e064      	b.n	80049ec <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	691a      	ldr	r2, [r3, #16]
 8004926:	2380      	movs	r3, #128	; 0x80
 8004928:	061b      	lsls	r3, r3, #24
 800492a:	429a      	cmp	r2, r3
 800492c:	d004      	beq.n	8004938 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004932:	4a1f      	ldr	r2, [pc, #124]	; (80049b0 <HAL_ADC_ConfigChannel+0x35c>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d107      	bne.n	8004948 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	0019      	movs	r1, r3
 8004942:	0010      	movs	r0, r2
 8004944:	f7ff fb87 	bl	8004056 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	2b00      	cmp	r3, #0
 800494e:	da4d      	bge.n	80049ec <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004950:	4b18      	ldr	r3, [pc, #96]	; (80049b4 <HAL_ADC_ConfigChannel+0x360>)
 8004952:	0018      	movs	r0, r3
 8004954:	f7ff fafc 	bl	8003f50 <LL_ADC_GetCommonPathInternalCh>
 8004958:	0003      	movs	r3, r0
 800495a:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a15      	ldr	r2, [pc, #84]	; (80049b8 <HAL_ADC_ConfigChannel+0x364>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d108      	bne.n	8004978 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	4a18      	ldr	r2, [pc, #96]	; (80049cc <HAL_ADC_ConfigChannel+0x378>)
 800496a:	4013      	ands	r3, r2
 800496c:	4a11      	ldr	r2, [pc, #68]	; (80049b4 <HAL_ADC_ConfigChannel+0x360>)
 800496e:	0019      	movs	r1, r3
 8004970:	0010      	movs	r0, r2
 8004972:	f7ff fad9 	bl	8003f28 <LL_ADC_SetCommonPathInternalCh>
 8004976:	e039      	b.n	80049ec <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a11      	ldr	r2, [pc, #68]	; (80049c4 <HAL_ADC_ConfigChannel+0x370>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d108      	bne.n	8004994 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	4a12      	ldr	r2, [pc, #72]	; (80049d0 <HAL_ADC_ConfigChannel+0x37c>)
 8004986:	4013      	ands	r3, r2
 8004988:	4a0a      	ldr	r2, [pc, #40]	; (80049b4 <HAL_ADC_ConfigChannel+0x360>)
 800498a:	0019      	movs	r1, r3
 800498c:	0010      	movs	r0, r2
 800498e:	f7ff facb 	bl	8003f28 <LL_ADC_SetCommonPathInternalCh>
 8004992:	e02b      	b.n	80049ec <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a0b      	ldr	r2, [pc, #44]	; (80049c8 <HAL_ADC_ConfigChannel+0x374>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d126      	bne.n	80049ec <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	4a0c      	ldr	r2, [pc, #48]	; (80049d4 <HAL_ADC_ConfigChannel+0x380>)
 80049a2:	4013      	ands	r3, r2
 80049a4:	4a03      	ldr	r2, [pc, #12]	; (80049b4 <HAL_ADC_ConfigChannel+0x360>)
 80049a6:	0019      	movs	r1, r3
 80049a8:	0010      	movs	r0, r2
 80049aa:	f7ff fabd 	bl	8003f28 <LL_ADC_SetCommonPathInternalCh>
 80049ae:	e01d      	b.n	80049ec <HAL_ADC_ConfigChannel+0x398>
 80049b0:	80000004 	.word	0x80000004
 80049b4:	40012708 	.word	0x40012708
 80049b8:	b0001000 	.word	0xb0001000
 80049bc:	20000004 	.word	0x20000004
 80049c0:	00030d40 	.word	0x00030d40
 80049c4:	b8004000 	.word	0xb8004000
 80049c8:	b4002000 	.word	0xb4002000
 80049cc:	ff7fffff 	.word	0xff7fffff
 80049d0:	feffffff 	.word	0xfeffffff
 80049d4:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049dc:	2220      	movs	r2, #32
 80049de:	431a      	orrs	r2, r3
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80049e4:	2317      	movs	r3, #23
 80049e6:	18fb      	adds	r3, r7, r3
 80049e8:	2201      	movs	r2, #1
 80049ea:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2254      	movs	r2, #84	; 0x54
 80049f0:	2100      	movs	r1, #0
 80049f2:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80049f4:	2317      	movs	r3, #23
 80049f6:	18fb      	adds	r3, r7, r3
 80049f8:	781b      	ldrb	r3, [r3, #0]
}
 80049fa:	0018      	movs	r0, r3
 80049fc:	46bd      	mov	sp, r7
 80049fe:	b006      	add	sp, #24
 8004a00:	bd80      	pop	{r7, pc}
 8004a02:	46c0      	nop			; (mov r8, r8)

08004a04 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b084      	sub	sp, #16
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	0018      	movs	r0, r3
 8004a16:	f7ff fb99 	bl	800414c <LL_ADC_IsEnabled>
 8004a1a:	1e03      	subs	r3, r0, #0
 8004a1c:	d000      	beq.n	8004a20 <ADC_Enable+0x1c>
 8004a1e:	e069      	b.n	8004af4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	4a36      	ldr	r2, [pc, #216]	; (8004b00 <ADC_Enable+0xfc>)
 8004a28:	4013      	ands	r3, r2
 8004a2a:	d00d      	beq.n	8004a48 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a30:	2210      	movs	r2, #16
 8004a32:	431a      	orrs	r2, r3
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	431a      	orrs	r2, r3
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8004a44:	2301      	movs	r3, #1
 8004a46:	e056      	b.n	8004af6 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	0018      	movs	r0, r3
 8004a4e:	f7ff fb59 	bl	8004104 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004a52:	4b2c      	ldr	r3, [pc, #176]	; (8004b04 <ADC_Enable+0x100>)
 8004a54:	0018      	movs	r0, r3
 8004a56:	f7ff fa7b 	bl	8003f50 <LL_ADC_GetCommonPathInternalCh>
 8004a5a:	0002      	movs	r2, r0
 8004a5c:	2380      	movs	r3, #128	; 0x80
 8004a5e:	041b      	lsls	r3, r3, #16
 8004a60:	4013      	ands	r3, r2
 8004a62:	d00f      	beq.n	8004a84 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004a64:	4b28      	ldr	r3, [pc, #160]	; (8004b08 <ADC_Enable+0x104>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4928      	ldr	r1, [pc, #160]	; (8004b0c <ADC_Enable+0x108>)
 8004a6a:	0018      	movs	r0, r3
 8004a6c:	f7fb fb66 	bl	800013c <__udivsi3>
 8004a70:	0003      	movs	r3, r0
 8004a72:	3301      	adds	r3, #1
 8004a74:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004a76:	e002      	b.n	8004a7e <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	3b01      	subs	r3, #1
 8004a7c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d1f9      	bne.n	8004a78 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	7e5b      	ldrb	r3, [r3, #25]
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d033      	beq.n	8004af4 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8004a8c:	f7ff fa08 	bl	8003ea0 <HAL_GetTick>
 8004a90:	0003      	movs	r3, r0
 8004a92:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004a94:	e027      	b.n	8004ae6 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	0018      	movs	r0, r3
 8004a9c:	f7ff fb56 	bl	800414c <LL_ADC_IsEnabled>
 8004aa0:	1e03      	subs	r3, r0, #0
 8004aa2:	d104      	bne.n	8004aae <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	0018      	movs	r0, r3
 8004aaa:	f7ff fb2b 	bl	8004104 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004aae:	f7ff f9f7 	bl	8003ea0 <HAL_GetTick>
 8004ab2:	0002      	movs	r2, r0
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	1ad3      	subs	r3, r2, r3
 8004ab8:	2b02      	cmp	r3, #2
 8004aba:	d914      	bls.n	8004ae6 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	4013      	ands	r3, r2
 8004ac6:	2b01      	cmp	r3, #1
 8004ac8:	d00d      	beq.n	8004ae6 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ace:	2210      	movs	r2, #16
 8004ad0:	431a      	orrs	r2, r3
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ada:	2201      	movs	r2, #1
 8004adc:	431a      	orrs	r2, r3
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e007      	b.n	8004af6 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	2201      	movs	r2, #1
 8004aee:	4013      	ands	r3, r2
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d1d0      	bne.n	8004a96 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004af4:	2300      	movs	r3, #0
}
 8004af6:	0018      	movs	r0, r3
 8004af8:	46bd      	mov	sp, r7
 8004afa:	b004      	add	sp, #16
 8004afc:	bd80      	pop	{r7, pc}
 8004afe:	46c0      	nop			; (mov r8, r8)
 8004b00:	80000017 	.word	0x80000017
 8004b04:	40012708 	.word	0x40012708
 8004b08:	20000004 	.word	0x20000004
 8004b0c:	00030d40 	.word	0x00030d40

08004b10 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b084      	sub	sp, #16
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b1c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b22:	2250      	movs	r2, #80	; 0x50
 8004b24:	4013      	ands	r3, r2
 8004b26:	d141      	bne.n	8004bac <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b2c:	2280      	movs	r2, #128	; 0x80
 8004b2e:	0092      	lsls	r2, r2, #2
 8004b30:	431a      	orrs	r2, r3
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	0018      	movs	r0, r3
 8004b3c:	f7ff fa49 	bl	8003fd2 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004b40:	1e03      	subs	r3, r0, #0
 8004b42:	d02e      	beq.n	8004ba2 <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	7e9b      	ldrb	r3, [r3, #26]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d12a      	bne.n	8004ba2 <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	2208      	movs	r2, #8
 8004b54:	4013      	ands	r3, r2
 8004b56:	2b08      	cmp	r3, #8
 8004b58:	d123      	bne.n	8004ba2 <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	0018      	movs	r0, r3
 8004b60:	f7ff fb18 	bl	8004194 <LL_ADC_REG_IsConversionOngoing>
 8004b64:	1e03      	subs	r3, r0, #0
 8004b66:	d110      	bne.n	8004b8a <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	685a      	ldr	r2, [r3, #4]
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	210c      	movs	r1, #12
 8004b74:	438a      	bics	r2, r1
 8004b76:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b7c:	4a15      	ldr	r2, [pc, #84]	; (8004bd4 <ADC_DMAConvCplt+0xc4>)
 8004b7e:	4013      	ands	r3, r2
 8004b80:	2201      	movs	r2, #1
 8004b82:	431a      	orrs	r2, r3
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	659a      	str	r2, [r3, #88]	; 0x58
 8004b88:	e00b      	b.n	8004ba2 <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b8e:	2220      	movs	r2, #32
 8004b90:	431a      	orrs	r2, r3
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	431a      	orrs	r2, r3
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	0018      	movs	r0, r3
 8004ba6:	f7ff fd3d 	bl	8004624 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004baa:	e00f      	b.n	8004bcc <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bb0:	2210      	movs	r2, #16
 8004bb2:	4013      	ands	r3, r2
 8004bb4:	d004      	beq.n	8004bc0 <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	0018      	movs	r0, r3
 8004bba:	f7ff fd43 	bl	8004644 <HAL_ADC_ErrorCallback>
}
 8004bbe:	e005      	b.n	8004bcc <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bc6:	687a      	ldr	r2, [r7, #4]
 8004bc8:	0010      	movs	r0, r2
 8004bca:	4798      	blx	r3
}
 8004bcc:	46c0      	nop			; (mov r8, r8)
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	b004      	add	sp, #16
 8004bd2:	bd80      	pop	{r7, pc}
 8004bd4:	fffffefe 	.word	0xfffffefe

08004bd8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b084      	sub	sp, #16
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004be4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	0018      	movs	r0, r3
 8004bea:	f7ff fd23 	bl	8004634 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004bee:	46c0      	nop			; (mov r8, r8)
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	b004      	add	sp, #16
 8004bf4:	bd80      	pop	{r7, pc}

08004bf6 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004bf6:	b580      	push	{r7, lr}
 8004bf8:	b084      	sub	sp, #16
 8004bfa:	af00      	add	r7, sp, #0
 8004bfc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c02:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c08:	2240      	movs	r2, #64	; 0x40
 8004c0a:	431a      	orrs	r2, r3
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c14:	2204      	movs	r2, #4
 8004c16:	431a      	orrs	r2, r3
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	0018      	movs	r0, r3
 8004c20:	f7ff fd10 	bl	8004644 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004c24:	46c0      	nop			; (mov r8, r8)
 8004c26:	46bd      	mov	sp, r7
 8004c28:	b004      	add	sp, #16
 8004c2a:	bd80      	pop	{r7, pc}

08004c2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b082      	sub	sp, #8
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	0002      	movs	r2, r0
 8004c34:	1dfb      	adds	r3, r7, #7
 8004c36:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004c38:	1dfb      	adds	r3, r7, #7
 8004c3a:	781b      	ldrb	r3, [r3, #0]
 8004c3c:	2b7f      	cmp	r3, #127	; 0x7f
 8004c3e:	d809      	bhi.n	8004c54 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c40:	1dfb      	adds	r3, r7, #7
 8004c42:	781b      	ldrb	r3, [r3, #0]
 8004c44:	001a      	movs	r2, r3
 8004c46:	231f      	movs	r3, #31
 8004c48:	401a      	ands	r2, r3
 8004c4a:	4b04      	ldr	r3, [pc, #16]	; (8004c5c <__NVIC_EnableIRQ+0x30>)
 8004c4c:	2101      	movs	r1, #1
 8004c4e:	4091      	lsls	r1, r2
 8004c50:	000a      	movs	r2, r1
 8004c52:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8004c54:	46c0      	nop			; (mov r8, r8)
 8004c56:	46bd      	mov	sp, r7
 8004c58:	b002      	add	sp, #8
 8004c5a:	bd80      	pop	{r7, pc}
 8004c5c:	e000e100 	.word	0xe000e100

08004c60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004c60:	b590      	push	{r4, r7, lr}
 8004c62:	b083      	sub	sp, #12
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	0002      	movs	r2, r0
 8004c68:	6039      	str	r1, [r7, #0]
 8004c6a:	1dfb      	adds	r3, r7, #7
 8004c6c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004c6e:	1dfb      	adds	r3, r7, #7
 8004c70:	781b      	ldrb	r3, [r3, #0]
 8004c72:	2b7f      	cmp	r3, #127	; 0x7f
 8004c74:	d828      	bhi.n	8004cc8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004c76:	4a2f      	ldr	r2, [pc, #188]	; (8004d34 <__NVIC_SetPriority+0xd4>)
 8004c78:	1dfb      	adds	r3, r7, #7
 8004c7a:	781b      	ldrb	r3, [r3, #0]
 8004c7c:	b25b      	sxtb	r3, r3
 8004c7e:	089b      	lsrs	r3, r3, #2
 8004c80:	33c0      	adds	r3, #192	; 0xc0
 8004c82:	009b      	lsls	r3, r3, #2
 8004c84:	589b      	ldr	r3, [r3, r2]
 8004c86:	1dfa      	adds	r2, r7, #7
 8004c88:	7812      	ldrb	r2, [r2, #0]
 8004c8a:	0011      	movs	r1, r2
 8004c8c:	2203      	movs	r2, #3
 8004c8e:	400a      	ands	r2, r1
 8004c90:	00d2      	lsls	r2, r2, #3
 8004c92:	21ff      	movs	r1, #255	; 0xff
 8004c94:	4091      	lsls	r1, r2
 8004c96:	000a      	movs	r2, r1
 8004c98:	43d2      	mvns	r2, r2
 8004c9a:	401a      	ands	r2, r3
 8004c9c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	019b      	lsls	r3, r3, #6
 8004ca2:	22ff      	movs	r2, #255	; 0xff
 8004ca4:	401a      	ands	r2, r3
 8004ca6:	1dfb      	adds	r3, r7, #7
 8004ca8:	781b      	ldrb	r3, [r3, #0]
 8004caa:	0018      	movs	r0, r3
 8004cac:	2303      	movs	r3, #3
 8004cae:	4003      	ands	r3, r0
 8004cb0:	00db      	lsls	r3, r3, #3
 8004cb2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004cb4:	481f      	ldr	r0, [pc, #124]	; (8004d34 <__NVIC_SetPriority+0xd4>)
 8004cb6:	1dfb      	adds	r3, r7, #7
 8004cb8:	781b      	ldrb	r3, [r3, #0]
 8004cba:	b25b      	sxtb	r3, r3
 8004cbc:	089b      	lsrs	r3, r3, #2
 8004cbe:	430a      	orrs	r2, r1
 8004cc0:	33c0      	adds	r3, #192	; 0xc0
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004cc6:	e031      	b.n	8004d2c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004cc8:	4a1b      	ldr	r2, [pc, #108]	; (8004d38 <__NVIC_SetPriority+0xd8>)
 8004cca:	1dfb      	adds	r3, r7, #7
 8004ccc:	781b      	ldrb	r3, [r3, #0]
 8004cce:	0019      	movs	r1, r3
 8004cd0:	230f      	movs	r3, #15
 8004cd2:	400b      	ands	r3, r1
 8004cd4:	3b08      	subs	r3, #8
 8004cd6:	089b      	lsrs	r3, r3, #2
 8004cd8:	3306      	adds	r3, #6
 8004cda:	009b      	lsls	r3, r3, #2
 8004cdc:	18d3      	adds	r3, r2, r3
 8004cde:	3304      	adds	r3, #4
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	1dfa      	adds	r2, r7, #7
 8004ce4:	7812      	ldrb	r2, [r2, #0]
 8004ce6:	0011      	movs	r1, r2
 8004ce8:	2203      	movs	r2, #3
 8004cea:	400a      	ands	r2, r1
 8004cec:	00d2      	lsls	r2, r2, #3
 8004cee:	21ff      	movs	r1, #255	; 0xff
 8004cf0:	4091      	lsls	r1, r2
 8004cf2:	000a      	movs	r2, r1
 8004cf4:	43d2      	mvns	r2, r2
 8004cf6:	401a      	ands	r2, r3
 8004cf8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	019b      	lsls	r3, r3, #6
 8004cfe:	22ff      	movs	r2, #255	; 0xff
 8004d00:	401a      	ands	r2, r3
 8004d02:	1dfb      	adds	r3, r7, #7
 8004d04:	781b      	ldrb	r3, [r3, #0]
 8004d06:	0018      	movs	r0, r3
 8004d08:	2303      	movs	r3, #3
 8004d0a:	4003      	ands	r3, r0
 8004d0c:	00db      	lsls	r3, r3, #3
 8004d0e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004d10:	4809      	ldr	r0, [pc, #36]	; (8004d38 <__NVIC_SetPriority+0xd8>)
 8004d12:	1dfb      	adds	r3, r7, #7
 8004d14:	781b      	ldrb	r3, [r3, #0]
 8004d16:	001c      	movs	r4, r3
 8004d18:	230f      	movs	r3, #15
 8004d1a:	4023      	ands	r3, r4
 8004d1c:	3b08      	subs	r3, #8
 8004d1e:	089b      	lsrs	r3, r3, #2
 8004d20:	430a      	orrs	r2, r1
 8004d22:	3306      	adds	r3, #6
 8004d24:	009b      	lsls	r3, r3, #2
 8004d26:	18c3      	adds	r3, r0, r3
 8004d28:	3304      	adds	r3, #4
 8004d2a:	601a      	str	r2, [r3, #0]
}
 8004d2c:	46c0      	nop			; (mov r8, r8)
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	b003      	add	sp, #12
 8004d32:	bd90      	pop	{r4, r7, pc}
 8004d34:	e000e100 	.word	0xe000e100
 8004d38:	e000ed00 	.word	0xe000ed00

08004d3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b082      	sub	sp, #8
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	1e5a      	subs	r2, r3, #1
 8004d48:	2380      	movs	r3, #128	; 0x80
 8004d4a:	045b      	lsls	r3, r3, #17
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	d301      	bcc.n	8004d54 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004d50:	2301      	movs	r3, #1
 8004d52:	e010      	b.n	8004d76 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004d54:	4b0a      	ldr	r3, [pc, #40]	; (8004d80 <SysTick_Config+0x44>)
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	3a01      	subs	r2, #1
 8004d5a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	425b      	negs	r3, r3
 8004d60:	2103      	movs	r1, #3
 8004d62:	0018      	movs	r0, r3
 8004d64:	f7ff ff7c 	bl	8004c60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004d68:	4b05      	ldr	r3, [pc, #20]	; (8004d80 <SysTick_Config+0x44>)
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004d6e:	4b04      	ldr	r3, [pc, #16]	; (8004d80 <SysTick_Config+0x44>)
 8004d70:	2207      	movs	r2, #7
 8004d72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004d74:	2300      	movs	r3, #0
}
 8004d76:	0018      	movs	r0, r3
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	b002      	add	sp, #8
 8004d7c:	bd80      	pop	{r7, pc}
 8004d7e:	46c0      	nop			; (mov r8, r8)
 8004d80:	e000e010 	.word	0xe000e010

08004d84 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b084      	sub	sp, #16
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	60b9      	str	r1, [r7, #8]
 8004d8c:	607a      	str	r2, [r7, #4]
 8004d8e:	210f      	movs	r1, #15
 8004d90:	187b      	adds	r3, r7, r1
 8004d92:	1c02      	adds	r2, r0, #0
 8004d94:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8004d96:	68ba      	ldr	r2, [r7, #8]
 8004d98:	187b      	adds	r3, r7, r1
 8004d9a:	781b      	ldrb	r3, [r3, #0]
 8004d9c:	b25b      	sxtb	r3, r3
 8004d9e:	0011      	movs	r1, r2
 8004da0:	0018      	movs	r0, r3
 8004da2:	f7ff ff5d 	bl	8004c60 <__NVIC_SetPriority>
}
 8004da6:	46c0      	nop			; (mov r8, r8)
 8004da8:	46bd      	mov	sp, r7
 8004daa:	b004      	add	sp, #16
 8004dac:	bd80      	pop	{r7, pc}

08004dae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004dae:	b580      	push	{r7, lr}
 8004db0:	b082      	sub	sp, #8
 8004db2:	af00      	add	r7, sp, #0
 8004db4:	0002      	movs	r2, r0
 8004db6:	1dfb      	adds	r3, r7, #7
 8004db8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004dba:	1dfb      	adds	r3, r7, #7
 8004dbc:	781b      	ldrb	r3, [r3, #0]
 8004dbe:	b25b      	sxtb	r3, r3
 8004dc0:	0018      	movs	r0, r3
 8004dc2:	f7ff ff33 	bl	8004c2c <__NVIC_EnableIRQ>
}
 8004dc6:	46c0      	nop			; (mov r8, r8)
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	b002      	add	sp, #8
 8004dcc:	bd80      	pop	{r7, pc}

08004dce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004dce:	b580      	push	{r7, lr}
 8004dd0:	b082      	sub	sp, #8
 8004dd2:	af00      	add	r7, sp, #0
 8004dd4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	0018      	movs	r0, r3
 8004dda:	f7ff ffaf 	bl	8004d3c <SysTick_Config>
 8004dde:	0003      	movs	r3, r0
}
 8004de0:	0018      	movs	r0, r3
 8004de2:	46bd      	mov	sp, r7
 8004de4:	b002      	add	sp, #8
 8004de6:	bd80      	pop	{r7, pc}

08004de8 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b082      	sub	sp, #8
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d101      	bne.n	8004dfa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	e077      	b.n	8004eea <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a3d      	ldr	r2, [pc, #244]	; (8004ef4 <HAL_DMA_Init+0x10c>)
 8004e00:	4694      	mov	ip, r2
 8004e02:	4463      	add	r3, ip
 8004e04:	2114      	movs	r1, #20
 8004e06:	0018      	movs	r0, r3
 8004e08:	f7fb f998 	bl	800013c <__udivsi3>
 8004e0c:	0003      	movs	r3, r0
 8004e0e:	009a      	lsls	r2, r3, #2
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2225      	movs	r2, #37	; 0x25
 8004e18:	2102      	movs	r1, #2
 8004e1a:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	681a      	ldr	r2, [r3, #0]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4934      	ldr	r1, [pc, #208]	; (8004ef8 <HAL_DMA_Init+0x110>)
 8004e28:	400a      	ands	r2, r1
 8004e2a:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	6819      	ldr	r1, [r3, #0]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	689a      	ldr	r2, [r3, #8]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	68db      	ldr	r3, [r3, #12]
 8004e3a:	431a      	orrs	r2, r3
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	691b      	ldr	r3, [r3, #16]
 8004e40:	431a      	orrs	r2, r3
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	695b      	ldr	r3, [r3, #20]
 8004e46:	431a      	orrs	r2, r3
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	699b      	ldr	r3, [r3, #24]
 8004e4c:	431a      	orrs	r2, r3
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	69db      	ldr	r3, [r3, #28]
 8004e52:	431a      	orrs	r2, r3
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6a1b      	ldr	r3, [r3, #32]
 8004e58:	431a      	orrs	r2, r3
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	430a      	orrs	r2, r1
 8004e60:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	0018      	movs	r0, r3
 8004e66:	f000 fa8d 	bl	8005384 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	689a      	ldr	r2, [r3, #8]
 8004e6e:	2380      	movs	r3, #128	; 0x80
 8004e70:	01db      	lsls	r3, r3, #7
 8004e72:	429a      	cmp	r2, r3
 8004e74:	d102      	bne.n	8004e7c <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	685a      	ldr	r2, [r3, #4]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e84:	213f      	movs	r1, #63	; 0x3f
 8004e86:	400a      	ands	r2, r1
 8004e88:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e8e:	687a      	ldr	r2, [r7, #4]
 8004e90:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004e92:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d011      	beq.n	8004ec0 <HAL_DMA_Init+0xd8>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	2b04      	cmp	r3, #4
 8004ea2:	d80d      	bhi.n	8004ec0 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	0018      	movs	r0, r3
 8004ea8:	f000 fa98 	bl	80053dc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eb8:	687a      	ldr	r2, [r7, #4]
 8004eba:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004ebc:	605a      	str	r2, [r3, #4]
 8004ebe:	e008      	b.n	8004ed2 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2225      	movs	r2, #37	; 0x25
 8004edc:	2101      	movs	r1, #1
 8004ede:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2224      	movs	r2, #36	; 0x24
 8004ee4:	2100      	movs	r1, #0
 8004ee6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004ee8:	2300      	movs	r3, #0
}
 8004eea:	0018      	movs	r0, r3
 8004eec:	46bd      	mov	sp, r7
 8004eee:	b002      	add	sp, #8
 8004ef0:	bd80      	pop	{r7, pc}
 8004ef2:	46c0      	nop			; (mov r8, r8)
 8004ef4:	bffdfff8 	.word	0xbffdfff8
 8004ef8:	ffff800f 	.word	0xffff800f

08004efc <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b086      	sub	sp, #24
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	60f8      	str	r0, [r7, #12]
 8004f04:	60b9      	str	r1, [r7, #8]
 8004f06:	607a      	str	r2, [r7, #4]
 8004f08:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f0a:	2317      	movs	r3, #23
 8004f0c:	18fb      	adds	r3, r7, r3
 8004f0e:	2200      	movs	r2, #0
 8004f10:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2224      	movs	r2, #36	; 0x24
 8004f16:	5c9b      	ldrb	r3, [r3, r2]
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	d101      	bne.n	8004f20 <HAL_DMA_Start_IT+0x24>
 8004f1c:	2302      	movs	r3, #2
 8004f1e:	e06f      	b.n	8005000 <HAL_DMA_Start_IT+0x104>
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2224      	movs	r2, #36	; 0x24
 8004f24:	2101      	movs	r1, #1
 8004f26:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2225      	movs	r2, #37	; 0x25
 8004f2c:	5c9b      	ldrb	r3, [r3, r2]
 8004f2e:	b2db      	uxtb	r3, r3
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	d157      	bne.n	8004fe4 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2225      	movs	r2, #37	; 0x25
 8004f38:	2102      	movs	r1, #2
 8004f3a:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	2101      	movs	r1, #1
 8004f4e:	438a      	bics	r2, r1
 8004f50:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	687a      	ldr	r2, [r7, #4]
 8004f56:	68b9      	ldr	r1, [r7, #8]
 8004f58:	68f8      	ldr	r0, [r7, #12]
 8004f5a:	f000 f9d3 	bl	8005304 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d008      	beq.n	8004f78 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	210e      	movs	r1, #14
 8004f72:	430a      	orrs	r2, r1
 8004f74:	601a      	str	r2, [r3, #0]
 8004f76:	e00f      	b.n	8004f98 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	681a      	ldr	r2, [r3, #0]
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	2104      	movs	r1, #4
 8004f84:	438a      	bics	r2, r1
 8004f86:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	681a      	ldr	r2, [r3, #0]
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	210a      	movs	r1, #10
 8004f94:	430a      	orrs	r2, r1
 8004f96:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f9c:	681a      	ldr	r2, [r3, #0]
 8004f9e:	2380      	movs	r3, #128	; 0x80
 8004fa0:	025b      	lsls	r3, r3, #9
 8004fa2:	4013      	ands	r3, r2
 8004fa4:	d008      	beq.n	8004fb8 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fb0:	2180      	movs	r1, #128	; 0x80
 8004fb2:	0049      	lsls	r1, r1, #1
 8004fb4:	430a      	orrs	r2, r1
 8004fb6:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d008      	beq.n	8004fd2 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fca:	2180      	movs	r1, #128	; 0x80
 8004fcc:	0049      	lsls	r1, r1, #1
 8004fce:	430a      	orrs	r2, r1
 8004fd0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	2101      	movs	r1, #1
 8004fde:	430a      	orrs	r2, r1
 8004fe0:	601a      	str	r2, [r3, #0]
 8004fe2:	e00a      	b.n	8004ffa <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2280      	movs	r2, #128	; 0x80
 8004fe8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	2224      	movs	r2, #36	; 0x24
 8004fee:	2100      	movs	r1, #0
 8004ff0:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8004ff2:	2317      	movs	r3, #23
 8004ff4:	18fb      	adds	r3, r7, r3
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8004ffa:	2317      	movs	r3, #23
 8004ffc:	18fb      	adds	r3, r7, r3
 8004ffe:	781b      	ldrb	r3, [r3, #0]
}
 8005000:	0018      	movs	r0, r3
 8005002:	46bd      	mov	sp, r7
 8005004:	b006      	add	sp, #24
 8005006:	bd80      	pop	{r7, pc}

08005008 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b082      	sub	sp, #8
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d101      	bne.n	800501a <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	e050      	b.n	80050bc <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2225      	movs	r2, #37	; 0x25
 800501e:	5c9b      	ldrb	r3, [r3, r2]
 8005020:	b2db      	uxtb	r3, r3
 8005022:	2b02      	cmp	r3, #2
 8005024:	d008      	beq.n	8005038 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2204      	movs	r2, #4
 800502a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2224      	movs	r2, #36	; 0x24
 8005030:	2100      	movs	r1, #0
 8005032:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8005034:	2301      	movs	r3, #1
 8005036:	e041      	b.n	80050bc <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	681a      	ldr	r2, [r3, #0]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	210e      	movs	r1, #14
 8005044:	438a      	bics	r2, r1
 8005046:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800504c:	681a      	ldr	r2, [r3, #0]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005052:	491c      	ldr	r1, [pc, #112]	; (80050c4 <HAL_DMA_Abort+0xbc>)
 8005054:	400a      	ands	r2, r1
 8005056:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	681a      	ldr	r2, [r3, #0]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	2101      	movs	r1, #1
 8005064:	438a      	bics	r2, r1
 8005066:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8005068:	4b17      	ldr	r3, [pc, #92]	; (80050c8 <HAL_DMA_Abort+0xc0>)
 800506a:	6859      	ldr	r1, [r3, #4]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005070:	221c      	movs	r2, #28
 8005072:	4013      	ands	r3, r2
 8005074:	2201      	movs	r2, #1
 8005076:	409a      	lsls	r2, r3
 8005078:	4b13      	ldr	r3, [pc, #76]	; (80050c8 <HAL_DMA_Abort+0xc0>)
 800507a:	430a      	orrs	r2, r1
 800507c:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005082:	687a      	ldr	r2, [r7, #4]
 8005084:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005086:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800508c:	2b00      	cmp	r3, #0
 800508e:	d00c      	beq.n	80050aa <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800509a:	490a      	ldr	r1, [pc, #40]	; (80050c4 <HAL_DMA_Abort+0xbc>)
 800509c:	400a      	ands	r2, r1
 800509e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050a4:	687a      	ldr	r2, [r7, #4]
 80050a6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80050a8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2225      	movs	r2, #37	; 0x25
 80050ae:	2101      	movs	r1, #1
 80050b0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2224      	movs	r2, #36	; 0x24
 80050b6:	2100      	movs	r1, #0
 80050b8:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 80050ba:	2300      	movs	r3, #0
}
 80050bc:	0018      	movs	r0, r3
 80050be:	46bd      	mov	sp, r7
 80050c0:	b002      	add	sp, #8
 80050c2:	bd80      	pop	{r7, pc}
 80050c4:	fffffeff 	.word	0xfffffeff
 80050c8:	40020000 	.word	0x40020000

080050cc <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b084      	sub	sp, #16
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80050d4:	210f      	movs	r1, #15
 80050d6:	187b      	adds	r3, r7, r1
 80050d8:	2200      	movs	r2, #0
 80050da:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2225      	movs	r2, #37	; 0x25
 80050e0:	5c9b      	ldrb	r3, [r3, r2]
 80050e2:	b2db      	uxtb	r3, r3
 80050e4:	2b02      	cmp	r3, #2
 80050e6:	d006      	beq.n	80050f6 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2204      	movs	r2, #4
 80050ec:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80050ee:	187b      	adds	r3, r7, r1
 80050f0:	2201      	movs	r2, #1
 80050f2:	701a      	strb	r2, [r3, #0]
 80050f4:	e049      	b.n	800518a <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	210e      	movs	r1, #14
 8005102:	438a      	bics	r2, r1
 8005104:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	681a      	ldr	r2, [r3, #0]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	2101      	movs	r1, #1
 8005112:	438a      	bics	r2, r1
 8005114:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800511a:	681a      	ldr	r2, [r3, #0]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005120:	491d      	ldr	r1, [pc, #116]	; (8005198 <HAL_DMA_Abort_IT+0xcc>)
 8005122:	400a      	ands	r2, r1
 8005124:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8005126:	4b1d      	ldr	r3, [pc, #116]	; (800519c <HAL_DMA_Abort_IT+0xd0>)
 8005128:	6859      	ldr	r1, [r3, #4]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800512e:	221c      	movs	r2, #28
 8005130:	4013      	ands	r3, r2
 8005132:	2201      	movs	r2, #1
 8005134:	409a      	lsls	r2, r3
 8005136:	4b19      	ldr	r3, [pc, #100]	; (800519c <HAL_DMA_Abort_IT+0xd0>)
 8005138:	430a      	orrs	r2, r1
 800513a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005140:	687a      	ldr	r2, [r7, #4]
 8005142:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005144:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800514a:	2b00      	cmp	r3, #0
 800514c:	d00c      	beq.n	8005168 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005158:	490f      	ldr	r1, [pc, #60]	; (8005198 <HAL_DMA_Abort_IT+0xcc>)
 800515a:	400a      	ands	r2, r1
 800515c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005162:	687a      	ldr	r2, [r7, #4]
 8005164:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005166:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2225      	movs	r2, #37	; 0x25
 800516c:	2101      	movs	r1, #1
 800516e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2224      	movs	r2, #36	; 0x24
 8005174:	2100      	movs	r1, #0
 8005176:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800517c:	2b00      	cmp	r3, #0
 800517e:	d004      	beq.n	800518a <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005184:	687a      	ldr	r2, [r7, #4]
 8005186:	0010      	movs	r0, r2
 8005188:	4798      	blx	r3
    }
  }
  return status;
 800518a:	230f      	movs	r3, #15
 800518c:	18fb      	adds	r3, r7, r3
 800518e:	781b      	ldrb	r3, [r3, #0]
}
 8005190:	0018      	movs	r0, r3
 8005192:	46bd      	mov	sp, r7
 8005194:	b004      	add	sp, #16
 8005196:	bd80      	pop	{r7, pc}
 8005198:	fffffeff 	.word	0xfffffeff
 800519c:	40020000 	.word	0x40020000

080051a0 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b084      	sub	sp, #16
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 80051a8:	4b55      	ldr	r3, [pc, #340]	; (8005300 <HAL_DMA_IRQHandler+0x160>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ba:	221c      	movs	r2, #28
 80051bc:	4013      	ands	r3, r2
 80051be:	2204      	movs	r2, #4
 80051c0:	409a      	lsls	r2, r3
 80051c2:	0013      	movs	r3, r2
 80051c4:	68fa      	ldr	r2, [r7, #12]
 80051c6:	4013      	ands	r3, r2
 80051c8:	d027      	beq.n	800521a <HAL_DMA_IRQHandler+0x7a>
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	2204      	movs	r2, #4
 80051ce:	4013      	ands	r3, r2
 80051d0:	d023      	beq.n	800521a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	2220      	movs	r2, #32
 80051da:	4013      	ands	r3, r2
 80051dc:	d107      	bne.n	80051ee <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	2104      	movs	r1, #4
 80051ea:	438a      	bics	r2, r1
 80051ec:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 80051ee:	4b44      	ldr	r3, [pc, #272]	; (8005300 <HAL_DMA_IRQHandler+0x160>)
 80051f0:	6859      	ldr	r1, [r3, #4]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f6:	221c      	movs	r2, #28
 80051f8:	4013      	ands	r3, r2
 80051fa:	2204      	movs	r2, #4
 80051fc:	409a      	lsls	r2, r3
 80051fe:	4b40      	ldr	r3, [pc, #256]	; (8005300 <HAL_DMA_IRQHandler+0x160>)
 8005200:	430a      	orrs	r2, r1
 8005202:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005208:	2b00      	cmp	r3, #0
 800520a:	d100      	bne.n	800520e <HAL_DMA_IRQHandler+0x6e>
 800520c:	e073      	b.n	80052f6 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005212:	687a      	ldr	r2, [r7, #4]
 8005214:	0010      	movs	r0, r2
 8005216:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8005218:	e06d      	b.n	80052f6 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800521e:	221c      	movs	r2, #28
 8005220:	4013      	ands	r3, r2
 8005222:	2202      	movs	r2, #2
 8005224:	409a      	lsls	r2, r3
 8005226:	0013      	movs	r3, r2
 8005228:	68fa      	ldr	r2, [r7, #12]
 800522a:	4013      	ands	r3, r2
 800522c:	d02e      	beq.n	800528c <HAL_DMA_IRQHandler+0xec>
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	2202      	movs	r2, #2
 8005232:	4013      	ands	r3, r2
 8005234:	d02a      	beq.n	800528c <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	2220      	movs	r2, #32
 800523e:	4013      	ands	r3, r2
 8005240:	d10b      	bne.n	800525a <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	681a      	ldr	r2, [r3, #0]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	210a      	movs	r1, #10
 800524e:	438a      	bics	r2, r1
 8005250:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2225      	movs	r2, #37	; 0x25
 8005256:	2101      	movs	r1, #1
 8005258:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800525a:	4b29      	ldr	r3, [pc, #164]	; (8005300 <HAL_DMA_IRQHandler+0x160>)
 800525c:	6859      	ldr	r1, [r3, #4]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005262:	221c      	movs	r2, #28
 8005264:	4013      	ands	r3, r2
 8005266:	2202      	movs	r2, #2
 8005268:	409a      	lsls	r2, r3
 800526a:	4b25      	ldr	r3, [pc, #148]	; (8005300 <HAL_DMA_IRQHandler+0x160>)
 800526c:	430a      	orrs	r2, r1
 800526e:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2224      	movs	r2, #36	; 0x24
 8005274:	2100      	movs	r1, #0
 8005276:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800527c:	2b00      	cmp	r3, #0
 800527e:	d03a      	beq.n	80052f6 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005284:	687a      	ldr	r2, [r7, #4]
 8005286:	0010      	movs	r0, r2
 8005288:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 800528a:	e034      	b.n	80052f6 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005290:	221c      	movs	r2, #28
 8005292:	4013      	ands	r3, r2
 8005294:	2208      	movs	r2, #8
 8005296:	409a      	lsls	r2, r3
 8005298:	0013      	movs	r3, r2
 800529a:	68fa      	ldr	r2, [r7, #12]
 800529c:	4013      	ands	r3, r2
 800529e:	d02b      	beq.n	80052f8 <HAL_DMA_IRQHandler+0x158>
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	2208      	movs	r2, #8
 80052a4:	4013      	ands	r3, r2
 80052a6:	d027      	beq.n	80052f8 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	681a      	ldr	r2, [r3, #0]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	210e      	movs	r1, #14
 80052b4:	438a      	bics	r2, r1
 80052b6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80052b8:	4b11      	ldr	r3, [pc, #68]	; (8005300 <HAL_DMA_IRQHandler+0x160>)
 80052ba:	6859      	ldr	r1, [r3, #4]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052c0:	221c      	movs	r2, #28
 80052c2:	4013      	ands	r3, r2
 80052c4:	2201      	movs	r2, #1
 80052c6:	409a      	lsls	r2, r3
 80052c8:	4b0d      	ldr	r3, [pc, #52]	; (8005300 <HAL_DMA_IRQHandler+0x160>)
 80052ca:	430a      	orrs	r2, r1
 80052cc:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2201      	movs	r2, #1
 80052d2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2225      	movs	r2, #37	; 0x25
 80052d8:	2101      	movs	r1, #1
 80052da:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2224      	movs	r2, #36	; 0x24
 80052e0:	2100      	movs	r1, #0
 80052e2:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d005      	beq.n	80052f8 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052f0:	687a      	ldr	r2, [r7, #4]
 80052f2:	0010      	movs	r0, r2
 80052f4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80052f6:	46c0      	nop			; (mov r8, r8)
 80052f8:	46c0      	nop			; (mov r8, r8)
}
 80052fa:	46bd      	mov	sp, r7
 80052fc:	b004      	add	sp, #16
 80052fe:	bd80      	pop	{r7, pc}
 8005300:	40020000 	.word	0x40020000

08005304 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b084      	sub	sp, #16
 8005308:	af00      	add	r7, sp, #0
 800530a:	60f8      	str	r0, [r7, #12]
 800530c:	60b9      	str	r1, [r7, #8]
 800530e:	607a      	str	r2, [r7, #4]
 8005310:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005316:	68fa      	ldr	r2, [r7, #12]
 8005318:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800531a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005320:	2b00      	cmp	r3, #0
 8005322:	d004      	beq.n	800532e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005328:	68fa      	ldr	r2, [r7, #12]
 800532a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800532c:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 800532e:	4b14      	ldr	r3, [pc, #80]	; (8005380 <DMA_SetConfig+0x7c>)
 8005330:	6859      	ldr	r1, [r3, #4]
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005336:	221c      	movs	r2, #28
 8005338:	4013      	ands	r3, r2
 800533a:	2201      	movs	r2, #1
 800533c:	409a      	lsls	r2, r3
 800533e:	4b10      	ldr	r3, [pc, #64]	; (8005380 <DMA_SetConfig+0x7c>)
 8005340:	430a      	orrs	r2, r1
 8005342:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	683a      	ldr	r2, [r7, #0]
 800534a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	2b10      	cmp	r3, #16
 8005352:	d108      	bne.n	8005366 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	687a      	ldr	r2, [r7, #4]
 800535a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	68ba      	ldr	r2, [r7, #8]
 8005362:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005364:	e007      	b.n	8005376 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	68ba      	ldr	r2, [r7, #8]
 800536c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	687a      	ldr	r2, [r7, #4]
 8005374:	60da      	str	r2, [r3, #12]
}
 8005376:	46c0      	nop			; (mov r8, r8)
 8005378:	46bd      	mov	sp, r7
 800537a:	b004      	add	sp, #16
 800537c:	bd80      	pop	{r7, pc}
 800537e:	46c0      	nop			; (mov r8, r8)
 8005380:	40020000 	.word	0x40020000

08005384 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b084      	sub	sp, #16
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005390:	089b      	lsrs	r3, r3, #2
 8005392:	4a10      	ldr	r2, [pc, #64]	; (80053d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8005394:	4694      	mov	ip, r2
 8005396:	4463      	add	r3, ip
 8005398:	009b      	lsls	r3, r3, #2
 800539a:	001a      	movs	r2, r3
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	001a      	movs	r2, r3
 80053a6:	23ff      	movs	r3, #255	; 0xff
 80053a8:	4013      	ands	r3, r2
 80053aa:	3b08      	subs	r3, #8
 80053ac:	2114      	movs	r1, #20
 80053ae:	0018      	movs	r0, r3
 80053b0:	f7fa fec4 	bl	800013c <__udivsi3>
 80053b4:	0003      	movs	r3, r0
 80053b6:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	4a07      	ldr	r2, [pc, #28]	; (80053d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 80053bc:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	221f      	movs	r2, #31
 80053c2:	4013      	ands	r3, r2
 80053c4:	2201      	movs	r2, #1
 80053c6:	409a      	lsls	r2, r3
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80053cc:	46c0      	nop			; (mov r8, r8)
 80053ce:	46bd      	mov	sp, r7
 80053d0:	b004      	add	sp, #16
 80053d2:	bd80      	pop	{r7, pc}
 80053d4:	10008200 	.word	0x10008200
 80053d8:	40020880 	.word	0x40020880

080053dc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b084      	sub	sp, #16
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	223f      	movs	r2, #63	; 0x3f
 80053ea:	4013      	ands	r3, r2
 80053ec:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	4a0a      	ldr	r2, [pc, #40]	; (800541c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80053f2:	4694      	mov	ip, r2
 80053f4:	4463      	add	r3, ip
 80053f6:	009b      	lsls	r3, r3, #2
 80053f8:	001a      	movs	r2, r3
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	4a07      	ldr	r2, [pc, #28]	; (8005420 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005402:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	3b01      	subs	r3, #1
 8005408:	2203      	movs	r2, #3
 800540a:	4013      	ands	r3, r2
 800540c:	2201      	movs	r2, #1
 800540e:	409a      	lsls	r2, r3
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	659a      	str	r2, [r3, #88]	; 0x58
}
 8005414:	46c0      	nop			; (mov r8, r8)
 8005416:	46bd      	mov	sp, r7
 8005418:	b004      	add	sp, #16
 800541a:	bd80      	pop	{r7, pc}
 800541c:	1000823f 	.word	0x1000823f
 8005420:	40020940 	.word	0x40020940

08005424 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b086      	sub	sp, #24
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
 800542c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800542e:	2300      	movs	r3, #0
 8005430:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005432:	e147      	b.n	80056c4 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	2101      	movs	r1, #1
 800543a:	697a      	ldr	r2, [r7, #20]
 800543c:	4091      	lsls	r1, r2
 800543e:	000a      	movs	r2, r1
 8005440:	4013      	ands	r3, r2
 8005442:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d100      	bne.n	800544c <HAL_GPIO_Init+0x28>
 800544a:	e138      	b.n	80056be <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	2203      	movs	r2, #3
 8005452:	4013      	ands	r3, r2
 8005454:	2b01      	cmp	r3, #1
 8005456:	d005      	beq.n	8005464 <HAL_GPIO_Init+0x40>
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	2203      	movs	r2, #3
 800545e:	4013      	ands	r3, r2
 8005460:	2b02      	cmp	r3, #2
 8005462:	d130      	bne.n	80054c6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	689b      	ldr	r3, [r3, #8]
 8005468:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	005b      	lsls	r3, r3, #1
 800546e:	2203      	movs	r2, #3
 8005470:	409a      	lsls	r2, r3
 8005472:	0013      	movs	r3, r2
 8005474:	43da      	mvns	r2, r3
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	4013      	ands	r3, r2
 800547a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	68da      	ldr	r2, [r3, #12]
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	005b      	lsls	r3, r3, #1
 8005484:	409a      	lsls	r2, r3
 8005486:	0013      	movs	r3, r2
 8005488:	693a      	ldr	r2, [r7, #16]
 800548a:	4313      	orrs	r3, r2
 800548c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	693a      	ldr	r2, [r7, #16]
 8005492:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800549a:	2201      	movs	r2, #1
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	409a      	lsls	r2, r3
 80054a0:	0013      	movs	r3, r2
 80054a2:	43da      	mvns	r2, r3
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	4013      	ands	r3, r2
 80054a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	091b      	lsrs	r3, r3, #4
 80054b0:	2201      	movs	r2, #1
 80054b2:	401a      	ands	r2, r3
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	409a      	lsls	r2, r3
 80054b8:	0013      	movs	r3, r2
 80054ba:	693a      	ldr	r2, [r7, #16]
 80054bc:	4313      	orrs	r3, r2
 80054be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	693a      	ldr	r2, [r7, #16]
 80054c4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	2203      	movs	r2, #3
 80054cc:	4013      	ands	r3, r2
 80054ce:	2b03      	cmp	r3, #3
 80054d0:	d017      	beq.n	8005502 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	68db      	ldr	r3, [r3, #12]
 80054d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	005b      	lsls	r3, r3, #1
 80054dc:	2203      	movs	r2, #3
 80054de:	409a      	lsls	r2, r3
 80054e0:	0013      	movs	r3, r2
 80054e2:	43da      	mvns	r2, r3
 80054e4:	693b      	ldr	r3, [r7, #16]
 80054e6:	4013      	ands	r3, r2
 80054e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	689a      	ldr	r2, [r3, #8]
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	005b      	lsls	r3, r3, #1
 80054f2:	409a      	lsls	r2, r3
 80054f4:	0013      	movs	r3, r2
 80054f6:	693a      	ldr	r2, [r7, #16]
 80054f8:	4313      	orrs	r3, r2
 80054fa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	693a      	ldr	r2, [r7, #16]
 8005500:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	2203      	movs	r2, #3
 8005508:	4013      	ands	r3, r2
 800550a:	2b02      	cmp	r3, #2
 800550c:	d123      	bne.n	8005556 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	08da      	lsrs	r2, r3, #3
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	3208      	adds	r2, #8
 8005516:	0092      	lsls	r2, r2, #2
 8005518:	58d3      	ldr	r3, [r2, r3]
 800551a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	2207      	movs	r2, #7
 8005520:	4013      	ands	r3, r2
 8005522:	009b      	lsls	r3, r3, #2
 8005524:	220f      	movs	r2, #15
 8005526:	409a      	lsls	r2, r3
 8005528:	0013      	movs	r3, r2
 800552a:	43da      	mvns	r2, r3
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	4013      	ands	r3, r2
 8005530:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	691a      	ldr	r2, [r3, #16]
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	2107      	movs	r1, #7
 800553a:	400b      	ands	r3, r1
 800553c:	009b      	lsls	r3, r3, #2
 800553e:	409a      	lsls	r2, r3
 8005540:	0013      	movs	r3, r2
 8005542:	693a      	ldr	r2, [r7, #16]
 8005544:	4313      	orrs	r3, r2
 8005546:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	08da      	lsrs	r2, r3, #3
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	3208      	adds	r2, #8
 8005550:	0092      	lsls	r2, r2, #2
 8005552:	6939      	ldr	r1, [r7, #16]
 8005554:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	005b      	lsls	r3, r3, #1
 8005560:	2203      	movs	r2, #3
 8005562:	409a      	lsls	r2, r3
 8005564:	0013      	movs	r3, r2
 8005566:	43da      	mvns	r2, r3
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	4013      	ands	r3, r2
 800556c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	2203      	movs	r2, #3
 8005574:	401a      	ands	r2, r3
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	005b      	lsls	r3, r3, #1
 800557a:	409a      	lsls	r2, r3
 800557c:	0013      	movs	r3, r2
 800557e:	693a      	ldr	r2, [r7, #16]
 8005580:	4313      	orrs	r3, r2
 8005582:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	693a      	ldr	r2, [r7, #16]
 8005588:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	685a      	ldr	r2, [r3, #4]
 800558e:	23c0      	movs	r3, #192	; 0xc0
 8005590:	029b      	lsls	r3, r3, #10
 8005592:	4013      	ands	r3, r2
 8005594:	d100      	bne.n	8005598 <HAL_GPIO_Init+0x174>
 8005596:	e092      	b.n	80056be <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8005598:	4a50      	ldr	r2, [pc, #320]	; (80056dc <HAL_GPIO_Init+0x2b8>)
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	089b      	lsrs	r3, r3, #2
 800559e:	3318      	adds	r3, #24
 80055a0:	009b      	lsls	r3, r3, #2
 80055a2:	589b      	ldr	r3, [r3, r2]
 80055a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	2203      	movs	r2, #3
 80055aa:	4013      	ands	r3, r2
 80055ac:	00db      	lsls	r3, r3, #3
 80055ae:	220f      	movs	r2, #15
 80055b0:	409a      	lsls	r2, r3
 80055b2:	0013      	movs	r3, r2
 80055b4:	43da      	mvns	r2, r3
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	4013      	ands	r3, r2
 80055ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80055bc:	687a      	ldr	r2, [r7, #4]
 80055be:	23a0      	movs	r3, #160	; 0xa0
 80055c0:	05db      	lsls	r3, r3, #23
 80055c2:	429a      	cmp	r2, r3
 80055c4:	d013      	beq.n	80055ee <HAL_GPIO_Init+0x1ca>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	4a45      	ldr	r2, [pc, #276]	; (80056e0 <HAL_GPIO_Init+0x2bc>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d00d      	beq.n	80055ea <HAL_GPIO_Init+0x1c6>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	4a44      	ldr	r2, [pc, #272]	; (80056e4 <HAL_GPIO_Init+0x2c0>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d007      	beq.n	80055e6 <HAL_GPIO_Init+0x1c2>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	4a43      	ldr	r2, [pc, #268]	; (80056e8 <HAL_GPIO_Init+0x2c4>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d101      	bne.n	80055e2 <HAL_GPIO_Init+0x1be>
 80055de:	2303      	movs	r3, #3
 80055e0:	e006      	b.n	80055f0 <HAL_GPIO_Init+0x1cc>
 80055e2:	2305      	movs	r3, #5
 80055e4:	e004      	b.n	80055f0 <HAL_GPIO_Init+0x1cc>
 80055e6:	2302      	movs	r3, #2
 80055e8:	e002      	b.n	80055f0 <HAL_GPIO_Init+0x1cc>
 80055ea:	2301      	movs	r3, #1
 80055ec:	e000      	b.n	80055f0 <HAL_GPIO_Init+0x1cc>
 80055ee:	2300      	movs	r3, #0
 80055f0:	697a      	ldr	r2, [r7, #20]
 80055f2:	2103      	movs	r1, #3
 80055f4:	400a      	ands	r2, r1
 80055f6:	00d2      	lsls	r2, r2, #3
 80055f8:	4093      	lsls	r3, r2
 80055fa:	693a      	ldr	r2, [r7, #16]
 80055fc:	4313      	orrs	r3, r2
 80055fe:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8005600:	4936      	ldr	r1, [pc, #216]	; (80056dc <HAL_GPIO_Init+0x2b8>)
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	089b      	lsrs	r3, r3, #2
 8005606:	3318      	adds	r3, #24
 8005608:	009b      	lsls	r3, r3, #2
 800560a:	693a      	ldr	r2, [r7, #16]
 800560c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800560e:	4b33      	ldr	r3, [pc, #204]	; (80056dc <HAL_GPIO_Init+0x2b8>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	43da      	mvns	r2, r3
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	4013      	ands	r3, r2
 800561c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	685a      	ldr	r2, [r3, #4]
 8005622:	2380      	movs	r3, #128	; 0x80
 8005624:	035b      	lsls	r3, r3, #13
 8005626:	4013      	ands	r3, r2
 8005628:	d003      	beq.n	8005632 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800562a:	693a      	ldr	r2, [r7, #16]
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	4313      	orrs	r3, r2
 8005630:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005632:	4b2a      	ldr	r3, [pc, #168]	; (80056dc <HAL_GPIO_Init+0x2b8>)
 8005634:	693a      	ldr	r2, [r7, #16]
 8005636:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8005638:	4b28      	ldr	r3, [pc, #160]	; (80056dc <HAL_GPIO_Init+0x2b8>)
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	43da      	mvns	r2, r3
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	4013      	ands	r3, r2
 8005646:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	685a      	ldr	r2, [r3, #4]
 800564c:	2380      	movs	r3, #128	; 0x80
 800564e:	039b      	lsls	r3, r3, #14
 8005650:	4013      	ands	r3, r2
 8005652:	d003      	beq.n	800565c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8005654:	693a      	ldr	r2, [r7, #16]
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	4313      	orrs	r3, r2
 800565a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800565c:	4b1f      	ldr	r3, [pc, #124]	; (80056dc <HAL_GPIO_Init+0x2b8>)
 800565e:	693a      	ldr	r2, [r7, #16]
 8005660:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005662:	4a1e      	ldr	r2, [pc, #120]	; (80056dc <HAL_GPIO_Init+0x2b8>)
 8005664:	2384      	movs	r3, #132	; 0x84
 8005666:	58d3      	ldr	r3, [r2, r3]
 8005668:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	43da      	mvns	r2, r3
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	4013      	ands	r3, r2
 8005672:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	685a      	ldr	r2, [r3, #4]
 8005678:	2380      	movs	r3, #128	; 0x80
 800567a:	029b      	lsls	r3, r3, #10
 800567c:	4013      	ands	r3, r2
 800567e:	d003      	beq.n	8005688 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8005680:	693a      	ldr	r2, [r7, #16]
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	4313      	orrs	r3, r2
 8005686:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005688:	4914      	ldr	r1, [pc, #80]	; (80056dc <HAL_GPIO_Init+0x2b8>)
 800568a:	2284      	movs	r2, #132	; 0x84
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8005690:	4a12      	ldr	r2, [pc, #72]	; (80056dc <HAL_GPIO_Init+0x2b8>)
 8005692:	2380      	movs	r3, #128	; 0x80
 8005694:	58d3      	ldr	r3, [r2, r3]
 8005696:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	43da      	mvns	r2, r3
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	4013      	ands	r3, r2
 80056a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	685a      	ldr	r2, [r3, #4]
 80056a6:	2380      	movs	r3, #128	; 0x80
 80056a8:	025b      	lsls	r3, r3, #9
 80056aa:	4013      	ands	r3, r2
 80056ac:	d003      	beq.n	80056b6 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80056ae:	693a      	ldr	r2, [r7, #16]
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	4313      	orrs	r3, r2
 80056b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80056b6:	4909      	ldr	r1, [pc, #36]	; (80056dc <HAL_GPIO_Init+0x2b8>)
 80056b8:	2280      	movs	r2, #128	; 0x80
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80056be:	697b      	ldr	r3, [r7, #20]
 80056c0:	3301      	adds	r3, #1
 80056c2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	681a      	ldr	r2, [r3, #0]
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	40da      	lsrs	r2, r3
 80056cc:	1e13      	subs	r3, r2, #0
 80056ce:	d000      	beq.n	80056d2 <HAL_GPIO_Init+0x2ae>
 80056d0:	e6b0      	b.n	8005434 <HAL_GPIO_Init+0x10>
  }
}
 80056d2:	46c0      	nop			; (mov r8, r8)
 80056d4:	46c0      	nop			; (mov r8, r8)
 80056d6:	46bd      	mov	sp, r7
 80056d8:	b006      	add	sp, #24
 80056da:	bd80      	pop	{r7, pc}
 80056dc:	40021800 	.word	0x40021800
 80056e0:	50000400 	.word	0x50000400
 80056e4:	50000800 	.word	0x50000800
 80056e8:	50000c00 	.word	0x50000c00

080056ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b082      	sub	sp, #8
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
 80056f4:	0008      	movs	r0, r1
 80056f6:	0011      	movs	r1, r2
 80056f8:	1cbb      	adds	r3, r7, #2
 80056fa:	1c02      	adds	r2, r0, #0
 80056fc:	801a      	strh	r2, [r3, #0]
 80056fe:	1c7b      	adds	r3, r7, #1
 8005700:	1c0a      	adds	r2, r1, #0
 8005702:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005704:	1c7b      	adds	r3, r7, #1
 8005706:	781b      	ldrb	r3, [r3, #0]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d004      	beq.n	8005716 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800570c:	1cbb      	adds	r3, r7, #2
 800570e:	881a      	ldrh	r2, [r3, #0]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005714:	e003      	b.n	800571e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005716:	1cbb      	adds	r3, r7, #2
 8005718:	881a      	ldrh	r2, [r3, #0]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800571e:	46c0      	nop			; (mov r8, r8)
 8005720:	46bd      	mov	sp, r7
 8005722:	b002      	add	sp, #8
 8005724:	bd80      	pop	{r7, pc}
	...

08005728 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b082      	sub	sp, #8
 800572c:	af00      	add	r7, sp, #0
 800572e:	0002      	movs	r2, r0
 8005730:	1dbb      	adds	r3, r7, #6
 8005732:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8005734:	4b10      	ldr	r3, [pc, #64]	; (8005778 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8005736:	68db      	ldr	r3, [r3, #12]
 8005738:	1dba      	adds	r2, r7, #6
 800573a:	8812      	ldrh	r2, [r2, #0]
 800573c:	4013      	ands	r3, r2
 800573e:	d008      	beq.n	8005752 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8005740:	4b0d      	ldr	r3, [pc, #52]	; (8005778 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8005742:	1dba      	adds	r2, r7, #6
 8005744:	8812      	ldrh	r2, [r2, #0]
 8005746:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8005748:	1dbb      	adds	r3, r7, #6
 800574a:	881b      	ldrh	r3, [r3, #0]
 800574c:	0018      	movs	r0, r3
 800574e:	f7fc ff71 	bl	8002634 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8005752:	4b09      	ldr	r3, [pc, #36]	; (8005778 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8005754:	691b      	ldr	r3, [r3, #16]
 8005756:	1dba      	adds	r2, r7, #6
 8005758:	8812      	ldrh	r2, [r2, #0]
 800575a:	4013      	ands	r3, r2
 800575c:	d008      	beq.n	8005770 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 800575e:	4b06      	ldr	r3, [pc, #24]	; (8005778 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8005760:	1dba      	adds	r2, r7, #6
 8005762:	8812      	ldrh	r2, [r2, #0]
 8005764:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8005766:	1dbb      	adds	r3, r7, #6
 8005768:	881b      	ldrh	r3, [r3, #0]
 800576a:	0018      	movs	r0, r3
 800576c:	f000 f806 	bl	800577c <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8005770:	46c0      	nop			; (mov r8, r8)
 8005772:	46bd      	mov	sp, r7
 8005774:	b002      	add	sp, #8
 8005776:	bd80      	pop	{r7, pc}
 8005778:	40021800 	.word	0x40021800

0800577c <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b082      	sub	sp, #8
 8005780:	af00      	add	r7, sp, #0
 8005782:	0002      	movs	r2, r0
 8005784:	1dbb      	adds	r3, r7, #6
 8005786:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8005788:	46c0      	nop			; (mov r8, r8)
 800578a:	46bd      	mov	sp, r7
 800578c:	b002      	add	sp, #8
 800578e:	bd80      	pop	{r7, pc}

08005790 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b082      	sub	sp, #8
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d101      	bne.n	80057a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800579e:	2301      	movs	r3, #1
 80057a0:	e082      	b.n	80058a8 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2241      	movs	r2, #65	; 0x41
 80057a6:	5c9b      	ldrb	r3, [r3, r2]
 80057a8:	b2db      	uxtb	r3, r3
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d107      	bne.n	80057be <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2240      	movs	r2, #64	; 0x40
 80057b2:	2100      	movs	r1, #0
 80057b4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	0018      	movs	r0, r3
 80057ba:	f7fe f8a1 	bl	8003900 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2241      	movs	r2, #65	; 0x41
 80057c2:	2124      	movs	r1, #36	; 0x24
 80057c4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	681a      	ldr	r2, [r3, #0]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	2101      	movs	r1, #1
 80057d2:	438a      	bics	r2, r1
 80057d4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	685a      	ldr	r2, [r3, #4]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4934      	ldr	r1, [pc, #208]	; (80058b0 <HAL_I2C_Init+0x120>)
 80057e0:	400a      	ands	r2, r1
 80057e2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	689a      	ldr	r2, [r3, #8]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4931      	ldr	r1, [pc, #196]	; (80058b4 <HAL_I2C_Init+0x124>)
 80057f0:	400a      	ands	r2, r1
 80057f2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	68db      	ldr	r3, [r3, #12]
 80057f8:	2b01      	cmp	r3, #1
 80057fa:	d108      	bne.n	800580e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	689a      	ldr	r2, [r3, #8]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	2180      	movs	r1, #128	; 0x80
 8005806:	0209      	lsls	r1, r1, #8
 8005808:	430a      	orrs	r2, r1
 800580a:	609a      	str	r2, [r3, #8]
 800580c:	e007      	b.n	800581e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	689a      	ldr	r2, [r3, #8]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	2184      	movs	r1, #132	; 0x84
 8005818:	0209      	lsls	r1, r1, #8
 800581a:	430a      	orrs	r2, r1
 800581c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	68db      	ldr	r3, [r3, #12]
 8005822:	2b02      	cmp	r3, #2
 8005824:	d104      	bne.n	8005830 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	2280      	movs	r2, #128	; 0x80
 800582c:	0112      	lsls	r2, r2, #4
 800582e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	685a      	ldr	r2, [r3, #4]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	491f      	ldr	r1, [pc, #124]	; (80058b8 <HAL_I2C_Init+0x128>)
 800583c:	430a      	orrs	r2, r1
 800583e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	68da      	ldr	r2, [r3, #12]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	491a      	ldr	r1, [pc, #104]	; (80058b4 <HAL_I2C_Init+0x124>)
 800584c:	400a      	ands	r2, r1
 800584e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	691a      	ldr	r2, [r3, #16]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	695b      	ldr	r3, [r3, #20]
 8005858:	431a      	orrs	r2, r3
 800585a:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	699b      	ldr	r3, [r3, #24]
 8005860:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	430a      	orrs	r2, r1
 8005868:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	69d9      	ldr	r1, [r3, #28]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6a1a      	ldr	r2, [r3, #32]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	430a      	orrs	r2, r1
 8005878:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	681a      	ldr	r2, [r3, #0]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	2101      	movs	r1, #1
 8005886:	430a      	orrs	r2, r1
 8005888:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2200      	movs	r2, #0
 800588e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2241      	movs	r2, #65	; 0x41
 8005894:	2120      	movs	r1, #32
 8005896:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2200      	movs	r2, #0
 800589c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2242      	movs	r2, #66	; 0x42
 80058a2:	2100      	movs	r1, #0
 80058a4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80058a6:	2300      	movs	r3, #0
}
 80058a8:	0018      	movs	r0, r3
 80058aa:	46bd      	mov	sp, r7
 80058ac:	b002      	add	sp, #8
 80058ae:	bd80      	pop	{r7, pc}
 80058b0:	f0ffffff 	.word	0xf0ffffff
 80058b4:	ffff7fff 	.word	0xffff7fff
 80058b8:	02008000 	.word	0x02008000

080058bc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80058bc:	b590      	push	{r4, r7, lr}
 80058be:	b089      	sub	sp, #36	; 0x24
 80058c0:	af02      	add	r7, sp, #8
 80058c2:	60f8      	str	r0, [r7, #12]
 80058c4:	0008      	movs	r0, r1
 80058c6:	607a      	str	r2, [r7, #4]
 80058c8:	0019      	movs	r1, r3
 80058ca:	230a      	movs	r3, #10
 80058cc:	18fb      	adds	r3, r7, r3
 80058ce:	1c02      	adds	r2, r0, #0
 80058d0:	801a      	strh	r2, [r3, #0]
 80058d2:	2308      	movs	r3, #8
 80058d4:	18fb      	adds	r3, r7, r3
 80058d6:	1c0a      	adds	r2, r1, #0
 80058d8:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2241      	movs	r2, #65	; 0x41
 80058de:	5c9b      	ldrb	r3, [r3, r2]
 80058e0:	b2db      	uxtb	r3, r3
 80058e2:	2b20      	cmp	r3, #32
 80058e4:	d000      	beq.n	80058e8 <HAL_I2C_Master_Transmit+0x2c>
 80058e6:	e0e7      	b.n	8005ab8 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2240      	movs	r2, #64	; 0x40
 80058ec:	5c9b      	ldrb	r3, [r3, r2]
 80058ee:	2b01      	cmp	r3, #1
 80058f0:	d101      	bne.n	80058f6 <HAL_I2C_Master_Transmit+0x3a>
 80058f2:	2302      	movs	r3, #2
 80058f4:	e0e1      	b.n	8005aba <HAL_I2C_Master_Transmit+0x1fe>
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	2240      	movs	r2, #64	; 0x40
 80058fa:	2101      	movs	r1, #1
 80058fc:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80058fe:	f7fe facf 	bl	8003ea0 <HAL_GetTick>
 8005902:	0003      	movs	r3, r0
 8005904:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005906:	2380      	movs	r3, #128	; 0x80
 8005908:	0219      	lsls	r1, r3, #8
 800590a:	68f8      	ldr	r0, [r7, #12]
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	9300      	str	r3, [sp, #0]
 8005910:	2319      	movs	r3, #25
 8005912:	2201      	movs	r2, #1
 8005914:	f000 fb9a 	bl	800604c <I2C_WaitOnFlagUntilTimeout>
 8005918:	1e03      	subs	r3, r0, #0
 800591a:	d001      	beq.n	8005920 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 800591c:	2301      	movs	r3, #1
 800591e:	e0cc      	b.n	8005aba <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2241      	movs	r2, #65	; 0x41
 8005924:	2121      	movs	r1, #33	; 0x21
 8005926:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2242      	movs	r2, #66	; 0x42
 800592c:	2110      	movs	r1, #16
 800592e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2200      	movs	r2, #0
 8005934:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	687a      	ldr	r2, [r7, #4]
 800593a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	2208      	movs	r2, #8
 8005940:	18ba      	adds	r2, r7, r2
 8005942:	8812      	ldrh	r2, [r2, #0]
 8005944:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	2200      	movs	r2, #0
 800594a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005950:	b29b      	uxth	r3, r3
 8005952:	2bff      	cmp	r3, #255	; 0xff
 8005954:	d911      	bls.n	800597a <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	22ff      	movs	r2, #255	; 0xff
 800595a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005960:	b2da      	uxtb	r2, r3
 8005962:	2380      	movs	r3, #128	; 0x80
 8005964:	045c      	lsls	r4, r3, #17
 8005966:	230a      	movs	r3, #10
 8005968:	18fb      	adds	r3, r7, r3
 800596a:	8819      	ldrh	r1, [r3, #0]
 800596c:	68f8      	ldr	r0, [r7, #12]
 800596e:	4b55      	ldr	r3, [pc, #340]	; (8005ac4 <HAL_I2C_Master_Transmit+0x208>)
 8005970:	9300      	str	r3, [sp, #0]
 8005972:	0023      	movs	r3, r4
 8005974:	f000 fdaa 	bl	80064cc <I2C_TransferConfig>
 8005978:	e075      	b.n	8005a66 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800597e:	b29a      	uxth	r2, r3
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005988:	b2da      	uxtb	r2, r3
 800598a:	2380      	movs	r3, #128	; 0x80
 800598c:	049c      	lsls	r4, r3, #18
 800598e:	230a      	movs	r3, #10
 8005990:	18fb      	adds	r3, r7, r3
 8005992:	8819      	ldrh	r1, [r3, #0]
 8005994:	68f8      	ldr	r0, [r7, #12]
 8005996:	4b4b      	ldr	r3, [pc, #300]	; (8005ac4 <HAL_I2C_Master_Transmit+0x208>)
 8005998:	9300      	str	r3, [sp, #0]
 800599a:	0023      	movs	r3, r4
 800599c:	f000 fd96 	bl	80064cc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80059a0:	e061      	b.n	8005a66 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80059a2:	697a      	ldr	r2, [r7, #20]
 80059a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	0018      	movs	r0, r3
 80059aa:	f000 fb8e 	bl	80060ca <I2C_WaitOnTXISFlagUntilTimeout>
 80059ae:	1e03      	subs	r3, r0, #0
 80059b0:	d001      	beq.n	80059b6 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 80059b2:	2301      	movs	r3, #1
 80059b4:	e081      	b.n	8005aba <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ba:	781a      	ldrb	r2, [r3, #0]
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c6:	1c5a      	adds	r2, r3, #1
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059d0:	b29b      	uxth	r3, r3
 80059d2:	3b01      	subs	r3, #1
 80059d4:	b29a      	uxth	r2, r3
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059de:	3b01      	subs	r3, #1
 80059e0:	b29a      	uxth	r2, r3
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059ea:	b29b      	uxth	r3, r3
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d03a      	beq.n	8005a66 <HAL_I2C_Master_Transmit+0x1aa>
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d136      	bne.n	8005a66 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80059f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059fa:	68f8      	ldr	r0, [r7, #12]
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	9300      	str	r3, [sp, #0]
 8005a00:	0013      	movs	r3, r2
 8005a02:	2200      	movs	r2, #0
 8005a04:	2180      	movs	r1, #128	; 0x80
 8005a06:	f000 fb21 	bl	800604c <I2C_WaitOnFlagUntilTimeout>
 8005a0a:	1e03      	subs	r3, r0, #0
 8005a0c:	d001      	beq.n	8005a12 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	e053      	b.n	8005aba <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a16:	b29b      	uxth	r3, r3
 8005a18:	2bff      	cmp	r3, #255	; 0xff
 8005a1a:	d911      	bls.n	8005a40 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	22ff      	movs	r2, #255	; 0xff
 8005a20:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a26:	b2da      	uxtb	r2, r3
 8005a28:	2380      	movs	r3, #128	; 0x80
 8005a2a:	045c      	lsls	r4, r3, #17
 8005a2c:	230a      	movs	r3, #10
 8005a2e:	18fb      	adds	r3, r7, r3
 8005a30:	8819      	ldrh	r1, [r3, #0]
 8005a32:	68f8      	ldr	r0, [r7, #12]
 8005a34:	2300      	movs	r3, #0
 8005a36:	9300      	str	r3, [sp, #0]
 8005a38:	0023      	movs	r3, r4
 8005a3a:	f000 fd47 	bl	80064cc <I2C_TransferConfig>
 8005a3e:	e012      	b.n	8005a66 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a44:	b29a      	uxth	r2, r3
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a4e:	b2da      	uxtb	r2, r3
 8005a50:	2380      	movs	r3, #128	; 0x80
 8005a52:	049c      	lsls	r4, r3, #18
 8005a54:	230a      	movs	r3, #10
 8005a56:	18fb      	adds	r3, r7, r3
 8005a58:	8819      	ldrh	r1, [r3, #0]
 8005a5a:	68f8      	ldr	r0, [r7, #12]
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	9300      	str	r3, [sp, #0]
 8005a60:	0023      	movs	r3, r4
 8005a62:	f000 fd33 	bl	80064cc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a6a:	b29b      	uxth	r3, r3
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d198      	bne.n	80059a2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a70:	697a      	ldr	r2, [r7, #20]
 8005a72:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	0018      	movs	r0, r3
 8005a78:	f000 fb66 	bl	8006148 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005a7c:	1e03      	subs	r3, r0, #0
 8005a7e:	d001      	beq.n	8005a84 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8005a80:	2301      	movs	r3, #1
 8005a82:	e01a      	b.n	8005aba <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	2220      	movs	r2, #32
 8005a8a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	685a      	ldr	r2, [r3, #4]
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	490c      	ldr	r1, [pc, #48]	; (8005ac8 <HAL_I2C_Master_Transmit+0x20c>)
 8005a98:	400a      	ands	r2, r1
 8005a9a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2241      	movs	r2, #65	; 0x41
 8005aa0:	2120      	movs	r1, #32
 8005aa2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2242      	movs	r2, #66	; 0x42
 8005aa8:	2100      	movs	r1, #0
 8005aaa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2240      	movs	r2, #64	; 0x40
 8005ab0:	2100      	movs	r1, #0
 8005ab2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	e000      	b.n	8005aba <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8005ab8:	2302      	movs	r3, #2
  }
}
 8005aba:	0018      	movs	r0, r3
 8005abc:	46bd      	mov	sp, r7
 8005abe:	b007      	add	sp, #28
 8005ac0:	bd90      	pop	{r4, r7, pc}
 8005ac2:	46c0      	nop			; (mov r8, r8)
 8005ac4:	80002000 	.word	0x80002000
 8005ac8:	fe00e800 	.word	0xfe00e800

08005acc <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8005acc:	b590      	push	{r4, r7, lr}
 8005ace:	b089      	sub	sp, #36	; 0x24
 8005ad0:	af02      	add	r7, sp, #8
 8005ad2:	60f8      	str	r0, [r7, #12]
 8005ad4:	0008      	movs	r0, r1
 8005ad6:	607a      	str	r2, [r7, #4]
 8005ad8:	0019      	movs	r1, r3
 8005ada:	230a      	movs	r3, #10
 8005adc:	18fb      	adds	r3, r7, r3
 8005ade:	1c02      	adds	r2, r0, #0
 8005ae0:	801a      	strh	r2, [r3, #0]
 8005ae2:	2308      	movs	r3, #8
 8005ae4:	18fb      	adds	r3, r7, r3
 8005ae6:	1c0a      	adds	r2, r1, #0
 8005ae8:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2241      	movs	r2, #65	; 0x41
 8005aee:	5c9b      	ldrb	r3, [r3, r2]
 8005af0:	b2db      	uxtb	r3, r3
 8005af2:	2b20      	cmp	r3, #32
 8005af4:	d000      	beq.n	8005af8 <HAL_I2C_Master_Receive+0x2c>
 8005af6:	e0e8      	b.n	8005cca <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2240      	movs	r2, #64	; 0x40
 8005afc:	5c9b      	ldrb	r3, [r3, r2]
 8005afe:	2b01      	cmp	r3, #1
 8005b00:	d101      	bne.n	8005b06 <HAL_I2C_Master_Receive+0x3a>
 8005b02:	2302      	movs	r3, #2
 8005b04:	e0e2      	b.n	8005ccc <HAL_I2C_Master_Receive+0x200>
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2240      	movs	r2, #64	; 0x40
 8005b0a:	2101      	movs	r1, #1
 8005b0c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005b0e:	f7fe f9c7 	bl	8003ea0 <HAL_GetTick>
 8005b12:	0003      	movs	r3, r0
 8005b14:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005b16:	2380      	movs	r3, #128	; 0x80
 8005b18:	0219      	lsls	r1, r3, #8
 8005b1a:	68f8      	ldr	r0, [r7, #12]
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	9300      	str	r3, [sp, #0]
 8005b20:	2319      	movs	r3, #25
 8005b22:	2201      	movs	r2, #1
 8005b24:	f000 fa92 	bl	800604c <I2C_WaitOnFlagUntilTimeout>
 8005b28:	1e03      	subs	r3, r0, #0
 8005b2a:	d001      	beq.n	8005b30 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	e0cd      	b.n	8005ccc <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	2241      	movs	r2, #65	; 0x41
 8005b34:	2122      	movs	r1, #34	; 0x22
 8005b36:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2242      	movs	r2, #66	; 0x42
 8005b3c:	2110      	movs	r1, #16
 8005b3e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	2200      	movs	r2, #0
 8005b44:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	687a      	ldr	r2, [r7, #4]
 8005b4a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2208      	movs	r2, #8
 8005b50:	18ba      	adds	r2, r7, r2
 8005b52:	8812      	ldrh	r2, [r2, #0]
 8005b54:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b60:	b29b      	uxth	r3, r3
 8005b62:	2bff      	cmp	r3, #255	; 0xff
 8005b64:	d911      	bls.n	8005b8a <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	22ff      	movs	r2, #255	; 0xff
 8005b6a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b70:	b2da      	uxtb	r2, r3
 8005b72:	2380      	movs	r3, #128	; 0x80
 8005b74:	045c      	lsls	r4, r3, #17
 8005b76:	230a      	movs	r3, #10
 8005b78:	18fb      	adds	r3, r7, r3
 8005b7a:	8819      	ldrh	r1, [r3, #0]
 8005b7c:	68f8      	ldr	r0, [r7, #12]
 8005b7e:	4b55      	ldr	r3, [pc, #340]	; (8005cd4 <HAL_I2C_Master_Receive+0x208>)
 8005b80:	9300      	str	r3, [sp, #0]
 8005b82:	0023      	movs	r3, r4
 8005b84:	f000 fca2 	bl	80064cc <I2C_TransferConfig>
 8005b88:	e076      	b.n	8005c78 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b8e:	b29a      	uxth	r2, r3
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b98:	b2da      	uxtb	r2, r3
 8005b9a:	2380      	movs	r3, #128	; 0x80
 8005b9c:	049c      	lsls	r4, r3, #18
 8005b9e:	230a      	movs	r3, #10
 8005ba0:	18fb      	adds	r3, r7, r3
 8005ba2:	8819      	ldrh	r1, [r3, #0]
 8005ba4:	68f8      	ldr	r0, [r7, #12]
 8005ba6:	4b4b      	ldr	r3, [pc, #300]	; (8005cd4 <HAL_I2C_Master_Receive+0x208>)
 8005ba8:	9300      	str	r3, [sp, #0]
 8005baa:	0023      	movs	r3, r4
 8005bac:	f000 fc8e 	bl	80064cc <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8005bb0:	e062      	b.n	8005c78 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005bb2:	697a      	ldr	r2, [r7, #20]
 8005bb4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	0018      	movs	r0, r3
 8005bba:	f000 fb01 	bl	80061c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005bbe:	1e03      	subs	r3, r0, #0
 8005bc0:	d001      	beq.n	8005bc6 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	e082      	b.n	8005ccc <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd0:	b2d2      	uxtb	r2, r2
 8005bd2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd8:	1c5a      	adds	r2, r3, #1
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005be2:	3b01      	subs	r3, #1
 8005be4:	b29a      	uxth	r2, r3
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bee:	b29b      	uxth	r3, r3
 8005bf0:	3b01      	subs	r3, #1
 8005bf2:	b29a      	uxth	r2, r3
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bfc:	b29b      	uxth	r3, r3
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d03a      	beq.n	8005c78 <HAL_I2C_Master_Receive+0x1ac>
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d136      	bne.n	8005c78 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005c0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c0c:	68f8      	ldr	r0, [r7, #12]
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	9300      	str	r3, [sp, #0]
 8005c12:	0013      	movs	r3, r2
 8005c14:	2200      	movs	r2, #0
 8005c16:	2180      	movs	r1, #128	; 0x80
 8005c18:	f000 fa18 	bl	800604c <I2C_WaitOnFlagUntilTimeout>
 8005c1c:	1e03      	subs	r3, r0, #0
 8005c1e:	d001      	beq.n	8005c24 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8005c20:	2301      	movs	r3, #1
 8005c22:	e053      	b.n	8005ccc <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c28:	b29b      	uxth	r3, r3
 8005c2a:	2bff      	cmp	r3, #255	; 0xff
 8005c2c:	d911      	bls.n	8005c52 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	22ff      	movs	r2, #255	; 0xff
 8005c32:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c38:	b2da      	uxtb	r2, r3
 8005c3a:	2380      	movs	r3, #128	; 0x80
 8005c3c:	045c      	lsls	r4, r3, #17
 8005c3e:	230a      	movs	r3, #10
 8005c40:	18fb      	adds	r3, r7, r3
 8005c42:	8819      	ldrh	r1, [r3, #0]
 8005c44:	68f8      	ldr	r0, [r7, #12]
 8005c46:	2300      	movs	r3, #0
 8005c48:	9300      	str	r3, [sp, #0]
 8005c4a:	0023      	movs	r3, r4
 8005c4c:	f000 fc3e 	bl	80064cc <I2C_TransferConfig>
 8005c50:	e012      	b.n	8005c78 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c56:	b29a      	uxth	r2, r3
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c60:	b2da      	uxtb	r2, r3
 8005c62:	2380      	movs	r3, #128	; 0x80
 8005c64:	049c      	lsls	r4, r3, #18
 8005c66:	230a      	movs	r3, #10
 8005c68:	18fb      	adds	r3, r7, r3
 8005c6a:	8819      	ldrh	r1, [r3, #0]
 8005c6c:	68f8      	ldr	r0, [r7, #12]
 8005c6e:	2300      	movs	r3, #0
 8005c70:	9300      	str	r3, [sp, #0]
 8005c72:	0023      	movs	r3, r4
 8005c74:	f000 fc2a 	bl	80064cc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c7c:	b29b      	uxth	r3, r3
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d197      	bne.n	8005bb2 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c82:	697a      	ldr	r2, [r7, #20]
 8005c84:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	0018      	movs	r0, r3
 8005c8a:	f000 fa5d 	bl	8006148 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005c8e:	1e03      	subs	r3, r0, #0
 8005c90:	d001      	beq.n	8005c96 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8005c92:	2301      	movs	r3, #1
 8005c94:	e01a      	b.n	8005ccc <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	2220      	movs	r2, #32
 8005c9c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	685a      	ldr	r2, [r3, #4]
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	490b      	ldr	r1, [pc, #44]	; (8005cd8 <HAL_I2C_Master_Receive+0x20c>)
 8005caa:	400a      	ands	r2, r1
 8005cac:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	2241      	movs	r2, #65	; 0x41
 8005cb2:	2120      	movs	r1, #32
 8005cb4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2242      	movs	r2, #66	; 0x42
 8005cba:	2100      	movs	r1, #0
 8005cbc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2240      	movs	r2, #64	; 0x40
 8005cc2:	2100      	movs	r1, #0
 8005cc4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	e000      	b.n	8005ccc <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8005cca:	2302      	movs	r3, #2
  }
}
 8005ccc:	0018      	movs	r0, r3
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	b007      	add	sp, #28
 8005cd2:	bd90      	pop	{r4, r7, pc}
 8005cd4:	80002400 	.word	0x80002400
 8005cd8:	fe00e800 	.word	0xfe00e800

08005cdc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005cdc:	b590      	push	{r4, r7, lr}
 8005cde:	b089      	sub	sp, #36	; 0x24
 8005ce0:	af02      	add	r7, sp, #8
 8005ce2:	60f8      	str	r0, [r7, #12]
 8005ce4:	000c      	movs	r4, r1
 8005ce6:	0010      	movs	r0, r2
 8005ce8:	0019      	movs	r1, r3
 8005cea:	230a      	movs	r3, #10
 8005cec:	18fb      	adds	r3, r7, r3
 8005cee:	1c22      	adds	r2, r4, #0
 8005cf0:	801a      	strh	r2, [r3, #0]
 8005cf2:	2308      	movs	r3, #8
 8005cf4:	18fb      	adds	r3, r7, r3
 8005cf6:	1c02      	adds	r2, r0, #0
 8005cf8:	801a      	strh	r2, [r3, #0]
 8005cfa:	1dbb      	adds	r3, r7, #6
 8005cfc:	1c0a      	adds	r2, r1, #0
 8005cfe:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2241      	movs	r2, #65	; 0x41
 8005d04:	5c9b      	ldrb	r3, [r3, r2]
 8005d06:	b2db      	uxtb	r3, r3
 8005d08:	2b20      	cmp	r3, #32
 8005d0a:	d000      	beq.n	8005d0e <HAL_I2C_Mem_Read+0x32>
 8005d0c:	e110      	b.n	8005f30 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d004      	beq.n	8005d1e <HAL_I2C_Mem_Read+0x42>
 8005d14:	232c      	movs	r3, #44	; 0x2c
 8005d16:	18fb      	adds	r3, r7, r3
 8005d18:	881b      	ldrh	r3, [r3, #0]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d105      	bne.n	8005d2a <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	2280      	movs	r2, #128	; 0x80
 8005d22:	0092      	lsls	r2, r2, #2
 8005d24:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005d26:	2301      	movs	r3, #1
 8005d28:	e103      	b.n	8005f32 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	2240      	movs	r2, #64	; 0x40
 8005d2e:	5c9b      	ldrb	r3, [r3, r2]
 8005d30:	2b01      	cmp	r3, #1
 8005d32:	d101      	bne.n	8005d38 <HAL_I2C_Mem_Read+0x5c>
 8005d34:	2302      	movs	r3, #2
 8005d36:	e0fc      	b.n	8005f32 <HAL_I2C_Mem_Read+0x256>
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	2240      	movs	r2, #64	; 0x40
 8005d3c:	2101      	movs	r1, #1
 8005d3e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005d40:	f7fe f8ae 	bl	8003ea0 <HAL_GetTick>
 8005d44:	0003      	movs	r3, r0
 8005d46:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005d48:	2380      	movs	r3, #128	; 0x80
 8005d4a:	0219      	lsls	r1, r3, #8
 8005d4c:	68f8      	ldr	r0, [r7, #12]
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	9300      	str	r3, [sp, #0]
 8005d52:	2319      	movs	r3, #25
 8005d54:	2201      	movs	r2, #1
 8005d56:	f000 f979 	bl	800604c <I2C_WaitOnFlagUntilTimeout>
 8005d5a:	1e03      	subs	r3, r0, #0
 8005d5c:	d001      	beq.n	8005d62 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	e0e7      	b.n	8005f32 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	2241      	movs	r2, #65	; 0x41
 8005d66:	2122      	movs	r1, #34	; 0x22
 8005d68:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2242      	movs	r2, #66	; 0x42
 8005d6e:	2140      	movs	r1, #64	; 0x40
 8005d70:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2200      	movs	r2, #0
 8005d76:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d7c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	222c      	movs	r2, #44	; 0x2c
 8005d82:	18ba      	adds	r2, r7, r2
 8005d84:	8812      	ldrh	r2, [r2, #0]
 8005d86:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005d8e:	1dbb      	adds	r3, r7, #6
 8005d90:	881c      	ldrh	r4, [r3, #0]
 8005d92:	2308      	movs	r3, #8
 8005d94:	18fb      	adds	r3, r7, r3
 8005d96:	881a      	ldrh	r2, [r3, #0]
 8005d98:	230a      	movs	r3, #10
 8005d9a:	18fb      	adds	r3, r7, r3
 8005d9c:	8819      	ldrh	r1, [r3, #0]
 8005d9e:	68f8      	ldr	r0, [r7, #12]
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	9301      	str	r3, [sp, #4]
 8005da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005da6:	9300      	str	r3, [sp, #0]
 8005da8:	0023      	movs	r3, r4
 8005daa:	f000 f8cb 	bl	8005f44 <I2C_RequestMemoryRead>
 8005dae:	1e03      	subs	r3, r0, #0
 8005db0:	d005      	beq.n	8005dbe <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2240      	movs	r2, #64	; 0x40
 8005db6:	2100      	movs	r1, #0
 8005db8:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8005dba:	2301      	movs	r3, #1
 8005dbc:	e0b9      	b.n	8005f32 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dc2:	b29b      	uxth	r3, r3
 8005dc4:	2bff      	cmp	r3, #255	; 0xff
 8005dc6:	d911      	bls.n	8005dec <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	22ff      	movs	r2, #255	; 0xff
 8005dcc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dd2:	b2da      	uxtb	r2, r3
 8005dd4:	2380      	movs	r3, #128	; 0x80
 8005dd6:	045c      	lsls	r4, r3, #17
 8005dd8:	230a      	movs	r3, #10
 8005dda:	18fb      	adds	r3, r7, r3
 8005ddc:	8819      	ldrh	r1, [r3, #0]
 8005dde:	68f8      	ldr	r0, [r7, #12]
 8005de0:	4b56      	ldr	r3, [pc, #344]	; (8005f3c <HAL_I2C_Mem_Read+0x260>)
 8005de2:	9300      	str	r3, [sp, #0]
 8005de4:	0023      	movs	r3, r4
 8005de6:	f000 fb71 	bl	80064cc <I2C_TransferConfig>
 8005dea:	e012      	b.n	8005e12 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005df0:	b29a      	uxth	r2, r3
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dfa:	b2da      	uxtb	r2, r3
 8005dfc:	2380      	movs	r3, #128	; 0x80
 8005dfe:	049c      	lsls	r4, r3, #18
 8005e00:	230a      	movs	r3, #10
 8005e02:	18fb      	adds	r3, r7, r3
 8005e04:	8819      	ldrh	r1, [r3, #0]
 8005e06:	68f8      	ldr	r0, [r7, #12]
 8005e08:	4b4c      	ldr	r3, [pc, #304]	; (8005f3c <HAL_I2C_Mem_Read+0x260>)
 8005e0a:	9300      	str	r3, [sp, #0]
 8005e0c:	0023      	movs	r3, r4
 8005e0e:	f000 fb5d 	bl	80064cc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005e12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e14:	68f8      	ldr	r0, [r7, #12]
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	9300      	str	r3, [sp, #0]
 8005e1a:	0013      	movs	r3, r2
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	2104      	movs	r1, #4
 8005e20:	f000 f914 	bl	800604c <I2C_WaitOnFlagUntilTimeout>
 8005e24:	1e03      	subs	r3, r0, #0
 8005e26:	d001      	beq.n	8005e2c <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8005e28:	2301      	movs	r3, #1
 8005e2a:	e082      	b.n	8005f32 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e36:	b2d2      	uxtb	r2, r2
 8005e38:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e3e:	1c5a      	adds	r2, r3, #1
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e48:	3b01      	subs	r3, #1
 8005e4a:	b29a      	uxth	r2, r3
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e54:	b29b      	uxth	r3, r3
 8005e56:	3b01      	subs	r3, #1
 8005e58:	b29a      	uxth	r2, r3
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e62:	b29b      	uxth	r3, r3
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d03a      	beq.n	8005ede <HAL_I2C_Mem_Read+0x202>
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d136      	bne.n	8005ede <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005e70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e72:	68f8      	ldr	r0, [r7, #12]
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	9300      	str	r3, [sp, #0]
 8005e78:	0013      	movs	r3, r2
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	2180      	movs	r1, #128	; 0x80
 8005e7e:	f000 f8e5 	bl	800604c <I2C_WaitOnFlagUntilTimeout>
 8005e82:	1e03      	subs	r3, r0, #0
 8005e84:	d001      	beq.n	8005e8a <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8005e86:	2301      	movs	r3, #1
 8005e88:	e053      	b.n	8005f32 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e8e:	b29b      	uxth	r3, r3
 8005e90:	2bff      	cmp	r3, #255	; 0xff
 8005e92:	d911      	bls.n	8005eb8 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	22ff      	movs	r2, #255	; 0xff
 8005e98:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e9e:	b2da      	uxtb	r2, r3
 8005ea0:	2380      	movs	r3, #128	; 0x80
 8005ea2:	045c      	lsls	r4, r3, #17
 8005ea4:	230a      	movs	r3, #10
 8005ea6:	18fb      	adds	r3, r7, r3
 8005ea8:	8819      	ldrh	r1, [r3, #0]
 8005eaa:	68f8      	ldr	r0, [r7, #12]
 8005eac:	2300      	movs	r3, #0
 8005eae:	9300      	str	r3, [sp, #0]
 8005eb0:	0023      	movs	r3, r4
 8005eb2:	f000 fb0b 	bl	80064cc <I2C_TransferConfig>
 8005eb6:	e012      	b.n	8005ede <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ebc:	b29a      	uxth	r2, r3
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ec6:	b2da      	uxtb	r2, r3
 8005ec8:	2380      	movs	r3, #128	; 0x80
 8005eca:	049c      	lsls	r4, r3, #18
 8005ecc:	230a      	movs	r3, #10
 8005ece:	18fb      	adds	r3, r7, r3
 8005ed0:	8819      	ldrh	r1, [r3, #0]
 8005ed2:	68f8      	ldr	r0, [r7, #12]
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	9300      	str	r3, [sp, #0]
 8005ed8:	0023      	movs	r3, r4
 8005eda:	f000 faf7 	bl	80064cc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ee2:	b29b      	uxth	r3, r3
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d194      	bne.n	8005e12 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ee8:	697a      	ldr	r2, [r7, #20]
 8005eea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	0018      	movs	r0, r3
 8005ef0:	f000 f92a 	bl	8006148 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005ef4:	1e03      	subs	r3, r0, #0
 8005ef6:	d001      	beq.n	8005efc <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8005ef8:	2301      	movs	r3, #1
 8005efa:	e01a      	b.n	8005f32 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	2220      	movs	r2, #32
 8005f02:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	685a      	ldr	r2, [r3, #4]
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	490c      	ldr	r1, [pc, #48]	; (8005f40 <HAL_I2C_Mem_Read+0x264>)
 8005f10:	400a      	ands	r2, r1
 8005f12:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2241      	movs	r2, #65	; 0x41
 8005f18:	2120      	movs	r1, #32
 8005f1a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2242      	movs	r2, #66	; 0x42
 8005f20:	2100      	movs	r1, #0
 8005f22:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	2240      	movs	r2, #64	; 0x40
 8005f28:	2100      	movs	r1, #0
 8005f2a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	e000      	b.n	8005f32 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8005f30:	2302      	movs	r3, #2
  }
}
 8005f32:	0018      	movs	r0, r3
 8005f34:	46bd      	mov	sp, r7
 8005f36:	b007      	add	sp, #28
 8005f38:	bd90      	pop	{r4, r7, pc}
 8005f3a:	46c0      	nop			; (mov r8, r8)
 8005f3c:	80002400 	.word	0x80002400
 8005f40:	fe00e800 	.word	0xfe00e800

08005f44 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005f44:	b5b0      	push	{r4, r5, r7, lr}
 8005f46:	b086      	sub	sp, #24
 8005f48:	af02      	add	r7, sp, #8
 8005f4a:	60f8      	str	r0, [r7, #12]
 8005f4c:	000c      	movs	r4, r1
 8005f4e:	0010      	movs	r0, r2
 8005f50:	0019      	movs	r1, r3
 8005f52:	250a      	movs	r5, #10
 8005f54:	197b      	adds	r3, r7, r5
 8005f56:	1c22      	adds	r2, r4, #0
 8005f58:	801a      	strh	r2, [r3, #0]
 8005f5a:	2308      	movs	r3, #8
 8005f5c:	18fb      	adds	r3, r7, r3
 8005f5e:	1c02      	adds	r2, r0, #0
 8005f60:	801a      	strh	r2, [r3, #0]
 8005f62:	1dbb      	adds	r3, r7, #6
 8005f64:	1c0a      	adds	r2, r1, #0
 8005f66:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005f68:	1dbb      	adds	r3, r7, #6
 8005f6a:	881b      	ldrh	r3, [r3, #0]
 8005f6c:	b2da      	uxtb	r2, r3
 8005f6e:	197b      	adds	r3, r7, r5
 8005f70:	8819      	ldrh	r1, [r3, #0]
 8005f72:	68f8      	ldr	r0, [r7, #12]
 8005f74:	4b23      	ldr	r3, [pc, #140]	; (8006004 <I2C_RequestMemoryRead+0xc0>)
 8005f76:	9300      	str	r3, [sp, #0]
 8005f78:	2300      	movs	r3, #0
 8005f7a:	f000 faa7 	bl	80064cc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f80:	6a39      	ldr	r1, [r7, #32]
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	0018      	movs	r0, r3
 8005f86:	f000 f8a0 	bl	80060ca <I2C_WaitOnTXISFlagUntilTimeout>
 8005f8a:	1e03      	subs	r3, r0, #0
 8005f8c:	d001      	beq.n	8005f92 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8005f8e:	2301      	movs	r3, #1
 8005f90:	e033      	b.n	8005ffa <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005f92:	1dbb      	adds	r3, r7, #6
 8005f94:	881b      	ldrh	r3, [r3, #0]
 8005f96:	2b01      	cmp	r3, #1
 8005f98:	d107      	bne.n	8005faa <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005f9a:	2308      	movs	r3, #8
 8005f9c:	18fb      	adds	r3, r7, r3
 8005f9e:	881b      	ldrh	r3, [r3, #0]
 8005fa0:	b2da      	uxtb	r2, r3
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	629a      	str	r2, [r3, #40]	; 0x28
 8005fa8:	e019      	b.n	8005fde <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005faa:	2308      	movs	r3, #8
 8005fac:	18fb      	adds	r3, r7, r3
 8005fae:	881b      	ldrh	r3, [r3, #0]
 8005fb0:	0a1b      	lsrs	r3, r3, #8
 8005fb2:	b29b      	uxth	r3, r3
 8005fb4:	b2da      	uxtb	r2, r3
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005fbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fbe:	6a39      	ldr	r1, [r7, #32]
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	0018      	movs	r0, r3
 8005fc4:	f000 f881 	bl	80060ca <I2C_WaitOnTXISFlagUntilTimeout>
 8005fc8:	1e03      	subs	r3, r0, #0
 8005fca:	d001      	beq.n	8005fd0 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8005fcc:	2301      	movs	r3, #1
 8005fce:	e014      	b.n	8005ffa <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005fd0:	2308      	movs	r3, #8
 8005fd2:	18fb      	adds	r3, r7, r3
 8005fd4:	881b      	ldrh	r3, [r3, #0]
 8005fd6:	b2da      	uxtb	r2, r3
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005fde:	6a3a      	ldr	r2, [r7, #32]
 8005fe0:	68f8      	ldr	r0, [r7, #12]
 8005fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe4:	9300      	str	r3, [sp, #0]
 8005fe6:	0013      	movs	r3, r2
 8005fe8:	2200      	movs	r2, #0
 8005fea:	2140      	movs	r1, #64	; 0x40
 8005fec:	f000 f82e 	bl	800604c <I2C_WaitOnFlagUntilTimeout>
 8005ff0:	1e03      	subs	r3, r0, #0
 8005ff2:	d001      	beq.n	8005ff8 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	e000      	b.n	8005ffa <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8005ff8:	2300      	movs	r3, #0
}
 8005ffa:	0018      	movs	r0, r3
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	b004      	add	sp, #16
 8006000:	bdb0      	pop	{r4, r5, r7, pc}
 8006002:	46c0      	nop			; (mov r8, r8)
 8006004:	80002000 	.word	0x80002000

08006008 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b082      	sub	sp, #8
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	699b      	ldr	r3, [r3, #24]
 8006016:	2202      	movs	r2, #2
 8006018:	4013      	ands	r3, r2
 800601a:	2b02      	cmp	r3, #2
 800601c:	d103      	bne.n	8006026 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	2200      	movs	r2, #0
 8006024:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	699b      	ldr	r3, [r3, #24]
 800602c:	2201      	movs	r2, #1
 800602e:	4013      	ands	r3, r2
 8006030:	2b01      	cmp	r3, #1
 8006032:	d007      	beq.n	8006044 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	699a      	ldr	r2, [r3, #24]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	2101      	movs	r1, #1
 8006040:	430a      	orrs	r2, r1
 8006042:	619a      	str	r2, [r3, #24]
  }
}
 8006044:	46c0      	nop			; (mov r8, r8)
 8006046:	46bd      	mov	sp, r7
 8006048:	b002      	add	sp, #8
 800604a:	bd80      	pop	{r7, pc}

0800604c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b084      	sub	sp, #16
 8006050:	af00      	add	r7, sp, #0
 8006052:	60f8      	str	r0, [r7, #12]
 8006054:	60b9      	str	r1, [r7, #8]
 8006056:	603b      	str	r3, [r7, #0]
 8006058:	1dfb      	adds	r3, r7, #7
 800605a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800605c:	e021      	b.n	80060a2 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	3301      	adds	r3, #1
 8006062:	d01e      	beq.n	80060a2 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006064:	f7fd ff1c 	bl	8003ea0 <HAL_GetTick>
 8006068:	0002      	movs	r2, r0
 800606a:	69bb      	ldr	r3, [r7, #24]
 800606c:	1ad3      	subs	r3, r2, r3
 800606e:	683a      	ldr	r2, [r7, #0]
 8006070:	429a      	cmp	r2, r3
 8006072:	d302      	bcc.n	800607a <I2C_WaitOnFlagUntilTimeout+0x2e>
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d113      	bne.n	80060a2 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800607e:	2220      	movs	r2, #32
 8006080:	431a      	orrs	r2, r3
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	2241      	movs	r2, #65	; 0x41
 800608a:	2120      	movs	r1, #32
 800608c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	2242      	movs	r2, #66	; 0x42
 8006092:	2100      	movs	r1, #0
 8006094:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2240      	movs	r2, #64	; 0x40
 800609a:	2100      	movs	r1, #0
 800609c:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800609e:	2301      	movs	r3, #1
 80060a0:	e00f      	b.n	80060c2 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	699b      	ldr	r3, [r3, #24]
 80060a8:	68ba      	ldr	r2, [r7, #8]
 80060aa:	4013      	ands	r3, r2
 80060ac:	68ba      	ldr	r2, [r7, #8]
 80060ae:	1ad3      	subs	r3, r2, r3
 80060b0:	425a      	negs	r2, r3
 80060b2:	4153      	adcs	r3, r2
 80060b4:	b2db      	uxtb	r3, r3
 80060b6:	001a      	movs	r2, r3
 80060b8:	1dfb      	adds	r3, r7, #7
 80060ba:	781b      	ldrb	r3, [r3, #0]
 80060bc:	429a      	cmp	r2, r3
 80060be:	d0ce      	beq.n	800605e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80060c0:	2300      	movs	r3, #0
}
 80060c2:	0018      	movs	r0, r3
 80060c4:	46bd      	mov	sp, r7
 80060c6:	b004      	add	sp, #16
 80060c8:	bd80      	pop	{r7, pc}

080060ca <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80060ca:	b580      	push	{r7, lr}
 80060cc:	b084      	sub	sp, #16
 80060ce:	af00      	add	r7, sp, #0
 80060d0:	60f8      	str	r0, [r7, #12]
 80060d2:	60b9      	str	r1, [r7, #8]
 80060d4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80060d6:	e02b      	b.n	8006130 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80060d8:	687a      	ldr	r2, [r7, #4]
 80060da:	68b9      	ldr	r1, [r7, #8]
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	0018      	movs	r0, r3
 80060e0:	f000 f8e8 	bl	80062b4 <I2C_IsErrorOccurred>
 80060e4:	1e03      	subs	r3, r0, #0
 80060e6:	d001      	beq.n	80060ec <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80060e8:	2301      	movs	r3, #1
 80060ea:	e029      	b.n	8006140 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	3301      	adds	r3, #1
 80060f0:	d01e      	beq.n	8006130 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060f2:	f7fd fed5 	bl	8003ea0 <HAL_GetTick>
 80060f6:	0002      	movs	r2, r0
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	1ad3      	subs	r3, r2, r3
 80060fc:	68ba      	ldr	r2, [r7, #8]
 80060fe:	429a      	cmp	r2, r3
 8006100:	d302      	bcc.n	8006108 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d113      	bne.n	8006130 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800610c:	2220      	movs	r2, #32
 800610e:	431a      	orrs	r2, r3
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2241      	movs	r2, #65	; 0x41
 8006118:	2120      	movs	r1, #32
 800611a:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	2242      	movs	r2, #66	; 0x42
 8006120:	2100      	movs	r1, #0
 8006122:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	2240      	movs	r2, #64	; 0x40
 8006128:	2100      	movs	r1, #0
 800612a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800612c:	2301      	movs	r3, #1
 800612e:	e007      	b.n	8006140 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	699b      	ldr	r3, [r3, #24]
 8006136:	2202      	movs	r2, #2
 8006138:	4013      	ands	r3, r2
 800613a:	2b02      	cmp	r3, #2
 800613c:	d1cc      	bne.n	80060d8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800613e:	2300      	movs	r3, #0
}
 8006140:	0018      	movs	r0, r3
 8006142:	46bd      	mov	sp, r7
 8006144:	b004      	add	sp, #16
 8006146:	bd80      	pop	{r7, pc}

08006148 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b084      	sub	sp, #16
 800614c:	af00      	add	r7, sp, #0
 800614e:	60f8      	str	r0, [r7, #12]
 8006150:	60b9      	str	r1, [r7, #8]
 8006152:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006154:	e028      	b.n	80061a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006156:	687a      	ldr	r2, [r7, #4]
 8006158:	68b9      	ldr	r1, [r7, #8]
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	0018      	movs	r0, r3
 800615e:	f000 f8a9 	bl	80062b4 <I2C_IsErrorOccurred>
 8006162:	1e03      	subs	r3, r0, #0
 8006164:	d001      	beq.n	800616a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006166:	2301      	movs	r3, #1
 8006168:	e026      	b.n	80061b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800616a:	f7fd fe99 	bl	8003ea0 <HAL_GetTick>
 800616e:	0002      	movs	r2, r0
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	1ad3      	subs	r3, r2, r3
 8006174:	68ba      	ldr	r2, [r7, #8]
 8006176:	429a      	cmp	r2, r3
 8006178:	d302      	bcc.n	8006180 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d113      	bne.n	80061a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006184:	2220      	movs	r2, #32
 8006186:	431a      	orrs	r2, r3
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	2241      	movs	r2, #65	; 0x41
 8006190:	2120      	movs	r1, #32
 8006192:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	2242      	movs	r2, #66	; 0x42
 8006198:	2100      	movs	r1, #0
 800619a:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	2240      	movs	r2, #64	; 0x40
 80061a0:	2100      	movs	r1, #0
 80061a2:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80061a4:	2301      	movs	r3, #1
 80061a6:	e007      	b.n	80061b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	699b      	ldr	r3, [r3, #24]
 80061ae:	2220      	movs	r2, #32
 80061b0:	4013      	ands	r3, r2
 80061b2:	2b20      	cmp	r3, #32
 80061b4:	d1cf      	bne.n	8006156 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80061b6:	2300      	movs	r3, #0
}
 80061b8:	0018      	movs	r0, r3
 80061ba:	46bd      	mov	sp, r7
 80061bc:	b004      	add	sp, #16
 80061be:	bd80      	pop	{r7, pc}

080061c0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b084      	sub	sp, #16
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	60f8      	str	r0, [r7, #12]
 80061c8:	60b9      	str	r1, [r7, #8]
 80061ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80061cc:	e064      	b.n	8006298 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80061ce:	687a      	ldr	r2, [r7, #4]
 80061d0:	68b9      	ldr	r1, [r7, #8]
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	0018      	movs	r0, r3
 80061d6:	f000 f86d 	bl	80062b4 <I2C_IsErrorOccurred>
 80061da:	1e03      	subs	r3, r0, #0
 80061dc:	d001      	beq.n	80061e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80061de:	2301      	movs	r3, #1
 80061e0:	e062      	b.n	80062a8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	699b      	ldr	r3, [r3, #24]
 80061e8:	2220      	movs	r2, #32
 80061ea:	4013      	ands	r3, r2
 80061ec:	2b20      	cmp	r3, #32
 80061ee:	d138      	bne.n	8006262 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	699b      	ldr	r3, [r3, #24]
 80061f6:	2204      	movs	r2, #4
 80061f8:	4013      	ands	r3, r2
 80061fa:	2b04      	cmp	r3, #4
 80061fc:	d105      	bne.n	800620a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006202:	2b00      	cmp	r3, #0
 8006204:	d001      	beq.n	800620a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8006206:	2300      	movs	r3, #0
 8006208:	e04e      	b.n	80062a8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	699b      	ldr	r3, [r3, #24]
 8006210:	2210      	movs	r2, #16
 8006212:	4013      	ands	r3, r2
 8006214:	2b10      	cmp	r3, #16
 8006216:	d107      	bne.n	8006228 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	2210      	movs	r2, #16
 800621e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	2204      	movs	r2, #4
 8006224:	645a      	str	r2, [r3, #68]	; 0x44
 8006226:	e002      	b.n	800622e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	2200      	movs	r2, #0
 800622c:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	2220      	movs	r2, #32
 8006234:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	685a      	ldr	r2, [r3, #4]
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	491b      	ldr	r1, [pc, #108]	; (80062b0 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8006242:	400a      	ands	r2, r1
 8006244:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	2241      	movs	r2, #65	; 0x41
 800624a:	2120      	movs	r1, #32
 800624c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	2242      	movs	r2, #66	; 0x42
 8006252:	2100      	movs	r1, #0
 8006254:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	2240      	movs	r2, #64	; 0x40
 800625a:	2100      	movs	r1, #0
 800625c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800625e:	2301      	movs	r3, #1
 8006260:	e022      	b.n	80062a8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006262:	f7fd fe1d 	bl	8003ea0 <HAL_GetTick>
 8006266:	0002      	movs	r2, r0
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	1ad3      	subs	r3, r2, r3
 800626c:	68ba      	ldr	r2, [r7, #8]
 800626e:	429a      	cmp	r2, r3
 8006270:	d302      	bcc.n	8006278 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d10f      	bne.n	8006298 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800627c:	2220      	movs	r2, #32
 800627e:	431a      	orrs	r2, r3
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	2241      	movs	r2, #65	; 0x41
 8006288:	2120      	movs	r1, #32
 800628a:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2240      	movs	r2, #64	; 0x40
 8006290:	2100      	movs	r1, #0
 8006292:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8006294:	2301      	movs	r3, #1
 8006296:	e007      	b.n	80062a8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	699b      	ldr	r3, [r3, #24]
 800629e:	2204      	movs	r2, #4
 80062a0:	4013      	ands	r3, r2
 80062a2:	2b04      	cmp	r3, #4
 80062a4:	d193      	bne.n	80061ce <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80062a6:	2300      	movs	r3, #0
}
 80062a8:	0018      	movs	r0, r3
 80062aa:	46bd      	mov	sp, r7
 80062ac:	b004      	add	sp, #16
 80062ae:	bd80      	pop	{r7, pc}
 80062b0:	fe00e800 	.word	0xfe00e800

080062b4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80062b4:	b590      	push	{r4, r7, lr}
 80062b6:	b08b      	sub	sp, #44	; 0x2c
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	60f8      	str	r0, [r7, #12]
 80062bc:	60b9      	str	r1, [r7, #8]
 80062be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80062c0:	2327      	movs	r3, #39	; 0x27
 80062c2:	18fb      	adds	r3, r7, r3
 80062c4:	2200      	movs	r2, #0
 80062c6:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	699b      	ldr	r3, [r3, #24]
 80062ce:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80062d0:	2300      	movs	r3, #0
 80062d2:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80062d8:	69bb      	ldr	r3, [r7, #24]
 80062da:	2210      	movs	r2, #16
 80062dc:	4013      	ands	r3, r2
 80062de:	d100      	bne.n	80062e2 <I2C_IsErrorOccurred+0x2e>
 80062e0:	e08e      	b.n	8006400 <I2C_IsErrorOccurred+0x14c>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	2210      	movs	r2, #16
 80062e8:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80062ea:	e06c      	b.n	80063c6 <I2C_IsErrorOccurred+0x112>
 80062ec:	2427      	movs	r4, #39	; 0x27
 80062ee:	193b      	adds	r3, r7, r4
 80062f0:	193a      	adds	r2, r7, r4
 80062f2:	7812      	ldrb	r2, [r2, #0]
 80062f4:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	3301      	adds	r3, #1
 80062fa:	d064      	beq.n	80063c6 <I2C_IsErrorOccurred+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80062fc:	f7fd fdd0 	bl	8003ea0 <HAL_GetTick>
 8006300:	0002      	movs	r2, r0
 8006302:	69fb      	ldr	r3, [r7, #28]
 8006304:	1ad3      	subs	r3, r2, r3
 8006306:	68ba      	ldr	r2, [r7, #8]
 8006308:	429a      	cmp	r2, r3
 800630a:	d306      	bcc.n	800631a <I2C_IsErrorOccurred+0x66>
 800630c:	193b      	adds	r3, r7, r4
 800630e:	193a      	adds	r2, r7, r4
 8006310:	7812      	ldrb	r2, [r2, #0]
 8006312:	701a      	strb	r2, [r3, #0]
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d155      	bne.n	80063c6 <I2C_IsErrorOccurred+0x112>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	685a      	ldr	r2, [r3, #4]
 8006320:	2380      	movs	r3, #128	; 0x80
 8006322:	01db      	lsls	r3, r3, #7
 8006324:	4013      	ands	r3, r2
 8006326:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006328:	2013      	movs	r0, #19
 800632a:	183b      	adds	r3, r7, r0
 800632c:	68fa      	ldr	r2, [r7, #12]
 800632e:	2142      	movs	r1, #66	; 0x42
 8006330:	5c52      	ldrb	r2, [r2, r1]
 8006332:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	699a      	ldr	r2, [r3, #24]
 800633a:	2380      	movs	r3, #128	; 0x80
 800633c:	021b      	lsls	r3, r3, #8
 800633e:	401a      	ands	r2, r3
 8006340:	2380      	movs	r3, #128	; 0x80
 8006342:	021b      	lsls	r3, r3, #8
 8006344:	429a      	cmp	r2, r3
 8006346:	d137      	bne.n	80063b8 <I2C_IsErrorOccurred+0x104>
 8006348:	697a      	ldr	r2, [r7, #20]
 800634a:	2380      	movs	r3, #128	; 0x80
 800634c:	01db      	lsls	r3, r3, #7
 800634e:	429a      	cmp	r2, r3
 8006350:	d032      	beq.n	80063b8 <I2C_IsErrorOccurred+0x104>
              (tmp1 != I2C_CR2_STOP) && \
 8006352:	183b      	adds	r3, r7, r0
 8006354:	781b      	ldrb	r3, [r3, #0]
 8006356:	2b20      	cmp	r3, #32
 8006358:	d02e      	beq.n	80063b8 <I2C_IsErrorOccurred+0x104>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	685a      	ldr	r2, [r3, #4]
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	2180      	movs	r1, #128	; 0x80
 8006366:	01c9      	lsls	r1, r1, #7
 8006368:	430a      	orrs	r2, r1
 800636a:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800636c:	f7fd fd98 	bl	8003ea0 <HAL_GetTick>
 8006370:	0003      	movs	r3, r0
 8006372:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006374:	e020      	b.n	80063b8 <I2C_IsErrorOccurred+0x104>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006376:	f7fd fd93 	bl	8003ea0 <HAL_GetTick>
 800637a:	0002      	movs	r2, r0
 800637c:	69fb      	ldr	r3, [r7, #28]
 800637e:	1ad3      	subs	r3, r2, r3
 8006380:	2027      	movs	r0, #39	; 0x27
 8006382:	183a      	adds	r2, r7, r0
 8006384:	1839      	adds	r1, r7, r0
 8006386:	7809      	ldrb	r1, [r1, #0]
 8006388:	7011      	strb	r1, [r2, #0]
 800638a:	2b19      	cmp	r3, #25
 800638c:	d914      	bls.n	80063b8 <I2C_IsErrorOccurred+0x104>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006392:	2220      	movs	r2, #32
 8006394:	431a      	orrs	r2, r3
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	2241      	movs	r2, #65	; 0x41
 800639e:	2120      	movs	r1, #32
 80063a0:	5499      	strb	r1, [r3, r2]
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2242      	movs	r2, #66	; 0x42
 80063a6:	2100      	movs	r1, #0
 80063a8:	5499      	strb	r1, [r3, r2]

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	2240      	movs	r2, #64	; 0x40
 80063ae:	2100      	movs	r1, #0
 80063b0:	5499      	strb	r1, [r3, r2]

              status = HAL_ERROR;
 80063b2:	183b      	adds	r3, r7, r0
 80063b4:	2201      	movs	r2, #1
 80063b6:	701a      	strb	r2, [r3, #0]
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	699b      	ldr	r3, [r3, #24]
 80063be:	2220      	movs	r2, #32
 80063c0:	4013      	ands	r3, r2
 80063c2:	2b20      	cmp	r3, #32
 80063c4:	d1d7      	bne.n	8006376 <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	699b      	ldr	r3, [r3, #24]
 80063cc:	2220      	movs	r2, #32
 80063ce:	4013      	ands	r3, r2
 80063d0:	2b20      	cmp	r3, #32
 80063d2:	d004      	beq.n	80063de <I2C_IsErrorOccurred+0x12a>
 80063d4:	2327      	movs	r3, #39	; 0x27
 80063d6:	18fb      	adds	r3, r7, r3
 80063d8:	781b      	ldrb	r3, [r3, #0]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d086      	beq.n	80062ec <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80063de:	2327      	movs	r3, #39	; 0x27
 80063e0:	18fb      	adds	r3, r7, r3
 80063e2:	781b      	ldrb	r3, [r3, #0]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d103      	bne.n	80063f0 <I2C_IsErrorOccurred+0x13c>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	2220      	movs	r2, #32
 80063ee:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80063f0:	6a3b      	ldr	r3, [r7, #32]
 80063f2:	2204      	movs	r2, #4
 80063f4:	4313      	orrs	r3, r2
 80063f6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80063f8:	2327      	movs	r3, #39	; 0x27
 80063fa:	18fb      	adds	r3, r7, r3
 80063fc:	2201      	movs	r2, #1
 80063fe:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	699b      	ldr	r3, [r3, #24]
 8006406:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006408:	69ba      	ldr	r2, [r7, #24]
 800640a:	2380      	movs	r3, #128	; 0x80
 800640c:	005b      	lsls	r3, r3, #1
 800640e:	4013      	ands	r3, r2
 8006410:	d00c      	beq.n	800642c <I2C_IsErrorOccurred+0x178>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006412:	6a3b      	ldr	r3, [r7, #32]
 8006414:	2201      	movs	r2, #1
 8006416:	4313      	orrs	r3, r2
 8006418:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	2280      	movs	r2, #128	; 0x80
 8006420:	0052      	lsls	r2, r2, #1
 8006422:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006424:	2327      	movs	r3, #39	; 0x27
 8006426:	18fb      	adds	r3, r7, r3
 8006428:	2201      	movs	r2, #1
 800642a:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800642c:	69ba      	ldr	r2, [r7, #24]
 800642e:	2380      	movs	r3, #128	; 0x80
 8006430:	00db      	lsls	r3, r3, #3
 8006432:	4013      	ands	r3, r2
 8006434:	d00c      	beq.n	8006450 <I2C_IsErrorOccurred+0x19c>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006436:	6a3b      	ldr	r3, [r7, #32]
 8006438:	2208      	movs	r2, #8
 800643a:	4313      	orrs	r3, r2
 800643c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	2280      	movs	r2, #128	; 0x80
 8006444:	00d2      	lsls	r2, r2, #3
 8006446:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006448:	2327      	movs	r3, #39	; 0x27
 800644a:	18fb      	adds	r3, r7, r3
 800644c:	2201      	movs	r2, #1
 800644e:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006450:	69ba      	ldr	r2, [r7, #24]
 8006452:	2380      	movs	r3, #128	; 0x80
 8006454:	009b      	lsls	r3, r3, #2
 8006456:	4013      	ands	r3, r2
 8006458:	d00c      	beq.n	8006474 <I2C_IsErrorOccurred+0x1c0>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800645a:	6a3b      	ldr	r3, [r7, #32]
 800645c:	2202      	movs	r2, #2
 800645e:	4313      	orrs	r3, r2
 8006460:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	2280      	movs	r2, #128	; 0x80
 8006468:	0092      	lsls	r2, r2, #2
 800646a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800646c:	2327      	movs	r3, #39	; 0x27
 800646e:	18fb      	adds	r3, r7, r3
 8006470:	2201      	movs	r2, #1
 8006472:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8006474:	2327      	movs	r3, #39	; 0x27
 8006476:	18fb      	adds	r3, r7, r3
 8006478:	781b      	ldrb	r3, [r3, #0]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d01d      	beq.n	80064ba <I2C_IsErrorOccurred+0x206>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	0018      	movs	r0, r3
 8006482:	f7ff fdc1 	bl	8006008 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	685a      	ldr	r2, [r3, #4]
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	490d      	ldr	r1, [pc, #52]	; (80064c8 <I2C_IsErrorOccurred+0x214>)
 8006492:	400a      	ands	r2, r1
 8006494:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800649a:	6a3b      	ldr	r3, [r7, #32]
 800649c:	431a      	orrs	r2, r3
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	2241      	movs	r2, #65	; 0x41
 80064a6:	2120      	movs	r1, #32
 80064a8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	2242      	movs	r2, #66	; 0x42
 80064ae:	2100      	movs	r1, #0
 80064b0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2240      	movs	r2, #64	; 0x40
 80064b6:	2100      	movs	r1, #0
 80064b8:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80064ba:	2327      	movs	r3, #39	; 0x27
 80064bc:	18fb      	adds	r3, r7, r3
 80064be:	781b      	ldrb	r3, [r3, #0]
}
 80064c0:	0018      	movs	r0, r3
 80064c2:	46bd      	mov	sp, r7
 80064c4:	b00b      	add	sp, #44	; 0x2c
 80064c6:	bd90      	pop	{r4, r7, pc}
 80064c8:	fe00e800 	.word	0xfe00e800

080064cc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80064cc:	b590      	push	{r4, r7, lr}
 80064ce:	b087      	sub	sp, #28
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	60f8      	str	r0, [r7, #12]
 80064d4:	0008      	movs	r0, r1
 80064d6:	0011      	movs	r1, r2
 80064d8:	607b      	str	r3, [r7, #4]
 80064da:	240a      	movs	r4, #10
 80064dc:	193b      	adds	r3, r7, r4
 80064de:	1c02      	adds	r2, r0, #0
 80064e0:	801a      	strh	r2, [r3, #0]
 80064e2:	2009      	movs	r0, #9
 80064e4:	183b      	adds	r3, r7, r0
 80064e6:	1c0a      	adds	r2, r1, #0
 80064e8:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80064ea:	193b      	adds	r3, r7, r4
 80064ec:	881b      	ldrh	r3, [r3, #0]
 80064ee:	059b      	lsls	r3, r3, #22
 80064f0:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80064f2:	183b      	adds	r3, r7, r0
 80064f4:	781b      	ldrb	r3, [r3, #0]
 80064f6:	0419      	lsls	r1, r3, #16
 80064f8:	23ff      	movs	r3, #255	; 0xff
 80064fa:	041b      	lsls	r3, r3, #16
 80064fc:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80064fe:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006506:	4313      	orrs	r3, r2
 8006508:	005b      	lsls	r3, r3, #1
 800650a:	085b      	lsrs	r3, r3, #1
 800650c:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006516:	0d51      	lsrs	r1, r2, #21
 8006518:	2280      	movs	r2, #128	; 0x80
 800651a:	00d2      	lsls	r2, r2, #3
 800651c:	400a      	ands	r2, r1
 800651e:	4907      	ldr	r1, [pc, #28]	; (800653c <I2C_TransferConfig+0x70>)
 8006520:	430a      	orrs	r2, r1
 8006522:	43d2      	mvns	r2, r2
 8006524:	401a      	ands	r2, r3
 8006526:	0011      	movs	r1, r2
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	697a      	ldr	r2, [r7, #20]
 800652e:	430a      	orrs	r2, r1
 8006530:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006532:	46c0      	nop			; (mov r8, r8)
 8006534:	46bd      	mov	sp, r7
 8006536:	b007      	add	sp, #28
 8006538:	bd90      	pop	{r4, r7, pc}
 800653a:	46c0      	nop			; (mov r8, r8)
 800653c:	03ff63ff 	.word	0x03ff63ff

08006540 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b082      	sub	sp, #8
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
 8006548:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2241      	movs	r2, #65	; 0x41
 800654e:	5c9b      	ldrb	r3, [r3, r2]
 8006550:	b2db      	uxtb	r3, r3
 8006552:	2b20      	cmp	r3, #32
 8006554:	d138      	bne.n	80065c8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2240      	movs	r2, #64	; 0x40
 800655a:	5c9b      	ldrb	r3, [r3, r2]
 800655c:	2b01      	cmp	r3, #1
 800655e:	d101      	bne.n	8006564 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006560:	2302      	movs	r3, #2
 8006562:	e032      	b.n	80065ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2240      	movs	r2, #64	; 0x40
 8006568:	2101      	movs	r1, #1
 800656a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2241      	movs	r2, #65	; 0x41
 8006570:	2124      	movs	r1, #36	; 0x24
 8006572:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	681a      	ldr	r2, [r3, #0]
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	2101      	movs	r1, #1
 8006580:	438a      	bics	r2, r1
 8006582:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	681a      	ldr	r2, [r3, #0]
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4911      	ldr	r1, [pc, #68]	; (80065d4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8006590:	400a      	ands	r2, r1
 8006592:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	6819      	ldr	r1, [r3, #0]
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	683a      	ldr	r2, [r7, #0]
 80065a0:	430a      	orrs	r2, r1
 80065a2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	681a      	ldr	r2, [r3, #0]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	2101      	movs	r1, #1
 80065b0:	430a      	orrs	r2, r1
 80065b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2241      	movs	r2, #65	; 0x41
 80065b8:	2120      	movs	r1, #32
 80065ba:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2240      	movs	r2, #64	; 0x40
 80065c0:	2100      	movs	r1, #0
 80065c2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80065c4:	2300      	movs	r3, #0
 80065c6:	e000      	b.n	80065ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80065c8:	2302      	movs	r3, #2
  }
}
 80065ca:	0018      	movs	r0, r3
 80065cc:	46bd      	mov	sp, r7
 80065ce:	b002      	add	sp, #8
 80065d0:	bd80      	pop	{r7, pc}
 80065d2:	46c0      	nop			; (mov r8, r8)
 80065d4:	ffffefff 	.word	0xffffefff

080065d8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b084      	sub	sp, #16
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
 80065e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2241      	movs	r2, #65	; 0x41
 80065e6:	5c9b      	ldrb	r3, [r3, r2]
 80065e8:	b2db      	uxtb	r3, r3
 80065ea:	2b20      	cmp	r3, #32
 80065ec:	d139      	bne.n	8006662 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2240      	movs	r2, #64	; 0x40
 80065f2:	5c9b      	ldrb	r3, [r3, r2]
 80065f4:	2b01      	cmp	r3, #1
 80065f6:	d101      	bne.n	80065fc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80065f8:	2302      	movs	r3, #2
 80065fa:	e033      	b.n	8006664 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2240      	movs	r2, #64	; 0x40
 8006600:	2101      	movs	r1, #1
 8006602:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2241      	movs	r2, #65	; 0x41
 8006608:	2124      	movs	r1, #36	; 0x24
 800660a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	681a      	ldr	r2, [r3, #0]
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	2101      	movs	r1, #1
 8006618:	438a      	bics	r2, r1
 800661a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	4a11      	ldr	r2, [pc, #68]	; (800666c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8006628:	4013      	ands	r3, r2
 800662a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	021b      	lsls	r3, r3, #8
 8006630:	68fa      	ldr	r2, [r7, #12]
 8006632:	4313      	orrs	r3, r2
 8006634:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	68fa      	ldr	r2, [r7, #12]
 800663c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	681a      	ldr	r2, [r3, #0]
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	2101      	movs	r1, #1
 800664a:	430a      	orrs	r2, r1
 800664c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2241      	movs	r2, #65	; 0x41
 8006652:	2120      	movs	r1, #32
 8006654:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2240      	movs	r2, #64	; 0x40
 800665a:	2100      	movs	r1, #0
 800665c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800665e:	2300      	movs	r3, #0
 8006660:	e000      	b.n	8006664 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006662:	2302      	movs	r3, #2
  }
}
 8006664:	0018      	movs	r0, r3
 8006666:	46bd      	mov	sp, r7
 8006668:	b004      	add	sp, #16
 800666a:	bd80      	pop	{r7, pc}
 800666c:	fffff0ff 	.word	0xfffff0ff

08006670 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b084      	sub	sp, #16
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8006678:	4b19      	ldr	r3, [pc, #100]	; (80066e0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a19      	ldr	r2, [pc, #100]	; (80066e4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800667e:	4013      	ands	r3, r2
 8006680:	0019      	movs	r1, r3
 8006682:	4b17      	ldr	r3, [pc, #92]	; (80066e0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8006684:	687a      	ldr	r2, [r7, #4]
 8006686:	430a      	orrs	r2, r1
 8006688:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800668a:	687a      	ldr	r2, [r7, #4]
 800668c:	2380      	movs	r3, #128	; 0x80
 800668e:	009b      	lsls	r3, r3, #2
 8006690:	429a      	cmp	r2, r3
 8006692:	d11f      	bne.n	80066d4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8006694:	4b14      	ldr	r3, [pc, #80]	; (80066e8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8006696:	681a      	ldr	r2, [r3, #0]
 8006698:	0013      	movs	r3, r2
 800669a:	005b      	lsls	r3, r3, #1
 800669c:	189b      	adds	r3, r3, r2
 800669e:	005b      	lsls	r3, r3, #1
 80066a0:	4912      	ldr	r1, [pc, #72]	; (80066ec <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80066a2:	0018      	movs	r0, r3
 80066a4:	f7f9 fd4a 	bl	800013c <__udivsi3>
 80066a8:	0003      	movs	r3, r0
 80066aa:	3301      	adds	r3, #1
 80066ac:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80066ae:	e008      	b.n	80066c2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d003      	beq.n	80066be <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	3b01      	subs	r3, #1
 80066ba:	60fb      	str	r3, [r7, #12]
 80066bc:	e001      	b.n	80066c2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80066be:	2303      	movs	r3, #3
 80066c0:	e009      	b.n	80066d6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80066c2:	4b07      	ldr	r3, [pc, #28]	; (80066e0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80066c4:	695a      	ldr	r2, [r3, #20]
 80066c6:	2380      	movs	r3, #128	; 0x80
 80066c8:	00db      	lsls	r3, r3, #3
 80066ca:	401a      	ands	r2, r3
 80066cc:	2380      	movs	r3, #128	; 0x80
 80066ce:	00db      	lsls	r3, r3, #3
 80066d0:	429a      	cmp	r2, r3
 80066d2:	d0ed      	beq.n	80066b0 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80066d4:	2300      	movs	r3, #0
}
 80066d6:	0018      	movs	r0, r3
 80066d8:	46bd      	mov	sp, r7
 80066da:	b004      	add	sp, #16
 80066dc:	bd80      	pop	{r7, pc}
 80066de:	46c0      	nop			; (mov r8, r8)
 80066e0:	40007000 	.word	0x40007000
 80066e4:	fffff9ff 	.word	0xfffff9ff
 80066e8:	20000004 	.word	0x20000004
 80066ec:	000f4240 	.word	0x000f4240

080066f0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80066f4:	4b03      	ldr	r3, [pc, #12]	; (8006704 <LL_RCC_GetAPB1Prescaler+0x14>)
 80066f6:	689a      	ldr	r2, [r3, #8]
 80066f8:	23e0      	movs	r3, #224	; 0xe0
 80066fa:	01db      	lsls	r3, r3, #7
 80066fc:	4013      	ands	r3, r2
}
 80066fe:	0018      	movs	r0, r3
 8006700:	46bd      	mov	sp, r7
 8006702:	bd80      	pop	{r7, pc}
 8006704:	40021000 	.word	0x40021000

08006708 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b088      	sub	sp, #32
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d101      	bne.n	800671a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006716:	2301      	movs	r3, #1
 8006718:	e2fe      	b.n	8006d18 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	2201      	movs	r2, #1
 8006720:	4013      	ands	r3, r2
 8006722:	d100      	bne.n	8006726 <HAL_RCC_OscConfig+0x1e>
 8006724:	e07c      	b.n	8006820 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006726:	4bc3      	ldr	r3, [pc, #780]	; (8006a34 <HAL_RCC_OscConfig+0x32c>)
 8006728:	689b      	ldr	r3, [r3, #8]
 800672a:	2238      	movs	r2, #56	; 0x38
 800672c:	4013      	ands	r3, r2
 800672e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006730:	4bc0      	ldr	r3, [pc, #768]	; (8006a34 <HAL_RCC_OscConfig+0x32c>)
 8006732:	68db      	ldr	r3, [r3, #12]
 8006734:	2203      	movs	r2, #3
 8006736:	4013      	ands	r3, r2
 8006738:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800673a:	69bb      	ldr	r3, [r7, #24]
 800673c:	2b10      	cmp	r3, #16
 800673e:	d102      	bne.n	8006746 <HAL_RCC_OscConfig+0x3e>
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	2b03      	cmp	r3, #3
 8006744:	d002      	beq.n	800674c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8006746:	69bb      	ldr	r3, [r7, #24]
 8006748:	2b08      	cmp	r3, #8
 800674a:	d10b      	bne.n	8006764 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800674c:	4bb9      	ldr	r3, [pc, #740]	; (8006a34 <HAL_RCC_OscConfig+0x32c>)
 800674e:	681a      	ldr	r2, [r3, #0]
 8006750:	2380      	movs	r3, #128	; 0x80
 8006752:	029b      	lsls	r3, r3, #10
 8006754:	4013      	ands	r3, r2
 8006756:	d062      	beq.n	800681e <HAL_RCC_OscConfig+0x116>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d15e      	bne.n	800681e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8006760:	2301      	movs	r3, #1
 8006762:	e2d9      	b.n	8006d18 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	685a      	ldr	r2, [r3, #4]
 8006768:	2380      	movs	r3, #128	; 0x80
 800676a:	025b      	lsls	r3, r3, #9
 800676c:	429a      	cmp	r2, r3
 800676e:	d107      	bne.n	8006780 <HAL_RCC_OscConfig+0x78>
 8006770:	4bb0      	ldr	r3, [pc, #704]	; (8006a34 <HAL_RCC_OscConfig+0x32c>)
 8006772:	681a      	ldr	r2, [r3, #0]
 8006774:	4baf      	ldr	r3, [pc, #700]	; (8006a34 <HAL_RCC_OscConfig+0x32c>)
 8006776:	2180      	movs	r1, #128	; 0x80
 8006778:	0249      	lsls	r1, r1, #9
 800677a:	430a      	orrs	r2, r1
 800677c:	601a      	str	r2, [r3, #0]
 800677e:	e020      	b.n	80067c2 <HAL_RCC_OscConfig+0xba>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	685a      	ldr	r2, [r3, #4]
 8006784:	23a0      	movs	r3, #160	; 0xa0
 8006786:	02db      	lsls	r3, r3, #11
 8006788:	429a      	cmp	r2, r3
 800678a:	d10e      	bne.n	80067aa <HAL_RCC_OscConfig+0xa2>
 800678c:	4ba9      	ldr	r3, [pc, #676]	; (8006a34 <HAL_RCC_OscConfig+0x32c>)
 800678e:	681a      	ldr	r2, [r3, #0]
 8006790:	4ba8      	ldr	r3, [pc, #672]	; (8006a34 <HAL_RCC_OscConfig+0x32c>)
 8006792:	2180      	movs	r1, #128	; 0x80
 8006794:	02c9      	lsls	r1, r1, #11
 8006796:	430a      	orrs	r2, r1
 8006798:	601a      	str	r2, [r3, #0]
 800679a:	4ba6      	ldr	r3, [pc, #664]	; (8006a34 <HAL_RCC_OscConfig+0x32c>)
 800679c:	681a      	ldr	r2, [r3, #0]
 800679e:	4ba5      	ldr	r3, [pc, #660]	; (8006a34 <HAL_RCC_OscConfig+0x32c>)
 80067a0:	2180      	movs	r1, #128	; 0x80
 80067a2:	0249      	lsls	r1, r1, #9
 80067a4:	430a      	orrs	r2, r1
 80067a6:	601a      	str	r2, [r3, #0]
 80067a8:	e00b      	b.n	80067c2 <HAL_RCC_OscConfig+0xba>
 80067aa:	4ba2      	ldr	r3, [pc, #648]	; (8006a34 <HAL_RCC_OscConfig+0x32c>)
 80067ac:	681a      	ldr	r2, [r3, #0]
 80067ae:	4ba1      	ldr	r3, [pc, #644]	; (8006a34 <HAL_RCC_OscConfig+0x32c>)
 80067b0:	49a1      	ldr	r1, [pc, #644]	; (8006a38 <HAL_RCC_OscConfig+0x330>)
 80067b2:	400a      	ands	r2, r1
 80067b4:	601a      	str	r2, [r3, #0]
 80067b6:	4b9f      	ldr	r3, [pc, #636]	; (8006a34 <HAL_RCC_OscConfig+0x32c>)
 80067b8:	681a      	ldr	r2, [r3, #0]
 80067ba:	4b9e      	ldr	r3, [pc, #632]	; (8006a34 <HAL_RCC_OscConfig+0x32c>)
 80067bc:	499f      	ldr	r1, [pc, #636]	; (8006a3c <HAL_RCC_OscConfig+0x334>)
 80067be:	400a      	ands	r2, r1
 80067c0:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	685b      	ldr	r3, [r3, #4]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d014      	beq.n	80067f4 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067ca:	f7fd fb69 	bl	8003ea0 <HAL_GetTick>
 80067ce:	0003      	movs	r3, r0
 80067d0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80067d2:	e008      	b.n	80067e6 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80067d4:	f7fd fb64 	bl	8003ea0 <HAL_GetTick>
 80067d8:	0002      	movs	r2, r0
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	1ad3      	subs	r3, r2, r3
 80067de:	2b64      	cmp	r3, #100	; 0x64
 80067e0:	d901      	bls.n	80067e6 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80067e2:	2303      	movs	r3, #3
 80067e4:	e298      	b.n	8006d18 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80067e6:	4b93      	ldr	r3, [pc, #588]	; (8006a34 <HAL_RCC_OscConfig+0x32c>)
 80067e8:	681a      	ldr	r2, [r3, #0]
 80067ea:	2380      	movs	r3, #128	; 0x80
 80067ec:	029b      	lsls	r3, r3, #10
 80067ee:	4013      	ands	r3, r2
 80067f0:	d0f0      	beq.n	80067d4 <HAL_RCC_OscConfig+0xcc>
 80067f2:	e015      	b.n	8006820 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067f4:	f7fd fb54 	bl	8003ea0 <HAL_GetTick>
 80067f8:	0003      	movs	r3, r0
 80067fa:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80067fc:	e008      	b.n	8006810 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80067fe:	f7fd fb4f 	bl	8003ea0 <HAL_GetTick>
 8006802:	0002      	movs	r2, r0
 8006804:	693b      	ldr	r3, [r7, #16]
 8006806:	1ad3      	subs	r3, r2, r3
 8006808:	2b64      	cmp	r3, #100	; 0x64
 800680a:	d901      	bls.n	8006810 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800680c:	2303      	movs	r3, #3
 800680e:	e283      	b.n	8006d18 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006810:	4b88      	ldr	r3, [pc, #544]	; (8006a34 <HAL_RCC_OscConfig+0x32c>)
 8006812:	681a      	ldr	r2, [r3, #0]
 8006814:	2380      	movs	r3, #128	; 0x80
 8006816:	029b      	lsls	r3, r3, #10
 8006818:	4013      	ands	r3, r2
 800681a:	d1f0      	bne.n	80067fe <HAL_RCC_OscConfig+0xf6>
 800681c:	e000      	b.n	8006820 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800681e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	2202      	movs	r2, #2
 8006826:	4013      	ands	r3, r2
 8006828:	d100      	bne.n	800682c <HAL_RCC_OscConfig+0x124>
 800682a:	e099      	b.n	8006960 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800682c:	4b81      	ldr	r3, [pc, #516]	; (8006a34 <HAL_RCC_OscConfig+0x32c>)
 800682e:	689b      	ldr	r3, [r3, #8]
 8006830:	2238      	movs	r2, #56	; 0x38
 8006832:	4013      	ands	r3, r2
 8006834:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006836:	4b7f      	ldr	r3, [pc, #508]	; (8006a34 <HAL_RCC_OscConfig+0x32c>)
 8006838:	68db      	ldr	r3, [r3, #12]
 800683a:	2203      	movs	r2, #3
 800683c:	4013      	ands	r3, r2
 800683e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8006840:	69bb      	ldr	r3, [r7, #24]
 8006842:	2b10      	cmp	r3, #16
 8006844:	d102      	bne.n	800684c <HAL_RCC_OscConfig+0x144>
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	2b02      	cmp	r3, #2
 800684a:	d002      	beq.n	8006852 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800684c:	69bb      	ldr	r3, [r7, #24]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d135      	bne.n	80068be <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006852:	4b78      	ldr	r3, [pc, #480]	; (8006a34 <HAL_RCC_OscConfig+0x32c>)
 8006854:	681a      	ldr	r2, [r3, #0]
 8006856:	2380      	movs	r3, #128	; 0x80
 8006858:	00db      	lsls	r3, r3, #3
 800685a:	4013      	ands	r3, r2
 800685c:	d005      	beq.n	800686a <HAL_RCC_OscConfig+0x162>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	68db      	ldr	r3, [r3, #12]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d101      	bne.n	800686a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8006866:	2301      	movs	r3, #1
 8006868:	e256      	b.n	8006d18 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800686a:	4b72      	ldr	r3, [pc, #456]	; (8006a34 <HAL_RCC_OscConfig+0x32c>)
 800686c:	685b      	ldr	r3, [r3, #4]
 800686e:	4a74      	ldr	r2, [pc, #464]	; (8006a40 <HAL_RCC_OscConfig+0x338>)
 8006870:	4013      	ands	r3, r2
 8006872:	0019      	movs	r1, r3
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	695b      	ldr	r3, [r3, #20]
 8006878:	021a      	lsls	r2, r3, #8
 800687a:	4b6e      	ldr	r3, [pc, #440]	; (8006a34 <HAL_RCC_OscConfig+0x32c>)
 800687c:	430a      	orrs	r2, r1
 800687e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006880:	69bb      	ldr	r3, [r7, #24]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d112      	bne.n	80068ac <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8006886:	4b6b      	ldr	r3, [pc, #428]	; (8006a34 <HAL_RCC_OscConfig+0x32c>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4a6e      	ldr	r2, [pc, #440]	; (8006a44 <HAL_RCC_OscConfig+0x33c>)
 800688c:	4013      	ands	r3, r2
 800688e:	0019      	movs	r1, r3
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	691a      	ldr	r2, [r3, #16]
 8006894:	4b67      	ldr	r3, [pc, #412]	; (8006a34 <HAL_RCC_OscConfig+0x32c>)
 8006896:	430a      	orrs	r2, r1
 8006898:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800689a:	4b66      	ldr	r3, [pc, #408]	; (8006a34 <HAL_RCC_OscConfig+0x32c>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	0adb      	lsrs	r3, r3, #11
 80068a0:	2207      	movs	r2, #7
 80068a2:	4013      	ands	r3, r2
 80068a4:	4a68      	ldr	r2, [pc, #416]	; (8006a48 <HAL_RCC_OscConfig+0x340>)
 80068a6:	40da      	lsrs	r2, r3
 80068a8:	4b68      	ldr	r3, [pc, #416]	; (8006a4c <HAL_RCC_OscConfig+0x344>)
 80068aa:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80068ac:	4b68      	ldr	r3, [pc, #416]	; (8006a50 <HAL_RCC_OscConfig+0x348>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	0018      	movs	r0, r3
 80068b2:	f7fd fa99 	bl	8003de8 <HAL_InitTick>
 80068b6:	1e03      	subs	r3, r0, #0
 80068b8:	d051      	beq.n	800695e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80068ba:	2301      	movs	r3, #1
 80068bc:	e22c      	b.n	8006d18 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	68db      	ldr	r3, [r3, #12]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d030      	beq.n	8006928 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80068c6:	4b5b      	ldr	r3, [pc, #364]	; (8006a34 <HAL_RCC_OscConfig+0x32c>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a5e      	ldr	r2, [pc, #376]	; (8006a44 <HAL_RCC_OscConfig+0x33c>)
 80068cc:	4013      	ands	r3, r2
 80068ce:	0019      	movs	r1, r3
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	691a      	ldr	r2, [r3, #16]
 80068d4:	4b57      	ldr	r3, [pc, #348]	; (8006a34 <HAL_RCC_OscConfig+0x32c>)
 80068d6:	430a      	orrs	r2, r1
 80068d8:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80068da:	4b56      	ldr	r3, [pc, #344]	; (8006a34 <HAL_RCC_OscConfig+0x32c>)
 80068dc:	681a      	ldr	r2, [r3, #0]
 80068de:	4b55      	ldr	r3, [pc, #340]	; (8006a34 <HAL_RCC_OscConfig+0x32c>)
 80068e0:	2180      	movs	r1, #128	; 0x80
 80068e2:	0049      	lsls	r1, r1, #1
 80068e4:	430a      	orrs	r2, r1
 80068e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068e8:	f7fd fada 	bl	8003ea0 <HAL_GetTick>
 80068ec:	0003      	movs	r3, r0
 80068ee:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80068f0:	e008      	b.n	8006904 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80068f2:	f7fd fad5 	bl	8003ea0 <HAL_GetTick>
 80068f6:	0002      	movs	r2, r0
 80068f8:	693b      	ldr	r3, [r7, #16]
 80068fa:	1ad3      	subs	r3, r2, r3
 80068fc:	2b02      	cmp	r3, #2
 80068fe:	d901      	bls.n	8006904 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8006900:	2303      	movs	r3, #3
 8006902:	e209      	b.n	8006d18 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006904:	4b4b      	ldr	r3, [pc, #300]	; (8006a34 <HAL_RCC_OscConfig+0x32c>)
 8006906:	681a      	ldr	r2, [r3, #0]
 8006908:	2380      	movs	r3, #128	; 0x80
 800690a:	00db      	lsls	r3, r3, #3
 800690c:	4013      	ands	r3, r2
 800690e:	d0f0      	beq.n	80068f2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006910:	4b48      	ldr	r3, [pc, #288]	; (8006a34 <HAL_RCC_OscConfig+0x32c>)
 8006912:	685b      	ldr	r3, [r3, #4]
 8006914:	4a4a      	ldr	r2, [pc, #296]	; (8006a40 <HAL_RCC_OscConfig+0x338>)
 8006916:	4013      	ands	r3, r2
 8006918:	0019      	movs	r1, r3
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	695b      	ldr	r3, [r3, #20]
 800691e:	021a      	lsls	r2, r3, #8
 8006920:	4b44      	ldr	r3, [pc, #272]	; (8006a34 <HAL_RCC_OscConfig+0x32c>)
 8006922:	430a      	orrs	r2, r1
 8006924:	605a      	str	r2, [r3, #4]
 8006926:	e01b      	b.n	8006960 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8006928:	4b42      	ldr	r3, [pc, #264]	; (8006a34 <HAL_RCC_OscConfig+0x32c>)
 800692a:	681a      	ldr	r2, [r3, #0]
 800692c:	4b41      	ldr	r3, [pc, #260]	; (8006a34 <HAL_RCC_OscConfig+0x32c>)
 800692e:	4949      	ldr	r1, [pc, #292]	; (8006a54 <HAL_RCC_OscConfig+0x34c>)
 8006930:	400a      	ands	r2, r1
 8006932:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006934:	f7fd fab4 	bl	8003ea0 <HAL_GetTick>
 8006938:	0003      	movs	r3, r0
 800693a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800693c:	e008      	b.n	8006950 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800693e:	f7fd faaf 	bl	8003ea0 <HAL_GetTick>
 8006942:	0002      	movs	r2, r0
 8006944:	693b      	ldr	r3, [r7, #16]
 8006946:	1ad3      	subs	r3, r2, r3
 8006948:	2b02      	cmp	r3, #2
 800694a:	d901      	bls.n	8006950 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800694c:	2303      	movs	r3, #3
 800694e:	e1e3      	b.n	8006d18 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006950:	4b38      	ldr	r3, [pc, #224]	; (8006a34 <HAL_RCC_OscConfig+0x32c>)
 8006952:	681a      	ldr	r2, [r3, #0]
 8006954:	2380      	movs	r3, #128	; 0x80
 8006956:	00db      	lsls	r3, r3, #3
 8006958:	4013      	ands	r3, r2
 800695a:	d1f0      	bne.n	800693e <HAL_RCC_OscConfig+0x236>
 800695c:	e000      	b.n	8006960 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800695e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	2208      	movs	r2, #8
 8006966:	4013      	ands	r3, r2
 8006968:	d047      	beq.n	80069fa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800696a:	4b32      	ldr	r3, [pc, #200]	; (8006a34 <HAL_RCC_OscConfig+0x32c>)
 800696c:	689b      	ldr	r3, [r3, #8]
 800696e:	2238      	movs	r2, #56	; 0x38
 8006970:	4013      	ands	r3, r2
 8006972:	2b18      	cmp	r3, #24
 8006974:	d10a      	bne.n	800698c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8006976:	4b2f      	ldr	r3, [pc, #188]	; (8006a34 <HAL_RCC_OscConfig+0x32c>)
 8006978:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800697a:	2202      	movs	r2, #2
 800697c:	4013      	ands	r3, r2
 800697e:	d03c      	beq.n	80069fa <HAL_RCC_OscConfig+0x2f2>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	699b      	ldr	r3, [r3, #24]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d138      	bne.n	80069fa <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8006988:	2301      	movs	r3, #1
 800698a:	e1c5      	b.n	8006d18 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	699b      	ldr	r3, [r3, #24]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d019      	beq.n	80069c8 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8006994:	4b27      	ldr	r3, [pc, #156]	; (8006a34 <HAL_RCC_OscConfig+0x32c>)
 8006996:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006998:	4b26      	ldr	r3, [pc, #152]	; (8006a34 <HAL_RCC_OscConfig+0x32c>)
 800699a:	2101      	movs	r1, #1
 800699c:	430a      	orrs	r2, r1
 800699e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069a0:	f7fd fa7e 	bl	8003ea0 <HAL_GetTick>
 80069a4:	0003      	movs	r3, r0
 80069a6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80069a8:	e008      	b.n	80069bc <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80069aa:	f7fd fa79 	bl	8003ea0 <HAL_GetTick>
 80069ae:	0002      	movs	r2, r0
 80069b0:	693b      	ldr	r3, [r7, #16]
 80069b2:	1ad3      	subs	r3, r2, r3
 80069b4:	2b02      	cmp	r3, #2
 80069b6:	d901      	bls.n	80069bc <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80069b8:	2303      	movs	r3, #3
 80069ba:	e1ad      	b.n	8006d18 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80069bc:	4b1d      	ldr	r3, [pc, #116]	; (8006a34 <HAL_RCC_OscConfig+0x32c>)
 80069be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069c0:	2202      	movs	r2, #2
 80069c2:	4013      	ands	r3, r2
 80069c4:	d0f1      	beq.n	80069aa <HAL_RCC_OscConfig+0x2a2>
 80069c6:	e018      	b.n	80069fa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80069c8:	4b1a      	ldr	r3, [pc, #104]	; (8006a34 <HAL_RCC_OscConfig+0x32c>)
 80069ca:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80069cc:	4b19      	ldr	r3, [pc, #100]	; (8006a34 <HAL_RCC_OscConfig+0x32c>)
 80069ce:	2101      	movs	r1, #1
 80069d0:	438a      	bics	r2, r1
 80069d2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069d4:	f7fd fa64 	bl	8003ea0 <HAL_GetTick>
 80069d8:	0003      	movs	r3, r0
 80069da:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80069dc:	e008      	b.n	80069f0 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80069de:	f7fd fa5f 	bl	8003ea0 <HAL_GetTick>
 80069e2:	0002      	movs	r2, r0
 80069e4:	693b      	ldr	r3, [r7, #16]
 80069e6:	1ad3      	subs	r3, r2, r3
 80069e8:	2b02      	cmp	r3, #2
 80069ea:	d901      	bls.n	80069f0 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80069ec:	2303      	movs	r3, #3
 80069ee:	e193      	b.n	8006d18 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80069f0:	4b10      	ldr	r3, [pc, #64]	; (8006a34 <HAL_RCC_OscConfig+0x32c>)
 80069f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069f4:	2202      	movs	r2, #2
 80069f6:	4013      	ands	r3, r2
 80069f8:	d1f1      	bne.n	80069de <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	2204      	movs	r2, #4
 8006a00:	4013      	ands	r3, r2
 8006a02:	d100      	bne.n	8006a06 <HAL_RCC_OscConfig+0x2fe>
 8006a04:	e0c6      	b.n	8006b94 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006a06:	231f      	movs	r3, #31
 8006a08:	18fb      	adds	r3, r7, r3
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8006a0e:	4b09      	ldr	r3, [pc, #36]	; (8006a34 <HAL_RCC_OscConfig+0x32c>)
 8006a10:	689b      	ldr	r3, [r3, #8]
 8006a12:	2238      	movs	r2, #56	; 0x38
 8006a14:	4013      	ands	r3, r2
 8006a16:	2b20      	cmp	r3, #32
 8006a18:	d11e      	bne.n	8006a58 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8006a1a:	4b06      	ldr	r3, [pc, #24]	; (8006a34 <HAL_RCC_OscConfig+0x32c>)
 8006a1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a1e:	2202      	movs	r2, #2
 8006a20:	4013      	ands	r3, r2
 8006a22:	d100      	bne.n	8006a26 <HAL_RCC_OscConfig+0x31e>
 8006a24:	e0b6      	b.n	8006b94 <HAL_RCC_OscConfig+0x48c>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	689b      	ldr	r3, [r3, #8]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d000      	beq.n	8006a30 <HAL_RCC_OscConfig+0x328>
 8006a2e:	e0b1      	b.n	8006b94 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8006a30:	2301      	movs	r3, #1
 8006a32:	e171      	b.n	8006d18 <HAL_RCC_OscConfig+0x610>
 8006a34:	40021000 	.word	0x40021000
 8006a38:	fffeffff 	.word	0xfffeffff
 8006a3c:	fffbffff 	.word	0xfffbffff
 8006a40:	ffff80ff 	.word	0xffff80ff
 8006a44:	ffffc7ff 	.word	0xffffc7ff
 8006a48:	00f42400 	.word	0x00f42400
 8006a4c:	20000004 	.word	0x20000004
 8006a50:	20000008 	.word	0x20000008
 8006a54:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006a58:	4bb1      	ldr	r3, [pc, #708]	; (8006d20 <HAL_RCC_OscConfig+0x618>)
 8006a5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a5c:	2380      	movs	r3, #128	; 0x80
 8006a5e:	055b      	lsls	r3, r3, #21
 8006a60:	4013      	ands	r3, r2
 8006a62:	d101      	bne.n	8006a68 <HAL_RCC_OscConfig+0x360>
 8006a64:	2301      	movs	r3, #1
 8006a66:	e000      	b.n	8006a6a <HAL_RCC_OscConfig+0x362>
 8006a68:	2300      	movs	r3, #0
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d011      	beq.n	8006a92 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8006a6e:	4bac      	ldr	r3, [pc, #688]	; (8006d20 <HAL_RCC_OscConfig+0x618>)
 8006a70:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a72:	4bab      	ldr	r3, [pc, #684]	; (8006d20 <HAL_RCC_OscConfig+0x618>)
 8006a74:	2180      	movs	r1, #128	; 0x80
 8006a76:	0549      	lsls	r1, r1, #21
 8006a78:	430a      	orrs	r2, r1
 8006a7a:	63da      	str	r2, [r3, #60]	; 0x3c
 8006a7c:	4ba8      	ldr	r3, [pc, #672]	; (8006d20 <HAL_RCC_OscConfig+0x618>)
 8006a7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a80:	2380      	movs	r3, #128	; 0x80
 8006a82:	055b      	lsls	r3, r3, #21
 8006a84:	4013      	ands	r3, r2
 8006a86:	60fb      	str	r3, [r7, #12]
 8006a88:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8006a8a:	231f      	movs	r3, #31
 8006a8c:	18fb      	adds	r3, r7, r3
 8006a8e:	2201      	movs	r2, #1
 8006a90:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006a92:	4ba4      	ldr	r3, [pc, #656]	; (8006d24 <HAL_RCC_OscConfig+0x61c>)
 8006a94:	681a      	ldr	r2, [r3, #0]
 8006a96:	2380      	movs	r3, #128	; 0x80
 8006a98:	005b      	lsls	r3, r3, #1
 8006a9a:	4013      	ands	r3, r2
 8006a9c:	d11a      	bne.n	8006ad4 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006a9e:	4ba1      	ldr	r3, [pc, #644]	; (8006d24 <HAL_RCC_OscConfig+0x61c>)
 8006aa0:	681a      	ldr	r2, [r3, #0]
 8006aa2:	4ba0      	ldr	r3, [pc, #640]	; (8006d24 <HAL_RCC_OscConfig+0x61c>)
 8006aa4:	2180      	movs	r1, #128	; 0x80
 8006aa6:	0049      	lsls	r1, r1, #1
 8006aa8:	430a      	orrs	r2, r1
 8006aaa:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8006aac:	f7fd f9f8 	bl	8003ea0 <HAL_GetTick>
 8006ab0:	0003      	movs	r3, r0
 8006ab2:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006ab4:	e008      	b.n	8006ac8 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ab6:	f7fd f9f3 	bl	8003ea0 <HAL_GetTick>
 8006aba:	0002      	movs	r2, r0
 8006abc:	693b      	ldr	r3, [r7, #16]
 8006abe:	1ad3      	subs	r3, r2, r3
 8006ac0:	2b02      	cmp	r3, #2
 8006ac2:	d901      	bls.n	8006ac8 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8006ac4:	2303      	movs	r3, #3
 8006ac6:	e127      	b.n	8006d18 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006ac8:	4b96      	ldr	r3, [pc, #600]	; (8006d24 <HAL_RCC_OscConfig+0x61c>)
 8006aca:	681a      	ldr	r2, [r3, #0]
 8006acc:	2380      	movs	r3, #128	; 0x80
 8006ace:	005b      	lsls	r3, r3, #1
 8006ad0:	4013      	ands	r3, r2
 8006ad2:	d0f0      	beq.n	8006ab6 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	689b      	ldr	r3, [r3, #8]
 8006ad8:	2b01      	cmp	r3, #1
 8006ada:	d106      	bne.n	8006aea <HAL_RCC_OscConfig+0x3e2>
 8006adc:	4b90      	ldr	r3, [pc, #576]	; (8006d20 <HAL_RCC_OscConfig+0x618>)
 8006ade:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006ae0:	4b8f      	ldr	r3, [pc, #572]	; (8006d20 <HAL_RCC_OscConfig+0x618>)
 8006ae2:	2101      	movs	r1, #1
 8006ae4:	430a      	orrs	r2, r1
 8006ae6:	65da      	str	r2, [r3, #92]	; 0x5c
 8006ae8:	e01c      	b.n	8006b24 <HAL_RCC_OscConfig+0x41c>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	689b      	ldr	r3, [r3, #8]
 8006aee:	2b05      	cmp	r3, #5
 8006af0:	d10c      	bne.n	8006b0c <HAL_RCC_OscConfig+0x404>
 8006af2:	4b8b      	ldr	r3, [pc, #556]	; (8006d20 <HAL_RCC_OscConfig+0x618>)
 8006af4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006af6:	4b8a      	ldr	r3, [pc, #552]	; (8006d20 <HAL_RCC_OscConfig+0x618>)
 8006af8:	2104      	movs	r1, #4
 8006afa:	430a      	orrs	r2, r1
 8006afc:	65da      	str	r2, [r3, #92]	; 0x5c
 8006afe:	4b88      	ldr	r3, [pc, #544]	; (8006d20 <HAL_RCC_OscConfig+0x618>)
 8006b00:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006b02:	4b87      	ldr	r3, [pc, #540]	; (8006d20 <HAL_RCC_OscConfig+0x618>)
 8006b04:	2101      	movs	r1, #1
 8006b06:	430a      	orrs	r2, r1
 8006b08:	65da      	str	r2, [r3, #92]	; 0x5c
 8006b0a:	e00b      	b.n	8006b24 <HAL_RCC_OscConfig+0x41c>
 8006b0c:	4b84      	ldr	r3, [pc, #528]	; (8006d20 <HAL_RCC_OscConfig+0x618>)
 8006b0e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006b10:	4b83      	ldr	r3, [pc, #524]	; (8006d20 <HAL_RCC_OscConfig+0x618>)
 8006b12:	2101      	movs	r1, #1
 8006b14:	438a      	bics	r2, r1
 8006b16:	65da      	str	r2, [r3, #92]	; 0x5c
 8006b18:	4b81      	ldr	r3, [pc, #516]	; (8006d20 <HAL_RCC_OscConfig+0x618>)
 8006b1a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006b1c:	4b80      	ldr	r3, [pc, #512]	; (8006d20 <HAL_RCC_OscConfig+0x618>)
 8006b1e:	2104      	movs	r1, #4
 8006b20:	438a      	bics	r2, r1
 8006b22:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	689b      	ldr	r3, [r3, #8]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d014      	beq.n	8006b56 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b2c:	f7fd f9b8 	bl	8003ea0 <HAL_GetTick>
 8006b30:	0003      	movs	r3, r0
 8006b32:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006b34:	e009      	b.n	8006b4a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b36:	f7fd f9b3 	bl	8003ea0 <HAL_GetTick>
 8006b3a:	0002      	movs	r2, r0
 8006b3c:	693b      	ldr	r3, [r7, #16]
 8006b3e:	1ad3      	subs	r3, r2, r3
 8006b40:	4a79      	ldr	r2, [pc, #484]	; (8006d28 <HAL_RCC_OscConfig+0x620>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d901      	bls.n	8006b4a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8006b46:	2303      	movs	r3, #3
 8006b48:	e0e6      	b.n	8006d18 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006b4a:	4b75      	ldr	r3, [pc, #468]	; (8006d20 <HAL_RCC_OscConfig+0x618>)
 8006b4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b4e:	2202      	movs	r2, #2
 8006b50:	4013      	ands	r3, r2
 8006b52:	d0f0      	beq.n	8006b36 <HAL_RCC_OscConfig+0x42e>
 8006b54:	e013      	b.n	8006b7e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b56:	f7fd f9a3 	bl	8003ea0 <HAL_GetTick>
 8006b5a:	0003      	movs	r3, r0
 8006b5c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006b5e:	e009      	b.n	8006b74 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b60:	f7fd f99e 	bl	8003ea0 <HAL_GetTick>
 8006b64:	0002      	movs	r2, r0
 8006b66:	693b      	ldr	r3, [r7, #16]
 8006b68:	1ad3      	subs	r3, r2, r3
 8006b6a:	4a6f      	ldr	r2, [pc, #444]	; (8006d28 <HAL_RCC_OscConfig+0x620>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d901      	bls.n	8006b74 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8006b70:	2303      	movs	r3, #3
 8006b72:	e0d1      	b.n	8006d18 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006b74:	4b6a      	ldr	r3, [pc, #424]	; (8006d20 <HAL_RCC_OscConfig+0x618>)
 8006b76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b78:	2202      	movs	r2, #2
 8006b7a:	4013      	ands	r3, r2
 8006b7c:	d1f0      	bne.n	8006b60 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8006b7e:	231f      	movs	r3, #31
 8006b80:	18fb      	adds	r3, r7, r3
 8006b82:	781b      	ldrb	r3, [r3, #0]
 8006b84:	2b01      	cmp	r3, #1
 8006b86:	d105      	bne.n	8006b94 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8006b88:	4b65      	ldr	r3, [pc, #404]	; (8006d20 <HAL_RCC_OscConfig+0x618>)
 8006b8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006b8c:	4b64      	ldr	r3, [pc, #400]	; (8006d20 <HAL_RCC_OscConfig+0x618>)
 8006b8e:	4967      	ldr	r1, [pc, #412]	; (8006d2c <HAL_RCC_OscConfig+0x624>)
 8006b90:	400a      	ands	r2, r1
 8006b92:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	69db      	ldr	r3, [r3, #28]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d100      	bne.n	8006b9e <HAL_RCC_OscConfig+0x496>
 8006b9c:	e0bb      	b.n	8006d16 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006b9e:	4b60      	ldr	r3, [pc, #384]	; (8006d20 <HAL_RCC_OscConfig+0x618>)
 8006ba0:	689b      	ldr	r3, [r3, #8]
 8006ba2:	2238      	movs	r2, #56	; 0x38
 8006ba4:	4013      	ands	r3, r2
 8006ba6:	2b10      	cmp	r3, #16
 8006ba8:	d100      	bne.n	8006bac <HAL_RCC_OscConfig+0x4a4>
 8006baa:	e07b      	b.n	8006ca4 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	69db      	ldr	r3, [r3, #28]
 8006bb0:	2b02      	cmp	r3, #2
 8006bb2:	d156      	bne.n	8006c62 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006bb4:	4b5a      	ldr	r3, [pc, #360]	; (8006d20 <HAL_RCC_OscConfig+0x618>)
 8006bb6:	681a      	ldr	r2, [r3, #0]
 8006bb8:	4b59      	ldr	r3, [pc, #356]	; (8006d20 <HAL_RCC_OscConfig+0x618>)
 8006bba:	495d      	ldr	r1, [pc, #372]	; (8006d30 <HAL_RCC_OscConfig+0x628>)
 8006bbc:	400a      	ands	r2, r1
 8006bbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bc0:	f7fd f96e 	bl	8003ea0 <HAL_GetTick>
 8006bc4:	0003      	movs	r3, r0
 8006bc6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006bc8:	e008      	b.n	8006bdc <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006bca:	f7fd f969 	bl	8003ea0 <HAL_GetTick>
 8006bce:	0002      	movs	r2, r0
 8006bd0:	693b      	ldr	r3, [r7, #16]
 8006bd2:	1ad3      	subs	r3, r2, r3
 8006bd4:	2b02      	cmp	r3, #2
 8006bd6:	d901      	bls.n	8006bdc <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8006bd8:	2303      	movs	r3, #3
 8006bda:	e09d      	b.n	8006d18 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006bdc:	4b50      	ldr	r3, [pc, #320]	; (8006d20 <HAL_RCC_OscConfig+0x618>)
 8006bde:	681a      	ldr	r2, [r3, #0]
 8006be0:	2380      	movs	r3, #128	; 0x80
 8006be2:	049b      	lsls	r3, r3, #18
 8006be4:	4013      	ands	r3, r2
 8006be6:	d1f0      	bne.n	8006bca <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006be8:	4b4d      	ldr	r3, [pc, #308]	; (8006d20 <HAL_RCC_OscConfig+0x618>)
 8006bea:	68db      	ldr	r3, [r3, #12]
 8006bec:	4a51      	ldr	r2, [pc, #324]	; (8006d34 <HAL_RCC_OscConfig+0x62c>)
 8006bee:	4013      	ands	r3, r2
 8006bf0:	0019      	movs	r1, r3
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6a1a      	ldr	r2, [r3, #32]
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bfa:	431a      	orrs	r2, r3
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c00:	021b      	lsls	r3, r3, #8
 8006c02:	431a      	orrs	r2, r3
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c08:	431a      	orrs	r2, r3
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c0e:	431a      	orrs	r2, r3
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c14:	431a      	orrs	r2, r3
 8006c16:	4b42      	ldr	r3, [pc, #264]	; (8006d20 <HAL_RCC_OscConfig+0x618>)
 8006c18:	430a      	orrs	r2, r1
 8006c1a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006c1c:	4b40      	ldr	r3, [pc, #256]	; (8006d20 <HAL_RCC_OscConfig+0x618>)
 8006c1e:	681a      	ldr	r2, [r3, #0]
 8006c20:	4b3f      	ldr	r3, [pc, #252]	; (8006d20 <HAL_RCC_OscConfig+0x618>)
 8006c22:	2180      	movs	r1, #128	; 0x80
 8006c24:	0449      	lsls	r1, r1, #17
 8006c26:	430a      	orrs	r2, r1
 8006c28:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8006c2a:	4b3d      	ldr	r3, [pc, #244]	; (8006d20 <HAL_RCC_OscConfig+0x618>)
 8006c2c:	68da      	ldr	r2, [r3, #12]
 8006c2e:	4b3c      	ldr	r3, [pc, #240]	; (8006d20 <HAL_RCC_OscConfig+0x618>)
 8006c30:	2180      	movs	r1, #128	; 0x80
 8006c32:	0549      	lsls	r1, r1, #21
 8006c34:	430a      	orrs	r2, r1
 8006c36:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c38:	f7fd f932 	bl	8003ea0 <HAL_GetTick>
 8006c3c:	0003      	movs	r3, r0
 8006c3e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006c40:	e008      	b.n	8006c54 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c42:	f7fd f92d 	bl	8003ea0 <HAL_GetTick>
 8006c46:	0002      	movs	r2, r0
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	1ad3      	subs	r3, r2, r3
 8006c4c:	2b02      	cmp	r3, #2
 8006c4e:	d901      	bls.n	8006c54 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8006c50:	2303      	movs	r3, #3
 8006c52:	e061      	b.n	8006d18 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006c54:	4b32      	ldr	r3, [pc, #200]	; (8006d20 <HAL_RCC_OscConfig+0x618>)
 8006c56:	681a      	ldr	r2, [r3, #0]
 8006c58:	2380      	movs	r3, #128	; 0x80
 8006c5a:	049b      	lsls	r3, r3, #18
 8006c5c:	4013      	ands	r3, r2
 8006c5e:	d0f0      	beq.n	8006c42 <HAL_RCC_OscConfig+0x53a>
 8006c60:	e059      	b.n	8006d16 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c62:	4b2f      	ldr	r3, [pc, #188]	; (8006d20 <HAL_RCC_OscConfig+0x618>)
 8006c64:	681a      	ldr	r2, [r3, #0]
 8006c66:	4b2e      	ldr	r3, [pc, #184]	; (8006d20 <HAL_RCC_OscConfig+0x618>)
 8006c68:	4931      	ldr	r1, [pc, #196]	; (8006d30 <HAL_RCC_OscConfig+0x628>)
 8006c6a:	400a      	ands	r2, r1
 8006c6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c6e:	f7fd f917 	bl	8003ea0 <HAL_GetTick>
 8006c72:	0003      	movs	r3, r0
 8006c74:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006c76:	e008      	b.n	8006c8a <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c78:	f7fd f912 	bl	8003ea0 <HAL_GetTick>
 8006c7c:	0002      	movs	r2, r0
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	1ad3      	subs	r3, r2, r3
 8006c82:	2b02      	cmp	r3, #2
 8006c84:	d901      	bls.n	8006c8a <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8006c86:	2303      	movs	r3, #3
 8006c88:	e046      	b.n	8006d18 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006c8a:	4b25      	ldr	r3, [pc, #148]	; (8006d20 <HAL_RCC_OscConfig+0x618>)
 8006c8c:	681a      	ldr	r2, [r3, #0]
 8006c8e:	2380      	movs	r3, #128	; 0x80
 8006c90:	049b      	lsls	r3, r3, #18
 8006c92:	4013      	ands	r3, r2
 8006c94:	d1f0      	bne.n	8006c78 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8006c96:	4b22      	ldr	r3, [pc, #136]	; (8006d20 <HAL_RCC_OscConfig+0x618>)
 8006c98:	68da      	ldr	r2, [r3, #12]
 8006c9a:	4b21      	ldr	r3, [pc, #132]	; (8006d20 <HAL_RCC_OscConfig+0x618>)
 8006c9c:	4926      	ldr	r1, [pc, #152]	; (8006d38 <HAL_RCC_OscConfig+0x630>)
 8006c9e:	400a      	ands	r2, r1
 8006ca0:	60da      	str	r2, [r3, #12]
 8006ca2:	e038      	b.n	8006d16 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	69db      	ldr	r3, [r3, #28]
 8006ca8:	2b01      	cmp	r3, #1
 8006caa:	d101      	bne.n	8006cb0 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8006cac:	2301      	movs	r3, #1
 8006cae:	e033      	b.n	8006d18 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8006cb0:	4b1b      	ldr	r3, [pc, #108]	; (8006d20 <HAL_RCC_OscConfig+0x618>)
 8006cb2:	68db      	ldr	r3, [r3, #12]
 8006cb4:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006cb6:	697b      	ldr	r3, [r7, #20]
 8006cb8:	2203      	movs	r2, #3
 8006cba:	401a      	ands	r2, r3
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6a1b      	ldr	r3, [r3, #32]
 8006cc0:	429a      	cmp	r2, r3
 8006cc2:	d126      	bne.n	8006d12 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006cc4:	697b      	ldr	r3, [r7, #20]
 8006cc6:	2270      	movs	r2, #112	; 0x70
 8006cc8:	401a      	ands	r2, r3
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006cce:	429a      	cmp	r2, r3
 8006cd0:	d11f      	bne.n	8006d12 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006cd2:	697a      	ldr	r2, [r7, #20]
 8006cd4:	23fe      	movs	r3, #254	; 0xfe
 8006cd6:	01db      	lsls	r3, r3, #7
 8006cd8:	401a      	ands	r2, r3
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cde:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006ce0:	429a      	cmp	r2, r3
 8006ce2:	d116      	bne.n	8006d12 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006ce4:	697a      	ldr	r2, [r7, #20]
 8006ce6:	23f8      	movs	r3, #248	; 0xf8
 8006ce8:	039b      	lsls	r3, r3, #14
 8006cea:	401a      	ands	r2, r3
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006cf0:	429a      	cmp	r2, r3
 8006cf2:	d10e      	bne.n	8006d12 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006cf4:	697a      	ldr	r2, [r7, #20]
 8006cf6:	23e0      	movs	r3, #224	; 0xe0
 8006cf8:	051b      	lsls	r3, r3, #20
 8006cfa:	401a      	ands	r2, r3
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006d00:	429a      	cmp	r2, r3
 8006d02:	d106      	bne.n	8006d12 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8006d04:	697b      	ldr	r3, [r7, #20]
 8006d06:	0f5b      	lsrs	r3, r3, #29
 8006d08:	075a      	lsls	r2, r3, #29
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006d0e:	429a      	cmp	r2, r3
 8006d10:	d001      	beq.n	8006d16 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8006d12:	2301      	movs	r3, #1
 8006d14:	e000      	b.n	8006d18 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8006d16:	2300      	movs	r3, #0
}
 8006d18:	0018      	movs	r0, r3
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	b008      	add	sp, #32
 8006d1e:	bd80      	pop	{r7, pc}
 8006d20:	40021000 	.word	0x40021000
 8006d24:	40007000 	.word	0x40007000
 8006d28:	00001388 	.word	0x00001388
 8006d2c:	efffffff 	.word	0xefffffff
 8006d30:	feffffff 	.word	0xfeffffff
 8006d34:	11c1808c 	.word	0x11c1808c
 8006d38:	eefefffc 	.word	0xeefefffc

08006d3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b084      	sub	sp, #16
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
 8006d44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d101      	bne.n	8006d50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	e0e9      	b.n	8006f24 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006d50:	4b76      	ldr	r3, [pc, #472]	; (8006f2c <HAL_RCC_ClockConfig+0x1f0>)
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	2207      	movs	r2, #7
 8006d56:	4013      	ands	r3, r2
 8006d58:	683a      	ldr	r2, [r7, #0]
 8006d5a:	429a      	cmp	r2, r3
 8006d5c:	d91e      	bls.n	8006d9c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d5e:	4b73      	ldr	r3, [pc, #460]	; (8006f2c <HAL_RCC_ClockConfig+0x1f0>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	2207      	movs	r2, #7
 8006d64:	4393      	bics	r3, r2
 8006d66:	0019      	movs	r1, r3
 8006d68:	4b70      	ldr	r3, [pc, #448]	; (8006f2c <HAL_RCC_ClockConfig+0x1f0>)
 8006d6a:	683a      	ldr	r2, [r7, #0]
 8006d6c:	430a      	orrs	r2, r1
 8006d6e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006d70:	f7fd f896 	bl	8003ea0 <HAL_GetTick>
 8006d74:	0003      	movs	r3, r0
 8006d76:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006d78:	e009      	b.n	8006d8e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d7a:	f7fd f891 	bl	8003ea0 <HAL_GetTick>
 8006d7e:	0002      	movs	r2, r0
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	1ad3      	subs	r3, r2, r3
 8006d84:	4a6a      	ldr	r2, [pc, #424]	; (8006f30 <HAL_RCC_ClockConfig+0x1f4>)
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d901      	bls.n	8006d8e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8006d8a:	2303      	movs	r3, #3
 8006d8c:	e0ca      	b.n	8006f24 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006d8e:	4b67      	ldr	r3, [pc, #412]	; (8006f2c <HAL_RCC_ClockConfig+0x1f0>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	2207      	movs	r2, #7
 8006d94:	4013      	ands	r3, r2
 8006d96:	683a      	ldr	r2, [r7, #0]
 8006d98:	429a      	cmp	r2, r3
 8006d9a:	d1ee      	bne.n	8006d7a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	2202      	movs	r2, #2
 8006da2:	4013      	ands	r3, r2
 8006da4:	d015      	beq.n	8006dd2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	2204      	movs	r2, #4
 8006dac:	4013      	ands	r3, r2
 8006dae:	d006      	beq.n	8006dbe <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8006db0:	4b60      	ldr	r3, [pc, #384]	; (8006f34 <HAL_RCC_ClockConfig+0x1f8>)
 8006db2:	689a      	ldr	r2, [r3, #8]
 8006db4:	4b5f      	ldr	r3, [pc, #380]	; (8006f34 <HAL_RCC_ClockConfig+0x1f8>)
 8006db6:	21e0      	movs	r1, #224	; 0xe0
 8006db8:	01c9      	lsls	r1, r1, #7
 8006dba:	430a      	orrs	r2, r1
 8006dbc:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006dbe:	4b5d      	ldr	r3, [pc, #372]	; (8006f34 <HAL_RCC_ClockConfig+0x1f8>)
 8006dc0:	689b      	ldr	r3, [r3, #8]
 8006dc2:	4a5d      	ldr	r2, [pc, #372]	; (8006f38 <HAL_RCC_ClockConfig+0x1fc>)
 8006dc4:	4013      	ands	r3, r2
 8006dc6:	0019      	movs	r1, r3
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	689a      	ldr	r2, [r3, #8]
 8006dcc:	4b59      	ldr	r3, [pc, #356]	; (8006f34 <HAL_RCC_ClockConfig+0x1f8>)
 8006dce:	430a      	orrs	r2, r1
 8006dd0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	4013      	ands	r3, r2
 8006dda:	d057      	beq.n	8006e8c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	685b      	ldr	r3, [r3, #4]
 8006de0:	2b01      	cmp	r3, #1
 8006de2:	d107      	bne.n	8006df4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006de4:	4b53      	ldr	r3, [pc, #332]	; (8006f34 <HAL_RCC_ClockConfig+0x1f8>)
 8006de6:	681a      	ldr	r2, [r3, #0]
 8006de8:	2380      	movs	r3, #128	; 0x80
 8006dea:	029b      	lsls	r3, r3, #10
 8006dec:	4013      	ands	r3, r2
 8006dee:	d12b      	bne.n	8006e48 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006df0:	2301      	movs	r3, #1
 8006df2:	e097      	b.n	8006f24 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	685b      	ldr	r3, [r3, #4]
 8006df8:	2b02      	cmp	r3, #2
 8006dfa:	d107      	bne.n	8006e0c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006dfc:	4b4d      	ldr	r3, [pc, #308]	; (8006f34 <HAL_RCC_ClockConfig+0x1f8>)
 8006dfe:	681a      	ldr	r2, [r3, #0]
 8006e00:	2380      	movs	r3, #128	; 0x80
 8006e02:	049b      	lsls	r3, r3, #18
 8006e04:	4013      	ands	r3, r2
 8006e06:	d11f      	bne.n	8006e48 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006e08:	2301      	movs	r3, #1
 8006e0a:	e08b      	b.n	8006f24 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	685b      	ldr	r3, [r3, #4]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d107      	bne.n	8006e24 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006e14:	4b47      	ldr	r3, [pc, #284]	; (8006f34 <HAL_RCC_ClockConfig+0x1f8>)
 8006e16:	681a      	ldr	r2, [r3, #0]
 8006e18:	2380      	movs	r3, #128	; 0x80
 8006e1a:	00db      	lsls	r3, r3, #3
 8006e1c:	4013      	ands	r3, r2
 8006e1e:	d113      	bne.n	8006e48 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006e20:	2301      	movs	r3, #1
 8006e22:	e07f      	b.n	8006f24 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	685b      	ldr	r3, [r3, #4]
 8006e28:	2b03      	cmp	r3, #3
 8006e2a:	d106      	bne.n	8006e3a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006e2c:	4b41      	ldr	r3, [pc, #260]	; (8006f34 <HAL_RCC_ClockConfig+0x1f8>)
 8006e2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e30:	2202      	movs	r2, #2
 8006e32:	4013      	ands	r3, r2
 8006e34:	d108      	bne.n	8006e48 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006e36:	2301      	movs	r3, #1
 8006e38:	e074      	b.n	8006f24 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006e3a:	4b3e      	ldr	r3, [pc, #248]	; (8006f34 <HAL_RCC_ClockConfig+0x1f8>)
 8006e3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e3e:	2202      	movs	r2, #2
 8006e40:	4013      	ands	r3, r2
 8006e42:	d101      	bne.n	8006e48 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006e44:	2301      	movs	r3, #1
 8006e46:	e06d      	b.n	8006f24 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006e48:	4b3a      	ldr	r3, [pc, #232]	; (8006f34 <HAL_RCC_ClockConfig+0x1f8>)
 8006e4a:	689b      	ldr	r3, [r3, #8]
 8006e4c:	2207      	movs	r2, #7
 8006e4e:	4393      	bics	r3, r2
 8006e50:	0019      	movs	r1, r3
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	685a      	ldr	r2, [r3, #4]
 8006e56:	4b37      	ldr	r3, [pc, #220]	; (8006f34 <HAL_RCC_ClockConfig+0x1f8>)
 8006e58:	430a      	orrs	r2, r1
 8006e5a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e5c:	f7fd f820 	bl	8003ea0 <HAL_GetTick>
 8006e60:	0003      	movs	r3, r0
 8006e62:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e64:	e009      	b.n	8006e7a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e66:	f7fd f81b 	bl	8003ea0 <HAL_GetTick>
 8006e6a:	0002      	movs	r2, r0
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	1ad3      	subs	r3, r2, r3
 8006e70:	4a2f      	ldr	r2, [pc, #188]	; (8006f30 <HAL_RCC_ClockConfig+0x1f4>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d901      	bls.n	8006e7a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8006e76:	2303      	movs	r3, #3
 8006e78:	e054      	b.n	8006f24 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e7a:	4b2e      	ldr	r3, [pc, #184]	; (8006f34 <HAL_RCC_ClockConfig+0x1f8>)
 8006e7c:	689b      	ldr	r3, [r3, #8]
 8006e7e:	2238      	movs	r2, #56	; 0x38
 8006e80:	401a      	ands	r2, r3
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	685b      	ldr	r3, [r3, #4]
 8006e86:	00db      	lsls	r3, r3, #3
 8006e88:	429a      	cmp	r2, r3
 8006e8a:	d1ec      	bne.n	8006e66 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006e8c:	4b27      	ldr	r3, [pc, #156]	; (8006f2c <HAL_RCC_ClockConfig+0x1f0>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	2207      	movs	r2, #7
 8006e92:	4013      	ands	r3, r2
 8006e94:	683a      	ldr	r2, [r7, #0]
 8006e96:	429a      	cmp	r2, r3
 8006e98:	d21e      	bcs.n	8006ed8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e9a:	4b24      	ldr	r3, [pc, #144]	; (8006f2c <HAL_RCC_ClockConfig+0x1f0>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	2207      	movs	r2, #7
 8006ea0:	4393      	bics	r3, r2
 8006ea2:	0019      	movs	r1, r3
 8006ea4:	4b21      	ldr	r3, [pc, #132]	; (8006f2c <HAL_RCC_ClockConfig+0x1f0>)
 8006ea6:	683a      	ldr	r2, [r7, #0]
 8006ea8:	430a      	orrs	r2, r1
 8006eaa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006eac:	f7fc fff8 	bl	8003ea0 <HAL_GetTick>
 8006eb0:	0003      	movs	r3, r0
 8006eb2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006eb4:	e009      	b.n	8006eca <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006eb6:	f7fc fff3 	bl	8003ea0 <HAL_GetTick>
 8006eba:	0002      	movs	r2, r0
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	1ad3      	subs	r3, r2, r3
 8006ec0:	4a1b      	ldr	r2, [pc, #108]	; (8006f30 <HAL_RCC_ClockConfig+0x1f4>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d901      	bls.n	8006eca <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8006ec6:	2303      	movs	r3, #3
 8006ec8:	e02c      	b.n	8006f24 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006eca:	4b18      	ldr	r3, [pc, #96]	; (8006f2c <HAL_RCC_ClockConfig+0x1f0>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	2207      	movs	r2, #7
 8006ed0:	4013      	ands	r3, r2
 8006ed2:	683a      	ldr	r2, [r7, #0]
 8006ed4:	429a      	cmp	r2, r3
 8006ed6:	d1ee      	bne.n	8006eb6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	2204      	movs	r2, #4
 8006ede:	4013      	ands	r3, r2
 8006ee0:	d009      	beq.n	8006ef6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8006ee2:	4b14      	ldr	r3, [pc, #80]	; (8006f34 <HAL_RCC_ClockConfig+0x1f8>)
 8006ee4:	689b      	ldr	r3, [r3, #8]
 8006ee6:	4a15      	ldr	r2, [pc, #84]	; (8006f3c <HAL_RCC_ClockConfig+0x200>)
 8006ee8:	4013      	ands	r3, r2
 8006eea:	0019      	movs	r1, r3
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	68da      	ldr	r2, [r3, #12]
 8006ef0:	4b10      	ldr	r3, [pc, #64]	; (8006f34 <HAL_RCC_ClockConfig+0x1f8>)
 8006ef2:	430a      	orrs	r2, r1
 8006ef4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8006ef6:	f000 f829 	bl	8006f4c <HAL_RCC_GetSysClockFreq>
 8006efa:	0001      	movs	r1, r0
 8006efc:	4b0d      	ldr	r3, [pc, #52]	; (8006f34 <HAL_RCC_ClockConfig+0x1f8>)
 8006efe:	689b      	ldr	r3, [r3, #8]
 8006f00:	0a1b      	lsrs	r3, r3, #8
 8006f02:	220f      	movs	r2, #15
 8006f04:	401a      	ands	r2, r3
 8006f06:	4b0e      	ldr	r3, [pc, #56]	; (8006f40 <HAL_RCC_ClockConfig+0x204>)
 8006f08:	0092      	lsls	r2, r2, #2
 8006f0a:	58d3      	ldr	r3, [r2, r3]
 8006f0c:	221f      	movs	r2, #31
 8006f0e:	4013      	ands	r3, r2
 8006f10:	000a      	movs	r2, r1
 8006f12:	40da      	lsrs	r2, r3
 8006f14:	4b0b      	ldr	r3, [pc, #44]	; (8006f44 <HAL_RCC_ClockConfig+0x208>)
 8006f16:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006f18:	4b0b      	ldr	r3, [pc, #44]	; (8006f48 <HAL_RCC_ClockConfig+0x20c>)
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	0018      	movs	r0, r3
 8006f1e:	f7fc ff63 	bl	8003de8 <HAL_InitTick>
 8006f22:	0003      	movs	r3, r0
}
 8006f24:	0018      	movs	r0, r3
 8006f26:	46bd      	mov	sp, r7
 8006f28:	b004      	add	sp, #16
 8006f2a:	bd80      	pop	{r7, pc}
 8006f2c:	40022000 	.word	0x40022000
 8006f30:	00001388 	.word	0x00001388
 8006f34:	40021000 	.word	0x40021000
 8006f38:	fffff0ff 	.word	0xfffff0ff
 8006f3c:	ffff8fff 	.word	0xffff8fff
 8006f40:	0800cf50 	.word	0x0800cf50
 8006f44:	20000004 	.word	0x20000004
 8006f48:	20000008 	.word	0x20000008

08006f4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b086      	sub	sp, #24
 8006f50:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006f52:	4b3c      	ldr	r3, [pc, #240]	; (8007044 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006f54:	689b      	ldr	r3, [r3, #8]
 8006f56:	2238      	movs	r2, #56	; 0x38
 8006f58:	4013      	ands	r3, r2
 8006f5a:	d10f      	bne.n	8006f7c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8006f5c:	4b39      	ldr	r3, [pc, #228]	; (8007044 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	0adb      	lsrs	r3, r3, #11
 8006f62:	2207      	movs	r2, #7
 8006f64:	4013      	ands	r3, r2
 8006f66:	2201      	movs	r2, #1
 8006f68:	409a      	lsls	r2, r3
 8006f6a:	0013      	movs	r3, r2
 8006f6c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8006f6e:	6839      	ldr	r1, [r7, #0]
 8006f70:	4835      	ldr	r0, [pc, #212]	; (8007048 <HAL_RCC_GetSysClockFreq+0xfc>)
 8006f72:	f7f9 f8e3 	bl	800013c <__udivsi3>
 8006f76:	0003      	movs	r3, r0
 8006f78:	613b      	str	r3, [r7, #16]
 8006f7a:	e05d      	b.n	8007038 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006f7c:	4b31      	ldr	r3, [pc, #196]	; (8007044 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006f7e:	689b      	ldr	r3, [r3, #8]
 8006f80:	2238      	movs	r2, #56	; 0x38
 8006f82:	4013      	ands	r3, r2
 8006f84:	2b08      	cmp	r3, #8
 8006f86:	d102      	bne.n	8006f8e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006f88:	4b30      	ldr	r3, [pc, #192]	; (800704c <HAL_RCC_GetSysClockFreq+0x100>)
 8006f8a:	613b      	str	r3, [r7, #16]
 8006f8c:	e054      	b.n	8007038 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006f8e:	4b2d      	ldr	r3, [pc, #180]	; (8007044 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006f90:	689b      	ldr	r3, [r3, #8]
 8006f92:	2238      	movs	r2, #56	; 0x38
 8006f94:	4013      	ands	r3, r2
 8006f96:	2b10      	cmp	r3, #16
 8006f98:	d138      	bne.n	800700c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8006f9a:	4b2a      	ldr	r3, [pc, #168]	; (8007044 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006f9c:	68db      	ldr	r3, [r3, #12]
 8006f9e:	2203      	movs	r2, #3
 8006fa0:	4013      	ands	r3, r2
 8006fa2:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006fa4:	4b27      	ldr	r3, [pc, #156]	; (8007044 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006fa6:	68db      	ldr	r3, [r3, #12]
 8006fa8:	091b      	lsrs	r3, r3, #4
 8006faa:	2207      	movs	r2, #7
 8006fac:	4013      	ands	r3, r2
 8006fae:	3301      	adds	r3, #1
 8006fb0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	2b03      	cmp	r3, #3
 8006fb6:	d10d      	bne.n	8006fd4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006fb8:	68b9      	ldr	r1, [r7, #8]
 8006fba:	4824      	ldr	r0, [pc, #144]	; (800704c <HAL_RCC_GetSysClockFreq+0x100>)
 8006fbc:	f7f9 f8be 	bl	800013c <__udivsi3>
 8006fc0:	0003      	movs	r3, r0
 8006fc2:	0019      	movs	r1, r3
 8006fc4:	4b1f      	ldr	r3, [pc, #124]	; (8007044 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006fc6:	68db      	ldr	r3, [r3, #12]
 8006fc8:	0a1b      	lsrs	r3, r3, #8
 8006fca:	227f      	movs	r2, #127	; 0x7f
 8006fcc:	4013      	ands	r3, r2
 8006fce:	434b      	muls	r3, r1
 8006fd0:	617b      	str	r3, [r7, #20]
        break;
 8006fd2:	e00d      	b.n	8006ff0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8006fd4:	68b9      	ldr	r1, [r7, #8]
 8006fd6:	481c      	ldr	r0, [pc, #112]	; (8007048 <HAL_RCC_GetSysClockFreq+0xfc>)
 8006fd8:	f7f9 f8b0 	bl	800013c <__udivsi3>
 8006fdc:	0003      	movs	r3, r0
 8006fde:	0019      	movs	r1, r3
 8006fe0:	4b18      	ldr	r3, [pc, #96]	; (8007044 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006fe2:	68db      	ldr	r3, [r3, #12]
 8006fe4:	0a1b      	lsrs	r3, r3, #8
 8006fe6:	227f      	movs	r2, #127	; 0x7f
 8006fe8:	4013      	ands	r3, r2
 8006fea:	434b      	muls	r3, r1
 8006fec:	617b      	str	r3, [r7, #20]
        break;
 8006fee:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8006ff0:	4b14      	ldr	r3, [pc, #80]	; (8007044 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006ff2:	68db      	ldr	r3, [r3, #12]
 8006ff4:	0f5b      	lsrs	r3, r3, #29
 8006ff6:	2207      	movs	r2, #7
 8006ff8:	4013      	ands	r3, r2
 8006ffa:	3301      	adds	r3, #1
 8006ffc:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8006ffe:	6879      	ldr	r1, [r7, #4]
 8007000:	6978      	ldr	r0, [r7, #20]
 8007002:	f7f9 f89b 	bl	800013c <__udivsi3>
 8007006:	0003      	movs	r3, r0
 8007008:	613b      	str	r3, [r7, #16]
 800700a:	e015      	b.n	8007038 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800700c:	4b0d      	ldr	r3, [pc, #52]	; (8007044 <HAL_RCC_GetSysClockFreq+0xf8>)
 800700e:	689b      	ldr	r3, [r3, #8]
 8007010:	2238      	movs	r2, #56	; 0x38
 8007012:	4013      	ands	r3, r2
 8007014:	2b20      	cmp	r3, #32
 8007016:	d103      	bne.n	8007020 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8007018:	2380      	movs	r3, #128	; 0x80
 800701a:	021b      	lsls	r3, r3, #8
 800701c:	613b      	str	r3, [r7, #16]
 800701e:	e00b      	b.n	8007038 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8007020:	4b08      	ldr	r3, [pc, #32]	; (8007044 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007022:	689b      	ldr	r3, [r3, #8]
 8007024:	2238      	movs	r2, #56	; 0x38
 8007026:	4013      	ands	r3, r2
 8007028:	2b18      	cmp	r3, #24
 800702a:	d103      	bne.n	8007034 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800702c:	23fa      	movs	r3, #250	; 0xfa
 800702e:	01db      	lsls	r3, r3, #7
 8007030:	613b      	str	r3, [r7, #16]
 8007032:	e001      	b.n	8007038 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8007034:	2300      	movs	r3, #0
 8007036:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007038:	693b      	ldr	r3, [r7, #16]
}
 800703a:	0018      	movs	r0, r3
 800703c:	46bd      	mov	sp, r7
 800703e:	b006      	add	sp, #24
 8007040:	bd80      	pop	{r7, pc}
 8007042:	46c0      	nop			; (mov r8, r8)
 8007044:	40021000 	.word	0x40021000
 8007048:	00f42400 	.word	0x00f42400
 800704c:	007a1200 	.word	0x007a1200

08007050 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007054:	4b02      	ldr	r3, [pc, #8]	; (8007060 <HAL_RCC_GetHCLKFreq+0x10>)
 8007056:	681b      	ldr	r3, [r3, #0]
}
 8007058:	0018      	movs	r0, r3
 800705a:	46bd      	mov	sp, r7
 800705c:	bd80      	pop	{r7, pc}
 800705e:	46c0      	nop			; (mov r8, r8)
 8007060:	20000004 	.word	0x20000004

08007064 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007064:	b5b0      	push	{r4, r5, r7, lr}
 8007066:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8007068:	f7ff fff2 	bl	8007050 <HAL_RCC_GetHCLKFreq>
 800706c:	0004      	movs	r4, r0
 800706e:	f7ff fb3f 	bl	80066f0 <LL_RCC_GetAPB1Prescaler>
 8007072:	0003      	movs	r3, r0
 8007074:	0b1a      	lsrs	r2, r3, #12
 8007076:	4b05      	ldr	r3, [pc, #20]	; (800708c <HAL_RCC_GetPCLK1Freq+0x28>)
 8007078:	0092      	lsls	r2, r2, #2
 800707a:	58d3      	ldr	r3, [r2, r3]
 800707c:	221f      	movs	r2, #31
 800707e:	4013      	ands	r3, r2
 8007080:	40dc      	lsrs	r4, r3
 8007082:	0023      	movs	r3, r4
}
 8007084:	0018      	movs	r0, r3
 8007086:	46bd      	mov	sp, r7
 8007088:	bdb0      	pop	{r4, r5, r7, pc}
 800708a:	46c0      	nop			; (mov r8, r8)
 800708c:	0800cf90 	.word	0x0800cf90

08007090 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b086      	sub	sp, #24
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8007098:	2313      	movs	r3, #19
 800709a:	18fb      	adds	r3, r7, r3
 800709c:	2200      	movs	r2, #0
 800709e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80070a0:	2312      	movs	r3, #18
 80070a2:	18fb      	adds	r3, r7, r3
 80070a4:	2200      	movs	r2, #0
 80070a6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681a      	ldr	r2, [r3, #0]
 80070ac:	2380      	movs	r3, #128	; 0x80
 80070ae:	029b      	lsls	r3, r3, #10
 80070b0:	4013      	ands	r3, r2
 80070b2:	d100      	bne.n	80070b6 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80070b4:	e0a3      	b.n	80071fe <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80070b6:	2011      	movs	r0, #17
 80070b8:	183b      	adds	r3, r7, r0
 80070ba:	2200      	movs	r2, #0
 80070bc:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80070be:	4bc3      	ldr	r3, [pc, #780]	; (80073cc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80070c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80070c2:	2380      	movs	r3, #128	; 0x80
 80070c4:	055b      	lsls	r3, r3, #21
 80070c6:	4013      	ands	r3, r2
 80070c8:	d110      	bne.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80070ca:	4bc0      	ldr	r3, [pc, #768]	; (80073cc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80070cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80070ce:	4bbf      	ldr	r3, [pc, #764]	; (80073cc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80070d0:	2180      	movs	r1, #128	; 0x80
 80070d2:	0549      	lsls	r1, r1, #21
 80070d4:	430a      	orrs	r2, r1
 80070d6:	63da      	str	r2, [r3, #60]	; 0x3c
 80070d8:	4bbc      	ldr	r3, [pc, #752]	; (80073cc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80070da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80070dc:	2380      	movs	r3, #128	; 0x80
 80070de:	055b      	lsls	r3, r3, #21
 80070e0:	4013      	ands	r3, r2
 80070e2:	60bb      	str	r3, [r7, #8]
 80070e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80070e6:	183b      	adds	r3, r7, r0
 80070e8:	2201      	movs	r2, #1
 80070ea:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80070ec:	4bb8      	ldr	r3, [pc, #736]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80070ee:	681a      	ldr	r2, [r3, #0]
 80070f0:	4bb7      	ldr	r3, [pc, #732]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80070f2:	2180      	movs	r1, #128	; 0x80
 80070f4:	0049      	lsls	r1, r1, #1
 80070f6:	430a      	orrs	r2, r1
 80070f8:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80070fa:	f7fc fed1 	bl	8003ea0 <HAL_GetTick>
 80070fe:	0003      	movs	r3, r0
 8007100:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007102:	e00b      	b.n	800711c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007104:	f7fc fecc 	bl	8003ea0 <HAL_GetTick>
 8007108:	0002      	movs	r2, r0
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	1ad3      	subs	r3, r2, r3
 800710e:	2b02      	cmp	r3, #2
 8007110:	d904      	bls.n	800711c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8007112:	2313      	movs	r3, #19
 8007114:	18fb      	adds	r3, r7, r3
 8007116:	2203      	movs	r2, #3
 8007118:	701a      	strb	r2, [r3, #0]
        break;
 800711a:	e005      	b.n	8007128 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800711c:	4bac      	ldr	r3, [pc, #688]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800711e:	681a      	ldr	r2, [r3, #0]
 8007120:	2380      	movs	r3, #128	; 0x80
 8007122:	005b      	lsls	r3, r3, #1
 8007124:	4013      	ands	r3, r2
 8007126:	d0ed      	beq.n	8007104 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8007128:	2313      	movs	r3, #19
 800712a:	18fb      	adds	r3, r7, r3
 800712c:	781b      	ldrb	r3, [r3, #0]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d154      	bne.n	80071dc <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007132:	4ba6      	ldr	r3, [pc, #664]	; (80073cc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007134:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007136:	23c0      	movs	r3, #192	; 0xc0
 8007138:	009b      	lsls	r3, r3, #2
 800713a:	4013      	ands	r3, r2
 800713c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800713e:	697b      	ldr	r3, [r7, #20]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d019      	beq.n	8007178 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007148:	697a      	ldr	r2, [r7, #20]
 800714a:	429a      	cmp	r2, r3
 800714c:	d014      	beq.n	8007178 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800714e:	4b9f      	ldr	r3, [pc, #636]	; (80073cc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007150:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007152:	4aa0      	ldr	r2, [pc, #640]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8007154:	4013      	ands	r3, r2
 8007156:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007158:	4b9c      	ldr	r3, [pc, #624]	; (80073cc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800715a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800715c:	4b9b      	ldr	r3, [pc, #620]	; (80073cc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800715e:	2180      	movs	r1, #128	; 0x80
 8007160:	0249      	lsls	r1, r1, #9
 8007162:	430a      	orrs	r2, r1
 8007164:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007166:	4b99      	ldr	r3, [pc, #612]	; (80073cc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007168:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800716a:	4b98      	ldr	r3, [pc, #608]	; (80073cc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800716c:	499a      	ldr	r1, [pc, #616]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 800716e:	400a      	ands	r2, r1
 8007170:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007172:	4b96      	ldr	r3, [pc, #600]	; (80073cc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007174:	697a      	ldr	r2, [r7, #20]
 8007176:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007178:	697b      	ldr	r3, [r7, #20]
 800717a:	2201      	movs	r2, #1
 800717c:	4013      	ands	r3, r2
 800717e:	d016      	beq.n	80071ae <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007180:	f7fc fe8e 	bl	8003ea0 <HAL_GetTick>
 8007184:	0003      	movs	r3, r0
 8007186:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007188:	e00c      	b.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800718a:	f7fc fe89 	bl	8003ea0 <HAL_GetTick>
 800718e:	0002      	movs	r2, r0
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	1ad3      	subs	r3, r2, r3
 8007194:	4a91      	ldr	r2, [pc, #580]	; (80073dc <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8007196:	4293      	cmp	r3, r2
 8007198:	d904      	bls.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800719a:	2313      	movs	r3, #19
 800719c:	18fb      	adds	r3, r7, r3
 800719e:	2203      	movs	r2, #3
 80071a0:	701a      	strb	r2, [r3, #0]
            break;
 80071a2:	e004      	b.n	80071ae <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80071a4:	4b89      	ldr	r3, [pc, #548]	; (80073cc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80071a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071a8:	2202      	movs	r2, #2
 80071aa:	4013      	ands	r3, r2
 80071ac:	d0ed      	beq.n	800718a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80071ae:	2313      	movs	r3, #19
 80071b0:	18fb      	adds	r3, r7, r3
 80071b2:	781b      	ldrb	r3, [r3, #0]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d10a      	bne.n	80071ce <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80071b8:	4b84      	ldr	r3, [pc, #528]	; (80073cc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80071ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071bc:	4a85      	ldr	r2, [pc, #532]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80071be:	4013      	ands	r3, r2
 80071c0:	0019      	movs	r1, r3
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80071c6:	4b81      	ldr	r3, [pc, #516]	; (80073cc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80071c8:	430a      	orrs	r2, r1
 80071ca:	65da      	str	r2, [r3, #92]	; 0x5c
 80071cc:	e00c      	b.n	80071e8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80071ce:	2312      	movs	r3, #18
 80071d0:	18fb      	adds	r3, r7, r3
 80071d2:	2213      	movs	r2, #19
 80071d4:	18ba      	adds	r2, r7, r2
 80071d6:	7812      	ldrb	r2, [r2, #0]
 80071d8:	701a      	strb	r2, [r3, #0]
 80071da:	e005      	b.n	80071e8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071dc:	2312      	movs	r3, #18
 80071de:	18fb      	adds	r3, r7, r3
 80071e0:	2213      	movs	r2, #19
 80071e2:	18ba      	adds	r2, r7, r2
 80071e4:	7812      	ldrb	r2, [r2, #0]
 80071e6:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80071e8:	2311      	movs	r3, #17
 80071ea:	18fb      	adds	r3, r7, r3
 80071ec:	781b      	ldrb	r3, [r3, #0]
 80071ee:	2b01      	cmp	r3, #1
 80071f0:	d105      	bne.n	80071fe <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80071f2:	4b76      	ldr	r3, [pc, #472]	; (80073cc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80071f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80071f6:	4b75      	ldr	r3, [pc, #468]	; (80073cc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80071f8:	4979      	ldr	r1, [pc, #484]	; (80073e0 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 80071fa:	400a      	ands	r2, r1
 80071fc:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	2201      	movs	r2, #1
 8007204:	4013      	ands	r3, r2
 8007206:	d009      	beq.n	800721c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007208:	4b70      	ldr	r3, [pc, #448]	; (80073cc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800720a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800720c:	2203      	movs	r2, #3
 800720e:	4393      	bics	r3, r2
 8007210:	0019      	movs	r1, r3
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	685a      	ldr	r2, [r3, #4]
 8007216:	4b6d      	ldr	r3, [pc, #436]	; (80073cc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007218:	430a      	orrs	r2, r1
 800721a:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	2202      	movs	r2, #2
 8007222:	4013      	ands	r3, r2
 8007224:	d009      	beq.n	800723a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007226:	4b69      	ldr	r3, [pc, #420]	; (80073cc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007228:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800722a:	220c      	movs	r2, #12
 800722c:	4393      	bics	r3, r2
 800722e:	0019      	movs	r1, r3
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	689a      	ldr	r2, [r3, #8]
 8007234:	4b65      	ldr	r3, [pc, #404]	; (80073cc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007236:	430a      	orrs	r2, r1
 8007238:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	2210      	movs	r2, #16
 8007240:	4013      	ands	r3, r2
 8007242:	d009      	beq.n	8007258 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007244:	4b61      	ldr	r3, [pc, #388]	; (80073cc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007246:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007248:	4a66      	ldr	r2, [pc, #408]	; (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 800724a:	4013      	ands	r3, r2
 800724c:	0019      	movs	r1, r3
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	68da      	ldr	r2, [r3, #12]
 8007252:	4b5e      	ldr	r3, [pc, #376]	; (80073cc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007254:	430a      	orrs	r2, r1
 8007256:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681a      	ldr	r2, [r3, #0]
 800725c:	2380      	movs	r3, #128	; 0x80
 800725e:	009b      	lsls	r3, r3, #2
 8007260:	4013      	ands	r3, r2
 8007262:	d009      	beq.n	8007278 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007264:	4b59      	ldr	r3, [pc, #356]	; (80073cc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007266:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007268:	4a5f      	ldr	r2, [pc, #380]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800726a:	4013      	ands	r3, r2
 800726c:	0019      	movs	r1, r3
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	699a      	ldr	r2, [r3, #24]
 8007272:	4b56      	ldr	r3, [pc, #344]	; (80073cc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007274:	430a      	orrs	r2, r1
 8007276:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681a      	ldr	r2, [r3, #0]
 800727c:	2380      	movs	r3, #128	; 0x80
 800727e:	00db      	lsls	r3, r3, #3
 8007280:	4013      	ands	r3, r2
 8007282:	d009      	beq.n	8007298 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007284:	4b51      	ldr	r3, [pc, #324]	; (80073cc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007286:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007288:	4a58      	ldr	r2, [pc, #352]	; (80073ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800728a:	4013      	ands	r3, r2
 800728c:	0019      	movs	r1, r3
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	69da      	ldr	r2, [r3, #28]
 8007292:	4b4e      	ldr	r3, [pc, #312]	; (80073cc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007294:	430a      	orrs	r2, r1
 8007296:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	2220      	movs	r2, #32
 800729e:	4013      	ands	r3, r2
 80072a0:	d009      	beq.n	80072b6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80072a2:	4b4a      	ldr	r3, [pc, #296]	; (80073cc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80072a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072a6:	4a52      	ldr	r2, [pc, #328]	; (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 80072a8:	4013      	ands	r3, r2
 80072aa:	0019      	movs	r1, r3
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	691a      	ldr	r2, [r3, #16]
 80072b0:	4b46      	ldr	r3, [pc, #280]	; (80073cc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80072b2:	430a      	orrs	r2, r1
 80072b4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681a      	ldr	r2, [r3, #0]
 80072ba:	2380      	movs	r3, #128	; 0x80
 80072bc:	01db      	lsls	r3, r3, #7
 80072be:	4013      	ands	r3, r2
 80072c0:	d015      	beq.n	80072ee <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80072c2:	4b42      	ldr	r3, [pc, #264]	; (80073cc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80072c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072c6:	009b      	lsls	r3, r3, #2
 80072c8:	0899      	lsrs	r1, r3, #2
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6a1a      	ldr	r2, [r3, #32]
 80072ce:	4b3f      	ldr	r3, [pc, #252]	; (80073cc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80072d0:	430a      	orrs	r2, r1
 80072d2:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6a1a      	ldr	r2, [r3, #32]
 80072d8:	2380      	movs	r3, #128	; 0x80
 80072da:	05db      	lsls	r3, r3, #23
 80072dc:	429a      	cmp	r2, r3
 80072de:	d106      	bne.n	80072ee <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80072e0:	4b3a      	ldr	r3, [pc, #232]	; (80073cc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80072e2:	68da      	ldr	r2, [r3, #12]
 80072e4:	4b39      	ldr	r3, [pc, #228]	; (80073cc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80072e6:	2180      	movs	r1, #128	; 0x80
 80072e8:	0249      	lsls	r1, r1, #9
 80072ea:	430a      	orrs	r2, r1
 80072ec:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681a      	ldr	r2, [r3, #0]
 80072f2:	2380      	movs	r3, #128	; 0x80
 80072f4:	031b      	lsls	r3, r3, #12
 80072f6:	4013      	ands	r3, r2
 80072f8:	d009      	beq.n	800730e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80072fa:	4b34      	ldr	r3, [pc, #208]	; (80073cc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80072fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072fe:	2240      	movs	r2, #64	; 0x40
 8007300:	4393      	bics	r3, r2
 8007302:	0019      	movs	r1, r3
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007308:	4b30      	ldr	r3, [pc, #192]	; (80073cc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800730a:	430a      	orrs	r2, r1
 800730c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681a      	ldr	r2, [r3, #0]
 8007312:	2380      	movs	r3, #128	; 0x80
 8007314:	039b      	lsls	r3, r3, #14
 8007316:	4013      	ands	r3, r2
 8007318:	d016      	beq.n	8007348 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800731a:	4b2c      	ldr	r3, [pc, #176]	; (80073cc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800731c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800731e:	4a35      	ldr	r2, [pc, #212]	; (80073f4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8007320:	4013      	ands	r3, r2
 8007322:	0019      	movs	r1, r3
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007328:	4b28      	ldr	r3, [pc, #160]	; (80073cc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800732a:	430a      	orrs	r2, r1
 800732c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007332:	2380      	movs	r3, #128	; 0x80
 8007334:	03db      	lsls	r3, r3, #15
 8007336:	429a      	cmp	r2, r3
 8007338:	d106      	bne.n	8007348 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800733a:	4b24      	ldr	r3, [pc, #144]	; (80073cc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800733c:	68da      	ldr	r2, [r3, #12]
 800733e:	4b23      	ldr	r3, [pc, #140]	; (80073cc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007340:	2180      	movs	r1, #128	; 0x80
 8007342:	0449      	lsls	r1, r1, #17
 8007344:	430a      	orrs	r2, r1
 8007346:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681a      	ldr	r2, [r3, #0]
 800734c:	2380      	movs	r3, #128	; 0x80
 800734e:	03db      	lsls	r3, r3, #15
 8007350:	4013      	ands	r3, r2
 8007352:	d016      	beq.n	8007382 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8007354:	4b1d      	ldr	r3, [pc, #116]	; (80073cc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007356:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007358:	4a27      	ldr	r2, [pc, #156]	; (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 800735a:	4013      	ands	r3, r2
 800735c:	0019      	movs	r1, r3
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007362:	4b1a      	ldr	r3, [pc, #104]	; (80073cc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007364:	430a      	orrs	r2, r1
 8007366:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800736c:	2380      	movs	r3, #128	; 0x80
 800736e:	045b      	lsls	r3, r3, #17
 8007370:	429a      	cmp	r2, r3
 8007372:	d106      	bne.n	8007382 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8007374:	4b15      	ldr	r3, [pc, #84]	; (80073cc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007376:	68da      	ldr	r2, [r3, #12]
 8007378:	4b14      	ldr	r3, [pc, #80]	; (80073cc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800737a:	2180      	movs	r1, #128	; 0x80
 800737c:	0449      	lsls	r1, r1, #17
 800737e:	430a      	orrs	r2, r1
 8007380:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681a      	ldr	r2, [r3, #0]
 8007386:	2380      	movs	r3, #128	; 0x80
 8007388:	011b      	lsls	r3, r3, #4
 800738a:	4013      	ands	r3, r2
 800738c:	d016      	beq.n	80073bc <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800738e:	4b0f      	ldr	r3, [pc, #60]	; (80073cc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007390:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007392:	4a1a      	ldr	r2, [pc, #104]	; (80073fc <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8007394:	4013      	ands	r3, r2
 8007396:	0019      	movs	r1, r3
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	695a      	ldr	r2, [r3, #20]
 800739c:	4b0b      	ldr	r3, [pc, #44]	; (80073cc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800739e:	430a      	orrs	r2, r1
 80073a0:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	695a      	ldr	r2, [r3, #20]
 80073a6:	2380      	movs	r3, #128	; 0x80
 80073a8:	01db      	lsls	r3, r3, #7
 80073aa:	429a      	cmp	r2, r3
 80073ac:	d106      	bne.n	80073bc <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80073ae:	4b07      	ldr	r3, [pc, #28]	; (80073cc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80073b0:	68da      	ldr	r2, [r3, #12]
 80073b2:	4b06      	ldr	r3, [pc, #24]	; (80073cc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80073b4:	2180      	movs	r1, #128	; 0x80
 80073b6:	0249      	lsls	r1, r1, #9
 80073b8:	430a      	orrs	r2, r1
 80073ba:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80073bc:	2312      	movs	r3, #18
 80073be:	18fb      	adds	r3, r7, r3
 80073c0:	781b      	ldrb	r3, [r3, #0]
}
 80073c2:	0018      	movs	r0, r3
 80073c4:	46bd      	mov	sp, r7
 80073c6:	b006      	add	sp, #24
 80073c8:	bd80      	pop	{r7, pc}
 80073ca:	46c0      	nop			; (mov r8, r8)
 80073cc:	40021000 	.word	0x40021000
 80073d0:	40007000 	.word	0x40007000
 80073d4:	fffffcff 	.word	0xfffffcff
 80073d8:	fffeffff 	.word	0xfffeffff
 80073dc:	00001388 	.word	0x00001388
 80073e0:	efffffff 	.word	0xefffffff
 80073e4:	fffff3ff 	.word	0xfffff3ff
 80073e8:	fff3ffff 	.word	0xfff3ffff
 80073ec:	ffcfffff 	.word	0xffcfffff
 80073f0:	ffffcfff 	.word	0xffffcfff
 80073f4:	ffbfffff 	.word	0xffbfffff
 80073f8:	feffffff 	.word	0xfeffffff
 80073fc:	ffff3fff 	.word	0xffff3fff

08007400 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b082      	sub	sp, #8
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d101      	bne.n	8007412 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800740e:	2301      	movs	r3, #1
 8007410:	e04a      	b.n	80074a8 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	223d      	movs	r2, #61	; 0x3d
 8007416:	5c9b      	ldrb	r3, [r3, r2]
 8007418:	b2db      	uxtb	r3, r3
 800741a:	2b00      	cmp	r3, #0
 800741c:	d107      	bne.n	800742e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	223c      	movs	r2, #60	; 0x3c
 8007422:	2100      	movs	r1, #0
 8007424:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	0018      	movs	r0, r3
 800742a:	f7fc fad7 	bl	80039dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	223d      	movs	r2, #61	; 0x3d
 8007432:	2102      	movs	r1, #2
 8007434:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681a      	ldr	r2, [r3, #0]
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	3304      	adds	r3, #4
 800743e:	0019      	movs	r1, r3
 8007440:	0010      	movs	r0, r2
 8007442:	f000 fab9 	bl	80079b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2248      	movs	r2, #72	; 0x48
 800744a:	2101      	movs	r1, #1
 800744c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	223e      	movs	r2, #62	; 0x3e
 8007452:	2101      	movs	r1, #1
 8007454:	5499      	strb	r1, [r3, r2]
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	223f      	movs	r2, #63	; 0x3f
 800745a:	2101      	movs	r1, #1
 800745c:	5499      	strb	r1, [r3, r2]
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2240      	movs	r2, #64	; 0x40
 8007462:	2101      	movs	r1, #1
 8007464:	5499      	strb	r1, [r3, r2]
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2241      	movs	r2, #65	; 0x41
 800746a:	2101      	movs	r1, #1
 800746c:	5499      	strb	r1, [r3, r2]
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2242      	movs	r2, #66	; 0x42
 8007472:	2101      	movs	r1, #1
 8007474:	5499      	strb	r1, [r3, r2]
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2243      	movs	r2, #67	; 0x43
 800747a:	2101      	movs	r1, #1
 800747c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2244      	movs	r2, #68	; 0x44
 8007482:	2101      	movs	r1, #1
 8007484:	5499      	strb	r1, [r3, r2]
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2245      	movs	r2, #69	; 0x45
 800748a:	2101      	movs	r1, #1
 800748c:	5499      	strb	r1, [r3, r2]
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2246      	movs	r2, #70	; 0x46
 8007492:	2101      	movs	r1, #1
 8007494:	5499      	strb	r1, [r3, r2]
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2247      	movs	r2, #71	; 0x47
 800749a:	2101      	movs	r1, #1
 800749c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	223d      	movs	r2, #61	; 0x3d
 80074a2:	2101      	movs	r1, #1
 80074a4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80074a6:	2300      	movs	r3, #0
}
 80074a8:	0018      	movs	r0, r3
 80074aa:	46bd      	mov	sp, r7
 80074ac:	b002      	add	sp, #8
 80074ae:	bd80      	pop	{r7, pc}

080074b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b084      	sub	sp, #16
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	223d      	movs	r2, #61	; 0x3d
 80074bc:	5c9b      	ldrb	r3, [r3, r2]
 80074be:	b2db      	uxtb	r3, r3
 80074c0:	2b01      	cmp	r3, #1
 80074c2:	d001      	beq.n	80074c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80074c4:	2301      	movs	r3, #1
 80074c6:	e042      	b.n	800754e <HAL_TIM_Base_Start_IT+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	223d      	movs	r2, #61	; 0x3d
 80074cc:	2102      	movs	r1, #2
 80074ce:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	68da      	ldr	r2, [r3, #12]
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	2101      	movs	r1, #1
 80074dc:	430a      	orrs	r2, r1
 80074de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	4a1c      	ldr	r2, [pc, #112]	; (8007558 <HAL_TIM_Base_Start_IT+0xa8>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d00f      	beq.n	800750a <HAL_TIM_Base_Start_IT+0x5a>
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681a      	ldr	r2, [r3, #0]
 80074ee:	2380      	movs	r3, #128	; 0x80
 80074f0:	05db      	lsls	r3, r3, #23
 80074f2:	429a      	cmp	r2, r3
 80074f4:	d009      	beq.n	800750a <HAL_TIM_Base_Start_IT+0x5a>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	4a18      	ldr	r2, [pc, #96]	; (800755c <HAL_TIM_Base_Start_IT+0xac>)
 80074fc:	4293      	cmp	r3, r2
 80074fe:	d004      	beq.n	800750a <HAL_TIM_Base_Start_IT+0x5a>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	4a16      	ldr	r2, [pc, #88]	; (8007560 <HAL_TIM_Base_Start_IT+0xb0>)
 8007506:	4293      	cmp	r3, r2
 8007508:	d116      	bne.n	8007538 <HAL_TIM_Base_Start_IT+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	689b      	ldr	r3, [r3, #8]
 8007510:	4a14      	ldr	r2, [pc, #80]	; (8007564 <HAL_TIM_Base_Start_IT+0xb4>)
 8007512:	4013      	ands	r3, r2
 8007514:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	2b06      	cmp	r3, #6
 800751a:	d016      	beq.n	800754a <HAL_TIM_Base_Start_IT+0x9a>
 800751c:	68fa      	ldr	r2, [r7, #12]
 800751e:	2380      	movs	r3, #128	; 0x80
 8007520:	025b      	lsls	r3, r3, #9
 8007522:	429a      	cmp	r2, r3
 8007524:	d011      	beq.n	800754a <HAL_TIM_Base_Start_IT+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	681a      	ldr	r2, [r3, #0]
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	2101      	movs	r1, #1
 8007532:	430a      	orrs	r2, r1
 8007534:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007536:	e008      	b.n	800754a <HAL_TIM_Base_Start_IT+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	681a      	ldr	r2, [r3, #0]
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	2101      	movs	r1, #1
 8007544:	430a      	orrs	r2, r1
 8007546:	601a      	str	r2, [r3, #0]
 8007548:	e000      	b.n	800754c <HAL_TIM_Base_Start_IT+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800754a:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800754c:	2300      	movs	r3, #0
}
 800754e:	0018      	movs	r0, r3
 8007550:	46bd      	mov	sp, r7
 8007552:	b004      	add	sp, #16
 8007554:	bd80      	pop	{r7, pc}
 8007556:	46c0      	nop			; (mov r8, r8)
 8007558:	40012c00 	.word	0x40012c00
 800755c:	40000400 	.word	0x40000400
 8007560:	40014000 	.word	0x40014000
 8007564:	00010007 	.word	0x00010007

08007568 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b082      	sub	sp, #8
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	691b      	ldr	r3, [r3, #16]
 8007576:	2202      	movs	r2, #2
 8007578:	4013      	ands	r3, r2
 800757a:	2b02      	cmp	r3, #2
 800757c:	d124      	bne.n	80075c8 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	68db      	ldr	r3, [r3, #12]
 8007584:	2202      	movs	r2, #2
 8007586:	4013      	ands	r3, r2
 8007588:	2b02      	cmp	r3, #2
 800758a:	d11d      	bne.n	80075c8 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	2203      	movs	r2, #3
 8007592:	4252      	negs	r2, r2
 8007594:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2201      	movs	r2, #1
 800759a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	699b      	ldr	r3, [r3, #24]
 80075a2:	2203      	movs	r2, #3
 80075a4:	4013      	ands	r3, r2
 80075a6:	d004      	beq.n	80075b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	0018      	movs	r0, r3
 80075ac:	f000 f9ec 	bl	8007988 <HAL_TIM_IC_CaptureCallback>
 80075b0:	e007      	b.n	80075c2 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	0018      	movs	r0, r3
 80075b6:	f000 f9df 	bl	8007978 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	0018      	movs	r0, r3
 80075be:	f000 f9eb 	bl	8007998 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2200      	movs	r2, #0
 80075c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	691b      	ldr	r3, [r3, #16]
 80075ce:	2204      	movs	r2, #4
 80075d0:	4013      	ands	r3, r2
 80075d2:	2b04      	cmp	r3, #4
 80075d4:	d125      	bne.n	8007622 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	68db      	ldr	r3, [r3, #12]
 80075dc:	2204      	movs	r2, #4
 80075de:	4013      	ands	r3, r2
 80075e0:	2b04      	cmp	r3, #4
 80075e2:	d11e      	bne.n	8007622 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	2205      	movs	r2, #5
 80075ea:	4252      	negs	r2, r2
 80075ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2202      	movs	r2, #2
 80075f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	699a      	ldr	r2, [r3, #24]
 80075fa:	23c0      	movs	r3, #192	; 0xc0
 80075fc:	009b      	lsls	r3, r3, #2
 80075fe:	4013      	ands	r3, r2
 8007600:	d004      	beq.n	800760c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	0018      	movs	r0, r3
 8007606:	f000 f9bf 	bl	8007988 <HAL_TIM_IC_CaptureCallback>
 800760a:	e007      	b.n	800761c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	0018      	movs	r0, r3
 8007610:	f000 f9b2 	bl	8007978 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	0018      	movs	r0, r3
 8007618:	f000 f9be 	bl	8007998 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2200      	movs	r2, #0
 8007620:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	691b      	ldr	r3, [r3, #16]
 8007628:	2208      	movs	r2, #8
 800762a:	4013      	ands	r3, r2
 800762c:	2b08      	cmp	r3, #8
 800762e:	d124      	bne.n	800767a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	68db      	ldr	r3, [r3, #12]
 8007636:	2208      	movs	r2, #8
 8007638:	4013      	ands	r3, r2
 800763a:	2b08      	cmp	r3, #8
 800763c:	d11d      	bne.n	800767a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	2209      	movs	r2, #9
 8007644:	4252      	negs	r2, r2
 8007646:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2204      	movs	r2, #4
 800764c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	69db      	ldr	r3, [r3, #28]
 8007654:	2203      	movs	r2, #3
 8007656:	4013      	ands	r3, r2
 8007658:	d004      	beq.n	8007664 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	0018      	movs	r0, r3
 800765e:	f000 f993 	bl	8007988 <HAL_TIM_IC_CaptureCallback>
 8007662:	e007      	b.n	8007674 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	0018      	movs	r0, r3
 8007668:	f000 f986 	bl	8007978 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	0018      	movs	r0, r3
 8007670:	f000 f992 	bl	8007998 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2200      	movs	r2, #0
 8007678:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	691b      	ldr	r3, [r3, #16]
 8007680:	2210      	movs	r2, #16
 8007682:	4013      	ands	r3, r2
 8007684:	2b10      	cmp	r3, #16
 8007686:	d125      	bne.n	80076d4 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	68db      	ldr	r3, [r3, #12]
 800768e:	2210      	movs	r2, #16
 8007690:	4013      	ands	r3, r2
 8007692:	2b10      	cmp	r3, #16
 8007694:	d11e      	bne.n	80076d4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	2211      	movs	r2, #17
 800769c:	4252      	negs	r2, r2
 800769e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2208      	movs	r2, #8
 80076a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	69da      	ldr	r2, [r3, #28]
 80076ac:	23c0      	movs	r3, #192	; 0xc0
 80076ae:	009b      	lsls	r3, r3, #2
 80076b0:	4013      	ands	r3, r2
 80076b2:	d004      	beq.n	80076be <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	0018      	movs	r0, r3
 80076b8:	f000 f966 	bl	8007988 <HAL_TIM_IC_CaptureCallback>
 80076bc:	e007      	b.n	80076ce <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	0018      	movs	r0, r3
 80076c2:	f000 f959 	bl	8007978 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	0018      	movs	r0, r3
 80076ca:	f000 f965 	bl	8007998 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2200      	movs	r2, #0
 80076d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	691b      	ldr	r3, [r3, #16]
 80076da:	2201      	movs	r2, #1
 80076dc:	4013      	ands	r3, r2
 80076de:	2b01      	cmp	r3, #1
 80076e0:	d10f      	bne.n	8007702 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	68db      	ldr	r3, [r3, #12]
 80076e8:	2201      	movs	r2, #1
 80076ea:	4013      	ands	r3, r2
 80076ec:	2b01      	cmp	r3, #1
 80076ee:	d108      	bne.n	8007702 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	2202      	movs	r2, #2
 80076f6:	4252      	negs	r2, r2
 80076f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	0018      	movs	r0, r3
 80076fe:	f7fb fff5 	bl	80036ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	691b      	ldr	r3, [r3, #16]
 8007708:	2280      	movs	r2, #128	; 0x80
 800770a:	4013      	ands	r3, r2
 800770c:	2b80      	cmp	r3, #128	; 0x80
 800770e:	d10f      	bne.n	8007730 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	68db      	ldr	r3, [r3, #12]
 8007716:	2280      	movs	r2, #128	; 0x80
 8007718:	4013      	ands	r3, r2
 800771a:	2b80      	cmp	r3, #128	; 0x80
 800771c:	d108      	bne.n	8007730 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	2281      	movs	r2, #129	; 0x81
 8007724:	4252      	negs	r2, r2
 8007726:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	0018      	movs	r0, r3
 800772c:	f000 fad6 	bl	8007cdc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	691a      	ldr	r2, [r3, #16]
 8007736:	2380      	movs	r3, #128	; 0x80
 8007738:	005b      	lsls	r3, r3, #1
 800773a:	401a      	ands	r2, r3
 800773c:	2380      	movs	r3, #128	; 0x80
 800773e:	005b      	lsls	r3, r3, #1
 8007740:	429a      	cmp	r2, r3
 8007742:	d10e      	bne.n	8007762 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	68db      	ldr	r3, [r3, #12]
 800774a:	2280      	movs	r2, #128	; 0x80
 800774c:	4013      	ands	r3, r2
 800774e:	2b80      	cmp	r3, #128	; 0x80
 8007750:	d107      	bne.n	8007762 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	4a1c      	ldr	r2, [pc, #112]	; (80077c8 <HAL_TIM_IRQHandler+0x260>)
 8007758:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	0018      	movs	r0, r3
 800775e:	f000 fac5 	bl	8007cec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	691b      	ldr	r3, [r3, #16]
 8007768:	2240      	movs	r2, #64	; 0x40
 800776a:	4013      	ands	r3, r2
 800776c:	2b40      	cmp	r3, #64	; 0x40
 800776e:	d10f      	bne.n	8007790 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	68db      	ldr	r3, [r3, #12]
 8007776:	2240      	movs	r2, #64	; 0x40
 8007778:	4013      	ands	r3, r2
 800777a:	2b40      	cmp	r3, #64	; 0x40
 800777c:	d108      	bne.n	8007790 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	2241      	movs	r2, #65	; 0x41
 8007784:	4252      	negs	r2, r2
 8007786:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	0018      	movs	r0, r3
 800778c:	f000 f90c 	bl	80079a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	691b      	ldr	r3, [r3, #16]
 8007796:	2220      	movs	r2, #32
 8007798:	4013      	ands	r3, r2
 800779a:	2b20      	cmp	r3, #32
 800779c:	d10f      	bne.n	80077be <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	68db      	ldr	r3, [r3, #12]
 80077a4:	2220      	movs	r2, #32
 80077a6:	4013      	ands	r3, r2
 80077a8:	2b20      	cmp	r3, #32
 80077aa:	d108      	bne.n	80077be <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	2221      	movs	r2, #33	; 0x21
 80077b2:	4252      	negs	r2, r2
 80077b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	0018      	movs	r0, r3
 80077ba:	f000 fa87 	bl	8007ccc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80077be:	46c0      	nop			; (mov r8, r8)
 80077c0:	46bd      	mov	sp, r7
 80077c2:	b002      	add	sp, #8
 80077c4:	bd80      	pop	{r7, pc}
 80077c6:	46c0      	nop			; (mov r8, r8)
 80077c8:	fffffeff 	.word	0xfffffeff

080077cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b084      	sub	sp, #16
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
 80077d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80077d6:	230f      	movs	r3, #15
 80077d8:	18fb      	adds	r3, r7, r3
 80077da:	2200      	movs	r2, #0
 80077dc:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	223c      	movs	r2, #60	; 0x3c
 80077e2:	5c9b      	ldrb	r3, [r3, r2]
 80077e4:	2b01      	cmp	r3, #1
 80077e6:	d101      	bne.n	80077ec <HAL_TIM_ConfigClockSource+0x20>
 80077e8:	2302      	movs	r3, #2
 80077ea:	e0bc      	b.n	8007966 <HAL_TIM_ConfigClockSource+0x19a>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	223c      	movs	r2, #60	; 0x3c
 80077f0:	2101      	movs	r1, #1
 80077f2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	223d      	movs	r2, #61	; 0x3d
 80077f8:	2102      	movs	r1, #2
 80077fa:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	689b      	ldr	r3, [r3, #8]
 8007802:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	4a5a      	ldr	r2, [pc, #360]	; (8007970 <HAL_TIM_ConfigClockSource+0x1a4>)
 8007808:	4013      	ands	r3, r2
 800780a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	4a59      	ldr	r2, [pc, #356]	; (8007974 <HAL_TIM_ConfigClockSource+0x1a8>)
 8007810:	4013      	ands	r3, r2
 8007812:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	68ba      	ldr	r2, [r7, #8]
 800781a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	2280      	movs	r2, #128	; 0x80
 8007822:	0192      	lsls	r2, r2, #6
 8007824:	4293      	cmp	r3, r2
 8007826:	d040      	beq.n	80078aa <HAL_TIM_ConfigClockSource+0xde>
 8007828:	2280      	movs	r2, #128	; 0x80
 800782a:	0192      	lsls	r2, r2, #6
 800782c:	4293      	cmp	r3, r2
 800782e:	d900      	bls.n	8007832 <HAL_TIM_ConfigClockSource+0x66>
 8007830:	e088      	b.n	8007944 <HAL_TIM_ConfigClockSource+0x178>
 8007832:	2280      	movs	r2, #128	; 0x80
 8007834:	0152      	lsls	r2, r2, #5
 8007836:	4293      	cmp	r3, r2
 8007838:	d100      	bne.n	800783c <HAL_TIM_ConfigClockSource+0x70>
 800783a:	e088      	b.n	800794e <HAL_TIM_ConfigClockSource+0x182>
 800783c:	2280      	movs	r2, #128	; 0x80
 800783e:	0152      	lsls	r2, r2, #5
 8007840:	4293      	cmp	r3, r2
 8007842:	d900      	bls.n	8007846 <HAL_TIM_ConfigClockSource+0x7a>
 8007844:	e07e      	b.n	8007944 <HAL_TIM_ConfigClockSource+0x178>
 8007846:	2b70      	cmp	r3, #112	; 0x70
 8007848:	d018      	beq.n	800787c <HAL_TIM_ConfigClockSource+0xb0>
 800784a:	d900      	bls.n	800784e <HAL_TIM_ConfigClockSource+0x82>
 800784c:	e07a      	b.n	8007944 <HAL_TIM_ConfigClockSource+0x178>
 800784e:	2b60      	cmp	r3, #96	; 0x60
 8007850:	d04f      	beq.n	80078f2 <HAL_TIM_ConfigClockSource+0x126>
 8007852:	d900      	bls.n	8007856 <HAL_TIM_ConfigClockSource+0x8a>
 8007854:	e076      	b.n	8007944 <HAL_TIM_ConfigClockSource+0x178>
 8007856:	2b50      	cmp	r3, #80	; 0x50
 8007858:	d03b      	beq.n	80078d2 <HAL_TIM_ConfigClockSource+0x106>
 800785a:	d900      	bls.n	800785e <HAL_TIM_ConfigClockSource+0x92>
 800785c:	e072      	b.n	8007944 <HAL_TIM_ConfigClockSource+0x178>
 800785e:	2b40      	cmp	r3, #64	; 0x40
 8007860:	d057      	beq.n	8007912 <HAL_TIM_ConfigClockSource+0x146>
 8007862:	d900      	bls.n	8007866 <HAL_TIM_ConfigClockSource+0x9a>
 8007864:	e06e      	b.n	8007944 <HAL_TIM_ConfigClockSource+0x178>
 8007866:	2b30      	cmp	r3, #48	; 0x30
 8007868:	d063      	beq.n	8007932 <HAL_TIM_ConfigClockSource+0x166>
 800786a:	d86b      	bhi.n	8007944 <HAL_TIM_ConfigClockSource+0x178>
 800786c:	2b20      	cmp	r3, #32
 800786e:	d060      	beq.n	8007932 <HAL_TIM_ConfigClockSource+0x166>
 8007870:	d868      	bhi.n	8007944 <HAL_TIM_ConfigClockSource+0x178>
 8007872:	2b00      	cmp	r3, #0
 8007874:	d05d      	beq.n	8007932 <HAL_TIM_ConfigClockSource+0x166>
 8007876:	2b10      	cmp	r3, #16
 8007878:	d05b      	beq.n	8007932 <HAL_TIM_ConfigClockSource+0x166>
 800787a:	e063      	b.n	8007944 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6818      	ldr	r0, [r3, #0]
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	6899      	ldr	r1, [r3, #8]
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	685a      	ldr	r2, [r3, #4]
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	68db      	ldr	r3, [r3, #12]
 800788c:	f000 f990 	bl	8007bb0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	689b      	ldr	r3, [r3, #8]
 8007896:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	2277      	movs	r2, #119	; 0x77
 800789c:	4313      	orrs	r3, r2
 800789e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	68ba      	ldr	r2, [r7, #8]
 80078a6:	609a      	str	r2, [r3, #8]
      break;
 80078a8:	e052      	b.n	8007950 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6818      	ldr	r0, [r3, #0]
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	6899      	ldr	r1, [r3, #8]
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	685a      	ldr	r2, [r3, #4]
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	68db      	ldr	r3, [r3, #12]
 80078ba:	f000 f979 	bl	8007bb0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	689a      	ldr	r2, [r3, #8]
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	2180      	movs	r1, #128	; 0x80
 80078ca:	01c9      	lsls	r1, r1, #7
 80078cc:	430a      	orrs	r2, r1
 80078ce:	609a      	str	r2, [r3, #8]
      break;
 80078d0:	e03e      	b.n	8007950 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6818      	ldr	r0, [r3, #0]
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	6859      	ldr	r1, [r3, #4]
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	68db      	ldr	r3, [r3, #12]
 80078de:	001a      	movs	r2, r3
 80078e0:	f000 f8ea 	bl	8007ab8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	2150      	movs	r1, #80	; 0x50
 80078ea:	0018      	movs	r0, r3
 80078ec:	f000 f944 	bl	8007b78 <TIM_ITRx_SetConfig>
      break;
 80078f0:	e02e      	b.n	8007950 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6818      	ldr	r0, [r3, #0]
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	6859      	ldr	r1, [r3, #4]
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	68db      	ldr	r3, [r3, #12]
 80078fe:	001a      	movs	r2, r3
 8007900:	f000 f908 	bl	8007b14 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	2160      	movs	r1, #96	; 0x60
 800790a:	0018      	movs	r0, r3
 800790c:	f000 f934 	bl	8007b78 <TIM_ITRx_SetConfig>
      break;
 8007910:	e01e      	b.n	8007950 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6818      	ldr	r0, [r3, #0]
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	6859      	ldr	r1, [r3, #4]
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	68db      	ldr	r3, [r3, #12]
 800791e:	001a      	movs	r2, r3
 8007920:	f000 f8ca 	bl	8007ab8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	2140      	movs	r1, #64	; 0x40
 800792a:	0018      	movs	r0, r3
 800792c:	f000 f924 	bl	8007b78 <TIM_ITRx_SetConfig>
      break;
 8007930:	e00e      	b.n	8007950 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681a      	ldr	r2, [r3, #0]
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	0019      	movs	r1, r3
 800793c:	0010      	movs	r0, r2
 800793e:	f000 f91b 	bl	8007b78 <TIM_ITRx_SetConfig>
      break;
 8007942:	e005      	b.n	8007950 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8007944:	230f      	movs	r3, #15
 8007946:	18fb      	adds	r3, r7, r3
 8007948:	2201      	movs	r2, #1
 800794a:	701a      	strb	r2, [r3, #0]
      break;
 800794c:	e000      	b.n	8007950 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800794e:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	223d      	movs	r2, #61	; 0x3d
 8007954:	2101      	movs	r1, #1
 8007956:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	223c      	movs	r2, #60	; 0x3c
 800795c:	2100      	movs	r1, #0
 800795e:	5499      	strb	r1, [r3, r2]

  return status;
 8007960:	230f      	movs	r3, #15
 8007962:	18fb      	adds	r3, r7, r3
 8007964:	781b      	ldrb	r3, [r3, #0]
}
 8007966:	0018      	movs	r0, r3
 8007968:	46bd      	mov	sp, r7
 800796a:	b004      	add	sp, #16
 800796c:	bd80      	pop	{r7, pc}
 800796e:	46c0      	nop			; (mov r8, r8)
 8007970:	ffceff88 	.word	0xffceff88
 8007974:	ffff00ff 	.word	0xffff00ff

08007978 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b082      	sub	sp, #8
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007980:	46c0      	nop			; (mov r8, r8)
 8007982:	46bd      	mov	sp, r7
 8007984:	b002      	add	sp, #8
 8007986:	bd80      	pop	{r7, pc}

08007988 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b082      	sub	sp, #8
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007990:	46c0      	nop			; (mov r8, r8)
 8007992:	46bd      	mov	sp, r7
 8007994:	b002      	add	sp, #8
 8007996:	bd80      	pop	{r7, pc}

08007998 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b082      	sub	sp, #8
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80079a0:	46c0      	nop			; (mov r8, r8)
 80079a2:	46bd      	mov	sp, r7
 80079a4:	b002      	add	sp, #8
 80079a6:	bd80      	pop	{r7, pc}

080079a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b082      	sub	sp, #8
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80079b0:	46c0      	nop			; (mov r8, r8)
 80079b2:	46bd      	mov	sp, r7
 80079b4:	b002      	add	sp, #8
 80079b6:	bd80      	pop	{r7, pc}

080079b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b084      	sub	sp, #16
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
 80079c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	4a34      	ldr	r2, [pc, #208]	; (8007a9c <TIM_Base_SetConfig+0xe4>)
 80079cc:	4293      	cmp	r3, r2
 80079ce:	d008      	beq.n	80079e2 <TIM_Base_SetConfig+0x2a>
 80079d0:	687a      	ldr	r2, [r7, #4]
 80079d2:	2380      	movs	r3, #128	; 0x80
 80079d4:	05db      	lsls	r3, r3, #23
 80079d6:	429a      	cmp	r2, r3
 80079d8:	d003      	beq.n	80079e2 <TIM_Base_SetConfig+0x2a>
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	4a30      	ldr	r2, [pc, #192]	; (8007aa0 <TIM_Base_SetConfig+0xe8>)
 80079de:	4293      	cmp	r3, r2
 80079e0:	d108      	bne.n	80079f4 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	2270      	movs	r2, #112	; 0x70
 80079e6:	4393      	bics	r3, r2
 80079e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	685b      	ldr	r3, [r3, #4]
 80079ee:	68fa      	ldr	r2, [r7, #12]
 80079f0:	4313      	orrs	r3, r2
 80079f2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	4a29      	ldr	r2, [pc, #164]	; (8007a9c <TIM_Base_SetConfig+0xe4>)
 80079f8:	4293      	cmp	r3, r2
 80079fa:	d018      	beq.n	8007a2e <TIM_Base_SetConfig+0x76>
 80079fc:	687a      	ldr	r2, [r7, #4]
 80079fe:	2380      	movs	r3, #128	; 0x80
 8007a00:	05db      	lsls	r3, r3, #23
 8007a02:	429a      	cmp	r2, r3
 8007a04:	d013      	beq.n	8007a2e <TIM_Base_SetConfig+0x76>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	4a25      	ldr	r2, [pc, #148]	; (8007aa0 <TIM_Base_SetConfig+0xe8>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d00f      	beq.n	8007a2e <TIM_Base_SetConfig+0x76>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	4a24      	ldr	r2, [pc, #144]	; (8007aa4 <TIM_Base_SetConfig+0xec>)
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d00b      	beq.n	8007a2e <TIM_Base_SetConfig+0x76>
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	4a23      	ldr	r2, [pc, #140]	; (8007aa8 <TIM_Base_SetConfig+0xf0>)
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d007      	beq.n	8007a2e <TIM_Base_SetConfig+0x76>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	4a22      	ldr	r2, [pc, #136]	; (8007aac <TIM_Base_SetConfig+0xf4>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d003      	beq.n	8007a2e <TIM_Base_SetConfig+0x76>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	4a21      	ldr	r2, [pc, #132]	; (8007ab0 <TIM_Base_SetConfig+0xf8>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d108      	bne.n	8007a40 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	4a20      	ldr	r2, [pc, #128]	; (8007ab4 <TIM_Base_SetConfig+0xfc>)
 8007a32:	4013      	ands	r3, r2
 8007a34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	68db      	ldr	r3, [r3, #12]
 8007a3a:	68fa      	ldr	r2, [r7, #12]
 8007a3c:	4313      	orrs	r3, r2
 8007a3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	2280      	movs	r2, #128	; 0x80
 8007a44:	4393      	bics	r3, r2
 8007a46:	001a      	movs	r2, r3
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	695b      	ldr	r3, [r3, #20]
 8007a4c:	4313      	orrs	r3, r2
 8007a4e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	68fa      	ldr	r2, [r7, #12]
 8007a54:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	689a      	ldr	r2, [r3, #8]
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	681a      	ldr	r2, [r3, #0]
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	4a0c      	ldr	r2, [pc, #48]	; (8007a9c <TIM_Base_SetConfig+0xe4>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d00b      	beq.n	8007a86 <TIM_Base_SetConfig+0xce>
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	4a0d      	ldr	r2, [pc, #52]	; (8007aa8 <TIM_Base_SetConfig+0xf0>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d007      	beq.n	8007a86 <TIM_Base_SetConfig+0xce>
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	4a0c      	ldr	r2, [pc, #48]	; (8007aac <TIM_Base_SetConfig+0xf4>)
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	d003      	beq.n	8007a86 <TIM_Base_SetConfig+0xce>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	4a0b      	ldr	r2, [pc, #44]	; (8007ab0 <TIM_Base_SetConfig+0xf8>)
 8007a82:	4293      	cmp	r3, r2
 8007a84:	d103      	bne.n	8007a8e <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	691a      	ldr	r2, [r3, #16]
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2201      	movs	r2, #1
 8007a92:	615a      	str	r2, [r3, #20]
}
 8007a94:	46c0      	nop			; (mov r8, r8)
 8007a96:	46bd      	mov	sp, r7
 8007a98:	b004      	add	sp, #16
 8007a9a:	bd80      	pop	{r7, pc}
 8007a9c:	40012c00 	.word	0x40012c00
 8007aa0:	40000400 	.word	0x40000400
 8007aa4:	40002000 	.word	0x40002000
 8007aa8:	40014000 	.word	0x40014000
 8007aac:	40014400 	.word	0x40014400
 8007ab0:	40014800 	.word	0x40014800
 8007ab4:	fffffcff 	.word	0xfffffcff

08007ab8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b086      	sub	sp, #24
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	60f8      	str	r0, [r7, #12]
 8007ac0:	60b9      	str	r1, [r7, #8]
 8007ac2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	6a1b      	ldr	r3, [r3, #32]
 8007ac8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	6a1b      	ldr	r3, [r3, #32]
 8007ace:	2201      	movs	r2, #1
 8007ad0:	4393      	bics	r3, r2
 8007ad2:	001a      	movs	r2, r3
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	699b      	ldr	r3, [r3, #24]
 8007adc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007ade:	693b      	ldr	r3, [r7, #16]
 8007ae0:	22f0      	movs	r2, #240	; 0xf0
 8007ae2:	4393      	bics	r3, r2
 8007ae4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	011b      	lsls	r3, r3, #4
 8007aea:	693a      	ldr	r2, [r7, #16]
 8007aec:	4313      	orrs	r3, r2
 8007aee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007af0:	697b      	ldr	r3, [r7, #20]
 8007af2:	220a      	movs	r2, #10
 8007af4:	4393      	bics	r3, r2
 8007af6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007af8:	697a      	ldr	r2, [r7, #20]
 8007afa:	68bb      	ldr	r3, [r7, #8]
 8007afc:	4313      	orrs	r3, r2
 8007afe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	693a      	ldr	r2, [r7, #16]
 8007b04:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	697a      	ldr	r2, [r7, #20]
 8007b0a:	621a      	str	r2, [r3, #32]
}
 8007b0c:	46c0      	nop			; (mov r8, r8)
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	b006      	add	sp, #24
 8007b12:	bd80      	pop	{r7, pc}

08007b14 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b086      	sub	sp, #24
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	60f8      	str	r0, [r7, #12]
 8007b1c:	60b9      	str	r1, [r7, #8]
 8007b1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	6a1b      	ldr	r3, [r3, #32]
 8007b24:	2210      	movs	r2, #16
 8007b26:	4393      	bics	r3, r2
 8007b28:	001a      	movs	r2, r3
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	699b      	ldr	r3, [r3, #24]
 8007b32:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	6a1b      	ldr	r3, [r3, #32]
 8007b38:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007b3a:	697b      	ldr	r3, [r7, #20]
 8007b3c:	4a0d      	ldr	r2, [pc, #52]	; (8007b74 <TIM_TI2_ConfigInputStage+0x60>)
 8007b3e:	4013      	ands	r3, r2
 8007b40:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	031b      	lsls	r3, r3, #12
 8007b46:	697a      	ldr	r2, [r7, #20]
 8007b48:	4313      	orrs	r3, r2
 8007b4a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007b4c:	693b      	ldr	r3, [r7, #16]
 8007b4e:	22a0      	movs	r2, #160	; 0xa0
 8007b50:	4393      	bics	r3, r2
 8007b52:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	011b      	lsls	r3, r3, #4
 8007b58:	693a      	ldr	r2, [r7, #16]
 8007b5a:	4313      	orrs	r3, r2
 8007b5c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	697a      	ldr	r2, [r7, #20]
 8007b62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	693a      	ldr	r2, [r7, #16]
 8007b68:	621a      	str	r2, [r3, #32]
}
 8007b6a:	46c0      	nop			; (mov r8, r8)
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	b006      	add	sp, #24
 8007b70:	bd80      	pop	{r7, pc}
 8007b72:	46c0      	nop			; (mov r8, r8)
 8007b74:	ffff0fff 	.word	0xffff0fff

08007b78 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b084      	sub	sp, #16
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
 8007b80:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	689b      	ldr	r3, [r3, #8]
 8007b86:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	4a08      	ldr	r2, [pc, #32]	; (8007bac <TIM_ITRx_SetConfig+0x34>)
 8007b8c:	4013      	ands	r3, r2
 8007b8e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007b90:	683a      	ldr	r2, [r7, #0]
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	4313      	orrs	r3, r2
 8007b96:	2207      	movs	r2, #7
 8007b98:	4313      	orrs	r3, r2
 8007b9a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	68fa      	ldr	r2, [r7, #12]
 8007ba0:	609a      	str	r2, [r3, #8]
}
 8007ba2:	46c0      	nop			; (mov r8, r8)
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	b004      	add	sp, #16
 8007ba8:	bd80      	pop	{r7, pc}
 8007baa:	46c0      	nop			; (mov r8, r8)
 8007bac:	ffcfff8f 	.word	0xffcfff8f

08007bb0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b086      	sub	sp, #24
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	60f8      	str	r0, [r7, #12]
 8007bb8:	60b9      	str	r1, [r7, #8]
 8007bba:	607a      	str	r2, [r7, #4]
 8007bbc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	689b      	ldr	r3, [r3, #8]
 8007bc2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007bc4:	697b      	ldr	r3, [r7, #20]
 8007bc6:	4a09      	ldr	r2, [pc, #36]	; (8007bec <TIM_ETR_SetConfig+0x3c>)
 8007bc8:	4013      	ands	r3, r2
 8007bca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	021a      	lsls	r2, r3, #8
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	431a      	orrs	r2, r3
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	4313      	orrs	r3, r2
 8007bd8:	697a      	ldr	r2, [r7, #20]
 8007bda:	4313      	orrs	r3, r2
 8007bdc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	697a      	ldr	r2, [r7, #20]
 8007be2:	609a      	str	r2, [r3, #8]
}
 8007be4:	46c0      	nop			; (mov r8, r8)
 8007be6:	46bd      	mov	sp, r7
 8007be8:	b006      	add	sp, #24
 8007bea:	bd80      	pop	{r7, pc}
 8007bec:	ffff00ff 	.word	0xffff00ff

08007bf0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b084      	sub	sp, #16
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
 8007bf8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	223c      	movs	r2, #60	; 0x3c
 8007bfe:	5c9b      	ldrb	r3, [r3, r2]
 8007c00:	2b01      	cmp	r3, #1
 8007c02:	d101      	bne.n	8007c08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007c04:	2302      	movs	r3, #2
 8007c06:	e055      	b.n	8007cb4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	223c      	movs	r2, #60	; 0x3c
 8007c0c:	2101      	movs	r1, #1
 8007c0e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	223d      	movs	r2, #61	; 0x3d
 8007c14:	2102      	movs	r1, #2
 8007c16:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	685b      	ldr	r3, [r3, #4]
 8007c1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	689b      	ldr	r3, [r3, #8]
 8007c26:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	4a23      	ldr	r2, [pc, #140]	; (8007cbc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d108      	bne.n	8007c44 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	4a22      	ldr	r2, [pc, #136]	; (8007cc0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007c36:	4013      	ands	r3, r2
 8007c38:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	685b      	ldr	r3, [r3, #4]
 8007c3e:	68fa      	ldr	r2, [r7, #12]
 8007c40:	4313      	orrs	r3, r2
 8007c42:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	2270      	movs	r2, #112	; 0x70
 8007c48:	4393      	bics	r3, r2
 8007c4a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	68fa      	ldr	r2, [r7, #12]
 8007c52:	4313      	orrs	r3, r2
 8007c54:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	68fa      	ldr	r2, [r7, #12]
 8007c5c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	4a16      	ldr	r2, [pc, #88]	; (8007cbc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007c64:	4293      	cmp	r3, r2
 8007c66:	d00f      	beq.n	8007c88 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681a      	ldr	r2, [r3, #0]
 8007c6c:	2380      	movs	r3, #128	; 0x80
 8007c6e:	05db      	lsls	r3, r3, #23
 8007c70:	429a      	cmp	r2, r3
 8007c72:	d009      	beq.n	8007c88 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	4a12      	ldr	r2, [pc, #72]	; (8007cc4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007c7a:	4293      	cmp	r3, r2
 8007c7c:	d004      	beq.n	8007c88 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	4a11      	ldr	r2, [pc, #68]	; (8007cc8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007c84:	4293      	cmp	r3, r2
 8007c86:	d10c      	bne.n	8007ca2 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007c88:	68bb      	ldr	r3, [r7, #8]
 8007c8a:	2280      	movs	r2, #128	; 0x80
 8007c8c:	4393      	bics	r3, r2
 8007c8e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	689b      	ldr	r3, [r3, #8]
 8007c94:	68ba      	ldr	r2, [r7, #8]
 8007c96:	4313      	orrs	r3, r2
 8007c98:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	68ba      	ldr	r2, [r7, #8]
 8007ca0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	223d      	movs	r2, #61	; 0x3d
 8007ca6:	2101      	movs	r1, #1
 8007ca8:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	223c      	movs	r2, #60	; 0x3c
 8007cae:	2100      	movs	r1, #0
 8007cb0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007cb2:	2300      	movs	r3, #0
}
 8007cb4:	0018      	movs	r0, r3
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	b004      	add	sp, #16
 8007cba:	bd80      	pop	{r7, pc}
 8007cbc:	40012c00 	.word	0x40012c00
 8007cc0:	ff0fffff 	.word	0xff0fffff
 8007cc4:	40000400 	.word	0x40000400
 8007cc8:	40014000 	.word	0x40014000

08007ccc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b082      	sub	sp, #8
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007cd4:	46c0      	nop			; (mov r8, r8)
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	b002      	add	sp, #8
 8007cda:	bd80      	pop	{r7, pc}

08007cdc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b082      	sub	sp, #8
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007ce4:	46c0      	nop			; (mov r8, r8)
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	b002      	add	sp, #8
 8007cea:	bd80      	pop	{r7, pc}

08007cec <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b082      	sub	sp, #8
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007cf4:	46c0      	nop			; (mov r8, r8)
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	b002      	add	sp, #8
 8007cfa:	bd80      	pop	{r7, pc}

08007cfc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b082      	sub	sp, #8
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d101      	bne.n	8007d0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	e046      	b.n	8007d9c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2284      	movs	r2, #132	; 0x84
 8007d12:	589b      	ldr	r3, [r3, r2]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d107      	bne.n	8007d28 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2280      	movs	r2, #128	; 0x80
 8007d1c:	2100      	movs	r1, #0
 8007d1e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	0018      	movs	r0, r3
 8007d24:	f7fb fe80 	bl	8003a28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2284      	movs	r2, #132	; 0x84
 8007d2c:	2124      	movs	r1, #36	; 0x24
 8007d2e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	681a      	ldr	r2, [r3, #0]
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	2101      	movs	r1, #1
 8007d3c:	438a      	bics	r2, r1
 8007d3e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	0018      	movs	r0, r3
 8007d44:	f000 fc7c 	bl	8008640 <UART_SetConfig>
 8007d48:	0003      	movs	r3, r0
 8007d4a:	2b01      	cmp	r3, #1
 8007d4c:	d101      	bne.n	8007d52 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8007d4e:	2301      	movs	r3, #1
 8007d50:	e024      	b.n	8007d9c <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d003      	beq.n	8007d62 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	0018      	movs	r0, r3
 8007d5e:	f000 ff2d 	bl	8008bbc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	685a      	ldr	r2, [r3, #4]
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	490d      	ldr	r1, [pc, #52]	; (8007da4 <HAL_UART_Init+0xa8>)
 8007d6e:	400a      	ands	r2, r1
 8007d70:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	689a      	ldr	r2, [r3, #8]
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	212a      	movs	r1, #42	; 0x2a
 8007d7e:	438a      	bics	r2, r1
 8007d80:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	681a      	ldr	r2, [r3, #0]
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	2101      	movs	r1, #1
 8007d8e:	430a      	orrs	r2, r1
 8007d90:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	0018      	movs	r0, r3
 8007d96:	f000 ffc5 	bl	8008d24 <UART_CheckIdleState>
 8007d9a:	0003      	movs	r3, r0
}
 8007d9c:	0018      	movs	r0, r3
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	b002      	add	sp, #8
 8007da2:	bd80      	pop	{r7, pc}
 8007da4:	ffffb7ff 	.word	0xffffb7ff

08007da8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b08a      	sub	sp, #40	; 0x28
 8007dac:	af02      	add	r7, sp, #8
 8007dae:	60f8      	str	r0, [r7, #12]
 8007db0:	60b9      	str	r1, [r7, #8]
 8007db2:	603b      	str	r3, [r7, #0]
 8007db4:	1dbb      	adds	r3, r7, #6
 8007db6:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	2284      	movs	r2, #132	; 0x84
 8007dbc:	589b      	ldr	r3, [r3, r2]
 8007dbe:	2b20      	cmp	r3, #32
 8007dc0:	d000      	beq.n	8007dc4 <HAL_UART_Transmit+0x1c>
 8007dc2:	e097      	b.n	8007ef4 <HAL_UART_Transmit+0x14c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007dc4:	68bb      	ldr	r3, [r7, #8]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d003      	beq.n	8007dd2 <HAL_UART_Transmit+0x2a>
 8007dca:	1dbb      	adds	r3, r7, #6
 8007dcc:	881b      	ldrh	r3, [r3, #0]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d101      	bne.n	8007dd6 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8007dd2:	2301      	movs	r3, #1
 8007dd4:	e08f      	b.n	8007ef6 <HAL_UART_Transmit+0x14e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	689a      	ldr	r2, [r3, #8]
 8007dda:	2380      	movs	r3, #128	; 0x80
 8007ddc:	015b      	lsls	r3, r3, #5
 8007dde:	429a      	cmp	r2, r3
 8007de0:	d109      	bne.n	8007df6 <HAL_UART_Transmit+0x4e>
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	691b      	ldr	r3, [r3, #16]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d105      	bne.n	8007df6 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8007dea:	68bb      	ldr	r3, [r7, #8]
 8007dec:	2201      	movs	r2, #1
 8007dee:	4013      	ands	r3, r2
 8007df0:	d001      	beq.n	8007df6 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8007df2:	2301      	movs	r3, #1
 8007df4:	e07f      	b.n	8007ef6 <HAL_UART_Transmit+0x14e>
      }
    }

    __HAL_LOCK(huart);
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	2280      	movs	r2, #128	; 0x80
 8007dfa:	5c9b      	ldrb	r3, [r3, r2]
 8007dfc:	2b01      	cmp	r3, #1
 8007dfe:	d101      	bne.n	8007e04 <HAL_UART_Transmit+0x5c>
 8007e00:	2302      	movs	r3, #2
 8007e02:	e078      	b.n	8007ef6 <HAL_UART_Transmit+0x14e>
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	2280      	movs	r2, #128	; 0x80
 8007e08:	2101      	movs	r1, #1
 8007e0a:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	228c      	movs	r2, #140	; 0x8c
 8007e10:	2100      	movs	r1, #0
 8007e12:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	2284      	movs	r2, #132	; 0x84
 8007e18:	2121      	movs	r1, #33	; 0x21
 8007e1a:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007e1c:	f7fc f840 	bl	8003ea0 <HAL_GetTick>
 8007e20:	0003      	movs	r3, r0
 8007e22:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	1dba      	adds	r2, r7, #6
 8007e28:	2154      	movs	r1, #84	; 0x54
 8007e2a:	8812      	ldrh	r2, [r2, #0]
 8007e2c:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	1dba      	adds	r2, r7, #6
 8007e32:	2156      	movs	r1, #86	; 0x56
 8007e34:	8812      	ldrh	r2, [r2, #0]
 8007e36:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	689a      	ldr	r2, [r3, #8]
 8007e3c:	2380      	movs	r3, #128	; 0x80
 8007e3e:	015b      	lsls	r3, r3, #5
 8007e40:	429a      	cmp	r2, r3
 8007e42:	d108      	bne.n	8007e56 <HAL_UART_Transmit+0xae>
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	691b      	ldr	r3, [r3, #16]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d104      	bne.n	8007e56 <HAL_UART_Transmit+0xae>
    {
      pdata8bits  = NULL;
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	61bb      	str	r3, [r7, #24]
 8007e54:	e003      	b.n	8007e5e <HAL_UART_Transmit+0xb6>
    }
    else
    {
      pdata8bits  = pData;
 8007e56:	68bb      	ldr	r3, [r7, #8]
 8007e58:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	2280      	movs	r2, #128	; 0x80
 8007e62:	2100      	movs	r1, #0
 8007e64:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8007e66:	e02c      	b.n	8007ec2 <HAL_UART_Transmit+0x11a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007e68:	697a      	ldr	r2, [r7, #20]
 8007e6a:	68f8      	ldr	r0, [r7, #12]
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	9300      	str	r3, [sp, #0]
 8007e70:	0013      	movs	r3, r2
 8007e72:	2200      	movs	r2, #0
 8007e74:	2180      	movs	r1, #128	; 0x80
 8007e76:	f000 ff9f 	bl	8008db8 <UART_WaitOnFlagUntilTimeout>
 8007e7a:	1e03      	subs	r3, r0, #0
 8007e7c:	d001      	beq.n	8007e82 <HAL_UART_Transmit+0xda>
      {
        return HAL_TIMEOUT;
 8007e7e:	2303      	movs	r3, #3
 8007e80:	e039      	b.n	8007ef6 <HAL_UART_Transmit+0x14e>
      }
      if (pdata8bits == NULL)
 8007e82:	69fb      	ldr	r3, [r7, #28]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d10b      	bne.n	8007ea0 <HAL_UART_Transmit+0xf8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007e88:	69bb      	ldr	r3, [r7, #24]
 8007e8a:	881b      	ldrh	r3, [r3, #0]
 8007e8c:	001a      	movs	r2, r3
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	05d2      	lsls	r2, r2, #23
 8007e94:	0dd2      	lsrs	r2, r2, #23
 8007e96:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007e98:	69bb      	ldr	r3, [r7, #24]
 8007e9a:	3302      	adds	r3, #2
 8007e9c:	61bb      	str	r3, [r7, #24]
 8007e9e:	e007      	b.n	8007eb0 <HAL_UART_Transmit+0x108>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007ea0:	69fb      	ldr	r3, [r7, #28]
 8007ea2:	781a      	ldrb	r2, [r3, #0]
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007eaa:	69fb      	ldr	r3, [r7, #28]
 8007eac:	3301      	adds	r3, #1
 8007eae:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	2256      	movs	r2, #86	; 0x56
 8007eb4:	5a9b      	ldrh	r3, [r3, r2]
 8007eb6:	b29b      	uxth	r3, r3
 8007eb8:	3b01      	subs	r3, #1
 8007eba:	b299      	uxth	r1, r3
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	2256      	movs	r2, #86	; 0x56
 8007ec0:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	2256      	movs	r2, #86	; 0x56
 8007ec6:	5a9b      	ldrh	r3, [r3, r2]
 8007ec8:	b29b      	uxth	r3, r3
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d1cc      	bne.n	8007e68 <HAL_UART_Transmit+0xc0>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007ece:	697a      	ldr	r2, [r7, #20]
 8007ed0:	68f8      	ldr	r0, [r7, #12]
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	9300      	str	r3, [sp, #0]
 8007ed6:	0013      	movs	r3, r2
 8007ed8:	2200      	movs	r2, #0
 8007eda:	2140      	movs	r1, #64	; 0x40
 8007edc:	f000 ff6c 	bl	8008db8 <UART_WaitOnFlagUntilTimeout>
 8007ee0:	1e03      	subs	r3, r0, #0
 8007ee2:	d001      	beq.n	8007ee8 <HAL_UART_Transmit+0x140>
    {
      return HAL_TIMEOUT;
 8007ee4:	2303      	movs	r3, #3
 8007ee6:	e006      	b.n	8007ef6 <HAL_UART_Transmit+0x14e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	2284      	movs	r2, #132	; 0x84
 8007eec:	2120      	movs	r1, #32
 8007eee:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	e000      	b.n	8007ef6 <HAL_UART_Transmit+0x14e>
  }
  else
  {
    return HAL_BUSY;
 8007ef4:	2302      	movs	r3, #2
  }
}
 8007ef6:	0018      	movs	r0, r3
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	b008      	add	sp, #32
 8007efc:	bd80      	pop	{r7, pc}
	...

08007f00 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b088      	sub	sp, #32
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	60f8      	str	r0, [r7, #12]
 8007f08:	60b9      	str	r1, [r7, #8]
 8007f0a:	1dbb      	adds	r3, r7, #6
 8007f0c:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	2288      	movs	r2, #136	; 0x88
 8007f12:	589b      	ldr	r3, [r3, r2]
 8007f14:	2b20      	cmp	r3, #32
 8007f16:	d155      	bne.n	8007fc4 <HAL_UART_Receive_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d003      	beq.n	8007f26 <HAL_UART_Receive_IT+0x26>
 8007f1e:	1dbb      	adds	r3, r7, #6
 8007f20:	881b      	ldrh	r3, [r3, #0]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d101      	bne.n	8007f2a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007f26:	2301      	movs	r3, #1
 8007f28:	e04d      	b.n	8007fc6 <HAL_UART_Receive_IT+0xc6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	689a      	ldr	r2, [r3, #8]
 8007f2e:	2380      	movs	r3, #128	; 0x80
 8007f30:	015b      	lsls	r3, r3, #5
 8007f32:	429a      	cmp	r2, r3
 8007f34:	d109      	bne.n	8007f4a <HAL_UART_Receive_IT+0x4a>
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	691b      	ldr	r3, [r3, #16]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d105      	bne.n	8007f4a <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8007f3e:	68bb      	ldr	r3, [r7, #8]
 8007f40:	2201      	movs	r2, #1
 8007f42:	4013      	ands	r3, r2
 8007f44:	d001      	beq.n	8007f4a <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8007f46:	2301      	movs	r3, #1
 8007f48:	e03d      	b.n	8007fc6 <HAL_UART_Receive_IT+0xc6>
      }
    }

    __HAL_LOCK(huart);
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	2280      	movs	r2, #128	; 0x80
 8007f4e:	5c9b      	ldrb	r3, [r3, r2]
 8007f50:	2b01      	cmp	r3, #1
 8007f52:	d101      	bne.n	8007f58 <HAL_UART_Receive_IT+0x58>
 8007f54:	2302      	movs	r3, #2
 8007f56:	e036      	b.n	8007fc6 <HAL_UART_Receive_IT+0xc6>
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	2280      	movs	r2, #128	; 0x80
 8007f5c:	2101      	movs	r1, #1
 8007f5e:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	2200      	movs	r2, #0
 8007f64:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	4a19      	ldr	r2, [pc, #100]	; (8007fd0 <HAL_UART_Receive_IT+0xd0>)
 8007f6c:	4293      	cmp	r3, r2
 8007f6e:	d020      	beq.n	8007fb2 <HAL_UART_Receive_IT+0xb2>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	685a      	ldr	r2, [r3, #4]
 8007f76:	2380      	movs	r3, #128	; 0x80
 8007f78:	041b      	lsls	r3, r3, #16
 8007f7a:	4013      	ands	r3, r2
 8007f7c:	d019      	beq.n	8007fb2 <HAL_UART_Receive_IT+0xb2>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f7e:	f3ef 8310 	mrs	r3, PRIMASK
 8007f82:	613b      	str	r3, [r7, #16]
  return(result);
 8007f84:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007f86:	61fb      	str	r3, [r7, #28]
 8007f88:	2301      	movs	r3, #1
 8007f8a:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f8c:	697b      	ldr	r3, [r7, #20]
 8007f8e:	f383 8810 	msr	PRIMASK, r3
}
 8007f92:	46c0      	nop			; (mov r8, r8)
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	681a      	ldr	r2, [r3, #0]
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	2180      	movs	r1, #128	; 0x80
 8007fa0:	04c9      	lsls	r1, r1, #19
 8007fa2:	430a      	orrs	r2, r1
 8007fa4:	601a      	str	r2, [r3, #0]
 8007fa6:	69fb      	ldr	r3, [r7, #28]
 8007fa8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007faa:	69bb      	ldr	r3, [r7, #24]
 8007fac:	f383 8810 	msr	PRIMASK, r3
}
 8007fb0:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007fb2:	1dbb      	adds	r3, r7, #6
 8007fb4:	881a      	ldrh	r2, [r3, #0]
 8007fb6:	68b9      	ldr	r1, [r7, #8]
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	0018      	movs	r0, r3
 8007fbc:	f000 ffc4 	bl	8008f48 <UART_Start_Receive_IT>
 8007fc0:	0003      	movs	r3, r0
 8007fc2:	e000      	b.n	8007fc6 <HAL_UART_Receive_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8007fc4:	2302      	movs	r3, #2
  }
}
 8007fc6:	0018      	movs	r0, r3
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	b008      	add	sp, #32
 8007fcc:	bd80      	pop	{r7, pc}
 8007fce:	46c0      	nop			; (mov r8, r8)
 8007fd0:	40008000 	.word	0x40008000

08007fd4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007fd4:	b5b0      	push	{r4, r5, r7, lr}
 8007fd6:	b0aa      	sub	sp, #168	; 0xa8
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	69db      	ldr	r3, [r3, #28]
 8007fe2:	22a4      	movs	r2, #164	; 0xa4
 8007fe4:	18b9      	adds	r1, r7, r2
 8007fe6:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	20a0      	movs	r0, #160	; 0xa0
 8007ff0:	1839      	adds	r1, r7, r0
 8007ff2:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	689b      	ldr	r3, [r3, #8]
 8007ffa:	249c      	movs	r4, #156	; 0x9c
 8007ffc:	1939      	adds	r1, r7, r4
 8007ffe:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008000:	0011      	movs	r1, r2
 8008002:	18bb      	adds	r3, r7, r2
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	4aa0      	ldr	r2, [pc, #640]	; (8008288 <HAL_UART_IRQHandler+0x2b4>)
 8008008:	4013      	ands	r3, r2
 800800a:	2298      	movs	r2, #152	; 0x98
 800800c:	18bd      	adds	r5, r7, r2
 800800e:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8008010:	18bb      	adds	r3, r7, r2
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d11a      	bne.n	800804e <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008018:	187b      	adds	r3, r7, r1
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	2220      	movs	r2, #32
 800801e:	4013      	ands	r3, r2
 8008020:	d015      	beq.n	800804e <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008022:	183b      	adds	r3, r7, r0
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	2220      	movs	r2, #32
 8008028:	4013      	ands	r3, r2
 800802a:	d105      	bne.n	8008038 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800802c:	193b      	adds	r3, r7, r4
 800802e:	681a      	ldr	r2, [r3, #0]
 8008030:	2380      	movs	r3, #128	; 0x80
 8008032:	055b      	lsls	r3, r3, #21
 8008034:	4013      	ands	r3, r2
 8008036:	d00a      	beq.n	800804e <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800803c:	2b00      	cmp	r3, #0
 800803e:	d100      	bne.n	8008042 <HAL_UART_IRQHandler+0x6e>
 8008040:	e2cf      	b.n	80085e2 <HAL_UART_IRQHandler+0x60e>
      {
        huart->RxISR(huart);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008046:	687a      	ldr	r2, [r7, #4]
 8008048:	0010      	movs	r0, r2
 800804a:	4798      	blx	r3
      }
      return;
 800804c:	e2c9      	b.n	80085e2 <HAL_UART_IRQHandler+0x60e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800804e:	2398      	movs	r3, #152	; 0x98
 8008050:	18fb      	adds	r3, r7, r3
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d100      	bne.n	800805a <HAL_UART_IRQHandler+0x86>
 8008058:	e11e      	b.n	8008298 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800805a:	239c      	movs	r3, #156	; 0x9c
 800805c:	18fb      	adds	r3, r7, r3
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	4a8a      	ldr	r2, [pc, #552]	; (800828c <HAL_UART_IRQHandler+0x2b8>)
 8008062:	4013      	ands	r3, r2
 8008064:	d106      	bne.n	8008074 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008066:	23a0      	movs	r3, #160	; 0xa0
 8008068:	18fb      	adds	r3, r7, r3
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	4a88      	ldr	r2, [pc, #544]	; (8008290 <HAL_UART_IRQHandler+0x2bc>)
 800806e:	4013      	ands	r3, r2
 8008070:	d100      	bne.n	8008074 <HAL_UART_IRQHandler+0xa0>
 8008072:	e111      	b.n	8008298 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008074:	23a4      	movs	r3, #164	; 0xa4
 8008076:	18fb      	adds	r3, r7, r3
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	2201      	movs	r2, #1
 800807c:	4013      	ands	r3, r2
 800807e:	d012      	beq.n	80080a6 <HAL_UART_IRQHandler+0xd2>
 8008080:	23a0      	movs	r3, #160	; 0xa0
 8008082:	18fb      	adds	r3, r7, r3
 8008084:	681a      	ldr	r2, [r3, #0]
 8008086:	2380      	movs	r3, #128	; 0x80
 8008088:	005b      	lsls	r3, r3, #1
 800808a:	4013      	ands	r3, r2
 800808c:	d00b      	beq.n	80080a6 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	2201      	movs	r2, #1
 8008094:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	228c      	movs	r2, #140	; 0x8c
 800809a:	589b      	ldr	r3, [r3, r2]
 800809c:	2201      	movs	r2, #1
 800809e:	431a      	orrs	r2, r3
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	218c      	movs	r1, #140	; 0x8c
 80080a4:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80080a6:	23a4      	movs	r3, #164	; 0xa4
 80080a8:	18fb      	adds	r3, r7, r3
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	2202      	movs	r2, #2
 80080ae:	4013      	ands	r3, r2
 80080b0:	d011      	beq.n	80080d6 <HAL_UART_IRQHandler+0x102>
 80080b2:	239c      	movs	r3, #156	; 0x9c
 80080b4:	18fb      	adds	r3, r7, r3
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	2201      	movs	r2, #1
 80080ba:	4013      	ands	r3, r2
 80080bc:	d00b      	beq.n	80080d6 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	2202      	movs	r2, #2
 80080c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	228c      	movs	r2, #140	; 0x8c
 80080ca:	589b      	ldr	r3, [r3, r2]
 80080cc:	2204      	movs	r2, #4
 80080ce:	431a      	orrs	r2, r3
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	218c      	movs	r1, #140	; 0x8c
 80080d4:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80080d6:	23a4      	movs	r3, #164	; 0xa4
 80080d8:	18fb      	adds	r3, r7, r3
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	2204      	movs	r2, #4
 80080de:	4013      	ands	r3, r2
 80080e0:	d011      	beq.n	8008106 <HAL_UART_IRQHandler+0x132>
 80080e2:	239c      	movs	r3, #156	; 0x9c
 80080e4:	18fb      	adds	r3, r7, r3
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	2201      	movs	r2, #1
 80080ea:	4013      	ands	r3, r2
 80080ec:	d00b      	beq.n	8008106 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	2204      	movs	r2, #4
 80080f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	228c      	movs	r2, #140	; 0x8c
 80080fa:	589b      	ldr	r3, [r3, r2]
 80080fc:	2202      	movs	r2, #2
 80080fe:	431a      	orrs	r2, r3
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	218c      	movs	r1, #140	; 0x8c
 8008104:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008106:	23a4      	movs	r3, #164	; 0xa4
 8008108:	18fb      	adds	r3, r7, r3
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	2208      	movs	r2, #8
 800810e:	4013      	ands	r3, r2
 8008110:	d017      	beq.n	8008142 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008112:	23a0      	movs	r3, #160	; 0xa0
 8008114:	18fb      	adds	r3, r7, r3
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	2220      	movs	r2, #32
 800811a:	4013      	ands	r3, r2
 800811c:	d105      	bne.n	800812a <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800811e:	239c      	movs	r3, #156	; 0x9c
 8008120:	18fb      	adds	r3, r7, r3
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	4a59      	ldr	r2, [pc, #356]	; (800828c <HAL_UART_IRQHandler+0x2b8>)
 8008126:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008128:	d00b      	beq.n	8008142 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	2208      	movs	r2, #8
 8008130:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	228c      	movs	r2, #140	; 0x8c
 8008136:	589b      	ldr	r3, [r3, r2]
 8008138:	2208      	movs	r2, #8
 800813a:	431a      	orrs	r2, r3
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	218c      	movs	r1, #140	; 0x8c
 8008140:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008142:	23a4      	movs	r3, #164	; 0xa4
 8008144:	18fb      	adds	r3, r7, r3
 8008146:	681a      	ldr	r2, [r3, #0]
 8008148:	2380      	movs	r3, #128	; 0x80
 800814a:	011b      	lsls	r3, r3, #4
 800814c:	4013      	ands	r3, r2
 800814e:	d013      	beq.n	8008178 <HAL_UART_IRQHandler+0x1a4>
 8008150:	23a0      	movs	r3, #160	; 0xa0
 8008152:	18fb      	adds	r3, r7, r3
 8008154:	681a      	ldr	r2, [r3, #0]
 8008156:	2380      	movs	r3, #128	; 0x80
 8008158:	04db      	lsls	r3, r3, #19
 800815a:	4013      	ands	r3, r2
 800815c:	d00c      	beq.n	8008178 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	2280      	movs	r2, #128	; 0x80
 8008164:	0112      	lsls	r2, r2, #4
 8008166:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	228c      	movs	r2, #140	; 0x8c
 800816c:	589b      	ldr	r3, [r3, r2]
 800816e:	2220      	movs	r2, #32
 8008170:	431a      	orrs	r2, r3
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	218c      	movs	r1, #140	; 0x8c
 8008176:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	228c      	movs	r2, #140	; 0x8c
 800817c:	589b      	ldr	r3, [r3, r2]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d100      	bne.n	8008184 <HAL_UART_IRQHandler+0x1b0>
 8008182:	e230      	b.n	80085e6 <HAL_UART_IRQHandler+0x612>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008184:	23a4      	movs	r3, #164	; 0xa4
 8008186:	18fb      	adds	r3, r7, r3
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	2220      	movs	r2, #32
 800818c:	4013      	ands	r3, r2
 800818e:	d015      	beq.n	80081bc <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008190:	23a0      	movs	r3, #160	; 0xa0
 8008192:	18fb      	adds	r3, r7, r3
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	2220      	movs	r2, #32
 8008198:	4013      	ands	r3, r2
 800819a:	d106      	bne.n	80081aa <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800819c:	239c      	movs	r3, #156	; 0x9c
 800819e:	18fb      	adds	r3, r7, r3
 80081a0:	681a      	ldr	r2, [r3, #0]
 80081a2:	2380      	movs	r3, #128	; 0x80
 80081a4:	055b      	lsls	r3, r3, #21
 80081a6:	4013      	ands	r3, r2
 80081a8:	d008      	beq.n	80081bc <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d004      	beq.n	80081bc <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081b6:	687a      	ldr	r2, [r7, #4]
 80081b8:	0010      	movs	r0, r2
 80081ba:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	228c      	movs	r2, #140	; 0x8c
 80081c0:	589b      	ldr	r3, [r3, r2]
 80081c2:	2194      	movs	r1, #148	; 0x94
 80081c4:	187a      	adds	r2, r7, r1
 80081c6:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	689b      	ldr	r3, [r3, #8]
 80081ce:	2240      	movs	r2, #64	; 0x40
 80081d0:	4013      	ands	r3, r2
 80081d2:	2b40      	cmp	r3, #64	; 0x40
 80081d4:	d004      	beq.n	80081e0 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80081d6:	187b      	adds	r3, r7, r1
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	2228      	movs	r2, #40	; 0x28
 80081dc:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80081de:	d047      	beq.n	8008270 <HAL_UART_IRQHandler+0x29c>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	0018      	movs	r0, r3
 80081e4:	f000 ffdc 	bl	80091a0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	689b      	ldr	r3, [r3, #8]
 80081ee:	2240      	movs	r2, #64	; 0x40
 80081f0:	4013      	ands	r3, r2
 80081f2:	2b40      	cmp	r3, #64	; 0x40
 80081f4:	d137      	bne.n	8008266 <HAL_UART_IRQHandler+0x292>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80081f6:	f3ef 8310 	mrs	r3, PRIMASK
 80081fa:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80081fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80081fe:	2090      	movs	r0, #144	; 0x90
 8008200:	183a      	adds	r2, r7, r0
 8008202:	6013      	str	r3, [r2, #0]
 8008204:	2301      	movs	r3, #1
 8008206:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008208:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800820a:	f383 8810 	msr	PRIMASK, r3
}
 800820e:	46c0      	nop			; (mov r8, r8)
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	689a      	ldr	r2, [r3, #8]
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	2140      	movs	r1, #64	; 0x40
 800821c:	438a      	bics	r2, r1
 800821e:	609a      	str	r2, [r3, #8]
 8008220:	183b      	adds	r3, r7, r0
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008226:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008228:	f383 8810 	msr	PRIMASK, r3
}
 800822c:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008232:	2b00      	cmp	r3, #0
 8008234:	d012      	beq.n	800825c <HAL_UART_IRQHandler+0x288>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800823a:	4a16      	ldr	r2, [pc, #88]	; (8008294 <HAL_UART_IRQHandler+0x2c0>)
 800823c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008242:	0018      	movs	r0, r3
 8008244:	f7fc ff42 	bl	80050cc <HAL_DMA_Abort_IT>
 8008248:	1e03      	subs	r3, r0, #0
 800824a:	d01a      	beq.n	8008282 <HAL_UART_IRQHandler+0x2ae>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008250:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008256:	0018      	movs	r0, r3
 8008258:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800825a:	e012      	b.n	8008282 <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	0018      	movs	r0, r3
 8008260:	f000 f9da 	bl	8008618 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008264:	e00d      	b.n	8008282 <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	0018      	movs	r0, r3
 800826a:	f000 f9d5 	bl	8008618 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800826e:	e008      	b.n	8008282 <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	0018      	movs	r0, r3
 8008274:	f000 f9d0 	bl	8008618 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	228c      	movs	r2, #140	; 0x8c
 800827c:	2100      	movs	r1, #0
 800827e:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8008280:	e1b1      	b.n	80085e6 <HAL_UART_IRQHandler+0x612>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008282:	46c0      	nop			; (mov r8, r8)
    return;
 8008284:	e1af      	b.n	80085e6 <HAL_UART_IRQHandler+0x612>
 8008286:	46c0      	nop			; (mov r8, r8)
 8008288:	0000080f 	.word	0x0000080f
 800828c:	10000001 	.word	0x10000001
 8008290:	04000120 	.word	0x04000120
 8008294:	0800926d 	.word	0x0800926d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800829c:	2b01      	cmp	r3, #1
 800829e:	d000      	beq.n	80082a2 <HAL_UART_IRQHandler+0x2ce>
 80082a0:	e135      	b.n	800850e <HAL_UART_IRQHandler+0x53a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80082a2:	23a4      	movs	r3, #164	; 0xa4
 80082a4:	18fb      	adds	r3, r7, r3
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	2210      	movs	r2, #16
 80082aa:	4013      	ands	r3, r2
 80082ac:	d100      	bne.n	80082b0 <HAL_UART_IRQHandler+0x2dc>
 80082ae:	e12e      	b.n	800850e <HAL_UART_IRQHandler+0x53a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80082b0:	23a0      	movs	r3, #160	; 0xa0
 80082b2:	18fb      	adds	r3, r7, r3
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	2210      	movs	r2, #16
 80082b8:	4013      	ands	r3, r2
 80082ba:	d100      	bne.n	80082be <HAL_UART_IRQHandler+0x2ea>
 80082bc:	e127      	b.n	800850e <HAL_UART_IRQHandler+0x53a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	2210      	movs	r2, #16
 80082c4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	689b      	ldr	r3, [r3, #8]
 80082cc:	2240      	movs	r2, #64	; 0x40
 80082ce:	4013      	ands	r3, r2
 80082d0:	2b40      	cmp	r3, #64	; 0x40
 80082d2:	d000      	beq.n	80082d6 <HAL_UART_IRQHandler+0x302>
 80082d4:	e09e      	b.n	8008414 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	685a      	ldr	r2, [r3, #4]
 80082de:	217e      	movs	r1, #126	; 0x7e
 80082e0:	187b      	adds	r3, r7, r1
 80082e2:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80082e4:	187b      	adds	r3, r7, r1
 80082e6:	881b      	ldrh	r3, [r3, #0]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d100      	bne.n	80082ee <HAL_UART_IRQHandler+0x31a>
 80082ec:	e17d      	b.n	80085ea <HAL_UART_IRQHandler+0x616>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	225c      	movs	r2, #92	; 0x5c
 80082f2:	5a9b      	ldrh	r3, [r3, r2]
 80082f4:	187a      	adds	r2, r7, r1
 80082f6:	8812      	ldrh	r2, [r2, #0]
 80082f8:	429a      	cmp	r2, r3
 80082fa:	d300      	bcc.n	80082fe <HAL_UART_IRQHandler+0x32a>
 80082fc:	e175      	b.n	80085ea <HAL_UART_IRQHandler+0x616>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	187a      	adds	r2, r7, r1
 8008302:	215e      	movs	r1, #94	; 0x5e
 8008304:	8812      	ldrh	r2, [r2, #0]
 8008306:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	2220      	movs	r2, #32
 8008312:	4013      	ands	r3, r2
 8008314:	d16f      	bne.n	80083f6 <HAL_UART_IRQHandler+0x422>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008316:	f3ef 8310 	mrs	r3, PRIMASK
 800831a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800831c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800831e:	67bb      	str	r3, [r7, #120]	; 0x78
 8008320:	2301      	movs	r3, #1
 8008322:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008324:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008326:	f383 8810 	msr	PRIMASK, r3
}
 800832a:	46c0      	nop			; (mov r8, r8)
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	681a      	ldr	r2, [r3, #0]
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	49b1      	ldr	r1, [pc, #708]	; (80085fc <HAL_UART_IRQHandler+0x628>)
 8008338:	400a      	ands	r2, r1
 800833a:	601a      	str	r2, [r3, #0]
 800833c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800833e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008342:	f383 8810 	msr	PRIMASK, r3
}
 8008346:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008348:	f3ef 8310 	mrs	r3, PRIMASK
 800834c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800834e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008350:	677b      	str	r3, [r7, #116]	; 0x74
 8008352:	2301      	movs	r3, #1
 8008354:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008356:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008358:	f383 8810 	msr	PRIMASK, r3
}
 800835c:	46c0      	nop			; (mov r8, r8)
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	689a      	ldr	r2, [r3, #8]
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	2101      	movs	r1, #1
 800836a:	438a      	bics	r2, r1
 800836c:	609a      	str	r2, [r3, #8]
 800836e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008370:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008372:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008374:	f383 8810 	msr	PRIMASK, r3
}
 8008378:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800837a:	f3ef 8310 	mrs	r3, PRIMASK
 800837e:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8008380:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008382:	673b      	str	r3, [r7, #112]	; 0x70
 8008384:	2301      	movs	r3, #1
 8008386:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008388:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800838a:	f383 8810 	msr	PRIMASK, r3
}
 800838e:	46c0      	nop			; (mov r8, r8)
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	689a      	ldr	r2, [r3, #8]
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	2140      	movs	r1, #64	; 0x40
 800839c:	438a      	bics	r2, r1
 800839e:	609a      	str	r2, [r3, #8]
 80083a0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80083a2:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80083a6:	f383 8810 	msr	PRIMASK, r3
}
 80083aa:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2288      	movs	r2, #136	; 0x88
 80083b0:	2120      	movs	r1, #32
 80083b2:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2200      	movs	r2, #0
 80083b8:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80083ba:	f3ef 8310 	mrs	r3, PRIMASK
 80083be:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80083c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083c2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80083c4:	2301      	movs	r3, #1
 80083c6:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80083ca:	f383 8810 	msr	PRIMASK, r3
}
 80083ce:	46c0      	nop			; (mov r8, r8)
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	681a      	ldr	r2, [r3, #0]
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	2110      	movs	r1, #16
 80083dc:	438a      	bics	r2, r1
 80083de:	601a      	str	r2, [r3, #0]
 80083e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083e2:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80083e6:	f383 8810 	msr	PRIMASK, r3
}
 80083ea:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80083f0:	0018      	movs	r0, r3
 80083f2:	f7fc fe09 	bl	8005008 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	225c      	movs	r2, #92	; 0x5c
 80083fa:	5a9a      	ldrh	r2, [r3, r2]
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	215e      	movs	r1, #94	; 0x5e
 8008400:	5a5b      	ldrh	r3, [r3, r1]
 8008402:	b29b      	uxth	r3, r3
 8008404:	1ad3      	subs	r3, r2, r3
 8008406:	b29a      	uxth	r2, r3
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	0011      	movs	r1, r2
 800840c:	0018      	movs	r0, r3
 800840e:	f000 f90b 	bl	8008628 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008412:	e0ea      	b.n	80085ea <HAL_UART_IRQHandler+0x616>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	225c      	movs	r2, #92	; 0x5c
 8008418:	5a99      	ldrh	r1, [r3, r2]
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	225e      	movs	r2, #94	; 0x5e
 800841e:	5a9b      	ldrh	r3, [r3, r2]
 8008420:	b29a      	uxth	r2, r3
 8008422:	208e      	movs	r0, #142	; 0x8e
 8008424:	183b      	adds	r3, r7, r0
 8008426:	1a8a      	subs	r2, r1, r2
 8008428:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	225e      	movs	r2, #94	; 0x5e
 800842e:	5a9b      	ldrh	r3, [r3, r2]
 8008430:	b29b      	uxth	r3, r3
 8008432:	2b00      	cmp	r3, #0
 8008434:	d100      	bne.n	8008438 <HAL_UART_IRQHandler+0x464>
 8008436:	e0da      	b.n	80085ee <HAL_UART_IRQHandler+0x61a>
          && (nb_rx_data > 0U))
 8008438:	183b      	adds	r3, r7, r0
 800843a:	881b      	ldrh	r3, [r3, #0]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d100      	bne.n	8008442 <HAL_UART_IRQHandler+0x46e>
 8008440:	e0d5      	b.n	80085ee <HAL_UART_IRQHandler+0x61a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008442:	f3ef 8310 	mrs	r3, PRIMASK
 8008446:	60fb      	str	r3, [r7, #12]
  return(result);
 8008448:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800844a:	2488      	movs	r4, #136	; 0x88
 800844c:	193a      	adds	r2, r7, r4
 800844e:	6013      	str	r3, [r2, #0]
 8008450:	2301      	movs	r3, #1
 8008452:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008454:	693b      	ldr	r3, [r7, #16]
 8008456:	f383 8810 	msr	PRIMASK, r3
}
 800845a:	46c0      	nop			; (mov r8, r8)
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	681a      	ldr	r2, [r3, #0]
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	4966      	ldr	r1, [pc, #408]	; (8008600 <HAL_UART_IRQHandler+0x62c>)
 8008468:	400a      	ands	r2, r1
 800846a:	601a      	str	r2, [r3, #0]
 800846c:	193b      	adds	r3, r7, r4
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008472:	697b      	ldr	r3, [r7, #20]
 8008474:	f383 8810 	msr	PRIMASK, r3
}
 8008478:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800847a:	f3ef 8310 	mrs	r3, PRIMASK
 800847e:	61bb      	str	r3, [r7, #24]
  return(result);
 8008480:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008482:	2484      	movs	r4, #132	; 0x84
 8008484:	193a      	adds	r2, r7, r4
 8008486:	6013      	str	r3, [r2, #0]
 8008488:	2301      	movs	r3, #1
 800848a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800848c:	69fb      	ldr	r3, [r7, #28]
 800848e:	f383 8810 	msr	PRIMASK, r3
}
 8008492:	46c0      	nop			; (mov r8, r8)
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	689a      	ldr	r2, [r3, #8]
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	4959      	ldr	r1, [pc, #356]	; (8008604 <HAL_UART_IRQHandler+0x630>)
 80084a0:	400a      	ands	r2, r1
 80084a2:	609a      	str	r2, [r3, #8]
 80084a4:	193b      	adds	r3, r7, r4
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80084aa:	6a3b      	ldr	r3, [r7, #32]
 80084ac:	f383 8810 	msr	PRIMASK, r3
}
 80084b0:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2288      	movs	r2, #136	; 0x88
 80084b6:	2120      	movs	r1, #32
 80084b8:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2200      	movs	r2, #0
 80084be:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2200      	movs	r2, #0
 80084c4:	671a      	str	r2, [r3, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80084c6:	f3ef 8310 	mrs	r3, PRIMASK
 80084ca:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80084cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084ce:	2480      	movs	r4, #128	; 0x80
 80084d0:	193a      	adds	r2, r7, r4
 80084d2:	6013      	str	r3, [r2, #0]
 80084d4:	2301      	movs	r3, #1
 80084d6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80084d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084da:	f383 8810 	msr	PRIMASK, r3
}
 80084de:	46c0      	nop			; (mov r8, r8)
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	681a      	ldr	r2, [r3, #0]
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	2110      	movs	r1, #16
 80084ec:	438a      	bics	r2, r1
 80084ee:	601a      	str	r2, [r3, #0]
 80084f0:	193b      	adds	r3, r7, r4
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80084f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084f8:	f383 8810 	msr	PRIMASK, r3
}
 80084fc:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80084fe:	183b      	adds	r3, r7, r0
 8008500:	881a      	ldrh	r2, [r3, #0]
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	0011      	movs	r1, r2
 8008506:	0018      	movs	r0, r3
 8008508:	f000 f88e 	bl	8008628 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800850c:	e06f      	b.n	80085ee <HAL_UART_IRQHandler+0x61a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800850e:	23a4      	movs	r3, #164	; 0xa4
 8008510:	18fb      	adds	r3, r7, r3
 8008512:	681a      	ldr	r2, [r3, #0]
 8008514:	2380      	movs	r3, #128	; 0x80
 8008516:	035b      	lsls	r3, r3, #13
 8008518:	4013      	ands	r3, r2
 800851a:	d010      	beq.n	800853e <HAL_UART_IRQHandler+0x56a>
 800851c:	239c      	movs	r3, #156	; 0x9c
 800851e:	18fb      	adds	r3, r7, r3
 8008520:	681a      	ldr	r2, [r3, #0]
 8008522:	2380      	movs	r3, #128	; 0x80
 8008524:	03db      	lsls	r3, r3, #15
 8008526:	4013      	ands	r3, r2
 8008528:	d009      	beq.n	800853e <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	2280      	movs	r2, #128	; 0x80
 8008530:	0352      	lsls	r2, r2, #13
 8008532:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	0018      	movs	r0, r3
 8008538:	f001 fb2c 	bl	8009b94 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800853c:	e05a      	b.n	80085f4 <HAL_UART_IRQHandler+0x620>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800853e:	23a4      	movs	r3, #164	; 0xa4
 8008540:	18fb      	adds	r3, r7, r3
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	2280      	movs	r2, #128	; 0x80
 8008546:	4013      	ands	r3, r2
 8008548:	d016      	beq.n	8008578 <HAL_UART_IRQHandler+0x5a4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800854a:	23a0      	movs	r3, #160	; 0xa0
 800854c:	18fb      	adds	r3, r7, r3
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	2280      	movs	r2, #128	; 0x80
 8008552:	4013      	ands	r3, r2
 8008554:	d106      	bne.n	8008564 <HAL_UART_IRQHandler+0x590>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008556:	239c      	movs	r3, #156	; 0x9c
 8008558:	18fb      	adds	r3, r7, r3
 800855a:	681a      	ldr	r2, [r3, #0]
 800855c:	2380      	movs	r3, #128	; 0x80
 800855e:	041b      	lsls	r3, r3, #16
 8008560:	4013      	ands	r3, r2
 8008562:	d009      	beq.n	8008578 <HAL_UART_IRQHandler+0x5a4>
  {
    if (huart->TxISR != NULL)
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008568:	2b00      	cmp	r3, #0
 800856a:	d042      	beq.n	80085f2 <HAL_UART_IRQHandler+0x61e>
    {
      huart->TxISR(huart);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008570:	687a      	ldr	r2, [r7, #4]
 8008572:	0010      	movs	r0, r2
 8008574:	4798      	blx	r3
    }
    return;
 8008576:	e03c      	b.n	80085f2 <HAL_UART_IRQHandler+0x61e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008578:	23a4      	movs	r3, #164	; 0xa4
 800857a:	18fb      	adds	r3, r7, r3
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	2240      	movs	r2, #64	; 0x40
 8008580:	4013      	ands	r3, r2
 8008582:	d00a      	beq.n	800859a <HAL_UART_IRQHandler+0x5c6>
 8008584:	23a0      	movs	r3, #160	; 0xa0
 8008586:	18fb      	adds	r3, r7, r3
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	2240      	movs	r2, #64	; 0x40
 800858c:	4013      	ands	r3, r2
 800858e:	d004      	beq.n	800859a <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	0018      	movs	r0, r3
 8008594:	f000 fe81 	bl	800929a <UART_EndTransmit_IT>
    return;
 8008598:	e02c      	b.n	80085f4 <HAL_UART_IRQHandler+0x620>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800859a:	23a4      	movs	r3, #164	; 0xa4
 800859c:	18fb      	adds	r3, r7, r3
 800859e:	681a      	ldr	r2, [r3, #0]
 80085a0:	2380      	movs	r3, #128	; 0x80
 80085a2:	041b      	lsls	r3, r3, #16
 80085a4:	4013      	ands	r3, r2
 80085a6:	d00b      	beq.n	80085c0 <HAL_UART_IRQHandler+0x5ec>
 80085a8:	23a0      	movs	r3, #160	; 0xa0
 80085aa:	18fb      	adds	r3, r7, r3
 80085ac:	681a      	ldr	r2, [r3, #0]
 80085ae:	2380      	movs	r3, #128	; 0x80
 80085b0:	05db      	lsls	r3, r3, #23
 80085b2:	4013      	ands	r3, r2
 80085b4:	d004      	beq.n	80085c0 <HAL_UART_IRQHandler+0x5ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	0018      	movs	r0, r3
 80085ba:	f001 fafb 	bl	8009bb4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80085be:	e019      	b.n	80085f4 <HAL_UART_IRQHandler+0x620>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80085c0:	23a4      	movs	r3, #164	; 0xa4
 80085c2:	18fb      	adds	r3, r7, r3
 80085c4:	681a      	ldr	r2, [r3, #0]
 80085c6:	2380      	movs	r3, #128	; 0x80
 80085c8:	045b      	lsls	r3, r3, #17
 80085ca:	4013      	ands	r3, r2
 80085cc:	d012      	beq.n	80085f4 <HAL_UART_IRQHandler+0x620>
 80085ce:	23a0      	movs	r3, #160	; 0xa0
 80085d0:	18fb      	adds	r3, r7, r3
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	da0d      	bge.n	80085f4 <HAL_UART_IRQHandler+0x620>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	0018      	movs	r0, r3
 80085dc:	f001 fae2 	bl	8009ba4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80085e0:	e008      	b.n	80085f4 <HAL_UART_IRQHandler+0x620>
      return;
 80085e2:	46c0      	nop			; (mov r8, r8)
 80085e4:	e006      	b.n	80085f4 <HAL_UART_IRQHandler+0x620>
    return;
 80085e6:	46c0      	nop			; (mov r8, r8)
 80085e8:	e004      	b.n	80085f4 <HAL_UART_IRQHandler+0x620>
      return;
 80085ea:	46c0      	nop			; (mov r8, r8)
 80085ec:	e002      	b.n	80085f4 <HAL_UART_IRQHandler+0x620>
      return;
 80085ee:	46c0      	nop			; (mov r8, r8)
 80085f0:	e000      	b.n	80085f4 <HAL_UART_IRQHandler+0x620>
    return;
 80085f2:	46c0      	nop			; (mov r8, r8)
  }
}
 80085f4:	46bd      	mov	sp, r7
 80085f6:	b02a      	add	sp, #168	; 0xa8
 80085f8:	bdb0      	pop	{r4, r5, r7, pc}
 80085fa:	46c0      	nop			; (mov r8, r8)
 80085fc:	fffffeff 	.word	0xfffffeff
 8008600:	fffffedf 	.word	0xfffffedf
 8008604:	effffffe 	.word	0xeffffffe

08008608 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b082      	sub	sp, #8
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008610:	46c0      	nop			; (mov r8, r8)
 8008612:	46bd      	mov	sp, r7
 8008614:	b002      	add	sp, #8
 8008616:	bd80      	pop	{r7, pc}

08008618 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b082      	sub	sp, #8
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008620:	46c0      	nop			; (mov r8, r8)
 8008622:	46bd      	mov	sp, r7
 8008624:	b002      	add	sp, #8
 8008626:	bd80      	pop	{r7, pc}

08008628 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b082      	sub	sp, #8
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
 8008630:	000a      	movs	r2, r1
 8008632:	1cbb      	adds	r3, r7, #2
 8008634:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008636:	46c0      	nop			; (mov r8, r8)
 8008638:	46bd      	mov	sp, r7
 800863a:	b002      	add	sp, #8
 800863c:	bd80      	pop	{r7, pc}
	...

08008640 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008640:	b5b0      	push	{r4, r5, r7, lr}
 8008642:	b090      	sub	sp, #64	; 0x40
 8008644:	af00      	add	r7, sp, #0
 8008646:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008648:	231a      	movs	r3, #26
 800864a:	2220      	movs	r2, #32
 800864c:	189b      	adds	r3, r3, r2
 800864e:	19db      	adds	r3, r3, r7
 8008650:	2200      	movs	r2, #0
 8008652:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008656:	689a      	ldr	r2, [r3, #8]
 8008658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800865a:	691b      	ldr	r3, [r3, #16]
 800865c:	431a      	orrs	r2, r3
 800865e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008660:	695b      	ldr	r3, [r3, #20]
 8008662:	431a      	orrs	r2, r3
 8008664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008666:	69db      	ldr	r3, [r3, #28]
 8008668:	4313      	orrs	r3, r2
 800866a:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800866c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	4aaf      	ldr	r2, [pc, #700]	; (8008930 <UART_SetConfig+0x2f0>)
 8008674:	4013      	ands	r3, r2
 8008676:	0019      	movs	r1, r3
 8008678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800867a:	681a      	ldr	r2, [r3, #0]
 800867c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800867e:	430b      	orrs	r3, r1
 8008680:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	685b      	ldr	r3, [r3, #4]
 8008688:	4aaa      	ldr	r2, [pc, #680]	; (8008934 <UART_SetConfig+0x2f4>)
 800868a:	4013      	ands	r3, r2
 800868c:	0018      	movs	r0, r3
 800868e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008690:	68d9      	ldr	r1, [r3, #12]
 8008692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008694:	681a      	ldr	r2, [r3, #0]
 8008696:	0003      	movs	r3, r0
 8008698:	430b      	orrs	r3, r1
 800869a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800869c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800869e:	699b      	ldr	r3, [r3, #24]
 80086a0:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80086a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	4aa4      	ldr	r2, [pc, #656]	; (8008938 <UART_SetConfig+0x2f8>)
 80086a8:	4293      	cmp	r3, r2
 80086aa:	d004      	beq.n	80086b6 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80086ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ae:	6a1b      	ldr	r3, [r3, #32]
 80086b0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80086b2:	4313      	orrs	r3, r2
 80086b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80086b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	689b      	ldr	r3, [r3, #8]
 80086bc:	4a9f      	ldr	r2, [pc, #636]	; (800893c <UART_SetConfig+0x2fc>)
 80086be:	4013      	ands	r3, r2
 80086c0:	0019      	movs	r1, r3
 80086c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086c4:	681a      	ldr	r2, [r3, #0]
 80086c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086c8:	430b      	orrs	r3, r1
 80086ca:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80086cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086d2:	220f      	movs	r2, #15
 80086d4:	4393      	bics	r3, r2
 80086d6:	0018      	movs	r0, r3
 80086d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086da:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80086dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086de:	681a      	ldr	r2, [r3, #0]
 80086e0:	0003      	movs	r3, r0
 80086e2:	430b      	orrs	r3, r1
 80086e4:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80086e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	4a95      	ldr	r2, [pc, #596]	; (8008940 <UART_SetConfig+0x300>)
 80086ec:	4293      	cmp	r3, r2
 80086ee:	d131      	bne.n	8008754 <UART_SetConfig+0x114>
 80086f0:	4b94      	ldr	r3, [pc, #592]	; (8008944 <UART_SetConfig+0x304>)
 80086f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086f4:	2203      	movs	r2, #3
 80086f6:	4013      	ands	r3, r2
 80086f8:	2b03      	cmp	r3, #3
 80086fa:	d01d      	beq.n	8008738 <UART_SetConfig+0xf8>
 80086fc:	d823      	bhi.n	8008746 <UART_SetConfig+0x106>
 80086fe:	2b02      	cmp	r3, #2
 8008700:	d00c      	beq.n	800871c <UART_SetConfig+0xdc>
 8008702:	d820      	bhi.n	8008746 <UART_SetConfig+0x106>
 8008704:	2b00      	cmp	r3, #0
 8008706:	d002      	beq.n	800870e <UART_SetConfig+0xce>
 8008708:	2b01      	cmp	r3, #1
 800870a:	d00e      	beq.n	800872a <UART_SetConfig+0xea>
 800870c:	e01b      	b.n	8008746 <UART_SetConfig+0x106>
 800870e:	231b      	movs	r3, #27
 8008710:	2220      	movs	r2, #32
 8008712:	189b      	adds	r3, r3, r2
 8008714:	19db      	adds	r3, r3, r7
 8008716:	2200      	movs	r2, #0
 8008718:	701a      	strb	r2, [r3, #0]
 800871a:	e0b4      	b.n	8008886 <UART_SetConfig+0x246>
 800871c:	231b      	movs	r3, #27
 800871e:	2220      	movs	r2, #32
 8008720:	189b      	adds	r3, r3, r2
 8008722:	19db      	adds	r3, r3, r7
 8008724:	2202      	movs	r2, #2
 8008726:	701a      	strb	r2, [r3, #0]
 8008728:	e0ad      	b.n	8008886 <UART_SetConfig+0x246>
 800872a:	231b      	movs	r3, #27
 800872c:	2220      	movs	r2, #32
 800872e:	189b      	adds	r3, r3, r2
 8008730:	19db      	adds	r3, r3, r7
 8008732:	2204      	movs	r2, #4
 8008734:	701a      	strb	r2, [r3, #0]
 8008736:	e0a6      	b.n	8008886 <UART_SetConfig+0x246>
 8008738:	231b      	movs	r3, #27
 800873a:	2220      	movs	r2, #32
 800873c:	189b      	adds	r3, r3, r2
 800873e:	19db      	adds	r3, r3, r7
 8008740:	2208      	movs	r2, #8
 8008742:	701a      	strb	r2, [r3, #0]
 8008744:	e09f      	b.n	8008886 <UART_SetConfig+0x246>
 8008746:	231b      	movs	r3, #27
 8008748:	2220      	movs	r2, #32
 800874a:	189b      	adds	r3, r3, r2
 800874c:	19db      	adds	r3, r3, r7
 800874e:	2210      	movs	r2, #16
 8008750:	701a      	strb	r2, [r3, #0]
 8008752:	e098      	b.n	8008886 <UART_SetConfig+0x246>
 8008754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	4a7b      	ldr	r2, [pc, #492]	; (8008948 <UART_SetConfig+0x308>)
 800875a:	4293      	cmp	r3, r2
 800875c:	d131      	bne.n	80087c2 <UART_SetConfig+0x182>
 800875e:	4b79      	ldr	r3, [pc, #484]	; (8008944 <UART_SetConfig+0x304>)
 8008760:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008762:	220c      	movs	r2, #12
 8008764:	4013      	ands	r3, r2
 8008766:	2b0c      	cmp	r3, #12
 8008768:	d01d      	beq.n	80087a6 <UART_SetConfig+0x166>
 800876a:	d823      	bhi.n	80087b4 <UART_SetConfig+0x174>
 800876c:	2b08      	cmp	r3, #8
 800876e:	d00c      	beq.n	800878a <UART_SetConfig+0x14a>
 8008770:	d820      	bhi.n	80087b4 <UART_SetConfig+0x174>
 8008772:	2b00      	cmp	r3, #0
 8008774:	d002      	beq.n	800877c <UART_SetConfig+0x13c>
 8008776:	2b04      	cmp	r3, #4
 8008778:	d00e      	beq.n	8008798 <UART_SetConfig+0x158>
 800877a:	e01b      	b.n	80087b4 <UART_SetConfig+0x174>
 800877c:	231b      	movs	r3, #27
 800877e:	2220      	movs	r2, #32
 8008780:	189b      	adds	r3, r3, r2
 8008782:	19db      	adds	r3, r3, r7
 8008784:	2200      	movs	r2, #0
 8008786:	701a      	strb	r2, [r3, #0]
 8008788:	e07d      	b.n	8008886 <UART_SetConfig+0x246>
 800878a:	231b      	movs	r3, #27
 800878c:	2220      	movs	r2, #32
 800878e:	189b      	adds	r3, r3, r2
 8008790:	19db      	adds	r3, r3, r7
 8008792:	2202      	movs	r2, #2
 8008794:	701a      	strb	r2, [r3, #0]
 8008796:	e076      	b.n	8008886 <UART_SetConfig+0x246>
 8008798:	231b      	movs	r3, #27
 800879a:	2220      	movs	r2, #32
 800879c:	189b      	adds	r3, r3, r2
 800879e:	19db      	adds	r3, r3, r7
 80087a0:	2204      	movs	r2, #4
 80087a2:	701a      	strb	r2, [r3, #0]
 80087a4:	e06f      	b.n	8008886 <UART_SetConfig+0x246>
 80087a6:	231b      	movs	r3, #27
 80087a8:	2220      	movs	r2, #32
 80087aa:	189b      	adds	r3, r3, r2
 80087ac:	19db      	adds	r3, r3, r7
 80087ae:	2208      	movs	r2, #8
 80087b0:	701a      	strb	r2, [r3, #0]
 80087b2:	e068      	b.n	8008886 <UART_SetConfig+0x246>
 80087b4:	231b      	movs	r3, #27
 80087b6:	2220      	movs	r2, #32
 80087b8:	189b      	adds	r3, r3, r2
 80087ba:	19db      	adds	r3, r3, r7
 80087bc:	2210      	movs	r2, #16
 80087be:	701a      	strb	r2, [r3, #0]
 80087c0:	e061      	b.n	8008886 <UART_SetConfig+0x246>
 80087c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	4a61      	ldr	r2, [pc, #388]	; (800894c <UART_SetConfig+0x30c>)
 80087c8:	4293      	cmp	r3, r2
 80087ca:	d106      	bne.n	80087da <UART_SetConfig+0x19a>
 80087cc:	231b      	movs	r3, #27
 80087ce:	2220      	movs	r2, #32
 80087d0:	189b      	adds	r3, r3, r2
 80087d2:	19db      	adds	r3, r3, r7
 80087d4:	2200      	movs	r2, #0
 80087d6:	701a      	strb	r2, [r3, #0]
 80087d8:	e055      	b.n	8008886 <UART_SetConfig+0x246>
 80087da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	4a5c      	ldr	r2, [pc, #368]	; (8008950 <UART_SetConfig+0x310>)
 80087e0:	4293      	cmp	r3, r2
 80087e2:	d106      	bne.n	80087f2 <UART_SetConfig+0x1b2>
 80087e4:	231b      	movs	r3, #27
 80087e6:	2220      	movs	r2, #32
 80087e8:	189b      	adds	r3, r3, r2
 80087ea:	19db      	adds	r3, r3, r7
 80087ec:	2200      	movs	r2, #0
 80087ee:	701a      	strb	r2, [r3, #0]
 80087f0:	e049      	b.n	8008886 <UART_SetConfig+0x246>
 80087f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	4a50      	ldr	r2, [pc, #320]	; (8008938 <UART_SetConfig+0x2f8>)
 80087f8:	4293      	cmp	r3, r2
 80087fa:	d13e      	bne.n	800887a <UART_SetConfig+0x23a>
 80087fc:	4b51      	ldr	r3, [pc, #324]	; (8008944 <UART_SetConfig+0x304>)
 80087fe:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008800:	23c0      	movs	r3, #192	; 0xc0
 8008802:	011b      	lsls	r3, r3, #4
 8008804:	4013      	ands	r3, r2
 8008806:	22c0      	movs	r2, #192	; 0xc0
 8008808:	0112      	lsls	r2, r2, #4
 800880a:	4293      	cmp	r3, r2
 800880c:	d027      	beq.n	800885e <UART_SetConfig+0x21e>
 800880e:	22c0      	movs	r2, #192	; 0xc0
 8008810:	0112      	lsls	r2, r2, #4
 8008812:	4293      	cmp	r3, r2
 8008814:	d82a      	bhi.n	800886c <UART_SetConfig+0x22c>
 8008816:	2280      	movs	r2, #128	; 0x80
 8008818:	0112      	lsls	r2, r2, #4
 800881a:	4293      	cmp	r3, r2
 800881c:	d011      	beq.n	8008842 <UART_SetConfig+0x202>
 800881e:	2280      	movs	r2, #128	; 0x80
 8008820:	0112      	lsls	r2, r2, #4
 8008822:	4293      	cmp	r3, r2
 8008824:	d822      	bhi.n	800886c <UART_SetConfig+0x22c>
 8008826:	2b00      	cmp	r3, #0
 8008828:	d004      	beq.n	8008834 <UART_SetConfig+0x1f4>
 800882a:	2280      	movs	r2, #128	; 0x80
 800882c:	00d2      	lsls	r2, r2, #3
 800882e:	4293      	cmp	r3, r2
 8008830:	d00e      	beq.n	8008850 <UART_SetConfig+0x210>
 8008832:	e01b      	b.n	800886c <UART_SetConfig+0x22c>
 8008834:	231b      	movs	r3, #27
 8008836:	2220      	movs	r2, #32
 8008838:	189b      	adds	r3, r3, r2
 800883a:	19db      	adds	r3, r3, r7
 800883c:	2200      	movs	r2, #0
 800883e:	701a      	strb	r2, [r3, #0]
 8008840:	e021      	b.n	8008886 <UART_SetConfig+0x246>
 8008842:	231b      	movs	r3, #27
 8008844:	2220      	movs	r2, #32
 8008846:	189b      	adds	r3, r3, r2
 8008848:	19db      	adds	r3, r3, r7
 800884a:	2202      	movs	r2, #2
 800884c:	701a      	strb	r2, [r3, #0]
 800884e:	e01a      	b.n	8008886 <UART_SetConfig+0x246>
 8008850:	231b      	movs	r3, #27
 8008852:	2220      	movs	r2, #32
 8008854:	189b      	adds	r3, r3, r2
 8008856:	19db      	adds	r3, r3, r7
 8008858:	2204      	movs	r2, #4
 800885a:	701a      	strb	r2, [r3, #0]
 800885c:	e013      	b.n	8008886 <UART_SetConfig+0x246>
 800885e:	231b      	movs	r3, #27
 8008860:	2220      	movs	r2, #32
 8008862:	189b      	adds	r3, r3, r2
 8008864:	19db      	adds	r3, r3, r7
 8008866:	2208      	movs	r2, #8
 8008868:	701a      	strb	r2, [r3, #0]
 800886a:	e00c      	b.n	8008886 <UART_SetConfig+0x246>
 800886c:	231b      	movs	r3, #27
 800886e:	2220      	movs	r2, #32
 8008870:	189b      	adds	r3, r3, r2
 8008872:	19db      	adds	r3, r3, r7
 8008874:	2210      	movs	r2, #16
 8008876:	701a      	strb	r2, [r3, #0]
 8008878:	e005      	b.n	8008886 <UART_SetConfig+0x246>
 800887a:	231b      	movs	r3, #27
 800887c:	2220      	movs	r2, #32
 800887e:	189b      	adds	r3, r3, r2
 8008880:	19db      	adds	r3, r3, r7
 8008882:	2210      	movs	r2, #16
 8008884:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	4a2b      	ldr	r2, [pc, #172]	; (8008938 <UART_SetConfig+0x2f8>)
 800888c:	4293      	cmp	r3, r2
 800888e:	d000      	beq.n	8008892 <UART_SetConfig+0x252>
 8008890:	e0a9      	b.n	80089e6 <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008892:	231b      	movs	r3, #27
 8008894:	2220      	movs	r2, #32
 8008896:	189b      	adds	r3, r3, r2
 8008898:	19db      	adds	r3, r3, r7
 800889a:	781b      	ldrb	r3, [r3, #0]
 800889c:	2b08      	cmp	r3, #8
 800889e:	d015      	beq.n	80088cc <UART_SetConfig+0x28c>
 80088a0:	dc18      	bgt.n	80088d4 <UART_SetConfig+0x294>
 80088a2:	2b04      	cmp	r3, #4
 80088a4:	d00d      	beq.n	80088c2 <UART_SetConfig+0x282>
 80088a6:	dc15      	bgt.n	80088d4 <UART_SetConfig+0x294>
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d002      	beq.n	80088b2 <UART_SetConfig+0x272>
 80088ac:	2b02      	cmp	r3, #2
 80088ae:	d005      	beq.n	80088bc <UART_SetConfig+0x27c>
 80088b0:	e010      	b.n	80088d4 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80088b2:	f7fe fbd7 	bl	8007064 <HAL_RCC_GetPCLK1Freq>
 80088b6:	0003      	movs	r3, r0
 80088b8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80088ba:	e014      	b.n	80088e6 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80088bc:	4b25      	ldr	r3, [pc, #148]	; (8008954 <UART_SetConfig+0x314>)
 80088be:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80088c0:	e011      	b.n	80088e6 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80088c2:	f7fe fb43 	bl	8006f4c <HAL_RCC_GetSysClockFreq>
 80088c6:	0003      	movs	r3, r0
 80088c8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80088ca:	e00c      	b.n	80088e6 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80088cc:	2380      	movs	r3, #128	; 0x80
 80088ce:	021b      	lsls	r3, r3, #8
 80088d0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80088d2:	e008      	b.n	80088e6 <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 80088d4:	2300      	movs	r3, #0
 80088d6:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80088d8:	231a      	movs	r3, #26
 80088da:	2220      	movs	r2, #32
 80088dc:	189b      	adds	r3, r3, r2
 80088de:	19db      	adds	r3, r3, r7
 80088e0:	2201      	movs	r2, #1
 80088e2:	701a      	strb	r2, [r3, #0]
        break;
 80088e4:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80088e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d100      	bne.n	80088ee <UART_SetConfig+0x2ae>
 80088ec:	e14b      	b.n	8008b86 <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80088ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80088f2:	4b19      	ldr	r3, [pc, #100]	; (8008958 <UART_SetConfig+0x318>)
 80088f4:	0052      	lsls	r2, r2, #1
 80088f6:	5ad3      	ldrh	r3, [r2, r3]
 80088f8:	0019      	movs	r1, r3
 80088fa:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80088fc:	f7f7 fc1e 	bl	800013c <__udivsi3>
 8008900:	0003      	movs	r3, r0
 8008902:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008906:	685a      	ldr	r2, [r3, #4]
 8008908:	0013      	movs	r3, r2
 800890a:	005b      	lsls	r3, r3, #1
 800890c:	189b      	adds	r3, r3, r2
 800890e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008910:	429a      	cmp	r2, r3
 8008912:	d305      	bcc.n	8008920 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008916:	685b      	ldr	r3, [r3, #4]
 8008918:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800891a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800891c:	429a      	cmp	r2, r3
 800891e:	d91d      	bls.n	800895c <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8008920:	231a      	movs	r3, #26
 8008922:	2220      	movs	r2, #32
 8008924:	189b      	adds	r3, r3, r2
 8008926:	19db      	adds	r3, r3, r7
 8008928:	2201      	movs	r2, #1
 800892a:	701a      	strb	r2, [r3, #0]
 800892c:	e12b      	b.n	8008b86 <UART_SetConfig+0x546>
 800892e:	46c0      	nop			; (mov r8, r8)
 8008930:	cfff69f3 	.word	0xcfff69f3
 8008934:	ffffcfff 	.word	0xffffcfff
 8008938:	40008000 	.word	0x40008000
 800893c:	11fff4ff 	.word	0x11fff4ff
 8008940:	40013800 	.word	0x40013800
 8008944:	40021000 	.word	0x40021000
 8008948:	40004400 	.word	0x40004400
 800894c:	40004800 	.word	0x40004800
 8008950:	40004c00 	.word	0x40004c00
 8008954:	00f42400 	.word	0x00f42400
 8008958:	0800cfb0 	.word	0x0800cfb0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800895c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800895e:	61bb      	str	r3, [r7, #24]
 8008960:	2300      	movs	r3, #0
 8008962:	61fb      	str	r3, [r7, #28]
 8008964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008966:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008968:	4b92      	ldr	r3, [pc, #584]	; (8008bb4 <UART_SetConfig+0x574>)
 800896a:	0052      	lsls	r2, r2, #1
 800896c:	5ad3      	ldrh	r3, [r2, r3]
 800896e:	613b      	str	r3, [r7, #16]
 8008970:	2300      	movs	r3, #0
 8008972:	617b      	str	r3, [r7, #20]
 8008974:	693a      	ldr	r2, [r7, #16]
 8008976:	697b      	ldr	r3, [r7, #20]
 8008978:	69b8      	ldr	r0, [r7, #24]
 800897a:	69f9      	ldr	r1, [r7, #28]
 800897c:	f7f7 fd92 	bl	80004a4 <__aeabi_uldivmod>
 8008980:	0002      	movs	r2, r0
 8008982:	000b      	movs	r3, r1
 8008984:	0e11      	lsrs	r1, r2, #24
 8008986:	021d      	lsls	r5, r3, #8
 8008988:	430d      	orrs	r5, r1
 800898a:	0214      	lsls	r4, r2, #8
 800898c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800898e:	685b      	ldr	r3, [r3, #4]
 8008990:	085b      	lsrs	r3, r3, #1
 8008992:	60bb      	str	r3, [r7, #8]
 8008994:	2300      	movs	r3, #0
 8008996:	60fb      	str	r3, [r7, #12]
 8008998:	68b8      	ldr	r0, [r7, #8]
 800899a:	68f9      	ldr	r1, [r7, #12]
 800899c:	1900      	adds	r0, r0, r4
 800899e:	4169      	adcs	r1, r5
 80089a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089a2:	685b      	ldr	r3, [r3, #4]
 80089a4:	603b      	str	r3, [r7, #0]
 80089a6:	2300      	movs	r3, #0
 80089a8:	607b      	str	r3, [r7, #4]
 80089aa:	683a      	ldr	r2, [r7, #0]
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	f7f7 fd79 	bl	80004a4 <__aeabi_uldivmod>
 80089b2:	0002      	movs	r2, r0
 80089b4:	000b      	movs	r3, r1
 80089b6:	0013      	movs	r3, r2
 80089b8:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80089ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80089bc:	23c0      	movs	r3, #192	; 0xc0
 80089be:	009b      	lsls	r3, r3, #2
 80089c0:	429a      	cmp	r2, r3
 80089c2:	d309      	bcc.n	80089d8 <UART_SetConfig+0x398>
 80089c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80089c6:	2380      	movs	r3, #128	; 0x80
 80089c8:	035b      	lsls	r3, r3, #13
 80089ca:	429a      	cmp	r2, r3
 80089cc:	d204      	bcs.n	80089d8 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 80089ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80089d4:	60da      	str	r2, [r3, #12]
 80089d6:	e0d6      	b.n	8008b86 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 80089d8:	231a      	movs	r3, #26
 80089da:	2220      	movs	r2, #32
 80089dc:	189b      	adds	r3, r3, r2
 80089de:	19db      	adds	r3, r3, r7
 80089e0:	2201      	movs	r2, #1
 80089e2:	701a      	strb	r2, [r3, #0]
 80089e4:	e0cf      	b.n	8008b86 <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80089e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089e8:	69da      	ldr	r2, [r3, #28]
 80089ea:	2380      	movs	r3, #128	; 0x80
 80089ec:	021b      	lsls	r3, r3, #8
 80089ee:	429a      	cmp	r2, r3
 80089f0:	d000      	beq.n	80089f4 <UART_SetConfig+0x3b4>
 80089f2:	e070      	b.n	8008ad6 <UART_SetConfig+0x496>
  {
    switch (clocksource)
 80089f4:	231b      	movs	r3, #27
 80089f6:	2220      	movs	r2, #32
 80089f8:	189b      	adds	r3, r3, r2
 80089fa:	19db      	adds	r3, r3, r7
 80089fc:	781b      	ldrb	r3, [r3, #0]
 80089fe:	2b08      	cmp	r3, #8
 8008a00:	d015      	beq.n	8008a2e <UART_SetConfig+0x3ee>
 8008a02:	dc18      	bgt.n	8008a36 <UART_SetConfig+0x3f6>
 8008a04:	2b04      	cmp	r3, #4
 8008a06:	d00d      	beq.n	8008a24 <UART_SetConfig+0x3e4>
 8008a08:	dc15      	bgt.n	8008a36 <UART_SetConfig+0x3f6>
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d002      	beq.n	8008a14 <UART_SetConfig+0x3d4>
 8008a0e:	2b02      	cmp	r3, #2
 8008a10:	d005      	beq.n	8008a1e <UART_SetConfig+0x3de>
 8008a12:	e010      	b.n	8008a36 <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a14:	f7fe fb26 	bl	8007064 <HAL_RCC_GetPCLK1Freq>
 8008a18:	0003      	movs	r3, r0
 8008a1a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008a1c:	e014      	b.n	8008a48 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008a1e:	4b66      	ldr	r3, [pc, #408]	; (8008bb8 <UART_SetConfig+0x578>)
 8008a20:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008a22:	e011      	b.n	8008a48 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008a24:	f7fe fa92 	bl	8006f4c <HAL_RCC_GetSysClockFreq>
 8008a28:	0003      	movs	r3, r0
 8008a2a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008a2c:	e00c      	b.n	8008a48 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a2e:	2380      	movs	r3, #128	; 0x80
 8008a30:	021b      	lsls	r3, r3, #8
 8008a32:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008a34:	e008      	b.n	8008a48 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8008a36:	2300      	movs	r3, #0
 8008a38:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8008a3a:	231a      	movs	r3, #26
 8008a3c:	2220      	movs	r2, #32
 8008a3e:	189b      	adds	r3, r3, r2
 8008a40:	19db      	adds	r3, r3, r7
 8008a42:	2201      	movs	r2, #1
 8008a44:	701a      	strb	r2, [r3, #0]
        break;
 8008a46:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008a48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d100      	bne.n	8008a50 <UART_SetConfig+0x410>
 8008a4e:	e09a      	b.n	8008b86 <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008a54:	4b57      	ldr	r3, [pc, #348]	; (8008bb4 <UART_SetConfig+0x574>)
 8008a56:	0052      	lsls	r2, r2, #1
 8008a58:	5ad3      	ldrh	r3, [r2, r3]
 8008a5a:	0019      	movs	r1, r3
 8008a5c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8008a5e:	f7f7 fb6d 	bl	800013c <__udivsi3>
 8008a62:	0003      	movs	r3, r0
 8008a64:	005a      	lsls	r2, r3, #1
 8008a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a68:	685b      	ldr	r3, [r3, #4]
 8008a6a:	085b      	lsrs	r3, r3, #1
 8008a6c:	18d2      	adds	r2, r2, r3
 8008a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a70:	685b      	ldr	r3, [r3, #4]
 8008a72:	0019      	movs	r1, r3
 8008a74:	0010      	movs	r0, r2
 8008a76:	f7f7 fb61 	bl	800013c <__udivsi3>
 8008a7a:	0003      	movs	r3, r0
 8008a7c:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a80:	2b0f      	cmp	r3, #15
 8008a82:	d921      	bls.n	8008ac8 <UART_SetConfig+0x488>
 8008a84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a86:	2380      	movs	r3, #128	; 0x80
 8008a88:	025b      	lsls	r3, r3, #9
 8008a8a:	429a      	cmp	r2, r3
 8008a8c:	d21c      	bcs.n	8008ac8 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a90:	b29a      	uxth	r2, r3
 8008a92:	200e      	movs	r0, #14
 8008a94:	2420      	movs	r4, #32
 8008a96:	1903      	adds	r3, r0, r4
 8008a98:	19db      	adds	r3, r3, r7
 8008a9a:	210f      	movs	r1, #15
 8008a9c:	438a      	bics	r2, r1
 8008a9e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aa2:	085b      	lsrs	r3, r3, #1
 8008aa4:	b29b      	uxth	r3, r3
 8008aa6:	2207      	movs	r2, #7
 8008aa8:	4013      	ands	r3, r2
 8008aaa:	b299      	uxth	r1, r3
 8008aac:	1903      	adds	r3, r0, r4
 8008aae:	19db      	adds	r3, r3, r7
 8008ab0:	1902      	adds	r2, r0, r4
 8008ab2:	19d2      	adds	r2, r2, r7
 8008ab4:	8812      	ldrh	r2, [r2, #0]
 8008ab6:	430a      	orrs	r2, r1
 8008ab8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8008aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	1902      	adds	r2, r0, r4
 8008ac0:	19d2      	adds	r2, r2, r7
 8008ac2:	8812      	ldrh	r2, [r2, #0]
 8008ac4:	60da      	str	r2, [r3, #12]
 8008ac6:	e05e      	b.n	8008b86 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8008ac8:	231a      	movs	r3, #26
 8008aca:	2220      	movs	r2, #32
 8008acc:	189b      	adds	r3, r3, r2
 8008ace:	19db      	adds	r3, r3, r7
 8008ad0:	2201      	movs	r2, #1
 8008ad2:	701a      	strb	r2, [r3, #0]
 8008ad4:	e057      	b.n	8008b86 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008ad6:	231b      	movs	r3, #27
 8008ad8:	2220      	movs	r2, #32
 8008ada:	189b      	adds	r3, r3, r2
 8008adc:	19db      	adds	r3, r3, r7
 8008ade:	781b      	ldrb	r3, [r3, #0]
 8008ae0:	2b08      	cmp	r3, #8
 8008ae2:	d015      	beq.n	8008b10 <UART_SetConfig+0x4d0>
 8008ae4:	dc18      	bgt.n	8008b18 <UART_SetConfig+0x4d8>
 8008ae6:	2b04      	cmp	r3, #4
 8008ae8:	d00d      	beq.n	8008b06 <UART_SetConfig+0x4c6>
 8008aea:	dc15      	bgt.n	8008b18 <UART_SetConfig+0x4d8>
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d002      	beq.n	8008af6 <UART_SetConfig+0x4b6>
 8008af0:	2b02      	cmp	r3, #2
 8008af2:	d005      	beq.n	8008b00 <UART_SetConfig+0x4c0>
 8008af4:	e010      	b.n	8008b18 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008af6:	f7fe fab5 	bl	8007064 <HAL_RCC_GetPCLK1Freq>
 8008afa:	0003      	movs	r3, r0
 8008afc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008afe:	e014      	b.n	8008b2a <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008b00:	4b2d      	ldr	r3, [pc, #180]	; (8008bb8 <UART_SetConfig+0x578>)
 8008b02:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008b04:	e011      	b.n	8008b2a <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008b06:	f7fe fa21 	bl	8006f4c <HAL_RCC_GetSysClockFreq>
 8008b0a:	0003      	movs	r3, r0
 8008b0c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008b0e:	e00c      	b.n	8008b2a <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008b10:	2380      	movs	r3, #128	; 0x80
 8008b12:	021b      	lsls	r3, r3, #8
 8008b14:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008b16:	e008      	b.n	8008b2a <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8008b18:	2300      	movs	r3, #0
 8008b1a:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8008b1c:	231a      	movs	r3, #26
 8008b1e:	2220      	movs	r2, #32
 8008b20:	189b      	adds	r3, r3, r2
 8008b22:	19db      	adds	r3, r3, r7
 8008b24:	2201      	movs	r2, #1
 8008b26:	701a      	strb	r2, [r3, #0]
        break;
 8008b28:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8008b2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d02a      	beq.n	8008b86 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008b34:	4b1f      	ldr	r3, [pc, #124]	; (8008bb4 <UART_SetConfig+0x574>)
 8008b36:	0052      	lsls	r2, r2, #1
 8008b38:	5ad3      	ldrh	r3, [r2, r3]
 8008b3a:	0019      	movs	r1, r3
 8008b3c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8008b3e:	f7f7 fafd 	bl	800013c <__udivsi3>
 8008b42:	0003      	movs	r3, r0
 8008b44:	001a      	movs	r2, r3
 8008b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b48:	685b      	ldr	r3, [r3, #4]
 8008b4a:	085b      	lsrs	r3, r3, #1
 8008b4c:	18d2      	adds	r2, r2, r3
 8008b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b50:	685b      	ldr	r3, [r3, #4]
 8008b52:	0019      	movs	r1, r3
 8008b54:	0010      	movs	r0, r2
 8008b56:	f7f7 faf1 	bl	800013c <__udivsi3>
 8008b5a:	0003      	movs	r3, r0
 8008b5c:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b60:	2b0f      	cmp	r3, #15
 8008b62:	d90a      	bls.n	8008b7a <UART_SetConfig+0x53a>
 8008b64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b66:	2380      	movs	r3, #128	; 0x80
 8008b68:	025b      	lsls	r3, r3, #9
 8008b6a:	429a      	cmp	r2, r3
 8008b6c:	d205      	bcs.n	8008b7a <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b70:	b29a      	uxth	r2, r3
 8008b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	60da      	str	r2, [r3, #12]
 8008b78:	e005      	b.n	8008b86 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8008b7a:	231a      	movs	r3, #26
 8008b7c:	2220      	movs	r2, #32
 8008b7e:	189b      	adds	r3, r3, r2
 8008b80:	19db      	adds	r3, r3, r7
 8008b82:	2201      	movs	r2, #1
 8008b84:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b88:	226a      	movs	r2, #106	; 0x6a
 8008b8a:	2101      	movs	r1, #1
 8008b8c:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8008b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b90:	2268      	movs	r2, #104	; 0x68
 8008b92:	2101      	movs	r1, #1
 8008b94:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b98:	2200      	movs	r2, #0
 8008b9a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008ba2:	231a      	movs	r3, #26
 8008ba4:	2220      	movs	r2, #32
 8008ba6:	189b      	adds	r3, r3, r2
 8008ba8:	19db      	adds	r3, r3, r7
 8008baa:	781b      	ldrb	r3, [r3, #0]
}
 8008bac:	0018      	movs	r0, r3
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	b010      	add	sp, #64	; 0x40
 8008bb2:	bdb0      	pop	{r4, r5, r7, pc}
 8008bb4:	0800cfb0 	.word	0x0800cfb0
 8008bb8:	00f42400 	.word	0x00f42400

08008bbc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b082      	sub	sp, #8
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bc8:	2201      	movs	r2, #1
 8008bca:	4013      	ands	r3, r2
 8008bcc:	d00b      	beq.n	8008be6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	685b      	ldr	r3, [r3, #4]
 8008bd4:	4a4a      	ldr	r2, [pc, #296]	; (8008d00 <UART_AdvFeatureConfig+0x144>)
 8008bd6:	4013      	ands	r3, r2
 8008bd8:	0019      	movs	r1, r3
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	430a      	orrs	r2, r1
 8008be4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bea:	2202      	movs	r2, #2
 8008bec:	4013      	ands	r3, r2
 8008bee:	d00b      	beq.n	8008c08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	685b      	ldr	r3, [r3, #4]
 8008bf6:	4a43      	ldr	r2, [pc, #268]	; (8008d04 <UART_AdvFeatureConfig+0x148>)
 8008bf8:	4013      	ands	r3, r2
 8008bfa:	0019      	movs	r1, r3
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	430a      	orrs	r2, r1
 8008c06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c0c:	2204      	movs	r2, #4
 8008c0e:	4013      	ands	r3, r2
 8008c10:	d00b      	beq.n	8008c2a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	685b      	ldr	r3, [r3, #4]
 8008c18:	4a3b      	ldr	r2, [pc, #236]	; (8008d08 <UART_AdvFeatureConfig+0x14c>)
 8008c1a:	4013      	ands	r3, r2
 8008c1c:	0019      	movs	r1, r3
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	430a      	orrs	r2, r1
 8008c28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c2e:	2208      	movs	r2, #8
 8008c30:	4013      	ands	r3, r2
 8008c32:	d00b      	beq.n	8008c4c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	685b      	ldr	r3, [r3, #4]
 8008c3a:	4a34      	ldr	r2, [pc, #208]	; (8008d0c <UART_AdvFeatureConfig+0x150>)
 8008c3c:	4013      	ands	r3, r2
 8008c3e:	0019      	movs	r1, r3
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	430a      	orrs	r2, r1
 8008c4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c50:	2210      	movs	r2, #16
 8008c52:	4013      	ands	r3, r2
 8008c54:	d00b      	beq.n	8008c6e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	689b      	ldr	r3, [r3, #8]
 8008c5c:	4a2c      	ldr	r2, [pc, #176]	; (8008d10 <UART_AdvFeatureConfig+0x154>)
 8008c5e:	4013      	ands	r3, r2
 8008c60:	0019      	movs	r1, r3
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	430a      	orrs	r2, r1
 8008c6c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c72:	2220      	movs	r2, #32
 8008c74:	4013      	ands	r3, r2
 8008c76:	d00b      	beq.n	8008c90 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	689b      	ldr	r3, [r3, #8]
 8008c7e:	4a25      	ldr	r2, [pc, #148]	; (8008d14 <UART_AdvFeatureConfig+0x158>)
 8008c80:	4013      	ands	r3, r2
 8008c82:	0019      	movs	r1, r3
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	430a      	orrs	r2, r1
 8008c8e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c94:	2240      	movs	r2, #64	; 0x40
 8008c96:	4013      	ands	r3, r2
 8008c98:	d01d      	beq.n	8008cd6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	685b      	ldr	r3, [r3, #4]
 8008ca0:	4a1d      	ldr	r2, [pc, #116]	; (8008d18 <UART_AdvFeatureConfig+0x15c>)
 8008ca2:	4013      	ands	r3, r2
 8008ca4:	0019      	movs	r1, r3
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	430a      	orrs	r2, r1
 8008cb0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008cb6:	2380      	movs	r3, #128	; 0x80
 8008cb8:	035b      	lsls	r3, r3, #13
 8008cba:	429a      	cmp	r2, r3
 8008cbc:	d10b      	bne.n	8008cd6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	685b      	ldr	r3, [r3, #4]
 8008cc4:	4a15      	ldr	r2, [pc, #84]	; (8008d1c <UART_AdvFeatureConfig+0x160>)
 8008cc6:	4013      	ands	r3, r2
 8008cc8:	0019      	movs	r1, r3
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	430a      	orrs	r2, r1
 8008cd4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cda:	2280      	movs	r2, #128	; 0x80
 8008cdc:	4013      	ands	r3, r2
 8008cde:	d00b      	beq.n	8008cf8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	685b      	ldr	r3, [r3, #4]
 8008ce6:	4a0e      	ldr	r2, [pc, #56]	; (8008d20 <UART_AdvFeatureConfig+0x164>)
 8008ce8:	4013      	ands	r3, r2
 8008cea:	0019      	movs	r1, r3
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	430a      	orrs	r2, r1
 8008cf6:	605a      	str	r2, [r3, #4]
  }
}
 8008cf8:	46c0      	nop			; (mov r8, r8)
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	b002      	add	sp, #8
 8008cfe:	bd80      	pop	{r7, pc}
 8008d00:	fffdffff 	.word	0xfffdffff
 8008d04:	fffeffff 	.word	0xfffeffff
 8008d08:	fffbffff 	.word	0xfffbffff
 8008d0c:	ffff7fff 	.word	0xffff7fff
 8008d10:	ffffefff 	.word	0xffffefff
 8008d14:	ffffdfff 	.word	0xffffdfff
 8008d18:	ffefffff 	.word	0xffefffff
 8008d1c:	ff9fffff 	.word	0xff9fffff
 8008d20:	fff7ffff 	.word	0xfff7ffff

08008d24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b086      	sub	sp, #24
 8008d28:	af02      	add	r7, sp, #8
 8008d2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	228c      	movs	r2, #140	; 0x8c
 8008d30:	2100      	movs	r1, #0
 8008d32:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008d34:	f7fb f8b4 	bl	8003ea0 <HAL_GetTick>
 8008d38:	0003      	movs	r3, r0
 8008d3a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	2208      	movs	r2, #8
 8008d44:	4013      	ands	r3, r2
 8008d46:	2b08      	cmp	r3, #8
 8008d48:	d10c      	bne.n	8008d64 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	2280      	movs	r2, #128	; 0x80
 8008d4e:	0391      	lsls	r1, r2, #14
 8008d50:	6878      	ldr	r0, [r7, #4]
 8008d52:	4a18      	ldr	r2, [pc, #96]	; (8008db4 <UART_CheckIdleState+0x90>)
 8008d54:	9200      	str	r2, [sp, #0]
 8008d56:	2200      	movs	r2, #0
 8008d58:	f000 f82e 	bl	8008db8 <UART_WaitOnFlagUntilTimeout>
 8008d5c:	1e03      	subs	r3, r0, #0
 8008d5e:	d001      	beq.n	8008d64 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008d60:	2303      	movs	r3, #3
 8008d62:	e023      	b.n	8008dac <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	2204      	movs	r2, #4
 8008d6c:	4013      	ands	r3, r2
 8008d6e:	2b04      	cmp	r3, #4
 8008d70:	d10c      	bne.n	8008d8c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	2280      	movs	r2, #128	; 0x80
 8008d76:	03d1      	lsls	r1, r2, #15
 8008d78:	6878      	ldr	r0, [r7, #4]
 8008d7a:	4a0e      	ldr	r2, [pc, #56]	; (8008db4 <UART_CheckIdleState+0x90>)
 8008d7c:	9200      	str	r2, [sp, #0]
 8008d7e:	2200      	movs	r2, #0
 8008d80:	f000 f81a 	bl	8008db8 <UART_WaitOnFlagUntilTimeout>
 8008d84:	1e03      	subs	r3, r0, #0
 8008d86:	d001      	beq.n	8008d8c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008d88:	2303      	movs	r3, #3
 8008d8a:	e00f      	b.n	8008dac <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2284      	movs	r2, #132	; 0x84
 8008d90:	2120      	movs	r1, #32
 8008d92:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2288      	movs	r2, #136	; 0x88
 8008d98:	2120      	movs	r1, #32
 8008d9a:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	2200      	movs	r2, #0
 8008da0:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	2280      	movs	r2, #128	; 0x80
 8008da6:	2100      	movs	r1, #0
 8008da8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008daa:	2300      	movs	r3, #0
}
 8008dac:	0018      	movs	r0, r3
 8008dae:	46bd      	mov	sp, r7
 8008db0:	b004      	add	sp, #16
 8008db2:	bd80      	pop	{r7, pc}
 8008db4:	01ffffff 	.word	0x01ffffff

08008db8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b094      	sub	sp, #80	; 0x50
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	60f8      	str	r0, [r7, #12]
 8008dc0:	60b9      	str	r1, [r7, #8]
 8008dc2:	603b      	str	r3, [r7, #0]
 8008dc4:	1dfb      	adds	r3, r7, #7
 8008dc6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008dc8:	e0a7      	b.n	8008f1a <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008dca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008dcc:	3301      	adds	r3, #1
 8008dce:	d100      	bne.n	8008dd2 <UART_WaitOnFlagUntilTimeout+0x1a>
 8008dd0:	e0a3      	b.n	8008f1a <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008dd2:	f7fb f865 	bl	8003ea0 <HAL_GetTick>
 8008dd6:	0002      	movs	r2, r0
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	1ad3      	subs	r3, r2, r3
 8008ddc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008dde:	429a      	cmp	r2, r3
 8008de0:	d302      	bcc.n	8008de8 <UART_WaitOnFlagUntilTimeout+0x30>
 8008de2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d13f      	bne.n	8008e68 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008de8:	f3ef 8310 	mrs	r3, PRIMASK
 8008dec:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8008dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008df0:	647b      	str	r3, [r7, #68]	; 0x44
 8008df2:	2301      	movs	r3, #1
 8008df4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008df8:	f383 8810 	msr	PRIMASK, r3
}
 8008dfc:	46c0      	nop			; (mov r8, r8)
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	681a      	ldr	r2, [r3, #0]
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	494e      	ldr	r1, [pc, #312]	; (8008f44 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8008e0a:	400a      	ands	r2, r1
 8008e0c:	601a      	str	r2, [r3, #0]
 8008e0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e10:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e14:	f383 8810 	msr	PRIMASK, r3
}
 8008e18:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e1a:	f3ef 8310 	mrs	r3, PRIMASK
 8008e1e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8008e20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e22:	643b      	str	r3, [r7, #64]	; 0x40
 8008e24:	2301      	movs	r3, #1
 8008e26:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e2a:	f383 8810 	msr	PRIMASK, r3
}
 8008e2e:	46c0      	nop			; (mov r8, r8)
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	689a      	ldr	r2, [r3, #8]
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	2101      	movs	r1, #1
 8008e3c:	438a      	bics	r2, r1
 8008e3e:	609a      	str	r2, [r3, #8]
 8008e40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e42:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e46:	f383 8810 	msr	PRIMASK, r3
}
 8008e4a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	2284      	movs	r2, #132	; 0x84
 8008e50:	2120      	movs	r1, #32
 8008e52:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	2288      	movs	r2, #136	; 0x88
 8008e58:	2120      	movs	r1, #32
 8008e5a:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	2280      	movs	r2, #128	; 0x80
 8008e60:	2100      	movs	r1, #0
 8008e62:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8008e64:	2303      	movs	r3, #3
 8008e66:	e069      	b.n	8008f3c <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	2204      	movs	r2, #4
 8008e70:	4013      	ands	r3, r2
 8008e72:	d052      	beq.n	8008f1a <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	69da      	ldr	r2, [r3, #28]
 8008e7a:	2380      	movs	r3, #128	; 0x80
 8008e7c:	011b      	lsls	r3, r3, #4
 8008e7e:	401a      	ands	r2, r3
 8008e80:	2380      	movs	r3, #128	; 0x80
 8008e82:	011b      	lsls	r3, r3, #4
 8008e84:	429a      	cmp	r2, r3
 8008e86:	d148      	bne.n	8008f1a <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	2280      	movs	r2, #128	; 0x80
 8008e8e:	0112      	lsls	r2, r2, #4
 8008e90:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e92:	f3ef 8310 	mrs	r3, PRIMASK
 8008e96:	613b      	str	r3, [r7, #16]
  return(result);
 8008e98:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008e9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008e9c:	2301      	movs	r3, #1
 8008e9e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ea0:	697b      	ldr	r3, [r7, #20]
 8008ea2:	f383 8810 	msr	PRIMASK, r3
}
 8008ea6:	46c0      	nop			; (mov r8, r8)
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	681a      	ldr	r2, [r3, #0]
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	4924      	ldr	r1, [pc, #144]	; (8008f44 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8008eb4:	400a      	ands	r2, r1
 8008eb6:	601a      	str	r2, [r3, #0]
 8008eb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008eba:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ebc:	69bb      	ldr	r3, [r7, #24]
 8008ebe:	f383 8810 	msr	PRIMASK, r3
}
 8008ec2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ec4:	f3ef 8310 	mrs	r3, PRIMASK
 8008ec8:	61fb      	str	r3, [r7, #28]
  return(result);
 8008eca:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ecc:	64bb      	str	r3, [r7, #72]	; 0x48
 8008ece:	2301      	movs	r3, #1
 8008ed0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ed2:	6a3b      	ldr	r3, [r7, #32]
 8008ed4:	f383 8810 	msr	PRIMASK, r3
}
 8008ed8:	46c0      	nop			; (mov r8, r8)
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	689a      	ldr	r2, [r3, #8]
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	2101      	movs	r1, #1
 8008ee6:	438a      	bics	r2, r1
 8008ee8:	609a      	str	r2, [r3, #8]
 8008eea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008eec:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ef0:	f383 8810 	msr	PRIMASK, r3
}
 8008ef4:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	2284      	movs	r2, #132	; 0x84
 8008efa:	2120      	movs	r1, #32
 8008efc:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	2288      	movs	r2, #136	; 0x88
 8008f02:	2120      	movs	r1, #32
 8008f04:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	228c      	movs	r2, #140	; 0x8c
 8008f0a:	2120      	movs	r1, #32
 8008f0c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	2280      	movs	r2, #128	; 0x80
 8008f12:	2100      	movs	r1, #0
 8008f14:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8008f16:	2303      	movs	r3, #3
 8008f18:	e010      	b.n	8008f3c <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	69db      	ldr	r3, [r3, #28]
 8008f20:	68ba      	ldr	r2, [r7, #8]
 8008f22:	4013      	ands	r3, r2
 8008f24:	68ba      	ldr	r2, [r7, #8]
 8008f26:	1ad3      	subs	r3, r2, r3
 8008f28:	425a      	negs	r2, r3
 8008f2a:	4153      	adcs	r3, r2
 8008f2c:	b2db      	uxtb	r3, r3
 8008f2e:	001a      	movs	r2, r3
 8008f30:	1dfb      	adds	r3, r7, #7
 8008f32:	781b      	ldrb	r3, [r3, #0]
 8008f34:	429a      	cmp	r2, r3
 8008f36:	d100      	bne.n	8008f3a <UART_WaitOnFlagUntilTimeout+0x182>
 8008f38:	e747      	b.n	8008dca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008f3a:	2300      	movs	r3, #0
}
 8008f3c:	0018      	movs	r0, r3
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	b014      	add	sp, #80	; 0x50
 8008f42:	bd80      	pop	{r7, pc}
 8008f44:	fffffe5f 	.word	0xfffffe5f

08008f48 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b098      	sub	sp, #96	; 0x60
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	60f8      	str	r0, [r7, #12]
 8008f50:	60b9      	str	r1, [r7, #8]
 8008f52:	1dbb      	adds	r3, r7, #6
 8008f54:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	68ba      	ldr	r2, [r7, #8]
 8008f5a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	1dba      	adds	r2, r7, #6
 8008f60:	215c      	movs	r1, #92	; 0x5c
 8008f62:	8812      	ldrh	r2, [r2, #0]
 8008f64:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	1dba      	adds	r2, r7, #6
 8008f6a:	215e      	movs	r1, #94	; 0x5e
 8008f6c:	8812      	ldrh	r2, [r2, #0]
 8008f6e:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	2200      	movs	r2, #0
 8008f74:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	689a      	ldr	r2, [r3, #8]
 8008f7a:	2380      	movs	r3, #128	; 0x80
 8008f7c:	015b      	lsls	r3, r3, #5
 8008f7e:	429a      	cmp	r2, r3
 8008f80:	d10d      	bne.n	8008f9e <UART_Start_Receive_IT+0x56>
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	691b      	ldr	r3, [r3, #16]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d104      	bne.n	8008f94 <UART_Start_Receive_IT+0x4c>
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	2260      	movs	r2, #96	; 0x60
 8008f8e:	497f      	ldr	r1, [pc, #508]	; (800918c <UART_Start_Receive_IT+0x244>)
 8008f90:	5299      	strh	r1, [r3, r2]
 8008f92:	e02e      	b.n	8008ff2 <UART_Start_Receive_IT+0xaa>
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	2260      	movs	r2, #96	; 0x60
 8008f98:	21ff      	movs	r1, #255	; 0xff
 8008f9a:	5299      	strh	r1, [r3, r2]
 8008f9c:	e029      	b.n	8008ff2 <UART_Start_Receive_IT+0xaa>
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	689b      	ldr	r3, [r3, #8]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d10d      	bne.n	8008fc2 <UART_Start_Receive_IT+0x7a>
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	691b      	ldr	r3, [r3, #16]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d104      	bne.n	8008fb8 <UART_Start_Receive_IT+0x70>
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	2260      	movs	r2, #96	; 0x60
 8008fb2:	21ff      	movs	r1, #255	; 0xff
 8008fb4:	5299      	strh	r1, [r3, r2]
 8008fb6:	e01c      	b.n	8008ff2 <UART_Start_Receive_IT+0xaa>
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	2260      	movs	r2, #96	; 0x60
 8008fbc:	217f      	movs	r1, #127	; 0x7f
 8008fbe:	5299      	strh	r1, [r3, r2]
 8008fc0:	e017      	b.n	8008ff2 <UART_Start_Receive_IT+0xaa>
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	689a      	ldr	r2, [r3, #8]
 8008fc6:	2380      	movs	r3, #128	; 0x80
 8008fc8:	055b      	lsls	r3, r3, #21
 8008fca:	429a      	cmp	r2, r3
 8008fcc:	d10d      	bne.n	8008fea <UART_Start_Receive_IT+0xa2>
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	691b      	ldr	r3, [r3, #16]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d104      	bne.n	8008fe0 <UART_Start_Receive_IT+0x98>
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	2260      	movs	r2, #96	; 0x60
 8008fda:	217f      	movs	r1, #127	; 0x7f
 8008fdc:	5299      	strh	r1, [r3, r2]
 8008fde:	e008      	b.n	8008ff2 <UART_Start_Receive_IT+0xaa>
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	2260      	movs	r2, #96	; 0x60
 8008fe4:	213f      	movs	r1, #63	; 0x3f
 8008fe6:	5299      	strh	r1, [r3, r2]
 8008fe8:	e003      	b.n	8008ff2 <UART_Start_Receive_IT+0xaa>
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	2260      	movs	r2, #96	; 0x60
 8008fee:	2100      	movs	r1, #0
 8008ff0:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	228c      	movs	r2, #140	; 0x8c
 8008ff6:	2100      	movs	r1, #0
 8008ff8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	2288      	movs	r2, #136	; 0x88
 8008ffe:	2122      	movs	r1, #34	; 0x22
 8009000:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009002:	f3ef 8310 	mrs	r3, PRIMASK
 8009006:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 8009008:	6c3b      	ldr	r3, [r7, #64]	; 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800900a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800900c:	2301      	movs	r3, #1
 800900e:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009010:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009012:	f383 8810 	msr	PRIMASK, r3
}
 8009016:	46c0      	nop			; (mov r8, r8)
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	689a      	ldr	r2, [r3, #8]
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	2101      	movs	r1, #1
 8009024:	430a      	orrs	r2, r1
 8009026:	609a      	str	r2, [r3, #8]
 8009028:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800902a:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800902c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800902e:	f383 8810 	msr	PRIMASK, r3
}
 8009032:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009038:	2380      	movs	r3, #128	; 0x80
 800903a:	059b      	lsls	r3, r3, #22
 800903c:	429a      	cmp	r2, r3
 800903e:	d154      	bne.n	80090ea <UART_Start_Receive_IT+0x1a2>
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	2268      	movs	r2, #104	; 0x68
 8009044:	5a9b      	ldrh	r3, [r3, r2]
 8009046:	1dba      	adds	r2, r7, #6
 8009048:	8812      	ldrh	r2, [r2, #0]
 800904a:	429a      	cmp	r2, r3
 800904c:	d34d      	bcc.n	80090ea <UART_Start_Receive_IT+0x1a2>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	689a      	ldr	r2, [r3, #8]
 8009052:	2380      	movs	r3, #128	; 0x80
 8009054:	015b      	lsls	r3, r3, #5
 8009056:	429a      	cmp	r2, r3
 8009058:	d107      	bne.n	800906a <UART_Start_Receive_IT+0x122>
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	691b      	ldr	r3, [r3, #16]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d103      	bne.n	800906a <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	4a4a      	ldr	r2, [pc, #296]	; (8009190 <UART_Start_Receive_IT+0x248>)
 8009066:	671a      	str	r2, [r3, #112]	; 0x70
 8009068:	e002      	b.n	8009070 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	4a49      	ldr	r2, [pc, #292]	; (8009194 <UART_Start_Receive_IT+0x24c>)
 800906e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	2280      	movs	r2, #128	; 0x80
 8009074:	2100      	movs	r1, #0
 8009076:	5499      	strb	r1, [r3, r2]

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	691b      	ldr	r3, [r3, #16]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d019      	beq.n	80090b4 <UART_Start_Receive_IT+0x16c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009080:	f3ef 8310 	mrs	r3, PRIMASK
 8009084:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8009086:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009088:	65bb      	str	r3, [r7, #88]	; 0x58
 800908a:	2301      	movs	r3, #1
 800908c:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800908e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009090:	f383 8810 	msr	PRIMASK, r3
}
 8009094:	46c0      	nop			; (mov r8, r8)
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	681a      	ldr	r2, [r3, #0]
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	2180      	movs	r1, #128	; 0x80
 80090a2:	0049      	lsls	r1, r1, #1
 80090a4:	430a      	orrs	r2, r1
 80090a6:	601a      	str	r2, [r3, #0]
 80090a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80090aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80090ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090ae:	f383 8810 	msr	PRIMASK, r3
}
 80090b2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80090b4:	f3ef 8310 	mrs	r3, PRIMASK
 80090b8:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80090ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80090bc:	657b      	str	r3, [r7, #84]	; 0x54
 80090be:	2301      	movs	r3, #1
 80090c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80090c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090c4:	f383 8810 	msr	PRIMASK, r3
}
 80090c8:	46c0      	nop			; (mov r8, r8)
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	689a      	ldr	r2, [r3, #8]
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	2180      	movs	r1, #128	; 0x80
 80090d6:	0549      	lsls	r1, r1, #21
 80090d8:	430a      	orrs	r2, r1
 80090da:	609a      	str	r2, [r3, #8]
 80090dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80090de:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80090e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090e2:	f383 8810 	msr	PRIMASK, r3
}
 80090e6:	46c0      	nop			; (mov r8, r8)
 80090e8:	e04b      	b.n	8009182 <UART_Start_Receive_IT+0x23a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	689a      	ldr	r2, [r3, #8]
 80090ee:	2380      	movs	r3, #128	; 0x80
 80090f0:	015b      	lsls	r3, r3, #5
 80090f2:	429a      	cmp	r2, r3
 80090f4:	d107      	bne.n	8009106 <UART_Start_Receive_IT+0x1be>
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	691b      	ldr	r3, [r3, #16]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d103      	bne.n	8009106 <UART_Start_Receive_IT+0x1be>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	4a25      	ldr	r2, [pc, #148]	; (8009198 <UART_Start_Receive_IT+0x250>)
 8009102:	671a      	str	r2, [r3, #112]	; 0x70
 8009104:	e002      	b.n	800910c <UART_Start_Receive_IT+0x1c4>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	4a24      	ldr	r2, [pc, #144]	; (800919c <UART_Start_Receive_IT+0x254>)
 800910a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	2280      	movs	r2, #128	; 0x80
 8009110:	2100      	movs	r1, #0
 8009112:	5499      	strb	r1, [r3, r2]

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	691b      	ldr	r3, [r3, #16]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d019      	beq.n	8009150 <UART_Start_Receive_IT+0x208>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800911c:	f3ef 8310 	mrs	r3, PRIMASK
 8009120:	61fb      	str	r3, [r7, #28]
  return(result);
 8009122:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8009124:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009126:	2301      	movs	r3, #1
 8009128:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800912a:	6a3b      	ldr	r3, [r7, #32]
 800912c:	f383 8810 	msr	PRIMASK, r3
}
 8009130:	46c0      	nop			; (mov r8, r8)
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	681a      	ldr	r2, [r3, #0]
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	2190      	movs	r1, #144	; 0x90
 800913e:	0049      	lsls	r1, r1, #1
 8009140:	430a      	orrs	r2, r1
 8009142:	601a      	str	r2, [r3, #0]
 8009144:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009146:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800914a:	f383 8810 	msr	PRIMASK, r3
}
 800914e:	e018      	b.n	8009182 <UART_Start_Receive_IT+0x23a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009150:	f3ef 8310 	mrs	r3, PRIMASK
 8009154:	613b      	str	r3, [r7, #16]
  return(result);
 8009156:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009158:	653b      	str	r3, [r7, #80]	; 0x50
 800915a:	2301      	movs	r3, #1
 800915c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800915e:	697b      	ldr	r3, [r7, #20]
 8009160:	f383 8810 	msr	PRIMASK, r3
}
 8009164:	46c0      	nop			; (mov r8, r8)
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	681a      	ldr	r2, [r3, #0]
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	2120      	movs	r1, #32
 8009172:	430a      	orrs	r2, r1
 8009174:	601a      	str	r2, [r3, #0]
 8009176:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009178:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800917a:	69bb      	ldr	r3, [r7, #24]
 800917c:	f383 8810 	msr	PRIMASK, r3
}
 8009180:	46c0      	nop			; (mov r8, r8)
    }
  }
  return HAL_OK;
 8009182:	2300      	movs	r3, #0
}
 8009184:	0018      	movs	r0, r3
 8009186:	46bd      	mov	sp, r7
 8009188:	b018      	add	sp, #96	; 0x60
 800918a:	bd80      	pop	{r7, pc}
 800918c:	000001ff 	.word	0x000001ff
 8009190:	080098b1 	.word	0x080098b1
 8009194:	080095cd 	.word	0x080095cd
 8009198:	08009461 	.word	0x08009461
 800919c:	080092f5 	.word	0x080092f5

080091a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b08e      	sub	sp, #56	; 0x38
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80091a8:	f3ef 8310 	mrs	r3, PRIMASK
 80091ac:	617b      	str	r3, [r7, #20]
  return(result);
 80091ae:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80091b0:	637b      	str	r3, [r7, #52]	; 0x34
 80091b2:	2301      	movs	r3, #1
 80091b4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80091b6:	69bb      	ldr	r3, [r7, #24]
 80091b8:	f383 8810 	msr	PRIMASK, r3
}
 80091bc:	46c0      	nop			; (mov r8, r8)
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	681a      	ldr	r2, [r3, #0]
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	4926      	ldr	r1, [pc, #152]	; (8009264 <UART_EndRxTransfer+0xc4>)
 80091ca:	400a      	ands	r2, r1
 80091cc:	601a      	str	r2, [r3, #0]
 80091ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091d0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80091d2:	69fb      	ldr	r3, [r7, #28]
 80091d4:	f383 8810 	msr	PRIMASK, r3
}
 80091d8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80091da:	f3ef 8310 	mrs	r3, PRIMASK
 80091de:	623b      	str	r3, [r7, #32]
  return(result);
 80091e0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80091e2:	633b      	str	r3, [r7, #48]	; 0x30
 80091e4:	2301      	movs	r3, #1
 80091e6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80091e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ea:	f383 8810 	msr	PRIMASK, r3
}
 80091ee:	46c0      	nop			; (mov r8, r8)
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	689a      	ldr	r2, [r3, #8]
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	491b      	ldr	r1, [pc, #108]	; (8009268 <UART_EndRxTransfer+0xc8>)
 80091fc:	400a      	ands	r2, r1
 80091fe:	609a      	str	r2, [r3, #8]
 8009200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009202:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009206:	f383 8810 	msr	PRIMASK, r3
}
 800920a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009210:	2b01      	cmp	r3, #1
 8009212:	d118      	bne.n	8009246 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009214:	f3ef 8310 	mrs	r3, PRIMASK
 8009218:	60bb      	str	r3, [r7, #8]
  return(result);
 800921a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800921c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800921e:	2301      	movs	r3, #1
 8009220:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	f383 8810 	msr	PRIMASK, r3
}
 8009228:	46c0      	nop			; (mov r8, r8)
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	681a      	ldr	r2, [r3, #0]
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	2110      	movs	r1, #16
 8009236:	438a      	bics	r2, r1
 8009238:	601a      	str	r2, [r3, #0]
 800923a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800923c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800923e:	693b      	ldr	r3, [r7, #16]
 8009240:	f383 8810 	msr	PRIMASK, r3
}
 8009244:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	2288      	movs	r2, #136	; 0x88
 800924a:	2120      	movs	r1, #32
 800924c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	2200      	movs	r2, #0
 8009252:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	2200      	movs	r2, #0
 8009258:	671a      	str	r2, [r3, #112]	; 0x70
}
 800925a:	46c0      	nop			; (mov r8, r8)
 800925c:	46bd      	mov	sp, r7
 800925e:	b00e      	add	sp, #56	; 0x38
 8009260:	bd80      	pop	{r7, pc}
 8009262:	46c0      	nop			; (mov r8, r8)
 8009264:	fffffedf 	.word	0xfffffedf
 8009268:	effffffe 	.word	0xeffffffe

0800926c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b084      	sub	sp, #16
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009278:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	225e      	movs	r2, #94	; 0x5e
 800927e:	2100      	movs	r1, #0
 8009280:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	2256      	movs	r2, #86	; 0x56
 8009286:	2100      	movs	r1, #0
 8009288:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	0018      	movs	r0, r3
 800928e:	f7ff f9c3 	bl	8008618 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009292:	46c0      	nop			; (mov r8, r8)
 8009294:	46bd      	mov	sp, r7
 8009296:	b004      	add	sp, #16
 8009298:	bd80      	pop	{r7, pc}

0800929a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800929a:	b580      	push	{r7, lr}
 800929c:	b086      	sub	sp, #24
 800929e:	af00      	add	r7, sp, #0
 80092a0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80092a2:	f3ef 8310 	mrs	r3, PRIMASK
 80092a6:	60bb      	str	r3, [r7, #8]
  return(result);
 80092a8:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80092aa:	617b      	str	r3, [r7, #20]
 80092ac:	2301      	movs	r3, #1
 80092ae:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	f383 8810 	msr	PRIMASK, r3
}
 80092b6:	46c0      	nop			; (mov r8, r8)
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	681a      	ldr	r2, [r3, #0]
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	2140      	movs	r1, #64	; 0x40
 80092c4:	438a      	bics	r2, r1
 80092c6:	601a      	str	r2, [r3, #0]
 80092c8:	697b      	ldr	r3, [r7, #20]
 80092ca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80092cc:	693b      	ldr	r3, [r7, #16]
 80092ce:	f383 8810 	msr	PRIMASK, r3
}
 80092d2:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	2284      	movs	r2, #132	; 0x84
 80092d8:	2120      	movs	r1, #32
 80092da:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2200      	movs	r2, #0
 80092e0:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	0018      	movs	r0, r3
 80092e6:	f7ff f98f 	bl	8008608 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80092ea:	46c0      	nop			; (mov r8, r8)
 80092ec:	46bd      	mov	sp, r7
 80092ee:	b006      	add	sp, #24
 80092f0:	bd80      	pop	{r7, pc}
	...

080092f4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b090      	sub	sp, #64	; 0x40
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80092fc:	203e      	movs	r0, #62	; 0x3e
 80092fe:	183b      	adds	r3, r7, r0
 8009300:	687a      	ldr	r2, [r7, #4]
 8009302:	2160      	movs	r1, #96	; 0x60
 8009304:	5a52      	ldrh	r2, [r2, r1]
 8009306:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	2288      	movs	r2, #136	; 0x88
 800930c:	589b      	ldr	r3, [r3, r2]
 800930e:	2b22      	cmp	r3, #34	; 0x22
 8009310:	d000      	beq.n	8009314 <UART_RxISR_8BIT+0x20>
 8009312:	e097      	b.n	8009444 <UART_RxISR_8BIT+0x150>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800931a:	213c      	movs	r1, #60	; 0x3c
 800931c:	187b      	adds	r3, r7, r1
 800931e:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009320:	187b      	adds	r3, r7, r1
 8009322:	881b      	ldrh	r3, [r3, #0]
 8009324:	b2da      	uxtb	r2, r3
 8009326:	183b      	adds	r3, r7, r0
 8009328:	881b      	ldrh	r3, [r3, #0]
 800932a:	b2d9      	uxtb	r1, r3
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009330:	400a      	ands	r2, r1
 8009332:	b2d2      	uxtb	r2, r2
 8009334:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800933a:	1c5a      	adds	r2, r3, #1
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	225e      	movs	r2, #94	; 0x5e
 8009344:	5a9b      	ldrh	r3, [r3, r2]
 8009346:	b29b      	uxth	r3, r3
 8009348:	3b01      	subs	r3, #1
 800934a:	b299      	uxth	r1, r3
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	225e      	movs	r2, #94	; 0x5e
 8009350:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	225e      	movs	r2, #94	; 0x5e
 8009356:	5a9b      	ldrh	r3, [r3, r2]
 8009358:	b29b      	uxth	r3, r3
 800935a:	2b00      	cmp	r3, #0
 800935c:	d000      	beq.n	8009360 <UART_RxISR_8BIT+0x6c>
 800935e:	e079      	b.n	8009454 <UART_RxISR_8BIT+0x160>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009360:	f3ef 8310 	mrs	r3, PRIMASK
 8009364:	61bb      	str	r3, [r7, #24]
  return(result);
 8009366:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009368:	63bb      	str	r3, [r7, #56]	; 0x38
 800936a:	2301      	movs	r3, #1
 800936c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800936e:	69fb      	ldr	r3, [r7, #28]
 8009370:	f383 8810 	msr	PRIMASK, r3
}
 8009374:	46c0      	nop			; (mov r8, r8)
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	681a      	ldr	r2, [r3, #0]
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	4936      	ldr	r1, [pc, #216]	; (800945c <UART_RxISR_8BIT+0x168>)
 8009382:	400a      	ands	r2, r1
 8009384:	601a      	str	r2, [r3, #0]
 8009386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009388:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800938a:	6a3b      	ldr	r3, [r7, #32]
 800938c:	f383 8810 	msr	PRIMASK, r3
}
 8009390:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009392:	f3ef 8310 	mrs	r3, PRIMASK
 8009396:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8009398:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800939a:	637b      	str	r3, [r7, #52]	; 0x34
 800939c:	2301      	movs	r3, #1
 800939e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80093a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093a2:	f383 8810 	msr	PRIMASK, r3
}
 80093a6:	46c0      	nop			; (mov r8, r8)
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	689a      	ldr	r2, [r3, #8]
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	2101      	movs	r1, #1
 80093b4:	438a      	bics	r2, r1
 80093b6:	609a      	str	r2, [r3, #8]
 80093b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80093bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093be:	f383 8810 	msr	PRIMASK, r3
}
 80093c2:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2288      	movs	r2, #136	; 0x88
 80093c8:	2120      	movs	r1, #32
 80093ca:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2200      	movs	r2, #0
 80093d0:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80093d6:	2b01      	cmp	r3, #1
 80093d8:	d12f      	bne.n	800943a <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	2200      	movs	r2, #0
 80093de:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80093e0:	f3ef 8310 	mrs	r3, PRIMASK
 80093e4:	60fb      	str	r3, [r7, #12]
  return(result);
 80093e6:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093e8:	633b      	str	r3, [r7, #48]	; 0x30
 80093ea:	2301      	movs	r3, #1
 80093ec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80093ee:	693b      	ldr	r3, [r7, #16]
 80093f0:	f383 8810 	msr	PRIMASK, r3
}
 80093f4:	46c0      	nop			; (mov r8, r8)
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	681a      	ldr	r2, [r3, #0]
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	2110      	movs	r1, #16
 8009402:	438a      	bics	r2, r1
 8009404:	601a      	str	r2, [r3, #0]
 8009406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009408:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800940a:	697b      	ldr	r3, [r7, #20]
 800940c:	f383 8810 	msr	PRIMASK, r3
}
 8009410:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	69db      	ldr	r3, [r3, #28]
 8009418:	2210      	movs	r2, #16
 800941a:	4013      	ands	r3, r2
 800941c:	2b10      	cmp	r3, #16
 800941e:	d103      	bne.n	8009428 <UART_RxISR_8BIT+0x134>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	2210      	movs	r2, #16
 8009426:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	225c      	movs	r2, #92	; 0x5c
 800942c:	5a9a      	ldrh	r2, [r3, r2]
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	0011      	movs	r1, r2
 8009432:	0018      	movs	r0, r3
 8009434:	f7ff f8f8 	bl	8008628 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009438:	e00c      	b.n	8009454 <UART_RxISR_8BIT+0x160>
        HAL_UART_RxCpltCallback(huart);
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	0018      	movs	r0, r3
 800943e:	f7fa f969 	bl	8003714 <HAL_UART_RxCpltCallback>
}
 8009442:	e007      	b.n	8009454 <UART_RxISR_8BIT+0x160>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	699a      	ldr	r2, [r3, #24]
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	2108      	movs	r1, #8
 8009450:	430a      	orrs	r2, r1
 8009452:	619a      	str	r2, [r3, #24]
}
 8009454:	46c0      	nop			; (mov r8, r8)
 8009456:	46bd      	mov	sp, r7
 8009458:	b010      	add	sp, #64	; 0x40
 800945a:	bd80      	pop	{r7, pc}
 800945c:	fffffedf 	.word	0xfffffedf

08009460 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009460:	b580      	push	{r7, lr}
 8009462:	b090      	sub	sp, #64	; 0x40
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009468:	203e      	movs	r0, #62	; 0x3e
 800946a:	183b      	adds	r3, r7, r0
 800946c:	687a      	ldr	r2, [r7, #4]
 800946e:	2160      	movs	r1, #96	; 0x60
 8009470:	5a52      	ldrh	r2, [r2, r1]
 8009472:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	2288      	movs	r2, #136	; 0x88
 8009478:	589b      	ldr	r3, [r3, r2]
 800947a:	2b22      	cmp	r3, #34	; 0x22
 800947c:	d000      	beq.n	8009480 <UART_RxISR_16BIT+0x20>
 800947e:	e097      	b.n	80095b0 <UART_RxISR_16BIT+0x150>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009486:	213c      	movs	r1, #60	; 0x3c
 8009488:	187b      	adds	r3, r7, r1
 800948a:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009490:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 8009492:	187b      	adds	r3, r7, r1
 8009494:	183a      	adds	r2, r7, r0
 8009496:	881b      	ldrh	r3, [r3, #0]
 8009498:	8812      	ldrh	r2, [r2, #0]
 800949a:	4013      	ands	r3, r2
 800949c:	b29a      	uxth	r2, r3
 800949e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094a0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094a6:	1c9a      	adds	r2, r3, #2
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	225e      	movs	r2, #94	; 0x5e
 80094b0:	5a9b      	ldrh	r3, [r3, r2]
 80094b2:	b29b      	uxth	r3, r3
 80094b4:	3b01      	subs	r3, #1
 80094b6:	b299      	uxth	r1, r3
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	225e      	movs	r2, #94	; 0x5e
 80094bc:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	225e      	movs	r2, #94	; 0x5e
 80094c2:	5a9b      	ldrh	r3, [r3, r2]
 80094c4:	b29b      	uxth	r3, r3
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d000      	beq.n	80094cc <UART_RxISR_16BIT+0x6c>
 80094ca:	e079      	b.n	80095c0 <UART_RxISR_16BIT+0x160>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80094cc:	f3ef 8310 	mrs	r3, PRIMASK
 80094d0:	617b      	str	r3, [r7, #20]
  return(result);
 80094d2:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80094d4:	637b      	str	r3, [r7, #52]	; 0x34
 80094d6:	2301      	movs	r3, #1
 80094d8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80094da:	69bb      	ldr	r3, [r7, #24]
 80094dc:	f383 8810 	msr	PRIMASK, r3
}
 80094e0:	46c0      	nop			; (mov r8, r8)
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	681a      	ldr	r2, [r3, #0]
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	4936      	ldr	r1, [pc, #216]	; (80095c8 <UART_RxISR_16BIT+0x168>)
 80094ee:	400a      	ands	r2, r1
 80094f0:	601a      	str	r2, [r3, #0]
 80094f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094f4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80094f6:	69fb      	ldr	r3, [r7, #28]
 80094f8:	f383 8810 	msr	PRIMASK, r3
}
 80094fc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80094fe:	f3ef 8310 	mrs	r3, PRIMASK
 8009502:	623b      	str	r3, [r7, #32]
  return(result);
 8009504:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009506:	633b      	str	r3, [r7, #48]	; 0x30
 8009508:	2301      	movs	r3, #1
 800950a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800950c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800950e:	f383 8810 	msr	PRIMASK, r3
}
 8009512:	46c0      	nop			; (mov r8, r8)
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	689a      	ldr	r2, [r3, #8]
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	2101      	movs	r1, #1
 8009520:	438a      	bics	r2, r1
 8009522:	609a      	str	r2, [r3, #8]
 8009524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009526:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800952a:	f383 8810 	msr	PRIMASK, r3
}
 800952e:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2288      	movs	r2, #136	; 0x88
 8009534:	2120      	movs	r1, #32
 8009536:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2200      	movs	r2, #0
 800953c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009542:	2b01      	cmp	r3, #1
 8009544:	d12f      	bne.n	80095a6 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	2200      	movs	r2, #0
 800954a:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800954c:	f3ef 8310 	mrs	r3, PRIMASK
 8009550:	60bb      	str	r3, [r7, #8]
  return(result);
 8009552:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009554:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009556:	2301      	movs	r3, #1
 8009558:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	f383 8810 	msr	PRIMASK, r3
}
 8009560:	46c0      	nop			; (mov r8, r8)
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	681a      	ldr	r2, [r3, #0]
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	2110      	movs	r1, #16
 800956e:	438a      	bics	r2, r1
 8009570:	601a      	str	r2, [r3, #0]
 8009572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009574:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009576:	693b      	ldr	r3, [r7, #16]
 8009578:	f383 8810 	msr	PRIMASK, r3
}
 800957c:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	69db      	ldr	r3, [r3, #28]
 8009584:	2210      	movs	r2, #16
 8009586:	4013      	ands	r3, r2
 8009588:	2b10      	cmp	r3, #16
 800958a:	d103      	bne.n	8009594 <UART_RxISR_16BIT+0x134>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	2210      	movs	r2, #16
 8009592:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	225c      	movs	r2, #92	; 0x5c
 8009598:	5a9a      	ldrh	r2, [r3, r2]
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	0011      	movs	r1, r2
 800959e:	0018      	movs	r0, r3
 80095a0:	f7ff f842 	bl	8008628 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80095a4:	e00c      	b.n	80095c0 <UART_RxISR_16BIT+0x160>
        HAL_UART_RxCpltCallback(huart);
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	0018      	movs	r0, r3
 80095aa:	f7fa f8b3 	bl	8003714 <HAL_UART_RxCpltCallback>
}
 80095ae:	e007      	b.n	80095c0 <UART_RxISR_16BIT+0x160>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	699a      	ldr	r2, [r3, #24]
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	2108      	movs	r1, #8
 80095bc:	430a      	orrs	r2, r1
 80095be:	619a      	str	r2, [r3, #24]
}
 80095c0:	46c0      	nop			; (mov r8, r8)
 80095c2:	46bd      	mov	sp, r7
 80095c4:	b010      	add	sp, #64	; 0x40
 80095c6:	bd80      	pop	{r7, pc}
 80095c8:	fffffedf 	.word	0xfffffedf

080095cc <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b09c      	sub	sp, #112	; 0x70
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80095d4:	236a      	movs	r3, #106	; 0x6a
 80095d6:	18fb      	adds	r3, r7, r3
 80095d8:	687a      	ldr	r2, [r7, #4]
 80095da:	2160      	movs	r1, #96	; 0x60
 80095dc:	5a52      	ldrh	r2, [r2, r1]
 80095de:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	69db      	ldr	r3, [r3, #28]
 80095e6:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	689b      	ldr	r3, [r3, #8]
 80095f6:	663b      	str	r3, [r7, #96]	; 0x60

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	2288      	movs	r2, #136	; 0x88
 80095fc:	589b      	ldr	r3, [r3, r2]
 80095fe:	2b22      	cmp	r3, #34	; 0x22
 8009600:	d000      	beq.n	8009604 <UART_RxISR_8BIT_FIFOEN+0x38>
 8009602:	e141      	b.n	8009888 <UART_RxISR_8BIT_FIFOEN+0x2bc>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009604:	235e      	movs	r3, #94	; 0x5e
 8009606:	18fb      	adds	r3, r7, r3
 8009608:	687a      	ldr	r2, [r7, #4]
 800960a:	2168      	movs	r1, #104	; 0x68
 800960c:	5a52      	ldrh	r2, [r2, r1]
 800960e:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009610:	e0e8      	b.n	80097e4 <UART_RxISR_8BIT_FIFOEN+0x218>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009618:	215c      	movs	r1, #92	; 0x5c
 800961a:	187b      	adds	r3, r7, r1
 800961c:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800961e:	187b      	adds	r3, r7, r1
 8009620:	881b      	ldrh	r3, [r3, #0]
 8009622:	b2da      	uxtb	r2, r3
 8009624:	236a      	movs	r3, #106	; 0x6a
 8009626:	18fb      	adds	r3, r7, r3
 8009628:	881b      	ldrh	r3, [r3, #0]
 800962a:	b2d9      	uxtb	r1, r3
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009630:	400a      	ands	r2, r1
 8009632:	b2d2      	uxtb	r2, r2
 8009634:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800963a:	1c5a      	adds	r2, r3, #1
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	225e      	movs	r2, #94	; 0x5e
 8009644:	5a9b      	ldrh	r3, [r3, r2]
 8009646:	b29b      	uxth	r3, r3
 8009648:	3b01      	subs	r3, #1
 800964a:	b299      	uxth	r1, r3
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	225e      	movs	r2, #94	; 0x5e
 8009650:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	69db      	ldr	r3, [r3, #28]
 8009658:	66fb      	str	r3, [r7, #108]	; 0x6c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800965a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800965c:	2207      	movs	r2, #7
 800965e:	4013      	ands	r3, r2
 8009660:	d049      	beq.n	80096f6 <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009662:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009664:	2201      	movs	r2, #1
 8009666:	4013      	ands	r3, r2
 8009668:	d010      	beq.n	800968c <UART_RxISR_8BIT_FIFOEN+0xc0>
 800966a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800966c:	2380      	movs	r3, #128	; 0x80
 800966e:	005b      	lsls	r3, r3, #1
 8009670:	4013      	ands	r3, r2
 8009672:	d00b      	beq.n	800968c <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	2201      	movs	r2, #1
 800967a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	228c      	movs	r2, #140	; 0x8c
 8009680:	589b      	ldr	r3, [r3, r2]
 8009682:	2201      	movs	r2, #1
 8009684:	431a      	orrs	r2, r3
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	218c      	movs	r1, #140	; 0x8c
 800968a:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800968c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800968e:	2202      	movs	r2, #2
 8009690:	4013      	ands	r3, r2
 8009692:	d00f      	beq.n	80096b4 <UART_RxISR_8BIT_FIFOEN+0xe8>
 8009694:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009696:	2201      	movs	r2, #1
 8009698:	4013      	ands	r3, r2
 800969a:	d00b      	beq.n	80096b4 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	2202      	movs	r2, #2
 80096a2:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	228c      	movs	r2, #140	; 0x8c
 80096a8:	589b      	ldr	r3, [r3, r2]
 80096aa:	2204      	movs	r2, #4
 80096ac:	431a      	orrs	r2, r3
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	218c      	movs	r1, #140	; 0x8c
 80096b2:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80096b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80096b6:	2204      	movs	r2, #4
 80096b8:	4013      	ands	r3, r2
 80096ba:	d00f      	beq.n	80096dc <UART_RxISR_8BIT_FIFOEN+0x110>
 80096bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80096be:	2201      	movs	r2, #1
 80096c0:	4013      	ands	r3, r2
 80096c2:	d00b      	beq.n	80096dc <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	2204      	movs	r2, #4
 80096ca:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	228c      	movs	r2, #140	; 0x8c
 80096d0:	589b      	ldr	r3, [r3, r2]
 80096d2:	2202      	movs	r2, #2
 80096d4:	431a      	orrs	r2, r3
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	218c      	movs	r1, #140	; 0x8c
 80096da:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	228c      	movs	r2, #140	; 0x8c
 80096e0:	589b      	ldr	r3, [r3, r2]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d007      	beq.n	80096f6 <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	0018      	movs	r0, r3
 80096ea:	f7fe ff95 	bl	8008618 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	228c      	movs	r2, #140	; 0x8c
 80096f2:	2100      	movs	r1, #0
 80096f4:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	225e      	movs	r2, #94	; 0x5e
 80096fa:	5a9b      	ldrh	r3, [r3, r2]
 80096fc:	b29b      	uxth	r3, r3
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d170      	bne.n	80097e4 <UART_RxISR_8BIT_FIFOEN+0x218>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009702:	f3ef 8310 	mrs	r3, PRIMASK
 8009706:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8009708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800970a:	65bb      	str	r3, [r7, #88]	; 0x58
 800970c:	2301      	movs	r3, #1
 800970e:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009712:	f383 8810 	msr	PRIMASK, r3
}
 8009716:	46c0      	nop			; (mov r8, r8)
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	681a      	ldr	r2, [r3, #0]
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	495f      	ldr	r1, [pc, #380]	; (80098a0 <UART_RxISR_8BIT_FIFOEN+0x2d4>)
 8009724:	400a      	ands	r2, r1
 8009726:	601a      	str	r2, [r3, #0]
 8009728:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800972a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800972c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800972e:	f383 8810 	msr	PRIMASK, r3
}
 8009732:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009734:	f3ef 8310 	mrs	r3, PRIMASK
 8009738:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 800973a:	6bbb      	ldr	r3, [r7, #56]	; 0x38

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800973c:	657b      	str	r3, [r7, #84]	; 0x54
 800973e:	2301      	movs	r3, #1
 8009740:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009742:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009744:	f383 8810 	msr	PRIMASK, r3
}
 8009748:	46c0      	nop			; (mov r8, r8)
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	689a      	ldr	r2, [r3, #8]
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	4953      	ldr	r1, [pc, #332]	; (80098a4 <UART_RxISR_8BIT_FIFOEN+0x2d8>)
 8009756:	400a      	ands	r2, r1
 8009758:	609a      	str	r2, [r3, #8]
 800975a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800975c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800975e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009760:	f383 8810 	msr	PRIMASK, r3
}
 8009764:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	2288      	movs	r2, #136	; 0x88
 800976a:	2120      	movs	r1, #32
 800976c:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	2200      	movs	r2, #0
 8009772:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009778:	2b01      	cmp	r3, #1
 800977a:	d12f      	bne.n	80097dc <UART_RxISR_8BIT_FIFOEN+0x210>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	2200      	movs	r2, #0
 8009780:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009782:	f3ef 8310 	mrs	r3, PRIMASK
 8009786:	623b      	str	r3, [r7, #32]
  return(result);
 8009788:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800978a:	653b      	str	r3, [r7, #80]	; 0x50
 800978c:	2301      	movs	r3, #1
 800978e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009792:	f383 8810 	msr	PRIMASK, r3
}
 8009796:	46c0      	nop			; (mov r8, r8)
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	681a      	ldr	r2, [r3, #0]
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	2110      	movs	r1, #16
 80097a4:	438a      	bics	r2, r1
 80097a6:	601a      	str	r2, [r3, #0]
 80097a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80097aa:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80097ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097ae:	f383 8810 	msr	PRIMASK, r3
}
 80097b2:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	69db      	ldr	r3, [r3, #28]
 80097ba:	2210      	movs	r2, #16
 80097bc:	4013      	ands	r3, r2
 80097be:	2b10      	cmp	r3, #16
 80097c0:	d103      	bne.n	80097ca <UART_RxISR_8BIT_FIFOEN+0x1fe>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	2210      	movs	r2, #16
 80097c8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	225c      	movs	r2, #92	; 0x5c
 80097ce:	5a9a      	ldrh	r2, [r3, r2]
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	0011      	movs	r1, r2
 80097d4:	0018      	movs	r0, r3
 80097d6:	f7fe ff27 	bl	8008628 <HAL_UARTEx_RxEventCallback>
 80097da:	e003      	b.n	80097e4 <UART_RxISR_8BIT_FIFOEN+0x218>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	0018      	movs	r0, r3
 80097e0:	f7f9 ff98 	bl	8003714 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80097e4:	235e      	movs	r3, #94	; 0x5e
 80097e6:	18fb      	adds	r3, r7, r3
 80097e8:	881b      	ldrh	r3, [r3, #0]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d004      	beq.n	80097f8 <UART_RxISR_8BIT_FIFOEN+0x22c>
 80097ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80097f0:	2220      	movs	r2, #32
 80097f2:	4013      	ands	r3, r2
 80097f4:	d000      	beq.n	80097f8 <UART_RxISR_8BIT_FIFOEN+0x22c>
 80097f6:	e70c      	b.n	8009612 <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80097f8:	204e      	movs	r0, #78	; 0x4e
 80097fa:	183b      	adds	r3, r7, r0
 80097fc:	687a      	ldr	r2, [r7, #4]
 80097fe:	215e      	movs	r1, #94	; 0x5e
 8009800:	5a52      	ldrh	r2, [r2, r1]
 8009802:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009804:	0001      	movs	r1, r0
 8009806:	187b      	adds	r3, r7, r1
 8009808:	881b      	ldrh	r3, [r3, #0]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d044      	beq.n	8009898 <UART_RxISR_8BIT_FIFOEN+0x2cc>
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	2268      	movs	r2, #104	; 0x68
 8009812:	5a9b      	ldrh	r3, [r3, r2]
 8009814:	187a      	adds	r2, r7, r1
 8009816:	8812      	ldrh	r2, [r2, #0]
 8009818:	429a      	cmp	r2, r3
 800981a:	d23d      	bcs.n	8009898 <UART_RxISR_8BIT_FIFOEN+0x2cc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800981c:	f3ef 8310 	mrs	r3, PRIMASK
 8009820:	60bb      	str	r3, [r7, #8]
  return(result);
 8009822:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009824:	64bb      	str	r3, [r7, #72]	; 0x48
 8009826:	2301      	movs	r3, #1
 8009828:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	f383 8810 	msr	PRIMASK, r3
}
 8009830:	46c0      	nop			; (mov r8, r8)
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	689a      	ldr	r2, [r3, #8]
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	491a      	ldr	r1, [pc, #104]	; (80098a8 <UART_RxISR_8BIT_FIFOEN+0x2dc>)
 800983e:	400a      	ands	r2, r1
 8009840:	609a      	str	r2, [r3, #8]
 8009842:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009844:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009846:	693b      	ldr	r3, [r7, #16]
 8009848:	f383 8810 	msr	PRIMASK, r3
}
 800984c:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	4a16      	ldr	r2, [pc, #88]	; (80098ac <UART_RxISR_8BIT_FIFOEN+0x2e0>)
 8009852:	671a      	str	r2, [r3, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009854:	f3ef 8310 	mrs	r3, PRIMASK
 8009858:	617b      	str	r3, [r7, #20]
  return(result);
 800985a:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800985c:	647b      	str	r3, [r7, #68]	; 0x44
 800985e:	2301      	movs	r3, #1
 8009860:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009862:	69bb      	ldr	r3, [r7, #24]
 8009864:	f383 8810 	msr	PRIMASK, r3
}
 8009868:	46c0      	nop			; (mov r8, r8)
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	681a      	ldr	r2, [r3, #0]
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	2120      	movs	r1, #32
 8009876:	430a      	orrs	r2, r1
 8009878:	601a      	str	r2, [r3, #0]
 800987a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800987c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800987e:	69fb      	ldr	r3, [r7, #28]
 8009880:	f383 8810 	msr	PRIMASK, r3
}
 8009884:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009886:	e007      	b.n	8009898 <UART_RxISR_8BIT_FIFOEN+0x2cc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	699a      	ldr	r2, [r3, #24]
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	2108      	movs	r1, #8
 8009894:	430a      	orrs	r2, r1
 8009896:	619a      	str	r2, [r3, #24]
}
 8009898:	46c0      	nop			; (mov r8, r8)
 800989a:	46bd      	mov	sp, r7
 800989c:	b01c      	add	sp, #112	; 0x70
 800989e:	bd80      	pop	{r7, pc}
 80098a0:	fffffeff 	.word	0xfffffeff
 80098a4:	effffffe 	.word	0xeffffffe
 80098a8:	efffffff 	.word	0xefffffff
 80098ac:	080092f5 	.word	0x080092f5

080098b0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b09e      	sub	sp, #120	; 0x78
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80098b8:	2372      	movs	r3, #114	; 0x72
 80098ba:	18fb      	adds	r3, r7, r3
 80098bc:	687a      	ldr	r2, [r7, #4]
 80098be:	2160      	movs	r1, #96	; 0x60
 80098c0:	5a52      	ldrh	r2, [r2, r1]
 80098c2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	69db      	ldr	r3, [r3, #28]
 80098ca:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	689b      	ldr	r3, [r3, #8]
 80098da:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	2288      	movs	r2, #136	; 0x88
 80098e0:	589b      	ldr	r3, [r3, r2]
 80098e2:	2b22      	cmp	r3, #34	; 0x22
 80098e4:	d000      	beq.n	80098e8 <UART_RxISR_16BIT_FIFOEN+0x38>
 80098e6:	e141      	b.n	8009b6c <UART_RxISR_16BIT_FIFOEN+0x2bc>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80098e8:	2366      	movs	r3, #102	; 0x66
 80098ea:	18fb      	adds	r3, r7, r3
 80098ec:	687a      	ldr	r2, [r7, #4]
 80098ee:	2168      	movs	r1, #104	; 0x68
 80098f0:	5a52      	ldrh	r2, [r2, r1]
 80098f2:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80098f4:	e0e8      	b.n	8009ac8 <UART_RxISR_16BIT_FIFOEN+0x218>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80098fc:	2164      	movs	r1, #100	; 0x64
 80098fe:	187b      	adds	r3, r7, r1
 8009900:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009906:	663b      	str	r3, [r7, #96]	; 0x60
      *tmp = (uint16_t)(uhdata & uhMask);
 8009908:	187b      	adds	r3, r7, r1
 800990a:	2272      	movs	r2, #114	; 0x72
 800990c:	18ba      	adds	r2, r7, r2
 800990e:	881b      	ldrh	r3, [r3, #0]
 8009910:	8812      	ldrh	r2, [r2, #0]
 8009912:	4013      	ands	r3, r2
 8009914:	b29a      	uxth	r2, r3
 8009916:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009918:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800991e:	1c9a      	adds	r2, r3, #2
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	225e      	movs	r2, #94	; 0x5e
 8009928:	5a9b      	ldrh	r3, [r3, r2]
 800992a:	b29b      	uxth	r3, r3
 800992c:	3b01      	subs	r3, #1
 800992e:	b299      	uxth	r1, r3
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	225e      	movs	r2, #94	; 0x5e
 8009934:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	69db      	ldr	r3, [r3, #28]
 800993c:	677b      	str	r3, [r7, #116]	; 0x74

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800993e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009940:	2207      	movs	r2, #7
 8009942:	4013      	ands	r3, r2
 8009944:	d049      	beq.n	80099da <UART_RxISR_16BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009946:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009948:	2201      	movs	r2, #1
 800994a:	4013      	ands	r3, r2
 800994c:	d010      	beq.n	8009970 <UART_RxISR_16BIT_FIFOEN+0xc0>
 800994e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009950:	2380      	movs	r3, #128	; 0x80
 8009952:	005b      	lsls	r3, r3, #1
 8009954:	4013      	ands	r3, r2
 8009956:	d00b      	beq.n	8009970 <UART_RxISR_16BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	2201      	movs	r2, #1
 800995e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	228c      	movs	r2, #140	; 0x8c
 8009964:	589b      	ldr	r3, [r3, r2]
 8009966:	2201      	movs	r2, #1
 8009968:	431a      	orrs	r2, r3
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	218c      	movs	r1, #140	; 0x8c
 800996e:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009970:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009972:	2202      	movs	r2, #2
 8009974:	4013      	ands	r3, r2
 8009976:	d00f      	beq.n	8009998 <UART_RxISR_16BIT_FIFOEN+0xe8>
 8009978:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800997a:	2201      	movs	r2, #1
 800997c:	4013      	ands	r3, r2
 800997e:	d00b      	beq.n	8009998 <UART_RxISR_16BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	2202      	movs	r2, #2
 8009986:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	228c      	movs	r2, #140	; 0x8c
 800998c:	589b      	ldr	r3, [r3, r2]
 800998e:	2204      	movs	r2, #4
 8009990:	431a      	orrs	r2, r3
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	218c      	movs	r1, #140	; 0x8c
 8009996:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009998:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800999a:	2204      	movs	r2, #4
 800999c:	4013      	ands	r3, r2
 800999e:	d00f      	beq.n	80099c0 <UART_RxISR_16BIT_FIFOEN+0x110>
 80099a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80099a2:	2201      	movs	r2, #1
 80099a4:	4013      	ands	r3, r2
 80099a6:	d00b      	beq.n	80099c0 <UART_RxISR_16BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	2204      	movs	r2, #4
 80099ae:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	228c      	movs	r2, #140	; 0x8c
 80099b4:	589b      	ldr	r3, [r3, r2]
 80099b6:	2202      	movs	r2, #2
 80099b8:	431a      	orrs	r2, r3
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	218c      	movs	r1, #140	; 0x8c
 80099be:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	228c      	movs	r2, #140	; 0x8c
 80099c4:	589b      	ldr	r3, [r3, r2]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d007      	beq.n	80099da <UART_RxISR_16BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	0018      	movs	r0, r3
 80099ce:	f7fe fe23 	bl	8008618 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	228c      	movs	r2, #140	; 0x8c
 80099d6:	2100      	movs	r1, #0
 80099d8:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	225e      	movs	r2, #94	; 0x5e
 80099de:	5a9b      	ldrh	r3, [r3, r2]
 80099e0:	b29b      	uxth	r3, r3
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d170      	bne.n	8009ac8 <UART_RxISR_16BIT_FIFOEN+0x218>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80099e6:	f3ef 8310 	mrs	r3, PRIMASK
 80099ea:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80099ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80099ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80099f0:	2301      	movs	r3, #1
 80099f2:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80099f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099f6:	f383 8810 	msr	PRIMASK, r3
}
 80099fa:	46c0      	nop			; (mov r8, r8)
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	681a      	ldr	r2, [r3, #0]
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	495f      	ldr	r1, [pc, #380]	; (8009b84 <UART_RxISR_16BIT_FIFOEN+0x2d4>)
 8009a08:	400a      	ands	r2, r1
 8009a0a:	601a      	str	r2, [r3, #0]
 8009a0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009a0e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a12:	f383 8810 	msr	PRIMASK, r3
}
 8009a16:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009a18:	f3ef 8310 	mrs	r3, PRIMASK
 8009a1c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8009a1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009a20:	65bb      	str	r3, [r7, #88]	; 0x58
 8009a22:	2301      	movs	r3, #1
 8009a24:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009a26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a28:	f383 8810 	msr	PRIMASK, r3
}
 8009a2c:	46c0      	nop			; (mov r8, r8)
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	689a      	ldr	r2, [r3, #8]
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	4953      	ldr	r1, [pc, #332]	; (8009b88 <UART_RxISR_16BIT_FIFOEN+0x2d8>)
 8009a3a:	400a      	ands	r2, r1
 8009a3c:	609a      	str	r2, [r3, #8]
 8009a3e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009a40:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009a42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a44:	f383 8810 	msr	PRIMASK, r3
}
 8009a48:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	2288      	movs	r2, #136	; 0x88
 8009a4e:	2120      	movs	r1, #32
 8009a50:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	2200      	movs	r2, #0
 8009a56:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a5c:	2b01      	cmp	r3, #1
 8009a5e:	d12f      	bne.n	8009ac0 <UART_RxISR_16BIT_FIFOEN+0x210>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	2200      	movs	r2, #0
 8009a64:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009a66:	f3ef 8310 	mrs	r3, PRIMASK
 8009a6a:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8009a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a6e:	657b      	str	r3, [r7, #84]	; 0x54
 8009a70:	2301      	movs	r3, #1
 8009a72:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a76:	f383 8810 	msr	PRIMASK, r3
}
 8009a7a:	46c0      	nop			; (mov r8, r8)
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	681a      	ldr	r2, [r3, #0]
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	2110      	movs	r1, #16
 8009a88:	438a      	bics	r2, r1
 8009a8a:	601a      	str	r2, [r3, #0]
 8009a8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a92:	f383 8810 	msr	PRIMASK, r3
}
 8009a96:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	69db      	ldr	r3, [r3, #28]
 8009a9e:	2210      	movs	r2, #16
 8009aa0:	4013      	ands	r3, r2
 8009aa2:	2b10      	cmp	r3, #16
 8009aa4:	d103      	bne.n	8009aae <UART_RxISR_16BIT_FIFOEN+0x1fe>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	2210      	movs	r2, #16
 8009aac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	225c      	movs	r2, #92	; 0x5c
 8009ab2:	5a9a      	ldrh	r2, [r3, r2]
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	0011      	movs	r1, r2
 8009ab8:	0018      	movs	r0, r3
 8009aba:	f7fe fdb5 	bl	8008628 <HAL_UARTEx_RxEventCallback>
 8009abe:	e003      	b.n	8009ac8 <UART_RxISR_16BIT_FIFOEN+0x218>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	0018      	movs	r0, r3
 8009ac4:	f7f9 fe26 	bl	8003714 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009ac8:	2366      	movs	r3, #102	; 0x66
 8009aca:	18fb      	adds	r3, r7, r3
 8009acc:	881b      	ldrh	r3, [r3, #0]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d004      	beq.n	8009adc <UART_RxISR_16BIT_FIFOEN+0x22c>
 8009ad2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009ad4:	2220      	movs	r2, #32
 8009ad6:	4013      	ands	r3, r2
 8009ad8:	d000      	beq.n	8009adc <UART_RxISR_16BIT_FIFOEN+0x22c>
 8009ada:	e70c      	b.n	80098f6 <UART_RxISR_16BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009adc:	2052      	movs	r0, #82	; 0x52
 8009ade:	183b      	adds	r3, r7, r0
 8009ae0:	687a      	ldr	r2, [r7, #4]
 8009ae2:	215e      	movs	r1, #94	; 0x5e
 8009ae4:	5a52      	ldrh	r2, [r2, r1]
 8009ae6:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009ae8:	0001      	movs	r1, r0
 8009aea:	187b      	adds	r3, r7, r1
 8009aec:	881b      	ldrh	r3, [r3, #0]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d044      	beq.n	8009b7c <UART_RxISR_16BIT_FIFOEN+0x2cc>
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	2268      	movs	r2, #104	; 0x68
 8009af6:	5a9b      	ldrh	r3, [r3, r2]
 8009af8:	187a      	adds	r2, r7, r1
 8009afa:	8812      	ldrh	r2, [r2, #0]
 8009afc:	429a      	cmp	r2, r3
 8009afe:	d23d      	bcs.n	8009b7c <UART_RxISR_16BIT_FIFOEN+0x2cc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009b00:	f3ef 8310 	mrs	r3, PRIMASK
 8009b04:	60fb      	str	r3, [r7, #12]
  return(result);
 8009b06:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009b08:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009b0a:	2301      	movs	r3, #1
 8009b0c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009b0e:	693b      	ldr	r3, [r7, #16]
 8009b10:	f383 8810 	msr	PRIMASK, r3
}
 8009b14:	46c0      	nop			; (mov r8, r8)
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	689a      	ldr	r2, [r3, #8]
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	491a      	ldr	r1, [pc, #104]	; (8009b8c <UART_RxISR_16BIT_FIFOEN+0x2dc>)
 8009b22:	400a      	ands	r2, r1
 8009b24:	609a      	str	r2, [r3, #8]
 8009b26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b28:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009b2a:	697b      	ldr	r3, [r7, #20]
 8009b2c:	f383 8810 	msr	PRIMASK, r3
}
 8009b30:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	4a16      	ldr	r2, [pc, #88]	; (8009b90 <UART_RxISR_16BIT_FIFOEN+0x2e0>)
 8009b36:	671a      	str	r2, [r3, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009b38:	f3ef 8310 	mrs	r3, PRIMASK
 8009b3c:	61bb      	str	r3, [r7, #24]
  return(result);
 8009b3e:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009b40:	64bb      	str	r3, [r7, #72]	; 0x48
 8009b42:	2301      	movs	r3, #1
 8009b44:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009b46:	69fb      	ldr	r3, [r7, #28]
 8009b48:	f383 8810 	msr	PRIMASK, r3
}
 8009b4c:	46c0      	nop			; (mov r8, r8)
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	681a      	ldr	r2, [r3, #0]
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	2120      	movs	r1, #32
 8009b5a:	430a      	orrs	r2, r1
 8009b5c:	601a      	str	r2, [r3, #0]
 8009b5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b60:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009b62:	6a3b      	ldr	r3, [r7, #32]
 8009b64:	f383 8810 	msr	PRIMASK, r3
}
 8009b68:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009b6a:	e007      	b.n	8009b7c <UART_RxISR_16BIT_FIFOEN+0x2cc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	699a      	ldr	r2, [r3, #24]
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	2108      	movs	r1, #8
 8009b78:	430a      	orrs	r2, r1
 8009b7a:	619a      	str	r2, [r3, #24]
}
 8009b7c:	46c0      	nop			; (mov r8, r8)
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	b01e      	add	sp, #120	; 0x78
 8009b82:	bd80      	pop	{r7, pc}
 8009b84:	fffffeff 	.word	0xfffffeff
 8009b88:	effffffe 	.word	0xeffffffe
 8009b8c:	efffffff 	.word	0xefffffff
 8009b90:	08009461 	.word	0x08009461

08009b94 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b082      	sub	sp, #8
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009b9c:	46c0      	nop			; (mov r8, r8)
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	b002      	add	sp, #8
 8009ba2:	bd80      	pop	{r7, pc}

08009ba4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	b082      	sub	sp, #8
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009bac:	46c0      	nop			; (mov r8, r8)
 8009bae:	46bd      	mov	sp, r7
 8009bb0:	b002      	add	sp, #8
 8009bb2:	bd80      	pop	{r7, pc}

08009bb4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	b082      	sub	sp, #8
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009bbc:	46c0      	nop			; (mov r8, r8)
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	b002      	add	sp, #8
 8009bc2:	bd80      	pop	{r7, pc}

08009bc4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	b084      	sub	sp, #16
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	2280      	movs	r2, #128	; 0x80
 8009bd0:	5c9b      	ldrb	r3, [r3, r2]
 8009bd2:	2b01      	cmp	r3, #1
 8009bd4:	d101      	bne.n	8009bda <HAL_UARTEx_DisableFifoMode+0x16>
 8009bd6:	2302      	movs	r3, #2
 8009bd8:	e027      	b.n	8009c2a <HAL_UARTEx_DisableFifoMode+0x66>
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	2280      	movs	r2, #128	; 0x80
 8009bde:	2101      	movs	r1, #1
 8009be0:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	2284      	movs	r2, #132	; 0x84
 8009be6:	2124      	movs	r1, #36	; 0x24
 8009be8:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	681a      	ldr	r2, [r3, #0]
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	2101      	movs	r1, #1
 8009bfe:	438a      	bics	r2, r1
 8009c00:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	4a0b      	ldr	r2, [pc, #44]	; (8009c34 <HAL_UARTEx_DisableFifoMode+0x70>)
 8009c06:	4013      	ands	r3, r2
 8009c08:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	68fa      	ldr	r2, [r7, #12]
 8009c16:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	2284      	movs	r2, #132	; 0x84
 8009c1c:	2120      	movs	r1, #32
 8009c1e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	2280      	movs	r2, #128	; 0x80
 8009c24:	2100      	movs	r1, #0
 8009c26:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009c28:	2300      	movs	r3, #0
}
 8009c2a:	0018      	movs	r0, r3
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	b004      	add	sp, #16
 8009c30:	bd80      	pop	{r7, pc}
 8009c32:	46c0      	nop			; (mov r8, r8)
 8009c34:	dfffffff 	.word	0xdfffffff

08009c38 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	b084      	sub	sp, #16
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
 8009c40:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	2280      	movs	r2, #128	; 0x80
 8009c46:	5c9b      	ldrb	r3, [r3, r2]
 8009c48:	2b01      	cmp	r3, #1
 8009c4a:	d101      	bne.n	8009c50 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009c4c:	2302      	movs	r3, #2
 8009c4e:	e02e      	b.n	8009cae <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	2280      	movs	r2, #128	; 0x80
 8009c54:	2101      	movs	r1, #1
 8009c56:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	2284      	movs	r2, #132	; 0x84
 8009c5c:	2124      	movs	r1, #36	; 0x24
 8009c5e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	681a      	ldr	r2, [r3, #0]
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	2101      	movs	r1, #1
 8009c74:	438a      	bics	r2, r1
 8009c76:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	689b      	ldr	r3, [r3, #8]
 8009c7e:	00db      	lsls	r3, r3, #3
 8009c80:	08d9      	lsrs	r1, r3, #3
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	683a      	ldr	r2, [r7, #0]
 8009c88:	430a      	orrs	r2, r1
 8009c8a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	0018      	movs	r0, r3
 8009c90:	f000 f854 	bl	8009d3c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	68fa      	ldr	r2, [r7, #12]
 8009c9a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	2284      	movs	r2, #132	; 0x84
 8009ca0:	2120      	movs	r1, #32
 8009ca2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	2280      	movs	r2, #128	; 0x80
 8009ca8:	2100      	movs	r1, #0
 8009caa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009cac:	2300      	movs	r3, #0
}
 8009cae:	0018      	movs	r0, r3
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	b004      	add	sp, #16
 8009cb4:	bd80      	pop	{r7, pc}
	...

08009cb8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b084      	sub	sp, #16
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
 8009cc0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	2280      	movs	r2, #128	; 0x80
 8009cc6:	5c9b      	ldrb	r3, [r3, r2]
 8009cc8:	2b01      	cmp	r3, #1
 8009cca:	d101      	bne.n	8009cd0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009ccc:	2302      	movs	r3, #2
 8009cce:	e02f      	b.n	8009d30 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	2280      	movs	r2, #128	; 0x80
 8009cd4:	2101      	movs	r1, #1
 8009cd6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	2284      	movs	r2, #132	; 0x84
 8009cdc:	2124      	movs	r1, #36	; 0x24
 8009cde:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	681a      	ldr	r2, [r3, #0]
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	2101      	movs	r1, #1
 8009cf4:	438a      	bics	r2, r1
 8009cf6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	689b      	ldr	r3, [r3, #8]
 8009cfe:	4a0e      	ldr	r2, [pc, #56]	; (8009d38 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8009d00:	4013      	ands	r3, r2
 8009d02:	0019      	movs	r1, r3
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	683a      	ldr	r2, [r7, #0]
 8009d0a:	430a      	orrs	r2, r1
 8009d0c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	0018      	movs	r0, r3
 8009d12:	f000 f813 	bl	8009d3c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	68fa      	ldr	r2, [r7, #12]
 8009d1c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	2284      	movs	r2, #132	; 0x84
 8009d22:	2120      	movs	r1, #32
 8009d24:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	2280      	movs	r2, #128	; 0x80
 8009d2a:	2100      	movs	r1, #0
 8009d2c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009d2e:	2300      	movs	r3, #0
}
 8009d30:	0018      	movs	r0, r3
 8009d32:	46bd      	mov	sp, r7
 8009d34:	b004      	add	sp, #16
 8009d36:	bd80      	pop	{r7, pc}
 8009d38:	f1ffffff 	.word	0xf1ffffff

08009d3c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009d3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d3e:	b085      	sub	sp, #20
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d108      	bne.n	8009d5e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	226a      	movs	r2, #106	; 0x6a
 8009d50:	2101      	movs	r1, #1
 8009d52:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	2268      	movs	r2, #104	; 0x68
 8009d58:	2101      	movs	r1, #1
 8009d5a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009d5c:	e043      	b.n	8009de6 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009d5e:	260f      	movs	r6, #15
 8009d60:	19bb      	adds	r3, r7, r6
 8009d62:	2208      	movs	r2, #8
 8009d64:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009d66:	200e      	movs	r0, #14
 8009d68:	183b      	adds	r3, r7, r0
 8009d6a:	2208      	movs	r2, #8
 8009d6c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	689b      	ldr	r3, [r3, #8]
 8009d74:	0e5b      	lsrs	r3, r3, #25
 8009d76:	b2da      	uxtb	r2, r3
 8009d78:	240d      	movs	r4, #13
 8009d7a:	193b      	adds	r3, r7, r4
 8009d7c:	2107      	movs	r1, #7
 8009d7e:	400a      	ands	r2, r1
 8009d80:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	689b      	ldr	r3, [r3, #8]
 8009d88:	0f5b      	lsrs	r3, r3, #29
 8009d8a:	b2da      	uxtb	r2, r3
 8009d8c:	250c      	movs	r5, #12
 8009d8e:	197b      	adds	r3, r7, r5
 8009d90:	2107      	movs	r1, #7
 8009d92:	400a      	ands	r2, r1
 8009d94:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009d96:	183b      	adds	r3, r7, r0
 8009d98:	781b      	ldrb	r3, [r3, #0]
 8009d9a:	197a      	adds	r2, r7, r5
 8009d9c:	7812      	ldrb	r2, [r2, #0]
 8009d9e:	4914      	ldr	r1, [pc, #80]	; (8009df0 <UARTEx_SetNbDataToProcess+0xb4>)
 8009da0:	5c8a      	ldrb	r2, [r1, r2]
 8009da2:	435a      	muls	r2, r3
 8009da4:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8009da6:	197b      	adds	r3, r7, r5
 8009da8:	781b      	ldrb	r3, [r3, #0]
 8009daa:	4a12      	ldr	r2, [pc, #72]	; (8009df4 <UARTEx_SetNbDataToProcess+0xb8>)
 8009dac:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009dae:	0019      	movs	r1, r3
 8009db0:	f7f6 fa4e 	bl	8000250 <__divsi3>
 8009db4:	0003      	movs	r3, r0
 8009db6:	b299      	uxth	r1, r3
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	226a      	movs	r2, #106	; 0x6a
 8009dbc:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009dbe:	19bb      	adds	r3, r7, r6
 8009dc0:	781b      	ldrb	r3, [r3, #0]
 8009dc2:	193a      	adds	r2, r7, r4
 8009dc4:	7812      	ldrb	r2, [r2, #0]
 8009dc6:	490a      	ldr	r1, [pc, #40]	; (8009df0 <UARTEx_SetNbDataToProcess+0xb4>)
 8009dc8:	5c8a      	ldrb	r2, [r1, r2]
 8009dca:	435a      	muls	r2, r3
 8009dcc:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8009dce:	193b      	adds	r3, r7, r4
 8009dd0:	781b      	ldrb	r3, [r3, #0]
 8009dd2:	4a08      	ldr	r2, [pc, #32]	; (8009df4 <UARTEx_SetNbDataToProcess+0xb8>)
 8009dd4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009dd6:	0019      	movs	r1, r3
 8009dd8:	f7f6 fa3a 	bl	8000250 <__divsi3>
 8009ddc:	0003      	movs	r3, r0
 8009dde:	b299      	uxth	r1, r3
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	2268      	movs	r2, #104	; 0x68
 8009de4:	5299      	strh	r1, [r3, r2]
}
 8009de6:	46c0      	nop			; (mov r8, r8)
 8009de8:	46bd      	mov	sp, r7
 8009dea:	b005      	add	sp, #20
 8009dec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009dee:	46c0      	nop			; (mov r8, r8)
 8009df0:	0800cfc8 	.word	0x0800cfc8
 8009df4:	0800cfd0 	.word	0x0800cfd0

08009df8 <__errno>:
 8009df8:	4b01      	ldr	r3, [pc, #4]	; (8009e00 <__errno+0x8>)
 8009dfa:	6818      	ldr	r0, [r3, #0]
 8009dfc:	4770      	bx	lr
 8009dfe:	46c0      	nop			; (mov r8, r8)
 8009e00:	20000010 	.word	0x20000010

08009e04 <__libc_init_array>:
 8009e04:	b570      	push	{r4, r5, r6, lr}
 8009e06:	2600      	movs	r6, #0
 8009e08:	4d0c      	ldr	r5, [pc, #48]	; (8009e3c <__libc_init_array+0x38>)
 8009e0a:	4c0d      	ldr	r4, [pc, #52]	; (8009e40 <__libc_init_array+0x3c>)
 8009e0c:	1b64      	subs	r4, r4, r5
 8009e0e:	10a4      	asrs	r4, r4, #2
 8009e10:	42a6      	cmp	r6, r4
 8009e12:	d109      	bne.n	8009e28 <__libc_init_array+0x24>
 8009e14:	2600      	movs	r6, #0
 8009e16:	f002 ffdd 	bl	800cdd4 <_init>
 8009e1a:	4d0a      	ldr	r5, [pc, #40]	; (8009e44 <__libc_init_array+0x40>)
 8009e1c:	4c0a      	ldr	r4, [pc, #40]	; (8009e48 <__libc_init_array+0x44>)
 8009e1e:	1b64      	subs	r4, r4, r5
 8009e20:	10a4      	asrs	r4, r4, #2
 8009e22:	42a6      	cmp	r6, r4
 8009e24:	d105      	bne.n	8009e32 <__libc_init_array+0x2e>
 8009e26:	bd70      	pop	{r4, r5, r6, pc}
 8009e28:	00b3      	lsls	r3, r6, #2
 8009e2a:	58eb      	ldr	r3, [r5, r3]
 8009e2c:	4798      	blx	r3
 8009e2e:	3601      	adds	r6, #1
 8009e30:	e7ee      	b.n	8009e10 <__libc_init_array+0xc>
 8009e32:	00b3      	lsls	r3, r6, #2
 8009e34:	58eb      	ldr	r3, [r5, r3]
 8009e36:	4798      	blx	r3
 8009e38:	3601      	adds	r6, #1
 8009e3a:	e7f2      	b.n	8009e22 <__libc_init_array+0x1e>
 8009e3c:	0800d3bc 	.word	0x0800d3bc
 8009e40:	0800d3bc 	.word	0x0800d3bc
 8009e44:	0800d3bc 	.word	0x0800d3bc
 8009e48:	0800d3c0 	.word	0x0800d3c0

08009e4c <memset>:
 8009e4c:	0003      	movs	r3, r0
 8009e4e:	1882      	adds	r2, r0, r2
 8009e50:	4293      	cmp	r3, r2
 8009e52:	d100      	bne.n	8009e56 <memset+0xa>
 8009e54:	4770      	bx	lr
 8009e56:	7019      	strb	r1, [r3, #0]
 8009e58:	3301      	adds	r3, #1
 8009e5a:	e7f9      	b.n	8009e50 <memset+0x4>

08009e5c <__cvt>:
 8009e5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e5e:	001e      	movs	r6, r3
 8009e60:	2300      	movs	r3, #0
 8009e62:	0014      	movs	r4, r2
 8009e64:	b08b      	sub	sp, #44	; 0x2c
 8009e66:	429e      	cmp	r6, r3
 8009e68:	da04      	bge.n	8009e74 <__cvt+0x18>
 8009e6a:	2180      	movs	r1, #128	; 0x80
 8009e6c:	0609      	lsls	r1, r1, #24
 8009e6e:	1873      	adds	r3, r6, r1
 8009e70:	001e      	movs	r6, r3
 8009e72:	232d      	movs	r3, #45	; 0x2d
 8009e74:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009e76:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8009e78:	7013      	strb	r3, [r2, #0]
 8009e7a:	2320      	movs	r3, #32
 8009e7c:	2203      	movs	r2, #3
 8009e7e:	439f      	bics	r7, r3
 8009e80:	2f46      	cmp	r7, #70	; 0x46
 8009e82:	d007      	beq.n	8009e94 <__cvt+0x38>
 8009e84:	003b      	movs	r3, r7
 8009e86:	3b45      	subs	r3, #69	; 0x45
 8009e88:	4259      	negs	r1, r3
 8009e8a:	414b      	adcs	r3, r1
 8009e8c:	9910      	ldr	r1, [sp, #64]	; 0x40
 8009e8e:	3a01      	subs	r2, #1
 8009e90:	18cb      	adds	r3, r1, r3
 8009e92:	9310      	str	r3, [sp, #64]	; 0x40
 8009e94:	ab09      	add	r3, sp, #36	; 0x24
 8009e96:	9304      	str	r3, [sp, #16]
 8009e98:	ab08      	add	r3, sp, #32
 8009e9a:	9303      	str	r3, [sp, #12]
 8009e9c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009e9e:	9200      	str	r2, [sp, #0]
 8009ea0:	9302      	str	r3, [sp, #8]
 8009ea2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009ea4:	0022      	movs	r2, r4
 8009ea6:	9301      	str	r3, [sp, #4]
 8009ea8:	0033      	movs	r3, r6
 8009eaa:	f000 fd13 	bl	800a8d4 <_dtoa_r>
 8009eae:	0005      	movs	r5, r0
 8009eb0:	2f47      	cmp	r7, #71	; 0x47
 8009eb2:	d102      	bne.n	8009eba <__cvt+0x5e>
 8009eb4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009eb6:	07db      	lsls	r3, r3, #31
 8009eb8:	d528      	bpl.n	8009f0c <__cvt+0xb0>
 8009eba:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009ebc:	18eb      	adds	r3, r5, r3
 8009ebe:	9307      	str	r3, [sp, #28]
 8009ec0:	2f46      	cmp	r7, #70	; 0x46
 8009ec2:	d114      	bne.n	8009eee <__cvt+0x92>
 8009ec4:	782b      	ldrb	r3, [r5, #0]
 8009ec6:	2b30      	cmp	r3, #48	; 0x30
 8009ec8:	d10c      	bne.n	8009ee4 <__cvt+0x88>
 8009eca:	2200      	movs	r2, #0
 8009ecc:	2300      	movs	r3, #0
 8009ece:	0020      	movs	r0, r4
 8009ed0:	0031      	movs	r1, r6
 8009ed2:	f7f6 fab9 	bl	8000448 <__aeabi_dcmpeq>
 8009ed6:	2800      	cmp	r0, #0
 8009ed8:	d104      	bne.n	8009ee4 <__cvt+0x88>
 8009eda:	2301      	movs	r3, #1
 8009edc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009ede:	1a9b      	subs	r3, r3, r2
 8009ee0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009ee2:	6013      	str	r3, [r2, #0]
 8009ee4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009ee6:	9a07      	ldr	r2, [sp, #28]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	18d3      	adds	r3, r2, r3
 8009eec:	9307      	str	r3, [sp, #28]
 8009eee:	2200      	movs	r2, #0
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	0020      	movs	r0, r4
 8009ef4:	0031      	movs	r1, r6
 8009ef6:	f7f6 faa7 	bl	8000448 <__aeabi_dcmpeq>
 8009efa:	2800      	cmp	r0, #0
 8009efc:	d001      	beq.n	8009f02 <__cvt+0xa6>
 8009efe:	9b07      	ldr	r3, [sp, #28]
 8009f00:	9309      	str	r3, [sp, #36]	; 0x24
 8009f02:	2230      	movs	r2, #48	; 0x30
 8009f04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f06:	9907      	ldr	r1, [sp, #28]
 8009f08:	428b      	cmp	r3, r1
 8009f0a:	d306      	bcc.n	8009f1a <__cvt+0xbe>
 8009f0c:	0028      	movs	r0, r5
 8009f0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f10:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009f12:	1b5b      	subs	r3, r3, r5
 8009f14:	6013      	str	r3, [r2, #0]
 8009f16:	b00b      	add	sp, #44	; 0x2c
 8009f18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f1a:	1c59      	adds	r1, r3, #1
 8009f1c:	9109      	str	r1, [sp, #36]	; 0x24
 8009f1e:	701a      	strb	r2, [r3, #0]
 8009f20:	e7f0      	b.n	8009f04 <__cvt+0xa8>

08009f22 <__exponent>:
 8009f22:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f24:	1c83      	adds	r3, r0, #2
 8009f26:	b087      	sub	sp, #28
 8009f28:	9303      	str	r3, [sp, #12]
 8009f2a:	0005      	movs	r5, r0
 8009f2c:	000c      	movs	r4, r1
 8009f2e:	232b      	movs	r3, #43	; 0x2b
 8009f30:	7002      	strb	r2, [r0, #0]
 8009f32:	2900      	cmp	r1, #0
 8009f34:	da01      	bge.n	8009f3a <__exponent+0x18>
 8009f36:	424c      	negs	r4, r1
 8009f38:	3302      	adds	r3, #2
 8009f3a:	706b      	strb	r3, [r5, #1]
 8009f3c:	2c09      	cmp	r4, #9
 8009f3e:	dd31      	ble.n	8009fa4 <__exponent+0x82>
 8009f40:	270a      	movs	r7, #10
 8009f42:	ab04      	add	r3, sp, #16
 8009f44:	1dde      	adds	r6, r3, #7
 8009f46:	0020      	movs	r0, r4
 8009f48:	0039      	movs	r1, r7
 8009f4a:	9601      	str	r6, [sp, #4]
 8009f4c:	f7f6 fa66 	bl	800041c <__aeabi_idivmod>
 8009f50:	3e01      	subs	r6, #1
 8009f52:	3130      	adds	r1, #48	; 0x30
 8009f54:	0020      	movs	r0, r4
 8009f56:	7031      	strb	r1, [r6, #0]
 8009f58:	0039      	movs	r1, r7
 8009f5a:	9402      	str	r4, [sp, #8]
 8009f5c:	f7f6 f978 	bl	8000250 <__divsi3>
 8009f60:	9b02      	ldr	r3, [sp, #8]
 8009f62:	0004      	movs	r4, r0
 8009f64:	2b63      	cmp	r3, #99	; 0x63
 8009f66:	dcee      	bgt.n	8009f46 <__exponent+0x24>
 8009f68:	9b01      	ldr	r3, [sp, #4]
 8009f6a:	3430      	adds	r4, #48	; 0x30
 8009f6c:	1e9a      	subs	r2, r3, #2
 8009f6e:	0013      	movs	r3, r2
 8009f70:	9903      	ldr	r1, [sp, #12]
 8009f72:	7014      	strb	r4, [r2, #0]
 8009f74:	a804      	add	r0, sp, #16
 8009f76:	3007      	adds	r0, #7
 8009f78:	4298      	cmp	r0, r3
 8009f7a:	d80e      	bhi.n	8009f9a <__exponent+0x78>
 8009f7c:	ab04      	add	r3, sp, #16
 8009f7e:	3307      	adds	r3, #7
 8009f80:	2000      	movs	r0, #0
 8009f82:	429a      	cmp	r2, r3
 8009f84:	d804      	bhi.n	8009f90 <__exponent+0x6e>
 8009f86:	ab04      	add	r3, sp, #16
 8009f88:	3009      	adds	r0, #9
 8009f8a:	18c0      	adds	r0, r0, r3
 8009f8c:	9b01      	ldr	r3, [sp, #4]
 8009f8e:	1ac0      	subs	r0, r0, r3
 8009f90:	9b03      	ldr	r3, [sp, #12]
 8009f92:	1818      	adds	r0, r3, r0
 8009f94:	1b40      	subs	r0, r0, r5
 8009f96:	b007      	add	sp, #28
 8009f98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f9a:	7818      	ldrb	r0, [r3, #0]
 8009f9c:	3301      	adds	r3, #1
 8009f9e:	7008      	strb	r0, [r1, #0]
 8009fa0:	3101      	adds	r1, #1
 8009fa2:	e7e7      	b.n	8009f74 <__exponent+0x52>
 8009fa4:	2330      	movs	r3, #48	; 0x30
 8009fa6:	18e4      	adds	r4, r4, r3
 8009fa8:	70ab      	strb	r3, [r5, #2]
 8009faa:	1d28      	adds	r0, r5, #4
 8009fac:	70ec      	strb	r4, [r5, #3]
 8009fae:	e7f1      	b.n	8009f94 <__exponent+0x72>

08009fb0 <_printf_float>:
 8009fb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009fb2:	b095      	sub	sp, #84	; 0x54
 8009fb4:	000c      	movs	r4, r1
 8009fb6:	9209      	str	r2, [sp, #36]	; 0x24
 8009fb8:	001e      	movs	r6, r3
 8009fba:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8009fbc:	0007      	movs	r7, r0
 8009fbe:	f001 faa3 	bl	800b508 <_localeconv_r>
 8009fc2:	6803      	ldr	r3, [r0, #0]
 8009fc4:	0018      	movs	r0, r3
 8009fc6:	930c      	str	r3, [sp, #48]	; 0x30
 8009fc8:	f7f6 f89c 	bl	8000104 <strlen>
 8009fcc:	2300      	movs	r3, #0
 8009fce:	9312      	str	r3, [sp, #72]	; 0x48
 8009fd0:	7e23      	ldrb	r3, [r4, #24]
 8009fd2:	2207      	movs	r2, #7
 8009fd4:	930a      	str	r3, [sp, #40]	; 0x28
 8009fd6:	6823      	ldr	r3, [r4, #0]
 8009fd8:	900e      	str	r0, [sp, #56]	; 0x38
 8009fda:	930d      	str	r3, [sp, #52]	; 0x34
 8009fdc:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009fde:	682b      	ldr	r3, [r5, #0]
 8009fe0:	05c9      	lsls	r1, r1, #23
 8009fe2:	d547      	bpl.n	800a074 <_printf_float+0xc4>
 8009fe4:	189b      	adds	r3, r3, r2
 8009fe6:	4393      	bics	r3, r2
 8009fe8:	001a      	movs	r2, r3
 8009fea:	3208      	adds	r2, #8
 8009fec:	602a      	str	r2, [r5, #0]
 8009fee:	681a      	ldr	r2, [r3, #0]
 8009ff0:	685b      	ldr	r3, [r3, #4]
 8009ff2:	64a2      	str	r2, [r4, #72]	; 0x48
 8009ff4:	64e3      	str	r3, [r4, #76]	; 0x4c
 8009ff6:	2201      	movs	r2, #1
 8009ff8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8009ffa:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8009ffc:	930b      	str	r3, [sp, #44]	; 0x2c
 8009ffe:	006b      	lsls	r3, r5, #1
 800a000:	085b      	lsrs	r3, r3, #1
 800a002:	930f      	str	r3, [sp, #60]	; 0x3c
 800a004:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800a006:	4ba7      	ldr	r3, [pc, #668]	; (800a2a4 <_printf_float+0x2f4>)
 800a008:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a00a:	4252      	negs	r2, r2
 800a00c:	f7f8 f872 	bl	80020f4 <__aeabi_dcmpun>
 800a010:	2800      	cmp	r0, #0
 800a012:	d131      	bne.n	800a078 <_printf_float+0xc8>
 800a014:	2201      	movs	r2, #1
 800a016:	4ba3      	ldr	r3, [pc, #652]	; (800a2a4 <_printf_float+0x2f4>)
 800a018:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800a01a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a01c:	4252      	negs	r2, r2
 800a01e:	f7f6 fa23 	bl	8000468 <__aeabi_dcmple>
 800a022:	2800      	cmp	r0, #0
 800a024:	d128      	bne.n	800a078 <_printf_float+0xc8>
 800a026:	2200      	movs	r2, #0
 800a028:	2300      	movs	r3, #0
 800a02a:	0029      	movs	r1, r5
 800a02c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800a02e:	f7f6 fa11 	bl	8000454 <__aeabi_dcmplt>
 800a032:	2800      	cmp	r0, #0
 800a034:	d003      	beq.n	800a03e <_printf_float+0x8e>
 800a036:	0023      	movs	r3, r4
 800a038:	222d      	movs	r2, #45	; 0x2d
 800a03a:	3343      	adds	r3, #67	; 0x43
 800a03c:	701a      	strb	r2, [r3, #0]
 800a03e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a040:	4d99      	ldr	r5, [pc, #612]	; (800a2a8 <_printf_float+0x2f8>)
 800a042:	2b47      	cmp	r3, #71	; 0x47
 800a044:	d900      	bls.n	800a048 <_printf_float+0x98>
 800a046:	4d99      	ldr	r5, [pc, #612]	; (800a2ac <_printf_float+0x2fc>)
 800a048:	2303      	movs	r3, #3
 800a04a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a04c:	6123      	str	r3, [r4, #16]
 800a04e:	3301      	adds	r3, #1
 800a050:	439a      	bics	r2, r3
 800a052:	2300      	movs	r3, #0
 800a054:	6022      	str	r2, [r4, #0]
 800a056:	930b      	str	r3, [sp, #44]	; 0x2c
 800a058:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a05a:	0021      	movs	r1, r4
 800a05c:	0038      	movs	r0, r7
 800a05e:	9600      	str	r6, [sp, #0]
 800a060:	aa13      	add	r2, sp, #76	; 0x4c
 800a062:	f000 f9e7 	bl	800a434 <_printf_common>
 800a066:	1c43      	adds	r3, r0, #1
 800a068:	d000      	beq.n	800a06c <_printf_float+0xbc>
 800a06a:	e0a2      	b.n	800a1b2 <_printf_float+0x202>
 800a06c:	2001      	movs	r0, #1
 800a06e:	4240      	negs	r0, r0
 800a070:	b015      	add	sp, #84	; 0x54
 800a072:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a074:	3307      	adds	r3, #7
 800a076:	e7b6      	b.n	8009fe6 <_printf_float+0x36>
 800a078:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a07a:	002b      	movs	r3, r5
 800a07c:	0010      	movs	r0, r2
 800a07e:	0029      	movs	r1, r5
 800a080:	f7f8 f838 	bl	80020f4 <__aeabi_dcmpun>
 800a084:	2800      	cmp	r0, #0
 800a086:	d00b      	beq.n	800a0a0 <_printf_float+0xf0>
 800a088:	2d00      	cmp	r5, #0
 800a08a:	da03      	bge.n	800a094 <_printf_float+0xe4>
 800a08c:	0023      	movs	r3, r4
 800a08e:	222d      	movs	r2, #45	; 0x2d
 800a090:	3343      	adds	r3, #67	; 0x43
 800a092:	701a      	strb	r2, [r3, #0]
 800a094:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a096:	4d86      	ldr	r5, [pc, #536]	; (800a2b0 <_printf_float+0x300>)
 800a098:	2b47      	cmp	r3, #71	; 0x47
 800a09a:	d9d5      	bls.n	800a048 <_printf_float+0x98>
 800a09c:	4d85      	ldr	r5, [pc, #532]	; (800a2b4 <_printf_float+0x304>)
 800a09e:	e7d3      	b.n	800a048 <_printf_float+0x98>
 800a0a0:	2220      	movs	r2, #32
 800a0a2:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a0a4:	6863      	ldr	r3, [r4, #4]
 800a0a6:	4391      	bics	r1, r2
 800a0a8:	910f      	str	r1, [sp, #60]	; 0x3c
 800a0aa:	1c5a      	adds	r2, r3, #1
 800a0ac:	d149      	bne.n	800a142 <_printf_float+0x192>
 800a0ae:	3307      	adds	r3, #7
 800a0b0:	6063      	str	r3, [r4, #4]
 800a0b2:	2380      	movs	r3, #128	; 0x80
 800a0b4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a0b6:	00db      	lsls	r3, r3, #3
 800a0b8:	4313      	orrs	r3, r2
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	9206      	str	r2, [sp, #24]
 800a0be:	aa12      	add	r2, sp, #72	; 0x48
 800a0c0:	9205      	str	r2, [sp, #20]
 800a0c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a0c4:	a908      	add	r1, sp, #32
 800a0c6:	9204      	str	r2, [sp, #16]
 800a0c8:	aa11      	add	r2, sp, #68	; 0x44
 800a0ca:	9203      	str	r2, [sp, #12]
 800a0cc:	2223      	movs	r2, #35	; 0x23
 800a0ce:	6023      	str	r3, [r4, #0]
 800a0d0:	9301      	str	r3, [sp, #4]
 800a0d2:	6863      	ldr	r3, [r4, #4]
 800a0d4:	1852      	adds	r2, r2, r1
 800a0d6:	9202      	str	r2, [sp, #8]
 800a0d8:	9300      	str	r3, [sp, #0]
 800a0da:	0038      	movs	r0, r7
 800a0dc:	002b      	movs	r3, r5
 800a0de:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a0e0:	f7ff febc 	bl	8009e5c <__cvt>
 800a0e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a0e6:	0005      	movs	r5, r0
 800a0e8:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a0ea:	2b47      	cmp	r3, #71	; 0x47
 800a0ec:	d108      	bne.n	800a100 <_printf_float+0x150>
 800a0ee:	1ccb      	adds	r3, r1, #3
 800a0f0:	db02      	blt.n	800a0f8 <_printf_float+0x148>
 800a0f2:	6863      	ldr	r3, [r4, #4]
 800a0f4:	4299      	cmp	r1, r3
 800a0f6:	dd48      	ble.n	800a18a <_printf_float+0x1da>
 800a0f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0fa:	3b02      	subs	r3, #2
 800a0fc:	b2db      	uxtb	r3, r3
 800a0fe:	930a      	str	r3, [sp, #40]	; 0x28
 800a100:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a102:	2b65      	cmp	r3, #101	; 0x65
 800a104:	d824      	bhi.n	800a150 <_printf_float+0x1a0>
 800a106:	0020      	movs	r0, r4
 800a108:	001a      	movs	r2, r3
 800a10a:	3901      	subs	r1, #1
 800a10c:	3050      	adds	r0, #80	; 0x50
 800a10e:	9111      	str	r1, [sp, #68]	; 0x44
 800a110:	f7ff ff07 	bl	8009f22 <__exponent>
 800a114:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a116:	900b      	str	r0, [sp, #44]	; 0x2c
 800a118:	1813      	adds	r3, r2, r0
 800a11a:	6123      	str	r3, [r4, #16]
 800a11c:	2a01      	cmp	r2, #1
 800a11e:	dc02      	bgt.n	800a126 <_printf_float+0x176>
 800a120:	6822      	ldr	r2, [r4, #0]
 800a122:	07d2      	lsls	r2, r2, #31
 800a124:	d501      	bpl.n	800a12a <_printf_float+0x17a>
 800a126:	3301      	adds	r3, #1
 800a128:	6123      	str	r3, [r4, #16]
 800a12a:	2323      	movs	r3, #35	; 0x23
 800a12c:	aa08      	add	r2, sp, #32
 800a12e:	189b      	adds	r3, r3, r2
 800a130:	781b      	ldrb	r3, [r3, #0]
 800a132:	2b00      	cmp	r3, #0
 800a134:	d100      	bne.n	800a138 <_printf_float+0x188>
 800a136:	e78f      	b.n	800a058 <_printf_float+0xa8>
 800a138:	0023      	movs	r3, r4
 800a13a:	222d      	movs	r2, #45	; 0x2d
 800a13c:	3343      	adds	r3, #67	; 0x43
 800a13e:	701a      	strb	r2, [r3, #0]
 800a140:	e78a      	b.n	800a058 <_printf_float+0xa8>
 800a142:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a144:	2a47      	cmp	r2, #71	; 0x47
 800a146:	d1b4      	bne.n	800a0b2 <_printf_float+0x102>
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d1b2      	bne.n	800a0b2 <_printf_float+0x102>
 800a14c:	3301      	adds	r3, #1
 800a14e:	e7af      	b.n	800a0b0 <_printf_float+0x100>
 800a150:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a152:	2b66      	cmp	r3, #102	; 0x66
 800a154:	d11b      	bne.n	800a18e <_printf_float+0x1de>
 800a156:	6863      	ldr	r3, [r4, #4]
 800a158:	2900      	cmp	r1, #0
 800a15a:	dd0d      	ble.n	800a178 <_printf_float+0x1c8>
 800a15c:	6121      	str	r1, [r4, #16]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d102      	bne.n	800a168 <_printf_float+0x1b8>
 800a162:	6822      	ldr	r2, [r4, #0]
 800a164:	07d2      	lsls	r2, r2, #31
 800a166:	d502      	bpl.n	800a16e <_printf_float+0x1be>
 800a168:	3301      	adds	r3, #1
 800a16a:	1859      	adds	r1, r3, r1
 800a16c:	6121      	str	r1, [r4, #16]
 800a16e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a170:	65a3      	str	r3, [r4, #88]	; 0x58
 800a172:	2300      	movs	r3, #0
 800a174:	930b      	str	r3, [sp, #44]	; 0x2c
 800a176:	e7d8      	b.n	800a12a <_printf_float+0x17a>
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d103      	bne.n	800a184 <_printf_float+0x1d4>
 800a17c:	2201      	movs	r2, #1
 800a17e:	6821      	ldr	r1, [r4, #0]
 800a180:	4211      	tst	r1, r2
 800a182:	d000      	beq.n	800a186 <_printf_float+0x1d6>
 800a184:	1c9a      	adds	r2, r3, #2
 800a186:	6122      	str	r2, [r4, #16]
 800a188:	e7f1      	b.n	800a16e <_printf_float+0x1be>
 800a18a:	2367      	movs	r3, #103	; 0x67
 800a18c:	930a      	str	r3, [sp, #40]	; 0x28
 800a18e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a190:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a192:	4293      	cmp	r3, r2
 800a194:	db06      	blt.n	800a1a4 <_printf_float+0x1f4>
 800a196:	6822      	ldr	r2, [r4, #0]
 800a198:	6123      	str	r3, [r4, #16]
 800a19a:	07d2      	lsls	r2, r2, #31
 800a19c:	d5e7      	bpl.n	800a16e <_printf_float+0x1be>
 800a19e:	3301      	adds	r3, #1
 800a1a0:	6123      	str	r3, [r4, #16]
 800a1a2:	e7e4      	b.n	800a16e <_printf_float+0x1be>
 800a1a4:	2101      	movs	r1, #1
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	dc01      	bgt.n	800a1ae <_printf_float+0x1fe>
 800a1aa:	1849      	adds	r1, r1, r1
 800a1ac:	1ac9      	subs	r1, r1, r3
 800a1ae:	1852      	adds	r2, r2, r1
 800a1b0:	e7e9      	b.n	800a186 <_printf_float+0x1d6>
 800a1b2:	6822      	ldr	r2, [r4, #0]
 800a1b4:	0553      	lsls	r3, r2, #21
 800a1b6:	d407      	bmi.n	800a1c8 <_printf_float+0x218>
 800a1b8:	6923      	ldr	r3, [r4, #16]
 800a1ba:	002a      	movs	r2, r5
 800a1bc:	0038      	movs	r0, r7
 800a1be:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a1c0:	47b0      	blx	r6
 800a1c2:	1c43      	adds	r3, r0, #1
 800a1c4:	d128      	bne.n	800a218 <_printf_float+0x268>
 800a1c6:	e751      	b.n	800a06c <_printf_float+0xbc>
 800a1c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a1ca:	2b65      	cmp	r3, #101	; 0x65
 800a1cc:	d800      	bhi.n	800a1d0 <_printf_float+0x220>
 800a1ce:	e0e1      	b.n	800a394 <_printf_float+0x3e4>
 800a1d0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800a1d2:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	f7f6 f936 	bl	8000448 <__aeabi_dcmpeq>
 800a1dc:	2800      	cmp	r0, #0
 800a1de:	d031      	beq.n	800a244 <_printf_float+0x294>
 800a1e0:	2301      	movs	r3, #1
 800a1e2:	0038      	movs	r0, r7
 800a1e4:	4a34      	ldr	r2, [pc, #208]	; (800a2b8 <_printf_float+0x308>)
 800a1e6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a1e8:	47b0      	blx	r6
 800a1ea:	1c43      	adds	r3, r0, #1
 800a1ec:	d100      	bne.n	800a1f0 <_printf_float+0x240>
 800a1ee:	e73d      	b.n	800a06c <_printf_float+0xbc>
 800a1f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a1f2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a1f4:	4293      	cmp	r3, r2
 800a1f6:	db02      	blt.n	800a1fe <_printf_float+0x24e>
 800a1f8:	6823      	ldr	r3, [r4, #0]
 800a1fa:	07db      	lsls	r3, r3, #31
 800a1fc:	d50c      	bpl.n	800a218 <_printf_float+0x268>
 800a1fe:	0038      	movs	r0, r7
 800a200:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a202:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a204:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a206:	47b0      	blx	r6
 800a208:	2500      	movs	r5, #0
 800a20a:	1c43      	adds	r3, r0, #1
 800a20c:	d100      	bne.n	800a210 <_printf_float+0x260>
 800a20e:	e72d      	b.n	800a06c <_printf_float+0xbc>
 800a210:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a212:	3b01      	subs	r3, #1
 800a214:	42ab      	cmp	r3, r5
 800a216:	dc0a      	bgt.n	800a22e <_printf_float+0x27e>
 800a218:	6823      	ldr	r3, [r4, #0]
 800a21a:	079b      	lsls	r3, r3, #30
 800a21c:	d500      	bpl.n	800a220 <_printf_float+0x270>
 800a21e:	e106      	b.n	800a42e <_printf_float+0x47e>
 800a220:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a222:	68e0      	ldr	r0, [r4, #12]
 800a224:	4298      	cmp	r0, r3
 800a226:	db00      	blt.n	800a22a <_printf_float+0x27a>
 800a228:	e722      	b.n	800a070 <_printf_float+0xc0>
 800a22a:	0018      	movs	r0, r3
 800a22c:	e720      	b.n	800a070 <_printf_float+0xc0>
 800a22e:	0022      	movs	r2, r4
 800a230:	2301      	movs	r3, #1
 800a232:	0038      	movs	r0, r7
 800a234:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a236:	321a      	adds	r2, #26
 800a238:	47b0      	blx	r6
 800a23a:	1c43      	adds	r3, r0, #1
 800a23c:	d100      	bne.n	800a240 <_printf_float+0x290>
 800a23e:	e715      	b.n	800a06c <_printf_float+0xbc>
 800a240:	3501      	adds	r5, #1
 800a242:	e7e5      	b.n	800a210 <_printf_float+0x260>
 800a244:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a246:	2b00      	cmp	r3, #0
 800a248:	dc38      	bgt.n	800a2bc <_printf_float+0x30c>
 800a24a:	2301      	movs	r3, #1
 800a24c:	0038      	movs	r0, r7
 800a24e:	4a1a      	ldr	r2, [pc, #104]	; (800a2b8 <_printf_float+0x308>)
 800a250:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a252:	47b0      	blx	r6
 800a254:	1c43      	adds	r3, r0, #1
 800a256:	d100      	bne.n	800a25a <_printf_float+0x2aa>
 800a258:	e708      	b.n	800a06c <_printf_float+0xbc>
 800a25a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a25c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a25e:	4313      	orrs	r3, r2
 800a260:	d102      	bne.n	800a268 <_printf_float+0x2b8>
 800a262:	6823      	ldr	r3, [r4, #0]
 800a264:	07db      	lsls	r3, r3, #31
 800a266:	d5d7      	bpl.n	800a218 <_printf_float+0x268>
 800a268:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a26a:	0038      	movs	r0, r7
 800a26c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a26e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a270:	47b0      	blx	r6
 800a272:	1c43      	adds	r3, r0, #1
 800a274:	d100      	bne.n	800a278 <_printf_float+0x2c8>
 800a276:	e6f9      	b.n	800a06c <_printf_float+0xbc>
 800a278:	2300      	movs	r3, #0
 800a27a:	930a      	str	r3, [sp, #40]	; 0x28
 800a27c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a27e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a280:	425b      	negs	r3, r3
 800a282:	4293      	cmp	r3, r2
 800a284:	dc01      	bgt.n	800a28a <_printf_float+0x2da>
 800a286:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a288:	e797      	b.n	800a1ba <_printf_float+0x20a>
 800a28a:	0022      	movs	r2, r4
 800a28c:	2301      	movs	r3, #1
 800a28e:	0038      	movs	r0, r7
 800a290:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a292:	321a      	adds	r2, #26
 800a294:	47b0      	blx	r6
 800a296:	1c43      	adds	r3, r0, #1
 800a298:	d100      	bne.n	800a29c <_printf_float+0x2ec>
 800a29a:	e6e7      	b.n	800a06c <_printf_float+0xbc>
 800a29c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a29e:	3301      	adds	r3, #1
 800a2a0:	e7eb      	b.n	800a27a <_printf_float+0x2ca>
 800a2a2:	46c0      	nop			; (mov r8, r8)
 800a2a4:	7fefffff 	.word	0x7fefffff
 800a2a8:	0800cfdc 	.word	0x0800cfdc
 800a2ac:	0800cfe0 	.word	0x0800cfe0
 800a2b0:	0800cfe4 	.word	0x0800cfe4
 800a2b4:	0800cfe8 	.word	0x0800cfe8
 800a2b8:	0800cfec 	.word	0x0800cfec
 800a2bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a2be:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a2c0:	920a      	str	r2, [sp, #40]	; 0x28
 800a2c2:	429a      	cmp	r2, r3
 800a2c4:	dd00      	ble.n	800a2c8 <_printf_float+0x318>
 800a2c6:	930a      	str	r3, [sp, #40]	; 0x28
 800a2c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	dc3c      	bgt.n	800a348 <_printf_float+0x398>
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	930d      	str	r3, [sp, #52]	; 0x34
 800a2d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2d4:	43db      	mvns	r3, r3
 800a2d6:	17db      	asrs	r3, r3, #31
 800a2d8:	930f      	str	r3, [sp, #60]	; 0x3c
 800a2da:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a2dc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a2de:	930b      	str	r3, [sp, #44]	; 0x2c
 800a2e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2e2:	4013      	ands	r3, r2
 800a2e4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a2e6:	1ad3      	subs	r3, r2, r3
 800a2e8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a2ea:	4293      	cmp	r3, r2
 800a2ec:	dc34      	bgt.n	800a358 <_printf_float+0x3a8>
 800a2ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a2f0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a2f2:	4293      	cmp	r3, r2
 800a2f4:	db3d      	blt.n	800a372 <_printf_float+0x3c2>
 800a2f6:	6823      	ldr	r3, [r4, #0]
 800a2f8:	07db      	lsls	r3, r3, #31
 800a2fa:	d43a      	bmi.n	800a372 <_printf_float+0x3c2>
 800a2fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a2fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a300:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a302:	1ad3      	subs	r3, r2, r3
 800a304:	1a52      	subs	r2, r2, r1
 800a306:	920a      	str	r2, [sp, #40]	; 0x28
 800a308:	429a      	cmp	r2, r3
 800a30a:	dd00      	ble.n	800a30e <_printf_float+0x35e>
 800a30c:	930a      	str	r3, [sp, #40]	; 0x28
 800a30e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a310:	2b00      	cmp	r3, #0
 800a312:	dc36      	bgt.n	800a382 <_printf_float+0x3d2>
 800a314:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a316:	2500      	movs	r5, #0
 800a318:	43db      	mvns	r3, r3
 800a31a:	17db      	asrs	r3, r3, #31
 800a31c:	930b      	str	r3, [sp, #44]	; 0x2c
 800a31e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a320:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a322:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a324:	1a9b      	subs	r3, r3, r2
 800a326:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a328:	400a      	ands	r2, r1
 800a32a:	1a9b      	subs	r3, r3, r2
 800a32c:	42ab      	cmp	r3, r5
 800a32e:	dc00      	bgt.n	800a332 <_printf_float+0x382>
 800a330:	e772      	b.n	800a218 <_printf_float+0x268>
 800a332:	0022      	movs	r2, r4
 800a334:	2301      	movs	r3, #1
 800a336:	0038      	movs	r0, r7
 800a338:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a33a:	321a      	adds	r2, #26
 800a33c:	47b0      	blx	r6
 800a33e:	1c43      	adds	r3, r0, #1
 800a340:	d100      	bne.n	800a344 <_printf_float+0x394>
 800a342:	e693      	b.n	800a06c <_printf_float+0xbc>
 800a344:	3501      	adds	r5, #1
 800a346:	e7ea      	b.n	800a31e <_printf_float+0x36e>
 800a348:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a34a:	002a      	movs	r2, r5
 800a34c:	0038      	movs	r0, r7
 800a34e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a350:	47b0      	blx	r6
 800a352:	1c43      	adds	r3, r0, #1
 800a354:	d1bb      	bne.n	800a2ce <_printf_float+0x31e>
 800a356:	e689      	b.n	800a06c <_printf_float+0xbc>
 800a358:	0022      	movs	r2, r4
 800a35a:	2301      	movs	r3, #1
 800a35c:	0038      	movs	r0, r7
 800a35e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a360:	321a      	adds	r2, #26
 800a362:	47b0      	blx	r6
 800a364:	1c43      	adds	r3, r0, #1
 800a366:	d100      	bne.n	800a36a <_printf_float+0x3ba>
 800a368:	e680      	b.n	800a06c <_printf_float+0xbc>
 800a36a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a36c:	3301      	adds	r3, #1
 800a36e:	930d      	str	r3, [sp, #52]	; 0x34
 800a370:	e7b3      	b.n	800a2da <_printf_float+0x32a>
 800a372:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a374:	0038      	movs	r0, r7
 800a376:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a378:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a37a:	47b0      	blx	r6
 800a37c:	1c43      	adds	r3, r0, #1
 800a37e:	d1bd      	bne.n	800a2fc <_printf_float+0x34c>
 800a380:	e674      	b.n	800a06c <_printf_float+0xbc>
 800a382:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a384:	0038      	movs	r0, r7
 800a386:	18ea      	adds	r2, r5, r3
 800a388:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a38a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a38c:	47b0      	blx	r6
 800a38e:	1c43      	adds	r3, r0, #1
 800a390:	d1c0      	bne.n	800a314 <_printf_float+0x364>
 800a392:	e66b      	b.n	800a06c <_printf_float+0xbc>
 800a394:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a396:	2b01      	cmp	r3, #1
 800a398:	dc02      	bgt.n	800a3a0 <_printf_float+0x3f0>
 800a39a:	2301      	movs	r3, #1
 800a39c:	421a      	tst	r2, r3
 800a39e:	d034      	beq.n	800a40a <_printf_float+0x45a>
 800a3a0:	2301      	movs	r3, #1
 800a3a2:	002a      	movs	r2, r5
 800a3a4:	0038      	movs	r0, r7
 800a3a6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a3a8:	47b0      	blx	r6
 800a3aa:	1c43      	adds	r3, r0, #1
 800a3ac:	d100      	bne.n	800a3b0 <_printf_float+0x400>
 800a3ae:	e65d      	b.n	800a06c <_printf_float+0xbc>
 800a3b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a3b2:	0038      	movs	r0, r7
 800a3b4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a3b6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a3b8:	47b0      	blx	r6
 800a3ba:	1c43      	adds	r3, r0, #1
 800a3bc:	d100      	bne.n	800a3c0 <_printf_float+0x410>
 800a3be:	e655      	b.n	800a06c <_printf_float+0xbc>
 800a3c0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800a3c2:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	f7f6 f83e 	bl	8000448 <__aeabi_dcmpeq>
 800a3cc:	2800      	cmp	r0, #0
 800a3ce:	d11a      	bne.n	800a406 <_printf_float+0x456>
 800a3d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a3d2:	1c6a      	adds	r2, r5, #1
 800a3d4:	3b01      	subs	r3, #1
 800a3d6:	0038      	movs	r0, r7
 800a3d8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a3da:	47b0      	blx	r6
 800a3dc:	1c43      	adds	r3, r0, #1
 800a3de:	d10e      	bne.n	800a3fe <_printf_float+0x44e>
 800a3e0:	e644      	b.n	800a06c <_printf_float+0xbc>
 800a3e2:	0022      	movs	r2, r4
 800a3e4:	2301      	movs	r3, #1
 800a3e6:	0038      	movs	r0, r7
 800a3e8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a3ea:	321a      	adds	r2, #26
 800a3ec:	47b0      	blx	r6
 800a3ee:	1c43      	adds	r3, r0, #1
 800a3f0:	d100      	bne.n	800a3f4 <_printf_float+0x444>
 800a3f2:	e63b      	b.n	800a06c <_printf_float+0xbc>
 800a3f4:	3501      	adds	r5, #1
 800a3f6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a3f8:	3b01      	subs	r3, #1
 800a3fa:	42ab      	cmp	r3, r5
 800a3fc:	dcf1      	bgt.n	800a3e2 <_printf_float+0x432>
 800a3fe:	0022      	movs	r2, r4
 800a400:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a402:	3250      	adds	r2, #80	; 0x50
 800a404:	e6da      	b.n	800a1bc <_printf_float+0x20c>
 800a406:	2500      	movs	r5, #0
 800a408:	e7f5      	b.n	800a3f6 <_printf_float+0x446>
 800a40a:	002a      	movs	r2, r5
 800a40c:	e7e3      	b.n	800a3d6 <_printf_float+0x426>
 800a40e:	0022      	movs	r2, r4
 800a410:	2301      	movs	r3, #1
 800a412:	0038      	movs	r0, r7
 800a414:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a416:	3219      	adds	r2, #25
 800a418:	47b0      	blx	r6
 800a41a:	1c43      	adds	r3, r0, #1
 800a41c:	d100      	bne.n	800a420 <_printf_float+0x470>
 800a41e:	e625      	b.n	800a06c <_printf_float+0xbc>
 800a420:	3501      	adds	r5, #1
 800a422:	68e3      	ldr	r3, [r4, #12]
 800a424:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a426:	1a9b      	subs	r3, r3, r2
 800a428:	42ab      	cmp	r3, r5
 800a42a:	dcf0      	bgt.n	800a40e <_printf_float+0x45e>
 800a42c:	e6f8      	b.n	800a220 <_printf_float+0x270>
 800a42e:	2500      	movs	r5, #0
 800a430:	e7f7      	b.n	800a422 <_printf_float+0x472>
 800a432:	46c0      	nop			; (mov r8, r8)

0800a434 <_printf_common>:
 800a434:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a436:	0015      	movs	r5, r2
 800a438:	9301      	str	r3, [sp, #4]
 800a43a:	688a      	ldr	r2, [r1, #8]
 800a43c:	690b      	ldr	r3, [r1, #16]
 800a43e:	000c      	movs	r4, r1
 800a440:	9000      	str	r0, [sp, #0]
 800a442:	4293      	cmp	r3, r2
 800a444:	da00      	bge.n	800a448 <_printf_common+0x14>
 800a446:	0013      	movs	r3, r2
 800a448:	0022      	movs	r2, r4
 800a44a:	602b      	str	r3, [r5, #0]
 800a44c:	3243      	adds	r2, #67	; 0x43
 800a44e:	7812      	ldrb	r2, [r2, #0]
 800a450:	2a00      	cmp	r2, #0
 800a452:	d001      	beq.n	800a458 <_printf_common+0x24>
 800a454:	3301      	adds	r3, #1
 800a456:	602b      	str	r3, [r5, #0]
 800a458:	6823      	ldr	r3, [r4, #0]
 800a45a:	069b      	lsls	r3, r3, #26
 800a45c:	d502      	bpl.n	800a464 <_printf_common+0x30>
 800a45e:	682b      	ldr	r3, [r5, #0]
 800a460:	3302      	adds	r3, #2
 800a462:	602b      	str	r3, [r5, #0]
 800a464:	6822      	ldr	r2, [r4, #0]
 800a466:	2306      	movs	r3, #6
 800a468:	0017      	movs	r7, r2
 800a46a:	401f      	ands	r7, r3
 800a46c:	421a      	tst	r2, r3
 800a46e:	d027      	beq.n	800a4c0 <_printf_common+0x8c>
 800a470:	0023      	movs	r3, r4
 800a472:	3343      	adds	r3, #67	; 0x43
 800a474:	781b      	ldrb	r3, [r3, #0]
 800a476:	1e5a      	subs	r2, r3, #1
 800a478:	4193      	sbcs	r3, r2
 800a47a:	6822      	ldr	r2, [r4, #0]
 800a47c:	0692      	lsls	r2, r2, #26
 800a47e:	d430      	bmi.n	800a4e2 <_printf_common+0xae>
 800a480:	0022      	movs	r2, r4
 800a482:	9901      	ldr	r1, [sp, #4]
 800a484:	9800      	ldr	r0, [sp, #0]
 800a486:	9e08      	ldr	r6, [sp, #32]
 800a488:	3243      	adds	r2, #67	; 0x43
 800a48a:	47b0      	blx	r6
 800a48c:	1c43      	adds	r3, r0, #1
 800a48e:	d025      	beq.n	800a4dc <_printf_common+0xa8>
 800a490:	2306      	movs	r3, #6
 800a492:	6820      	ldr	r0, [r4, #0]
 800a494:	682a      	ldr	r2, [r5, #0]
 800a496:	68e1      	ldr	r1, [r4, #12]
 800a498:	2500      	movs	r5, #0
 800a49a:	4003      	ands	r3, r0
 800a49c:	2b04      	cmp	r3, #4
 800a49e:	d103      	bne.n	800a4a8 <_printf_common+0x74>
 800a4a0:	1a8d      	subs	r5, r1, r2
 800a4a2:	43eb      	mvns	r3, r5
 800a4a4:	17db      	asrs	r3, r3, #31
 800a4a6:	401d      	ands	r5, r3
 800a4a8:	68a3      	ldr	r3, [r4, #8]
 800a4aa:	6922      	ldr	r2, [r4, #16]
 800a4ac:	4293      	cmp	r3, r2
 800a4ae:	dd01      	ble.n	800a4b4 <_printf_common+0x80>
 800a4b0:	1a9b      	subs	r3, r3, r2
 800a4b2:	18ed      	adds	r5, r5, r3
 800a4b4:	2700      	movs	r7, #0
 800a4b6:	42bd      	cmp	r5, r7
 800a4b8:	d120      	bne.n	800a4fc <_printf_common+0xc8>
 800a4ba:	2000      	movs	r0, #0
 800a4bc:	e010      	b.n	800a4e0 <_printf_common+0xac>
 800a4be:	3701      	adds	r7, #1
 800a4c0:	68e3      	ldr	r3, [r4, #12]
 800a4c2:	682a      	ldr	r2, [r5, #0]
 800a4c4:	1a9b      	subs	r3, r3, r2
 800a4c6:	42bb      	cmp	r3, r7
 800a4c8:	ddd2      	ble.n	800a470 <_printf_common+0x3c>
 800a4ca:	0022      	movs	r2, r4
 800a4cc:	2301      	movs	r3, #1
 800a4ce:	9901      	ldr	r1, [sp, #4]
 800a4d0:	9800      	ldr	r0, [sp, #0]
 800a4d2:	9e08      	ldr	r6, [sp, #32]
 800a4d4:	3219      	adds	r2, #25
 800a4d6:	47b0      	blx	r6
 800a4d8:	1c43      	adds	r3, r0, #1
 800a4da:	d1f0      	bne.n	800a4be <_printf_common+0x8a>
 800a4dc:	2001      	movs	r0, #1
 800a4de:	4240      	negs	r0, r0
 800a4e0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a4e2:	2030      	movs	r0, #48	; 0x30
 800a4e4:	18e1      	adds	r1, r4, r3
 800a4e6:	3143      	adds	r1, #67	; 0x43
 800a4e8:	7008      	strb	r0, [r1, #0]
 800a4ea:	0021      	movs	r1, r4
 800a4ec:	1c5a      	adds	r2, r3, #1
 800a4ee:	3145      	adds	r1, #69	; 0x45
 800a4f0:	7809      	ldrb	r1, [r1, #0]
 800a4f2:	18a2      	adds	r2, r4, r2
 800a4f4:	3243      	adds	r2, #67	; 0x43
 800a4f6:	3302      	adds	r3, #2
 800a4f8:	7011      	strb	r1, [r2, #0]
 800a4fa:	e7c1      	b.n	800a480 <_printf_common+0x4c>
 800a4fc:	0022      	movs	r2, r4
 800a4fe:	2301      	movs	r3, #1
 800a500:	9901      	ldr	r1, [sp, #4]
 800a502:	9800      	ldr	r0, [sp, #0]
 800a504:	9e08      	ldr	r6, [sp, #32]
 800a506:	321a      	adds	r2, #26
 800a508:	47b0      	blx	r6
 800a50a:	1c43      	adds	r3, r0, #1
 800a50c:	d0e6      	beq.n	800a4dc <_printf_common+0xa8>
 800a50e:	3701      	adds	r7, #1
 800a510:	e7d1      	b.n	800a4b6 <_printf_common+0x82>
	...

0800a514 <_printf_i>:
 800a514:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a516:	b08b      	sub	sp, #44	; 0x2c
 800a518:	9206      	str	r2, [sp, #24]
 800a51a:	000a      	movs	r2, r1
 800a51c:	3243      	adds	r2, #67	; 0x43
 800a51e:	9307      	str	r3, [sp, #28]
 800a520:	9005      	str	r0, [sp, #20]
 800a522:	9204      	str	r2, [sp, #16]
 800a524:	7e0a      	ldrb	r2, [r1, #24]
 800a526:	000c      	movs	r4, r1
 800a528:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a52a:	2a78      	cmp	r2, #120	; 0x78
 800a52c:	d807      	bhi.n	800a53e <_printf_i+0x2a>
 800a52e:	2a62      	cmp	r2, #98	; 0x62
 800a530:	d809      	bhi.n	800a546 <_printf_i+0x32>
 800a532:	2a00      	cmp	r2, #0
 800a534:	d100      	bne.n	800a538 <_printf_i+0x24>
 800a536:	e0c1      	b.n	800a6bc <_printf_i+0x1a8>
 800a538:	2a58      	cmp	r2, #88	; 0x58
 800a53a:	d100      	bne.n	800a53e <_printf_i+0x2a>
 800a53c:	e08c      	b.n	800a658 <_printf_i+0x144>
 800a53e:	0026      	movs	r6, r4
 800a540:	3642      	adds	r6, #66	; 0x42
 800a542:	7032      	strb	r2, [r6, #0]
 800a544:	e022      	b.n	800a58c <_printf_i+0x78>
 800a546:	0010      	movs	r0, r2
 800a548:	3863      	subs	r0, #99	; 0x63
 800a54a:	2815      	cmp	r0, #21
 800a54c:	d8f7      	bhi.n	800a53e <_printf_i+0x2a>
 800a54e:	f7f5 fdeb 	bl	8000128 <__gnu_thumb1_case_shi>
 800a552:	0016      	.short	0x0016
 800a554:	fff6001f 	.word	0xfff6001f
 800a558:	fff6fff6 	.word	0xfff6fff6
 800a55c:	001ffff6 	.word	0x001ffff6
 800a560:	fff6fff6 	.word	0xfff6fff6
 800a564:	fff6fff6 	.word	0xfff6fff6
 800a568:	003600a8 	.word	0x003600a8
 800a56c:	fff6009a 	.word	0xfff6009a
 800a570:	00b9fff6 	.word	0x00b9fff6
 800a574:	0036fff6 	.word	0x0036fff6
 800a578:	fff6fff6 	.word	0xfff6fff6
 800a57c:	009e      	.short	0x009e
 800a57e:	0026      	movs	r6, r4
 800a580:	681a      	ldr	r2, [r3, #0]
 800a582:	3642      	adds	r6, #66	; 0x42
 800a584:	1d11      	adds	r1, r2, #4
 800a586:	6019      	str	r1, [r3, #0]
 800a588:	6813      	ldr	r3, [r2, #0]
 800a58a:	7033      	strb	r3, [r6, #0]
 800a58c:	2301      	movs	r3, #1
 800a58e:	e0a7      	b.n	800a6e0 <_printf_i+0x1cc>
 800a590:	6808      	ldr	r0, [r1, #0]
 800a592:	6819      	ldr	r1, [r3, #0]
 800a594:	1d0a      	adds	r2, r1, #4
 800a596:	0605      	lsls	r5, r0, #24
 800a598:	d50b      	bpl.n	800a5b2 <_printf_i+0x9e>
 800a59a:	680d      	ldr	r5, [r1, #0]
 800a59c:	601a      	str	r2, [r3, #0]
 800a59e:	2d00      	cmp	r5, #0
 800a5a0:	da03      	bge.n	800a5aa <_printf_i+0x96>
 800a5a2:	232d      	movs	r3, #45	; 0x2d
 800a5a4:	9a04      	ldr	r2, [sp, #16]
 800a5a6:	426d      	negs	r5, r5
 800a5a8:	7013      	strb	r3, [r2, #0]
 800a5aa:	4b61      	ldr	r3, [pc, #388]	; (800a730 <_printf_i+0x21c>)
 800a5ac:	270a      	movs	r7, #10
 800a5ae:	9303      	str	r3, [sp, #12]
 800a5b0:	e01b      	b.n	800a5ea <_printf_i+0xd6>
 800a5b2:	680d      	ldr	r5, [r1, #0]
 800a5b4:	601a      	str	r2, [r3, #0]
 800a5b6:	0641      	lsls	r1, r0, #25
 800a5b8:	d5f1      	bpl.n	800a59e <_printf_i+0x8a>
 800a5ba:	b22d      	sxth	r5, r5
 800a5bc:	e7ef      	b.n	800a59e <_printf_i+0x8a>
 800a5be:	680d      	ldr	r5, [r1, #0]
 800a5c0:	6819      	ldr	r1, [r3, #0]
 800a5c2:	1d08      	adds	r0, r1, #4
 800a5c4:	6018      	str	r0, [r3, #0]
 800a5c6:	062e      	lsls	r6, r5, #24
 800a5c8:	d501      	bpl.n	800a5ce <_printf_i+0xba>
 800a5ca:	680d      	ldr	r5, [r1, #0]
 800a5cc:	e003      	b.n	800a5d6 <_printf_i+0xc2>
 800a5ce:	066d      	lsls	r5, r5, #25
 800a5d0:	d5fb      	bpl.n	800a5ca <_printf_i+0xb6>
 800a5d2:	680d      	ldr	r5, [r1, #0]
 800a5d4:	b2ad      	uxth	r5, r5
 800a5d6:	4b56      	ldr	r3, [pc, #344]	; (800a730 <_printf_i+0x21c>)
 800a5d8:	2708      	movs	r7, #8
 800a5da:	9303      	str	r3, [sp, #12]
 800a5dc:	2a6f      	cmp	r2, #111	; 0x6f
 800a5de:	d000      	beq.n	800a5e2 <_printf_i+0xce>
 800a5e0:	3702      	adds	r7, #2
 800a5e2:	0023      	movs	r3, r4
 800a5e4:	2200      	movs	r2, #0
 800a5e6:	3343      	adds	r3, #67	; 0x43
 800a5e8:	701a      	strb	r2, [r3, #0]
 800a5ea:	6863      	ldr	r3, [r4, #4]
 800a5ec:	60a3      	str	r3, [r4, #8]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	db03      	blt.n	800a5fa <_printf_i+0xe6>
 800a5f2:	2204      	movs	r2, #4
 800a5f4:	6821      	ldr	r1, [r4, #0]
 800a5f6:	4391      	bics	r1, r2
 800a5f8:	6021      	str	r1, [r4, #0]
 800a5fa:	2d00      	cmp	r5, #0
 800a5fc:	d102      	bne.n	800a604 <_printf_i+0xf0>
 800a5fe:	9e04      	ldr	r6, [sp, #16]
 800a600:	2b00      	cmp	r3, #0
 800a602:	d00c      	beq.n	800a61e <_printf_i+0x10a>
 800a604:	9e04      	ldr	r6, [sp, #16]
 800a606:	0028      	movs	r0, r5
 800a608:	0039      	movs	r1, r7
 800a60a:	f7f5 fe1d 	bl	8000248 <__aeabi_uidivmod>
 800a60e:	9b03      	ldr	r3, [sp, #12]
 800a610:	3e01      	subs	r6, #1
 800a612:	5c5b      	ldrb	r3, [r3, r1]
 800a614:	7033      	strb	r3, [r6, #0]
 800a616:	002b      	movs	r3, r5
 800a618:	0005      	movs	r5, r0
 800a61a:	429f      	cmp	r7, r3
 800a61c:	d9f3      	bls.n	800a606 <_printf_i+0xf2>
 800a61e:	2f08      	cmp	r7, #8
 800a620:	d109      	bne.n	800a636 <_printf_i+0x122>
 800a622:	6823      	ldr	r3, [r4, #0]
 800a624:	07db      	lsls	r3, r3, #31
 800a626:	d506      	bpl.n	800a636 <_printf_i+0x122>
 800a628:	6863      	ldr	r3, [r4, #4]
 800a62a:	6922      	ldr	r2, [r4, #16]
 800a62c:	4293      	cmp	r3, r2
 800a62e:	dc02      	bgt.n	800a636 <_printf_i+0x122>
 800a630:	2330      	movs	r3, #48	; 0x30
 800a632:	3e01      	subs	r6, #1
 800a634:	7033      	strb	r3, [r6, #0]
 800a636:	9b04      	ldr	r3, [sp, #16]
 800a638:	1b9b      	subs	r3, r3, r6
 800a63a:	6123      	str	r3, [r4, #16]
 800a63c:	9b07      	ldr	r3, [sp, #28]
 800a63e:	0021      	movs	r1, r4
 800a640:	9300      	str	r3, [sp, #0]
 800a642:	9805      	ldr	r0, [sp, #20]
 800a644:	9b06      	ldr	r3, [sp, #24]
 800a646:	aa09      	add	r2, sp, #36	; 0x24
 800a648:	f7ff fef4 	bl	800a434 <_printf_common>
 800a64c:	1c43      	adds	r3, r0, #1
 800a64e:	d14c      	bne.n	800a6ea <_printf_i+0x1d6>
 800a650:	2001      	movs	r0, #1
 800a652:	4240      	negs	r0, r0
 800a654:	b00b      	add	sp, #44	; 0x2c
 800a656:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a658:	3145      	adds	r1, #69	; 0x45
 800a65a:	700a      	strb	r2, [r1, #0]
 800a65c:	4a34      	ldr	r2, [pc, #208]	; (800a730 <_printf_i+0x21c>)
 800a65e:	9203      	str	r2, [sp, #12]
 800a660:	681a      	ldr	r2, [r3, #0]
 800a662:	6821      	ldr	r1, [r4, #0]
 800a664:	ca20      	ldmia	r2!, {r5}
 800a666:	601a      	str	r2, [r3, #0]
 800a668:	0608      	lsls	r0, r1, #24
 800a66a:	d516      	bpl.n	800a69a <_printf_i+0x186>
 800a66c:	07cb      	lsls	r3, r1, #31
 800a66e:	d502      	bpl.n	800a676 <_printf_i+0x162>
 800a670:	2320      	movs	r3, #32
 800a672:	4319      	orrs	r1, r3
 800a674:	6021      	str	r1, [r4, #0]
 800a676:	2710      	movs	r7, #16
 800a678:	2d00      	cmp	r5, #0
 800a67a:	d1b2      	bne.n	800a5e2 <_printf_i+0xce>
 800a67c:	2320      	movs	r3, #32
 800a67e:	6822      	ldr	r2, [r4, #0]
 800a680:	439a      	bics	r2, r3
 800a682:	6022      	str	r2, [r4, #0]
 800a684:	e7ad      	b.n	800a5e2 <_printf_i+0xce>
 800a686:	2220      	movs	r2, #32
 800a688:	6809      	ldr	r1, [r1, #0]
 800a68a:	430a      	orrs	r2, r1
 800a68c:	6022      	str	r2, [r4, #0]
 800a68e:	0022      	movs	r2, r4
 800a690:	2178      	movs	r1, #120	; 0x78
 800a692:	3245      	adds	r2, #69	; 0x45
 800a694:	7011      	strb	r1, [r2, #0]
 800a696:	4a27      	ldr	r2, [pc, #156]	; (800a734 <_printf_i+0x220>)
 800a698:	e7e1      	b.n	800a65e <_printf_i+0x14a>
 800a69a:	0648      	lsls	r0, r1, #25
 800a69c:	d5e6      	bpl.n	800a66c <_printf_i+0x158>
 800a69e:	b2ad      	uxth	r5, r5
 800a6a0:	e7e4      	b.n	800a66c <_printf_i+0x158>
 800a6a2:	681a      	ldr	r2, [r3, #0]
 800a6a4:	680d      	ldr	r5, [r1, #0]
 800a6a6:	1d10      	adds	r0, r2, #4
 800a6a8:	6949      	ldr	r1, [r1, #20]
 800a6aa:	6018      	str	r0, [r3, #0]
 800a6ac:	6813      	ldr	r3, [r2, #0]
 800a6ae:	062e      	lsls	r6, r5, #24
 800a6b0:	d501      	bpl.n	800a6b6 <_printf_i+0x1a2>
 800a6b2:	6019      	str	r1, [r3, #0]
 800a6b4:	e002      	b.n	800a6bc <_printf_i+0x1a8>
 800a6b6:	066d      	lsls	r5, r5, #25
 800a6b8:	d5fb      	bpl.n	800a6b2 <_printf_i+0x19e>
 800a6ba:	8019      	strh	r1, [r3, #0]
 800a6bc:	2300      	movs	r3, #0
 800a6be:	9e04      	ldr	r6, [sp, #16]
 800a6c0:	6123      	str	r3, [r4, #16]
 800a6c2:	e7bb      	b.n	800a63c <_printf_i+0x128>
 800a6c4:	681a      	ldr	r2, [r3, #0]
 800a6c6:	1d11      	adds	r1, r2, #4
 800a6c8:	6019      	str	r1, [r3, #0]
 800a6ca:	6816      	ldr	r6, [r2, #0]
 800a6cc:	2100      	movs	r1, #0
 800a6ce:	0030      	movs	r0, r6
 800a6d0:	6862      	ldr	r2, [r4, #4]
 800a6d2:	f000 ff27 	bl	800b524 <memchr>
 800a6d6:	2800      	cmp	r0, #0
 800a6d8:	d001      	beq.n	800a6de <_printf_i+0x1ca>
 800a6da:	1b80      	subs	r0, r0, r6
 800a6dc:	6060      	str	r0, [r4, #4]
 800a6de:	6863      	ldr	r3, [r4, #4]
 800a6e0:	6123      	str	r3, [r4, #16]
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	9a04      	ldr	r2, [sp, #16]
 800a6e6:	7013      	strb	r3, [r2, #0]
 800a6e8:	e7a8      	b.n	800a63c <_printf_i+0x128>
 800a6ea:	6923      	ldr	r3, [r4, #16]
 800a6ec:	0032      	movs	r2, r6
 800a6ee:	9906      	ldr	r1, [sp, #24]
 800a6f0:	9805      	ldr	r0, [sp, #20]
 800a6f2:	9d07      	ldr	r5, [sp, #28]
 800a6f4:	47a8      	blx	r5
 800a6f6:	1c43      	adds	r3, r0, #1
 800a6f8:	d0aa      	beq.n	800a650 <_printf_i+0x13c>
 800a6fa:	6823      	ldr	r3, [r4, #0]
 800a6fc:	079b      	lsls	r3, r3, #30
 800a6fe:	d415      	bmi.n	800a72c <_printf_i+0x218>
 800a700:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a702:	68e0      	ldr	r0, [r4, #12]
 800a704:	4298      	cmp	r0, r3
 800a706:	daa5      	bge.n	800a654 <_printf_i+0x140>
 800a708:	0018      	movs	r0, r3
 800a70a:	e7a3      	b.n	800a654 <_printf_i+0x140>
 800a70c:	0022      	movs	r2, r4
 800a70e:	2301      	movs	r3, #1
 800a710:	9906      	ldr	r1, [sp, #24]
 800a712:	9805      	ldr	r0, [sp, #20]
 800a714:	9e07      	ldr	r6, [sp, #28]
 800a716:	3219      	adds	r2, #25
 800a718:	47b0      	blx	r6
 800a71a:	1c43      	adds	r3, r0, #1
 800a71c:	d098      	beq.n	800a650 <_printf_i+0x13c>
 800a71e:	3501      	adds	r5, #1
 800a720:	68e3      	ldr	r3, [r4, #12]
 800a722:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a724:	1a9b      	subs	r3, r3, r2
 800a726:	42ab      	cmp	r3, r5
 800a728:	dcf0      	bgt.n	800a70c <_printf_i+0x1f8>
 800a72a:	e7e9      	b.n	800a700 <_printf_i+0x1ec>
 800a72c:	2500      	movs	r5, #0
 800a72e:	e7f7      	b.n	800a720 <_printf_i+0x20c>
 800a730:	0800cfee 	.word	0x0800cfee
 800a734:	0800cfff 	.word	0x0800cfff

0800a738 <siprintf>:
 800a738:	b40e      	push	{r1, r2, r3}
 800a73a:	b500      	push	{lr}
 800a73c:	490b      	ldr	r1, [pc, #44]	; (800a76c <siprintf+0x34>)
 800a73e:	b09c      	sub	sp, #112	; 0x70
 800a740:	ab1d      	add	r3, sp, #116	; 0x74
 800a742:	9002      	str	r0, [sp, #8]
 800a744:	9006      	str	r0, [sp, #24]
 800a746:	9107      	str	r1, [sp, #28]
 800a748:	9104      	str	r1, [sp, #16]
 800a74a:	4809      	ldr	r0, [pc, #36]	; (800a770 <siprintf+0x38>)
 800a74c:	4909      	ldr	r1, [pc, #36]	; (800a774 <siprintf+0x3c>)
 800a74e:	cb04      	ldmia	r3!, {r2}
 800a750:	9105      	str	r1, [sp, #20]
 800a752:	6800      	ldr	r0, [r0, #0]
 800a754:	a902      	add	r1, sp, #8
 800a756:	9301      	str	r3, [sp, #4]
 800a758:	f001 fc04 	bl	800bf64 <_svfiprintf_r>
 800a75c:	2300      	movs	r3, #0
 800a75e:	9a02      	ldr	r2, [sp, #8]
 800a760:	7013      	strb	r3, [r2, #0]
 800a762:	b01c      	add	sp, #112	; 0x70
 800a764:	bc08      	pop	{r3}
 800a766:	b003      	add	sp, #12
 800a768:	4718      	bx	r3
 800a76a:	46c0      	nop			; (mov r8, r8)
 800a76c:	7fffffff 	.word	0x7fffffff
 800a770:	20000010 	.word	0x20000010
 800a774:	ffff0208 	.word	0xffff0208

0800a778 <strcat>:
 800a778:	0002      	movs	r2, r0
 800a77a:	b510      	push	{r4, lr}
 800a77c:	7813      	ldrb	r3, [r2, #0]
 800a77e:	0014      	movs	r4, r2
 800a780:	3201      	adds	r2, #1
 800a782:	2b00      	cmp	r3, #0
 800a784:	d1fa      	bne.n	800a77c <strcat+0x4>
 800a786:	5cca      	ldrb	r2, [r1, r3]
 800a788:	54e2      	strb	r2, [r4, r3]
 800a78a:	3301      	adds	r3, #1
 800a78c:	2a00      	cmp	r2, #0
 800a78e:	d1fa      	bne.n	800a786 <strcat+0xe>
 800a790:	bd10      	pop	{r4, pc}

0800a792 <strstr>:
 800a792:	780a      	ldrb	r2, [r1, #0]
 800a794:	b530      	push	{r4, r5, lr}
 800a796:	2a00      	cmp	r2, #0
 800a798:	d10c      	bne.n	800a7b4 <strstr+0x22>
 800a79a:	bd30      	pop	{r4, r5, pc}
 800a79c:	429a      	cmp	r2, r3
 800a79e:	d108      	bne.n	800a7b2 <strstr+0x20>
 800a7a0:	2301      	movs	r3, #1
 800a7a2:	5ccc      	ldrb	r4, [r1, r3]
 800a7a4:	2c00      	cmp	r4, #0
 800a7a6:	d0f8      	beq.n	800a79a <strstr+0x8>
 800a7a8:	5cc5      	ldrb	r5, [r0, r3]
 800a7aa:	42a5      	cmp	r5, r4
 800a7ac:	d101      	bne.n	800a7b2 <strstr+0x20>
 800a7ae:	3301      	adds	r3, #1
 800a7b0:	e7f7      	b.n	800a7a2 <strstr+0x10>
 800a7b2:	3001      	adds	r0, #1
 800a7b4:	7803      	ldrb	r3, [r0, #0]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d1f0      	bne.n	800a79c <strstr+0xa>
 800a7ba:	0018      	movs	r0, r3
 800a7bc:	e7ed      	b.n	800a79a <strstr+0x8>

0800a7be <quorem>:
 800a7be:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a7c0:	0006      	movs	r6, r0
 800a7c2:	690b      	ldr	r3, [r1, #16]
 800a7c4:	6932      	ldr	r2, [r6, #16]
 800a7c6:	b087      	sub	sp, #28
 800a7c8:	2000      	movs	r0, #0
 800a7ca:	9103      	str	r1, [sp, #12]
 800a7cc:	429a      	cmp	r2, r3
 800a7ce:	db65      	blt.n	800a89c <quorem+0xde>
 800a7d0:	3b01      	subs	r3, #1
 800a7d2:	009c      	lsls	r4, r3, #2
 800a7d4:	9300      	str	r3, [sp, #0]
 800a7d6:	000b      	movs	r3, r1
 800a7d8:	3314      	adds	r3, #20
 800a7da:	9305      	str	r3, [sp, #20]
 800a7dc:	191b      	adds	r3, r3, r4
 800a7de:	9304      	str	r3, [sp, #16]
 800a7e0:	0033      	movs	r3, r6
 800a7e2:	3314      	adds	r3, #20
 800a7e4:	9302      	str	r3, [sp, #8]
 800a7e6:	191c      	adds	r4, r3, r4
 800a7e8:	9b04      	ldr	r3, [sp, #16]
 800a7ea:	6827      	ldr	r7, [r4, #0]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	0038      	movs	r0, r7
 800a7f0:	1c5d      	adds	r5, r3, #1
 800a7f2:	0029      	movs	r1, r5
 800a7f4:	9301      	str	r3, [sp, #4]
 800a7f6:	f7f5 fca1 	bl	800013c <__udivsi3>
 800a7fa:	9001      	str	r0, [sp, #4]
 800a7fc:	42af      	cmp	r7, r5
 800a7fe:	d324      	bcc.n	800a84a <quorem+0x8c>
 800a800:	2500      	movs	r5, #0
 800a802:	46ac      	mov	ip, r5
 800a804:	9802      	ldr	r0, [sp, #8]
 800a806:	9f05      	ldr	r7, [sp, #20]
 800a808:	cf08      	ldmia	r7!, {r3}
 800a80a:	9a01      	ldr	r2, [sp, #4]
 800a80c:	b299      	uxth	r1, r3
 800a80e:	4351      	muls	r1, r2
 800a810:	0c1b      	lsrs	r3, r3, #16
 800a812:	4353      	muls	r3, r2
 800a814:	1949      	adds	r1, r1, r5
 800a816:	0c0a      	lsrs	r2, r1, #16
 800a818:	189b      	adds	r3, r3, r2
 800a81a:	6802      	ldr	r2, [r0, #0]
 800a81c:	b289      	uxth	r1, r1
 800a81e:	b292      	uxth	r2, r2
 800a820:	4462      	add	r2, ip
 800a822:	1a52      	subs	r2, r2, r1
 800a824:	6801      	ldr	r1, [r0, #0]
 800a826:	0c1d      	lsrs	r5, r3, #16
 800a828:	0c09      	lsrs	r1, r1, #16
 800a82a:	b29b      	uxth	r3, r3
 800a82c:	1acb      	subs	r3, r1, r3
 800a82e:	1411      	asrs	r1, r2, #16
 800a830:	185b      	adds	r3, r3, r1
 800a832:	1419      	asrs	r1, r3, #16
 800a834:	b292      	uxth	r2, r2
 800a836:	041b      	lsls	r3, r3, #16
 800a838:	431a      	orrs	r2, r3
 800a83a:	9b04      	ldr	r3, [sp, #16]
 800a83c:	468c      	mov	ip, r1
 800a83e:	c004      	stmia	r0!, {r2}
 800a840:	42bb      	cmp	r3, r7
 800a842:	d2e1      	bcs.n	800a808 <quorem+0x4a>
 800a844:	6823      	ldr	r3, [r4, #0]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d030      	beq.n	800a8ac <quorem+0xee>
 800a84a:	0030      	movs	r0, r6
 800a84c:	9903      	ldr	r1, [sp, #12]
 800a84e:	f001 f901 	bl	800ba54 <__mcmp>
 800a852:	2800      	cmp	r0, #0
 800a854:	db21      	blt.n	800a89a <quorem+0xdc>
 800a856:	0030      	movs	r0, r6
 800a858:	2400      	movs	r4, #0
 800a85a:	9b01      	ldr	r3, [sp, #4]
 800a85c:	9903      	ldr	r1, [sp, #12]
 800a85e:	3301      	adds	r3, #1
 800a860:	9301      	str	r3, [sp, #4]
 800a862:	3014      	adds	r0, #20
 800a864:	3114      	adds	r1, #20
 800a866:	6803      	ldr	r3, [r0, #0]
 800a868:	c920      	ldmia	r1!, {r5}
 800a86a:	b29a      	uxth	r2, r3
 800a86c:	1914      	adds	r4, r2, r4
 800a86e:	b2aa      	uxth	r2, r5
 800a870:	1aa2      	subs	r2, r4, r2
 800a872:	0c1b      	lsrs	r3, r3, #16
 800a874:	0c2d      	lsrs	r5, r5, #16
 800a876:	1414      	asrs	r4, r2, #16
 800a878:	1b5b      	subs	r3, r3, r5
 800a87a:	191b      	adds	r3, r3, r4
 800a87c:	141c      	asrs	r4, r3, #16
 800a87e:	b292      	uxth	r2, r2
 800a880:	041b      	lsls	r3, r3, #16
 800a882:	4313      	orrs	r3, r2
 800a884:	c008      	stmia	r0!, {r3}
 800a886:	9b04      	ldr	r3, [sp, #16]
 800a888:	428b      	cmp	r3, r1
 800a88a:	d2ec      	bcs.n	800a866 <quorem+0xa8>
 800a88c:	9b00      	ldr	r3, [sp, #0]
 800a88e:	9a02      	ldr	r2, [sp, #8]
 800a890:	009b      	lsls	r3, r3, #2
 800a892:	18d3      	adds	r3, r2, r3
 800a894:	681a      	ldr	r2, [r3, #0]
 800a896:	2a00      	cmp	r2, #0
 800a898:	d015      	beq.n	800a8c6 <quorem+0x108>
 800a89a:	9801      	ldr	r0, [sp, #4]
 800a89c:	b007      	add	sp, #28
 800a89e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a8a0:	6823      	ldr	r3, [r4, #0]
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d106      	bne.n	800a8b4 <quorem+0xf6>
 800a8a6:	9b00      	ldr	r3, [sp, #0]
 800a8a8:	3b01      	subs	r3, #1
 800a8aa:	9300      	str	r3, [sp, #0]
 800a8ac:	9b02      	ldr	r3, [sp, #8]
 800a8ae:	3c04      	subs	r4, #4
 800a8b0:	42a3      	cmp	r3, r4
 800a8b2:	d3f5      	bcc.n	800a8a0 <quorem+0xe2>
 800a8b4:	9b00      	ldr	r3, [sp, #0]
 800a8b6:	6133      	str	r3, [r6, #16]
 800a8b8:	e7c7      	b.n	800a84a <quorem+0x8c>
 800a8ba:	681a      	ldr	r2, [r3, #0]
 800a8bc:	2a00      	cmp	r2, #0
 800a8be:	d106      	bne.n	800a8ce <quorem+0x110>
 800a8c0:	9a00      	ldr	r2, [sp, #0]
 800a8c2:	3a01      	subs	r2, #1
 800a8c4:	9200      	str	r2, [sp, #0]
 800a8c6:	9a02      	ldr	r2, [sp, #8]
 800a8c8:	3b04      	subs	r3, #4
 800a8ca:	429a      	cmp	r2, r3
 800a8cc:	d3f5      	bcc.n	800a8ba <quorem+0xfc>
 800a8ce:	9b00      	ldr	r3, [sp, #0]
 800a8d0:	6133      	str	r3, [r6, #16]
 800a8d2:	e7e2      	b.n	800a89a <quorem+0xdc>

0800a8d4 <_dtoa_r>:
 800a8d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a8d6:	b09d      	sub	sp, #116	; 0x74
 800a8d8:	9202      	str	r2, [sp, #8]
 800a8da:	9303      	str	r3, [sp, #12]
 800a8dc:	9b02      	ldr	r3, [sp, #8]
 800a8de:	9c03      	ldr	r4, [sp, #12]
 800a8e0:	9308      	str	r3, [sp, #32]
 800a8e2:	9409      	str	r4, [sp, #36]	; 0x24
 800a8e4:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a8e6:	0007      	movs	r7, r0
 800a8e8:	9d25      	ldr	r5, [sp, #148]	; 0x94
 800a8ea:	2c00      	cmp	r4, #0
 800a8ec:	d10e      	bne.n	800a90c <_dtoa_r+0x38>
 800a8ee:	2010      	movs	r0, #16
 800a8f0:	f000 fe0e 	bl	800b510 <malloc>
 800a8f4:	1e02      	subs	r2, r0, #0
 800a8f6:	6278      	str	r0, [r7, #36]	; 0x24
 800a8f8:	d104      	bne.n	800a904 <_dtoa_r+0x30>
 800a8fa:	21ea      	movs	r1, #234	; 0xea
 800a8fc:	4bc7      	ldr	r3, [pc, #796]	; (800ac1c <_dtoa_r+0x348>)
 800a8fe:	48c8      	ldr	r0, [pc, #800]	; (800ac20 <_dtoa_r+0x34c>)
 800a900:	f001 fc42 	bl	800c188 <__assert_func>
 800a904:	6044      	str	r4, [r0, #4]
 800a906:	6084      	str	r4, [r0, #8]
 800a908:	6004      	str	r4, [r0, #0]
 800a90a:	60c4      	str	r4, [r0, #12]
 800a90c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a90e:	6819      	ldr	r1, [r3, #0]
 800a910:	2900      	cmp	r1, #0
 800a912:	d00a      	beq.n	800a92a <_dtoa_r+0x56>
 800a914:	685a      	ldr	r2, [r3, #4]
 800a916:	2301      	movs	r3, #1
 800a918:	4093      	lsls	r3, r2
 800a91a:	604a      	str	r2, [r1, #4]
 800a91c:	608b      	str	r3, [r1, #8]
 800a91e:	0038      	movs	r0, r7
 800a920:	f000 fe58 	bl	800b5d4 <_Bfree>
 800a924:	2200      	movs	r2, #0
 800a926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a928:	601a      	str	r2, [r3, #0]
 800a92a:	9b03      	ldr	r3, [sp, #12]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	da20      	bge.n	800a972 <_dtoa_r+0x9e>
 800a930:	2301      	movs	r3, #1
 800a932:	602b      	str	r3, [r5, #0]
 800a934:	9b03      	ldr	r3, [sp, #12]
 800a936:	005b      	lsls	r3, r3, #1
 800a938:	085b      	lsrs	r3, r3, #1
 800a93a:	9309      	str	r3, [sp, #36]	; 0x24
 800a93c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a93e:	4bb9      	ldr	r3, [pc, #740]	; (800ac24 <_dtoa_r+0x350>)
 800a940:	4ab8      	ldr	r2, [pc, #736]	; (800ac24 <_dtoa_r+0x350>)
 800a942:	402b      	ands	r3, r5
 800a944:	4293      	cmp	r3, r2
 800a946:	d117      	bne.n	800a978 <_dtoa_r+0xa4>
 800a948:	4bb7      	ldr	r3, [pc, #732]	; (800ac28 <_dtoa_r+0x354>)
 800a94a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a94c:	0328      	lsls	r0, r5, #12
 800a94e:	6013      	str	r3, [r2, #0]
 800a950:	9b02      	ldr	r3, [sp, #8]
 800a952:	0b00      	lsrs	r0, r0, #12
 800a954:	4318      	orrs	r0, r3
 800a956:	d101      	bne.n	800a95c <_dtoa_r+0x88>
 800a958:	f000 fdbf 	bl	800b4da <_dtoa_r+0xc06>
 800a95c:	48b3      	ldr	r0, [pc, #716]	; (800ac2c <_dtoa_r+0x358>)
 800a95e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a960:	9006      	str	r0, [sp, #24]
 800a962:	2b00      	cmp	r3, #0
 800a964:	d002      	beq.n	800a96c <_dtoa_r+0x98>
 800a966:	4bb2      	ldr	r3, [pc, #712]	; (800ac30 <_dtoa_r+0x35c>)
 800a968:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a96a:	6013      	str	r3, [r2, #0]
 800a96c:	9806      	ldr	r0, [sp, #24]
 800a96e:	b01d      	add	sp, #116	; 0x74
 800a970:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a972:	2300      	movs	r3, #0
 800a974:	602b      	str	r3, [r5, #0]
 800a976:	e7e1      	b.n	800a93c <_dtoa_r+0x68>
 800a978:	9b08      	ldr	r3, [sp, #32]
 800a97a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800a97c:	9312      	str	r3, [sp, #72]	; 0x48
 800a97e:	9413      	str	r4, [sp, #76]	; 0x4c
 800a980:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a982:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800a984:	2200      	movs	r2, #0
 800a986:	2300      	movs	r3, #0
 800a988:	f7f5 fd5e 	bl	8000448 <__aeabi_dcmpeq>
 800a98c:	1e04      	subs	r4, r0, #0
 800a98e:	d009      	beq.n	800a9a4 <_dtoa_r+0xd0>
 800a990:	2301      	movs	r3, #1
 800a992:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a994:	6013      	str	r3, [r2, #0]
 800a996:	4ba7      	ldr	r3, [pc, #668]	; (800ac34 <_dtoa_r+0x360>)
 800a998:	9306      	str	r3, [sp, #24]
 800a99a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d0e5      	beq.n	800a96c <_dtoa_r+0x98>
 800a9a0:	4ba5      	ldr	r3, [pc, #660]	; (800ac38 <_dtoa_r+0x364>)
 800a9a2:	e7e1      	b.n	800a968 <_dtoa_r+0x94>
 800a9a4:	ab1a      	add	r3, sp, #104	; 0x68
 800a9a6:	9301      	str	r3, [sp, #4]
 800a9a8:	ab1b      	add	r3, sp, #108	; 0x6c
 800a9aa:	9300      	str	r3, [sp, #0]
 800a9ac:	0038      	movs	r0, r7
 800a9ae:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a9b0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a9b2:	f001 f903 	bl	800bbbc <__d2b>
 800a9b6:	006e      	lsls	r6, r5, #1
 800a9b8:	9005      	str	r0, [sp, #20]
 800a9ba:	0d76      	lsrs	r6, r6, #21
 800a9bc:	d100      	bne.n	800a9c0 <_dtoa_r+0xec>
 800a9be:	e07c      	b.n	800aaba <_dtoa_r+0x1e6>
 800a9c0:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a9c2:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800a9c4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a9c6:	4a9d      	ldr	r2, [pc, #628]	; (800ac3c <_dtoa_r+0x368>)
 800a9c8:	031b      	lsls	r3, r3, #12
 800a9ca:	0b1b      	lsrs	r3, r3, #12
 800a9cc:	431a      	orrs	r2, r3
 800a9ce:	0011      	movs	r1, r2
 800a9d0:	4b9b      	ldr	r3, [pc, #620]	; (800ac40 <_dtoa_r+0x36c>)
 800a9d2:	9418      	str	r4, [sp, #96]	; 0x60
 800a9d4:	18f6      	adds	r6, r6, r3
 800a9d6:	2200      	movs	r2, #0
 800a9d8:	4b9a      	ldr	r3, [pc, #616]	; (800ac44 <_dtoa_r+0x370>)
 800a9da:	f7f6 fff9 	bl	80019d0 <__aeabi_dsub>
 800a9de:	4a9a      	ldr	r2, [pc, #616]	; (800ac48 <_dtoa_r+0x374>)
 800a9e0:	4b9a      	ldr	r3, [pc, #616]	; (800ac4c <_dtoa_r+0x378>)
 800a9e2:	f7f6 fd89 	bl	80014f8 <__aeabi_dmul>
 800a9e6:	4a9a      	ldr	r2, [pc, #616]	; (800ac50 <_dtoa_r+0x37c>)
 800a9e8:	4b9a      	ldr	r3, [pc, #616]	; (800ac54 <_dtoa_r+0x380>)
 800a9ea:	f7f5 fe47 	bl	800067c <__aeabi_dadd>
 800a9ee:	0004      	movs	r4, r0
 800a9f0:	0030      	movs	r0, r6
 800a9f2:	000d      	movs	r5, r1
 800a9f4:	f7f7 fbd2 	bl	800219c <__aeabi_i2d>
 800a9f8:	4a97      	ldr	r2, [pc, #604]	; (800ac58 <_dtoa_r+0x384>)
 800a9fa:	4b98      	ldr	r3, [pc, #608]	; (800ac5c <_dtoa_r+0x388>)
 800a9fc:	f7f6 fd7c 	bl	80014f8 <__aeabi_dmul>
 800aa00:	0002      	movs	r2, r0
 800aa02:	000b      	movs	r3, r1
 800aa04:	0020      	movs	r0, r4
 800aa06:	0029      	movs	r1, r5
 800aa08:	f7f5 fe38 	bl	800067c <__aeabi_dadd>
 800aa0c:	0004      	movs	r4, r0
 800aa0e:	000d      	movs	r5, r1
 800aa10:	f7f7 fb8e 	bl	8002130 <__aeabi_d2iz>
 800aa14:	2200      	movs	r2, #0
 800aa16:	9002      	str	r0, [sp, #8]
 800aa18:	2300      	movs	r3, #0
 800aa1a:	0020      	movs	r0, r4
 800aa1c:	0029      	movs	r1, r5
 800aa1e:	f7f5 fd19 	bl	8000454 <__aeabi_dcmplt>
 800aa22:	2800      	cmp	r0, #0
 800aa24:	d00b      	beq.n	800aa3e <_dtoa_r+0x16a>
 800aa26:	9802      	ldr	r0, [sp, #8]
 800aa28:	f7f7 fbb8 	bl	800219c <__aeabi_i2d>
 800aa2c:	002b      	movs	r3, r5
 800aa2e:	0022      	movs	r2, r4
 800aa30:	f7f5 fd0a 	bl	8000448 <__aeabi_dcmpeq>
 800aa34:	4243      	negs	r3, r0
 800aa36:	4158      	adcs	r0, r3
 800aa38:	9b02      	ldr	r3, [sp, #8]
 800aa3a:	1a1b      	subs	r3, r3, r0
 800aa3c:	9302      	str	r3, [sp, #8]
 800aa3e:	2301      	movs	r3, #1
 800aa40:	9316      	str	r3, [sp, #88]	; 0x58
 800aa42:	9b02      	ldr	r3, [sp, #8]
 800aa44:	2b16      	cmp	r3, #22
 800aa46:	d80f      	bhi.n	800aa68 <_dtoa_r+0x194>
 800aa48:	9812      	ldr	r0, [sp, #72]	; 0x48
 800aa4a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800aa4c:	00da      	lsls	r2, r3, #3
 800aa4e:	4b84      	ldr	r3, [pc, #528]	; (800ac60 <_dtoa_r+0x38c>)
 800aa50:	189b      	adds	r3, r3, r2
 800aa52:	681a      	ldr	r2, [r3, #0]
 800aa54:	685b      	ldr	r3, [r3, #4]
 800aa56:	f7f5 fcfd 	bl	8000454 <__aeabi_dcmplt>
 800aa5a:	2800      	cmp	r0, #0
 800aa5c:	d049      	beq.n	800aaf2 <_dtoa_r+0x21e>
 800aa5e:	9b02      	ldr	r3, [sp, #8]
 800aa60:	3b01      	subs	r3, #1
 800aa62:	9302      	str	r3, [sp, #8]
 800aa64:	2300      	movs	r3, #0
 800aa66:	9316      	str	r3, [sp, #88]	; 0x58
 800aa68:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800aa6a:	1b9e      	subs	r6, r3, r6
 800aa6c:	2300      	movs	r3, #0
 800aa6e:	930a      	str	r3, [sp, #40]	; 0x28
 800aa70:	0033      	movs	r3, r6
 800aa72:	3b01      	subs	r3, #1
 800aa74:	930d      	str	r3, [sp, #52]	; 0x34
 800aa76:	d504      	bpl.n	800aa82 <_dtoa_r+0x1ae>
 800aa78:	2301      	movs	r3, #1
 800aa7a:	1b9b      	subs	r3, r3, r6
 800aa7c:	930a      	str	r3, [sp, #40]	; 0x28
 800aa7e:	2300      	movs	r3, #0
 800aa80:	930d      	str	r3, [sp, #52]	; 0x34
 800aa82:	9b02      	ldr	r3, [sp, #8]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	db36      	blt.n	800aaf6 <_dtoa_r+0x222>
 800aa88:	9a02      	ldr	r2, [sp, #8]
 800aa8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aa8c:	4694      	mov	ip, r2
 800aa8e:	4463      	add	r3, ip
 800aa90:	930d      	str	r3, [sp, #52]	; 0x34
 800aa92:	2300      	movs	r3, #0
 800aa94:	9215      	str	r2, [sp, #84]	; 0x54
 800aa96:	930e      	str	r3, [sp, #56]	; 0x38
 800aa98:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800aa9a:	2401      	movs	r4, #1
 800aa9c:	2b09      	cmp	r3, #9
 800aa9e:	d864      	bhi.n	800ab6a <_dtoa_r+0x296>
 800aaa0:	2b05      	cmp	r3, #5
 800aaa2:	dd02      	ble.n	800aaaa <_dtoa_r+0x1d6>
 800aaa4:	2400      	movs	r4, #0
 800aaa6:	3b04      	subs	r3, #4
 800aaa8:	9322      	str	r3, [sp, #136]	; 0x88
 800aaaa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800aaac:	1e98      	subs	r0, r3, #2
 800aaae:	2803      	cmp	r0, #3
 800aab0:	d864      	bhi.n	800ab7c <_dtoa_r+0x2a8>
 800aab2:	f7f5 fb2f 	bl	8000114 <__gnu_thumb1_case_uqi>
 800aab6:	3829      	.short	0x3829
 800aab8:	5836      	.short	0x5836
 800aaba:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800aabc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800aabe:	189e      	adds	r6, r3, r2
 800aac0:	4b68      	ldr	r3, [pc, #416]	; (800ac64 <_dtoa_r+0x390>)
 800aac2:	18f2      	adds	r2, r6, r3
 800aac4:	2a20      	cmp	r2, #32
 800aac6:	dd0f      	ble.n	800aae8 <_dtoa_r+0x214>
 800aac8:	2340      	movs	r3, #64	; 0x40
 800aaca:	1a9b      	subs	r3, r3, r2
 800aacc:	409d      	lsls	r5, r3
 800aace:	4b66      	ldr	r3, [pc, #408]	; (800ac68 <_dtoa_r+0x394>)
 800aad0:	9802      	ldr	r0, [sp, #8]
 800aad2:	18f3      	adds	r3, r6, r3
 800aad4:	40d8      	lsrs	r0, r3
 800aad6:	4328      	orrs	r0, r5
 800aad8:	f7f7 fb90 	bl	80021fc <__aeabi_ui2d>
 800aadc:	2301      	movs	r3, #1
 800aade:	4c63      	ldr	r4, [pc, #396]	; (800ac6c <_dtoa_r+0x398>)
 800aae0:	3e01      	subs	r6, #1
 800aae2:	1909      	adds	r1, r1, r4
 800aae4:	9318      	str	r3, [sp, #96]	; 0x60
 800aae6:	e776      	b.n	800a9d6 <_dtoa_r+0x102>
 800aae8:	2320      	movs	r3, #32
 800aaea:	9802      	ldr	r0, [sp, #8]
 800aaec:	1a9b      	subs	r3, r3, r2
 800aaee:	4098      	lsls	r0, r3
 800aaf0:	e7f2      	b.n	800aad8 <_dtoa_r+0x204>
 800aaf2:	9016      	str	r0, [sp, #88]	; 0x58
 800aaf4:	e7b8      	b.n	800aa68 <_dtoa_r+0x194>
 800aaf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aaf8:	9a02      	ldr	r2, [sp, #8]
 800aafa:	1a9b      	subs	r3, r3, r2
 800aafc:	930a      	str	r3, [sp, #40]	; 0x28
 800aafe:	4253      	negs	r3, r2
 800ab00:	930e      	str	r3, [sp, #56]	; 0x38
 800ab02:	2300      	movs	r3, #0
 800ab04:	9315      	str	r3, [sp, #84]	; 0x54
 800ab06:	e7c7      	b.n	800aa98 <_dtoa_r+0x1c4>
 800ab08:	2300      	movs	r3, #0
 800ab0a:	930f      	str	r3, [sp, #60]	; 0x3c
 800ab0c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ab0e:	930c      	str	r3, [sp, #48]	; 0x30
 800ab10:	9307      	str	r3, [sp, #28]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	dc13      	bgt.n	800ab3e <_dtoa_r+0x26a>
 800ab16:	2301      	movs	r3, #1
 800ab18:	001a      	movs	r2, r3
 800ab1a:	930c      	str	r3, [sp, #48]	; 0x30
 800ab1c:	9307      	str	r3, [sp, #28]
 800ab1e:	9223      	str	r2, [sp, #140]	; 0x8c
 800ab20:	e00d      	b.n	800ab3e <_dtoa_r+0x26a>
 800ab22:	2301      	movs	r3, #1
 800ab24:	e7f1      	b.n	800ab0a <_dtoa_r+0x236>
 800ab26:	2300      	movs	r3, #0
 800ab28:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800ab2a:	930f      	str	r3, [sp, #60]	; 0x3c
 800ab2c:	4694      	mov	ip, r2
 800ab2e:	9b02      	ldr	r3, [sp, #8]
 800ab30:	4463      	add	r3, ip
 800ab32:	930c      	str	r3, [sp, #48]	; 0x30
 800ab34:	3301      	adds	r3, #1
 800ab36:	9307      	str	r3, [sp, #28]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	dc00      	bgt.n	800ab3e <_dtoa_r+0x26a>
 800ab3c:	2301      	movs	r3, #1
 800ab3e:	2200      	movs	r2, #0
 800ab40:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ab42:	6042      	str	r2, [r0, #4]
 800ab44:	3204      	adds	r2, #4
 800ab46:	0015      	movs	r5, r2
 800ab48:	3514      	adds	r5, #20
 800ab4a:	6841      	ldr	r1, [r0, #4]
 800ab4c:	429d      	cmp	r5, r3
 800ab4e:	d919      	bls.n	800ab84 <_dtoa_r+0x2b0>
 800ab50:	0038      	movs	r0, r7
 800ab52:	f000 fcfb 	bl	800b54c <_Balloc>
 800ab56:	9006      	str	r0, [sp, #24]
 800ab58:	2800      	cmp	r0, #0
 800ab5a:	d117      	bne.n	800ab8c <_dtoa_r+0x2b8>
 800ab5c:	21d5      	movs	r1, #213	; 0xd5
 800ab5e:	0002      	movs	r2, r0
 800ab60:	4b43      	ldr	r3, [pc, #268]	; (800ac70 <_dtoa_r+0x39c>)
 800ab62:	0049      	lsls	r1, r1, #1
 800ab64:	e6cb      	b.n	800a8fe <_dtoa_r+0x2a>
 800ab66:	2301      	movs	r3, #1
 800ab68:	e7de      	b.n	800ab28 <_dtoa_r+0x254>
 800ab6a:	2300      	movs	r3, #0
 800ab6c:	940f      	str	r4, [sp, #60]	; 0x3c
 800ab6e:	9322      	str	r3, [sp, #136]	; 0x88
 800ab70:	3b01      	subs	r3, #1
 800ab72:	930c      	str	r3, [sp, #48]	; 0x30
 800ab74:	9307      	str	r3, [sp, #28]
 800ab76:	2200      	movs	r2, #0
 800ab78:	3313      	adds	r3, #19
 800ab7a:	e7d0      	b.n	800ab1e <_dtoa_r+0x24a>
 800ab7c:	2301      	movs	r3, #1
 800ab7e:	930f      	str	r3, [sp, #60]	; 0x3c
 800ab80:	3b02      	subs	r3, #2
 800ab82:	e7f6      	b.n	800ab72 <_dtoa_r+0x29e>
 800ab84:	3101      	adds	r1, #1
 800ab86:	6041      	str	r1, [r0, #4]
 800ab88:	0052      	lsls	r2, r2, #1
 800ab8a:	e7dc      	b.n	800ab46 <_dtoa_r+0x272>
 800ab8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab8e:	9a06      	ldr	r2, [sp, #24]
 800ab90:	601a      	str	r2, [r3, #0]
 800ab92:	9b07      	ldr	r3, [sp, #28]
 800ab94:	2b0e      	cmp	r3, #14
 800ab96:	d900      	bls.n	800ab9a <_dtoa_r+0x2c6>
 800ab98:	e0eb      	b.n	800ad72 <_dtoa_r+0x49e>
 800ab9a:	2c00      	cmp	r4, #0
 800ab9c:	d100      	bne.n	800aba0 <_dtoa_r+0x2cc>
 800ab9e:	e0e8      	b.n	800ad72 <_dtoa_r+0x49e>
 800aba0:	9b02      	ldr	r3, [sp, #8]
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	dd68      	ble.n	800ac78 <_dtoa_r+0x3a4>
 800aba6:	001a      	movs	r2, r3
 800aba8:	210f      	movs	r1, #15
 800abaa:	4b2d      	ldr	r3, [pc, #180]	; (800ac60 <_dtoa_r+0x38c>)
 800abac:	400a      	ands	r2, r1
 800abae:	00d2      	lsls	r2, r2, #3
 800abb0:	189b      	adds	r3, r3, r2
 800abb2:	681d      	ldr	r5, [r3, #0]
 800abb4:	685e      	ldr	r6, [r3, #4]
 800abb6:	9b02      	ldr	r3, [sp, #8]
 800abb8:	111c      	asrs	r4, r3, #4
 800abba:	2302      	movs	r3, #2
 800abbc:	9310      	str	r3, [sp, #64]	; 0x40
 800abbe:	9b02      	ldr	r3, [sp, #8]
 800abc0:	05db      	lsls	r3, r3, #23
 800abc2:	d50b      	bpl.n	800abdc <_dtoa_r+0x308>
 800abc4:	4b2b      	ldr	r3, [pc, #172]	; (800ac74 <_dtoa_r+0x3a0>)
 800abc6:	400c      	ands	r4, r1
 800abc8:	6a1a      	ldr	r2, [r3, #32]
 800abca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abcc:	9812      	ldr	r0, [sp, #72]	; 0x48
 800abce:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800abd0:	f7f6 f890 	bl	8000cf4 <__aeabi_ddiv>
 800abd4:	2303      	movs	r3, #3
 800abd6:	9008      	str	r0, [sp, #32]
 800abd8:	9109      	str	r1, [sp, #36]	; 0x24
 800abda:	9310      	str	r3, [sp, #64]	; 0x40
 800abdc:	4b25      	ldr	r3, [pc, #148]	; (800ac74 <_dtoa_r+0x3a0>)
 800abde:	9314      	str	r3, [sp, #80]	; 0x50
 800abe0:	2c00      	cmp	r4, #0
 800abe2:	d108      	bne.n	800abf6 <_dtoa_r+0x322>
 800abe4:	9808      	ldr	r0, [sp, #32]
 800abe6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800abe8:	002a      	movs	r2, r5
 800abea:	0033      	movs	r3, r6
 800abec:	f7f6 f882 	bl	8000cf4 <__aeabi_ddiv>
 800abf0:	9008      	str	r0, [sp, #32]
 800abf2:	9109      	str	r1, [sp, #36]	; 0x24
 800abf4:	e05c      	b.n	800acb0 <_dtoa_r+0x3dc>
 800abf6:	2301      	movs	r3, #1
 800abf8:	421c      	tst	r4, r3
 800abfa:	d00b      	beq.n	800ac14 <_dtoa_r+0x340>
 800abfc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800abfe:	0028      	movs	r0, r5
 800ac00:	3301      	adds	r3, #1
 800ac02:	9310      	str	r3, [sp, #64]	; 0x40
 800ac04:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ac06:	0031      	movs	r1, r6
 800ac08:	681a      	ldr	r2, [r3, #0]
 800ac0a:	685b      	ldr	r3, [r3, #4]
 800ac0c:	f7f6 fc74 	bl	80014f8 <__aeabi_dmul>
 800ac10:	0005      	movs	r5, r0
 800ac12:	000e      	movs	r6, r1
 800ac14:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ac16:	1064      	asrs	r4, r4, #1
 800ac18:	3308      	adds	r3, #8
 800ac1a:	e7e0      	b.n	800abde <_dtoa_r+0x30a>
 800ac1c:	0800d01d 	.word	0x0800d01d
 800ac20:	0800d034 	.word	0x0800d034
 800ac24:	7ff00000 	.word	0x7ff00000
 800ac28:	0000270f 	.word	0x0000270f
 800ac2c:	0800d019 	.word	0x0800d019
 800ac30:	0800d01c 	.word	0x0800d01c
 800ac34:	0800cfec 	.word	0x0800cfec
 800ac38:	0800cfed 	.word	0x0800cfed
 800ac3c:	3ff00000 	.word	0x3ff00000
 800ac40:	fffffc01 	.word	0xfffffc01
 800ac44:	3ff80000 	.word	0x3ff80000
 800ac48:	636f4361 	.word	0x636f4361
 800ac4c:	3fd287a7 	.word	0x3fd287a7
 800ac50:	8b60c8b3 	.word	0x8b60c8b3
 800ac54:	3fc68a28 	.word	0x3fc68a28
 800ac58:	509f79fb 	.word	0x509f79fb
 800ac5c:	3fd34413 	.word	0x3fd34413
 800ac60:	0800d128 	.word	0x0800d128
 800ac64:	00000432 	.word	0x00000432
 800ac68:	00000412 	.word	0x00000412
 800ac6c:	fe100000 	.word	0xfe100000
 800ac70:	0800d08f 	.word	0x0800d08f
 800ac74:	0800d100 	.word	0x0800d100
 800ac78:	2302      	movs	r3, #2
 800ac7a:	9310      	str	r3, [sp, #64]	; 0x40
 800ac7c:	9b02      	ldr	r3, [sp, #8]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d016      	beq.n	800acb0 <_dtoa_r+0x3dc>
 800ac82:	9812      	ldr	r0, [sp, #72]	; 0x48
 800ac84:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800ac86:	425c      	negs	r4, r3
 800ac88:	230f      	movs	r3, #15
 800ac8a:	4ab6      	ldr	r2, [pc, #728]	; (800af64 <_dtoa_r+0x690>)
 800ac8c:	4023      	ands	r3, r4
 800ac8e:	00db      	lsls	r3, r3, #3
 800ac90:	18d3      	adds	r3, r2, r3
 800ac92:	681a      	ldr	r2, [r3, #0]
 800ac94:	685b      	ldr	r3, [r3, #4]
 800ac96:	f7f6 fc2f 	bl	80014f8 <__aeabi_dmul>
 800ac9a:	2601      	movs	r6, #1
 800ac9c:	2300      	movs	r3, #0
 800ac9e:	9008      	str	r0, [sp, #32]
 800aca0:	9109      	str	r1, [sp, #36]	; 0x24
 800aca2:	4db1      	ldr	r5, [pc, #708]	; (800af68 <_dtoa_r+0x694>)
 800aca4:	1124      	asrs	r4, r4, #4
 800aca6:	2c00      	cmp	r4, #0
 800aca8:	d000      	beq.n	800acac <_dtoa_r+0x3d8>
 800acaa:	e094      	b.n	800add6 <_dtoa_r+0x502>
 800acac:	2b00      	cmp	r3, #0
 800acae:	d19f      	bne.n	800abf0 <_dtoa_r+0x31c>
 800acb0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d100      	bne.n	800acb8 <_dtoa_r+0x3e4>
 800acb6:	e09b      	b.n	800adf0 <_dtoa_r+0x51c>
 800acb8:	9c08      	ldr	r4, [sp, #32]
 800acba:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800acbc:	2200      	movs	r2, #0
 800acbe:	0020      	movs	r0, r4
 800acc0:	0029      	movs	r1, r5
 800acc2:	4baa      	ldr	r3, [pc, #680]	; (800af6c <_dtoa_r+0x698>)
 800acc4:	f7f5 fbc6 	bl	8000454 <__aeabi_dcmplt>
 800acc8:	2800      	cmp	r0, #0
 800acca:	d100      	bne.n	800acce <_dtoa_r+0x3fa>
 800accc:	e090      	b.n	800adf0 <_dtoa_r+0x51c>
 800acce:	9b07      	ldr	r3, [sp, #28]
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d100      	bne.n	800acd6 <_dtoa_r+0x402>
 800acd4:	e08c      	b.n	800adf0 <_dtoa_r+0x51c>
 800acd6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800acd8:	2b00      	cmp	r3, #0
 800acda:	dd46      	ble.n	800ad6a <_dtoa_r+0x496>
 800acdc:	9b02      	ldr	r3, [sp, #8]
 800acde:	2200      	movs	r2, #0
 800ace0:	0020      	movs	r0, r4
 800ace2:	0029      	movs	r1, r5
 800ace4:	1e5e      	subs	r6, r3, #1
 800ace6:	4ba2      	ldr	r3, [pc, #648]	; (800af70 <_dtoa_r+0x69c>)
 800ace8:	f7f6 fc06 	bl	80014f8 <__aeabi_dmul>
 800acec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800acee:	9008      	str	r0, [sp, #32]
 800acf0:	9109      	str	r1, [sp, #36]	; 0x24
 800acf2:	3301      	adds	r3, #1
 800acf4:	9310      	str	r3, [sp, #64]	; 0x40
 800acf6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800acf8:	9810      	ldr	r0, [sp, #64]	; 0x40
 800acfa:	9c08      	ldr	r4, [sp, #32]
 800acfc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800acfe:	9314      	str	r3, [sp, #80]	; 0x50
 800ad00:	f7f7 fa4c 	bl	800219c <__aeabi_i2d>
 800ad04:	0022      	movs	r2, r4
 800ad06:	002b      	movs	r3, r5
 800ad08:	f7f6 fbf6 	bl	80014f8 <__aeabi_dmul>
 800ad0c:	2200      	movs	r2, #0
 800ad0e:	4b99      	ldr	r3, [pc, #612]	; (800af74 <_dtoa_r+0x6a0>)
 800ad10:	f7f5 fcb4 	bl	800067c <__aeabi_dadd>
 800ad14:	9010      	str	r0, [sp, #64]	; 0x40
 800ad16:	9111      	str	r1, [sp, #68]	; 0x44
 800ad18:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ad1a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ad1c:	9208      	str	r2, [sp, #32]
 800ad1e:	9309      	str	r3, [sp, #36]	; 0x24
 800ad20:	4a95      	ldr	r2, [pc, #596]	; (800af78 <_dtoa_r+0x6a4>)
 800ad22:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ad24:	4694      	mov	ip, r2
 800ad26:	4463      	add	r3, ip
 800ad28:	9317      	str	r3, [sp, #92]	; 0x5c
 800ad2a:	9309      	str	r3, [sp, #36]	; 0x24
 800ad2c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d161      	bne.n	800adf6 <_dtoa_r+0x522>
 800ad32:	2200      	movs	r2, #0
 800ad34:	0020      	movs	r0, r4
 800ad36:	0029      	movs	r1, r5
 800ad38:	4b90      	ldr	r3, [pc, #576]	; (800af7c <_dtoa_r+0x6a8>)
 800ad3a:	f7f6 fe49 	bl	80019d0 <__aeabi_dsub>
 800ad3e:	9a08      	ldr	r2, [sp, #32]
 800ad40:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ad42:	0004      	movs	r4, r0
 800ad44:	000d      	movs	r5, r1
 800ad46:	f7f5 fb99 	bl	800047c <__aeabi_dcmpgt>
 800ad4a:	2800      	cmp	r0, #0
 800ad4c:	d000      	beq.n	800ad50 <_dtoa_r+0x47c>
 800ad4e:	e2af      	b.n	800b2b0 <_dtoa_r+0x9dc>
 800ad50:	488b      	ldr	r0, [pc, #556]	; (800af80 <_dtoa_r+0x6ac>)
 800ad52:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ad54:	4684      	mov	ip, r0
 800ad56:	4461      	add	r1, ip
 800ad58:	000b      	movs	r3, r1
 800ad5a:	0020      	movs	r0, r4
 800ad5c:	0029      	movs	r1, r5
 800ad5e:	9a08      	ldr	r2, [sp, #32]
 800ad60:	f7f5 fb78 	bl	8000454 <__aeabi_dcmplt>
 800ad64:	2800      	cmp	r0, #0
 800ad66:	d000      	beq.n	800ad6a <_dtoa_r+0x496>
 800ad68:	e29f      	b.n	800b2aa <_dtoa_r+0x9d6>
 800ad6a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ad6c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800ad6e:	9308      	str	r3, [sp, #32]
 800ad70:	9409      	str	r4, [sp, #36]	; 0x24
 800ad72:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	da00      	bge.n	800ad7a <_dtoa_r+0x4a6>
 800ad78:	e172      	b.n	800b060 <_dtoa_r+0x78c>
 800ad7a:	9a02      	ldr	r2, [sp, #8]
 800ad7c:	2a0e      	cmp	r2, #14
 800ad7e:	dd00      	ble.n	800ad82 <_dtoa_r+0x4ae>
 800ad80:	e16e      	b.n	800b060 <_dtoa_r+0x78c>
 800ad82:	4b78      	ldr	r3, [pc, #480]	; (800af64 <_dtoa_r+0x690>)
 800ad84:	00d2      	lsls	r2, r2, #3
 800ad86:	189b      	adds	r3, r3, r2
 800ad88:	685c      	ldr	r4, [r3, #4]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	930a      	str	r3, [sp, #40]	; 0x28
 800ad8e:	940b      	str	r4, [sp, #44]	; 0x2c
 800ad90:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	db00      	blt.n	800ad98 <_dtoa_r+0x4c4>
 800ad96:	e0f7      	b.n	800af88 <_dtoa_r+0x6b4>
 800ad98:	9b07      	ldr	r3, [sp, #28]
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	dd00      	ble.n	800ada0 <_dtoa_r+0x4cc>
 800ad9e:	e0f3      	b.n	800af88 <_dtoa_r+0x6b4>
 800ada0:	d000      	beq.n	800ada4 <_dtoa_r+0x4d0>
 800ada2:	e282      	b.n	800b2aa <_dtoa_r+0x9d6>
 800ada4:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ada6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ada8:	2200      	movs	r2, #0
 800adaa:	4b74      	ldr	r3, [pc, #464]	; (800af7c <_dtoa_r+0x6a8>)
 800adac:	f7f6 fba4 	bl	80014f8 <__aeabi_dmul>
 800adb0:	9a08      	ldr	r2, [sp, #32]
 800adb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800adb4:	f7f5 fb6c 	bl	8000490 <__aeabi_dcmpge>
 800adb8:	9e07      	ldr	r6, [sp, #28]
 800adba:	0035      	movs	r5, r6
 800adbc:	2800      	cmp	r0, #0
 800adbe:	d000      	beq.n	800adc2 <_dtoa_r+0x4ee>
 800adc0:	e259      	b.n	800b276 <_dtoa_r+0x9a2>
 800adc2:	9b06      	ldr	r3, [sp, #24]
 800adc4:	9a06      	ldr	r2, [sp, #24]
 800adc6:	3301      	adds	r3, #1
 800adc8:	9308      	str	r3, [sp, #32]
 800adca:	2331      	movs	r3, #49	; 0x31
 800adcc:	7013      	strb	r3, [r2, #0]
 800adce:	9b02      	ldr	r3, [sp, #8]
 800add0:	3301      	adds	r3, #1
 800add2:	9302      	str	r3, [sp, #8]
 800add4:	e254      	b.n	800b280 <_dtoa_r+0x9ac>
 800add6:	4234      	tst	r4, r6
 800add8:	d007      	beq.n	800adea <_dtoa_r+0x516>
 800adda:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800addc:	3301      	adds	r3, #1
 800adde:	9310      	str	r3, [sp, #64]	; 0x40
 800ade0:	682a      	ldr	r2, [r5, #0]
 800ade2:	686b      	ldr	r3, [r5, #4]
 800ade4:	f7f6 fb88 	bl	80014f8 <__aeabi_dmul>
 800ade8:	0033      	movs	r3, r6
 800adea:	1064      	asrs	r4, r4, #1
 800adec:	3508      	adds	r5, #8
 800adee:	e75a      	b.n	800aca6 <_dtoa_r+0x3d2>
 800adf0:	9e02      	ldr	r6, [sp, #8]
 800adf2:	9b07      	ldr	r3, [sp, #28]
 800adf4:	e780      	b.n	800acf8 <_dtoa_r+0x424>
 800adf6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800adf8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800adfa:	1e5a      	subs	r2, r3, #1
 800adfc:	4b59      	ldr	r3, [pc, #356]	; (800af64 <_dtoa_r+0x690>)
 800adfe:	00d2      	lsls	r2, r2, #3
 800ae00:	189b      	adds	r3, r3, r2
 800ae02:	681a      	ldr	r2, [r3, #0]
 800ae04:	685b      	ldr	r3, [r3, #4]
 800ae06:	2900      	cmp	r1, #0
 800ae08:	d051      	beq.n	800aeae <_dtoa_r+0x5da>
 800ae0a:	2000      	movs	r0, #0
 800ae0c:	495d      	ldr	r1, [pc, #372]	; (800af84 <_dtoa_r+0x6b0>)
 800ae0e:	f7f5 ff71 	bl	8000cf4 <__aeabi_ddiv>
 800ae12:	9a08      	ldr	r2, [sp, #32]
 800ae14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae16:	f7f6 fddb 	bl	80019d0 <__aeabi_dsub>
 800ae1a:	9a06      	ldr	r2, [sp, #24]
 800ae1c:	9b06      	ldr	r3, [sp, #24]
 800ae1e:	4694      	mov	ip, r2
 800ae20:	9317      	str	r3, [sp, #92]	; 0x5c
 800ae22:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ae24:	9010      	str	r0, [sp, #64]	; 0x40
 800ae26:	9111      	str	r1, [sp, #68]	; 0x44
 800ae28:	4463      	add	r3, ip
 800ae2a:	9319      	str	r3, [sp, #100]	; 0x64
 800ae2c:	0029      	movs	r1, r5
 800ae2e:	0020      	movs	r0, r4
 800ae30:	f7f7 f97e 	bl	8002130 <__aeabi_d2iz>
 800ae34:	9014      	str	r0, [sp, #80]	; 0x50
 800ae36:	f7f7 f9b1 	bl	800219c <__aeabi_i2d>
 800ae3a:	0002      	movs	r2, r0
 800ae3c:	000b      	movs	r3, r1
 800ae3e:	0020      	movs	r0, r4
 800ae40:	0029      	movs	r1, r5
 800ae42:	f7f6 fdc5 	bl	80019d0 <__aeabi_dsub>
 800ae46:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ae48:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ae4a:	3301      	adds	r3, #1
 800ae4c:	9308      	str	r3, [sp, #32]
 800ae4e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ae50:	0004      	movs	r4, r0
 800ae52:	3330      	adds	r3, #48	; 0x30
 800ae54:	7013      	strb	r3, [r2, #0]
 800ae56:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ae58:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ae5a:	000d      	movs	r5, r1
 800ae5c:	f7f5 fafa 	bl	8000454 <__aeabi_dcmplt>
 800ae60:	2800      	cmp	r0, #0
 800ae62:	d175      	bne.n	800af50 <_dtoa_r+0x67c>
 800ae64:	0022      	movs	r2, r4
 800ae66:	002b      	movs	r3, r5
 800ae68:	2000      	movs	r0, #0
 800ae6a:	4940      	ldr	r1, [pc, #256]	; (800af6c <_dtoa_r+0x698>)
 800ae6c:	f7f6 fdb0 	bl	80019d0 <__aeabi_dsub>
 800ae70:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ae72:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ae74:	f7f5 faee 	bl	8000454 <__aeabi_dcmplt>
 800ae78:	2800      	cmp	r0, #0
 800ae7a:	d000      	beq.n	800ae7e <_dtoa_r+0x5aa>
 800ae7c:	e0d2      	b.n	800b024 <_dtoa_r+0x750>
 800ae7e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ae80:	9a08      	ldr	r2, [sp, #32]
 800ae82:	4293      	cmp	r3, r2
 800ae84:	d100      	bne.n	800ae88 <_dtoa_r+0x5b4>
 800ae86:	e770      	b.n	800ad6a <_dtoa_r+0x496>
 800ae88:	9810      	ldr	r0, [sp, #64]	; 0x40
 800ae8a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ae8c:	2200      	movs	r2, #0
 800ae8e:	4b38      	ldr	r3, [pc, #224]	; (800af70 <_dtoa_r+0x69c>)
 800ae90:	f7f6 fb32 	bl	80014f8 <__aeabi_dmul>
 800ae94:	4b36      	ldr	r3, [pc, #216]	; (800af70 <_dtoa_r+0x69c>)
 800ae96:	9010      	str	r0, [sp, #64]	; 0x40
 800ae98:	9111      	str	r1, [sp, #68]	; 0x44
 800ae9a:	2200      	movs	r2, #0
 800ae9c:	0020      	movs	r0, r4
 800ae9e:	0029      	movs	r1, r5
 800aea0:	f7f6 fb2a 	bl	80014f8 <__aeabi_dmul>
 800aea4:	9b08      	ldr	r3, [sp, #32]
 800aea6:	0004      	movs	r4, r0
 800aea8:	000d      	movs	r5, r1
 800aeaa:	9317      	str	r3, [sp, #92]	; 0x5c
 800aeac:	e7be      	b.n	800ae2c <_dtoa_r+0x558>
 800aeae:	9808      	ldr	r0, [sp, #32]
 800aeb0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aeb2:	f7f6 fb21 	bl	80014f8 <__aeabi_dmul>
 800aeb6:	9a06      	ldr	r2, [sp, #24]
 800aeb8:	9b06      	ldr	r3, [sp, #24]
 800aeba:	4694      	mov	ip, r2
 800aebc:	9308      	str	r3, [sp, #32]
 800aebe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800aec0:	9010      	str	r0, [sp, #64]	; 0x40
 800aec2:	9111      	str	r1, [sp, #68]	; 0x44
 800aec4:	4463      	add	r3, ip
 800aec6:	9319      	str	r3, [sp, #100]	; 0x64
 800aec8:	0029      	movs	r1, r5
 800aeca:	0020      	movs	r0, r4
 800aecc:	f7f7 f930 	bl	8002130 <__aeabi_d2iz>
 800aed0:	9017      	str	r0, [sp, #92]	; 0x5c
 800aed2:	f7f7 f963 	bl	800219c <__aeabi_i2d>
 800aed6:	0002      	movs	r2, r0
 800aed8:	000b      	movs	r3, r1
 800aeda:	0020      	movs	r0, r4
 800aedc:	0029      	movs	r1, r5
 800aede:	f7f6 fd77 	bl	80019d0 <__aeabi_dsub>
 800aee2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800aee4:	9a08      	ldr	r2, [sp, #32]
 800aee6:	3330      	adds	r3, #48	; 0x30
 800aee8:	7013      	strb	r3, [r2, #0]
 800aeea:	0013      	movs	r3, r2
 800aeec:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800aeee:	3301      	adds	r3, #1
 800aef0:	0004      	movs	r4, r0
 800aef2:	000d      	movs	r5, r1
 800aef4:	9308      	str	r3, [sp, #32]
 800aef6:	4293      	cmp	r3, r2
 800aef8:	d12c      	bne.n	800af54 <_dtoa_r+0x680>
 800aefa:	9810      	ldr	r0, [sp, #64]	; 0x40
 800aefc:	9911      	ldr	r1, [sp, #68]	; 0x44
 800aefe:	9a06      	ldr	r2, [sp, #24]
 800af00:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800af02:	4694      	mov	ip, r2
 800af04:	4463      	add	r3, ip
 800af06:	2200      	movs	r2, #0
 800af08:	9308      	str	r3, [sp, #32]
 800af0a:	4b1e      	ldr	r3, [pc, #120]	; (800af84 <_dtoa_r+0x6b0>)
 800af0c:	f7f5 fbb6 	bl	800067c <__aeabi_dadd>
 800af10:	0002      	movs	r2, r0
 800af12:	000b      	movs	r3, r1
 800af14:	0020      	movs	r0, r4
 800af16:	0029      	movs	r1, r5
 800af18:	f7f5 fab0 	bl	800047c <__aeabi_dcmpgt>
 800af1c:	2800      	cmp	r0, #0
 800af1e:	d000      	beq.n	800af22 <_dtoa_r+0x64e>
 800af20:	e080      	b.n	800b024 <_dtoa_r+0x750>
 800af22:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800af24:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800af26:	2000      	movs	r0, #0
 800af28:	4916      	ldr	r1, [pc, #88]	; (800af84 <_dtoa_r+0x6b0>)
 800af2a:	f7f6 fd51 	bl	80019d0 <__aeabi_dsub>
 800af2e:	0002      	movs	r2, r0
 800af30:	000b      	movs	r3, r1
 800af32:	0020      	movs	r0, r4
 800af34:	0029      	movs	r1, r5
 800af36:	f7f5 fa8d 	bl	8000454 <__aeabi_dcmplt>
 800af3a:	2800      	cmp	r0, #0
 800af3c:	d100      	bne.n	800af40 <_dtoa_r+0x66c>
 800af3e:	e714      	b.n	800ad6a <_dtoa_r+0x496>
 800af40:	9b08      	ldr	r3, [sp, #32]
 800af42:	001a      	movs	r2, r3
 800af44:	3a01      	subs	r2, #1
 800af46:	9208      	str	r2, [sp, #32]
 800af48:	7812      	ldrb	r2, [r2, #0]
 800af4a:	2a30      	cmp	r2, #48	; 0x30
 800af4c:	d0f8      	beq.n	800af40 <_dtoa_r+0x66c>
 800af4e:	9308      	str	r3, [sp, #32]
 800af50:	9602      	str	r6, [sp, #8]
 800af52:	e055      	b.n	800b000 <_dtoa_r+0x72c>
 800af54:	2200      	movs	r2, #0
 800af56:	4b06      	ldr	r3, [pc, #24]	; (800af70 <_dtoa_r+0x69c>)
 800af58:	f7f6 face 	bl	80014f8 <__aeabi_dmul>
 800af5c:	0004      	movs	r4, r0
 800af5e:	000d      	movs	r5, r1
 800af60:	e7b2      	b.n	800aec8 <_dtoa_r+0x5f4>
 800af62:	46c0      	nop			; (mov r8, r8)
 800af64:	0800d128 	.word	0x0800d128
 800af68:	0800d100 	.word	0x0800d100
 800af6c:	3ff00000 	.word	0x3ff00000
 800af70:	40240000 	.word	0x40240000
 800af74:	401c0000 	.word	0x401c0000
 800af78:	fcc00000 	.word	0xfcc00000
 800af7c:	40140000 	.word	0x40140000
 800af80:	7cc00000 	.word	0x7cc00000
 800af84:	3fe00000 	.word	0x3fe00000
 800af88:	9b07      	ldr	r3, [sp, #28]
 800af8a:	9e06      	ldr	r6, [sp, #24]
 800af8c:	3b01      	subs	r3, #1
 800af8e:	199b      	adds	r3, r3, r6
 800af90:	930c      	str	r3, [sp, #48]	; 0x30
 800af92:	9c08      	ldr	r4, [sp, #32]
 800af94:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800af96:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800af98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800af9a:	0020      	movs	r0, r4
 800af9c:	0029      	movs	r1, r5
 800af9e:	f7f5 fea9 	bl	8000cf4 <__aeabi_ddiv>
 800afa2:	f7f7 f8c5 	bl	8002130 <__aeabi_d2iz>
 800afa6:	9007      	str	r0, [sp, #28]
 800afa8:	f7f7 f8f8 	bl	800219c <__aeabi_i2d>
 800afac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800afae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800afb0:	f7f6 faa2 	bl	80014f8 <__aeabi_dmul>
 800afb4:	0002      	movs	r2, r0
 800afb6:	000b      	movs	r3, r1
 800afb8:	0020      	movs	r0, r4
 800afba:	0029      	movs	r1, r5
 800afbc:	f7f6 fd08 	bl	80019d0 <__aeabi_dsub>
 800afc0:	0033      	movs	r3, r6
 800afc2:	9a07      	ldr	r2, [sp, #28]
 800afc4:	3601      	adds	r6, #1
 800afc6:	3230      	adds	r2, #48	; 0x30
 800afc8:	701a      	strb	r2, [r3, #0]
 800afca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800afcc:	9608      	str	r6, [sp, #32]
 800afce:	429a      	cmp	r2, r3
 800afd0:	d139      	bne.n	800b046 <_dtoa_r+0x772>
 800afd2:	0002      	movs	r2, r0
 800afd4:	000b      	movs	r3, r1
 800afd6:	f7f5 fb51 	bl	800067c <__aeabi_dadd>
 800afda:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800afdc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800afde:	0004      	movs	r4, r0
 800afe0:	000d      	movs	r5, r1
 800afe2:	f7f5 fa4b 	bl	800047c <__aeabi_dcmpgt>
 800afe6:	2800      	cmp	r0, #0
 800afe8:	d11b      	bne.n	800b022 <_dtoa_r+0x74e>
 800afea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800afec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800afee:	0020      	movs	r0, r4
 800aff0:	0029      	movs	r1, r5
 800aff2:	f7f5 fa29 	bl	8000448 <__aeabi_dcmpeq>
 800aff6:	2800      	cmp	r0, #0
 800aff8:	d002      	beq.n	800b000 <_dtoa_r+0x72c>
 800affa:	9b07      	ldr	r3, [sp, #28]
 800affc:	07db      	lsls	r3, r3, #31
 800affe:	d410      	bmi.n	800b022 <_dtoa_r+0x74e>
 800b000:	0038      	movs	r0, r7
 800b002:	9905      	ldr	r1, [sp, #20]
 800b004:	f000 fae6 	bl	800b5d4 <_Bfree>
 800b008:	2300      	movs	r3, #0
 800b00a:	9a08      	ldr	r2, [sp, #32]
 800b00c:	9802      	ldr	r0, [sp, #8]
 800b00e:	7013      	strb	r3, [r2, #0]
 800b010:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800b012:	3001      	adds	r0, #1
 800b014:	6018      	str	r0, [r3, #0]
 800b016:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d100      	bne.n	800b01e <_dtoa_r+0x74a>
 800b01c:	e4a6      	b.n	800a96c <_dtoa_r+0x98>
 800b01e:	601a      	str	r2, [r3, #0]
 800b020:	e4a4      	b.n	800a96c <_dtoa_r+0x98>
 800b022:	9e02      	ldr	r6, [sp, #8]
 800b024:	9b08      	ldr	r3, [sp, #32]
 800b026:	9308      	str	r3, [sp, #32]
 800b028:	3b01      	subs	r3, #1
 800b02a:	781a      	ldrb	r2, [r3, #0]
 800b02c:	2a39      	cmp	r2, #57	; 0x39
 800b02e:	d106      	bne.n	800b03e <_dtoa_r+0x76a>
 800b030:	9a06      	ldr	r2, [sp, #24]
 800b032:	429a      	cmp	r2, r3
 800b034:	d1f7      	bne.n	800b026 <_dtoa_r+0x752>
 800b036:	2230      	movs	r2, #48	; 0x30
 800b038:	9906      	ldr	r1, [sp, #24]
 800b03a:	3601      	adds	r6, #1
 800b03c:	700a      	strb	r2, [r1, #0]
 800b03e:	781a      	ldrb	r2, [r3, #0]
 800b040:	3201      	adds	r2, #1
 800b042:	701a      	strb	r2, [r3, #0]
 800b044:	e784      	b.n	800af50 <_dtoa_r+0x67c>
 800b046:	2200      	movs	r2, #0
 800b048:	4baa      	ldr	r3, [pc, #680]	; (800b2f4 <_dtoa_r+0xa20>)
 800b04a:	f7f6 fa55 	bl	80014f8 <__aeabi_dmul>
 800b04e:	2200      	movs	r2, #0
 800b050:	2300      	movs	r3, #0
 800b052:	0004      	movs	r4, r0
 800b054:	000d      	movs	r5, r1
 800b056:	f7f5 f9f7 	bl	8000448 <__aeabi_dcmpeq>
 800b05a:	2800      	cmp	r0, #0
 800b05c:	d09b      	beq.n	800af96 <_dtoa_r+0x6c2>
 800b05e:	e7cf      	b.n	800b000 <_dtoa_r+0x72c>
 800b060:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b062:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800b064:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b066:	2d00      	cmp	r5, #0
 800b068:	d012      	beq.n	800b090 <_dtoa_r+0x7bc>
 800b06a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b06c:	2a01      	cmp	r2, #1
 800b06e:	dc66      	bgt.n	800b13e <_dtoa_r+0x86a>
 800b070:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b072:	2a00      	cmp	r2, #0
 800b074:	d05d      	beq.n	800b132 <_dtoa_r+0x85e>
 800b076:	4aa0      	ldr	r2, [pc, #640]	; (800b2f8 <_dtoa_r+0xa24>)
 800b078:	189b      	adds	r3, r3, r2
 800b07a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b07c:	2101      	movs	r1, #1
 800b07e:	18d2      	adds	r2, r2, r3
 800b080:	920a      	str	r2, [sp, #40]	; 0x28
 800b082:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b084:	0038      	movs	r0, r7
 800b086:	18d3      	adds	r3, r2, r3
 800b088:	930d      	str	r3, [sp, #52]	; 0x34
 800b08a:	f000 fb53 	bl	800b734 <__i2b>
 800b08e:	0005      	movs	r5, r0
 800b090:	2c00      	cmp	r4, #0
 800b092:	dd0e      	ble.n	800b0b2 <_dtoa_r+0x7de>
 800b094:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b096:	2b00      	cmp	r3, #0
 800b098:	dd0b      	ble.n	800b0b2 <_dtoa_r+0x7de>
 800b09a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b09c:	0023      	movs	r3, r4
 800b09e:	4294      	cmp	r4, r2
 800b0a0:	dd00      	ble.n	800b0a4 <_dtoa_r+0x7d0>
 800b0a2:	0013      	movs	r3, r2
 800b0a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b0a6:	1ae4      	subs	r4, r4, r3
 800b0a8:	1ad2      	subs	r2, r2, r3
 800b0aa:	920a      	str	r2, [sp, #40]	; 0x28
 800b0ac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b0ae:	1ad3      	subs	r3, r2, r3
 800b0b0:	930d      	str	r3, [sp, #52]	; 0x34
 800b0b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d01f      	beq.n	800b0f8 <_dtoa_r+0x824>
 800b0b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d054      	beq.n	800b168 <_dtoa_r+0x894>
 800b0be:	2e00      	cmp	r6, #0
 800b0c0:	dd11      	ble.n	800b0e6 <_dtoa_r+0x812>
 800b0c2:	0029      	movs	r1, r5
 800b0c4:	0032      	movs	r2, r6
 800b0c6:	0038      	movs	r0, r7
 800b0c8:	f000 fbfa 	bl	800b8c0 <__pow5mult>
 800b0cc:	9a05      	ldr	r2, [sp, #20]
 800b0ce:	0001      	movs	r1, r0
 800b0d0:	0005      	movs	r5, r0
 800b0d2:	0038      	movs	r0, r7
 800b0d4:	f000 fb44 	bl	800b760 <__multiply>
 800b0d8:	9905      	ldr	r1, [sp, #20]
 800b0da:	9014      	str	r0, [sp, #80]	; 0x50
 800b0dc:	0038      	movs	r0, r7
 800b0de:	f000 fa79 	bl	800b5d4 <_Bfree>
 800b0e2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b0e4:	9305      	str	r3, [sp, #20]
 800b0e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b0e8:	1b9a      	subs	r2, r3, r6
 800b0ea:	42b3      	cmp	r3, r6
 800b0ec:	d004      	beq.n	800b0f8 <_dtoa_r+0x824>
 800b0ee:	0038      	movs	r0, r7
 800b0f0:	9905      	ldr	r1, [sp, #20]
 800b0f2:	f000 fbe5 	bl	800b8c0 <__pow5mult>
 800b0f6:	9005      	str	r0, [sp, #20]
 800b0f8:	2101      	movs	r1, #1
 800b0fa:	0038      	movs	r0, r7
 800b0fc:	f000 fb1a 	bl	800b734 <__i2b>
 800b100:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b102:	0006      	movs	r6, r0
 800b104:	2b00      	cmp	r3, #0
 800b106:	dd31      	ble.n	800b16c <_dtoa_r+0x898>
 800b108:	001a      	movs	r2, r3
 800b10a:	0001      	movs	r1, r0
 800b10c:	0038      	movs	r0, r7
 800b10e:	f000 fbd7 	bl	800b8c0 <__pow5mult>
 800b112:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b114:	0006      	movs	r6, r0
 800b116:	2b01      	cmp	r3, #1
 800b118:	dd2d      	ble.n	800b176 <_dtoa_r+0x8a2>
 800b11a:	2300      	movs	r3, #0
 800b11c:	930e      	str	r3, [sp, #56]	; 0x38
 800b11e:	6933      	ldr	r3, [r6, #16]
 800b120:	3303      	adds	r3, #3
 800b122:	009b      	lsls	r3, r3, #2
 800b124:	18f3      	adds	r3, r6, r3
 800b126:	6858      	ldr	r0, [r3, #4]
 800b128:	f000 fabc 	bl	800b6a4 <__hi0bits>
 800b12c:	2320      	movs	r3, #32
 800b12e:	1a18      	subs	r0, r3, r0
 800b130:	e039      	b.n	800b1a6 <_dtoa_r+0x8d2>
 800b132:	2336      	movs	r3, #54	; 0x36
 800b134:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800b136:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800b138:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b13a:	1a9b      	subs	r3, r3, r2
 800b13c:	e79d      	b.n	800b07a <_dtoa_r+0x7a6>
 800b13e:	9b07      	ldr	r3, [sp, #28]
 800b140:	1e5e      	subs	r6, r3, #1
 800b142:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b144:	42b3      	cmp	r3, r6
 800b146:	db07      	blt.n	800b158 <_dtoa_r+0x884>
 800b148:	1b9e      	subs	r6, r3, r6
 800b14a:	9b07      	ldr	r3, [sp, #28]
 800b14c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b14e:	2b00      	cmp	r3, #0
 800b150:	da93      	bge.n	800b07a <_dtoa_r+0x7a6>
 800b152:	1ae4      	subs	r4, r4, r3
 800b154:	2300      	movs	r3, #0
 800b156:	e790      	b.n	800b07a <_dtoa_r+0x7a6>
 800b158:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b15a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b15c:	1af3      	subs	r3, r6, r3
 800b15e:	18d3      	adds	r3, r2, r3
 800b160:	960e      	str	r6, [sp, #56]	; 0x38
 800b162:	9315      	str	r3, [sp, #84]	; 0x54
 800b164:	2600      	movs	r6, #0
 800b166:	e7f0      	b.n	800b14a <_dtoa_r+0x876>
 800b168:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b16a:	e7c0      	b.n	800b0ee <_dtoa_r+0x81a>
 800b16c:	2300      	movs	r3, #0
 800b16e:	930e      	str	r3, [sp, #56]	; 0x38
 800b170:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b172:	2b01      	cmp	r3, #1
 800b174:	dc13      	bgt.n	800b19e <_dtoa_r+0x8ca>
 800b176:	2300      	movs	r3, #0
 800b178:	930e      	str	r3, [sp, #56]	; 0x38
 800b17a:	9b08      	ldr	r3, [sp, #32]
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d10e      	bne.n	800b19e <_dtoa_r+0x8ca>
 800b180:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b182:	031b      	lsls	r3, r3, #12
 800b184:	d10b      	bne.n	800b19e <_dtoa_r+0x8ca>
 800b186:	4b5d      	ldr	r3, [pc, #372]	; (800b2fc <_dtoa_r+0xa28>)
 800b188:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b18a:	4213      	tst	r3, r2
 800b18c:	d007      	beq.n	800b19e <_dtoa_r+0x8ca>
 800b18e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b190:	3301      	adds	r3, #1
 800b192:	930a      	str	r3, [sp, #40]	; 0x28
 800b194:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b196:	3301      	adds	r3, #1
 800b198:	930d      	str	r3, [sp, #52]	; 0x34
 800b19a:	2301      	movs	r3, #1
 800b19c:	930e      	str	r3, [sp, #56]	; 0x38
 800b19e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b1a0:	2001      	movs	r0, #1
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d1bb      	bne.n	800b11e <_dtoa_r+0x84a>
 800b1a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b1a8:	221f      	movs	r2, #31
 800b1aa:	1818      	adds	r0, r3, r0
 800b1ac:	0003      	movs	r3, r0
 800b1ae:	4013      	ands	r3, r2
 800b1b0:	4210      	tst	r0, r2
 800b1b2:	d046      	beq.n	800b242 <_dtoa_r+0x96e>
 800b1b4:	3201      	adds	r2, #1
 800b1b6:	1ad2      	subs	r2, r2, r3
 800b1b8:	2a04      	cmp	r2, #4
 800b1ba:	dd3f      	ble.n	800b23c <_dtoa_r+0x968>
 800b1bc:	221c      	movs	r2, #28
 800b1be:	1ad3      	subs	r3, r2, r3
 800b1c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b1c2:	18e4      	adds	r4, r4, r3
 800b1c4:	18d2      	adds	r2, r2, r3
 800b1c6:	920a      	str	r2, [sp, #40]	; 0x28
 800b1c8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b1ca:	18d3      	adds	r3, r2, r3
 800b1cc:	930d      	str	r3, [sp, #52]	; 0x34
 800b1ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	dd05      	ble.n	800b1e0 <_dtoa_r+0x90c>
 800b1d4:	001a      	movs	r2, r3
 800b1d6:	0038      	movs	r0, r7
 800b1d8:	9905      	ldr	r1, [sp, #20]
 800b1da:	f000 fbcd 	bl	800b978 <__lshift>
 800b1de:	9005      	str	r0, [sp, #20]
 800b1e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	dd05      	ble.n	800b1f2 <_dtoa_r+0x91e>
 800b1e6:	0031      	movs	r1, r6
 800b1e8:	001a      	movs	r2, r3
 800b1ea:	0038      	movs	r0, r7
 800b1ec:	f000 fbc4 	bl	800b978 <__lshift>
 800b1f0:	0006      	movs	r6, r0
 800b1f2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d026      	beq.n	800b246 <_dtoa_r+0x972>
 800b1f8:	0031      	movs	r1, r6
 800b1fa:	9805      	ldr	r0, [sp, #20]
 800b1fc:	f000 fc2a 	bl	800ba54 <__mcmp>
 800b200:	2800      	cmp	r0, #0
 800b202:	da20      	bge.n	800b246 <_dtoa_r+0x972>
 800b204:	9b02      	ldr	r3, [sp, #8]
 800b206:	220a      	movs	r2, #10
 800b208:	3b01      	subs	r3, #1
 800b20a:	9302      	str	r3, [sp, #8]
 800b20c:	0038      	movs	r0, r7
 800b20e:	2300      	movs	r3, #0
 800b210:	9905      	ldr	r1, [sp, #20]
 800b212:	f000 fa03 	bl	800b61c <__multadd>
 800b216:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b218:	9005      	str	r0, [sp, #20]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d100      	bne.n	800b220 <_dtoa_r+0x94c>
 800b21e:	e166      	b.n	800b4ee <_dtoa_r+0xc1a>
 800b220:	2300      	movs	r3, #0
 800b222:	0029      	movs	r1, r5
 800b224:	220a      	movs	r2, #10
 800b226:	0038      	movs	r0, r7
 800b228:	f000 f9f8 	bl	800b61c <__multadd>
 800b22c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b22e:	0005      	movs	r5, r0
 800b230:	2b00      	cmp	r3, #0
 800b232:	dc47      	bgt.n	800b2c4 <_dtoa_r+0x9f0>
 800b234:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b236:	2b02      	cmp	r3, #2
 800b238:	dc0d      	bgt.n	800b256 <_dtoa_r+0x982>
 800b23a:	e043      	b.n	800b2c4 <_dtoa_r+0x9f0>
 800b23c:	2a04      	cmp	r2, #4
 800b23e:	d0c6      	beq.n	800b1ce <_dtoa_r+0x8fa>
 800b240:	0013      	movs	r3, r2
 800b242:	331c      	adds	r3, #28
 800b244:	e7bc      	b.n	800b1c0 <_dtoa_r+0x8ec>
 800b246:	9b07      	ldr	r3, [sp, #28]
 800b248:	2b00      	cmp	r3, #0
 800b24a:	dc35      	bgt.n	800b2b8 <_dtoa_r+0x9e4>
 800b24c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b24e:	2b02      	cmp	r3, #2
 800b250:	dd32      	ble.n	800b2b8 <_dtoa_r+0x9e4>
 800b252:	9b07      	ldr	r3, [sp, #28]
 800b254:	930c      	str	r3, [sp, #48]	; 0x30
 800b256:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d10c      	bne.n	800b276 <_dtoa_r+0x9a2>
 800b25c:	0031      	movs	r1, r6
 800b25e:	2205      	movs	r2, #5
 800b260:	0038      	movs	r0, r7
 800b262:	f000 f9db 	bl	800b61c <__multadd>
 800b266:	0006      	movs	r6, r0
 800b268:	0001      	movs	r1, r0
 800b26a:	9805      	ldr	r0, [sp, #20]
 800b26c:	f000 fbf2 	bl	800ba54 <__mcmp>
 800b270:	2800      	cmp	r0, #0
 800b272:	dd00      	ble.n	800b276 <_dtoa_r+0x9a2>
 800b274:	e5a5      	b.n	800adc2 <_dtoa_r+0x4ee>
 800b276:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b278:	43db      	mvns	r3, r3
 800b27a:	9302      	str	r3, [sp, #8]
 800b27c:	9b06      	ldr	r3, [sp, #24]
 800b27e:	9308      	str	r3, [sp, #32]
 800b280:	2400      	movs	r4, #0
 800b282:	0031      	movs	r1, r6
 800b284:	0038      	movs	r0, r7
 800b286:	f000 f9a5 	bl	800b5d4 <_Bfree>
 800b28a:	2d00      	cmp	r5, #0
 800b28c:	d100      	bne.n	800b290 <_dtoa_r+0x9bc>
 800b28e:	e6b7      	b.n	800b000 <_dtoa_r+0x72c>
 800b290:	2c00      	cmp	r4, #0
 800b292:	d005      	beq.n	800b2a0 <_dtoa_r+0x9cc>
 800b294:	42ac      	cmp	r4, r5
 800b296:	d003      	beq.n	800b2a0 <_dtoa_r+0x9cc>
 800b298:	0021      	movs	r1, r4
 800b29a:	0038      	movs	r0, r7
 800b29c:	f000 f99a 	bl	800b5d4 <_Bfree>
 800b2a0:	0029      	movs	r1, r5
 800b2a2:	0038      	movs	r0, r7
 800b2a4:	f000 f996 	bl	800b5d4 <_Bfree>
 800b2a8:	e6aa      	b.n	800b000 <_dtoa_r+0x72c>
 800b2aa:	2600      	movs	r6, #0
 800b2ac:	0035      	movs	r5, r6
 800b2ae:	e7e2      	b.n	800b276 <_dtoa_r+0x9a2>
 800b2b0:	9602      	str	r6, [sp, #8]
 800b2b2:	9e14      	ldr	r6, [sp, #80]	; 0x50
 800b2b4:	0035      	movs	r5, r6
 800b2b6:	e584      	b.n	800adc2 <_dtoa_r+0x4ee>
 800b2b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d100      	bne.n	800b2c0 <_dtoa_r+0x9ec>
 800b2be:	e0ce      	b.n	800b45e <_dtoa_r+0xb8a>
 800b2c0:	9b07      	ldr	r3, [sp, #28]
 800b2c2:	930c      	str	r3, [sp, #48]	; 0x30
 800b2c4:	2c00      	cmp	r4, #0
 800b2c6:	dd05      	ble.n	800b2d4 <_dtoa_r+0xa00>
 800b2c8:	0029      	movs	r1, r5
 800b2ca:	0022      	movs	r2, r4
 800b2cc:	0038      	movs	r0, r7
 800b2ce:	f000 fb53 	bl	800b978 <__lshift>
 800b2d2:	0005      	movs	r5, r0
 800b2d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b2d6:	0028      	movs	r0, r5
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d022      	beq.n	800b322 <_dtoa_r+0xa4e>
 800b2dc:	0038      	movs	r0, r7
 800b2de:	6869      	ldr	r1, [r5, #4]
 800b2e0:	f000 f934 	bl	800b54c <_Balloc>
 800b2e4:	1e04      	subs	r4, r0, #0
 800b2e6:	d10f      	bne.n	800b308 <_dtoa_r+0xa34>
 800b2e8:	0002      	movs	r2, r0
 800b2ea:	4b05      	ldr	r3, [pc, #20]	; (800b300 <_dtoa_r+0xa2c>)
 800b2ec:	4905      	ldr	r1, [pc, #20]	; (800b304 <_dtoa_r+0xa30>)
 800b2ee:	f7ff fb06 	bl	800a8fe <_dtoa_r+0x2a>
 800b2f2:	46c0      	nop			; (mov r8, r8)
 800b2f4:	40240000 	.word	0x40240000
 800b2f8:	00000433 	.word	0x00000433
 800b2fc:	7ff00000 	.word	0x7ff00000
 800b300:	0800d08f 	.word	0x0800d08f
 800b304:	000002ea 	.word	0x000002ea
 800b308:	0029      	movs	r1, r5
 800b30a:	692b      	ldr	r3, [r5, #16]
 800b30c:	310c      	adds	r1, #12
 800b30e:	1c9a      	adds	r2, r3, #2
 800b310:	0092      	lsls	r2, r2, #2
 800b312:	300c      	adds	r0, #12
 800b314:	f000 f911 	bl	800b53a <memcpy>
 800b318:	2201      	movs	r2, #1
 800b31a:	0021      	movs	r1, r4
 800b31c:	0038      	movs	r0, r7
 800b31e:	f000 fb2b 	bl	800b978 <__lshift>
 800b322:	9b06      	ldr	r3, [sp, #24]
 800b324:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b326:	930a      	str	r3, [sp, #40]	; 0x28
 800b328:	3b01      	subs	r3, #1
 800b32a:	189b      	adds	r3, r3, r2
 800b32c:	2201      	movs	r2, #1
 800b32e:	002c      	movs	r4, r5
 800b330:	0005      	movs	r5, r0
 800b332:	9314      	str	r3, [sp, #80]	; 0x50
 800b334:	9b08      	ldr	r3, [sp, #32]
 800b336:	4013      	ands	r3, r2
 800b338:	930f      	str	r3, [sp, #60]	; 0x3c
 800b33a:	0031      	movs	r1, r6
 800b33c:	9805      	ldr	r0, [sp, #20]
 800b33e:	f7ff fa3e 	bl	800a7be <quorem>
 800b342:	0003      	movs	r3, r0
 800b344:	0021      	movs	r1, r4
 800b346:	3330      	adds	r3, #48	; 0x30
 800b348:	900d      	str	r0, [sp, #52]	; 0x34
 800b34a:	9805      	ldr	r0, [sp, #20]
 800b34c:	9307      	str	r3, [sp, #28]
 800b34e:	f000 fb81 	bl	800ba54 <__mcmp>
 800b352:	002a      	movs	r2, r5
 800b354:	900e      	str	r0, [sp, #56]	; 0x38
 800b356:	0031      	movs	r1, r6
 800b358:	0038      	movs	r0, r7
 800b35a:	f000 fb97 	bl	800ba8c <__mdiff>
 800b35e:	68c3      	ldr	r3, [r0, #12]
 800b360:	9008      	str	r0, [sp, #32]
 800b362:	9310      	str	r3, [sp, #64]	; 0x40
 800b364:	2301      	movs	r3, #1
 800b366:	930c      	str	r3, [sp, #48]	; 0x30
 800b368:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d104      	bne.n	800b378 <_dtoa_r+0xaa4>
 800b36e:	0001      	movs	r1, r0
 800b370:	9805      	ldr	r0, [sp, #20]
 800b372:	f000 fb6f 	bl	800ba54 <__mcmp>
 800b376:	900c      	str	r0, [sp, #48]	; 0x30
 800b378:	0038      	movs	r0, r7
 800b37a:	9908      	ldr	r1, [sp, #32]
 800b37c:	f000 f92a 	bl	800b5d4 <_Bfree>
 800b380:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b382:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b384:	3301      	adds	r3, #1
 800b386:	9308      	str	r3, [sp, #32]
 800b388:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b38a:	4313      	orrs	r3, r2
 800b38c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b38e:	4313      	orrs	r3, r2
 800b390:	d10c      	bne.n	800b3ac <_dtoa_r+0xad8>
 800b392:	9b07      	ldr	r3, [sp, #28]
 800b394:	2b39      	cmp	r3, #57	; 0x39
 800b396:	d026      	beq.n	800b3e6 <_dtoa_r+0xb12>
 800b398:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	dd02      	ble.n	800b3a4 <_dtoa_r+0xad0>
 800b39e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b3a0:	3331      	adds	r3, #49	; 0x31
 800b3a2:	9307      	str	r3, [sp, #28]
 800b3a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b3a6:	9a07      	ldr	r2, [sp, #28]
 800b3a8:	701a      	strb	r2, [r3, #0]
 800b3aa:	e76a      	b.n	800b282 <_dtoa_r+0x9ae>
 800b3ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	db04      	blt.n	800b3bc <_dtoa_r+0xae8>
 800b3b2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b3b4:	4313      	orrs	r3, r2
 800b3b6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b3b8:	4313      	orrs	r3, r2
 800b3ba:	d11f      	bne.n	800b3fc <_dtoa_r+0xb28>
 800b3bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	ddf0      	ble.n	800b3a4 <_dtoa_r+0xad0>
 800b3c2:	9905      	ldr	r1, [sp, #20]
 800b3c4:	2201      	movs	r2, #1
 800b3c6:	0038      	movs	r0, r7
 800b3c8:	f000 fad6 	bl	800b978 <__lshift>
 800b3cc:	0031      	movs	r1, r6
 800b3ce:	9005      	str	r0, [sp, #20]
 800b3d0:	f000 fb40 	bl	800ba54 <__mcmp>
 800b3d4:	2800      	cmp	r0, #0
 800b3d6:	dc03      	bgt.n	800b3e0 <_dtoa_r+0xb0c>
 800b3d8:	d1e4      	bne.n	800b3a4 <_dtoa_r+0xad0>
 800b3da:	9b07      	ldr	r3, [sp, #28]
 800b3dc:	07db      	lsls	r3, r3, #31
 800b3de:	d5e1      	bpl.n	800b3a4 <_dtoa_r+0xad0>
 800b3e0:	9b07      	ldr	r3, [sp, #28]
 800b3e2:	2b39      	cmp	r3, #57	; 0x39
 800b3e4:	d1db      	bne.n	800b39e <_dtoa_r+0xaca>
 800b3e6:	2339      	movs	r3, #57	; 0x39
 800b3e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b3ea:	7013      	strb	r3, [r2, #0]
 800b3ec:	9b08      	ldr	r3, [sp, #32]
 800b3ee:	9308      	str	r3, [sp, #32]
 800b3f0:	3b01      	subs	r3, #1
 800b3f2:	781a      	ldrb	r2, [r3, #0]
 800b3f4:	2a39      	cmp	r2, #57	; 0x39
 800b3f6:	d068      	beq.n	800b4ca <_dtoa_r+0xbf6>
 800b3f8:	3201      	adds	r2, #1
 800b3fa:	e7d5      	b.n	800b3a8 <_dtoa_r+0xad4>
 800b3fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	dd07      	ble.n	800b412 <_dtoa_r+0xb3e>
 800b402:	9b07      	ldr	r3, [sp, #28]
 800b404:	2b39      	cmp	r3, #57	; 0x39
 800b406:	d0ee      	beq.n	800b3e6 <_dtoa_r+0xb12>
 800b408:	9b07      	ldr	r3, [sp, #28]
 800b40a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b40c:	3301      	adds	r3, #1
 800b40e:	7013      	strb	r3, [r2, #0]
 800b410:	e737      	b.n	800b282 <_dtoa_r+0x9ae>
 800b412:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b414:	9a07      	ldr	r2, [sp, #28]
 800b416:	701a      	strb	r2, [r3, #0]
 800b418:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b41a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b41c:	4293      	cmp	r3, r2
 800b41e:	d03e      	beq.n	800b49e <_dtoa_r+0xbca>
 800b420:	2300      	movs	r3, #0
 800b422:	220a      	movs	r2, #10
 800b424:	9905      	ldr	r1, [sp, #20]
 800b426:	0038      	movs	r0, r7
 800b428:	f000 f8f8 	bl	800b61c <__multadd>
 800b42c:	2300      	movs	r3, #0
 800b42e:	9005      	str	r0, [sp, #20]
 800b430:	220a      	movs	r2, #10
 800b432:	0021      	movs	r1, r4
 800b434:	0038      	movs	r0, r7
 800b436:	42ac      	cmp	r4, r5
 800b438:	d106      	bne.n	800b448 <_dtoa_r+0xb74>
 800b43a:	f000 f8ef 	bl	800b61c <__multadd>
 800b43e:	0004      	movs	r4, r0
 800b440:	0005      	movs	r5, r0
 800b442:	9b08      	ldr	r3, [sp, #32]
 800b444:	930a      	str	r3, [sp, #40]	; 0x28
 800b446:	e778      	b.n	800b33a <_dtoa_r+0xa66>
 800b448:	f000 f8e8 	bl	800b61c <__multadd>
 800b44c:	0029      	movs	r1, r5
 800b44e:	0004      	movs	r4, r0
 800b450:	2300      	movs	r3, #0
 800b452:	220a      	movs	r2, #10
 800b454:	0038      	movs	r0, r7
 800b456:	f000 f8e1 	bl	800b61c <__multadd>
 800b45a:	0005      	movs	r5, r0
 800b45c:	e7f1      	b.n	800b442 <_dtoa_r+0xb6e>
 800b45e:	9b07      	ldr	r3, [sp, #28]
 800b460:	930c      	str	r3, [sp, #48]	; 0x30
 800b462:	2400      	movs	r4, #0
 800b464:	0031      	movs	r1, r6
 800b466:	9805      	ldr	r0, [sp, #20]
 800b468:	f7ff f9a9 	bl	800a7be <quorem>
 800b46c:	9b06      	ldr	r3, [sp, #24]
 800b46e:	3030      	adds	r0, #48	; 0x30
 800b470:	5518      	strb	r0, [r3, r4]
 800b472:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b474:	3401      	adds	r4, #1
 800b476:	9007      	str	r0, [sp, #28]
 800b478:	42a3      	cmp	r3, r4
 800b47a:	dd07      	ble.n	800b48c <_dtoa_r+0xbb8>
 800b47c:	2300      	movs	r3, #0
 800b47e:	220a      	movs	r2, #10
 800b480:	0038      	movs	r0, r7
 800b482:	9905      	ldr	r1, [sp, #20]
 800b484:	f000 f8ca 	bl	800b61c <__multadd>
 800b488:	9005      	str	r0, [sp, #20]
 800b48a:	e7eb      	b.n	800b464 <_dtoa_r+0xb90>
 800b48c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b48e:	2001      	movs	r0, #1
 800b490:	2b00      	cmp	r3, #0
 800b492:	dd00      	ble.n	800b496 <_dtoa_r+0xbc2>
 800b494:	0018      	movs	r0, r3
 800b496:	2400      	movs	r4, #0
 800b498:	9b06      	ldr	r3, [sp, #24]
 800b49a:	181b      	adds	r3, r3, r0
 800b49c:	9308      	str	r3, [sp, #32]
 800b49e:	9905      	ldr	r1, [sp, #20]
 800b4a0:	2201      	movs	r2, #1
 800b4a2:	0038      	movs	r0, r7
 800b4a4:	f000 fa68 	bl	800b978 <__lshift>
 800b4a8:	0031      	movs	r1, r6
 800b4aa:	9005      	str	r0, [sp, #20]
 800b4ac:	f000 fad2 	bl	800ba54 <__mcmp>
 800b4b0:	2800      	cmp	r0, #0
 800b4b2:	dc9b      	bgt.n	800b3ec <_dtoa_r+0xb18>
 800b4b4:	d102      	bne.n	800b4bc <_dtoa_r+0xbe8>
 800b4b6:	9b07      	ldr	r3, [sp, #28]
 800b4b8:	07db      	lsls	r3, r3, #31
 800b4ba:	d497      	bmi.n	800b3ec <_dtoa_r+0xb18>
 800b4bc:	9b08      	ldr	r3, [sp, #32]
 800b4be:	9308      	str	r3, [sp, #32]
 800b4c0:	3b01      	subs	r3, #1
 800b4c2:	781a      	ldrb	r2, [r3, #0]
 800b4c4:	2a30      	cmp	r2, #48	; 0x30
 800b4c6:	d0fa      	beq.n	800b4be <_dtoa_r+0xbea>
 800b4c8:	e6db      	b.n	800b282 <_dtoa_r+0x9ae>
 800b4ca:	9a06      	ldr	r2, [sp, #24]
 800b4cc:	429a      	cmp	r2, r3
 800b4ce:	d18e      	bne.n	800b3ee <_dtoa_r+0xb1a>
 800b4d0:	9b02      	ldr	r3, [sp, #8]
 800b4d2:	3301      	adds	r3, #1
 800b4d4:	9302      	str	r3, [sp, #8]
 800b4d6:	2331      	movs	r3, #49	; 0x31
 800b4d8:	e799      	b.n	800b40e <_dtoa_r+0xb3a>
 800b4da:	4b09      	ldr	r3, [pc, #36]	; (800b500 <_dtoa_r+0xc2c>)
 800b4dc:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800b4de:	9306      	str	r3, [sp, #24]
 800b4e0:	4b08      	ldr	r3, [pc, #32]	; (800b504 <_dtoa_r+0xc30>)
 800b4e2:	2a00      	cmp	r2, #0
 800b4e4:	d001      	beq.n	800b4ea <_dtoa_r+0xc16>
 800b4e6:	f7ff fa3f 	bl	800a968 <_dtoa_r+0x94>
 800b4ea:	f7ff fa3f 	bl	800a96c <_dtoa_r+0x98>
 800b4ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	dcb6      	bgt.n	800b462 <_dtoa_r+0xb8e>
 800b4f4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b4f6:	2b02      	cmp	r3, #2
 800b4f8:	dd00      	ble.n	800b4fc <_dtoa_r+0xc28>
 800b4fa:	e6ac      	b.n	800b256 <_dtoa_r+0x982>
 800b4fc:	e7b1      	b.n	800b462 <_dtoa_r+0xb8e>
 800b4fe:	46c0      	nop			; (mov r8, r8)
 800b500:	0800d010 	.word	0x0800d010
 800b504:	0800d018 	.word	0x0800d018

0800b508 <_localeconv_r>:
 800b508:	4800      	ldr	r0, [pc, #0]	; (800b50c <_localeconv_r+0x4>)
 800b50a:	4770      	bx	lr
 800b50c:	20000164 	.word	0x20000164

0800b510 <malloc>:
 800b510:	b510      	push	{r4, lr}
 800b512:	4b03      	ldr	r3, [pc, #12]	; (800b520 <malloc+0x10>)
 800b514:	0001      	movs	r1, r0
 800b516:	6818      	ldr	r0, [r3, #0]
 800b518:	f000 fc4c 	bl	800bdb4 <_malloc_r>
 800b51c:	bd10      	pop	{r4, pc}
 800b51e:	46c0      	nop			; (mov r8, r8)
 800b520:	20000010 	.word	0x20000010

0800b524 <memchr>:
 800b524:	b2c9      	uxtb	r1, r1
 800b526:	1882      	adds	r2, r0, r2
 800b528:	4290      	cmp	r0, r2
 800b52a:	d101      	bne.n	800b530 <memchr+0xc>
 800b52c:	2000      	movs	r0, #0
 800b52e:	4770      	bx	lr
 800b530:	7803      	ldrb	r3, [r0, #0]
 800b532:	428b      	cmp	r3, r1
 800b534:	d0fb      	beq.n	800b52e <memchr+0xa>
 800b536:	3001      	adds	r0, #1
 800b538:	e7f6      	b.n	800b528 <memchr+0x4>

0800b53a <memcpy>:
 800b53a:	2300      	movs	r3, #0
 800b53c:	b510      	push	{r4, lr}
 800b53e:	429a      	cmp	r2, r3
 800b540:	d100      	bne.n	800b544 <memcpy+0xa>
 800b542:	bd10      	pop	{r4, pc}
 800b544:	5ccc      	ldrb	r4, [r1, r3]
 800b546:	54c4      	strb	r4, [r0, r3]
 800b548:	3301      	adds	r3, #1
 800b54a:	e7f8      	b.n	800b53e <memcpy+0x4>

0800b54c <_Balloc>:
 800b54c:	b570      	push	{r4, r5, r6, lr}
 800b54e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b550:	0006      	movs	r6, r0
 800b552:	000c      	movs	r4, r1
 800b554:	2d00      	cmp	r5, #0
 800b556:	d10e      	bne.n	800b576 <_Balloc+0x2a>
 800b558:	2010      	movs	r0, #16
 800b55a:	f7ff ffd9 	bl	800b510 <malloc>
 800b55e:	1e02      	subs	r2, r0, #0
 800b560:	6270      	str	r0, [r6, #36]	; 0x24
 800b562:	d104      	bne.n	800b56e <_Balloc+0x22>
 800b564:	2166      	movs	r1, #102	; 0x66
 800b566:	4b19      	ldr	r3, [pc, #100]	; (800b5cc <_Balloc+0x80>)
 800b568:	4819      	ldr	r0, [pc, #100]	; (800b5d0 <_Balloc+0x84>)
 800b56a:	f000 fe0d 	bl	800c188 <__assert_func>
 800b56e:	6045      	str	r5, [r0, #4]
 800b570:	6085      	str	r5, [r0, #8]
 800b572:	6005      	str	r5, [r0, #0]
 800b574:	60c5      	str	r5, [r0, #12]
 800b576:	6a75      	ldr	r5, [r6, #36]	; 0x24
 800b578:	68eb      	ldr	r3, [r5, #12]
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d013      	beq.n	800b5a6 <_Balloc+0x5a>
 800b57e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800b580:	00a2      	lsls	r2, r4, #2
 800b582:	68db      	ldr	r3, [r3, #12]
 800b584:	189b      	adds	r3, r3, r2
 800b586:	6818      	ldr	r0, [r3, #0]
 800b588:	2800      	cmp	r0, #0
 800b58a:	d118      	bne.n	800b5be <_Balloc+0x72>
 800b58c:	2101      	movs	r1, #1
 800b58e:	000d      	movs	r5, r1
 800b590:	40a5      	lsls	r5, r4
 800b592:	1d6a      	adds	r2, r5, #5
 800b594:	0030      	movs	r0, r6
 800b596:	0092      	lsls	r2, r2, #2
 800b598:	f000 fb74 	bl	800bc84 <_calloc_r>
 800b59c:	2800      	cmp	r0, #0
 800b59e:	d00c      	beq.n	800b5ba <_Balloc+0x6e>
 800b5a0:	6044      	str	r4, [r0, #4]
 800b5a2:	6085      	str	r5, [r0, #8]
 800b5a4:	e00d      	b.n	800b5c2 <_Balloc+0x76>
 800b5a6:	2221      	movs	r2, #33	; 0x21
 800b5a8:	2104      	movs	r1, #4
 800b5aa:	0030      	movs	r0, r6
 800b5ac:	f000 fb6a 	bl	800bc84 <_calloc_r>
 800b5b0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800b5b2:	60e8      	str	r0, [r5, #12]
 800b5b4:	68db      	ldr	r3, [r3, #12]
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d1e1      	bne.n	800b57e <_Balloc+0x32>
 800b5ba:	2000      	movs	r0, #0
 800b5bc:	bd70      	pop	{r4, r5, r6, pc}
 800b5be:	6802      	ldr	r2, [r0, #0]
 800b5c0:	601a      	str	r2, [r3, #0]
 800b5c2:	2300      	movs	r3, #0
 800b5c4:	6103      	str	r3, [r0, #16]
 800b5c6:	60c3      	str	r3, [r0, #12]
 800b5c8:	e7f8      	b.n	800b5bc <_Balloc+0x70>
 800b5ca:	46c0      	nop			; (mov r8, r8)
 800b5cc:	0800d01d 	.word	0x0800d01d
 800b5d0:	0800d0a0 	.word	0x0800d0a0

0800b5d4 <_Bfree>:
 800b5d4:	b570      	push	{r4, r5, r6, lr}
 800b5d6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b5d8:	0005      	movs	r5, r0
 800b5da:	000c      	movs	r4, r1
 800b5dc:	2e00      	cmp	r6, #0
 800b5de:	d10e      	bne.n	800b5fe <_Bfree+0x2a>
 800b5e0:	2010      	movs	r0, #16
 800b5e2:	f7ff ff95 	bl	800b510 <malloc>
 800b5e6:	1e02      	subs	r2, r0, #0
 800b5e8:	6268      	str	r0, [r5, #36]	; 0x24
 800b5ea:	d104      	bne.n	800b5f6 <_Bfree+0x22>
 800b5ec:	218a      	movs	r1, #138	; 0x8a
 800b5ee:	4b09      	ldr	r3, [pc, #36]	; (800b614 <_Bfree+0x40>)
 800b5f0:	4809      	ldr	r0, [pc, #36]	; (800b618 <_Bfree+0x44>)
 800b5f2:	f000 fdc9 	bl	800c188 <__assert_func>
 800b5f6:	6046      	str	r6, [r0, #4]
 800b5f8:	6086      	str	r6, [r0, #8]
 800b5fa:	6006      	str	r6, [r0, #0]
 800b5fc:	60c6      	str	r6, [r0, #12]
 800b5fe:	2c00      	cmp	r4, #0
 800b600:	d007      	beq.n	800b612 <_Bfree+0x3e>
 800b602:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b604:	6862      	ldr	r2, [r4, #4]
 800b606:	68db      	ldr	r3, [r3, #12]
 800b608:	0092      	lsls	r2, r2, #2
 800b60a:	189b      	adds	r3, r3, r2
 800b60c:	681a      	ldr	r2, [r3, #0]
 800b60e:	6022      	str	r2, [r4, #0]
 800b610:	601c      	str	r4, [r3, #0]
 800b612:	bd70      	pop	{r4, r5, r6, pc}
 800b614:	0800d01d 	.word	0x0800d01d
 800b618:	0800d0a0 	.word	0x0800d0a0

0800b61c <__multadd>:
 800b61c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b61e:	000e      	movs	r6, r1
 800b620:	9001      	str	r0, [sp, #4]
 800b622:	000c      	movs	r4, r1
 800b624:	001d      	movs	r5, r3
 800b626:	2000      	movs	r0, #0
 800b628:	690f      	ldr	r7, [r1, #16]
 800b62a:	3614      	adds	r6, #20
 800b62c:	6833      	ldr	r3, [r6, #0]
 800b62e:	3001      	adds	r0, #1
 800b630:	b299      	uxth	r1, r3
 800b632:	4351      	muls	r1, r2
 800b634:	0c1b      	lsrs	r3, r3, #16
 800b636:	4353      	muls	r3, r2
 800b638:	1949      	adds	r1, r1, r5
 800b63a:	0c0d      	lsrs	r5, r1, #16
 800b63c:	195b      	adds	r3, r3, r5
 800b63e:	0c1d      	lsrs	r5, r3, #16
 800b640:	b289      	uxth	r1, r1
 800b642:	041b      	lsls	r3, r3, #16
 800b644:	185b      	adds	r3, r3, r1
 800b646:	c608      	stmia	r6!, {r3}
 800b648:	4287      	cmp	r7, r0
 800b64a:	dcef      	bgt.n	800b62c <__multadd+0x10>
 800b64c:	2d00      	cmp	r5, #0
 800b64e:	d022      	beq.n	800b696 <__multadd+0x7a>
 800b650:	68a3      	ldr	r3, [r4, #8]
 800b652:	42bb      	cmp	r3, r7
 800b654:	dc19      	bgt.n	800b68a <__multadd+0x6e>
 800b656:	6863      	ldr	r3, [r4, #4]
 800b658:	9801      	ldr	r0, [sp, #4]
 800b65a:	1c59      	adds	r1, r3, #1
 800b65c:	f7ff ff76 	bl	800b54c <_Balloc>
 800b660:	1e06      	subs	r6, r0, #0
 800b662:	d105      	bne.n	800b670 <__multadd+0x54>
 800b664:	0002      	movs	r2, r0
 800b666:	21b5      	movs	r1, #181	; 0xb5
 800b668:	4b0c      	ldr	r3, [pc, #48]	; (800b69c <__multadd+0x80>)
 800b66a:	480d      	ldr	r0, [pc, #52]	; (800b6a0 <__multadd+0x84>)
 800b66c:	f000 fd8c 	bl	800c188 <__assert_func>
 800b670:	0021      	movs	r1, r4
 800b672:	6923      	ldr	r3, [r4, #16]
 800b674:	310c      	adds	r1, #12
 800b676:	1c9a      	adds	r2, r3, #2
 800b678:	0092      	lsls	r2, r2, #2
 800b67a:	300c      	adds	r0, #12
 800b67c:	f7ff ff5d 	bl	800b53a <memcpy>
 800b680:	0021      	movs	r1, r4
 800b682:	9801      	ldr	r0, [sp, #4]
 800b684:	f7ff ffa6 	bl	800b5d4 <_Bfree>
 800b688:	0034      	movs	r4, r6
 800b68a:	1d3b      	adds	r3, r7, #4
 800b68c:	009b      	lsls	r3, r3, #2
 800b68e:	18e3      	adds	r3, r4, r3
 800b690:	605d      	str	r5, [r3, #4]
 800b692:	1c7b      	adds	r3, r7, #1
 800b694:	6123      	str	r3, [r4, #16]
 800b696:	0020      	movs	r0, r4
 800b698:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b69a:	46c0      	nop			; (mov r8, r8)
 800b69c:	0800d08f 	.word	0x0800d08f
 800b6a0:	0800d0a0 	.word	0x0800d0a0

0800b6a4 <__hi0bits>:
 800b6a4:	0003      	movs	r3, r0
 800b6a6:	0c02      	lsrs	r2, r0, #16
 800b6a8:	2000      	movs	r0, #0
 800b6aa:	4282      	cmp	r2, r0
 800b6ac:	d101      	bne.n	800b6b2 <__hi0bits+0xe>
 800b6ae:	041b      	lsls	r3, r3, #16
 800b6b0:	3010      	adds	r0, #16
 800b6b2:	0e1a      	lsrs	r2, r3, #24
 800b6b4:	d101      	bne.n	800b6ba <__hi0bits+0x16>
 800b6b6:	3008      	adds	r0, #8
 800b6b8:	021b      	lsls	r3, r3, #8
 800b6ba:	0f1a      	lsrs	r2, r3, #28
 800b6bc:	d101      	bne.n	800b6c2 <__hi0bits+0x1e>
 800b6be:	3004      	adds	r0, #4
 800b6c0:	011b      	lsls	r3, r3, #4
 800b6c2:	0f9a      	lsrs	r2, r3, #30
 800b6c4:	d101      	bne.n	800b6ca <__hi0bits+0x26>
 800b6c6:	3002      	adds	r0, #2
 800b6c8:	009b      	lsls	r3, r3, #2
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	db03      	blt.n	800b6d6 <__hi0bits+0x32>
 800b6ce:	3001      	adds	r0, #1
 800b6d0:	005b      	lsls	r3, r3, #1
 800b6d2:	d400      	bmi.n	800b6d6 <__hi0bits+0x32>
 800b6d4:	2020      	movs	r0, #32
 800b6d6:	4770      	bx	lr

0800b6d8 <__lo0bits>:
 800b6d8:	6803      	ldr	r3, [r0, #0]
 800b6da:	0002      	movs	r2, r0
 800b6dc:	2107      	movs	r1, #7
 800b6de:	0018      	movs	r0, r3
 800b6e0:	4008      	ands	r0, r1
 800b6e2:	420b      	tst	r3, r1
 800b6e4:	d00d      	beq.n	800b702 <__lo0bits+0x2a>
 800b6e6:	3906      	subs	r1, #6
 800b6e8:	2000      	movs	r0, #0
 800b6ea:	420b      	tst	r3, r1
 800b6ec:	d105      	bne.n	800b6fa <__lo0bits+0x22>
 800b6ee:	3002      	adds	r0, #2
 800b6f0:	4203      	tst	r3, r0
 800b6f2:	d003      	beq.n	800b6fc <__lo0bits+0x24>
 800b6f4:	40cb      	lsrs	r3, r1
 800b6f6:	0008      	movs	r0, r1
 800b6f8:	6013      	str	r3, [r2, #0]
 800b6fa:	4770      	bx	lr
 800b6fc:	089b      	lsrs	r3, r3, #2
 800b6fe:	6013      	str	r3, [r2, #0]
 800b700:	e7fb      	b.n	800b6fa <__lo0bits+0x22>
 800b702:	b299      	uxth	r1, r3
 800b704:	2900      	cmp	r1, #0
 800b706:	d101      	bne.n	800b70c <__lo0bits+0x34>
 800b708:	2010      	movs	r0, #16
 800b70a:	0c1b      	lsrs	r3, r3, #16
 800b70c:	b2d9      	uxtb	r1, r3
 800b70e:	2900      	cmp	r1, #0
 800b710:	d101      	bne.n	800b716 <__lo0bits+0x3e>
 800b712:	3008      	adds	r0, #8
 800b714:	0a1b      	lsrs	r3, r3, #8
 800b716:	0719      	lsls	r1, r3, #28
 800b718:	d101      	bne.n	800b71e <__lo0bits+0x46>
 800b71a:	3004      	adds	r0, #4
 800b71c:	091b      	lsrs	r3, r3, #4
 800b71e:	0799      	lsls	r1, r3, #30
 800b720:	d101      	bne.n	800b726 <__lo0bits+0x4e>
 800b722:	3002      	adds	r0, #2
 800b724:	089b      	lsrs	r3, r3, #2
 800b726:	07d9      	lsls	r1, r3, #31
 800b728:	d4e9      	bmi.n	800b6fe <__lo0bits+0x26>
 800b72a:	3001      	adds	r0, #1
 800b72c:	085b      	lsrs	r3, r3, #1
 800b72e:	d1e6      	bne.n	800b6fe <__lo0bits+0x26>
 800b730:	2020      	movs	r0, #32
 800b732:	e7e2      	b.n	800b6fa <__lo0bits+0x22>

0800b734 <__i2b>:
 800b734:	b510      	push	{r4, lr}
 800b736:	000c      	movs	r4, r1
 800b738:	2101      	movs	r1, #1
 800b73a:	f7ff ff07 	bl	800b54c <_Balloc>
 800b73e:	2800      	cmp	r0, #0
 800b740:	d106      	bne.n	800b750 <__i2b+0x1c>
 800b742:	21a0      	movs	r1, #160	; 0xa0
 800b744:	0002      	movs	r2, r0
 800b746:	4b04      	ldr	r3, [pc, #16]	; (800b758 <__i2b+0x24>)
 800b748:	4804      	ldr	r0, [pc, #16]	; (800b75c <__i2b+0x28>)
 800b74a:	0049      	lsls	r1, r1, #1
 800b74c:	f000 fd1c 	bl	800c188 <__assert_func>
 800b750:	2301      	movs	r3, #1
 800b752:	6144      	str	r4, [r0, #20]
 800b754:	6103      	str	r3, [r0, #16]
 800b756:	bd10      	pop	{r4, pc}
 800b758:	0800d08f 	.word	0x0800d08f
 800b75c:	0800d0a0 	.word	0x0800d0a0

0800b760 <__multiply>:
 800b760:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b762:	690b      	ldr	r3, [r1, #16]
 800b764:	0014      	movs	r4, r2
 800b766:	6912      	ldr	r2, [r2, #16]
 800b768:	000d      	movs	r5, r1
 800b76a:	b089      	sub	sp, #36	; 0x24
 800b76c:	4293      	cmp	r3, r2
 800b76e:	da01      	bge.n	800b774 <__multiply+0x14>
 800b770:	0025      	movs	r5, r4
 800b772:	000c      	movs	r4, r1
 800b774:	692f      	ldr	r7, [r5, #16]
 800b776:	6926      	ldr	r6, [r4, #16]
 800b778:	6869      	ldr	r1, [r5, #4]
 800b77a:	19bb      	adds	r3, r7, r6
 800b77c:	9302      	str	r3, [sp, #8]
 800b77e:	68ab      	ldr	r3, [r5, #8]
 800b780:	19ba      	adds	r2, r7, r6
 800b782:	4293      	cmp	r3, r2
 800b784:	da00      	bge.n	800b788 <__multiply+0x28>
 800b786:	3101      	adds	r1, #1
 800b788:	f7ff fee0 	bl	800b54c <_Balloc>
 800b78c:	9001      	str	r0, [sp, #4]
 800b78e:	2800      	cmp	r0, #0
 800b790:	d106      	bne.n	800b7a0 <__multiply+0x40>
 800b792:	215e      	movs	r1, #94	; 0x5e
 800b794:	0002      	movs	r2, r0
 800b796:	4b48      	ldr	r3, [pc, #288]	; (800b8b8 <__multiply+0x158>)
 800b798:	4848      	ldr	r0, [pc, #288]	; (800b8bc <__multiply+0x15c>)
 800b79a:	31ff      	adds	r1, #255	; 0xff
 800b79c:	f000 fcf4 	bl	800c188 <__assert_func>
 800b7a0:	9b01      	ldr	r3, [sp, #4]
 800b7a2:	2200      	movs	r2, #0
 800b7a4:	3314      	adds	r3, #20
 800b7a6:	469c      	mov	ip, r3
 800b7a8:	19bb      	adds	r3, r7, r6
 800b7aa:	009b      	lsls	r3, r3, #2
 800b7ac:	4463      	add	r3, ip
 800b7ae:	9303      	str	r3, [sp, #12]
 800b7b0:	4663      	mov	r3, ip
 800b7b2:	9903      	ldr	r1, [sp, #12]
 800b7b4:	428b      	cmp	r3, r1
 800b7b6:	d32c      	bcc.n	800b812 <__multiply+0xb2>
 800b7b8:	002b      	movs	r3, r5
 800b7ba:	0022      	movs	r2, r4
 800b7bc:	3314      	adds	r3, #20
 800b7be:	00bf      	lsls	r7, r7, #2
 800b7c0:	3214      	adds	r2, #20
 800b7c2:	9306      	str	r3, [sp, #24]
 800b7c4:	00b6      	lsls	r6, r6, #2
 800b7c6:	19db      	adds	r3, r3, r7
 800b7c8:	9304      	str	r3, [sp, #16]
 800b7ca:	1993      	adds	r3, r2, r6
 800b7cc:	9307      	str	r3, [sp, #28]
 800b7ce:	2304      	movs	r3, #4
 800b7d0:	9305      	str	r3, [sp, #20]
 800b7d2:	002b      	movs	r3, r5
 800b7d4:	9904      	ldr	r1, [sp, #16]
 800b7d6:	3315      	adds	r3, #21
 800b7d8:	9200      	str	r2, [sp, #0]
 800b7da:	4299      	cmp	r1, r3
 800b7dc:	d305      	bcc.n	800b7ea <__multiply+0x8a>
 800b7de:	1b4b      	subs	r3, r1, r5
 800b7e0:	3b15      	subs	r3, #21
 800b7e2:	089b      	lsrs	r3, r3, #2
 800b7e4:	3301      	adds	r3, #1
 800b7e6:	009b      	lsls	r3, r3, #2
 800b7e8:	9305      	str	r3, [sp, #20]
 800b7ea:	9b07      	ldr	r3, [sp, #28]
 800b7ec:	9a00      	ldr	r2, [sp, #0]
 800b7ee:	429a      	cmp	r2, r3
 800b7f0:	d311      	bcc.n	800b816 <__multiply+0xb6>
 800b7f2:	9b02      	ldr	r3, [sp, #8]
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	dd06      	ble.n	800b806 <__multiply+0xa6>
 800b7f8:	9b03      	ldr	r3, [sp, #12]
 800b7fa:	3b04      	subs	r3, #4
 800b7fc:	9303      	str	r3, [sp, #12]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	9300      	str	r3, [sp, #0]
 800b802:	2b00      	cmp	r3, #0
 800b804:	d053      	beq.n	800b8ae <__multiply+0x14e>
 800b806:	9b01      	ldr	r3, [sp, #4]
 800b808:	9a02      	ldr	r2, [sp, #8]
 800b80a:	0018      	movs	r0, r3
 800b80c:	611a      	str	r2, [r3, #16]
 800b80e:	b009      	add	sp, #36	; 0x24
 800b810:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b812:	c304      	stmia	r3!, {r2}
 800b814:	e7cd      	b.n	800b7b2 <__multiply+0x52>
 800b816:	9b00      	ldr	r3, [sp, #0]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	b298      	uxth	r0, r3
 800b81c:	2800      	cmp	r0, #0
 800b81e:	d01b      	beq.n	800b858 <__multiply+0xf8>
 800b820:	4667      	mov	r7, ip
 800b822:	2400      	movs	r4, #0
 800b824:	9e06      	ldr	r6, [sp, #24]
 800b826:	ce02      	ldmia	r6!, {r1}
 800b828:	683a      	ldr	r2, [r7, #0]
 800b82a:	b28b      	uxth	r3, r1
 800b82c:	4343      	muls	r3, r0
 800b82e:	b292      	uxth	r2, r2
 800b830:	189b      	adds	r3, r3, r2
 800b832:	191b      	adds	r3, r3, r4
 800b834:	0c0c      	lsrs	r4, r1, #16
 800b836:	4344      	muls	r4, r0
 800b838:	683a      	ldr	r2, [r7, #0]
 800b83a:	0c11      	lsrs	r1, r2, #16
 800b83c:	1861      	adds	r1, r4, r1
 800b83e:	0c1c      	lsrs	r4, r3, #16
 800b840:	1909      	adds	r1, r1, r4
 800b842:	0c0c      	lsrs	r4, r1, #16
 800b844:	b29b      	uxth	r3, r3
 800b846:	0409      	lsls	r1, r1, #16
 800b848:	430b      	orrs	r3, r1
 800b84a:	c708      	stmia	r7!, {r3}
 800b84c:	9b04      	ldr	r3, [sp, #16]
 800b84e:	42b3      	cmp	r3, r6
 800b850:	d8e9      	bhi.n	800b826 <__multiply+0xc6>
 800b852:	4663      	mov	r3, ip
 800b854:	9a05      	ldr	r2, [sp, #20]
 800b856:	509c      	str	r4, [r3, r2]
 800b858:	9b00      	ldr	r3, [sp, #0]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	0c1e      	lsrs	r6, r3, #16
 800b85e:	d020      	beq.n	800b8a2 <__multiply+0x142>
 800b860:	4663      	mov	r3, ip
 800b862:	002c      	movs	r4, r5
 800b864:	4660      	mov	r0, ip
 800b866:	2700      	movs	r7, #0
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	3414      	adds	r4, #20
 800b86c:	6822      	ldr	r2, [r4, #0]
 800b86e:	b29b      	uxth	r3, r3
 800b870:	b291      	uxth	r1, r2
 800b872:	4371      	muls	r1, r6
 800b874:	6802      	ldr	r2, [r0, #0]
 800b876:	0c12      	lsrs	r2, r2, #16
 800b878:	1889      	adds	r1, r1, r2
 800b87a:	19cf      	adds	r7, r1, r7
 800b87c:	0439      	lsls	r1, r7, #16
 800b87e:	430b      	orrs	r3, r1
 800b880:	6003      	str	r3, [r0, #0]
 800b882:	cc02      	ldmia	r4!, {r1}
 800b884:	6843      	ldr	r3, [r0, #4]
 800b886:	0c09      	lsrs	r1, r1, #16
 800b888:	4371      	muls	r1, r6
 800b88a:	b29b      	uxth	r3, r3
 800b88c:	0c3f      	lsrs	r7, r7, #16
 800b88e:	18cb      	adds	r3, r1, r3
 800b890:	9a04      	ldr	r2, [sp, #16]
 800b892:	19db      	adds	r3, r3, r7
 800b894:	0c1f      	lsrs	r7, r3, #16
 800b896:	3004      	adds	r0, #4
 800b898:	42a2      	cmp	r2, r4
 800b89a:	d8e7      	bhi.n	800b86c <__multiply+0x10c>
 800b89c:	4662      	mov	r2, ip
 800b89e:	9905      	ldr	r1, [sp, #20]
 800b8a0:	5053      	str	r3, [r2, r1]
 800b8a2:	9b00      	ldr	r3, [sp, #0]
 800b8a4:	3304      	adds	r3, #4
 800b8a6:	9300      	str	r3, [sp, #0]
 800b8a8:	2304      	movs	r3, #4
 800b8aa:	449c      	add	ip, r3
 800b8ac:	e79d      	b.n	800b7ea <__multiply+0x8a>
 800b8ae:	9b02      	ldr	r3, [sp, #8]
 800b8b0:	3b01      	subs	r3, #1
 800b8b2:	9302      	str	r3, [sp, #8]
 800b8b4:	e79d      	b.n	800b7f2 <__multiply+0x92>
 800b8b6:	46c0      	nop			; (mov r8, r8)
 800b8b8:	0800d08f 	.word	0x0800d08f
 800b8bc:	0800d0a0 	.word	0x0800d0a0

0800b8c0 <__pow5mult>:
 800b8c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b8c2:	2303      	movs	r3, #3
 800b8c4:	0015      	movs	r5, r2
 800b8c6:	0007      	movs	r7, r0
 800b8c8:	000e      	movs	r6, r1
 800b8ca:	401a      	ands	r2, r3
 800b8cc:	421d      	tst	r5, r3
 800b8ce:	d008      	beq.n	800b8e2 <__pow5mult+0x22>
 800b8d0:	4925      	ldr	r1, [pc, #148]	; (800b968 <__pow5mult+0xa8>)
 800b8d2:	3a01      	subs	r2, #1
 800b8d4:	0092      	lsls	r2, r2, #2
 800b8d6:	5852      	ldr	r2, [r2, r1]
 800b8d8:	2300      	movs	r3, #0
 800b8da:	0031      	movs	r1, r6
 800b8dc:	f7ff fe9e 	bl	800b61c <__multadd>
 800b8e0:	0006      	movs	r6, r0
 800b8e2:	10ad      	asrs	r5, r5, #2
 800b8e4:	d03d      	beq.n	800b962 <__pow5mult+0xa2>
 800b8e6:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800b8e8:	2c00      	cmp	r4, #0
 800b8ea:	d10f      	bne.n	800b90c <__pow5mult+0x4c>
 800b8ec:	2010      	movs	r0, #16
 800b8ee:	f7ff fe0f 	bl	800b510 <malloc>
 800b8f2:	1e02      	subs	r2, r0, #0
 800b8f4:	6278      	str	r0, [r7, #36]	; 0x24
 800b8f6:	d105      	bne.n	800b904 <__pow5mult+0x44>
 800b8f8:	21d7      	movs	r1, #215	; 0xd7
 800b8fa:	4b1c      	ldr	r3, [pc, #112]	; (800b96c <__pow5mult+0xac>)
 800b8fc:	481c      	ldr	r0, [pc, #112]	; (800b970 <__pow5mult+0xb0>)
 800b8fe:	0049      	lsls	r1, r1, #1
 800b900:	f000 fc42 	bl	800c188 <__assert_func>
 800b904:	6044      	str	r4, [r0, #4]
 800b906:	6084      	str	r4, [r0, #8]
 800b908:	6004      	str	r4, [r0, #0]
 800b90a:	60c4      	str	r4, [r0, #12]
 800b90c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b90e:	689c      	ldr	r4, [r3, #8]
 800b910:	9301      	str	r3, [sp, #4]
 800b912:	2c00      	cmp	r4, #0
 800b914:	d108      	bne.n	800b928 <__pow5mult+0x68>
 800b916:	0038      	movs	r0, r7
 800b918:	4916      	ldr	r1, [pc, #88]	; (800b974 <__pow5mult+0xb4>)
 800b91a:	f7ff ff0b 	bl	800b734 <__i2b>
 800b91e:	9b01      	ldr	r3, [sp, #4]
 800b920:	0004      	movs	r4, r0
 800b922:	6098      	str	r0, [r3, #8]
 800b924:	2300      	movs	r3, #0
 800b926:	6003      	str	r3, [r0, #0]
 800b928:	2301      	movs	r3, #1
 800b92a:	421d      	tst	r5, r3
 800b92c:	d00a      	beq.n	800b944 <__pow5mult+0x84>
 800b92e:	0031      	movs	r1, r6
 800b930:	0022      	movs	r2, r4
 800b932:	0038      	movs	r0, r7
 800b934:	f7ff ff14 	bl	800b760 <__multiply>
 800b938:	0031      	movs	r1, r6
 800b93a:	9001      	str	r0, [sp, #4]
 800b93c:	0038      	movs	r0, r7
 800b93e:	f7ff fe49 	bl	800b5d4 <_Bfree>
 800b942:	9e01      	ldr	r6, [sp, #4]
 800b944:	106d      	asrs	r5, r5, #1
 800b946:	d00c      	beq.n	800b962 <__pow5mult+0xa2>
 800b948:	6820      	ldr	r0, [r4, #0]
 800b94a:	2800      	cmp	r0, #0
 800b94c:	d107      	bne.n	800b95e <__pow5mult+0x9e>
 800b94e:	0022      	movs	r2, r4
 800b950:	0021      	movs	r1, r4
 800b952:	0038      	movs	r0, r7
 800b954:	f7ff ff04 	bl	800b760 <__multiply>
 800b958:	2300      	movs	r3, #0
 800b95a:	6020      	str	r0, [r4, #0]
 800b95c:	6003      	str	r3, [r0, #0]
 800b95e:	0004      	movs	r4, r0
 800b960:	e7e2      	b.n	800b928 <__pow5mult+0x68>
 800b962:	0030      	movs	r0, r6
 800b964:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b966:	46c0      	nop			; (mov r8, r8)
 800b968:	0800d1f0 	.word	0x0800d1f0
 800b96c:	0800d01d 	.word	0x0800d01d
 800b970:	0800d0a0 	.word	0x0800d0a0
 800b974:	00000271 	.word	0x00000271

0800b978 <__lshift>:
 800b978:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b97a:	000c      	movs	r4, r1
 800b97c:	0017      	movs	r7, r2
 800b97e:	6923      	ldr	r3, [r4, #16]
 800b980:	1155      	asrs	r5, r2, #5
 800b982:	b087      	sub	sp, #28
 800b984:	18eb      	adds	r3, r5, r3
 800b986:	9302      	str	r3, [sp, #8]
 800b988:	3301      	adds	r3, #1
 800b98a:	9301      	str	r3, [sp, #4]
 800b98c:	6849      	ldr	r1, [r1, #4]
 800b98e:	68a3      	ldr	r3, [r4, #8]
 800b990:	9004      	str	r0, [sp, #16]
 800b992:	9a01      	ldr	r2, [sp, #4]
 800b994:	4293      	cmp	r3, r2
 800b996:	db10      	blt.n	800b9ba <__lshift+0x42>
 800b998:	9804      	ldr	r0, [sp, #16]
 800b99a:	f7ff fdd7 	bl	800b54c <_Balloc>
 800b99e:	2300      	movs	r3, #0
 800b9a0:	0002      	movs	r2, r0
 800b9a2:	0006      	movs	r6, r0
 800b9a4:	0019      	movs	r1, r3
 800b9a6:	3214      	adds	r2, #20
 800b9a8:	4298      	cmp	r0, r3
 800b9aa:	d10c      	bne.n	800b9c6 <__lshift+0x4e>
 800b9ac:	21da      	movs	r1, #218	; 0xda
 800b9ae:	0002      	movs	r2, r0
 800b9b0:	4b26      	ldr	r3, [pc, #152]	; (800ba4c <__lshift+0xd4>)
 800b9b2:	4827      	ldr	r0, [pc, #156]	; (800ba50 <__lshift+0xd8>)
 800b9b4:	31ff      	adds	r1, #255	; 0xff
 800b9b6:	f000 fbe7 	bl	800c188 <__assert_func>
 800b9ba:	3101      	adds	r1, #1
 800b9bc:	005b      	lsls	r3, r3, #1
 800b9be:	e7e8      	b.n	800b992 <__lshift+0x1a>
 800b9c0:	0098      	lsls	r0, r3, #2
 800b9c2:	5011      	str	r1, [r2, r0]
 800b9c4:	3301      	adds	r3, #1
 800b9c6:	42ab      	cmp	r3, r5
 800b9c8:	dbfa      	blt.n	800b9c0 <__lshift+0x48>
 800b9ca:	43eb      	mvns	r3, r5
 800b9cc:	17db      	asrs	r3, r3, #31
 800b9ce:	401d      	ands	r5, r3
 800b9d0:	211f      	movs	r1, #31
 800b9d2:	0023      	movs	r3, r4
 800b9d4:	0038      	movs	r0, r7
 800b9d6:	00ad      	lsls	r5, r5, #2
 800b9d8:	1955      	adds	r5, r2, r5
 800b9da:	6922      	ldr	r2, [r4, #16]
 800b9dc:	3314      	adds	r3, #20
 800b9de:	0092      	lsls	r2, r2, #2
 800b9e0:	4008      	ands	r0, r1
 800b9e2:	4684      	mov	ip, r0
 800b9e4:	189a      	adds	r2, r3, r2
 800b9e6:	420f      	tst	r7, r1
 800b9e8:	d02a      	beq.n	800ba40 <__lshift+0xc8>
 800b9ea:	3101      	adds	r1, #1
 800b9ec:	1a09      	subs	r1, r1, r0
 800b9ee:	9105      	str	r1, [sp, #20]
 800b9f0:	2100      	movs	r1, #0
 800b9f2:	9503      	str	r5, [sp, #12]
 800b9f4:	4667      	mov	r7, ip
 800b9f6:	6818      	ldr	r0, [r3, #0]
 800b9f8:	40b8      	lsls	r0, r7
 800b9fa:	4301      	orrs	r1, r0
 800b9fc:	9803      	ldr	r0, [sp, #12]
 800b9fe:	c002      	stmia	r0!, {r1}
 800ba00:	cb02      	ldmia	r3!, {r1}
 800ba02:	9003      	str	r0, [sp, #12]
 800ba04:	9805      	ldr	r0, [sp, #20]
 800ba06:	40c1      	lsrs	r1, r0
 800ba08:	429a      	cmp	r2, r3
 800ba0a:	d8f3      	bhi.n	800b9f4 <__lshift+0x7c>
 800ba0c:	0020      	movs	r0, r4
 800ba0e:	3015      	adds	r0, #21
 800ba10:	2304      	movs	r3, #4
 800ba12:	4282      	cmp	r2, r0
 800ba14:	d304      	bcc.n	800ba20 <__lshift+0xa8>
 800ba16:	1b13      	subs	r3, r2, r4
 800ba18:	3b15      	subs	r3, #21
 800ba1a:	089b      	lsrs	r3, r3, #2
 800ba1c:	3301      	adds	r3, #1
 800ba1e:	009b      	lsls	r3, r3, #2
 800ba20:	50e9      	str	r1, [r5, r3]
 800ba22:	2900      	cmp	r1, #0
 800ba24:	d002      	beq.n	800ba2c <__lshift+0xb4>
 800ba26:	9b02      	ldr	r3, [sp, #8]
 800ba28:	3302      	adds	r3, #2
 800ba2a:	9301      	str	r3, [sp, #4]
 800ba2c:	9b01      	ldr	r3, [sp, #4]
 800ba2e:	9804      	ldr	r0, [sp, #16]
 800ba30:	3b01      	subs	r3, #1
 800ba32:	0021      	movs	r1, r4
 800ba34:	6133      	str	r3, [r6, #16]
 800ba36:	f7ff fdcd 	bl	800b5d4 <_Bfree>
 800ba3a:	0030      	movs	r0, r6
 800ba3c:	b007      	add	sp, #28
 800ba3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba40:	cb02      	ldmia	r3!, {r1}
 800ba42:	c502      	stmia	r5!, {r1}
 800ba44:	429a      	cmp	r2, r3
 800ba46:	d8fb      	bhi.n	800ba40 <__lshift+0xc8>
 800ba48:	e7f0      	b.n	800ba2c <__lshift+0xb4>
 800ba4a:	46c0      	nop			; (mov r8, r8)
 800ba4c:	0800d08f 	.word	0x0800d08f
 800ba50:	0800d0a0 	.word	0x0800d0a0

0800ba54 <__mcmp>:
 800ba54:	6902      	ldr	r2, [r0, #16]
 800ba56:	690b      	ldr	r3, [r1, #16]
 800ba58:	b530      	push	{r4, r5, lr}
 800ba5a:	0004      	movs	r4, r0
 800ba5c:	1ad0      	subs	r0, r2, r3
 800ba5e:	429a      	cmp	r2, r3
 800ba60:	d10d      	bne.n	800ba7e <__mcmp+0x2a>
 800ba62:	009b      	lsls	r3, r3, #2
 800ba64:	3414      	adds	r4, #20
 800ba66:	3114      	adds	r1, #20
 800ba68:	18e2      	adds	r2, r4, r3
 800ba6a:	18c9      	adds	r1, r1, r3
 800ba6c:	3a04      	subs	r2, #4
 800ba6e:	3904      	subs	r1, #4
 800ba70:	6815      	ldr	r5, [r2, #0]
 800ba72:	680b      	ldr	r3, [r1, #0]
 800ba74:	429d      	cmp	r5, r3
 800ba76:	d003      	beq.n	800ba80 <__mcmp+0x2c>
 800ba78:	2001      	movs	r0, #1
 800ba7a:	429d      	cmp	r5, r3
 800ba7c:	d303      	bcc.n	800ba86 <__mcmp+0x32>
 800ba7e:	bd30      	pop	{r4, r5, pc}
 800ba80:	4294      	cmp	r4, r2
 800ba82:	d3f3      	bcc.n	800ba6c <__mcmp+0x18>
 800ba84:	e7fb      	b.n	800ba7e <__mcmp+0x2a>
 800ba86:	4240      	negs	r0, r0
 800ba88:	e7f9      	b.n	800ba7e <__mcmp+0x2a>
	...

0800ba8c <__mdiff>:
 800ba8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ba8e:	000e      	movs	r6, r1
 800ba90:	0007      	movs	r7, r0
 800ba92:	0011      	movs	r1, r2
 800ba94:	0030      	movs	r0, r6
 800ba96:	b087      	sub	sp, #28
 800ba98:	0014      	movs	r4, r2
 800ba9a:	f7ff ffdb 	bl	800ba54 <__mcmp>
 800ba9e:	1e05      	subs	r5, r0, #0
 800baa0:	d110      	bne.n	800bac4 <__mdiff+0x38>
 800baa2:	0001      	movs	r1, r0
 800baa4:	0038      	movs	r0, r7
 800baa6:	f7ff fd51 	bl	800b54c <_Balloc>
 800baaa:	1e02      	subs	r2, r0, #0
 800baac:	d104      	bne.n	800bab8 <__mdiff+0x2c>
 800baae:	4b40      	ldr	r3, [pc, #256]	; (800bbb0 <__mdiff+0x124>)
 800bab0:	4940      	ldr	r1, [pc, #256]	; (800bbb4 <__mdiff+0x128>)
 800bab2:	4841      	ldr	r0, [pc, #260]	; (800bbb8 <__mdiff+0x12c>)
 800bab4:	f000 fb68 	bl	800c188 <__assert_func>
 800bab8:	2301      	movs	r3, #1
 800baba:	6145      	str	r5, [r0, #20]
 800babc:	6103      	str	r3, [r0, #16]
 800babe:	0010      	movs	r0, r2
 800bac0:	b007      	add	sp, #28
 800bac2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bac4:	2301      	movs	r3, #1
 800bac6:	9301      	str	r3, [sp, #4]
 800bac8:	2800      	cmp	r0, #0
 800baca:	db04      	blt.n	800bad6 <__mdiff+0x4a>
 800bacc:	0023      	movs	r3, r4
 800bace:	0034      	movs	r4, r6
 800bad0:	001e      	movs	r6, r3
 800bad2:	2300      	movs	r3, #0
 800bad4:	9301      	str	r3, [sp, #4]
 800bad6:	0038      	movs	r0, r7
 800bad8:	6861      	ldr	r1, [r4, #4]
 800bada:	f7ff fd37 	bl	800b54c <_Balloc>
 800bade:	1e02      	subs	r2, r0, #0
 800bae0:	d103      	bne.n	800baea <__mdiff+0x5e>
 800bae2:	2190      	movs	r1, #144	; 0x90
 800bae4:	4b32      	ldr	r3, [pc, #200]	; (800bbb0 <__mdiff+0x124>)
 800bae6:	0089      	lsls	r1, r1, #2
 800bae8:	e7e3      	b.n	800bab2 <__mdiff+0x26>
 800baea:	9b01      	ldr	r3, [sp, #4]
 800baec:	2700      	movs	r7, #0
 800baee:	60c3      	str	r3, [r0, #12]
 800baf0:	6920      	ldr	r0, [r4, #16]
 800baf2:	3414      	adds	r4, #20
 800baf4:	9401      	str	r4, [sp, #4]
 800baf6:	9b01      	ldr	r3, [sp, #4]
 800baf8:	0084      	lsls	r4, r0, #2
 800bafa:	191b      	adds	r3, r3, r4
 800bafc:	0034      	movs	r4, r6
 800bafe:	9302      	str	r3, [sp, #8]
 800bb00:	6933      	ldr	r3, [r6, #16]
 800bb02:	3414      	adds	r4, #20
 800bb04:	0099      	lsls	r1, r3, #2
 800bb06:	1863      	adds	r3, r4, r1
 800bb08:	9303      	str	r3, [sp, #12]
 800bb0a:	0013      	movs	r3, r2
 800bb0c:	3314      	adds	r3, #20
 800bb0e:	469c      	mov	ip, r3
 800bb10:	9305      	str	r3, [sp, #20]
 800bb12:	9b01      	ldr	r3, [sp, #4]
 800bb14:	9304      	str	r3, [sp, #16]
 800bb16:	9b04      	ldr	r3, [sp, #16]
 800bb18:	cc02      	ldmia	r4!, {r1}
 800bb1a:	cb20      	ldmia	r3!, {r5}
 800bb1c:	9304      	str	r3, [sp, #16]
 800bb1e:	b2ab      	uxth	r3, r5
 800bb20:	19df      	adds	r7, r3, r7
 800bb22:	b28b      	uxth	r3, r1
 800bb24:	1afb      	subs	r3, r7, r3
 800bb26:	0c09      	lsrs	r1, r1, #16
 800bb28:	0c2d      	lsrs	r5, r5, #16
 800bb2a:	1a6d      	subs	r5, r5, r1
 800bb2c:	1419      	asrs	r1, r3, #16
 800bb2e:	186d      	adds	r5, r5, r1
 800bb30:	4661      	mov	r1, ip
 800bb32:	142f      	asrs	r7, r5, #16
 800bb34:	b29b      	uxth	r3, r3
 800bb36:	042d      	lsls	r5, r5, #16
 800bb38:	432b      	orrs	r3, r5
 800bb3a:	c108      	stmia	r1!, {r3}
 800bb3c:	9b03      	ldr	r3, [sp, #12]
 800bb3e:	468c      	mov	ip, r1
 800bb40:	42a3      	cmp	r3, r4
 800bb42:	d8e8      	bhi.n	800bb16 <__mdiff+0x8a>
 800bb44:	0031      	movs	r1, r6
 800bb46:	9c03      	ldr	r4, [sp, #12]
 800bb48:	3115      	adds	r1, #21
 800bb4a:	2304      	movs	r3, #4
 800bb4c:	428c      	cmp	r4, r1
 800bb4e:	d304      	bcc.n	800bb5a <__mdiff+0xce>
 800bb50:	1ba3      	subs	r3, r4, r6
 800bb52:	3b15      	subs	r3, #21
 800bb54:	089b      	lsrs	r3, r3, #2
 800bb56:	3301      	adds	r3, #1
 800bb58:	009b      	lsls	r3, r3, #2
 800bb5a:	9901      	ldr	r1, [sp, #4]
 800bb5c:	18cc      	adds	r4, r1, r3
 800bb5e:	9905      	ldr	r1, [sp, #20]
 800bb60:	0026      	movs	r6, r4
 800bb62:	18cb      	adds	r3, r1, r3
 800bb64:	469c      	mov	ip, r3
 800bb66:	9902      	ldr	r1, [sp, #8]
 800bb68:	428e      	cmp	r6, r1
 800bb6a:	d310      	bcc.n	800bb8e <__mdiff+0x102>
 800bb6c:	9e02      	ldr	r6, [sp, #8]
 800bb6e:	1ee1      	subs	r1, r4, #3
 800bb70:	2500      	movs	r5, #0
 800bb72:	428e      	cmp	r6, r1
 800bb74:	d304      	bcc.n	800bb80 <__mdiff+0xf4>
 800bb76:	0031      	movs	r1, r6
 800bb78:	3103      	adds	r1, #3
 800bb7a:	1b0c      	subs	r4, r1, r4
 800bb7c:	08a4      	lsrs	r4, r4, #2
 800bb7e:	00a5      	lsls	r5, r4, #2
 800bb80:	195b      	adds	r3, r3, r5
 800bb82:	3b04      	subs	r3, #4
 800bb84:	6819      	ldr	r1, [r3, #0]
 800bb86:	2900      	cmp	r1, #0
 800bb88:	d00f      	beq.n	800bbaa <__mdiff+0x11e>
 800bb8a:	6110      	str	r0, [r2, #16]
 800bb8c:	e797      	b.n	800babe <__mdiff+0x32>
 800bb8e:	ce02      	ldmia	r6!, {r1}
 800bb90:	b28d      	uxth	r5, r1
 800bb92:	19ed      	adds	r5, r5, r7
 800bb94:	0c0f      	lsrs	r7, r1, #16
 800bb96:	1429      	asrs	r1, r5, #16
 800bb98:	1879      	adds	r1, r7, r1
 800bb9a:	140f      	asrs	r7, r1, #16
 800bb9c:	b2ad      	uxth	r5, r5
 800bb9e:	0409      	lsls	r1, r1, #16
 800bba0:	430d      	orrs	r5, r1
 800bba2:	4661      	mov	r1, ip
 800bba4:	c120      	stmia	r1!, {r5}
 800bba6:	468c      	mov	ip, r1
 800bba8:	e7dd      	b.n	800bb66 <__mdiff+0xda>
 800bbaa:	3801      	subs	r0, #1
 800bbac:	e7e9      	b.n	800bb82 <__mdiff+0xf6>
 800bbae:	46c0      	nop			; (mov r8, r8)
 800bbb0:	0800d08f 	.word	0x0800d08f
 800bbb4:	00000232 	.word	0x00000232
 800bbb8:	0800d0a0 	.word	0x0800d0a0

0800bbbc <__d2b>:
 800bbbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bbbe:	2101      	movs	r1, #1
 800bbc0:	0014      	movs	r4, r2
 800bbc2:	001e      	movs	r6, r3
 800bbc4:	9f08      	ldr	r7, [sp, #32]
 800bbc6:	f7ff fcc1 	bl	800b54c <_Balloc>
 800bbca:	1e05      	subs	r5, r0, #0
 800bbcc:	d105      	bne.n	800bbda <__d2b+0x1e>
 800bbce:	0002      	movs	r2, r0
 800bbd0:	4b26      	ldr	r3, [pc, #152]	; (800bc6c <__d2b+0xb0>)
 800bbd2:	4927      	ldr	r1, [pc, #156]	; (800bc70 <__d2b+0xb4>)
 800bbd4:	4827      	ldr	r0, [pc, #156]	; (800bc74 <__d2b+0xb8>)
 800bbd6:	f000 fad7 	bl	800c188 <__assert_func>
 800bbda:	0333      	lsls	r3, r6, #12
 800bbdc:	0076      	lsls	r6, r6, #1
 800bbde:	0b1b      	lsrs	r3, r3, #12
 800bbe0:	0d76      	lsrs	r6, r6, #21
 800bbe2:	d124      	bne.n	800bc2e <__d2b+0x72>
 800bbe4:	9301      	str	r3, [sp, #4]
 800bbe6:	2c00      	cmp	r4, #0
 800bbe8:	d027      	beq.n	800bc3a <__d2b+0x7e>
 800bbea:	4668      	mov	r0, sp
 800bbec:	9400      	str	r4, [sp, #0]
 800bbee:	f7ff fd73 	bl	800b6d8 <__lo0bits>
 800bbf2:	9c00      	ldr	r4, [sp, #0]
 800bbf4:	2800      	cmp	r0, #0
 800bbf6:	d01e      	beq.n	800bc36 <__d2b+0x7a>
 800bbf8:	9b01      	ldr	r3, [sp, #4]
 800bbfa:	2120      	movs	r1, #32
 800bbfc:	001a      	movs	r2, r3
 800bbfe:	1a09      	subs	r1, r1, r0
 800bc00:	408a      	lsls	r2, r1
 800bc02:	40c3      	lsrs	r3, r0
 800bc04:	4322      	orrs	r2, r4
 800bc06:	616a      	str	r2, [r5, #20]
 800bc08:	9301      	str	r3, [sp, #4]
 800bc0a:	9c01      	ldr	r4, [sp, #4]
 800bc0c:	61ac      	str	r4, [r5, #24]
 800bc0e:	1e63      	subs	r3, r4, #1
 800bc10:	419c      	sbcs	r4, r3
 800bc12:	3401      	adds	r4, #1
 800bc14:	612c      	str	r4, [r5, #16]
 800bc16:	2e00      	cmp	r6, #0
 800bc18:	d018      	beq.n	800bc4c <__d2b+0x90>
 800bc1a:	4b17      	ldr	r3, [pc, #92]	; (800bc78 <__d2b+0xbc>)
 800bc1c:	18f6      	adds	r6, r6, r3
 800bc1e:	2335      	movs	r3, #53	; 0x35
 800bc20:	1836      	adds	r6, r6, r0
 800bc22:	1a18      	subs	r0, r3, r0
 800bc24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc26:	603e      	str	r6, [r7, #0]
 800bc28:	6018      	str	r0, [r3, #0]
 800bc2a:	0028      	movs	r0, r5
 800bc2c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bc2e:	2280      	movs	r2, #128	; 0x80
 800bc30:	0352      	lsls	r2, r2, #13
 800bc32:	4313      	orrs	r3, r2
 800bc34:	e7d6      	b.n	800bbe4 <__d2b+0x28>
 800bc36:	616c      	str	r4, [r5, #20]
 800bc38:	e7e7      	b.n	800bc0a <__d2b+0x4e>
 800bc3a:	a801      	add	r0, sp, #4
 800bc3c:	f7ff fd4c 	bl	800b6d8 <__lo0bits>
 800bc40:	2401      	movs	r4, #1
 800bc42:	9b01      	ldr	r3, [sp, #4]
 800bc44:	612c      	str	r4, [r5, #16]
 800bc46:	616b      	str	r3, [r5, #20]
 800bc48:	3020      	adds	r0, #32
 800bc4a:	e7e4      	b.n	800bc16 <__d2b+0x5a>
 800bc4c:	4b0b      	ldr	r3, [pc, #44]	; (800bc7c <__d2b+0xc0>)
 800bc4e:	18c0      	adds	r0, r0, r3
 800bc50:	4b0b      	ldr	r3, [pc, #44]	; (800bc80 <__d2b+0xc4>)
 800bc52:	6038      	str	r0, [r7, #0]
 800bc54:	18e3      	adds	r3, r4, r3
 800bc56:	009b      	lsls	r3, r3, #2
 800bc58:	18eb      	adds	r3, r5, r3
 800bc5a:	6958      	ldr	r0, [r3, #20]
 800bc5c:	f7ff fd22 	bl	800b6a4 <__hi0bits>
 800bc60:	0164      	lsls	r4, r4, #5
 800bc62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc64:	1a24      	subs	r4, r4, r0
 800bc66:	601c      	str	r4, [r3, #0]
 800bc68:	e7df      	b.n	800bc2a <__d2b+0x6e>
 800bc6a:	46c0      	nop			; (mov r8, r8)
 800bc6c:	0800d08f 	.word	0x0800d08f
 800bc70:	0000030a 	.word	0x0000030a
 800bc74:	0800d0a0 	.word	0x0800d0a0
 800bc78:	fffffbcd 	.word	0xfffffbcd
 800bc7c:	fffffbce 	.word	0xfffffbce
 800bc80:	3fffffff 	.word	0x3fffffff

0800bc84 <_calloc_r>:
 800bc84:	b570      	push	{r4, r5, r6, lr}
 800bc86:	0c13      	lsrs	r3, r2, #16
 800bc88:	0c0d      	lsrs	r5, r1, #16
 800bc8a:	d11e      	bne.n	800bcca <_calloc_r+0x46>
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d10c      	bne.n	800bcaa <_calloc_r+0x26>
 800bc90:	b289      	uxth	r1, r1
 800bc92:	b294      	uxth	r4, r2
 800bc94:	434c      	muls	r4, r1
 800bc96:	0021      	movs	r1, r4
 800bc98:	f000 f88c 	bl	800bdb4 <_malloc_r>
 800bc9c:	1e05      	subs	r5, r0, #0
 800bc9e:	d01b      	beq.n	800bcd8 <_calloc_r+0x54>
 800bca0:	0022      	movs	r2, r4
 800bca2:	2100      	movs	r1, #0
 800bca4:	f7fe f8d2 	bl	8009e4c <memset>
 800bca8:	e016      	b.n	800bcd8 <_calloc_r+0x54>
 800bcaa:	1c1d      	adds	r5, r3, #0
 800bcac:	1c0b      	adds	r3, r1, #0
 800bcae:	b292      	uxth	r2, r2
 800bcb0:	b289      	uxth	r1, r1
 800bcb2:	b29c      	uxth	r4, r3
 800bcb4:	4351      	muls	r1, r2
 800bcb6:	b2ab      	uxth	r3, r5
 800bcb8:	4363      	muls	r3, r4
 800bcba:	0c0c      	lsrs	r4, r1, #16
 800bcbc:	191c      	adds	r4, r3, r4
 800bcbe:	0c22      	lsrs	r2, r4, #16
 800bcc0:	d107      	bne.n	800bcd2 <_calloc_r+0x4e>
 800bcc2:	0424      	lsls	r4, r4, #16
 800bcc4:	b289      	uxth	r1, r1
 800bcc6:	430c      	orrs	r4, r1
 800bcc8:	e7e5      	b.n	800bc96 <_calloc_r+0x12>
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d101      	bne.n	800bcd2 <_calloc_r+0x4e>
 800bcce:	1c13      	adds	r3, r2, #0
 800bcd0:	e7ed      	b.n	800bcae <_calloc_r+0x2a>
 800bcd2:	230c      	movs	r3, #12
 800bcd4:	2500      	movs	r5, #0
 800bcd6:	6003      	str	r3, [r0, #0]
 800bcd8:	0028      	movs	r0, r5
 800bcda:	bd70      	pop	{r4, r5, r6, pc}

0800bcdc <_free_r>:
 800bcdc:	b570      	push	{r4, r5, r6, lr}
 800bcde:	0005      	movs	r5, r0
 800bce0:	2900      	cmp	r1, #0
 800bce2:	d010      	beq.n	800bd06 <_free_r+0x2a>
 800bce4:	1f0c      	subs	r4, r1, #4
 800bce6:	6823      	ldr	r3, [r4, #0]
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	da00      	bge.n	800bcee <_free_r+0x12>
 800bcec:	18e4      	adds	r4, r4, r3
 800bcee:	0028      	movs	r0, r5
 800bcf0:	f000 fa9e 	bl	800c230 <__malloc_lock>
 800bcf4:	4a1d      	ldr	r2, [pc, #116]	; (800bd6c <_free_r+0x90>)
 800bcf6:	6813      	ldr	r3, [r2, #0]
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d105      	bne.n	800bd08 <_free_r+0x2c>
 800bcfc:	6063      	str	r3, [r4, #4]
 800bcfe:	6014      	str	r4, [r2, #0]
 800bd00:	0028      	movs	r0, r5
 800bd02:	f000 fa9d 	bl	800c240 <__malloc_unlock>
 800bd06:	bd70      	pop	{r4, r5, r6, pc}
 800bd08:	42a3      	cmp	r3, r4
 800bd0a:	d908      	bls.n	800bd1e <_free_r+0x42>
 800bd0c:	6821      	ldr	r1, [r4, #0]
 800bd0e:	1860      	adds	r0, r4, r1
 800bd10:	4283      	cmp	r3, r0
 800bd12:	d1f3      	bne.n	800bcfc <_free_r+0x20>
 800bd14:	6818      	ldr	r0, [r3, #0]
 800bd16:	685b      	ldr	r3, [r3, #4]
 800bd18:	1841      	adds	r1, r0, r1
 800bd1a:	6021      	str	r1, [r4, #0]
 800bd1c:	e7ee      	b.n	800bcfc <_free_r+0x20>
 800bd1e:	001a      	movs	r2, r3
 800bd20:	685b      	ldr	r3, [r3, #4]
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d001      	beq.n	800bd2a <_free_r+0x4e>
 800bd26:	42a3      	cmp	r3, r4
 800bd28:	d9f9      	bls.n	800bd1e <_free_r+0x42>
 800bd2a:	6811      	ldr	r1, [r2, #0]
 800bd2c:	1850      	adds	r0, r2, r1
 800bd2e:	42a0      	cmp	r0, r4
 800bd30:	d10b      	bne.n	800bd4a <_free_r+0x6e>
 800bd32:	6820      	ldr	r0, [r4, #0]
 800bd34:	1809      	adds	r1, r1, r0
 800bd36:	1850      	adds	r0, r2, r1
 800bd38:	6011      	str	r1, [r2, #0]
 800bd3a:	4283      	cmp	r3, r0
 800bd3c:	d1e0      	bne.n	800bd00 <_free_r+0x24>
 800bd3e:	6818      	ldr	r0, [r3, #0]
 800bd40:	685b      	ldr	r3, [r3, #4]
 800bd42:	1841      	adds	r1, r0, r1
 800bd44:	6011      	str	r1, [r2, #0]
 800bd46:	6053      	str	r3, [r2, #4]
 800bd48:	e7da      	b.n	800bd00 <_free_r+0x24>
 800bd4a:	42a0      	cmp	r0, r4
 800bd4c:	d902      	bls.n	800bd54 <_free_r+0x78>
 800bd4e:	230c      	movs	r3, #12
 800bd50:	602b      	str	r3, [r5, #0]
 800bd52:	e7d5      	b.n	800bd00 <_free_r+0x24>
 800bd54:	6821      	ldr	r1, [r4, #0]
 800bd56:	1860      	adds	r0, r4, r1
 800bd58:	4283      	cmp	r3, r0
 800bd5a:	d103      	bne.n	800bd64 <_free_r+0x88>
 800bd5c:	6818      	ldr	r0, [r3, #0]
 800bd5e:	685b      	ldr	r3, [r3, #4]
 800bd60:	1841      	adds	r1, r0, r1
 800bd62:	6021      	str	r1, [r4, #0]
 800bd64:	6063      	str	r3, [r4, #4]
 800bd66:	6054      	str	r4, [r2, #4]
 800bd68:	e7ca      	b.n	800bd00 <_free_r+0x24>
 800bd6a:	46c0      	nop			; (mov r8, r8)
 800bd6c:	200005dc 	.word	0x200005dc

0800bd70 <sbrk_aligned>:
 800bd70:	b570      	push	{r4, r5, r6, lr}
 800bd72:	4e0f      	ldr	r6, [pc, #60]	; (800bdb0 <sbrk_aligned+0x40>)
 800bd74:	000d      	movs	r5, r1
 800bd76:	6831      	ldr	r1, [r6, #0]
 800bd78:	0004      	movs	r4, r0
 800bd7a:	2900      	cmp	r1, #0
 800bd7c:	d102      	bne.n	800bd84 <sbrk_aligned+0x14>
 800bd7e:	f000 f9f1 	bl	800c164 <_sbrk_r>
 800bd82:	6030      	str	r0, [r6, #0]
 800bd84:	0029      	movs	r1, r5
 800bd86:	0020      	movs	r0, r4
 800bd88:	f000 f9ec 	bl	800c164 <_sbrk_r>
 800bd8c:	1c43      	adds	r3, r0, #1
 800bd8e:	d00a      	beq.n	800bda6 <sbrk_aligned+0x36>
 800bd90:	2303      	movs	r3, #3
 800bd92:	1cc5      	adds	r5, r0, #3
 800bd94:	439d      	bics	r5, r3
 800bd96:	42a8      	cmp	r0, r5
 800bd98:	d007      	beq.n	800bdaa <sbrk_aligned+0x3a>
 800bd9a:	1a29      	subs	r1, r5, r0
 800bd9c:	0020      	movs	r0, r4
 800bd9e:	f000 f9e1 	bl	800c164 <_sbrk_r>
 800bda2:	1c43      	adds	r3, r0, #1
 800bda4:	d101      	bne.n	800bdaa <sbrk_aligned+0x3a>
 800bda6:	2501      	movs	r5, #1
 800bda8:	426d      	negs	r5, r5
 800bdaa:	0028      	movs	r0, r5
 800bdac:	bd70      	pop	{r4, r5, r6, pc}
 800bdae:	46c0      	nop			; (mov r8, r8)
 800bdb0:	200005e0 	.word	0x200005e0

0800bdb4 <_malloc_r>:
 800bdb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bdb6:	2203      	movs	r2, #3
 800bdb8:	1ccb      	adds	r3, r1, #3
 800bdba:	4393      	bics	r3, r2
 800bdbc:	3308      	adds	r3, #8
 800bdbe:	0006      	movs	r6, r0
 800bdc0:	001f      	movs	r7, r3
 800bdc2:	2b0c      	cmp	r3, #12
 800bdc4:	d232      	bcs.n	800be2c <_malloc_r+0x78>
 800bdc6:	270c      	movs	r7, #12
 800bdc8:	42b9      	cmp	r1, r7
 800bdca:	d831      	bhi.n	800be30 <_malloc_r+0x7c>
 800bdcc:	0030      	movs	r0, r6
 800bdce:	f000 fa2f 	bl	800c230 <__malloc_lock>
 800bdd2:	4d32      	ldr	r5, [pc, #200]	; (800be9c <_malloc_r+0xe8>)
 800bdd4:	682b      	ldr	r3, [r5, #0]
 800bdd6:	001c      	movs	r4, r3
 800bdd8:	2c00      	cmp	r4, #0
 800bdda:	d12e      	bne.n	800be3a <_malloc_r+0x86>
 800bddc:	0039      	movs	r1, r7
 800bdde:	0030      	movs	r0, r6
 800bde0:	f7ff ffc6 	bl	800bd70 <sbrk_aligned>
 800bde4:	0004      	movs	r4, r0
 800bde6:	1c43      	adds	r3, r0, #1
 800bde8:	d11e      	bne.n	800be28 <_malloc_r+0x74>
 800bdea:	682c      	ldr	r4, [r5, #0]
 800bdec:	0025      	movs	r5, r4
 800bdee:	2d00      	cmp	r5, #0
 800bdf0:	d14a      	bne.n	800be88 <_malloc_r+0xd4>
 800bdf2:	6823      	ldr	r3, [r4, #0]
 800bdf4:	0029      	movs	r1, r5
 800bdf6:	18e3      	adds	r3, r4, r3
 800bdf8:	0030      	movs	r0, r6
 800bdfa:	9301      	str	r3, [sp, #4]
 800bdfc:	f000 f9b2 	bl	800c164 <_sbrk_r>
 800be00:	9b01      	ldr	r3, [sp, #4]
 800be02:	4283      	cmp	r3, r0
 800be04:	d143      	bne.n	800be8e <_malloc_r+0xda>
 800be06:	6823      	ldr	r3, [r4, #0]
 800be08:	3703      	adds	r7, #3
 800be0a:	1aff      	subs	r7, r7, r3
 800be0c:	2303      	movs	r3, #3
 800be0e:	439f      	bics	r7, r3
 800be10:	3708      	adds	r7, #8
 800be12:	2f0c      	cmp	r7, #12
 800be14:	d200      	bcs.n	800be18 <_malloc_r+0x64>
 800be16:	270c      	movs	r7, #12
 800be18:	0039      	movs	r1, r7
 800be1a:	0030      	movs	r0, r6
 800be1c:	f7ff ffa8 	bl	800bd70 <sbrk_aligned>
 800be20:	1c43      	adds	r3, r0, #1
 800be22:	d034      	beq.n	800be8e <_malloc_r+0xda>
 800be24:	6823      	ldr	r3, [r4, #0]
 800be26:	19df      	adds	r7, r3, r7
 800be28:	6027      	str	r7, [r4, #0]
 800be2a:	e013      	b.n	800be54 <_malloc_r+0xa0>
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	dacb      	bge.n	800bdc8 <_malloc_r+0x14>
 800be30:	230c      	movs	r3, #12
 800be32:	2500      	movs	r5, #0
 800be34:	6033      	str	r3, [r6, #0]
 800be36:	0028      	movs	r0, r5
 800be38:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800be3a:	6822      	ldr	r2, [r4, #0]
 800be3c:	1bd1      	subs	r1, r2, r7
 800be3e:	d420      	bmi.n	800be82 <_malloc_r+0xce>
 800be40:	290b      	cmp	r1, #11
 800be42:	d917      	bls.n	800be74 <_malloc_r+0xc0>
 800be44:	19e2      	adds	r2, r4, r7
 800be46:	6027      	str	r7, [r4, #0]
 800be48:	42a3      	cmp	r3, r4
 800be4a:	d111      	bne.n	800be70 <_malloc_r+0xbc>
 800be4c:	602a      	str	r2, [r5, #0]
 800be4e:	6863      	ldr	r3, [r4, #4]
 800be50:	6011      	str	r1, [r2, #0]
 800be52:	6053      	str	r3, [r2, #4]
 800be54:	0030      	movs	r0, r6
 800be56:	0025      	movs	r5, r4
 800be58:	f000 f9f2 	bl	800c240 <__malloc_unlock>
 800be5c:	2207      	movs	r2, #7
 800be5e:	350b      	adds	r5, #11
 800be60:	1d23      	adds	r3, r4, #4
 800be62:	4395      	bics	r5, r2
 800be64:	1aea      	subs	r2, r5, r3
 800be66:	429d      	cmp	r5, r3
 800be68:	d0e5      	beq.n	800be36 <_malloc_r+0x82>
 800be6a:	1b5b      	subs	r3, r3, r5
 800be6c:	50a3      	str	r3, [r4, r2]
 800be6e:	e7e2      	b.n	800be36 <_malloc_r+0x82>
 800be70:	605a      	str	r2, [r3, #4]
 800be72:	e7ec      	b.n	800be4e <_malloc_r+0x9a>
 800be74:	6862      	ldr	r2, [r4, #4]
 800be76:	42a3      	cmp	r3, r4
 800be78:	d101      	bne.n	800be7e <_malloc_r+0xca>
 800be7a:	602a      	str	r2, [r5, #0]
 800be7c:	e7ea      	b.n	800be54 <_malloc_r+0xa0>
 800be7e:	605a      	str	r2, [r3, #4]
 800be80:	e7e8      	b.n	800be54 <_malloc_r+0xa0>
 800be82:	0023      	movs	r3, r4
 800be84:	6864      	ldr	r4, [r4, #4]
 800be86:	e7a7      	b.n	800bdd8 <_malloc_r+0x24>
 800be88:	002c      	movs	r4, r5
 800be8a:	686d      	ldr	r5, [r5, #4]
 800be8c:	e7af      	b.n	800bdee <_malloc_r+0x3a>
 800be8e:	230c      	movs	r3, #12
 800be90:	0030      	movs	r0, r6
 800be92:	6033      	str	r3, [r6, #0]
 800be94:	f000 f9d4 	bl	800c240 <__malloc_unlock>
 800be98:	e7cd      	b.n	800be36 <_malloc_r+0x82>
 800be9a:	46c0      	nop			; (mov r8, r8)
 800be9c:	200005dc 	.word	0x200005dc

0800bea0 <__ssputs_r>:
 800bea0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bea2:	688e      	ldr	r6, [r1, #8]
 800bea4:	b085      	sub	sp, #20
 800bea6:	0007      	movs	r7, r0
 800bea8:	000c      	movs	r4, r1
 800beaa:	9203      	str	r2, [sp, #12]
 800beac:	9301      	str	r3, [sp, #4]
 800beae:	429e      	cmp	r6, r3
 800beb0:	d83c      	bhi.n	800bf2c <__ssputs_r+0x8c>
 800beb2:	2390      	movs	r3, #144	; 0x90
 800beb4:	898a      	ldrh	r2, [r1, #12]
 800beb6:	00db      	lsls	r3, r3, #3
 800beb8:	421a      	tst	r2, r3
 800beba:	d034      	beq.n	800bf26 <__ssputs_r+0x86>
 800bebc:	6909      	ldr	r1, [r1, #16]
 800bebe:	6823      	ldr	r3, [r4, #0]
 800bec0:	6960      	ldr	r0, [r4, #20]
 800bec2:	1a5b      	subs	r3, r3, r1
 800bec4:	9302      	str	r3, [sp, #8]
 800bec6:	2303      	movs	r3, #3
 800bec8:	4343      	muls	r3, r0
 800beca:	0fdd      	lsrs	r5, r3, #31
 800becc:	18ed      	adds	r5, r5, r3
 800bece:	9b01      	ldr	r3, [sp, #4]
 800bed0:	9802      	ldr	r0, [sp, #8]
 800bed2:	3301      	adds	r3, #1
 800bed4:	181b      	adds	r3, r3, r0
 800bed6:	106d      	asrs	r5, r5, #1
 800bed8:	42ab      	cmp	r3, r5
 800beda:	d900      	bls.n	800bede <__ssputs_r+0x3e>
 800bedc:	001d      	movs	r5, r3
 800bede:	0553      	lsls	r3, r2, #21
 800bee0:	d532      	bpl.n	800bf48 <__ssputs_r+0xa8>
 800bee2:	0029      	movs	r1, r5
 800bee4:	0038      	movs	r0, r7
 800bee6:	f7ff ff65 	bl	800bdb4 <_malloc_r>
 800beea:	1e06      	subs	r6, r0, #0
 800beec:	d109      	bne.n	800bf02 <__ssputs_r+0x62>
 800beee:	230c      	movs	r3, #12
 800bef0:	603b      	str	r3, [r7, #0]
 800bef2:	2340      	movs	r3, #64	; 0x40
 800bef4:	2001      	movs	r0, #1
 800bef6:	89a2      	ldrh	r2, [r4, #12]
 800bef8:	4240      	negs	r0, r0
 800befa:	4313      	orrs	r3, r2
 800befc:	81a3      	strh	r3, [r4, #12]
 800befe:	b005      	add	sp, #20
 800bf00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf02:	9a02      	ldr	r2, [sp, #8]
 800bf04:	6921      	ldr	r1, [r4, #16]
 800bf06:	f7ff fb18 	bl	800b53a <memcpy>
 800bf0a:	89a3      	ldrh	r3, [r4, #12]
 800bf0c:	4a14      	ldr	r2, [pc, #80]	; (800bf60 <__ssputs_r+0xc0>)
 800bf0e:	401a      	ands	r2, r3
 800bf10:	2380      	movs	r3, #128	; 0x80
 800bf12:	4313      	orrs	r3, r2
 800bf14:	81a3      	strh	r3, [r4, #12]
 800bf16:	9b02      	ldr	r3, [sp, #8]
 800bf18:	6126      	str	r6, [r4, #16]
 800bf1a:	18f6      	adds	r6, r6, r3
 800bf1c:	6026      	str	r6, [r4, #0]
 800bf1e:	6165      	str	r5, [r4, #20]
 800bf20:	9e01      	ldr	r6, [sp, #4]
 800bf22:	1aed      	subs	r5, r5, r3
 800bf24:	60a5      	str	r5, [r4, #8]
 800bf26:	9b01      	ldr	r3, [sp, #4]
 800bf28:	429e      	cmp	r6, r3
 800bf2a:	d900      	bls.n	800bf2e <__ssputs_r+0x8e>
 800bf2c:	9e01      	ldr	r6, [sp, #4]
 800bf2e:	0032      	movs	r2, r6
 800bf30:	9903      	ldr	r1, [sp, #12]
 800bf32:	6820      	ldr	r0, [r4, #0]
 800bf34:	f000 f968 	bl	800c208 <memmove>
 800bf38:	68a3      	ldr	r3, [r4, #8]
 800bf3a:	2000      	movs	r0, #0
 800bf3c:	1b9b      	subs	r3, r3, r6
 800bf3e:	60a3      	str	r3, [r4, #8]
 800bf40:	6823      	ldr	r3, [r4, #0]
 800bf42:	199e      	adds	r6, r3, r6
 800bf44:	6026      	str	r6, [r4, #0]
 800bf46:	e7da      	b.n	800befe <__ssputs_r+0x5e>
 800bf48:	002a      	movs	r2, r5
 800bf4a:	0038      	movs	r0, r7
 800bf4c:	f000 f980 	bl	800c250 <_realloc_r>
 800bf50:	1e06      	subs	r6, r0, #0
 800bf52:	d1e0      	bne.n	800bf16 <__ssputs_r+0x76>
 800bf54:	0038      	movs	r0, r7
 800bf56:	6921      	ldr	r1, [r4, #16]
 800bf58:	f7ff fec0 	bl	800bcdc <_free_r>
 800bf5c:	e7c7      	b.n	800beee <__ssputs_r+0x4e>
 800bf5e:	46c0      	nop			; (mov r8, r8)
 800bf60:	fffffb7f 	.word	0xfffffb7f

0800bf64 <_svfiprintf_r>:
 800bf64:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf66:	b0a1      	sub	sp, #132	; 0x84
 800bf68:	9003      	str	r0, [sp, #12]
 800bf6a:	001d      	movs	r5, r3
 800bf6c:	898b      	ldrh	r3, [r1, #12]
 800bf6e:	000f      	movs	r7, r1
 800bf70:	0016      	movs	r6, r2
 800bf72:	061b      	lsls	r3, r3, #24
 800bf74:	d511      	bpl.n	800bf9a <_svfiprintf_r+0x36>
 800bf76:	690b      	ldr	r3, [r1, #16]
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d10e      	bne.n	800bf9a <_svfiprintf_r+0x36>
 800bf7c:	2140      	movs	r1, #64	; 0x40
 800bf7e:	f7ff ff19 	bl	800bdb4 <_malloc_r>
 800bf82:	6038      	str	r0, [r7, #0]
 800bf84:	6138      	str	r0, [r7, #16]
 800bf86:	2800      	cmp	r0, #0
 800bf88:	d105      	bne.n	800bf96 <_svfiprintf_r+0x32>
 800bf8a:	230c      	movs	r3, #12
 800bf8c:	9a03      	ldr	r2, [sp, #12]
 800bf8e:	3801      	subs	r0, #1
 800bf90:	6013      	str	r3, [r2, #0]
 800bf92:	b021      	add	sp, #132	; 0x84
 800bf94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf96:	2340      	movs	r3, #64	; 0x40
 800bf98:	617b      	str	r3, [r7, #20]
 800bf9a:	2300      	movs	r3, #0
 800bf9c:	ac08      	add	r4, sp, #32
 800bf9e:	6163      	str	r3, [r4, #20]
 800bfa0:	3320      	adds	r3, #32
 800bfa2:	7663      	strb	r3, [r4, #25]
 800bfa4:	3310      	adds	r3, #16
 800bfa6:	76a3      	strb	r3, [r4, #26]
 800bfa8:	9507      	str	r5, [sp, #28]
 800bfaa:	0035      	movs	r5, r6
 800bfac:	782b      	ldrb	r3, [r5, #0]
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d001      	beq.n	800bfb6 <_svfiprintf_r+0x52>
 800bfb2:	2b25      	cmp	r3, #37	; 0x25
 800bfb4:	d147      	bne.n	800c046 <_svfiprintf_r+0xe2>
 800bfb6:	1bab      	subs	r3, r5, r6
 800bfb8:	9305      	str	r3, [sp, #20]
 800bfba:	42b5      	cmp	r5, r6
 800bfbc:	d00c      	beq.n	800bfd8 <_svfiprintf_r+0x74>
 800bfbe:	0032      	movs	r2, r6
 800bfc0:	0039      	movs	r1, r7
 800bfc2:	9803      	ldr	r0, [sp, #12]
 800bfc4:	f7ff ff6c 	bl	800bea0 <__ssputs_r>
 800bfc8:	1c43      	adds	r3, r0, #1
 800bfca:	d100      	bne.n	800bfce <_svfiprintf_r+0x6a>
 800bfcc:	e0ae      	b.n	800c12c <_svfiprintf_r+0x1c8>
 800bfce:	6962      	ldr	r2, [r4, #20]
 800bfd0:	9b05      	ldr	r3, [sp, #20]
 800bfd2:	4694      	mov	ip, r2
 800bfd4:	4463      	add	r3, ip
 800bfd6:	6163      	str	r3, [r4, #20]
 800bfd8:	782b      	ldrb	r3, [r5, #0]
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d100      	bne.n	800bfe0 <_svfiprintf_r+0x7c>
 800bfde:	e0a5      	b.n	800c12c <_svfiprintf_r+0x1c8>
 800bfe0:	2201      	movs	r2, #1
 800bfe2:	2300      	movs	r3, #0
 800bfe4:	4252      	negs	r2, r2
 800bfe6:	6062      	str	r2, [r4, #4]
 800bfe8:	a904      	add	r1, sp, #16
 800bfea:	3254      	adds	r2, #84	; 0x54
 800bfec:	1852      	adds	r2, r2, r1
 800bfee:	1c6e      	adds	r6, r5, #1
 800bff0:	6023      	str	r3, [r4, #0]
 800bff2:	60e3      	str	r3, [r4, #12]
 800bff4:	60a3      	str	r3, [r4, #8]
 800bff6:	7013      	strb	r3, [r2, #0]
 800bff8:	65a3      	str	r3, [r4, #88]	; 0x58
 800bffa:	2205      	movs	r2, #5
 800bffc:	7831      	ldrb	r1, [r6, #0]
 800bffe:	4854      	ldr	r0, [pc, #336]	; (800c150 <_svfiprintf_r+0x1ec>)
 800c000:	f7ff fa90 	bl	800b524 <memchr>
 800c004:	1c75      	adds	r5, r6, #1
 800c006:	2800      	cmp	r0, #0
 800c008:	d11f      	bne.n	800c04a <_svfiprintf_r+0xe6>
 800c00a:	6822      	ldr	r2, [r4, #0]
 800c00c:	06d3      	lsls	r3, r2, #27
 800c00e:	d504      	bpl.n	800c01a <_svfiprintf_r+0xb6>
 800c010:	2353      	movs	r3, #83	; 0x53
 800c012:	a904      	add	r1, sp, #16
 800c014:	185b      	adds	r3, r3, r1
 800c016:	2120      	movs	r1, #32
 800c018:	7019      	strb	r1, [r3, #0]
 800c01a:	0713      	lsls	r3, r2, #28
 800c01c:	d504      	bpl.n	800c028 <_svfiprintf_r+0xc4>
 800c01e:	2353      	movs	r3, #83	; 0x53
 800c020:	a904      	add	r1, sp, #16
 800c022:	185b      	adds	r3, r3, r1
 800c024:	212b      	movs	r1, #43	; 0x2b
 800c026:	7019      	strb	r1, [r3, #0]
 800c028:	7833      	ldrb	r3, [r6, #0]
 800c02a:	2b2a      	cmp	r3, #42	; 0x2a
 800c02c:	d016      	beq.n	800c05c <_svfiprintf_r+0xf8>
 800c02e:	0035      	movs	r5, r6
 800c030:	2100      	movs	r1, #0
 800c032:	200a      	movs	r0, #10
 800c034:	68e3      	ldr	r3, [r4, #12]
 800c036:	782a      	ldrb	r2, [r5, #0]
 800c038:	1c6e      	adds	r6, r5, #1
 800c03a:	3a30      	subs	r2, #48	; 0x30
 800c03c:	2a09      	cmp	r2, #9
 800c03e:	d94e      	bls.n	800c0de <_svfiprintf_r+0x17a>
 800c040:	2900      	cmp	r1, #0
 800c042:	d111      	bne.n	800c068 <_svfiprintf_r+0x104>
 800c044:	e017      	b.n	800c076 <_svfiprintf_r+0x112>
 800c046:	3501      	adds	r5, #1
 800c048:	e7b0      	b.n	800bfac <_svfiprintf_r+0x48>
 800c04a:	4b41      	ldr	r3, [pc, #260]	; (800c150 <_svfiprintf_r+0x1ec>)
 800c04c:	6822      	ldr	r2, [r4, #0]
 800c04e:	1ac0      	subs	r0, r0, r3
 800c050:	2301      	movs	r3, #1
 800c052:	4083      	lsls	r3, r0
 800c054:	4313      	orrs	r3, r2
 800c056:	002e      	movs	r6, r5
 800c058:	6023      	str	r3, [r4, #0]
 800c05a:	e7ce      	b.n	800bffa <_svfiprintf_r+0x96>
 800c05c:	9b07      	ldr	r3, [sp, #28]
 800c05e:	1d19      	adds	r1, r3, #4
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	9107      	str	r1, [sp, #28]
 800c064:	2b00      	cmp	r3, #0
 800c066:	db01      	blt.n	800c06c <_svfiprintf_r+0x108>
 800c068:	930b      	str	r3, [sp, #44]	; 0x2c
 800c06a:	e004      	b.n	800c076 <_svfiprintf_r+0x112>
 800c06c:	425b      	negs	r3, r3
 800c06e:	60e3      	str	r3, [r4, #12]
 800c070:	2302      	movs	r3, #2
 800c072:	4313      	orrs	r3, r2
 800c074:	6023      	str	r3, [r4, #0]
 800c076:	782b      	ldrb	r3, [r5, #0]
 800c078:	2b2e      	cmp	r3, #46	; 0x2e
 800c07a:	d10a      	bne.n	800c092 <_svfiprintf_r+0x12e>
 800c07c:	786b      	ldrb	r3, [r5, #1]
 800c07e:	2b2a      	cmp	r3, #42	; 0x2a
 800c080:	d135      	bne.n	800c0ee <_svfiprintf_r+0x18a>
 800c082:	9b07      	ldr	r3, [sp, #28]
 800c084:	3502      	adds	r5, #2
 800c086:	1d1a      	adds	r2, r3, #4
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	9207      	str	r2, [sp, #28]
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	db2b      	blt.n	800c0e8 <_svfiprintf_r+0x184>
 800c090:	9309      	str	r3, [sp, #36]	; 0x24
 800c092:	4e30      	ldr	r6, [pc, #192]	; (800c154 <_svfiprintf_r+0x1f0>)
 800c094:	2203      	movs	r2, #3
 800c096:	0030      	movs	r0, r6
 800c098:	7829      	ldrb	r1, [r5, #0]
 800c09a:	f7ff fa43 	bl	800b524 <memchr>
 800c09e:	2800      	cmp	r0, #0
 800c0a0:	d006      	beq.n	800c0b0 <_svfiprintf_r+0x14c>
 800c0a2:	2340      	movs	r3, #64	; 0x40
 800c0a4:	1b80      	subs	r0, r0, r6
 800c0a6:	4083      	lsls	r3, r0
 800c0a8:	6822      	ldr	r2, [r4, #0]
 800c0aa:	3501      	adds	r5, #1
 800c0ac:	4313      	orrs	r3, r2
 800c0ae:	6023      	str	r3, [r4, #0]
 800c0b0:	7829      	ldrb	r1, [r5, #0]
 800c0b2:	2206      	movs	r2, #6
 800c0b4:	4828      	ldr	r0, [pc, #160]	; (800c158 <_svfiprintf_r+0x1f4>)
 800c0b6:	1c6e      	adds	r6, r5, #1
 800c0b8:	7621      	strb	r1, [r4, #24]
 800c0ba:	f7ff fa33 	bl	800b524 <memchr>
 800c0be:	2800      	cmp	r0, #0
 800c0c0:	d03c      	beq.n	800c13c <_svfiprintf_r+0x1d8>
 800c0c2:	4b26      	ldr	r3, [pc, #152]	; (800c15c <_svfiprintf_r+0x1f8>)
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d125      	bne.n	800c114 <_svfiprintf_r+0x1b0>
 800c0c8:	2207      	movs	r2, #7
 800c0ca:	9b07      	ldr	r3, [sp, #28]
 800c0cc:	3307      	adds	r3, #7
 800c0ce:	4393      	bics	r3, r2
 800c0d0:	3308      	adds	r3, #8
 800c0d2:	9307      	str	r3, [sp, #28]
 800c0d4:	6963      	ldr	r3, [r4, #20]
 800c0d6:	9a04      	ldr	r2, [sp, #16]
 800c0d8:	189b      	adds	r3, r3, r2
 800c0da:	6163      	str	r3, [r4, #20]
 800c0dc:	e765      	b.n	800bfaa <_svfiprintf_r+0x46>
 800c0de:	4343      	muls	r3, r0
 800c0e0:	0035      	movs	r5, r6
 800c0e2:	2101      	movs	r1, #1
 800c0e4:	189b      	adds	r3, r3, r2
 800c0e6:	e7a6      	b.n	800c036 <_svfiprintf_r+0xd2>
 800c0e8:	2301      	movs	r3, #1
 800c0ea:	425b      	negs	r3, r3
 800c0ec:	e7d0      	b.n	800c090 <_svfiprintf_r+0x12c>
 800c0ee:	2300      	movs	r3, #0
 800c0f0:	200a      	movs	r0, #10
 800c0f2:	001a      	movs	r2, r3
 800c0f4:	3501      	adds	r5, #1
 800c0f6:	6063      	str	r3, [r4, #4]
 800c0f8:	7829      	ldrb	r1, [r5, #0]
 800c0fa:	1c6e      	adds	r6, r5, #1
 800c0fc:	3930      	subs	r1, #48	; 0x30
 800c0fe:	2909      	cmp	r1, #9
 800c100:	d903      	bls.n	800c10a <_svfiprintf_r+0x1a6>
 800c102:	2b00      	cmp	r3, #0
 800c104:	d0c5      	beq.n	800c092 <_svfiprintf_r+0x12e>
 800c106:	9209      	str	r2, [sp, #36]	; 0x24
 800c108:	e7c3      	b.n	800c092 <_svfiprintf_r+0x12e>
 800c10a:	4342      	muls	r2, r0
 800c10c:	0035      	movs	r5, r6
 800c10e:	2301      	movs	r3, #1
 800c110:	1852      	adds	r2, r2, r1
 800c112:	e7f1      	b.n	800c0f8 <_svfiprintf_r+0x194>
 800c114:	ab07      	add	r3, sp, #28
 800c116:	9300      	str	r3, [sp, #0]
 800c118:	003a      	movs	r2, r7
 800c11a:	0021      	movs	r1, r4
 800c11c:	4b10      	ldr	r3, [pc, #64]	; (800c160 <_svfiprintf_r+0x1fc>)
 800c11e:	9803      	ldr	r0, [sp, #12]
 800c120:	f7fd ff46 	bl	8009fb0 <_printf_float>
 800c124:	9004      	str	r0, [sp, #16]
 800c126:	9b04      	ldr	r3, [sp, #16]
 800c128:	3301      	adds	r3, #1
 800c12a:	d1d3      	bne.n	800c0d4 <_svfiprintf_r+0x170>
 800c12c:	89bb      	ldrh	r3, [r7, #12]
 800c12e:	980d      	ldr	r0, [sp, #52]	; 0x34
 800c130:	065b      	lsls	r3, r3, #25
 800c132:	d400      	bmi.n	800c136 <_svfiprintf_r+0x1d2>
 800c134:	e72d      	b.n	800bf92 <_svfiprintf_r+0x2e>
 800c136:	2001      	movs	r0, #1
 800c138:	4240      	negs	r0, r0
 800c13a:	e72a      	b.n	800bf92 <_svfiprintf_r+0x2e>
 800c13c:	ab07      	add	r3, sp, #28
 800c13e:	9300      	str	r3, [sp, #0]
 800c140:	003a      	movs	r2, r7
 800c142:	0021      	movs	r1, r4
 800c144:	4b06      	ldr	r3, [pc, #24]	; (800c160 <_svfiprintf_r+0x1fc>)
 800c146:	9803      	ldr	r0, [sp, #12]
 800c148:	f7fe f9e4 	bl	800a514 <_printf_i>
 800c14c:	e7ea      	b.n	800c124 <_svfiprintf_r+0x1c0>
 800c14e:	46c0      	nop			; (mov r8, r8)
 800c150:	0800d1fc 	.word	0x0800d1fc
 800c154:	0800d202 	.word	0x0800d202
 800c158:	0800d206 	.word	0x0800d206
 800c15c:	08009fb1 	.word	0x08009fb1
 800c160:	0800bea1 	.word	0x0800bea1

0800c164 <_sbrk_r>:
 800c164:	2300      	movs	r3, #0
 800c166:	b570      	push	{r4, r5, r6, lr}
 800c168:	4d06      	ldr	r5, [pc, #24]	; (800c184 <_sbrk_r+0x20>)
 800c16a:	0004      	movs	r4, r0
 800c16c:	0008      	movs	r0, r1
 800c16e:	602b      	str	r3, [r5, #0]
 800c170:	f7f7 fdb4 	bl	8003cdc <_sbrk>
 800c174:	1c43      	adds	r3, r0, #1
 800c176:	d103      	bne.n	800c180 <_sbrk_r+0x1c>
 800c178:	682b      	ldr	r3, [r5, #0]
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d000      	beq.n	800c180 <_sbrk_r+0x1c>
 800c17e:	6023      	str	r3, [r4, #0]
 800c180:	bd70      	pop	{r4, r5, r6, pc}
 800c182:	46c0      	nop			; (mov r8, r8)
 800c184:	200005e4 	.word	0x200005e4

0800c188 <__assert_func>:
 800c188:	b530      	push	{r4, r5, lr}
 800c18a:	0014      	movs	r4, r2
 800c18c:	001a      	movs	r2, r3
 800c18e:	4b09      	ldr	r3, [pc, #36]	; (800c1b4 <__assert_func+0x2c>)
 800c190:	0005      	movs	r5, r0
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	b085      	sub	sp, #20
 800c196:	68d8      	ldr	r0, [r3, #12]
 800c198:	4b07      	ldr	r3, [pc, #28]	; (800c1b8 <__assert_func+0x30>)
 800c19a:	2c00      	cmp	r4, #0
 800c19c:	d101      	bne.n	800c1a2 <__assert_func+0x1a>
 800c19e:	4b07      	ldr	r3, [pc, #28]	; (800c1bc <__assert_func+0x34>)
 800c1a0:	001c      	movs	r4, r3
 800c1a2:	9301      	str	r3, [sp, #4]
 800c1a4:	9100      	str	r1, [sp, #0]
 800c1a6:	002b      	movs	r3, r5
 800c1a8:	4905      	ldr	r1, [pc, #20]	; (800c1c0 <__assert_func+0x38>)
 800c1aa:	9402      	str	r4, [sp, #8]
 800c1ac:	f000 f80a 	bl	800c1c4 <fiprintf>
 800c1b0:	f000 faba 	bl	800c728 <abort>
 800c1b4:	20000010 	.word	0x20000010
 800c1b8:	0800d20d 	.word	0x0800d20d
 800c1bc:	0800d248 	.word	0x0800d248
 800c1c0:	0800d21a 	.word	0x0800d21a

0800c1c4 <fiprintf>:
 800c1c4:	b40e      	push	{r1, r2, r3}
 800c1c6:	b503      	push	{r0, r1, lr}
 800c1c8:	0001      	movs	r1, r0
 800c1ca:	ab03      	add	r3, sp, #12
 800c1cc:	4804      	ldr	r0, [pc, #16]	; (800c1e0 <fiprintf+0x1c>)
 800c1ce:	cb04      	ldmia	r3!, {r2}
 800c1d0:	6800      	ldr	r0, [r0, #0]
 800c1d2:	9301      	str	r3, [sp, #4]
 800c1d4:	f000 f892 	bl	800c2fc <_vfiprintf_r>
 800c1d8:	b002      	add	sp, #8
 800c1da:	bc08      	pop	{r3}
 800c1dc:	b003      	add	sp, #12
 800c1de:	4718      	bx	r3
 800c1e0:	20000010 	.word	0x20000010

0800c1e4 <__ascii_mbtowc>:
 800c1e4:	b082      	sub	sp, #8
 800c1e6:	2900      	cmp	r1, #0
 800c1e8:	d100      	bne.n	800c1ec <__ascii_mbtowc+0x8>
 800c1ea:	a901      	add	r1, sp, #4
 800c1ec:	1e10      	subs	r0, r2, #0
 800c1ee:	d006      	beq.n	800c1fe <__ascii_mbtowc+0x1a>
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d006      	beq.n	800c202 <__ascii_mbtowc+0x1e>
 800c1f4:	7813      	ldrb	r3, [r2, #0]
 800c1f6:	600b      	str	r3, [r1, #0]
 800c1f8:	7810      	ldrb	r0, [r2, #0]
 800c1fa:	1e43      	subs	r3, r0, #1
 800c1fc:	4198      	sbcs	r0, r3
 800c1fe:	b002      	add	sp, #8
 800c200:	4770      	bx	lr
 800c202:	2002      	movs	r0, #2
 800c204:	4240      	negs	r0, r0
 800c206:	e7fa      	b.n	800c1fe <__ascii_mbtowc+0x1a>

0800c208 <memmove>:
 800c208:	b510      	push	{r4, lr}
 800c20a:	4288      	cmp	r0, r1
 800c20c:	d902      	bls.n	800c214 <memmove+0xc>
 800c20e:	188b      	adds	r3, r1, r2
 800c210:	4298      	cmp	r0, r3
 800c212:	d303      	bcc.n	800c21c <memmove+0x14>
 800c214:	2300      	movs	r3, #0
 800c216:	e007      	b.n	800c228 <memmove+0x20>
 800c218:	5c8b      	ldrb	r3, [r1, r2]
 800c21a:	5483      	strb	r3, [r0, r2]
 800c21c:	3a01      	subs	r2, #1
 800c21e:	d2fb      	bcs.n	800c218 <memmove+0x10>
 800c220:	bd10      	pop	{r4, pc}
 800c222:	5ccc      	ldrb	r4, [r1, r3]
 800c224:	54c4      	strb	r4, [r0, r3]
 800c226:	3301      	adds	r3, #1
 800c228:	429a      	cmp	r2, r3
 800c22a:	d1fa      	bne.n	800c222 <memmove+0x1a>
 800c22c:	e7f8      	b.n	800c220 <memmove+0x18>
	...

0800c230 <__malloc_lock>:
 800c230:	b510      	push	{r4, lr}
 800c232:	4802      	ldr	r0, [pc, #8]	; (800c23c <__malloc_lock+0xc>)
 800c234:	f000 fc4f 	bl	800cad6 <__retarget_lock_acquire_recursive>
 800c238:	bd10      	pop	{r4, pc}
 800c23a:	46c0      	nop			; (mov r8, r8)
 800c23c:	200005e8 	.word	0x200005e8

0800c240 <__malloc_unlock>:
 800c240:	b510      	push	{r4, lr}
 800c242:	4802      	ldr	r0, [pc, #8]	; (800c24c <__malloc_unlock+0xc>)
 800c244:	f000 fc48 	bl	800cad8 <__retarget_lock_release_recursive>
 800c248:	bd10      	pop	{r4, pc}
 800c24a:	46c0      	nop			; (mov r8, r8)
 800c24c:	200005e8 	.word	0x200005e8

0800c250 <_realloc_r>:
 800c250:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c252:	0007      	movs	r7, r0
 800c254:	000e      	movs	r6, r1
 800c256:	0014      	movs	r4, r2
 800c258:	2900      	cmp	r1, #0
 800c25a:	d105      	bne.n	800c268 <_realloc_r+0x18>
 800c25c:	0011      	movs	r1, r2
 800c25e:	f7ff fda9 	bl	800bdb4 <_malloc_r>
 800c262:	0005      	movs	r5, r0
 800c264:	0028      	movs	r0, r5
 800c266:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c268:	2a00      	cmp	r2, #0
 800c26a:	d103      	bne.n	800c274 <_realloc_r+0x24>
 800c26c:	f7ff fd36 	bl	800bcdc <_free_r>
 800c270:	0025      	movs	r5, r4
 800c272:	e7f7      	b.n	800c264 <_realloc_r+0x14>
 800c274:	f000 fc9e 	bl	800cbb4 <_malloc_usable_size_r>
 800c278:	9001      	str	r0, [sp, #4]
 800c27a:	4284      	cmp	r4, r0
 800c27c:	d803      	bhi.n	800c286 <_realloc_r+0x36>
 800c27e:	0035      	movs	r5, r6
 800c280:	0843      	lsrs	r3, r0, #1
 800c282:	42a3      	cmp	r3, r4
 800c284:	d3ee      	bcc.n	800c264 <_realloc_r+0x14>
 800c286:	0021      	movs	r1, r4
 800c288:	0038      	movs	r0, r7
 800c28a:	f7ff fd93 	bl	800bdb4 <_malloc_r>
 800c28e:	1e05      	subs	r5, r0, #0
 800c290:	d0e8      	beq.n	800c264 <_realloc_r+0x14>
 800c292:	9b01      	ldr	r3, [sp, #4]
 800c294:	0022      	movs	r2, r4
 800c296:	429c      	cmp	r4, r3
 800c298:	d900      	bls.n	800c29c <_realloc_r+0x4c>
 800c29a:	001a      	movs	r2, r3
 800c29c:	0031      	movs	r1, r6
 800c29e:	0028      	movs	r0, r5
 800c2a0:	f7ff f94b 	bl	800b53a <memcpy>
 800c2a4:	0031      	movs	r1, r6
 800c2a6:	0038      	movs	r0, r7
 800c2a8:	f7ff fd18 	bl	800bcdc <_free_r>
 800c2ac:	e7da      	b.n	800c264 <_realloc_r+0x14>

0800c2ae <__sfputc_r>:
 800c2ae:	6893      	ldr	r3, [r2, #8]
 800c2b0:	b510      	push	{r4, lr}
 800c2b2:	3b01      	subs	r3, #1
 800c2b4:	6093      	str	r3, [r2, #8]
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	da04      	bge.n	800c2c4 <__sfputc_r+0x16>
 800c2ba:	6994      	ldr	r4, [r2, #24]
 800c2bc:	42a3      	cmp	r3, r4
 800c2be:	db07      	blt.n	800c2d0 <__sfputc_r+0x22>
 800c2c0:	290a      	cmp	r1, #10
 800c2c2:	d005      	beq.n	800c2d0 <__sfputc_r+0x22>
 800c2c4:	6813      	ldr	r3, [r2, #0]
 800c2c6:	1c58      	adds	r0, r3, #1
 800c2c8:	6010      	str	r0, [r2, #0]
 800c2ca:	7019      	strb	r1, [r3, #0]
 800c2cc:	0008      	movs	r0, r1
 800c2ce:	bd10      	pop	{r4, pc}
 800c2d0:	f000 f94e 	bl	800c570 <__swbuf_r>
 800c2d4:	0001      	movs	r1, r0
 800c2d6:	e7f9      	b.n	800c2cc <__sfputc_r+0x1e>

0800c2d8 <__sfputs_r>:
 800c2d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2da:	0006      	movs	r6, r0
 800c2dc:	000f      	movs	r7, r1
 800c2de:	0014      	movs	r4, r2
 800c2e0:	18d5      	adds	r5, r2, r3
 800c2e2:	42ac      	cmp	r4, r5
 800c2e4:	d101      	bne.n	800c2ea <__sfputs_r+0x12>
 800c2e6:	2000      	movs	r0, #0
 800c2e8:	e007      	b.n	800c2fa <__sfputs_r+0x22>
 800c2ea:	7821      	ldrb	r1, [r4, #0]
 800c2ec:	003a      	movs	r2, r7
 800c2ee:	0030      	movs	r0, r6
 800c2f0:	f7ff ffdd 	bl	800c2ae <__sfputc_r>
 800c2f4:	3401      	adds	r4, #1
 800c2f6:	1c43      	adds	r3, r0, #1
 800c2f8:	d1f3      	bne.n	800c2e2 <__sfputs_r+0xa>
 800c2fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c2fc <_vfiprintf_r>:
 800c2fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c2fe:	b0a1      	sub	sp, #132	; 0x84
 800c300:	0006      	movs	r6, r0
 800c302:	000c      	movs	r4, r1
 800c304:	001f      	movs	r7, r3
 800c306:	9203      	str	r2, [sp, #12]
 800c308:	2800      	cmp	r0, #0
 800c30a:	d004      	beq.n	800c316 <_vfiprintf_r+0x1a>
 800c30c:	6983      	ldr	r3, [r0, #24]
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d101      	bne.n	800c316 <_vfiprintf_r+0x1a>
 800c312:	f000 fb3f 	bl	800c994 <__sinit>
 800c316:	4b8e      	ldr	r3, [pc, #568]	; (800c550 <_vfiprintf_r+0x254>)
 800c318:	429c      	cmp	r4, r3
 800c31a:	d11c      	bne.n	800c356 <_vfiprintf_r+0x5a>
 800c31c:	6874      	ldr	r4, [r6, #4]
 800c31e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c320:	07db      	lsls	r3, r3, #31
 800c322:	d405      	bmi.n	800c330 <_vfiprintf_r+0x34>
 800c324:	89a3      	ldrh	r3, [r4, #12]
 800c326:	059b      	lsls	r3, r3, #22
 800c328:	d402      	bmi.n	800c330 <_vfiprintf_r+0x34>
 800c32a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c32c:	f000 fbd3 	bl	800cad6 <__retarget_lock_acquire_recursive>
 800c330:	89a3      	ldrh	r3, [r4, #12]
 800c332:	071b      	lsls	r3, r3, #28
 800c334:	d502      	bpl.n	800c33c <_vfiprintf_r+0x40>
 800c336:	6923      	ldr	r3, [r4, #16]
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d11d      	bne.n	800c378 <_vfiprintf_r+0x7c>
 800c33c:	0021      	movs	r1, r4
 800c33e:	0030      	movs	r0, r6
 800c340:	f000 f97a 	bl	800c638 <__swsetup_r>
 800c344:	2800      	cmp	r0, #0
 800c346:	d017      	beq.n	800c378 <_vfiprintf_r+0x7c>
 800c348:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c34a:	07db      	lsls	r3, r3, #31
 800c34c:	d50d      	bpl.n	800c36a <_vfiprintf_r+0x6e>
 800c34e:	2001      	movs	r0, #1
 800c350:	4240      	negs	r0, r0
 800c352:	b021      	add	sp, #132	; 0x84
 800c354:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c356:	4b7f      	ldr	r3, [pc, #508]	; (800c554 <_vfiprintf_r+0x258>)
 800c358:	429c      	cmp	r4, r3
 800c35a:	d101      	bne.n	800c360 <_vfiprintf_r+0x64>
 800c35c:	68b4      	ldr	r4, [r6, #8]
 800c35e:	e7de      	b.n	800c31e <_vfiprintf_r+0x22>
 800c360:	4b7d      	ldr	r3, [pc, #500]	; (800c558 <_vfiprintf_r+0x25c>)
 800c362:	429c      	cmp	r4, r3
 800c364:	d1db      	bne.n	800c31e <_vfiprintf_r+0x22>
 800c366:	68f4      	ldr	r4, [r6, #12]
 800c368:	e7d9      	b.n	800c31e <_vfiprintf_r+0x22>
 800c36a:	89a3      	ldrh	r3, [r4, #12]
 800c36c:	059b      	lsls	r3, r3, #22
 800c36e:	d4ee      	bmi.n	800c34e <_vfiprintf_r+0x52>
 800c370:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c372:	f000 fbb1 	bl	800cad8 <__retarget_lock_release_recursive>
 800c376:	e7ea      	b.n	800c34e <_vfiprintf_r+0x52>
 800c378:	2300      	movs	r3, #0
 800c37a:	ad08      	add	r5, sp, #32
 800c37c:	616b      	str	r3, [r5, #20]
 800c37e:	3320      	adds	r3, #32
 800c380:	766b      	strb	r3, [r5, #25]
 800c382:	3310      	adds	r3, #16
 800c384:	76ab      	strb	r3, [r5, #26]
 800c386:	9707      	str	r7, [sp, #28]
 800c388:	9f03      	ldr	r7, [sp, #12]
 800c38a:	783b      	ldrb	r3, [r7, #0]
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d001      	beq.n	800c394 <_vfiprintf_r+0x98>
 800c390:	2b25      	cmp	r3, #37	; 0x25
 800c392:	d14e      	bne.n	800c432 <_vfiprintf_r+0x136>
 800c394:	9b03      	ldr	r3, [sp, #12]
 800c396:	1afb      	subs	r3, r7, r3
 800c398:	9305      	str	r3, [sp, #20]
 800c39a:	9b03      	ldr	r3, [sp, #12]
 800c39c:	429f      	cmp	r7, r3
 800c39e:	d00d      	beq.n	800c3bc <_vfiprintf_r+0xc0>
 800c3a0:	9b05      	ldr	r3, [sp, #20]
 800c3a2:	0021      	movs	r1, r4
 800c3a4:	0030      	movs	r0, r6
 800c3a6:	9a03      	ldr	r2, [sp, #12]
 800c3a8:	f7ff ff96 	bl	800c2d8 <__sfputs_r>
 800c3ac:	1c43      	adds	r3, r0, #1
 800c3ae:	d100      	bne.n	800c3b2 <_vfiprintf_r+0xb6>
 800c3b0:	e0b5      	b.n	800c51e <_vfiprintf_r+0x222>
 800c3b2:	696a      	ldr	r2, [r5, #20]
 800c3b4:	9b05      	ldr	r3, [sp, #20]
 800c3b6:	4694      	mov	ip, r2
 800c3b8:	4463      	add	r3, ip
 800c3ba:	616b      	str	r3, [r5, #20]
 800c3bc:	783b      	ldrb	r3, [r7, #0]
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d100      	bne.n	800c3c4 <_vfiprintf_r+0xc8>
 800c3c2:	e0ac      	b.n	800c51e <_vfiprintf_r+0x222>
 800c3c4:	2201      	movs	r2, #1
 800c3c6:	1c7b      	adds	r3, r7, #1
 800c3c8:	9303      	str	r3, [sp, #12]
 800c3ca:	2300      	movs	r3, #0
 800c3cc:	4252      	negs	r2, r2
 800c3ce:	606a      	str	r2, [r5, #4]
 800c3d0:	a904      	add	r1, sp, #16
 800c3d2:	3254      	adds	r2, #84	; 0x54
 800c3d4:	1852      	adds	r2, r2, r1
 800c3d6:	602b      	str	r3, [r5, #0]
 800c3d8:	60eb      	str	r3, [r5, #12]
 800c3da:	60ab      	str	r3, [r5, #8]
 800c3dc:	7013      	strb	r3, [r2, #0]
 800c3de:	65ab      	str	r3, [r5, #88]	; 0x58
 800c3e0:	9b03      	ldr	r3, [sp, #12]
 800c3e2:	2205      	movs	r2, #5
 800c3e4:	7819      	ldrb	r1, [r3, #0]
 800c3e6:	485d      	ldr	r0, [pc, #372]	; (800c55c <_vfiprintf_r+0x260>)
 800c3e8:	f7ff f89c 	bl	800b524 <memchr>
 800c3ec:	9b03      	ldr	r3, [sp, #12]
 800c3ee:	1c5f      	adds	r7, r3, #1
 800c3f0:	2800      	cmp	r0, #0
 800c3f2:	d120      	bne.n	800c436 <_vfiprintf_r+0x13a>
 800c3f4:	682a      	ldr	r2, [r5, #0]
 800c3f6:	06d3      	lsls	r3, r2, #27
 800c3f8:	d504      	bpl.n	800c404 <_vfiprintf_r+0x108>
 800c3fa:	2353      	movs	r3, #83	; 0x53
 800c3fc:	a904      	add	r1, sp, #16
 800c3fe:	185b      	adds	r3, r3, r1
 800c400:	2120      	movs	r1, #32
 800c402:	7019      	strb	r1, [r3, #0]
 800c404:	0713      	lsls	r3, r2, #28
 800c406:	d504      	bpl.n	800c412 <_vfiprintf_r+0x116>
 800c408:	2353      	movs	r3, #83	; 0x53
 800c40a:	a904      	add	r1, sp, #16
 800c40c:	185b      	adds	r3, r3, r1
 800c40e:	212b      	movs	r1, #43	; 0x2b
 800c410:	7019      	strb	r1, [r3, #0]
 800c412:	9b03      	ldr	r3, [sp, #12]
 800c414:	781b      	ldrb	r3, [r3, #0]
 800c416:	2b2a      	cmp	r3, #42	; 0x2a
 800c418:	d016      	beq.n	800c448 <_vfiprintf_r+0x14c>
 800c41a:	2100      	movs	r1, #0
 800c41c:	68eb      	ldr	r3, [r5, #12]
 800c41e:	9f03      	ldr	r7, [sp, #12]
 800c420:	783a      	ldrb	r2, [r7, #0]
 800c422:	1c78      	adds	r0, r7, #1
 800c424:	3a30      	subs	r2, #48	; 0x30
 800c426:	4684      	mov	ip, r0
 800c428:	2a09      	cmp	r2, #9
 800c42a:	d94f      	bls.n	800c4cc <_vfiprintf_r+0x1d0>
 800c42c:	2900      	cmp	r1, #0
 800c42e:	d111      	bne.n	800c454 <_vfiprintf_r+0x158>
 800c430:	e017      	b.n	800c462 <_vfiprintf_r+0x166>
 800c432:	3701      	adds	r7, #1
 800c434:	e7a9      	b.n	800c38a <_vfiprintf_r+0x8e>
 800c436:	4b49      	ldr	r3, [pc, #292]	; (800c55c <_vfiprintf_r+0x260>)
 800c438:	682a      	ldr	r2, [r5, #0]
 800c43a:	1ac0      	subs	r0, r0, r3
 800c43c:	2301      	movs	r3, #1
 800c43e:	4083      	lsls	r3, r0
 800c440:	4313      	orrs	r3, r2
 800c442:	602b      	str	r3, [r5, #0]
 800c444:	9703      	str	r7, [sp, #12]
 800c446:	e7cb      	b.n	800c3e0 <_vfiprintf_r+0xe4>
 800c448:	9b07      	ldr	r3, [sp, #28]
 800c44a:	1d19      	adds	r1, r3, #4
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	9107      	str	r1, [sp, #28]
 800c450:	2b00      	cmp	r3, #0
 800c452:	db01      	blt.n	800c458 <_vfiprintf_r+0x15c>
 800c454:	930b      	str	r3, [sp, #44]	; 0x2c
 800c456:	e004      	b.n	800c462 <_vfiprintf_r+0x166>
 800c458:	425b      	negs	r3, r3
 800c45a:	60eb      	str	r3, [r5, #12]
 800c45c:	2302      	movs	r3, #2
 800c45e:	4313      	orrs	r3, r2
 800c460:	602b      	str	r3, [r5, #0]
 800c462:	783b      	ldrb	r3, [r7, #0]
 800c464:	2b2e      	cmp	r3, #46	; 0x2e
 800c466:	d10a      	bne.n	800c47e <_vfiprintf_r+0x182>
 800c468:	787b      	ldrb	r3, [r7, #1]
 800c46a:	2b2a      	cmp	r3, #42	; 0x2a
 800c46c:	d137      	bne.n	800c4de <_vfiprintf_r+0x1e2>
 800c46e:	9b07      	ldr	r3, [sp, #28]
 800c470:	3702      	adds	r7, #2
 800c472:	1d1a      	adds	r2, r3, #4
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	9207      	str	r2, [sp, #28]
 800c478:	2b00      	cmp	r3, #0
 800c47a:	db2d      	blt.n	800c4d8 <_vfiprintf_r+0x1dc>
 800c47c:	9309      	str	r3, [sp, #36]	; 0x24
 800c47e:	2203      	movs	r2, #3
 800c480:	7839      	ldrb	r1, [r7, #0]
 800c482:	4837      	ldr	r0, [pc, #220]	; (800c560 <_vfiprintf_r+0x264>)
 800c484:	f7ff f84e 	bl	800b524 <memchr>
 800c488:	2800      	cmp	r0, #0
 800c48a:	d007      	beq.n	800c49c <_vfiprintf_r+0x1a0>
 800c48c:	4b34      	ldr	r3, [pc, #208]	; (800c560 <_vfiprintf_r+0x264>)
 800c48e:	682a      	ldr	r2, [r5, #0]
 800c490:	1ac0      	subs	r0, r0, r3
 800c492:	2340      	movs	r3, #64	; 0x40
 800c494:	4083      	lsls	r3, r0
 800c496:	4313      	orrs	r3, r2
 800c498:	3701      	adds	r7, #1
 800c49a:	602b      	str	r3, [r5, #0]
 800c49c:	7839      	ldrb	r1, [r7, #0]
 800c49e:	1c7b      	adds	r3, r7, #1
 800c4a0:	2206      	movs	r2, #6
 800c4a2:	4830      	ldr	r0, [pc, #192]	; (800c564 <_vfiprintf_r+0x268>)
 800c4a4:	9303      	str	r3, [sp, #12]
 800c4a6:	7629      	strb	r1, [r5, #24]
 800c4a8:	f7ff f83c 	bl	800b524 <memchr>
 800c4ac:	2800      	cmp	r0, #0
 800c4ae:	d045      	beq.n	800c53c <_vfiprintf_r+0x240>
 800c4b0:	4b2d      	ldr	r3, [pc, #180]	; (800c568 <_vfiprintf_r+0x26c>)
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d127      	bne.n	800c506 <_vfiprintf_r+0x20a>
 800c4b6:	2207      	movs	r2, #7
 800c4b8:	9b07      	ldr	r3, [sp, #28]
 800c4ba:	3307      	adds	r3, #7
 800c4bc:	4393      	bics	r3, r2
 800c4be:	3308      	adds	r3, #8
 800c4c0:	9307      	str	r3, [sp, #28]
 800c4c2:	696b      	ldr	r3, [r5, #20]
 800c4c4:	9a04      	ldr	r2, [sp, #16]
 800c4c6:	189b      	adds	r3, r3, r2
 800c4c8:	616b      	str	r3, [r5, #20]
 800c4ca:	e75d      	b.n	800c388 <_vfiprintf_r+0x8c>
 800c4cc:	210a      	movs	r1, #10
 800c4ce:	434b      	muls	r3, r1
 800c4d0:	4667      	mov	r7, ip
 800c4d2:	189b      	adds	r3, r3, r2
 800c4d4:	3909      	subs	r1, #9
 800c4d6:	e7a3      	b.n	800c420 <_vfiprintf_r+0x124>
 800c4d8:	2301      	movs	r3, #1
 800c4da:	425b      	negs	r3, r3
 800c4dc:	e7ce      	b.n	800c47c <_vfiprintf_r+0x180>
 800c4de:	2300      	movs	r3, #0
 800c4e0:	001a      	movs	r2, r3
 800c4e2:	3701      	adds	r7, #1
 800c4e4:	606b      	str	r3, [r5, #4]
 800c4e6:	7839      	ldrb	r1, [r7, #0]
 800c4e8:	1c78      	adds	r0, r7, #1
 800c4ea:	3930      	subs	r1, #48	; 0x30
 800c4ec:	4684      	mov	ip, r0
 800c4ee:	2909      	cmp	r1, #9
 800c4f0:	d903      	bls.n	800c4fa <_vfiprintf_r+0x1fe>
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d0c3      	beq.n	800c47e <_vfiprintf_r+0x182>
 800c4f6:	9209      	str	r2, [sp, #36]	; 0x24
 800c4f8:	e7c1      	b.n	800c47e <_vfiprintf_r+0x182>
 800c4fa:	230a      	movs	r3, #10
 800c4fc:	435a      	muls	r2, r3
 800c4fe:	4667      	mov	r7, ip
 800c500:	1852      	adds	r2, r2, r1
 800c502:	3b09      	subs	r3, #9
 800c504:	e7ef      	b.n	800c4e6 <_vfiprintf_r+0x1ea>
 800c506:	ab07      	add	r3, sp, #28
 800c508:	9300      	str	r3, [sp, #0]
 800c50a:	0022      	movs	r2, r4
 800c50c:	0029      	movs	r1, r5
 800c50e:	0030      	movs	r0, r6
 800c510:	4b16      	ldr	r3, [pc, #88]	; (800c56c <_vfiprintf_r+0x270>)
 800c512:	f7fd fd4d 	bl	8009fb0 <_printf_float>
 800c516:	9004      	str	r0, [sp, #16]
 800c518:	9b04      	ldr	r3, [sp, #16]
 800c51a:	3301      	adds	r3, #1
 800c51c:	d1d1      	bne.n	800c4c2 <_vfiprintf_r+0x1c6>
 800c51e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c520:	07db      	lsls	r3, r3, #31
 800c522:	d405      	bmi.n	800c530 <_vfiprintf_r+0x234>
 800c524:	89a3      	ldrh	r3, [r4, #12]
 800c526:	059b      	lsls	r3, r3, #22
 800c528:	d402      	bmi.n	800c530 <_vfiprintf_r+0x234>
 800c52a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c52c:	f000 fad4 	bl	800cad8 <__retarget_lock_release_recursive>
 800c530:	89a3      	ldrh	r3, [r4, #12]
 800c532:	065b      	lsls	r3, r3, #25
 800c534:	d500      	bpl.n	800c538 <_vfiprintf_r+0x23c>
 800c536:	e70a      	b.n	800c34e <_vfiprintf_r+0x52>
 800c538:	980d      	ldr	r0, [sp, #52]	; 0x34
 800c53a:	e70a      	b.n	800c352 <_vfiprintf_r+0x56>
 800c53c:	ab07      	add	r3, sp, #28
 800c53e:	9300      	str	r3, [sp, #0]
 800c540:	0022      	movs	r2, r4
 800c542:	0029      	movs	r1, r5
 800c544:	0030      	movs	r0, r6
 800c546:	4b09      	ldr	r3, [pc, #36]	; (800c56c <_vfiprintf_r+0x270>)
 800c548:	f7fd ffe4 	bl	800a514 <_printf_i>
 800c54c:	e7e3      	b.n	800c516 <_vfiprintf_r+0x21a>
 800c54e:	46c0      	nop			; (mov r8, r8)
 800c550:	0800d374 	.word	0x0800d374
 800c554:	0800d394 	.word	0x0800d394
 800c558:	0800d354 	.word	0x0800d354
 800c55c:	0800d1fc 	.word	0x0800d1fc
 800c560:	0800d202 	.word	0x0800d202
 800c564:	0800d206 	.word	0x0800d206
 800c568:	08009fb1 	.word	0x08009fb1
 800c56c:	0800c2d9 	.word	0x0800c2d9

0800c570 <__swbuf_r>:
 800c570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c572:	0005      	movs	r5, r0
 800c574:	000e      	movs	r6, r1
 800c576:	0014      	movs	r4, r2
 800c578:	2800      	cmp	r0, #0
 800c57a:	d004      	beq.n	800c586 <__swbuf_r+0x16>
 800c57c:	6983      	ldr	r3, [r0, #24]
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d101      	bne.n	800c586 <__swbuf_r+0x16>
 800c582:	f000 fa07 	bl	800c994 <__sinit>
 800c586:	4b22      	ldr	r3, [pc, #136]	; (800c610 <__swbuf_r+0xa0>)
 800c588:	429c      	cmp	r4, r3
 800c58a:	d12e      	bne.n	800c5ea <__swbuf_r+0x7a>
 800c58c:	686c      	ldr	r4, [r5, #4]
 800c58e:	69a3      	ldr	r3, [r4, #24]
 800c590:	60a3      	str	r3, [r4, #8]
 800c592:	89a3      	ldrh	r3, [r4, #12]
 800c594:	071b      	lsls	r3, r3, #28
 800c596:	d532      	bpl.n	800c5fe <__swbuf_r+0x8e>
 800c598:	6923      	ldr	r3, [r4, #16]
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d02f      	beq.n	800c5fe <__swbuf_r+0x8e>
 800c59e:	6823      	ldr	r3, [r4, #0]
 800c5a0:	6922      	ldr	r2, [r4, #16]
 800c5a2:	b2f7      	uxtb	r7, r6
 800c5a4:	1a98      	subs	r0, r3, r2
 800c5a6:	6963      	ldr	r3, [r4, #20]
 800c5a8:	b2f6      	uxtb	r6, r6
 800c5aa:	4283      	cmp	r3, r0
 800c5ac:	dc05      	bgt.n	800c5ba <__swbuf_r+0x4a>
 800c5ae:	0021      	movs	r1, r4
 800c5b0:	0028      	movs	r0, r5
 800c5b2:	f000 f94d 	bl	800c850 <_fflush_r>
 800c5b6:	2800      	cmp	r0, #0
 800c5b8:	d127      	bne.n	800c60a <__swbuf_r+0x9a>
 800c5ba:	68a3      	ldr	r3, [r4, #8]
 800c5bc:	3001      	adds	r0, #1
 800c5be:	3b01      	subs	r3, #1
 800c5c0:	60a3      	str	r3, [r4, #8]
 800c5c2:	6823      	ldr	r3, [r4, #0]
 800c5c4:	1c5a      	adds	r2, r3, #1
 800c5c6:	6022      	str	r2, [r4, #0]
 800c5c8:	701f      	strb	r7, [r3, #0]
 800c5ca:	6963      	ldr	r3, [r4, #20]
 800c5cc:	4283      	cmp	r3, r0
 800c5ce:	d004      	beq.n	800c5da <__swbuf_r+0x6a>
 800c5d0:	89a3      	ldrh	r3, [r4, #12]
 800c5d2:	07db      	lsls	r3, r3, #31
 800c5d4:	d507      	bpl.n	800c5e6 <__swbuf_r+0x76>
 800c5d6:	2e0a      	cmp	r6, #10
 800c5d8:	d105      	bne.n	800c5e6 <__swbuf_r+0x76>
 800c5da:	0021      	movs	r1, r4
 800c5dc:	0028      	movs	r0, r5
 800c5de:	f000 f937 	bl	800c850 <_fflush_r>
 800c5e2:	2800      	cmp	r0, #0
 800c5e4:	d111      	bne.n	800c60a <__swbuf_r+0x9a>
 800c5e6:	0030      	movs	r0, r6
 800c5e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c5ea:	4b0a      	ldr	r3, [pc, #40]	; (800c614 <__swbuf_r+0xa4>)
 800c5ec:	429c      	cmp	r4, r3
 800c5ee:	d101      	bne.n	800c5f4 <__swbuf_r+0x84>
 800c5f0:	68ac      	ldr	r4, [r5, #8]
 800c5f2:	e7cc      	b.n	800c58e <__swbuf_r+0x1e>
 800c5f4:	4b08      	ldr	r3, [pc, #32]	; (800c618 <__swbuf_r+0xa8>)
 800c5f6:	429c      	cmp	r4, r3
 800c5f8:	d1c9      	bne.n	800c58e <__swbuf_r+0x1e>
 800c5fa:	68ec      	ldr	r4, [r5, #12]
 800c5fc:	e7c7      	b.n	800c58e <__swbuf_r+0x1e>
 800c5fe:	0021      	movs	r1, r4
 800c600:	0028      	movs	r0, r5
 800c602:	f000 f819 	bl	800c638 <__swsetup_r>
 800c606:	2800      	cmp	r0, #0
 800c608:	d0c9      	beq.n	800c59e <__swbuf_r+0x2e>
 800c60a:	2601      	movs	r6, #1
 800c60c:	4276      	negs	r6, r6
 800c60e:	e7ea      	b.n	800c5e6 <__swbuf_r+0x76>
 800c610:	0800d374 	.word	0x0800d374
 800c614:	0800d394 	.word	0x0800d394
 800c618:	0800d354 	.word	0x0800d354

0800c61c <__ascii_wctomb>:
 800c61c:	0003      	movs	r3, r0
 800c61e:	1e08      	subs	r0, r1, #0
 800c620:	d005      	beq.n	800c62e <__ascii_wctomb+0x12>
 800c622:	2aff      	cmp	r2, #255	; 0xff
 800c624:	d904      	bls.n	800c630 <__ascii_wctomb+0x14>
 800c626:	228a      	movs	r2, #138	; 0x8a
 800c628:	2001      	movs	r0, #1
 800c62a:	601a      	str	r2, [r3, #0]
 800c62c:	4240      	negs	r0, r0
 800c62e:	4770      	bx	lr
 800c630:	2001      	movs	r0, #1
 800c632:	700a      	strb	r2, [r1, #0]
 800c634:	e7fb      	b.n	800c62e <__ascii_wctomb+0x12>
	...

0800c638 <__swsetup_r>:
 800c638:	4b37      	ldr	r3, [pc, #220]	; (800c718 <__swsetup_r+0xe0>)
 800c63a:	b570      	push	{r4, r5, r6, lr}
 800c63c:	681d      	ldr	r5, [r3, #0]
 800c63e:	0006      	movs	r6, r0
 800c640:	000c      	movs	r4, r1
 800c642:	2d00      	cmp	r5, #0
 800c644:	d005      	beq.n	800c652 <__swsetup_r+0x1a>
 800c646:	69ab      	ldr	r3, [r5, #24]
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d102      	bne.n	800c652 <__swsetup_r+0x1a>
 800c64c:	0028      	movs	r0, r5
 800c64e:	f000 f9a1 	bl	800c994 <__sinit>
 800c652:	4b32      	ldr	r3, [pc, #200]	; (800c71c <__swsetup_r+0xe4>)
 800c654:	429c      	cmp	r4, r3
 800c656:	d10f      	bne.n	800c678 <__swsetup_r+0x40>
 800c658:	686c      	ldr	r4, [r5, #4]
 800c65a:	230c      	movs	r3, #12
 800c65c:	5ee2      	ldrsh	r2, [r4, r3]
 800c65e:	b293      	uxth	r3, r2
 800c660:	0711      	lsls	r1, r2, #28
 800c662:	d42d      	bmi.n	800c6c0 <__swsetup_r+0x88>
 800c664:	06d9      	lsls	r1, r3, #27
 800c666:	d411      	bmi.n	800c68c <__swsetup_r+0x54>
 800c668:	2309      	movs	r3, #9
 800c66a:	2001      	movs	r0, #1
 800c66c:	6033      	str	r3, [r6, #0]
 800c66e:	3337      	adds	r3, #55	; 0x37
 800c670:	4313      	orrs	r3, r2
 800c672:	81a3      	strh	r3, [r4, #12]
 800c674:	4240      	negs	r0, r0
 800c676:	bd70      	pop	{r4, r5, r6, pc}
 800c678:	4b29      	ldr	r3, [pc, #164]	; (800c720 <__swsetup_r+0xe8>)
 800c67a:	429c      	cmp	r4, r3
 800c67c:	d101      	bne.n	800c682 <__swsetup_r+0x4a>
 800c67e:	68ac      	ldr	r4, [r5, #8]
 800c680:	e7eb      	b.n	800c65a <__swsetup_r+0x22>
 800c682:	4b28      	ldr	r3, [pc, #160]	; (800c724 <__swsetup_r+0xec>)
 800c684:	429c      	cmp	r4, r3
 800c686:	d1e8      	bne.n	800c65a <__swsetup_r+0x22>
 800c688:	68ec      	ldr	r4, [r5, #12]
 800c68a:	e7e6      	b.n	800c65a <__swsetup_r+0x22>
 800c68c:	075b      	lsls	r3, r3, #29
 800c68e:	d513      	bpl.n	800c6b8 <__swsetup_r+0x80>
 800c690:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c692:	2900      	cmp	r1, #0
 800c694:	d008      	beq.n	800c6a8 <__swsetup_r+0x70>
 800c696:	0023      	movs	r3, r4
 800c698:	3344      	adds	r3, #68	; 0x44
 800c69a:	4299      	cmp	r1, r3
 800c69c:	d002      	beq.n	800c6a4 <__swsetup_r+0x6c>
 800c69e:	0030      	movs	r0, r6
 800c6a0:	f7ff fb1c 	bl	800bcdc <_free_r>
 800c6a4:	2300      	movs	r3, #0
 800c6a6:	6363      	str	r3, [r4, #52]	; 0x34
 800c6a8:	2224      	movs	r2, #36	; 0x24
 800c6aa:	89a3      	ldrh	r3, [r4, #12]
 800c6ac:	4393      	bics	r3, r2
 800c6ae:	81a3      	strh	r3, [r4, #12]
 800c6b0:	2300      	movs	r3, #0
 800c6b2:	6063      	str	r3, [r4, #4]
 800c6b4:	6923      	ldr	r3, [r4, #16]
 800c6b6:	6023      	str	r3, [r4, #0]
 800c6b8:	2308      	movs	r3, #8
 800c6ba:	89a2      	ldrh	r2, [r4, #12]
 800c6bc:	4313      	orrs	r3, r2
 800c6be:	81a3      	strh	r3, [r4, #12]
 800c6c0:	6923      	ldr	r3, [r4, #16]
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d10b      	bne.n	800c6de <__swsetup_r+0xa6>
 800c6c6:	21a0      	movs	r1, #160	; 0xa0
 800c6c8:	2280      	movs	r2, #128	; 0x80
 800c6ca:	89a3      	ldrh	r3, [r4, #12]
 800c6cc:	0089      	lsls	r1, r1, #2
 800c6ce:	0092      	lsls	r2, r2, #2
 800c6d0:	400b      	ands	r3, r1
 800c6d2:	4293      	cmp	r3, r2
 800c6d4:	d003      	beq.n	800c6de <__swsetup_r+0xa6>
 800c6d6:	0021      	movs	r1, r4
 800c6d8:	0030      	movs	r0, r6
 800c6da:	f000 fa27 	bl	800cb2c <__smakebuf_r>
 800c6de:	220c      	movs	r2, #12
 800c6e0:	5ea3      	ldrsh	r3, [r4, r2]
 800c6e2:	2001      	movs	r0, #1
 800c6e4:	001a      	movs	r2, r3
 800c6e6:	b299      	uxth	r1, r3
 800c6e8:	4002      	ands	r2, r0
 800c6ea:	4203      	tst	r3, r0
 800c6ec:	d00f      	beq.n	800c70e <__swsetup_r+0xd6>
 800c6ee:	2200      	movs	r2, #0
 800c6f0:	60a2      	str	r2, [r4, #8]
 800c6f2:	6962      	ldr	r2, [r4, #20]
 800c6f4:	4252      	negs	r2, r2
 800c6f6:	61a2      	str	r2, [r4, #24]
 800c6f8:	2000      	movs	r0, #0
 800c6fa:	6922      	ldr	r2, [r4, #16]
 800c6fc:	4282      	cmp	r2, r0
 800c6fe:	d1ba      	bne.n	800c676 <__swsetup_r+0x3e>
 800c700:	060a      	lsls	r2, r1, #24
 800c702:	d5b8      	bpl.n	800c676 <__swsetup_r+0x3e>
 800c704:	2240      	movs	r2, #64	; 0x40
 800c706:	4313      	orrs	r3, r2
 800c708:	81a3      	strh	r3, [r4, #12]
 800c70a:	3801      	subs	r0, #1
 800c70c:	e7b3      	b.n	800c676 <__swsetup_r+0x3e>
 800c70e:	0788      	lsls	r0, r1, #30
 800c710:	d400      	bmi.n	800c714 <__swsetup_r+0xdc>
 800c712:	6962      	ldr	r2, [r4, #20]
 800c714:	60a2      	str	r2, [r4, #8]
 800c716:	e7ef      	b.n	800c6f8 <__swsetup_r+0xc0>
 800c718:	20000010 	.word	0x20000010
 800c71c:	0800d374 	.word	0x0800d374
 800c720:	0800d394 	.word	0x0800d394
 800c724:	0800d354 	.word	0x0800d354

0800c728 <abort>:
 800c728:	2006      	movs	r0, #6
 800c72a:	b510      	push	{r4, lr}
 800c72c:	f000 fa74 	bl	800cc18 <raise>
 800c730:	2001      	movs	r0, #1
 800c732:	f7f7 fa61 	bl	8003bf8 <_exit>
	...

0800c738 <__sflush_r>:
 800c738:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c73a:	898b      	ldrh	r3, [r1, #12]
 800c73c:	0005      	movs	r5, r0
 800c73e:	000c      	movs	r4, r1
 800c740:	071a      	lsls	r2, r3, #28
 800c742:	d45f      	bmi.n	800c804 <__sflush_r+0xcc>
 800c744:	684a      	ldr	r2, [r1, #4]
 800c746:	2a00      	cmp	r2, #0
 800c748:	dc04      	bgt.n	800c754 <__sflush_r+0x1c>
 800c74a:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800c74c:	2a00      	cmp	r2, #0
 800c74e:	dc01      	bgt.n	800c754 <__sflush_r+0x1c>
 800c750:	2000      	movs	r0, #0
 800c752:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c754:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800c756:	2f00      	cmp	r7, #0
 800c758:	d0fa      	beq.n	800c750 <__sflush_r+0x18>
 800c75a:	2200      	movs	r2, #0
 800c75c:	2180      	movs	r1, #128	; 0x80
 800c75e:	682e      	ldr	r6, [r5, #0]
 800c760:	602a      	str	r2, [r5, #0]
 800c762:	001a      	movs	r2, r3
 800c764:	0149      	lsls	r1, r1, #5
 800c766:	400a      	ands	r2, r1
 800c768:	420b      	tst	r3, r1
 800c76a:	d034      	beq.n	800c7d6 <__sflush_r+0x9e>
 800c76c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c76e:	89a3      	ldrh	r3, [r4, #12]
 800c770:	075b      	lsls	r3, r3, #29
 800c772:	d506      	bpl.n	800c782 <__sflush_r+0x4a>
 800c774:	6863      	ldr	r3, [r4, #4]
 800c776:	1ac0      	subs	r0, r0, r3
 800c778:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d001      	beq.n	800c782 <__sflush_r+0x4a>
 800c77e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c780:	1ac0      	subs	r0, r0, r3
 800c782:	0002      	movs	r2, r0
 800c784:	6a21      	ldr	r1, [r4, #32]
 800c786:	2300      	movs	r3, #0
 800c788:	0028      	movs	r0, r5
 800c78a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800c78c:	47b8      	blx	r7
 800c78e:	89a1      	ldrh	r1, [r4, #12]
 800c790:	1c43      	adds	r3, r0, #1
 800c792:	d106      	bne.n	800c7a2 <__sflush_r+0x6a>
 800c794:	682b      	ldr	r3, [r5, #0]
 800c796:	2b1d      	cmp	r3, #29
 800c798:	d831      	bhi.n	800c7fe <__sflush_r+0xc6>
 800c79a:	4a2c      	ldr	r2, [pc, #176]	; (800c84c <__sflush_r+0x114>)
 800c79c:	40da      	lsrs	r2, r3
 800c79e:	07d3      	lsls	r3, r2, #31
 800c7a0:	d52d      	bpl.n	800c7fe <__sflush_r+0xc6>
 800c7a2:	2300      	movs	r3, #0
 800c7a4:	6063      	str	r3, [r4, #4]
 800c7a6:	6923      	ldr	r3, [r4, #16]
 800c7a8:	6023      	str	r3, [r4, #0]
 800c7aa:	04cb      	lsls	r3, r1, #19
 800c7ac:	d505      	bpl.n	800c7ba <__sflush_r+0x82>
 800c7ae:	1c43      	adds	r3, r0, #1
 800c7b0:	d102      	bne.n	800c7b8 <__sflush_r+0x80>
 800c7b2:	682b      	ldr	r3, [r5, #0]
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d100      	bne.n	800c7ba <__sflush_r+0x82>
 800c7b8:	6560      	str	r0, [r4, #84]	; 0x54
 800c7ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c7bc:	602e      	str	r6, [r5, #0]
 800c7be:	2900      	cmp	r1, #0
 800c7c0:	d0c6      	beq.n	800c750 <__sflush_r+0x18>
 800c7c2:	0023      	movs	r3, r4
 800c7c4:	3344      	adds	r3, #68	; 0x44
 800c7c6:	4299      	cmp	r1, r3
 800c7c8:	d002      	beq.n	800c7d0 <__sflush_r+0x98>
 800c7ca:	0028      	movs	r0, r5
 800c7cc:	f7ff fa86 	bl	800bcdc <_free_r>
 800c7d0:	2000      	movs	r0, #0
 800c7d2:	6360      	str	r0, [r4, #52]	; 0x34
 800c7d4:	e7bd      	b.n	800c752 <__sflush_r+0x1a>
 800c7d6:	2301      	movs	r3, #1
 800c7d8:	0028      	movs	r0, r5
 800c7da:	6a21      	ldr	r1, [r4, #32]
 800c7dc:	47b8      	blx	r7
 800c7de:	1c43      	adds	r3, r0, #1
 800c7e0:	d1c5      	bne.n	800c76e <__sflush_r+0x36>
 800c7e2:	682b      	ldr	r3, [r5, #0]
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d0c2      	beq.n	800c76e <__sflush_r+0x36>
 800c7e8:	2b1d      	cmp	r3, #29
 800c7ea:	d001      	beq.n	800c7f0 <__sflush_r+0xb8>
 800c7ec:	2b16      	cmp	r3, #22
 800c7ee:	d101      	bne.n	800c7f4 <__sflush_r+0xbc>
 800c7f0:	602e      	str	r6, [r5, #0]
 800c7f2:	e7ad      	b.n	800c750 <__sflush_r+0x18>
 800c7f4:	2340      	movs	r3, #64	; 0x40
 800c7f6:	89a2      	ldrh	r2, [r4, #12]
 800c7f8:	4313      	orrs	r3, r2
 800c7fa:	81a3      	strh	r3, [r4, #12]
 800c7fc:	e7a9      	b.n	800c752 <__sflush_r+0x1a>
 800c7fe:	2340      	movs	r3, #64	; 0x40
 800c800:	430b      	orrs	r3, r1
 800c802:	e7fa      	b.n	800c7fa <__sflush_r+0xc2>
 800c804:	690f      	ldr	r7, [r1, #16]
 800c806:	2f00      	cmp	r7, #0
 800c808:	d0a2      	beq.n	800c750 <__sflush_r+0x18>
 800c80a:	680a      	ldr	r2, [r1, #0]
 800c80c:	600f      	str	r7, [r1, #0]
 800c80e:	1bd2      	subs	r2, r2, r7
 800c810:	9201      	str	r2, [sp, #4]
 800c812:	2200      	movs	r2, #0
 800c814:	079b      	lsls	r3, r3, #30
 800c816:	d100      	bne.n	800c81a <__sflush_r+0xe2>
 800c818:	694a      	ldr	r2, [r1, #20]
 800c81a:	60a2      	str	r2, [r4, #8]
 800c81c:	9b01      	ldr	r3, [sp, #4]
 800c81e:	2b00      	cmp	r3, #0
 800c820:	dc00      	bgt.n	800c824 <__sflush_r+0xec>
 800c822:	e795      	b.n	800c750 <__sflush_r+0x18>
 800c824:	003a      	movs	r2, r7
 800c826:	0028      	movs	r0, r5
 800c828:	9b01      	ldr	r3, [sp, #4]
 800c82a:	6a21      	ldr	r1, [r4, #32]
 800c82c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c82e:	47b0      	blx	r6
 800c830:	2800      	cmp	r0, #0
 800c832:	dc06      	bgt.n	800c842 <__sflush_r+0x10a>
 800c834:	2340      	movs	r3, #64	; 0x40
 800c836:	2001      	movs	r0, #1
 800c838:	89a2      	ldrh	r2, [r4, #12]
 800c83a:	4240      	negs	r0, r0
 800c83c:	4313      	orrs	r3, r2
 800c83e:	81a3      	strh	r3, [r4, #12]
 800c840:	e787      	b.n	800c752 <__sflush_r+0x1a>
 800c842:	9b01      	ldr	r3, [sp, #4]
 800c844:	183f      	adds	r7, r7, r0
 800c846:	1a1b      	subs	r3, r3, r0
 800c848:	9301      	str	r3, [sp, #4]
 800c84a:	e7e7      	b.n	800c81c <__sflush_r+0xe4>
 800c84c:	20400001 	.word	0x20400001

0800c850 <_fflush_r>:
 800c850:	690b      	ldr	r3, [r1, #16]
 800c852:	b570      	push	{r4, r5, r6, lr}
 800c854:	0005      	movs	r5, r0
 800c856:	000c      	movs	r4, r1
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d102      	bne.n	800c862 <_fflush_r+0x12>
 800c85c:	2500      	movs	r5, #0
 800c85e:	0028      	movs	r0, r5
 800c860:	bd70      	pop	{r4, r5, r6, pc}
 800c862:	2800      	cmp	r0, #0
 800c864:	d004      	beq.n	800c870 <_fflush_r+0x20>
 800c866:	6983      	ldr	r3, [r0, #24]
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d101      	bne.n	800c870 <_fflush_r+0x20>
 800c86c:	f000 f892 	bl	800c994 <__sinit>
 800c870:	4b14      	ldr	r3, [pc, #80]	; (800c8c4 <_fflush_r+0x74>)
 800c872:	429c      	cmp	r4, r3
 800c874:	d11b      	bne.n	800c8ae <_fflush_r+0x5e>
 800c876:	686c      	ldr	r4, [r5, #4]
 800c878:	220c      	movs	r2, #12
 800c87a:	5ea3      	ldrsh	r3, [r4, r2]
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d0ed      	beq.n	800c85c <_fflush_r+0xc>
 800c880:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c882:	07d2      	lsls	r2, r2, #31
 800c884:	d404      	bmi.n	800c890 <_fflush_r+0x40>
 800c886:	059b      	lsls	r3, r3, #22
 800c888:	d402      	bmi.n	800c890 <_fflush_r+0x40>
 800c88a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c88c:	f000 f923 	bl	800cad6 <__retarget_lock_acquire_recursive>
 800c890:	0028      	movs	r0, r5
 800c892:	0021      	movs	r1, r4
 800c894:	f7ff ff50 	bl	800c738 <__sflush_r>
 800c898:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c89a:	0005      	movs	r5, r0
 800c89c:	07db      	lsls	r3, r3, #31
 800c89e:	d4de      	bmi.n	800c85e <_fflush_r+0xe>
 800c8a0:	89a3      	ldrh	r3, [r4, #12]
 800c8a2:	059b      	lsls	r3, r3, #22
 800c8a4:	d4db      	bmi.n	800c85e <_fflush_r+0xe>
 800c8a6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c8a8:	f000 f916 	bl	800cad8 <__retarget_lock_release_recursive>
 800c8ac:	e7d7      	b.n	800c85e <_fflush_r+0xe>
 800c8ae:	4b06      	ldr	r3, [pc, #24]	; (800c8c8 <_fflush_r+0x78>)
 800c8b0:	429c      	cmp	r4, r3
 800c8b2:	d101      	bne.n	800c8b8 <_fflush_r+0x68>
 800c8b4:	68ac      	ldr	r4, [r5, #8]
 800c8b6:	e7df      	b.n	800c878 <_fflush_r+0x28>
 800c8b8:	4b04      	ldr	r3, [pc, #16]	; (800c8cc <_fflush_r+0x7c>)
 800c8ba:	429c      	cmp	r4, r3
 800c8bc:	d1dc      	bne.n	800c878 <_fflush_r+0x28>
 800c8be:	68ec      	ldr	r4, [r5, #12]
 800c8c0:	e7da      	b.n	800c878 <_fflush_r+0x28>
 800c8c2:	46c0      	nop			; (mov r8, r8)
 800c8c4:	0800d374 	.word	0x0800d374
 800c8c8:	0800d394 	.word	0x0800d394
 800c8cc:	0800d354 	.word	0x0800d354

0800c8d0 <std>:
 800c8d0:	2300      	movs	r3, #0
 800c8d2:	b510      	push	{r4, lr}
 800c8d4:	0004      	movs	r4, r0
 800c8d6:	6003      	str	r3, [r0, #0]
 800c8d8:	6043      	str	r3, [r0, #4]
 800c8da:	6083      	str	r3, [r0, #8]
 800c8dc:	8181      	strh	r1, [r0, #12]
 800c8de:	6643      	str	r3, [r0, #100]	; 0x64
 800c8e0:	0019      	movs	r1, r3
 800c8e2:	81c2      	strh	r2, [r0, #14]
 800c8e4:	6103      	str	r3, [r0, #16]
 800c8e6:	6143      	str	r3, [r0, #20]
 800c8e8:	6183      	str	r3, [r0, #24]
 800c8ea:	2208      	movs	r2, #8
 800c8ec:	305c      	adds	r0, #92	; 0x5c
 800c8ee:	f7fd faad 	bl	8009e4c <memset>
 800c8f2:	4b05      	ldr	r3, [pc, #20]	; (800c908 <std+0x38>)
 800c8f4:	6224      	str	r4, [r4, #32]
 800c8f6:	6263      	str	r3, [r4, #36]	; 0x24
 800c8f8:	4b04      	ldr	r3, [pc, #16]	; (800c90c <std+0x3c>)
 800c8fa:	62a3      	str	r3, [r4, #40]	; 0x28
 800c8fc:	4b04      	ldr	r3, [pc, #16]	; (800c910 <std+0x40>)
 800c8fe:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c900:	4b04      	ldr	r3, [pc, #16]	; (800c914 <std+0x44>)
 800c902:	6323      	str	r3, [r4, #48]	; 0x30
 800c904:	bd10      	pop	{r4, pc}
 800c906:	46c0      	nop			; (mov r8, r8)
 800c908:	0800cc59 	.word	0x0800cc59
 800c90c:	0800cc81 	.word	0x0800cc81
 800c910:	0800ccb9 	.word	0x0800ccb9
 800c914:	0800cce5 	.word	0x0800cce5

0800c918 <_cleanup_r>:
 800c918:	b510      	push	{r4, lr}
 800c91a:	4902      	ldr	r1, [pc, #8]	; (800c924 <_cleanup_r+0xc>)
 800c91c:	f000 f8ba 	bl	800ca94 <_fwalk_reent>
 800c920:	bd10      	pop	{r4, pc}
 800c922:	46c0      	nop			; (mov r8, r8)
 800c924:	0800c851 	.word	0x0800c851

0800c928 <__sfmoreglue>:
 800c928:	b570      	push	{r4, r5, r6, lr}
 800c92a:	2568      	movs	r5, #104	; 0x68
 800c92c:	1e4a      	subs	r2, r1, #1
 800c92e:	4355      	muls	r5, r2
 800c930:	000e      	movs	r6, r1
 800c932:	0029      	movs	r1, r5
 800c934:	3174      	adds	r1, #116	; 0x74
 800c936:	f7ff fa3d 	bl	800bdb4 <_malloc_r>
 800c93a:	1e04      	subs	r4, r0, #0
 800c93c:	d008      	beq.n	800c950 <__sfmoreglue+0x28>
 800c93e:	2100      	movs	r1, #0
 800c940:	002a      	movs	r2, r5
 800c942:	6001      	str	r1, [r0, #0]
 800c944:	6046      	str	r6, [r0, #4]
 800c946:	300c      	adds	r0, #12
 800c948:	60a0      	str	r0, [r4, #8]
 800c94a:	3268      	adds	r2, #104	; 0x68
 800c94c:	f7fd fa7e 	bl	8009e4c <memset>
 800c950:	0020      	movs	r0, r4
 800c952:	bd70      	pop	{r4, r5, r6, pc}

0800c954 <__sfp_lock_acquire>:
 800c954:	b510      	push	{r4, lr}
 800c956:	4802      	ldr	r0, [pc, #8]	; (800c960 <__sfp_lock_acquire+0xc>)
 800c958:	f000 f8bd 	bl	800cad6 <__retarget_lock_acquire_recursive>
 800c95c:	bd10      	pop	{r4, pc}
 800c95e:	46c0      	nop			; (mov r8, r8)
 800c960:	200005e9 	.word	0x200005e9

0800c964 <__sfp_lock_release>:
 800c964:	b510      	push	{r4, lr}
 800c966:	4802      	ldr	r0, [pc, #8]	; (800c970 <__sfp_lock_release+0xc>)
 800c968:	f000 f8b6 	bl	800cad8 <__retarget_lock_release_recursive>
 800c96c:	bd10      	pop	{r4, pc}
 800c96e:	46c0      	nop			; (mov r8, r8)
 800c970:	200005e9 	.word	0x200005e9

0800c974 <__sinit_lock_acquire>:
 800c974:	b510      	push	{r4, lr}
 800c976:	4802      	ldr	r0, [pc, #8]	; (800c980 <__sinit_lock_acquire+0xc>)
 800c978:	f000 f8ad 	bl	800cad6 <__retarget_lock_acquire_recursive>
 800c97c:	bd10      	pop	{r4, pc}
 800c97e:	46c0      	nop			; (mov r8, r8)
 800c980:	200005ea 	.word	0x200005ea

0800c984 <__sinit_lock_release>:
 800c984:	b510      	push	{r4, lr}
 800c986:	4802      	ldr	r0, [pc, #8]	; (800c990 <__sinit_lock_release+0xc>)
 800c988:	f000 f8a6 	bl	800cad8 <__retarget_lock_release_recursive>
 800c98c:	bd10      	pop	{r4, pc}
 800c98e:	46c0      	nop			; (mov r8, r8)
 800c990:	200005ea 	.word	0x200005ea

0800c994 <__sinit>:
 800c994:	b513      	push	{r0, r1, r4, lr}
 800c996:	0004      	movs	r4, r0
 800c998:	f7ff ffec 	bl	800c974 <__sinit_lock_acquire>
 800c99c:	69a3      	ldr	r3, [r4, #24]
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d002      	beq.n	800c9a8 <__sinit+0x14>
 800c9a2:	f7ff ffef 	bl	800c984 <__sinit_lock_release>
 800c9a6:	bd13      	pop	{r0, r1, r4, pc}
 800c9a8:	64a3      	str	r3, [r4, #72]	; 0x48
 800c9aa:	64e3      	str	r3, [r4, #76]	; 0x4c
 800c9ac:	6523      	str	r3, [r4, #80]	; 0x50
 800c9ae:	4b13      	ldr	r3, [pc, #76]	; (800c9fc <__sinit+0x68>)
 800c9b0:	4a13      	ldr	r2, [pc, #76]	; (800ca00 <__sinit+0x6c>)
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	62a2      	str	r2, [r4, #40]	; 0x28
 800c9b6:	9301      	str	r3, [sp, #4]
 800c9b8:	42a3      	cmp	r3, r4
 800c9ba:	d101      	bne.n	800c9c0 <__sinit+0x2c>
 800c9bc:	2301      	movs	r3, #1
 800c9be:	61a3      	str	r3, [r4, #24]
 800c9c0:	0020      	movs	r0, r4
 800c9c2:	f000 f81f 	bl	800ca04 <__sfp>
 800c9c6:	6060      	str	r0, [r4, #4]
 800c9c8:	0020      	movs	r0, r4
 800c9ca:	f000 f81b 	bl	800ca04 <__sfp>
 800c9ce:	60a0      	str	r0, [r4, #8]
 800c9d0:	0020      	movs	r0, r4
 800c9d2:	f000 f817 	bl	800ca04 <__sfp>
 800c9d6:	2200      	movs	r2, #0
 800c9d8:	2104      	movs	r1, #4
 800c9da:	60e0      	str	r0, [r4, #12]
 800c9dc:	6860      	ldr	r0, [r4, #4]
 800c9de:	f7ff ff77 	bl	800c8d0 <std>
 800c9e2:	2201      	movs	r2, #1
 800c9e4:	2109      	movs	r1, #9
 800c9e6:	68a0      	ldr	r0, [r4, #8]
 800c9e8:	f7ff ff72 	bl	800c8d0 <std>
 800c9ec:	2202      	movs	r2, #2
 800c9ee:	2112      	movs	r1, #18
 800c9f0:	68e0      	ldr	r0, [r4, #12]
 800c9f2:	f7ff ff6d 	bl	800c8d0 <std>
 800c9f6:	2301      	movs	r3, #1
 800c9f8:	61a3      	str	r3, [r4, #24]
 800c9fa:	e7d2      	b.n	800c9a2 <__sinit+0xe>
 800c9fc:	0800cfd8 	.word	0x0800cfd8
 800ca00:	0800c919 	.word	0x0800c919

0800ca04 <__sfp>:
 800ca04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca06:	0007      	movs	r7, r0
 800ca08:	f7ff ffa4 	bl	800c954 <__sfp_lock_acquire>
 800ca0c:	4b1f      	ldr	r3, [pc, #124]	; (800ca8c <__sfp+0x88>)
 800ca0e:	681e      	ldr	r6, [r3, #0]
 800ca10:	69b3      	ldr	r3, [r6, #24]
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d102      	bne.n	800ca1c <__sfp+0x18>
 800ca16:	0030      	movs	r0, r6
 800ca18:	f7ff ffbc 	bl	800c994 <__sinit>
 800ca1c:	3648      	adds	r6, #72	; 0x48
 800ca1e:	68b4      	ldr	r4, [r6, #8]
 800ca20:	6873      	ldr	r3, [r6, #4]
 800ca22:	3b01      	subs	r3, #1
 800ca24:	d504      	bpl.n	800ca30 <__sfp+0x2c>
 800ca26:	6833      	ldr	r3, [r6, #0]
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d022      	beq.n	800ca72 <__sfp+0x6e>
 800ca2c:	6836      	ldr	r6, [r6, #0]
 800ca2e:	e7f6      	b.n	800ca1e <__sfp+0x1a>
 800ca30:	220c      	movs	r2, #12
 800ca32:	5ea5      	ldrsh	r5, [r4, r2]
 800ca34:	2d00      	cmp	r5, #0
 800ca36:	d11a      	bne.n	800ca6e <__sfp+0x6a>
 800ca38:	0020      	movs	r0, r4
 800ca3a:	4b15      	ldr	r3, [pc, #84]	; (800ca90 <__sfp+0x8c>)
 800ca3c:	3058      	adds	r0, #88	; 0x58
 800ca3e:	60e3      	str	r3, [r4, #12]
 800ca40:	6665      	str	r5, [r4, #100]	; 0x64
 800ca42:	f000 f847 	bl	800cad4 <__retarget_lock_init_recursive>
 800ca46:	f7ff ff8d 	bl	800c964 <__sfp_lock_release>
 800ca4a:	0020      	movs	r0, r4
 800ca4c:	2208      	movs	r2, #8
 800ca4e:	0029      	movs	r1, r5
 800ca50:	6025      	str	r5, [r4, #0]
 800ca52:	60a5      	str	r5, [r4, #8]
 800ca54:	6065      	str	r5, [r4, #4]
 800ca56:	6125      	str	r5, [r4, #16]
 800ca58:	6165      	str	r5, [r4, #20]
 800ca5a:	61a5      	str	r5, [r4, #24]
 800ca5c:	305c      	adds	r0, #92	; 0x5c
 800ca5e:	f7fd f9f5 	bl	8009e4c <memset>
 800ca62:	6365      	str	r5, [r4, #52]	; 0x34
 800ca64:	63a5      	str	r5, [r4, #56]	; 0x38
 800ca66:	64a5      	str	r5, [r4, #72]	; 0x48
 800ca68:	64e5      	str	r5, [r4, #76]	; 0x4c
 800ca6a:	0020      	movs	r0, r4
 800ca6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ca6e:	3468      	adds	r4, #104	; 0x68
 800ca70:	e7d7      	b.n	800ca22 <__sfp+0x1e>
 800ca72:	2104      	movs	r1, #4
 800ca74:	0038      	movs	r0, r7
 800ca76:	f7ff ff57 	bl	800c928 <__sfmoreglue>
 800ca7a:	1e04      	subs	r4, r0, #0
 800ca7c:	6030      	str	r0, [r6, #0]
 800ca7e:	d1d5      	bne.n	800ca2c <__sfp+0x28>
 800ca80:	f7ff ff70 	bl	800c964 <__sfp_lock_release>
 800ca84:	230c      	movs	r3, #12
 800ca86:	603b      	str	r3, [r7, #0]
 800ca88:	e7ef      	b.n	800ca6a <__sfp+0x66>
 800ca8a:	46c0      	nop			; (mov r8, r8)
 800ca8c:	0800cfd8 	.word	0x0800cfd8
 800ca90:	ffff0001 	.word	0xffff0001

0800ca94 <_fwalk_reent>:
 800ca94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ca96:	0004      	movs	r4, r0
 800ca98:	0006      	movs	r6, r0
 800ca9a:	2700      	movs	r7, #0
 800ca9c:	9101      	str	r1, [sp, #4]
 800ca9e:	3448      	adds	r4, #72	; 0x48
 800caa0:	6863      	ldr	r3, [r4, #4]
 800caa2:	68a5      	ldr	r5, [r4, #8]
 800caa4:	9300      	str	r3, [sp, #0]
 800caa6:	9b00      	ldr	r3, [sp, #0]
 800caa8:	3b01      	subs	r3, #1
 800caaa:	9300      	str	r3, [sp, #0]
 800caac:	d504      	bpl.n	800cab8 <_fwalk_reent+0x24>
 800caae:	6824      	ldr	r4, [r4, #0]
 800cab0:	2c00      	cmp	r4, #0
 800cab2:	d1f5      	bne.n	800caa0 <_fwalk_reent+0xc>
 800cab4:	0038      	movs	r0, r7
 800cab6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800cab8:	89ab      	ldrh	r3, [r5, #12]
 800caba:	2b01      	cmp	r3, #1
 800cabc:	d908      	bls.n	800cad0 <_fwalk_reent+0x3c>
 800cabe:	220e      	movs	r2, #14
 800cac0:	5eab      	ldrsh	r3, [r5, r2]
 800cac2:	3301      	adds	r3, #1
 800cac4:	d004      	beq.n	800cad0 <_fwalk_reent+0x3c>
 800cac6:	0029      	movs	r1, r5
 800cac8:	0030      	movs	r0, r6
 800caca:	9b01      	ldr	r3, [sp, #4]
 800cacc:	4798      	blx	r3
 800cace:	4307      	orrs	r7, r0
 800cad0:	3568      	adds	r5, #104	; 0x68
 800cad2:	e7e8      	b.n	800caa6 <_fwalk_reent+0x12>

0800cad4 <__retarget_lock_init_recursive>:
 800cad4:	4770      	bx	lr

0800cad6 <__retarget_lock_acquire_recursive>:
 800cad6:	4770      	bx	lr

0800cad8 <__retarget_lock_release_recursive>:
 800cad8:	4770      	bx	lr
	...

0800cadc <__swhatbuf_r>:
 800cadc:	b570      	push	{r4, r5, r6, lr}
 800cade:	000e      	movs	r6, r1
 800cae0:	001d      	movs	r5, r3
 800cae2:	230e      	movs	r3, #14
 800cae4:	5ec9      	ldrsh	r1, [r1, r3]
 800cae6:	0014      	movs	r4, r2
 800cae8:	b096      	sub	sp, #88	; 0x58
 800caea:	2900      	cmp	r1, #0
 800caec:	da08      	bge.n	800cb00 <__swhatbuf_r+0x24>
 800caee:	220c      	movs	r2, #12
 800caf0:	5eb3      	ldrsh	r3, [r6, r2]
 800caf2:	2200      	movs	r2, #0
 800caf4:	602a      	str	r2, [r5, #0]
 800caf6:	061b      	lsls	r3, r3, #24
 800caf8:	d411      	bmi.n	800cb1e <__swhatbuf_r+0x42>
 800cafa:	2380      	movs	r3, #128	; 0x80
 800cafc:	00db      	lsls	r3, r3, #3
 800cafe:	e00f      	b.n	800cb20 <__swhatbuf_r+0x44>
 800cb00:	466a      	mov	r2, sp
 800cb02:	f000 f91b 	bl	800cd3c <_fstat_r>
 800cb06:	2800      	cmp	r0, #0
 800cb08:	dbf1      	blt.n	800caee <__swhatbuf_r+0x12>
 800cb0a:	23f0      	movs	r3, #240	; 0xf0
 800cb0c:	9901      	ldr	r1, [sp, #4]
 800cb0e:	021b      	lsls	r3, r3, #8
 800cb10:	4019      	ands	r1, r3
 800cb12:	4b05      	ldr	r3, [pc, #20]	; (800cb28 <__swhatbuf_r+0x4c>)
 800cb14:	18c9      	adds	r1, r1, r3
 800cb16:	424b      	negs	r3, r1
 800cb18:	4159      	adcs	r1, r3
 800cb1a:	6029      	str	r1, [r5, #0]
 800cb1c:	e7ed      	b.n	800cafa <__swhatbuf_r+0x1e>
 800cb1e:	2340      	movs	r3, #64	; 0x40
 800cb20:	2000      	movs	r0, #0
 800cb22:	6023      	str	r3, [r4, #0]
 800cb24:	b016      	add	sp, #88	; 0x58
 800cb26:	bd70      	pop	{r4, r5, r6, pc}
 800cb28:	ffffe000 	.word	0xffffe000

0800cb2c <__smakebuf_r>:
 800cb2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cb2e:	2602      	movs	r6, #2
 800cb30:	898b      	ldrh	r3, [r1, #12]
 800cb32:	0005      	movs	r5, r0
 800cb34:	000c      	movs	r4, r1
 800cb36:	4233      	tst	r3, r6
 800cb38:	d006      	beq.n	800cb48 <__smakebuf_r+0x1c>
 800cb3a:	0023      	movs	r3, r4
 800cb3c:	3347      	adds	r3, #71	; 0x47
 800cb3e:	6023      	str	r3, [r4, #0]
 800cb40:	6123      	str	r3, [r4, #16]
 800cb42:	2301      	movs	r3, #1
 800cb44:	6163      	str	r3, [r4, #20]
 800cb46:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800cb48:	466a      	mov	r2, sp
 800cb4a:	ab01      	add	r3, sp, #4
 800cb4c:	f7ff ffc6 	bl	800cadc <__swhatbuf_r>
 800cb50:	9900      	ldr	r1, [sp, #0]
 800cb52:	0007      	movs	r7, r0
 800cb54:	0028      	movs	r0, r5
 800cb56:	f7ff f92d 	bl	800bdb4 <_malloc_r>
 800cb5a:	2800      	cmp	r0, #0
 800cb5c:	d108      	bne.n	800cb70 <__smakebuf_r+0x44>
 800cb5e:	220c      	movs	r2, #12
 800cb60:	5ea3      	ldrsh	r3, [r4, r2]
 800cb62:	059a      	lsls	r2, r3, #22
 800cb64:	d4ef      	bmi.n	800cb46 <__smakebuf_r+0x1a>
 800cb66:	2203      	movs	r2, #3
 800cb68:	4393      	bics	r3, r2
 800cb6a:	431e      	orrs	r6, r3
 800cb6c:	81a6      	strh	r6, [r4, #12]
 800cb6e:	e7e4      	b.n	800cb3a <__smakebuf_r+0xe>
 800cb70:	4b0f      	ldr	r3, [pc, #60]	; (800cbb0 <__smakebuf_r+0x84>)
 800cb72:	62ab      	str	r3, [r5, #40]	; 0x28
 800cb74:	2380      	movs	r3, #128	; 0x80
 800cb76:	89a2      	ldrh	r2, [r4, #12]
 800cb78:	6020      	str	r0, [r4, #0]
 800cb7a:	4313      	orrs	r3, r2
 800cb7c:	81a3      	strh	r3, [r4, #12]
 800cb7e:	9b00      	ldr	r3, [sp, #0]
 800cb80:	6120      	str	r0, [r4, #16]
 800cb82:	6163      	str	r3, [r4, #20]
 800cb84:	9b01      	ldr	r3, [sp, #4]
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d00d      	beq.n	800cba6 <__smakebuf_r+0x7a>
 800cb8a:	0028      	movs	r0, r5
 800cb8c:	230e      	movs	r3, #14
 800cb8e:	5ee1      	ldrsh	r1, [r4, r3]
 800cb90:	f000 f8e6 	bl	800cd60 <_isatty_r>
 800cb94:	2800      	cmp	r0, #0
 800cb96:	d006      	beq.n	800cba6 <__smakebuf_r+0x7a>
 800cb98:	2203      	movs	r2, #3
 800cb9a:	89a3      	ldrh	r3, [r4, #12]
 800cb9c:	4393      	bics	r3, r2
 800cb9e:	001a      	movs	r2, r3
 800cba0:	2301      	movs	r3, #1
 800cba2:	4313      	orrs	r3, r2
 800cba4:	81a3      	strh	r3, [r4, #12]
 800cba6:	89a0      	ldrh	r0, [r4, #12]
 800cba8:	4307      	orrs	r7, r0
 800cbaa:	81a7      	strh	r7, [r4, #12]
 800cbac:	e7cb      	b.n	800cb46 <__smakebuf_r+0x1a>
 800cbae:	46c0      	nop			; (mov r8, r8)
 800cbb0:	0800c919 	.word	0x0800c919

0800cbb4 <_malloc_usable_size_r>:
 800cbb4:	1f0b      	subs	r3, r1, #4
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	1f18      	subs	r0, r3, #4
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	da01      	bge.n	800cbc2 <_malloc_usable_size_r+0xe>
 800cbbe:	580b      	ldr	r3, [r1, r0]
 800cbc0:	18c0      	adds	r0, r0, r3
 800cbc2:	4770      	bx	lr

0800cbc4 <_raise_r>:
 800cbc4:	b570      	push	{r4, r5, r6, lr}
 800cbc6:	0004      	movs	r4, r0
 800cbc8:	000d      	movs	r5, r1
 800cbca:	291f      	cmp	r1, #31
 800cbcc:	d904      	bls.n	800cbd8 <_raise_r+0x14>
 800cbce:	2316      	movs	r3, #22
 800cbd0:	6003      	str	r3, [r0, #0]
 800cbd2:	2001      	movs	r0, #1
 800cbd4:	4240      	negs	r0, r0
 800cbd6:	bd70      	pop	{r4, r5, r6, pc}
 800cbd8:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d004      	beq.n	800cbe8 <_raise_r+0x24>
 800cbde:	008a      	lsls	r2, r1, #2
 800cbe0:	189b      	adds	r3, r3, r2
 800cbe2:	681a      	ldr	r2, [r3, #0]
 800cbe4:	2a00      	cmp	r2, #0
 800cbe6:	d108      	bne.n	800cbfa <_raise_r+0x36>
 800cbe8:	0020      	movs	r0, r4
 800cbea:	f000 f831 	bl	800cc50 <_getpid_r>
 800cbee:	002a      	movs	r2, r5
 800cbf0:	0001      	movs	r1, r0
 800cbf2:	0020      	movs	r0, r4
 800cbf4:	f000 f81a 	bl	800cc2c <_kill_r>
 800cbf8:	e7ed      	b.n	800cbd6 <_raise_r+0x12>
 800cbfa:	2000      	movs	r0, #0
 800cbfc:	2a01      	cmp	r2, #1
 800cbfe:	d0ea      	beq.n	800cbd6 <_raise_r+0x12>
 800cc00:	1c51      	adds	r1, r2, #1
 800cc02:	d103      	bne.n	800cc0c <_raise_r+0x48>
 800cc04:	2316      	movs	r3, #22
 800cc06:	3001      	adds	r0, #1
 800cc08:	6023      	str	r3, [r4, #0]
 800cc0a:	e7e4      	b.n	800cbd6 <_raise_r+0x12>
 800cc0c:	2400      	movs	r4, #0
 800cc0e:	0028      	movs	r0, r5
 800cc10:	601c      	str	r4, [r3, #0]
 800cc12:	4790      	blx	r2
 800cc14:	0020      	movs	r0, r4
 800cc16:	e7de      	b.n	800cbd6 <_raise_r+0x12>

0800cc18 <raise>:
 800cc18:	b510      	push	{r4, lr}
 800cc1a:	4b03      	ldr	r3, [pc, #12]	; (800cc28 <raise+0x10>)
 800cc1c:	0001      	movs	r1, r0
 800cc1e:	6818      	ldr	r0, [r3, #0]
 800cc20:	f7ff ffd0 	bl	800cbc4 <_raise_r>
 800cc24:	bd10      	pop	{r4, pc}
 800cc26:	46c0      	nop			; (mov r8, r8)
 800cc28:	20000010 	.word	0x20000010

0800cc2c <_kill_r>:
 800cc2c:	2300      	movs	r3, #0
 800cc2e:	b570      	push	{r4, r5, r6, lr}
 800cc30:	4d06      	ldr	r5, [pc, #24]	; (800cc4c <_kill_r+0x20>)
 800cc32:	0004      	movs	r4, r0
 800cc34:	0008      	movs	r0, r1
 800cc36:	0011      	movs	r1, r2
 800cc38:	602b      	str	r3, [r5, #0]
 800cc3a:	f7f6 ffcd 	bl	8003bd8 <_kill>
 800cc3e:	1c43      	adds	r3, r0, #1
 800cc40:	d103      	bne.n	800cc4a <_kill_r+0x1e>
 800cc42:	682b      	ldr	r3, [r5, #0]
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d000      	beq.n	800cc4a <_kill_r+0x1e>
 800cc48:	6023      	str	r3, [r4, #0]
 800cc4a:	bd70      	pop	{r4, r5, r6, pc}
 800cc4c:	200005e4 	.word	0x200005e4

0800cc50 <_getpid_r>:
 800cc50:	b510      	push	{r4, lr}
 800cc52:	f7f6 ffbb 	bl	8003bcc <_getpid>
 800cc56:	bd10      	pop	{r4, pc}

0800cc58 <__sread>:
 800cc58:	b570      	push	{r4, r5, r6, lr}
 800cc5a:	000c      	movs	r4, r1
 800cc5c:	250e      	movs	r5, #14
 800cc5e:	5f49      	ldrsh	r1, [r1, r5]
 800cc60:	f000 f8a4 	bl	800cdac <_read_r>
 800cc64:	2800      	cmp	r0, #0
 800cc66:	db03      	blt.n	800cc70 <__sread+0x18>
 800cc68:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800cc6a:	181b      	adds	r3, r3, r0
 800cc6c:	6563      	str	r3, [r4, #84]	; 0x54
 800cc6e:	bd70      	pop	{r4, r5, r6, pc}
 800cc70:	89a3      	ldrh	r3, [r4, #12]
 800cc72:	4a02      	ldr	r2, [pc, #8]	; (800cc7c <__sread+0x24>)
 800cc74:	4013      	ands	r3, r2
 800cc76:	81a3      	strh	r3, [r4, #12]
 800cc78:	e7f9      	b.n	800cc6e <__sread+0x16>
 800cc7a:	46c0      	nop			; (mov r8, r8)
 800cc7c:	ffffefff 	.word	0xffffefff

0800cc80 <__swrite>:
 800cc80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc82:	001f      	movs	r7, r3
 800cc84:	898b      	ldrh	r3, [r1, #12]
 800cc86:	0005      	movs	r5, r0
 800cc88:	000c      	movs	r4, r1
 800cc8a:	0016      	movs	r6, r2
 800cc8c:	05db      	lsls	r3, r3, #23
 800cc8e:	d505      	bpl.n	800cc9c <__swrite+0x1c>
 800cc90:	230e      	movs	r3, #14
 800cc92:	5ec9      	ldrsh	r1, [r1, r3]
 800cc94:	2200      	movs	r2, #0
 800cc96:	2302      	movs	r3, #2
 800cc98:	f000 f874 	bl	800cd84 <_lseek_r>
 800cc9c:	89a3      	ldrh	r3, [r4, #12]
 800cc9e:	4a05      	ldr	r2, [pc, #20]	; (800ccb4 <__swrite+0x34>)
 800cca0:	0028      	movs	r0, r5
 800cca2:	4013      	ands	r3, r2
 800cca4:	81a3      	strh	r3, [r4, #12]
 800cca6:	0032      	movs	r2, r6
 800cca8:	230e      	movs	r3, #14
 800ccaa:	5ee1      	ldrsh	r1, [r4, r3]
 800ccac:	003b      	movs	r3, r7
 800ccae:	f000 f81f 	bl	800ccf0 <_write_r>
 800ccb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ccb4:	ffffefff 	.word	0xffffefff

0800ccb8 <__sseek>:
 800ccb8:	b570      	push	{r4, r5, r6, lr}
 800ccba:	000c      	movs	r4, r1
 800ccbc:	250e      	movs	r5, #14
 800ccbe:	5f49      	ldrsh	r1, [r1, r5]
 800ccc0:	f000 f860 	bl	800cd84 <_lseek_r>
 800ccc4:	89a3      	ldrh	r3, [r4, #12]
 800ccc6:	1c42      	adds	r2, r0, #1
 800ccc8:	d103      	bne.n	800ccd2 <__sseek+0x1a>
 800ccca:	4a05      	ldr	r2, [pc, #20]	; (800cce0 <__sseek+0x28>)
 800cccc:	4013      	ands	r3, r2
 800ccce:	81a3      	strh	r3, [r4, #12]
 800ccd0:	bd70      	pop	{r4, r5, r6, pc}
 800ccd2:	2280      	movs	r2, #128	; 0x80
 800ccd4:	0152      	lsls	r2, r2, #5
 800ccd6:	4313      	orrs	r3, r2
 800ccd8:	81a3      	strh	r3, [r4, #12]
 800ccda:	6560      	str	r0, [r4, #84]	; 0x54
 800ccdc:	e7f8      	b.n	800ccd0 <__sseek+0x18>
 800ccde:	46c0      	nop			; (mov r8, r8)
 800cce0:	ffffefff 	.word	0xffffefff

0800cce4 <__sclose>:
 800cce4:	b510      	push	{r4, lr}
 800cce6:	230e      	movs	r3, #14
 800cce8:	5ec9      	ldrsh	r1, [r1, r3]
 800ccea:	f000 f815 	bl	800cd18 <_close_r>
 800ccee:	bd10      	pop	{r4, pc}

0800ccf0 <_write_r>:
 800ccf0:	b570      	push	{r4, r5, r6, lr}
 800ccf2:	0004      	movs	r4, r0
 800ccf4:	0008      	movs	r0, r1
 800ccf6:	0011      	movs	r1, r2
 800ccf8:	001a      	movs	r2, r3
 800ccfa:	2300      	movs	r3, #0
 800ccfc:	4d05      	ldr	r5, [pc, #20]	; (800cd14 <_write_r+0x24>)
 800ccfe:	602b      	str	r3, [r5, #0]
 800cd00:	f7f6 ffa3 	bl	8003c4a <_write>
 800cd04:	1c43      	adds	r3, r0, #1
 800cd06:	d103      	bne.n	800cd10 <_write_r+0x20>
 800cd08:	682b      	ldr	r3, [r5, #0]
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d000      	beq.n	800cd10 <_write_r+0x20>
 800cd0e:	6023      	str	r3, [r4, #0]
 800cd10:	bd70      	pop	{r4, r5, r6, pc}
 800cd12:	46c0      	nop			; (mov r8, r8)
 800cd14:	200005e4 	.word	0x200005e4

0800cd18 <_close_r>:
 800cd18:	2300      	movs	r3, #0
 800cd1a:	b570      	push	{r4, r5, r6, lr}
 800cd1c:	4d06      	ldr	r5, [pc, #24]	; (800cd38 <_close_r+0x20>)
 800cd1e:	0004      	movs	r4, r0
 800cd20:	0008      	movs	r0, r1
 800cd22:	602b      	str	r3, [r5, #0]
 800cd24:	f7f6 ffad 	bl	8003c82 <_close>
 800cd28:	1c43      	adds	r3, r0, #1
 800cd2a:	d103      	bne.n	800cd34 <_close_r+0x1c>
 800cd2c:	682b      	ldr	r3, [r5, #0]
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d000      	beq.n	800cd34 <_close_r+0x1c>
 800cd32:	6023      	str	r3, [r4, #0]
 800cd34:	bd70      	pop	{r4, r5, r6, pc}
 800cd36:	46c0      	nop			; (mov r8, r8)
 800cd38:	200005e4 	.word	0x200005e4

0800cd3c <_fstat_r>:
 800cd3c:	2300      	movs	r3, #0
 800cd3e:	b570      	push	{r4, r5, r6, lr}
 800cd40:	4d06      	ldr	r5, [pc, #24]	; (800cd5c <_fstat_r+0x20>)
 800cd42:	0004      	movs	r4, r0
 800cd44:	0008      	movs	r0, r1
 800cd46:	0011      	movs	r1, r2
 800cd48:	602b      	str	r3, [r5, #0]
 800cd4a:	f7f6 ffa4 	bl	8003c96 <_fstat>
 800cd4e:	1c43      	adds	r3, r0, #1
 800cd50:	d103      	bne.n	800cd5a <_fstat_r+0x1e>
 800cd52:	682b      	ldr	r3, [r5, #0]
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d000      	beq.n	800cd5a <_fstat_r+0x1e>
 800cd58:	6023      	str	r3, [r4, #0]
 800cd5a:	bd70      	pop	{r4, r5, r6, pc}
 800cd5c:	200005e4 	.word	0x200005e4

0800cd60 <_isatty_r>:
 800cd60:	2300      	movs	r3, #0
 800cd62:	b570      	push	{r4, r5, r6, lr}
 800cd64:	4d06      	ldr	r5, [pc, #24]	; (800cd80 <_isatty_r+0x20>)
 800cd66:	0004      	movs	r4, r0
 800cd68:	0008      	movs	r0, r1
 800cd6a:	602b      	str	r3, [r5, #0]
 800cd6c:	f7f6 ffa1 	bl	8003cb2 <_isatty>
 800cd70:	1c43      	adds	r3, r0, #1
 800cd72:	d103      	bne.n	800cd7c <_isatty_r+0x1c>
 800cd74:	682b      	ldr	r3, [r5, #0]
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d000      	beq.n	800cd7c <_isatty_r+0x1c>
 800cd7a:	6023      	str	r3, [r4, #0]
 800cd7c:	bd70      	pop	{r4, r5, r6, pc}
 800cd7e:	46c0      	nop			; (mov r8, r8)
 800cd80:	200005e4 	.word	0x200005e4

0800cd84 <_lseek_r>:
 800cd84:	b570      	push	{r4, r5, r6, lr}
 800cd86:	0004      	movs	r4, r0
 800cd88:	0008      	movs	r0, r1
 800cd8a:	0011      	movs	r1, r2
 800cd8c:	001a      	movs	r2, r3
 800cd8e:	2300      	movs	r3, #0
 800cd90:	4d05      	ldr	r5, [pc, #20]	; (800cda8 <_lseek_r+0x24>)
 800cd92:	602b      	str	r3, [r5, #0]
 800cd94:	f7f6 ff96 	bl	8003cc4 <_lseek>
 800cd98:	1c43      	adds	r3, r0, #1
 800cd9a:	d103      	bne.n	800cda4 <_lseek_r+0x20>
 800cd9c:	682b      	ldr	r3, [r5, #0]
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d000      	beq.n	800cda4 <_lseek_r+0x20>
 800cda2:	6023      	str	r3, [r4, #0]
 800cda4:	bd70      	pop	{r4, r5, r6, pc}
 800cda6:	46c0      	nop			; (mov r8, r8)
 800cda8:	200005e4 	.word	0x200005e4

0800cdac <_read_r>:
 800cdac:	b570      	push	{r4, r5, r6, lr}
 800cdae:	0004      	movs	r4, r0
 800cdb0:	0008      	movs	r0, r1
 800cdb2:	0011      	movs	r1, r2
 800cdb4:	001a      	movs	r2, r3
 800cdb6:	2300      	movs	r3, #0
 800cdb8:	4d05      	ldr	r5, [pc, #20]	; (800cdd0 <_read_r+0x24>)
 800cdba:	602b      	str	r3, [r5, #0]
 800cdbc:	f7f6 ff28 	bl	8003c10 <_read>
 800cdc0:	1c43      	adds	r3, r0, #1
 800cdc2:	d103      	bne.n	800cdcc <_read_r+0x20>
 800cdc4:	682b      	ldr	r3, [r5, #0]
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d000      	beq.n	800cdcc <_read_r+0x20>
 800cdca:	6023      	str	r3, [r4, #0]
 800cdcc:	bd70      	pop	{r4, r5, r6, pc}
 800cdce:	46c0      	nop			; (mov r8, r8)
 800cdd0:	200005e4 	.word	0x200005e4

0800cdd4 <_init>:
 800cdd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdd6:	46c0      	nop			; (mov r8, r8)
 800cdd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cdda:	bc08      	pop	{r3}
 800cddc:	469e      	mov	lr, r3
 800cdde:	4770      	bx	lr

0800cde0 <_fini>:
 800cde0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cde2:	46c0      	nop			; (mov r8, r8)
 800cde4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cde6:	bc08      	pop	{r3}
 800cde8:	469e      	mov	lr, r3
 800cdea:	4770      	bx	lr
