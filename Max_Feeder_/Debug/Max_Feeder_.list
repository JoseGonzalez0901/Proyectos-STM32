
Max_Feeder_.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059d0  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  08005a8c  08005a8c  00015a8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005bcc  08005bcc  000200bc  2**0
                  CONTENTS
  4 .ARM          00000008  08005bcc  08005bcc  00015bcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005bd4  08005bd4  000200bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005bd4  08005bd4  00015bd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005bd8  08005bd8  00015bd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000bc  20000000  08005bdc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000260  200000bc  08005c98  000200bc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000031c  08005c98  0002031c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013f2b  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000269b  00000000  00000000  0003400f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ed0  00000000  00000000  000366b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000de8  00000000  00000000  00037580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001929a  00000000  00000000  00038368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000123a2  00000000  00000000  00051602  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a1ba6  00000000  00000000  000639a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010554a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003960  00000000  00000000  001055a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200000bc 	.word	0x200000bc
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08005a74 	.word	0x08005a74

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200000c0 	.word	0x200000c0
 8000100:	08005a74 	.word	0x08005a74

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_shi>:
 8000114:	b403      	push	{r0, r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0040      	lsls	r0, r0, #1
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	5e09      	ldrsh	r1, [r1, r0]
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	448e      	add	lr, r1
 8000124:	bc03      	pop	{r0, r1}
 8000126:	4770      	bx	lr

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	; 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f8f0 	bl	8000410 <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__divsi3>:
 800023c:	4603      	mov	r3, r0
 800023e:	430b      	orrs	r3, r1
 8000240:	d47f      	bmi.n	8000342 <__divsi3+0x106>
 8000242:	2200      	movs	r2, #0
 8000244:	0843      	lsrs	r3, r0, #1
 8000246:	428b      	cmp	r3, r1
 8000248:	d374      	bcc.n	8000334 <__divsi3+0xf8>
 800024a:	0903      	lsrs	r3, r0, #4
 800024c:	428b      	cmp	r3, r1
 800024e:	d35f      	bcc.n	8000310 <__divsi3+0xd4>
 8000250:	0a03      	lsrs	r3, r0, #8
 8000252:	428b      	cmp	r3, r1
 8000254:	d344      	bcc.n	80002e0 <__divsi3+0xa4>
 8000256:	0b03      	lsrs	r3, r0, #12
 8000258:	428b      	cmp	r3, r1
 800025a:	d328      	bcc.n	80002ae <__divsi3+0x72>
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d30d      	bcc.n	800027e <__divsi3+0x42>
 8000262:	22ff      	movs	r2, #255	; 0xff
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	ba12      	rev	r2, r2
 8000268:	0c03      	lsrs	r3, r0, #16
 800026a:	428b      	cmp	r3, r1
 800026c:	d302      	bcc.n	8000274 <__divsi3+0x38>
 800026e:	1212      	asrs	r2, r2, #8
 8000270:	0209      	lsls	r1, r1, #8
 8000272:	d065      	beq.n	8000340 <__divsi3+0x104>
 8000274:	0b03      	lsrs	r3, r0, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d319      	bcc.n	80002ae <__divsi3+0x72>
 800027a:	e000      	b.n	800027e <__divsi3+0x42>
 800027c:	0a09      	lsrs	r1, r1, #8
 800027e:	0bc3      	lsrs	r3, r0, #15
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x4c>
 8000284:	03cb      	lsls	r3, r1, #15
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b83      	lsrs	r3, r0, #14
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x58>
 8000290:	038b      	lsls	r3, r1, #14
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b43      	lsrs	r3, r0, #13
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x64>
 800029c:	034b      	lsls	r3, r1, #13
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b03      	lsrs	r3, r0, #12
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x70>
 80002a8:	030b      	lsls	r3, r1, #12
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0ac3      	lsrs	r3, r0, #11
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x7c>
 80002b4:	02cb      	lsls	r3, r1, #11
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a83      	lsrs	r3, r0, #10
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x88>
 80002c0:	028b      	lsls	r3, r1, #10
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a43      	lsrs	r3, r0, #9
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x94>
 80002cc:	024b      	lsls	r3, r1, #9
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a03      	lsrs	r3, r0, #8
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0xa0>
 80002d8:	020b      	lsls	r3, r1, #8
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	d2cd      	bcs.n	800027c <__divsi3+0x40>
 80002e0:	09c3      	lsrs	r3, r0, #7
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xae>
 80002e6:	01cb      	lsls	r3, r1, #7
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0983      	lsrs	r3, r0, #6
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xba>
 80002f2:	018b      	lsls	r3, r1, #6
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0943      	lsrs	r3, r0, #5
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xc6>
 80002fe:	014b      	lsls	r3, r1, #5
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0903      	lsrs	r3, r0, #4
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xd2>
 800030a:	010b      	lsls	r3, r1, #4
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	08c3      	lsrs	r3, r0, #3
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xde>
 8000316:	00cb      	lsls	r3, r1, #3
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0883      	lsrs	r3, r0, #2
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xea>
 8000322:	008b      	lsls	r3, r1, #2
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0843      	lsrs	r3, r0, #1
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xf6>
 800032e:	004b      	lsls	r3, r1, #1
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	1a41      	subs	r1, r0, r1
 8000336:	d200      	bcs.n	800033a <__divsi3+0xfe>
 8000338:	4601      	mov	r1, r0
 800033a:	4152      	adcs	r2, r2
 800033c:	4610      	mov	r0, r2
 800033e:	4770      	bx	lr
 8000340:	e05d      	b.n	80003fe <__divsi3+0x1c2>
 8000342:	0fca      	lsrs	r2, r1, #31
 8000344:	d000      	beq.n	8000348 <__divsi3+0x10c>
 8000346:	4249      	negs	r1, r1
 8000348:	1003      	asrs	r3, r0, #32
 800034a:	d300      	bcc.n	800034e <__divsi3+0x112>
 800034c:	4240      	negs	r0, r0
 800034e:	4053      	eors	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	469c      	mov	ip, r3
 8000354:	0903      	lsrs	r3, r0, #4
 8000356:	428b      	cmp	r3, r1
 8000358:	d32d      	bcc.n	80003b6 <__divsi3+0x17a>
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d312      	bcc.n	8000386 <__divsi3+0x14a>
 8000360:	22fc      	movs	r2, #252	; 0xfc
 8000362:	0189      	lsls	r1, r1, #6
 8000364:	ba12      	rev	r2, r2
 8000366:	0a03      	lsrs	r3, r0, #8
 8000368:	428b      	cmp	r3, r1
 800036a:	d30c      	bcc.n	8000386 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	1192      	asrs	r2, r2, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d308      	bcc.n	8000386 <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d304      	bcc.n	8000386 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	d03a      	beq.n	80003f6 <__divsi3+0x1ba>
 8000380:	1192      	asrs	r2, r2, #6
 8000382:	e000      	b.n	8000386 <__divsi3+0x14a>
 8000384:	0989      	lsrs	r1, r1, #6
 8000386:	09c3      	lsrs	r3, r0, #7
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x154>
 800038c:	01cb      	lsls	r3, r1, #7
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0983      	lsrs	r3, r0, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x160>
 8000398:	018b      	lsls	r3, r1, #6
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0943      	lsrs	r3, r0, #5
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x16c>
 80003a4:	014b      	lsls	r3, r1, #5
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0903      	lsrs	r3, r0, #4
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x178>
 80003b0:	010b      	lsls	r3, r1, #4
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	08c3      	lsrs	r3, r0, #3
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x184>
 80003bc:	00cb      	lsls	r3, r1, #3
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0883      	lsrs	r3, r0, #2
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x190>
 80003c8:	008b      	lsls	r3, r1, #2
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	d2d9      	bcs.n	8000384 <__divsi3+0x148>
 80003d0:	0843      	lsrs	r3, r0, #1
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d301      	bcc.n	80003da <__divsi3+0x19e>
 80003d6:	004b      	lsls	r3, r1, #1
 80003d8:	1ac0      	subs	r0, r0, r3
 80003da:	4152      	adcs	r2, r2
 80003dc:	1a41      	subs	r1, r0, r1
 80003de:	d200      	bcs.n	80003e2 <__divsi3+0x1a6>
 80003e0:	4601      	mov	r1, r0
 80003e2:	4663      	mov	r3, ip
 80003e4:	4152      	adcs	r2, r2
 80003e6:	105b      	asrs	r3, r3, #1
 80003e8:	4610      	mov	r0, r2
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x1b4>
 80003ec:	4240      	negs	r0, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d500      	bpl.n	80003f4 <__divsi3+0x1b8>
 80003f2:	4249      	negs	r1, r1
 80003f4:	4770      	bx	lr
 80003f6:	4663      	mov	r3, ip
 80003f8:	105b      	asrs	r3, r3, #1
 80003fa:	d300      	bcc.n	80003fe <__divsi3+0x1c2>
 80003fc:	4240      	negs	r0, r0
 80003fe:	b501      	push	{r0, lr}
 8000400:	2000      	movs	r0, #0
 8000402:	f000 f805 	bl	8000410 <__aeabi_idiv0>
 8000406:	bd02      	pop	{r1, pc}

08000408 <__aeabi_idivmod>:
 8000408:	2900      	cmp	r1, #0
 800040a:	d0f8      	beq.n	80003fe <__divsi3+0x1c2>
 800040c:	e716      	b.n	800023c <__divsi3>
 800040e:	4770      	bx	lr

08000410 <__aeabi_idiv0>:
 8000410:	4770      	bx	lr
 8000412:	46c0      	nop			; (mov r8, r8)

08000414 <__aeabi_uldivmod>:
 8000414:	2b00      	cmp	r3, #0
 8000416:	d111      	bne.n	800043c <__aeabi_uldivmod+0x28>
 8000418:	2a00      	cmp	r2, #0
 800041a:	d10f      	bne.n	800043c <__aeabi_uldivmod+0x28>
 800041c:	2900      	cmp	r1, #0
 800041e:	d100      	bne.n	8000422 <__aeabi_uldivmod+0xe>
 8000420:	2800      	cmp	r0, #0
 8000422:	d002      	beq.n	800042a <__aeabi_uldivmod+0x16>
 8000424:	2100      	movs	r1, #0
 8000426:	43c9      	mvns	r1, r1
 8000428:	1c08      	adds	r0, r1, #0
 800042a:	b407      	push	{r0, r1, r2}
 800042c:	4802      	ldr	r0, [pc, #8]	; (8000438 <__aeabi_uldivmod+0x24>)
 800042e:	a102      	add	r1, pc, #8	; (adr r1, 8000438 <__aeabi_uldivmod+0x24>)
 8000430:	1840      	adds	r0, r0, r1
 8000432:	9002      	str	r0, [sp, #8]
 8000434:	bd03      	pop	{r0, r1, pc}
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	ffffffd9 	.word	0xffffffd9
 800043c:	b403      	push	{r0, r1}
 800043e:	4668      	mov	r0, sp
 8000440:	b501      	push	{r0, lr}
 8000442:	9802      	ldr	r0, [sp, #8]
 8000444:	f000 f806 	bl	8000454 <__udivmoddi4>
 8000448:	9b01      	ldr	r3, [sp, #4]
 800044a:	469e      	mov	lr, r3
 800044c:	b002      	add	sp, #8
 800044e:	bc0c      	pop	{r2, r3}
 8000450:	4770      	bx	lr
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__udivmoddi4>:
 8000454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000456:	4657      	mov	r7, sl
 8000458:	464e      	mov	r6, r9
 800045a:	4645      	mov	r5, r8
 800045c:	46de      	mov	lr, fp
 800045e:	b5e0      	push	{r5, r6, r7, lr}
 8000460:	0004      	movs	r4, r0
 8000462:	000d      	movs	r5, r1
 8000464:	4692      	mov	sl, r2
 8000466:	4699      	mov	r9, r3
 8000468:	b083      	sub	sp, #12
 800046a:	428b      	cmp	r3, r1
 800046c:	d830      	bhi.n	80004d0 <__udivmoddi4+0x7c>
 800046e:	d02d      	beq.n	80004cc <__udivmoddi4+0x78>
 8000470:	4649      	mov	r1, r9
 8000472:	4650      	mov	r0, sl
 8000474:	f000 f8ba 	bl	80005ec <__clzdi2>
 8000478:	0029      	movs	r1, r5
 800047a:	0006      	movs	r6, r0
 800047c:	0020      	movs	r0, r4
 800047e:	f000 f8b5 	bl	80005ec <__clzdi2>
 8000482:	1a33      	subs	r3, r6, r0
 8000484:	4698      	mov	r8, r3
 8000486:	3b20      	subs	r3, #32
 8000488:	469b      	mov	fp, r3
 800048a:	d433      	bmi.n	80004f4 <__udivmoddi4+0xa0>
 800048c:	465a      	mov	r2, fp
 800048e:	4653      	mov	r3, sl
 8000490:	4093      	lsls	r3, r2
 8000492:	4642      	mov	r2, r8
 8000494:	001f      	movs	r7, r3
 8000496:	4653      	mov	r3, sl
 8000498:	4093      	lsls	r3, r2
 800049a:	001e      	movs	r6, r3
 800049c:	42af      	cmp	r7, r5
 800049e:	d83a      	bhi.n	8000516 <__udivmoddi4+0xc2>
 80004a0:	42af      	cmp	r7, r5
 80004a2:	d100      	bne.n	80004a6 <__udivmoddi4+0x52>
 80004a4:	e078      	b.n	8000598 <__udivmoddi4+0x144>
 80004a6:	465b      	mov	r3, fp
 80004a8:	1ba4      	subs	r4, r4, r6
 80004aa:	41bd      	sbcs	r5, r7
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	da00      	bge.n	80004b2 <__udivmoddi4+0x5e>
 80004b0:	e075      	b.n	800059e <__udivmoddi4+0x14a>
 80004b2:	2200      	movs	r2, #0
 80004b4:	2300      	movs	r3, #0
 80004b6:	9200      	str	r2, [sp, #0]
 80004b8:	9301      	str	r3, [sp, #4]
 80004ba:	2301      	movs	r3, #1
 80004bc:	465a      	mov	r2, fp
 80004be:	4093      	lsls	r3, r2
 80004c0:	9301      	str	r3, [sp, #4]
 80004c2:	2301      	movs	r3, #1
 80004c4:	4642      	mov	r2, r8
 80004c6:	4093      	lsls	r3, r2
 80004c8:	9300      	str	r3, [sp, #0]
 80004ca:	e028      	b.n	800051e <__udivmoddi4+0xca>
 80004cc:	4282      	cmp	r2, r0
 80004ce:	d9cf      	bls.n	8000470 <__udivmoddi4+0x1c>
 80004d0:	2200      	movs	r2, #0
 80004d2:	2300      	movs	r3, #0
 80004d4:	9200      	str	r2, [sp, #0]
 80004d6:	9301      	str	r3, [sp, #4]
 80004d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <__udivmoddi4+0x8e>
 80004de:	601c      	str	r4, [r3, #0]
 80004e0:	605d      	str	r5, [r3, #4]
 80004e2:	9800      	ldr	r0, [sp, #0]
 80004e4:	9901      	ldr	r1, [sp, #4]
 80004e6:	b003      	add	sp, #12
 80004e8:	bcf0      	pop	{r4, r5, r6, r7}
 80004ea:	46bb      	mov	fp, r7
 80004ec:	46b2      	mov	sl, r6
 80004ee:	46a9      	mov	r9, r5
 80004f0:	46a0      	mov	r8, r4
 80004f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f4:	4642      	mov	r2, r8
 80004f6:	2320      	movs	r3, #32
 80004f8:	1a9b      	subs	r3, r3, r2
 80004fa:	4652      	mov	r2, sl
 80004fc:	40da      	lsrs	r2, r3
 80004fe:	4641      	mov	r1, r8
 8000500:	0013      	movs	r3, r2
 8000502:	464a      	mov	r2, r9
 8000504:	408a      	lsls	r2, r1
 8000506:	0017      	movs	r7, r2
 8000508:	4642      	mov	r2, r8
 800050a:	431f      	orrs	r7, r3
 800050c:	4653      	mov	r3, sl
 800050e:	4093      	lsls	r3, r2
 8000510:	001e      	movs	r6, r3
 8000512:	42af      	cmp	r7, r5
 8000514:	d9c4      	bls.n	80004a0 <__udivmoddi4+0x4c>
 8000516:	2200      	movs	r2, #0
 8000518:	2300      	movs	r3, #0
 800051a:	9200      	str	r2, [sp, #0]
 800051c:	9301      	str	r3, [sp, #4]
 800051e:	4643      	mov	r3, r8
 8000520:	2b00      	cmp	r3, #0
 8000522:	d0d9      	beq.n	80004d8 <__udivmoddi4+0x84>
 8000524:	07fb      	lsls	r3, r7, #31
 8000526:	0872      	lsrs	r2, r6, #1
 8000528:	431a      	orrs	r2, r3
 800052a:	4646      	mov	r6, r8
 800052c:	087b      	lsrs	r3, r7, #1
 800052e:	e00e      	b.n	800054e <__udivmoddi4+0xfa>
 8000530:	42ab      	cmp	r3, r5
 8000532:	d101      	bne.n	8000538 <__udivmoddi4+0xe4>
 8000534:	42a2      	cmp	r2, r4
 8000536:	d80c      	bhi.n	8000552 <__udivmoddi4+0xfe>
 8000538:	1aa4      	subs	r4, r4, r2
 800053a:	419d      	sbcs	r5, r3
 800053c:	2001      	movs	r0, #1
 800053e:	1924      	adds	r4, r4, r4
 8000540:	416d      	adcs	r5, r5
 8000542:	2100      	movs	r1, #0
 8000544:	3e01      	subs	r6, #1
 8000546:	1824      	adds	r4, r4, r0
 8000548:	414d      	adcs	r5, r1
 800054a:	2e00      	cmp	r6, #0
 800054c:	d006      	beq.n	800055c <__udivmoddi4+0x108>
 800054e:	42ab      	cmp	r3, r5
 8000550:	d9ee      	bls.n	8000530 <__udivmoddi4+0xdc>
 8000552:	3e01      	subs	r6, #1
 8000554:	1924      	adds	r4, r4, r4
 8000556:	416d      	adcs	r5, r5
 8000558:	2e00      	cmp	r6, #0
 800055a:	d1f8      	bne.n	800054e <__udivmoddi4+0xfa>
 800055c:	9800      	ldr	r0, [sp, #0]
 800055e:	9901      	ldr	r1, [sp, #4]
 8000560:	465b      	mov	r3, fp
 8000562:	1900      	adds	r0, r0, r4
 8000564:	4169      	adcs	r1, r5
 8000566:	2b00      	cmp	r3, #0
 8000568:	db24      	blt.n	80005b4 <__udivmoddi4+0x160>
 800056a:	002b      	movs	r3, r5
 800056c:	465a      	mov	r2, fp
 800056e:	4644      	mov	r4, r8
 8000570:	40d3      	lsrs	r3, r2
 8000572:	002a      	movs	r2, r5
 8000574:	40e2      	lsrs	r2, r4
 8000576:	001c      	movs	r4, r3
 8000578:	465b      	mov	r3, fp
 800057a:	0015      	movs	r5, r2
 800057c:	2b00      	cmp	r3, #0
 800057e:	db2a      	blt.n	80005d6 <__udivmoddi4+0x182>
 8000580:	0026      	movs	r6, r4
 8000582:	409e      	lsls	r6, r3
 8000584:	0033      	movs	r3, r6
 8000586:	0026      	movs	r6, r4
 8000588:	4647      	mov	r7, r8
 800058a:	40be      	lsls	r6, r7
 800058c:	0032      	movs	r2, r6
 800058e:	1a80      	subs	r0, r0, r2
 8000590:	4199      	sbcs	r1, r3
 8000592:	9000      	str	r0, [sp, #0]
 8000594:	9101      	str	r1, [sp, #4]
 8000596:	e79f      	b.n	80004d8 <__udivmoddi4+0x84>
 8000598:	42a3      	cmp	r3, r4
 800059a:	d8bc      	bhi.n	8000516 <__udivmoddi4+0xc2>
 800059c:	e783      	b.n	80004a6 <__udivmoddi4+0x52>
 800059e:	4642      	mov	r2, r8
 80005a0:	2320      	movs	r3, #32
 80005a2:	2100      	movs	r1, #0
 80005a4:	1a9b      	subs	r3, r3, r2
 80005a6:	2200      	movs	r2, #0
 80005a8:	9100      	str	r1, [sp, #0]
 80005aa:	9201      	str	r2, [sp, #4]
 80005ac:	2201      	movs	r2, #1
 80005ae:	40da      	lsrs	r2, r3
 80005b0:	9201      	str	r2, [sp, #4]
 80005b2:	e786      	b.n	80004c2 <__udivmoddi4+0x6e>
 80005b4:	4642      	mov	r2, r8
 80005b6:	2320      	movs	r3, #32
 80005b8:	1a9b      	subs	r3, r3, r2
 80005ba:	002a      	movs	r2, r5
 80005bc:	4646      	mov	r6, r8
 80005be:	409a      	lsls	r2, r3
 80005c0:	0023      	movs	r3, r4
 80005c2:	40f3      	lsrs	r3, r6
 80005c4:	4644      	mov	r4, r8
 80005c6:	4313      	orrs	r3, r2
 80005c8:	002a      	movs	r2, r5
 80005ca:	40e2      	lsrs	r2, r4
 80005cc:	001c      	movs	r4, r3
 80005ce:	465b      	mov	r3, fp
 80005d0:	0015      	movs	r5, r2
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	dad4      	bge.n	8000580 <__udivmoddi4+0x12c>
 80005d6:	4642      	mov	r2, r8
 80005d8:	002f      	movs	r7, r5
 80005da:	2320      	movs	r3, #32
 80005dc:	0026      	movs	r6, r4
 80005de:	4097      	lsls	r7, r2
 80005e0:	1a9b      	subs	r3, r3, r2
 80005e2:	40de      	lsrs	r6, r3
 80005e4:	003b      	movs	r3, r7
 80005e6:	4333      	orrs	r3, r6
 80005e8:	e7cd      	b.n	8000586 <__udivmoddi4+0x132>
 80005ea:	46c0      	nop			; (mov r8, r8)

080005ec <__clzdi2>:
 80005ec:	b510      	push	{r4, lr}
 80005ee:	2900      	cmp	r1, #0
 80005f0:	d103      	bne.n	80005fa <__clzdi2+0xe>
 80005f2:	f000 f807 	bl	8000604 <__clzsi2>
 80005f6:	3020      	adds	r0, #32
 80005f8:	e002      	b.n	8000600 <__clzdi2+0x14>
 80005fa:	1c08      	adds	r0, r1, #0
 80005fc:	f000 f802 	bl	8000604 <__clzsi2>
 8000600:	bd10      	pop	{r4, pc}
 8000602:	46c0      	nop			; (mov r8, r8)

08000604 <__clzsi2>:
 8000604:	211c      	movs	r1, #28
 8000606:	2301      	movs	r3, #1
 8000608:	041b      	lsls	r3, r3, #16
 800060a:	4298      	cmp	r0, r3
 800060c:	d301      	bcc.n	8000612 <__clzsi2+0xe>
 800060e:	0c00      	lsrs	r0, r0, #16
 8000610:	3910      	subs	r1, #16
 8000612:	0a1b      	lsrs	r3, r3, #8
 8000614:	4298      	cmp	r0, r3
 8000616:	d301      	bcc.n	800061c <__clzsi2+0x18>
 8000618:	0a00      	lsrs	r0, r0, #8
 800061a:	3908      	subs	r1, #8
 800061c:	091b      	lsrs	r3, r3, #4
 800061e:	4298      	cmp	r0, r3
 8000620:	d301      	bcc.n	8000626 <__clzsi2+0x22>
 8000622:	0900      	lsrs	r0, r0, #4
 8000624:	3904      	subs	r1, #4
 8000626:	a202      	add	r2, pc, #8	; (adr r2, 8000630 <__clzsi2+0x2c>)
 8000628:	5c10      	ldrb	r0, [r2, r0]
 800062a:	1840      	adds	r0, r0, r1
 800062c:	4770      	bx	lr
 800062e:	46c0      	nop			; (mov r8, r8)
 8000630:	02020304 	.word	0x02020304
 8000634:	01010101 	.word	0x01010101
	...

08000640 <delay>:
 */
#include "Nema17.h"

extern TIM_HandleTypeDef htim6;
void delay (TIM_HandleTypeDef timer ,uint32_t delay)
{
 8000640:	b084      	sub	sp, #16
 8000642:	b5b0      	push	{r4, r5, r7, lr}
 8000644:	af00      	add	r7, sp, #0
 8000646:	250c      	movs	r5, #12
 8000648:	1d3c      	adds	r4, r7, #4
 800064a:	1964      	adds	r4, r4, r5
 800064c:	6020      	str	r0, [r4, #0]
 800064e:	6061      	str	r1, [r4, #4]
 8000650:	60a2      	str	r2, [r4, #8]
 8000652:	60e3      	str	r3, [r4, #12]
	  __HAL_TIM_SET_COUNTER(&timer, 0);
 8000654:	1d3b      	adds	r3, r7, #4
 8000656:	195b      	adds	r3, r3, r5
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	2200      	movs	r2, #0
 800065c:	625a      	str	r2, [r3, #36]	; 0x24
	  while (__HAL_TIM_GET_COUNTER(&timer) < delay);
 800065e:	46c0      	nop			; (mov r8, r8)
 8000660:	230c      	movs	r3, #12
 8000662:	1d3a      	adds	r2, r7, #4
 8000664:	4694      	mov	ip, r2
 8000666:	4463      	add	r3, ip
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800066c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800066e:	429a      	cmp	r2, r3
 8000670:	d8f6      	bhi.n	8000660 <delay+0x20>
}
 8000672:	46c0      	nop			; (mov r8, r8)
 8000674:	46c0      	nop			; (mov r8, r8)
 8000676:	46bd      	mov	sp, r7
 8000678:	bcb0      	pop	{r4, r5, r7}
 800067a:	bc08      	pop	{r3}
 800067c:	b004      	add	sp, #16
 800067e:	4718      	bx	r3

08000680 <Config_motor_Pin>:
void Config_motor_Pin(TypedefMotor *Motor,GPIO_TypeDef *GPIOx_Step,GPIO_TypeDef *GPIOX_dir, uint16_t GPIO_Pin_Step,uint16_t GPIO_Pin_dir)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b084      	sub	sp, #16
 8000684:	af00      	add	r7, sp, #0
 8000686:	60f8      	str	r0, [r7, #12]
 8000688:	60b9      	str	r1, [r7, #8]
 800068a:	607a      	str	r2, [r7, #4]
 800068c:	001a      	movs	r2, r3
 800068e:	1cbb      	adds	r3, r7, #2
 8000690:	801a      	strh	r2, [r3, #0]

	Motor->Port_Step=GPIOx_Step;
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	68ba      	ldr	r2, [r7, #8]
 8000696:	601a      	str	r2, [r3, #0]
	Motor->Pin_Step=GPIO_Pin_Step;
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	1cba      	adds	r2, r7, #2
 800069c:	8812      	ldrh	r2, [r2, #0]
 800069e:	809a      	strh	r2, [r3, #4]
	Motor->Port_Dir=GPIOX_dir;
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	687a      	ldr	r2, [r7, #4]
 80006a4:	609a      	str	r2, [r3, #8]
	Motor->Pin_Dir=GPIO_Pin_dir;
 80006a6:	68fa      	ldr	r2, [r7, #12]
 80006a8:	2318      	movs	r3, #24
 80006aa:	18fb      	adds	r3, r7, r3
 80006ac:	881b      	ldrh	r3, [r3, #0]
 80006ae:	8193      	strh	r3, [r2, #12]
}
 80006b0:	46c0      	nop			; (mov r8, r8)
 80006b2:	46bd      	mov	sp, r7
 80006b4:	b004      	add	sp, #16
 80006b6:	bd80      	pop	{r7, pc}

080006b8 <Config_motor_caracteristicas>:
void Config_motor_caracteristicas(TypedefMotor *Motor,int Pasos,int Dir)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b084      	sub	sp, #16
 80006bc:	af00      	add	r7, sp, #0
 80006be:	60f8      	str	r0, [r7, #12]
 80006c0:	60b9      	str	r1, [r7, #8]
 80006c2:	607a      	str	r2, [r7, #4]
	Motor->Dir=Dir;
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	1c1a      	adds	r2, r3, #0
 80006c8:	2301      	movs	r3, #1
 80006ca:	4013      	ands	r3, r2
 80006cc:	b2da      	uxtb	r2, r3
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	2101      	movs	r1, #1
 80006d2:	400a      	ands	r2, r1
 80006d4:	0010      	movs	r0, r2
 80006d6:	7d1a      	ldrb	r2, [r3, #20]
 80006d8:	2101      	movs	r1, #1
 80006da:	438a      	bics	r2, r1
 80006dc:	1c11      	adds	r1, r2, #0
 80006de:	1c02      	adds	r2, r0, #0
 80006e0:	430a      	orrs	r2, r1
 80006e2:	751a      	strb	r2, [r3, #20]
	Motor->Pasos=Pasos;
 80006e4:	68ba      	ldr	r2, [r7, #8]
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	611a      	str	r2, [r3, #16]
	HAL_GPIO_WritePin(Motor->Port_Dir,Motor->Pin_Dir,Motor->Dir);
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	6898      	ldr	r0, [r3, #8]
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	8999      	ldrh	r1, [r3, #12]
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	7d1b      	ldrb	r3, [r3, #20]
 80006f6:	07db      	lsls	r3, r3, #31
 80006f8:	0fdb      	lsrs	r3, r3, #31
 80006fa:	b2db      	uxtb	r3, r3
 80006fc:	001a      	movs	r2, r3
 80006fe:	f001 fc22 	bl	8001f46 <HAL_GPIO_WritePin>
}
 8000702:	46c0      	nop			; (mov r8, r8)
 8000704:	46bd      	mov	sp, r7
 8000706:	b004      	add	sp, #16
 8000708:	bd80      	pop	{r7, pc}
	...

0800070c <Movimiento_simultaneo>:
void Movimiento_simultaneo(TypedefMotor Motor[],uint32_t velocidad )
{
 800070c:	b590      	push	{r4, r7, lr}
 800070e:	b095      	sub	sp, #84	; 0x54
 8000710:	af10      	add	r7, sp, #64	; 0x40
 8000712:	6078      	str	r0, [r7, #4]
 8000714:	6039      	str	r1, [r7, #0]
	for (int var = 0; var < Max_motors; ++var)
 8000716:	2300      	movs	r3, #0
 8000718:	60fb      	str	r3, [r7, #12]
 800071a:	e02f      	b.n	800077c <Movimiento_simultaneo+0x70>
	{

		if(Motor[var].Pasos>0)
 800071c:	68fa      	ldr	r2, [r7, #12]
 800071e:	0013      	movs	r3, r2
 8000720:	005b      	lsls	r3, r3, #1
 8000722:	189b      	adds	r3, r3, r2
 8000724:	00db      	lsls	r3, r3, #3
 8000726:	001a      	movs	r2, r3
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	189b      	adds	r3, r3, r2
 800072c:	691b      	ldr	r3, [r3, #16]
 800072e:	2b00      	cmp	r3, #0
 8000730:	d021      	beq.n	8000776 <Movimiento_simultaneo+0x6a>
		{
		Motor[var].Move=1;
 8000732:	68fa      	ldr	r2, [r7, #12]
 8000734:	0013      	movs	r3, r2
 8000736:	005b      	lsls	r3, r3, #1
 8000738:	189b      	adds	r3, r3, r2
 800073a:	00db      	lsls	r3, r3, #3
 800073c:	001a      	movs	r2, r3
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	189b      	adds	r3, r3, r2
 8000742:	7d1a      	ldrb	r2, [r3, #20]
 8000744:	2102      	movs	r1, #2
 8000746:	430a      	orrs	r2, r1
 8000748:	751a      	strb	r2, [r3, #20]
		HAL_GPIO_WritePin(Motor[var].Port_Step,Motor[var].Pin_Step,1);
 800074a:	68fa      	ldr	r2, [r7, #12]
 800074c:	0013      	movs	r3, r2
 800074e:	005b      	lsls	r3, r3, #1
 8000750:	189b      	adds	r3, r3, r2
 8000752:	00db      	lsls	r3, r3, #3
 8000754:	001a      	movs	r2, r3
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	189b      	adds	r3, r3, r2
 800075a:	6818      	ldr	r0, [r3, #0]
 800075c:	68fa      	ldr	r2, [r7, #12]
 800075e:	0013      	movs	r3, r2
 8000760:	005b      	lsls	r3, r3, #1
 8000762:	189b      	adds	r3, r3, r2
 8000764:	00db      	lsls	r3, r3, #3
 8000766:	001a      	movs	r2, r3
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	189b      	adds	r3, r3, r2
 800076c:	889b      	ldrh	r3, [r3, #4]
 800076e:	2201      	movs	r2, #1
 8000770:	0019      	movs	r1, r3
 8000772:	f001 fbe8 	bl	8001f46 <HAL_GPIO_WritePin>
	for (int var = 0; var < Max_motors; ++var)
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	3301      	adds	r3, #1
 800077a:	60fb      	str	r3, [r7, #12]
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	2b01      	cmp	r3, #1
 8000780:	ddcc      	ble.n	800071c <Movimiento_simultaneo+0x10>
		}
	}
	delay(htim6,velocidad);
 8000782:	4c38      	ldr	r4, [pc, #224]	; (8000864 <Movimiento_simultaneo+0x158>)
 8000784:	683b      	ldr	r3, [r7, #0]
 8000786:	930f      	str	r3, [sp, #60]	; 0x3c
 8000788:	466b      	mov	r3, sp
 800078a:	0018      	movs	r0, r3
 800078c:	0023      	movs	r3, r4
 800078e:	3310      	adds	r3, #16
 8000790:	223c      	movs	r2, #60	; 0x3c
 8000792:	0019      	movs	r1, r3
 8000794:	f004 fd1c 	bl	80051d0 <memcpy>
 8000798:	6820      	ldr	r0, [r4, #0]
 800079a:	6861      	ldr	r1, [r4, #4]
 800079c:	68a2      	ldr	r2, [r4, #8]
 800079e:	68e3      	ldr	r3, [r4, #12]
 80007a0:	f7ff ff4e 	bl	8000640 <delay>
	for (int var = 0; var < Max_motors; ++var) {
 80007a4:	2300      	movs	r3, #0
 80007a6:	60bb      	str	r3, [r7, #8]
 80007a8:	e043      	b.n	8000832 <Movimiento_simultaneo+0x126>
		if(Motor[var].Pasos>0)
 80007aa:	68ba      	ldr	r2, [r7, #8]
 80007ac:	0013      	movs	r3, r2
 80007ae:	005b      	lsls	r3, r3, #1
 80007b0:	189b      	adds	r3, r3, r2
 80007b2:	00db      	lsls	r3, r3, #3
 80007b4:	001a      	movs	r2, r3
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	189b      	adds	r3, r3, r2
 80007ba:	691b      	ldr	r3, [r3, #16]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d029      	beq.n	8000814 <Movimiento_simultaneo+0x108>
		{
	    HAL_GPIO_WritePin(Motor[var].Port_Step,Motor[var].Pin_Step,0);
 80007c0:	68ba      	ldr	r2, [r7, #8]
 80007c2:	0013      	movs	r3, r2
 80007c4:	005b      	lsls	r3, r3, #1
 80007c6:	189b      	adds	r3, r3, r2
 80007c8:	00db      	lsls	r3, r3, #3
 80007ca:	001a      	movs	r2, r3
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	189b      	adds	r3, r3, r2
 80007d0:	6818      	ldr	r0, [r3, #0]
 80007d2:	68ba      	ldr	r2, [r7, #8]
 80007d4:	0013      	movs	r3, r2
 80007d6:	005b      	lsls	r3, r3, #1
 80007d8:	189b      	adds	r3, r3, r2
 80007da:	00db      	lsls	r3, r3, #3
 80007dc:	001a      	movs	r2, r3
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	189b      	adds	r3, r3, r2
 80007e2:	889b      	ldrh	r3, [r3, #4]
 80007e4:	2200      	movs	r2, #0
 80007e6:	0019      	movs	r1, r3
 80007e8:	f001 fbad 	bl	8001f46 <HAL_GPIO_WritePin>
		Motor[var].Pasos=Motor[var].Pasos-1;
 80007ec:	68ba      	ldr	r2, [r7, #8]
 80007ee:	0013      	movs	r3, r2
 80007f0:	005b      	lsls	r3, r3, #1
 80007f2:	189b      	adds	r3, r3, r2
 80007f4:	00db      	lsls	r3, r3, #3
 80007f6:	001a      	movs	r2, r3
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	189b      	adds	r3, r3, r2
 80007fc:	6919      	ldr	r1, [r3, #16]
 80007fe:	68ba      	ldr	r2, [r7, #8]
 8000800:	0013      	movs	r3, r2
 8000802:	005b      	lsls	r3, r3, #1
 8000804:	189b      	adds	r3, r3, r2
 8000806:	00db      	lsls	r3, r3, #3
 8000808:	001a      	movs	r2, r3
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	189b      	adds	r3, r3, r2
 800080e:	1e4a      	subs	r2, r1, #1
 8000810:	611a      	str	r2, [r3, #16]
 8000812:	e00b      	b.n	800082c <Movimiento_simultaneo+0x120>
		}
		else
		{
			Motor[var].Move=0;
 8000814:	68ba      	ldr	r2, [r7, #8]
 8000816:	0013      	movs	r3, r2
 8000818:	005b      	lsls	r3, r3, #1
 800081a:	189b      	adds	r3, r3, r2
 800081c:	00db      	lsls	r3, r3, #3
 800081e:	001a      	movs	r2, r3
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	189b      	adds	r3, r3, r2
 8000824:	7d1a      	ldrb	r2, [r3, #20]
 8000826:	2102      	movs	r1, #2
 8000828:	438a      	bics	r2, r1
 800082a:	751a      	strb	r2, [r3, #20]
	for (int var = 0; var < Max_motors; ++var) {
 800082c:	68bb      	ldr	r3, [r7, #8]
 800082e:	3301      	adds	r3, #1
 8000830:	60bb      	str	r3, [r7, #8]
 8000832:	68bb      	ldr	r3, [r7, #8]
 8000834:	2b01      	cmp	r3, #1
 8000836:	ddb8      	ble.n	80007aa <Movimiento_simultaneo+0x9e>
		}
	}
	delay(htim6,velocidad);
 8000838:	4c0a      	ldr	r4, [pc, #40]	; (8000864 <Movimiento_simultaneo+0x158>)
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	930f      	str	r3, [sp, #60]	; 0x3c
 800083e:	466b      	mov	r3, sp
 8000840:	0018      	movs	r0, r3
 8000842:	0023      	movs	r3, r4
 8000844:	3310      	adds	r3, #16
 8000846:	223c      	movs	r2, #60	; 0x3c
 8000848:	0019      	movs	r1, r3
 800084a:	f004 fcc1 	bl	80051d0 <memcpy>
 800084e:	6820      	ldr	r0, [r4, #0]
 8000850:	6861      	ldr	r1, [r4, #4]
 8000852:	68a2      	ldr	r2, [r4, #8]
 8000854:	68e3      	ldr	r3, [r4, #12]
 8000856:	f7ff fef3 	bl	8000640 <delay>
}
 800085a:	46c0      	nop			; (mov r8, r8)
 800085c:	46bd      	mov	sp, r7
 800085e:	b005      	add	sp, #20
 8000860:	bd90      	pop	{r4, r7, pc}
 8000862:	46c0      	nop			; (mov r8, r8)
 8000864:	2000022c 	.word	0x2000022c

08000868 <Recibir>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Recibir(char *string)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
	if(strstr(string,"automatico"))
 8000870:	4a69      	ldr	r2, [pc, #420]	; (8000a18 <Recibir+0x1b0>)
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	0011      	movs	r1, r2
 8000876:	0018      	movs	r0, r3
 8000878:	f004 fcea 	bl	8005250 <strstr>
 800087c:	1e03      	subs	r3, r0, #0
 800087e:	d003      	beq.n	8000888 <Recibir+0x20>
	{
		Modo=Automatico;
 8000880:	4b66      	ldr	r3, [pc, #408]	; (8000a1c <Recibir+0x1b4>)
 8000882:	2200      	movs	r2, #0
 8000884:	601a      	str	r2, [r3, #0]
		Modo=Inicio;
		Alimentar=0;
		Next=0;
		var=0;
	}
}
 8000886:	e0c2      	b.n	8000a0e <Recibir+0x1a6>
	else if(strstr(string,"Alimentar"))
 8000888:	4a65      	ldr	r2, [pc, #404]	; (8000a20 <Recibir+0x1b8>)
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	0011      	movs	r1, r2
 800088e:	0018      	movs	r0, r3
 8000890:	f004 fcde 	bl	8005250 <strstr>
 8000894:	1e03      	subs	r3, r0, #0
 8000896:	d007      	beq.n	80008a8 <Recibir+0x40>
		Alimentar=1;
 8000898:	4b62      	ldr	r3, [pc, #392]	; (8000a24 <Recibir+0x1bc>)
 800089a:	2201      	movs	r2, #1
 800089c:	601a      	str	r2, [r3, #0]
		count=Tiempo;
 800089e:	4b62      	ldr	r3, [pc, #392]	; (8000a28 <Recibir+0x1c0>)
 80008a0:	681a      	ldr	r2, [r3, #0]
 80008a2:	4b62      	ldr	r3, [pc, #392]	; (8000a2c <Recibir+0x1c4>)
 80008a4:	601a      	str	r2, [r3, #0]
}
 80008a6:	e0b2      	b.n	8000a0e <Recibir+0x1a6>
	else if(strstr(string,"Detener"))
 80008a8:	4a61      	ldr	r2, [pc, #388]	; (8000a30 <Recibir+0x1c8>)
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	0011      	movs	r1, r2
 80008ae:	0018      	movs	r0, r3
 80008b0:	f004 fcce 	bl	8005250 <strstr>
 80008b4:	1e03      	subs	r3, r0, #0
 80008b6:	d003      	beq.n	80008c0 <Recibir+0x58>
		Alimentar=0;
 80008b8:	4b5a      	ldr	r3, [pc, #360]	; (8000a24 <Recibir+0x1bc>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	601a      	str	r2, [r3, #0]
}
 80008be:	e0a6      	b.n	8000a0e <Recibir+0x1a6>
	else if(strstr(string,"manual"))
 80008c0:	4a5c      	ldr	r2, [pc, #368]	; (8000a34 <Recibir+0x1cc>)
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	0011      	movs	r1, r2
 80008c6:	0018      	movs	r0, r3
 80008c8:	f004 fcc2 	bl	8005250 <strstr>
 80008cc:	1e03      	subs	r3, r0, #0
 80008ce:	d012      	beq.n	80008f6 <Recibir+0x8e>
		Orificio=FREE;
 80008d0:	4b59      	ldr	r3, [pc, #356]	; (8000a38 <Recibir+0x1d0>)
 80008d2:	2204      	movs	r2, #4
 80008d4:	601a      	str	r2, [r3, #0]
		Modo=Manual;
 80008d6:	4b51      	ldr	r3, [pc, #324]	; (8000a1c <Recibir+0x1b4>)
 80008d8:	2201      	movs	r2, #1
 80008da:	601a      	str	r2, [r3, #0]
		Config_motor_caracteristicas(&Motores[1],0,1);
 80008dc:	4b57      	ldr	r3, [pc, #348]	; (8000a3c <Recibir+0x1d4>)
 80008de:	2201      	movs	r2, #1
 80008e0:	2100      	movs	r1, #0
 80008e2:	0018      	movs	r0, r3
 80008e4:	f7ff fee8 	bl	80006b8 <Config_motor_caracteristicas>
		Config_motor_caracteristicas(&Motores[0],0,0);
 80008e8:	4b55      	ldr	r3, [pc, #340]	; (8000a40 <Recibir+0x1d8>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	2100      	movs	r1, #0
 80008ee:	0018      	movs	r0, r3
 80008f0:	f7ff fee2 	bl	80006b8 <Config_motor_caracteristicas>
}
 80008f4:	e08b      	b.n	8000a0e <Recibir+0x1a6>
	else if(strstr(string,"1"))
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	2131      	movs	r1, #49	; 0x31
 80008fa:	0018      	movs	r0, r3
 80008fc:	f004 fc9a 	bl	8005234 <strchr>
 8000900:	1e03      	subs	r3, r0, #0
 8000902:	d00f      	beq.n	8000924 <Recibir+0xbc>
		Orificio=Orificio1;
 8000904:	4b4c      	ldr	r3, [pc, #304]	; (8000a38 <Recibir+0x1d0>)
 8000906:	2200      	movs	r2, #0
 8000908:	601a      	str	r2, [r3, #0]
		Config_motor_caracteristicas(&Motores[1],0,1);
 800090a:	4b4c      	ldr	r3, [pc, #304]	; (8000a3c <Recibir+0x1d4>)
 800090c:	2201      	movs	r2, #1
 800090e:	2100      	movs	r1, #0
 8000910:	0018      	movs	r0, r3
 8000912:	f7ff fed1 	bl	80006b8 <Config_motor_caracteristicas>
		Config_motor_caracteristicas(&Motores[0],0,0);
 8000916:	4b4a      	ldr	r3, [pc, #296]	; (8000a40 <Recibir+0x1d8>)
 8000918:	2200      	movs	r2, #0
 800091a:	2100      	movs	r1, #0
 800091c:	0018      	movs	r0, r3
 800091e:	f7ff fecb 	bl	80006b8 <Config_motor_caracteristicas>
}
 8000922:	e074      	b.n	8000a0e <Recibir+0x1a6>
	else if(strstr(string,"2"))
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	2132      	movs	r1, #50	; 0x32
 8000928:	0018      	movs	r0, r3
 800092a:	f004 fc83 	bl	8005234 <strchr>
 800092e:	1e03      	subs	r3, r0, #0
 8000930:	d00f      	beq.n	8000952 <Recibir+0xea>
		Orificio=Orificio2;
 8000932:	4b41      	ldr	r3, [pc, #260]	; (8000a38 <Recibir+0x1d0>)
 8000934:	2201      	movs	r2, #1
 8000936:	601a      	str	r2, [r3, #0]
		Config_motor_caracteristicas(&Motores[1],0,1);
 8000938:	4b40      	ldr	r3, [pc, #256]	; (8000a3c <Recibir+0x1d4>)
 800093a:	2201      	movs	r2, #1
 800093c:	2100      	movs	r1, #0
 800093e:	0018      	movs	r0, r3
 8000940:	f7ff feba 	bl	80006b8 <Config_motor_caracteristicas>
		Config_motor_caracteristicas(&Motores[0],0,0);
 8000944:	4b3e      	ldr	r3, [pc, #248]	; (8000a40 <Recibir+0x1d8>)
 8000946:	2200      	movs	r2, #0
 8000948:	2100      	movs	r1, #0
 800094a:	0018      	movs	r0, r3
 800094c:	f7ff feb4 	bl	80006b8 <Config_motor_caracteristicas>
}
 8000950:	e05d      	b.n	8000a0e <Recibir+0x1a6>
	else if(strstr(string,"3"))
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	2133      	movs	r1, #51	; 0x33
 8000956:	0018      	movs	r0, r3
 8000958:	f004 fc6c 	bl	8005234 <strchr>
 800095c:	1e03      	subs	r3, r0, #0
 800095e:	d00f      	beq.n	8000980 <Recibir+0x118>
		Orificio=Orificio3;
 8000960:	4b35      	ldr	r3, [pc, #212]	; (8000a38 <Recibir+0x1d0>)
 8000962:	2202      	movs	r2, #2
 8000964:	601a      	str	r2, [r3, #0]
		Config_motor_caracteristicas(&Motores[1],0,1);
 8000966:	4b35      	ldr	r3, [pc, #212]	; (8000a3c <Recibir+0x1d4>)
 8000968:	2201      	movs	r2, #1
 800096a:	2100      	movs	r1, #0
 800096c:	0018      	movs	r0, r3
 800096e:	f7ff fea3 	bl	80006b8 <Config_motor_caracteristicas>
		Config_motor_caracteristicas(&Motores[0],0,0);
 8000972:	4b33      	ldr	r3, [pc, #204]	; (8000a40 <Recibir+0x1d8>)
 8000974:	2200      	movs	r2, #0
 8000976:	2100      	movs	r1, #0
 8000978:	0018      	movs	r0, r3
 800097a:	f7ff fe9d 	bl	80006b8 <Config_motor_caracteristicas>
}
 800097e:	e046      	b.n	8000a0e <Recibir+0x1a6>
	else if(strstr(string,"4"))
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	2134      	movs	r1, #52	; 0x34
 8000984:	0018      	movs	r0, r3
 8000986:	f004 fc55 	bl	8005234 <strchr>
 800098a:	1e03      	subs	r3, r0, #0
 800098c:	d00f      	beq.n	80009ae <Recibir+0x146>
		Orificio=Orificio4;
 800098e:	4b2a      	ldr	r3, [pc, #168]	; (8000a38 <Recibir+0x1d0>)
 8000990:	2203      	movs	r2, #3
 8000992:	601a      	str	r2, [r3, #0]
		Config_motor_caracteristicas(&Motores[1],0,1);
 8000994:	4b29      	ldr	r3, [pc, #164]	; (8000a3c <Recibir+0x1d4>)
 8000996:	2201      	movs	r2, #1
 8000998:	2100      	movs	r1, #0
 800099a:	0018      	movs	r0, r3
 800099c:	f7ff fe8c 	bl	80006b8 <Config_motor_caracteristicas>
		Config_motor_caracteristicas(&Motores[0],0,0);
 80009a0:	4b27      	ldr	r3, [pc, #156]	; (8000a40 <Recibir+0x1d8>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	2100      	movs	r1, #0
 80009a6:	0018      	movs	r0, r3
 80009a8:	f7ff fe86 	bl	80006b8 <Config_motor_caracteristicas>
}
 80009ac:	e02f      	b.n	8000a0e <Recibir+0x1a6>
	else if(strstr(string,"S"))
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	2153      	movs	r1, #83	; 0x53
 80009b2:	0018      	movs	r0, r3
 80009b4:	f004 fc3e 	bl	8005234 <strchr>
 80009b8:	1e03      	subs	r3, r0, #0
 80009ba:	d006      	beq.n	80009ca <Recibir+0x162>
		Tiempo+=30;
 80009bc:	4b1a      	ldr	r3, [pc, #104]	; (8000a28 <Recibir+0x1c0>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	331e      	adds	r3, #30
 80009c2:	001a      	movs	r2, r3
 80009c4:	4b18      	ldr	r3, [pc, #96]	; (8000a28 <Recibir+0x1c0>)
 80009c6:	601a      	str	r2, [r3, #0]
}
 80009c8:	e021      	b.n	8000a0e <Recibir+0x1a6>
	else if(strstr(string,"R"))
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	2152      	movs	r1, #82	; 0x52
 80009ce:	0018      	movs	r0, r3
 80009d0:	f004 fc30 	bl	8005234 <strchr>
 80009d4:	1e03      	subs	r3, r0, #0
 80009d6:	d006      	beq.n	80009e6 <Recibir+0x17e>
		Tiempo-=30;
 80009d8:	4b13      	ldr	r3, [pc, #76]	; (8000a28 <Recibir+0x1c0>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	3b1e      	subs	r3, #30
 80009de:	001a      	movs	r2, r3
 80009e0:	4b11      	ldr	r3, [pc, #68]	; (8000a28 <Recibir+0x1c0>)
 80009e2:	601a      	str	r2, [r3, #0]
}
 80009e4:	e013      	b.n	8000a0e <Recibir+0x1a6>
	else if(strstr(string,"principal"))
 80009e6:	4a17      	ldr	r2, [pc, #92]	; (8000a44 <Recibir+0x1dc>)
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	0011      	movs	r1, r2
 80009ec:	0018      	movs	r0, r3
 80009ee:	f004 fc2f 	bl	8005250 <strstr>
 80009f2:	1e03      	subs	r3, r0, #0
 80009f4:	d00b      	beq.n	8000a0e <Recibir+0x1a6>
		Modo=Inicio;
 80009f6:	4b09      	ldr	r3, [pc, #36]	; (8000a1c <Recibir+0x1b4>)
 80009f8:	2202      	movs	r2, #2
 80009fa:	601a      	str	r2, [r3, #0]
		Alimentar=0;
 80009fc:	4b09      	ldr	r3, [pc, #36]	; (8000a24 <Recibir+0x1bc>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	601a      	str	r2, [r3, #0]
		Next=0;
 8000a02:	4b11      	ldr	r3, [pc, #68]	; (8000a48 <Recibir+0x1e0>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	601a      	str	r2, [r3, #0]
		var=0;
 8000a08:	4b10      	ldr	r3, [pc, #64]	; (8000a4c <Recibir+0x1e4>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	601a      	str	r2, [r3, #0]
}
 8000a0e:	46c0      	nop			; (mov r8, r8)
 8000a10:	46bd      	mov	sp, r7
 8000a12:	b002      	add	sp, #8
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	46c0      	nop			; (mov r8, r8)
 8000a18:	08005a8c 	.word	0x08005a8c
 8000a1c:	2000014c 	.word	0x2000014c
 8000a20:	08005a98 	.word	0x08005a98
 8000a24:	20000148 	.word	0x20000148
 8000a28:	20000044 	.word	0x20000044
 8000a2c:	20000154 	.word	0x20000154
 8000a30:	08005aa4 	.word	0x08005aa4
 8000a34:	08005aac 	.word	0x08005aac
 8000a38:	20000144 	.word	0x20000144
 8000a3c:	20000184 	.word	0x20000184
 8000a40:	2000016c 	.word	0x2000016c
 8000a44:	08005ab4 	.word	0x08005ab4
 8000a48:	20000150 	.word	0x20000150
 8000a4c:	20000140 	.word	0x20000140

08000a50 <Move>:
void Move(int var)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
		if(!Motores[0].Move)
 8000a58:	4b2f      	ldr	r3, [pc, #188]	; (8000b18 <Move+0xc8>)
 8000a5a:	7d1b      	ldrb	r3, [r3, #20]
 8000a5c:	2202      	movs	r2, #2
 8000a5e:	4013      	ands	r3, r2
 8000a60:	b2db      	uxtb	r3, r3
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d124      	bne.n	8000ab0 <Move+0x60>
		  {
			if(Modo==Automatico)
 8000a66:	4b2d      	ldr	r3, [pc, #180]	; (8000b1c <Move+0xcc>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d10e      	bne.n	8000a8c <Move+0x3c>
			{
				  Config_motor_caracteristicas(&Motores[0],y[var],Motores[0].Dir);
 8000a6e:	4b2c      	ldr	r3, [pc, #176]	; (8000b20 <Move+0xd0>)
 8000a70:	687a      	ldr	r2, [r7, #4]
 8000a72:	0092      	lsls	r2, r2, #2
 8000a74:	58d1      	ldr	r1, [r2, r3]
 8000a76:	4b28      	ldr	r3, [pc, #160]	; (8000b18 <Move+0xc8>)
 8000a78:	7d1b      	ldrb	r3, [r3, #20]
 8000a7a:	07db      	lsls	r3, r3, #31
 8000a7c:	0fdb      	lsrs	r3, r3, #31
 8000a7e:	b2db      	uxtb	r3, r3
 8000a80:	001a      	movs	r2, r3
 8000a82:	4b25      	ldr	r3, [pc, #148]	; (8000b18 <Move+0xc8>)
 8000a84:	0018      	movs	r0, r3
 8000a86:	f7ff fe17 	bl	80006b8 <Config_motor_caracteristicas>
 8000a8a:	e011      	b.n	8000ab0 <Move+0x60>

			}
			else if(Modo==Manual)
 8000a8c:	4b23      	ldr	r3, [pc, #140]	; (8000b1c <Move+0xcc>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	2b01      	cmp	r3, #1
 8000a92:	d10d      	bne.n	8000ab0 <Move+0x60>
			{
				  Config_motor_caracteristicas(&Motores[0],ym[var],Motores[0].Dir);
 8000a94:	4b23      	ldr	r3, [pc, #140]	; (8000b24 <Move+0xd4>)
 8000a96:	687a      	ldr	r2, [r7, #4]
 8000a98:	0092      	lsls	r2, r2, #2
 8000a9a:	58d1      	ldr	r1, [r2, r3]
 8000a9c:	4b1e      	ldr	r3, [pc, #120]	; (8000b18 <Move+0xc8>)
 8000a9e:	7d1b      	ldrb	r3, [r3, #20]
 8000aa0:	07db      	lsls	r3, r3, #31
 8000aa2:	0fdb      	lsrs	r3, r3, #31
 8000aa4:	b2db      	uxtb	r3, r3
 8000aa6:	001a      	movs	r2, r3
 8000aa8:	4b1b      	ldr	r3, [pc, #108]	; (8000b18 <Move+0xc8>)
 8000aaa:	0018      	movs	r0, r3
 8000aac:	f7ff fe04 	bl	80006b8 <Config_motor_caracteristicas>

			}
		 }
		  if(!Motores[1].Move)
 8000ab0:	4b19      	ldr	r3, [pc, #100]	; (8000b18 <Move+0xc8>)
 8000ab2:	222c      	movs	r2, #44	; 0x2c
 8000ab4:	5c9b      	ldrb	r3, [r3, r2]
 8000ab6:	2202      	movs	r2, #2
 8000ab8:	4013      	ands	r3, r2
 8000aba:	b2db      	uxtb	r3, r3
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d126      	bne.n	8000b0e <Move+0xbe>
		  {
			  if(Modo==Automatico)
 8000ac0:	4b16      	ldr	r3, [pc, #88]	; (8000b1c <Move+0xcc>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d10f      	bne.n	8000ae8 <Move+0x98>
			  {
				  Config_motor_caracteristicas(&Motores[1],x[var],Motores[1].Dir);
 8000ac8:	4b17      	ldr	r3, [pc, #92]	; (8000b28 <Move+0xd8>)
 8000aca:	687a      	ldr	r2, [r7, #4]
 8000acc:	0092      	lsls	r2, r2, #2
 8000ace:	58d1      	ldr	r1, [r2, r3]
 8000ad0:	4b11      	ldr	r3, [pc, #68]	; (8000b18 <Move+0xc8>)
 8000ad2:	222c      	movs	r2, #44	; 0x2c
 8000ad4:	5c9b      	ldrb	r3, [r3, r2]
 8000ad6:	07db      	lsls	r3, r3, #31
 8000ad8:	0fdb      	lsrs	r3, r3, #31
 8000ada:	b2db      	uxtb	r3, r3
 8000adc:	001a      	movs	r2, r3
 8000ade:	4b13      	ldr	r3, [pc, #76]	; (8000b2c <Move+0xdc>)
 8000ae0:	0018      	movs	r0, r3
 8000ae2:	f7ff fde9 	bl	80006b8 <Config_motor_caracteristicas>
			  {
				  Config_motor_caracteristicas(&Motores[1],xm[var],Motores[1].Dir);
			  }

		  }
}
 8000ae6:	e012      	b.n	8000b0e <Move+0xbe>
			  else if(Modo==Manual)
 8000ae8:	4b0c      	ldr	r3, [pc, #48]	; (8000b1c <Move+0xcc>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	2b01      	cmp	r3, #1
 8000aee:	d10e      	bne.n	8000b0e <Move+0xbe>
				  Config_motor_caracteristicas(&Motores[1],xm[var],Motores[1].Dir);
 8000af0:	4b0f      	ldr	r3, [pc, #60]	; (8000b30 <Move+0xe0>)
 8000af2:	687a      	ldr	r2, [r7, #4]
 8000af4:	0092      	lsls	r2, r2, #2
 8000af6:	58d1      	ldr	r1, [r2, r3]
 8000af8:	4b07      	ldr	r3, [pc, #28]	; (8000b18 <Move+0xc8>)
 8000afa:	222c      	movs	r2, #44	; 0x2c
 8000afc:	5c9b      	ldrb	r3, [r3, r2]
 8000afe:	07db      	lsls	r3, r3, #31
 8000b00:	0fdb      	lsrs	r3, r3, #31
 8000b02:	b2db      	uxtb	r3, r3
 8000b04:	001a      	movs	r2, r3
 8000b06:	4b09      	ldr	r3, [pc, #36]	; (8000b2c <Move+0xdc>)
 8000b08:	0018      	movs	r0, r3
 8000b0a:	f7ff fdd5 	bl	80006b8 <Config_motor_caracteristicas>
}
 8000b0e:	46c0      	nop			; (mov r8, r8)
 8000b10:	46bd      	mov	sp, r7
 8000b12:	b002      	add	sp, #8
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	46c0      	nop			; (mov r8, r8)
 8000b18:	2000016c 	.word	0x2000016c
 8000b1c:	2000014c 	.word	0x2000014c
 8000b20:	20000014 	.word	0x20000014
 8000b24:	20000034 	.word	0x20000034
 8000b28:	20000004 	.word	0x20000004
 8000b2c:	20000184 	.word	0x20000184
 8000b30:	20000024 	.word	0x20000024

08000b34 <Transmit>:
void Transmit(UART_HandleTypeDef huart,char *string)
{
 8000b34:	b084      	sub	sp, #16
 8000b36:	b5b0      	push	{r4, r5, r7, lr}
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	2510      	movs	r5, #16
 8000b3c:	197c      	adds	r4, r7, r5
 8000b3e:	6020      	str	r0, [r4, #0]
 8000b40:	6061      	str	r1, [r4, #4]
 8000b42:	60a2      	str	r2, [r4, #8]
 8000b44:	60e3      	str	r3, [r4, #12]
	HAL_UART_Transmit(&huart,(uint8_t*)string,strlen(string),HAL_MAX_DELAY);
 8000b46:	24a0      	movs	r4, #160	; 0xa0
 8000b48:	193b      	adds	r3, r7, r4
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	0018      	movs	r0, r3
 8000b4e:	f7ff fad9 	bl	8000104 <strlen>
 8000b52:	0003      	movs	r3, r0
 8000b54:	b29a      	uxth	r2, r3
 8000b56:	2301      	movs	r3, #1
 8000b58:	425b      	negs	r3, r3
 8000b5a:	1939      	adds	r1, r7, r4
 8000b5c:	6809      	ldr	r1, [r1, #0]
 8000b5e:	1978      	adds	r0, r7, r5
 8000b60:	f002 fac6 	bl	80030f0 <HAL_UART_Transmit>
}
 8000b64:	46c0      	nop			; (mov r8, r8)
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bcb0      	pop	{r4, r5, r7}
 8000b6a:	bc08      	pop	{r3}
 8000b6c:	b004      	add	sp, #16
 8000b6e:	4718      	bx	r3

08000b70 <Enviar>:
void Enviar(int dato,char *string)
{
 8000b70:	b590      	push	{r4, r7, lr}
 8000b72:	b0b3      	sub	sp, #204	; 0xcc
 8000b74:	af22      	add	r7, sp, #136	; 0x88
 8000b76:	6078      	str	r0, [r7, #4]
 8000b78:	6039      	str	r1, [r7, #0]
	char mensaje[50]="\0";
 8000b7a:	240c      	movs	r4, #12
 8000b7c:	193b      	adds	r3, r7, r4
 8000b7e:	2200      	movs	r2, #0
 8000b80:	601a      	str	r2, [r3, #0]
 8000b82:	3304      	adds	r3, #4
 8000b84:	222e      	movs	r2, #46	; 0x2e
 8000b86:	2100      	movs	r1, #0
 8000b88:	0018      	movs	r0, r3
 8000b8a:	f004 fb2a 	bl	80051e2 <memset>
	if(strstr(string,"Reloj"))
 8000b8e:	4a30      	ldr	r2, [pc, #192]	; (8000c50 <Enviar+0xe0>)
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	0011      	movs	r1, r2
 8000b94:	0018      	movs	r0, r3
 8000b96:	f004 fb5b 	bl	8005250 <strstr>
 8000b9a:	1e03      	subs	r3, r0, #0
 8000b9c:	d006      	beq.n	8000bac <Enviar+0x3c>
	{
		sprintf(mensaje,"n1.val=%i",dato);
 8000b9e:	687a      	ldr	r2, [r7, #4]
 8000ba0:	492c      	ldr	r1, [pc, #176]	; (8000c54 <Enviar+0xe4>)
 8000ba2:	193b      	adds	r3, r7, r4
 8000ba4:	0018      	movs	r0, r3
 8000ba6:	f004 fb25 	bl	80051f4 <siprintf>
 8000baa:	e029      	b.n	8000c00 <Enviar+0x90>
	}
	else if(strstr(string,"Orificio"))
 8000bac:	4a2a      	ldr	r2, [pc, #168]	; (8000c58 <Enviar+0xe8>)
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	0011      	movs	r1, r2
 8000bb2:	0018      	movs	r0, r3
 8000bb4:	f004 fb4c 	bl	8005250 <strstr>
 8000bb8:	1e03      	subs	r3, r0, #0
 8000bba:	d007      	beq.n	8000bcc <Enviar+0x5c>
	{
		sprintf(mensaje,"n0.val=%i",dato);
 8000bbc:	687a      	ldr	r2, [r7, #4]
 8000bbe:	4927      	ldr	r1, [pc, #156]	; (8000c5c <Enviar+0xec>)
 8000bc0:	230c      	movs	r3, #12
 8000bc2:	18fb      	adds	r3, r7, r3
 8000bc4:	0018      	movs	r0, r3
 8000bc6:	f004 fb15 	bl	80051f4 <siprintf>
 8000bca:	e019      	b.n	8000c00 <Enviar+0x90>
	}
	else if(strstr(string,"FinishAuto"))
 8000bcc:	4a24      	ldr	r2, [pc, #144]	; (8000c60 <Enviar+0xf0>)
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	0011      	movs	r1, r2
 8000bd2:	0018      	movs	r0, r3
 8000bd4:	f004 fb3c 	bl	8005250 <strstr>
 8000bd8:	1e03      	subs	r3, r0, #0
 8000bda:	d011      	beq.n	8000c00 <Enviar+0x90>
	{
		if(dato==0)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d107      	bne.n	8000bf2 <Enviar+0x82>
		{
			sprintf(mensaje,"r0.val=%i",dato);
 8000be2:	687a      	ldr	r2, [r7, #4]
 8000be4:	491f      	ldr	r1, [pc, #124]	; (8000c64 <Enviar+0xf4>)
 8000be6:	230c      	movs	r3, #12
 8000be8:	18fb      	adds	r3, r7, r3
 8000bea:	0018      	movs	r0, r3
 8000bec:	f004 fb02 	bl	80051f4 <siprintf>
 8000bf0:	e006      	b.n	8000c00 <Enviar+0x90>
		}
		else
		{
			sprintf(mensaje,"r1.val=%i",dato);
 8000bf2:	687a      	ldr	r2, [r7, #4]
 8000bf4:	491c      	ldr	r1, [pc, #112]	; (8000c68 <Enviar+0xf8>)
 8000bf6:	230c      	movs	r3, #12
 8000bf8:	18fb      	adds	r3, r7, r3
 8000bfa:	0018      	movs	r0, r3
 8000bfc:	f004 fafa 	bl	80051f4 <siprintf>
		}

	}
	Transmit(huart1,mensaje);
 8000c00:	4c1a      	ldr	r4, [pc, #104]	; (8000c6c <Enviar+0xfc>)
 8000c02:	230c      	movs	r3, #12
 8000c04:	18fb      	adds	r3, r7, r3
 8000c06:	9320      	str	r3, [sp, #128]	; 0x80
 8000c08:	466b      	mov	r3, sp
 8000c0a:	0018      	movs	r0, r3
 8000c0c:	0023      	movs	r3, r4
 8000c0e:	3310      	adds	r3, #16
 8000c10:	2280      	movs	r2, #128	; 0x80
 8000c12:	0019      	movs	r1, r3
 8000c14:	f004 fadc 	bl	80051d0 <memcpy>
 8000c18:	6820      	ldr	r0, [r4, #0]
 8000c1a:	6861      	ldr	r1, [r4, #4]
 8000c1c:	68a2      	ldr	r2, [r4, #8]
 8000c1e:	68e3      	ldr	r3, [r4, #12]
 8000c20:	f7ff ff88 	bl	8000b34 <Transmit>
	Transmit(huart1,(char*)final);
 8000c24:	4c11      	ldr	r4, [pc, #68]	; (8000c6c <Enviar+0xfc>)
 8000c26:	4b12      	ldr	r3, [pc, #72]	; (8000c70 <Enviar+0x100>)
 8000c28:	9320      	str	r3, [sp, #128]	; 0x80
 8000c2a:	466b      	mov	r3, sp
 8000c2c:	0018      	movs	r0, r3
 8000c2e:	0023      	movs	r3, r4
 8000c30:	3310      	adds	r3, #16
 8000c32:	2280      	movs	r2, #128	; 0x80
 8000c34:	0019      	movs	r1, r3
 8000c36:	f004 facb 	bl	80051d0 <memcpy>
 8000c3a:	6820      	ldr	r0, [r4, #0]
 8000c3c:	6861      	ldr	r1, [r4, #4]
 8000c3e:	68a2      	ldr	r2, [r4, #8]
 8000c40:	68e3      	ldr	r3, [r4, #12]
 8000c42:	f7ff ff77 	bl	8000b34 <Transmit>

}
 8000c46:	46c0      	nop			; (mov r8, r8)
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	b011      	add	sp, #68	; 0x44
 8000c4c:	bd90      	pop	{r4, r7, pc}
 8000c4e:	46c0      	nop			; (mov r8, r8)
 8000c50:	08005ac0 	.word	0x08005ac0
 8000c54:	08005ac8 	.word	0x08005ac8
 8000c58:	08005ad4 	.word	0x08005ad4
 8000c5c:	08005ae0 	.word	0x08005ae0
 8000c60:	08005aec 	.word	0x08005aec
 8000c64:	08005af8 	.word	0x08005af8
 8000c68:	08005b04 	.word	0x08005b04
 8000c6c:	2000019c 	.word	0x2000019c
 8000c70:	20000048 	.word	0x20000048

08000c74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c74:	b590      	push	{r4, r7, lr}
 8000c76:	b085      	sub	sp, #20
 8000c78:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
   HAL_Init();
 8000c7a:	f000 fd9d 	bl	80017b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c7e:	f000 f9fd 	bl	800107c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c82:	f000 fb4b 	bl	800131c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000c86:	f000 fafb 	bl	8001280 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8000c8a:	f000 fa6f 	bl	800116c <MX_TIM6_Init>
  MX_USART1_UART_Init();
 8000c8e:	f000 faa9 	bl	80011e4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  Modo=Inicio;
 8000c92:	4bc6      	ldr	r3, [pc, #792]	; (8000fac <main+0x338>)
 8000c94:	2202      	movs	r2, #2
 8000c96:	601a      	str	r2, [r3, #0]
  Orificio=FREE;
 8000c98:	4bc5      	ldr	r3, [pc, #788]	; (8000fb0 <main+0x33c>)
 8000c9a:	2204      	movs	r2, #4
 8000c9c:	601a      	str	r2, [r3, #0]
  HAL_UART_Receive_IT(&huart1,&Rx,1);
 8000c9e:	49c5      	ldr	r1, [pc, #788]	; (8000fb4 <main+0x340>)
 8000ca0:	4bc5      	ldr	r3, [pc, #788]	; (8000fb8 <main+0x344>)
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	0018      	movs	r0, r3
 8000ca6:	f002 facf 	bl	8003248 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start(&htim6);
 8000caa:	4bc4      	ldr	r3, [pc, #784]	; (8000fbc <main+0x348>)
 8000cac:	0018      	movs	r0, r3
 8000cae:	f002 f887 	bl	8002dc0 <HAL_TIM_Base_Start>
  Config_motor_Pin(&Motores[0],X_STEP_GPIO_Port,X_DIR_GPIO_Port,X_STEP_Pin,X_DIR_Pin);
 8000cb2:	2380      	movs	r3, #128	; 0x80
 8000cb4:	00db      	lsls	r3, r3, #3
 8000cb6:	4cc2      	ldr	r4, [pc, #776]	; (8000fc0 <main+0x34c>)
 8000cb8:	22a0      	movs	r2, #160	; 0xa0
 8000cba:	05d1      	lsls	r1, r2, #23
 8000cbc:	48c1      	ldr	r0, [pc, #772]	; (8000fc4 <main+0x350>)
 8000cbe:	2210      	movs	r2, #16
 8000cc0:	9200      	str	r2, [sp, #0]
 8000cc2:	0022      	movs	r2, r4
 8000cc4:	f7ff fcdc 	bl	8000680 <Config_motor_Pin>
  Config_motor_Pin(&Motores[1],Y_STEP_GPIO_Port,Y_DIR_GPIO_Port,Y_STEP_Pin,Y_DIR_Pin);
 8000cc8:	4abd      	ldr	r2, [pc, #756]	; (8000fc0 <main+0x34c>)
 8000cca:	49bd      	ldr	r1, [pc, #756]	; (8000fc0 <main+0x34c>)
 8000ccc:	48be      	ldr	r0, [pc, #760]	; (8000fc8 <main+0x354>)
 8000cce:	2380      	movs	r3, #128	; 0x80
 8000cd0:	01db      	lsls	r3, r3, #7
 8000cd2:	9300      	str	r3, [sp, #0]
 8000cd4:	2308      	movs	r3, #8
 8000cd6:	f7ff fcd3 	bl	8000680 <Config_motor_Pin>
  uint32_t start = HAL_GetTick();
 8000cda:	f000 fde9 	bl	80018b0 <HAL_GetTick>
 8000cde:	0003      	movs	r3, r0
 8000ce0:	607b      	str	r3, [r7, #4]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(Alimentar)
 8000ce2:	4bba      	ldr	r3, [pc, #744]	; (8000fcc <main+0x358>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d024      	beq.n	8000d34 <main+0xc0>
	  {
		Movimiento_simultaneo(Motores,Velocidad);
 8000cea:	4bb9      	ldr	r3, [pc, #740]	; (8000fd0 <main+0x35c>)
 8000cec:	681a      	ldr	r2, [r3, #0]
 8000cee:	4bb5      	ldr	r3, [pc, #724]	; (8000fc4 <main+0x350>)
 8000cf0:	0011      	movs	r1, r2
 8000cf2:	0018      	movs	r0, r3
 8000cf4:	f7ff fd0a 	bl	800070c <Movimiento_simultaneo>
		if(Modo==Automatico)
 8000cf8:	4bac      	ldr	r3, [pc, #688]	; (8000fac <main+0x338>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d10e      	bne.n	8000d1e <main+0xaa>
		{
		Enviar(var,"Orificio");
 8000d00:	4bb4      	ldr	r3, [pc, #720]	; (8000fd4 <main+0x360>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4ab4      	ldr	r2, [pc, #720]	; (8000fd8 <main+0x364>)
 8000d06:	0011      	movs	r1, r2
 8000d08:	0018      	movs	r0, r3
 8000d0a:	f7ff ff31 	bl	8000b70 <Enviar>
		Enviar(count,"Reloj");
 8000d0e:	4bb3      	ldr	r3, [pc, #716]	; (8000fdc <main+0x368>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	4ab3      	ldr	r2, [pc, #716]	; (8000fe0 <main+0x36c>)
 8000d14:	0011      	movs	r1, r2
 8000d16:	0018      	movs	r0, r3
 8000d18:	f7ff ff2a 	bl	8000b70 <Enviar>
 8000d1c:	e00a      	b.n	8000d34 <main+0xc0>
		}
		else if(Modo==Manual)
 8000d1e:	4ba3      	ldr	r3, [pc, #652]	; (8000fac <main+0x338>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	2b01      	cmp	r3, #1
 8000d24:	d106      	bne.n	8000d34 <main+0xc0>
		{
		Enviar(count, "Reloj");
 8000d26:	4bad      	ldr	r3, [pc, #692]	; (8000fdc <main+0x368>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	4aad      	ldr	r2, [pc, #692]	; (8000fe0 <main+0x36c>)
 8000d2c:	0011      	movs	r1, r2
 8000d2e:	0018      	movs	r0, r3
 8000d30:	f7ff ff1e 	bl	8000b70 <Enviar>
		}
	  }
	switch (Modo) {
 8000d34:	4b9d      	ldr	r3, [pc, #628]	; (8000fac <main+0x338>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	2b02      	cmp	r3, #2
 8000d3a:	d100      	bne.n	8000d3e <main+0xca>
 8000d3c:	e15c      	b.n	8000ff8 <main+0x384>
 8000d3e:	dd00      	ble.n	8000d42 <main+0xce>
 8000d40:	e18b      	b.n	800105a <main+0x3e6>
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d003      	beq.n	8000d4e <main+0xda>
 8000d46:	2b01      	cmp	r3, #1
 8000d48:	d100      	bne.n	8000d4c <main+0xd8>
 8000d4a:	e096      	b.n	8000e7a <main+0x206>
					Config_motor_caracteristicas(&Motores[1],1,0);
				}
			}
			break;
		default:
			break;
 8000d4c:	e185      	b.n	800105a <main+0x3e6>
			if(Alimentar&&!Next)
 8000d4e:	4b9f      	ldr	r3, [pc, #636]	; (8000fcc <main+0x358>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d04d      	beq.n	8000df2 <main+0x17e>
 8000d56:	4ba3      	ldr	r3, [pc, #652]	; (8000fe4 <main+0x370>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d149      	bne.n	8000df2 <main+0x17e>
				if(var==Orificio1)
 8000d5e:	4b9d      	ldr	r3, [pc, #628]	; (8000fd4 <main+0x360>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d10c      	bne.n	8000d80 <main+0x10c>
					Config_motor_caracteristicas(&Motores[0],0,0);//Y
 8000d66:	4b97      	ldr	r3, [pc, #604]	; (8000fc4 <main+0x350>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	0018      	movs	r0, r3
 8000d6e:	f7ff fca3 	bl	80006b8 <Config_motor_caracteristicas>
					Config_motor_caracteristicas(&Motores[1],0,1);//X
 8000d72:	4b95      	ldr	r3, [pc, #596]	; (8000fc8 <main+0x354>)
 8000d74:	2201      	movs	r2, #1
 8000d76:	2100      	movs	r1, #0
 8000d78:	0018      	movs	r0, r3
 8000d7a:	f7ff fc9d 	bl	80006b8 <Config_motor_caracteristicas>
 8000d7e:	e014      	b.n	8000daa <main+0x136>
				else if(var==Orificio3)
 8000d80:	4b94      	ldr	r3, [pc, #592]	; (8000fd4 <main+0x360>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	2b02      	cmp	r3, #2
 8000d86:	d106      	bne.n	8000d96 <main+0x122>
					Config_motor_caracteristicas(&Motores[0],0,0);//Y
 8000d88:	4b8e      	ldr	r3, [pc, #568]	; (8000fc4 <main+0x350>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	0018      	movs	r0, r3
 8000d90:	f7ff fc92 	bl	80006b8 <Config_motor_caracteristicas>
 8000d94:	e009      	b.n	8000daa <main+0x136>
				else if(var==Orificio4)
 8000d96:	4b8f      	ldr	r3, [pc, #572]	; (8000fd4 <main+0x360>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	2b03      	cmp	r3, #3
 8000d9c:	d105      	bne.n	8000daa <main+0x136>
					Config_motor_caracteristicas(&Motores[1],0,0);//X
 8000d9e:	4b8a      	ldr	r3, [pc, #552]	; (8000fc8 <main+0x354>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	2100      	movs	r1, #0
 8000da4:	0018      	movs	r0, r3
 8000da6:	f7ff fc87 	bl	80006b8 <Config_motor_caracteristicas>
				if(var>Orificio4)
 8000daa:	4b8a      	ldr	r3, [pc, #552]	; (8000fd4 <main+0x360>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	2b03      	cmp	r3, #3
 8000db0:	dd13      	ble.n	8000dda <main+0x166>
					Enviar(0,"FinishAuto");
 8000db2:	4b8d      	ldr	r3, [pc, #564]	; (8000fe8 <main+0x374>)
 8000db4:	0019      	movs	r1, r3
 8000db6:	2000      	movs	r0, #0
 8000db8:	f7ff feda 	bl	8000b70 <Enviar>
					Enviar(1,"FinishAuto");
 8000dbc:	4b8a      	ldr	r3, [pc, #552]	; (8000fe8 <main+0x374>)
 8000dbe:	0019      	movs	r1, r3
 8000dc0:	2001      	movs	r0, #1
 8000dc2:	f7ff fed5 	bl	8000b70 <Enviar>
					Modo=Inicio;
 8000dc6:	4b79      	ldr	r3, [pc, #484]	; (8000fac <main+0x338>)
 8000dc8:	2202      	movs	r2, #2
 8000dca:	601a      	str	r2, [r3, #0]
					Alimentar=0;
 8000dcc:	4b7f      	ldr	r3, [pc, #508]	; (8000fcc <main+0x358>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	601a      	str	r2, [r3, #0]
					var=0;
 8000dd2:	4b80      	ldr	r3, [pc, #512]	; (8000fd4 <main+0x360>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]
				if(var>Orificio4)
 8000dd8:	e04e      	b.n	8000e78 <main+0x204>
					Move(var++);
 8000dda:	4b7e      	ldr	r3, [pc, #504]	; (8000fd4 <main+0x360>)
 8000ddc:	681a      	ldr	r2, [r3, #0]
 8000dde:	1c51      	adds	r1, r2, #1
 8000de0:	4b7c      	ldr	r3, [pc, #496]	; (8000fd4 <main+0x360>)
 8000de2:	6019      	str	r1, [r3, #0]
 8000de4:	0010      	movs	r0, r2
 8000de6:	f7ff fe33 	bl	8000a50 <Move>
					Next=1;
 8000dea:	4b7e      	ldr	r3, [pc, #504]	; (8000fe4 <main+0x370>)
 8000dec:	2201      	movs	r2, #1
 8000dee:	601a      	str	r2, [r3, #0]
				if(var>Orificio4)
 8000df0:	e042      	b.n	8000e78 <main+0x204>
			else if(Next&&!Motores[0].Move&&!Motores[1].Move)
 8000df2:	4b7c      	ldr	r3, [pc, #496]	; (8000fe4 <main+0x370>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d100      	bne.n	8000dfc <main+0x188>
 8000dfa:	e130      	b.n	800105e <main+0x3ea>
 8000dfc:	4b71      	ldr	r3, [pc, #452]	; (8000fc4 <main+0x350>)
 8000dfe:	7d1b      	ldrb	r3, [r3, #20]
 8000e00:	2202      	movs	r2, #2
 8000e02:	4013      	ands	r3, r2
 8000e04:	b2db      	uxtb	r3, r3
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d000      	beq.n	8000e0c <main+0x198>
 8000e0a:	e128      	b.n	800105e <main+0x3ea>
 8000e0c:	4b6d      	ldr	r3, [pc, #436]	; (8000fc4 <main+0x350>)
 8000e0e:	222c      	movs	r2, #44	; 0x2c
 8000e10:	5c9b      	ldrb	r3, [r3, r2]
 8000e12:	2202      	movs	r2, #2
 8000e14:	4013      	ands	r3, r2
 8000e16:	b2db      	uxtb	r3, r3
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d000      	beq.n	8000e1e <main+0x1aa>
 8000e1c:	e11f      	b.n	800105e <main+0x3ea>
				if(!((HAL_GetTick() - start) < 1000))
 8000e1e:	f000 fd47 	bl	80018b0 <HAL_GetTick>
 8000e22:	0002      	movs	r2, r0
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	1ad2      	subs	r2, r2, r3
 8000e28:	23fa      	movs	r3, #250	; 0xfa
 8000e2a:	009b      	lsls	r3, r3, #2
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	d316      	bcc.n	8000e5e <main+0x1ea>
					if(Alimentar)
 8000e30:	4b66      	ldr	r3, [pc, #408]	; (8000fcc <main+0x358>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d100      	bne.n	8000e3a <main+0x1c6>
 8000e38:	e111      	b.n	800105e <main+0x3ea>
					  start = HAL_GetTick();
 8000e3a:	f000 fd39 	bl	80018b0 <HAL_GetTick>
 8000e3e:	0003      	movs	r3, r0
 8000e40:	607b      	str	r3, [r7, #4]
					  count--;
 8000e42:	4b66      	ldr	r3, [pc, #408]	; (8000fdc <main+0x368>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	1e5a      	subs	r2, r3, #1
 8000e48:	4b64      	ldr	r3, [pc, #400]	; (8000fdc <main+0x368>)
 8000e4a:	601a      	str	r2, [r3, #0]
					  flash=!flash;
 8000e4c:	4b67      	ldr	r3, [pc, #412]	; (8000fec <main+0x378>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	425a      	negs	r2, r3
 8000e52:	4153      	adcs	r3, r2
 8000e54:	b2db      	uxtb	r3, r3
 8000e56:	001a      	movs	r2, r3
 8000e58:	4b64      	ldr	r3, [pc, #400]	; (8000fec <main+0x378>)
 8000e5a:	601a      	str	r2, [r3, #0]
			break;
 8000e5c:	e0ff      	b.n	800105e <main+0x3ea>
				else if(count<=0)
 8000e5e:	4b5f      	ldr	r3, [pc, #380]	; (8000fdc <main+0x368>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	dd00      	ble.n	8000e68 <main+0x1f4>
 8000e66:	e0fa      	b.n	800105e <main+0x3ea>
					Next=0;
 8000e68:	4b5e      	ldr	r3, [pc, #376]	; (8000fe4 <main+0x370>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	601a      	str	r2, [r3, #0]
					count=Tiempo;
 8000e6e:	4b60      	ldr	r3, [pc, #384]	; (8000ff0 <main+0x37c>)
 8000e70:	681a      	ldr	r2, [r3, #0]
 8000e72:	4b5a      	ldr	r3, [pc, #360]	; (8000fdc <main+0x368>)
 8000e74:	601a      	str	r2, [r3, #0]
			break;
 8000e76:	e0f2      	b.n	800105e <main+0x3ea>
 8000e78:	e0f1      	b.n	800105e <main+0x3ea>
			if(Alimentar&&!Next)
 8000e7a:	4b54      	ldr	r3, [pc, #336]	; (8000fcc <main+0x358>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d011      	beq.n	8000ea6 <main+0x232>
 8000e82:	4b58      	ldr	r3, [pc, #352]	; (8000fe4 <main+0x370>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d10d      	bne.n	8000ea6 <main+0x232>
				if(Orificio!=FREE)
 8000e8a:	4b49      	ldr	r3, [pc, #292]	; (8000fb0 <main+0x33c>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	2b04      	cmp	r3, #4
 8000e90:	d100      	bne.n	8000e94 <main+0x220>
 8000e92:	e089      	b.n	8000fa8 <main+0x334>
				Move(Orificio);
 8000e94:	4b46      	ldr	r3, [pc, #280]	; (8000fb0 <main+0x33c>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	0018      	movs	r0, r3
 8000e9a:	f7ff fdd9 	bl	8000a50 <Move>
				Next=1;
 8000e9e:	4b51      	ldr	r3, [pc, #324]	; (8000fe4 <main+0x370>)
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	601a      	str	r2, [r3, #0]
				if(Orificio!=FREE)
 8000ea4:	e080      	b.n	8000fa8 <main+0x334>
			else if(Next&&!Motores[0].Move&&!Motores[1].Move)
 8000ea6:	4b4f      	ldr	r3, [pc, #316]	; (8000fe4 <main+0x370>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d100      	bne.n	8000eb0 <main+0x23c>
 8000eae:	e0d8      	b.n	8001062 <main+0x3ee>
 8000eb0:	4b44      	ldr	r3, [pc, #272]	; (8000fc4 <main+0x350>)
 8000eb2:	7d1b      	ldrb	r3, [r3, #20]
 8000eb4:	2202      	movs	r2, #2
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d000      	beq.n	8000ec0 <main+0x24c>
 8000ebe:	e0d0      	b.n	8001062 <main+0x3ee>
 8000ec0:	4b40      	ldr	r3, [pc, #256]	; (8000fc4 <main+0x350>)
 8000ec2:	222c      	movs	r2, #44	; 0x2c
 8000ec4:	5c9b      	ldrb	r3, [r3, r2]
 8000ec6:	2202      	movs	r2, #2
 8000ec8:	4013      	ands	r3, r2
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d000      	beq.n	8000ed2 <main+0x25e>
 8000ed0:	e0c7      	b.n	8001062 <main+0x3ee>
				if(!((HAL_GetTick() - start) < 1000))
 8000ed2:	f000 fced 	bl	80018b0 <HAL_GetTick>
 8000ed6:	0002      	movs	r2, r0
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	1ad2      	subs	r2, r2, r3
 8000edc:	23fa      	movs	r3, #250	; 0xfa
 8000ede:	009b      	lsls	r3, r3, #2
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	d30e      	bcc.n	8000f02 <main+0x28e>
					if(Alimentar)
 8000ee4:	4b39      	ldr	r3, [pc, #228]	; (8000fcc <main+0x358>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d100      	bne.n	8000eee <main+0x27a>
 8000eec:	e0b9      	b.n	8001062 <main+0x3ee>
						start = HAL_GetTick();
 8000eee:	f000 fcdf 	bl	80018b0 <HAL_GetTick>
 8000ef2:	0003      	movs	r3, r0
 8000ef4:	607b      	str	r3, [r7, #4]
						count--;
 8000ef6:	4b39      	ldr	r3, [pc, #228]	; (8000fdc <main+0x368>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	1e5a      	subs	r2, r3, #1
 8000efc:	4b37      	ldr	r3, [pc, #220]	; (8000fdc <main+0x368>)
 8000efe:	601a      	str	r2, [r3, #0]
			break;
 8000f00:	e0af      	b.n	8001062 <main+0x3ee>
				else if(count<=0)
 8000f02:	4b36      	ldr	r3, [pc, #216]	; (8000fdc <main+0x368>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	dd00      	ble.n	8000f0c <main+0x298>
 8000f0a:	e0aa      	b.n	8001062 <main+0x3ee>
					Next=0;
 8000f0c:	4b35      	ldr	r3, [pc, #212]	; (8000fe4 <main+0x370>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	601a      	str	r2, [r3, #0]
					Alimentar=0;
 8000f12:	4b2e      	ldr	r3, [pc, #184]	; (8000fcc <main+0x358>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	601a      	str	r2, [r3, #0]
					Orificio=FREE;
 8000f18:	4b25      	ldr	r3, [pc, #148]	; (8000fb0 <main+0x33c>)
 8000f1a:	2204      	movs	r2, #4
 8000f1c:	601a      	str	r2, [r3, #0]
						Movimiento_simultaneo(Motores,Velocidad);
 8000f1e:	4b2c      	ldr	r3, [pc, #176]	; (8000fd0 <main+0x35c>)
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	4b28      	ldr	r3, [pc, #160]	; (8000fc4 <main+0x350>)
 8000f24:	0011      	movs	r1, r2
 8000f26:	0018      	movs	r0, r3
 8000f28:	f7ff fbf0 	bl	800070c <Movimiento_simultaneo>
						if(!Motores[0].Move)//Y
 8000f2c:	4b25      	ldr	r3, [pc, #148]	; (8000fc4 <main+0x350>)
 8000f2e:	7d1b      	ldrb	r3, [r3, #20]
 8000f30:	2202      	movs	r2, #2
 8000f32:	4013      	ands	r3, r2
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d10c      	bne.n	8000f54 <main+0x2e0>
							if(!HAL_GPIO_ReadPin(Limit_y_GPIO_Port,Limit_y_Pin))
 8000f3a:	4b2e      	ldr	r3, [pc, #184]	; (8000ff4 <main+0x380>)
 8000f3c:	2108      	movs	r1, #8
 8000f3e:	0018      	movs	r0, r3
 8000f40:	f000 ffe4 	bl	8001f0c <HAL_GPIO_ReadPin>
 8000f44:	1e03      	subs	r3, r0, #0
 8000f46:	d105      	bne.n	8000f54 <main+0x2e0>
								Config_motor_caracteristicas(&Motores[0],1,1);
 8000f48:	4b1e      	ldr	r3, [pc, #120]	; (8000fc4 <main+0x350>)
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	2101      	movs	r1, #1
 8000f4e:	0018      	movs	r0, r3
 8000f50:	f7ff fbb2 	bl	80006b8 <Config_motor_caracteristicas>
						if(!Motores[1].Move)//X
 8000f54:	4b1b      	ldr	r3, [pc, #108]	; (8000fc4 <main+0x350>)
 8000f56:	222c      	movs	r2, #44	; 0x2c
 8000f58:	5c9b      	ldrb	r3, [r3, r2]
 8000f5a:	2202      	movs	r2, #2
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d10c      	bne.n	8000f7e <main+0x30a>
							if(!HAL_GPIO_ReadPin(Limit_x_GPIO_Port,Limit_x_Pin))
 8000f64:	4b23      	ldr	r3, [pc, #140]	; (8000ff4 <main+0x380>)
 8000f66:	2104      	movs	r1, #4
 8000f68:	0018      	movs	r0, r3
 8000f6a:	f000 ffcf 	bl	8001f0c <HAL_GPIO_ReadPin>
 8000f6e:	1e03      	subs	r3, r0, #0
 8000f70:	d105      	bne.n	8000f7e <main+0x30a>
								Config_motor_caracteristicas(&Motores[1],1,0);
 8000f72:	4b15      	ldr	r3, [pc, #84]	; (8000fc8 <main+0x354>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	2101      	movs	r1, #1
 8000f78:	0018      	movs	r0, r3
 8000f7a:	f7ff fb9d 	bl	80006b8 <Config_motor_caracteristicas>
						if(HAL_GPIO_ReadPin(Limit_y_GPIO_Port,Limit_y_Pin)&&HAL_GPIO_ReadPin(Limit_x_GPIO_Port,Limit_x_Pin))
 8000f7e:	4b1d      	ldr	r3, [pc, #116]	; (8000ff4 <main+0x380>)
 8000f80:	2108      	movs	r1, #8
 8000f82:	0018      	movs	r0, r3
 8000f84:	f000 ffc2 	bl	8001f0c <HAL_GPIO_ReadPin>
 8000f88:	1e03      	subs	r3, r0, #0
 8000f8a:	d0c8      	beq.n	8000f1e <main+0x2aa>
 8000f8c:	4b19      	ldr	r3, [pc, #100]	; (8000ff4 <main+0x380>)
 8000f8e:	2104      	movs	r1, #4
 8000f90:	0018      	movs	r0, r3
 8000f92:	f000 ffbb 	bl	8001f0c <HAL_GPIO_ReadPin>
 8000f96:	1e03      	subs	r3, r0, #0
 8000f98:	d100      	bne.n	8000f9c <main+0x328>
						Movimiento_simultaneo(Motores,Velocidad);
 8000f9a:	e7c0      	b.n	8000f1e <main+0x2aa>
							break;
 8000f9c:	46c0      	nop			; (mov r8, r8)
					count=Tiempo;
 8000f9e:	4b14      	ldr	r3, [pc, #80]	; (8000ff0 <main+0x37c>)
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	4b0e      	ldr	r3, [pc, #56]	; (8000fdc <main+0x368>)
 8000fa4:	601a      	str	r2, [r3, #0]
			break;
 8000fa6:	e05c      	b.n	8001062 <main+0x3ee>
 8000fa8:	e05b      	b.n	8001062 <main+0x3ee>
 8000faa:	46c0      	nop			; (mov r8, r8)
 8000fac:	2000014c 	.word	0x2000014c
 8000fb0:	20000144 	.word	0x20000144
 8000fb4:	2000013c 	.word	0x2000013c
 8000fb8:	2000019c 	.word	0x2000019c
 8000fbc:	2000022c 	.word	0x2000022c
 8000fc0:	50000400 	.word	0x50000400
 8000fc4:	2000016c 	.word	0x2000016c
 8000fc8:	20000184 	.word	0x20000184
 8000fcc:	20000148 	.word	0x20000148
 8000fd0:	20000000 	.word	0x20000000
 8000fd4:	20000140 	.word	0x20000140
 8000fd8:	08005ad4 	.word	0x08005ad4
 8000fdc:	20000154 	.word	0x20000154
 8000fe0:	08005ac0 	.word	0x08005ac0
 8000fe4:	20000150 	.word	0x20000150
 8000fe8:	08005aec 	.word	0x08005aec
 8000fec:	20000158 	.word	0x20000158
 8000ff0:	20000044 	.word	0x20000044
 8000ff4:	50000800 	.word	0x50000800
			Movimiento_simultaneo(Motores,Velocidad);
 8000ff8:	4b1c      	ldr	r3, [pc, #112]	; (800106c <main+0x3f8>)
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	4b1c      	ldr	r3, [pc, #112]	; (8001070 <main+0x3fc>)
 8000ffe:	0011      	movs	r1, r2
 8001000:	0018      	movs	r0, r3
 8001002:	f7ff fb83 	bl	800070c <Movimiento_simultaneo>
			if(!Motores[0].Move)//Y
 8001006:	4b1a      	ldr	r3, [pc, #104]	; (8001070 <main+0x3fc>)
 8001008:	7d1b      	ldrb	r3, [r3, #20]
 800100a:	2202      	movs	r2, #2
 800100c:	4013      	ands	r3, r2
 800100e:	b2db      	uxtb	r3, r3
 8001010:	2b00      	cmp	r3, #0
 8001012:	d10c      	bne.n	800102e <main+0x3ba>
				if(!HAL_GPIO_ReadPin(Limit_y_GPIO_Port,Limit_y_Pin))
 8001014:	4b17      	ldr	r3, [pc, #92]	; (8001074 <main+0x400>)
 8001016:	2108      	movs	r1, #8
 8001018:	0018      	movs	r0, r3
 800101a:	f000 ff77 	bl	8001f0c <HAL_GPIO_ReadPin>
 800101e:	1e03      	subs	r3, r0, #0
 8001020:	d105      	bne.n	800102e <main+0x3ba>
					Config_motor_caracteristicas(&Motores[0],1,1);
 8001022:	4b13      	ldr	r3, [pc, #76]	; (8001070 <main+0x3fc>)
 8001024:	2201      	movs	r2, #1
 8001026:	2101      	movs	r1, #1
 8001028:	0018      	movs	r0, r3
 800102a:	f7ff fb45 	bl	80006b8 <Config_motor_caracteristicas>
			if(!Motores[1].Move)//X
 800102e:	4b10      	ldr	r3, [pc, #64]	; (8001070 <main+0x3fc>)
 8001030:	222c      	movs	r2, #44	; 0x2c
 8001032:	5c9b      	ldrb	r3, [r3, r2]
 8001034:	2202      	movs	r2, #2
 8001036:	4013      	ands	r3, r2
 8001038:	b2db      	uxtb	r3, r3
 800103a:	2b00      	cmp	r3, #0
 800103c:	d113      	bne.n	8001066 <main+0x3f2>
				if(!HAL_GPIO_ReadPin(Limit_x_GPIO_Port,Limit_x_Pin))
 800103e:	4b0d      	ldr	r3, [pc, #52]	; (8001074 <main+0x400>)
 8001040:	2104      	movs	r1, #4
 8001042:	0018      	movs	r0, r3
 8001044:	f000 ff62 	bl	8001f0c <HAL_GPIO_ReadPin>
 8001048:	1e03      	subs	r3, r0, #0
 800104a:	d10c      	bne.n	8001066 <main+0x3f2>
					Config_motor_caracteristicas(&Motores[1],1,0);
 800104c:	4b0a      	ldr	r3, [pc, #40]	; (8001078 <main+0x404>)
 800104e:	2200      	movs	r2, #0
 8001050:	2101      	movs	r1, #1
 8001052:	0018      	movs	r0, r3
 8001054:	f7ff fb30 	bl	80006b8 <Config_motor_caracteristicas>
			break;
 8001058:	e005      	b.n	8001066 <main+0x3f2>
			break;
 800105a:	46c0      	nop			; (mov r8, r8)
 800105c:	e641      	b.n	8000ce2 <main+0x6e>
			break;
 800105e:	46c0      	nop			; (mov r8, r8)
 8001060:	e63f      	b.n	8000ce2 <main+0x6e>
			break;
 8001062:	46c0      	nop			; (mov r8, r8)
 8001064:	e63d      	b.n	8000ce2 <main+0x6e>
			break;
 8001066:	46c0      	nop			; (mov r8, r8)
	  if(Alimentar)
 8001068:	e63b      	b.n	8000ce2 <main+0x6e>
 800106a:	46c0      	nop			; (mov r8, r8)
 800106c:	20000000 	.word	0x20000000
 8001070:	2000016c 	.word	0x2000016c
 8001074:	50000800 	.word	0x50000800
 8001078:	20000184 	.word	0x20000184

0800107c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800107c:	b590      	push	{r4, r7, lr}
 800107e:	b0a1      	sub	sp, #132	; 0x84
 8001080:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001082:	2448      	movs	r4, #72	; 0x48
 8001084:	193b      	adds	r3, r7, r4
 8001086:	0018      	movs	r0, r3
 8001088:	2338      	movs	r3, #56	; 0x38
 800108a:	001a      	movs	r2, r3
 800108c:	2100      	movs	r1, #0
 800108e:	f004 f8a8 	bl	80051e2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001092:	2338      	movs	r3, #56	; 0x38
 8001094:	18fb      	adds	r3, r7, r3
 8001096:	0018      	movs	r0, r3
 8001098:	2310      	movs	r3, #16
 800109a:	001a      	movs	r2, r3
 800109c:	2100      	movs	r1, #0
 800109e:	f004 f8a0 	bl	80051e2 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010a2:	1d3b      	adds	r3, r7, #4
 80010a4:	0018      	movs	r0, r3
 80010a6:	2334      	movs	r3, #52	; 0x34
 80010a8:	001a      	movs	r2, r3
 80010aa:	2100      	movs	r1, #0
 80010ac:	f004 f899 	bl	80051e2 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010b0:	2380      	movs	r3, #128	; 0x80
 80010b2:	009b      	lsls	r3, r3, #2
 80010b4:	0018      	movs	r0, r3
 80010b6:	f000 ff63 	bl	8001f80 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010ba:	193b      	adds	r3, r7, r4
 80010bc:	2202      	movs	r2, #2
 80010be:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010c0:	193b      	adds	r3, r7, r4
 80010c2:	2280      	movs	r2, #128	; 0x80
 80010c4:	0052      	lsls	r2, r2, #1
 80010c6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80010c8:	0021      	movs	r1, r4
 80010ca:	187b      	adds	r3, r7, r1
 80010cc:	2200      	movs	r2, #0
 80010ce:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010d0:	187b      	adds	r3, r7, r1
 80010d2:	2240      	movs	r2, #64	; 0x40
 80010d4:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010d6:	187b      	adds	r3, r7, r1
 80010d8:	2202      	movs	r2, #2
 80010da:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010dc:	187b      	adds	r3, r7, r1
 80010de:	2202      	movs	r2, #2
 80010e0:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 80010e2:	187b      	adds	r3, r7, r1
 80010e4:	2210      	movs	r2, #16
 80010e6:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 25;
 80010e8:	187b      	adds	r3, r7, r1
 80010ea:	2219      	movs	r2, #25
 80010ec:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010ee:	187b      	adds	r3, r7, r1
 80010f0:	2280      	movs	r2, #128	; 0x80
 80010f2:	0292      	lsls	r2, r2, #10
 80010f4:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80010f6:	187b      	adds	r3, r7, r1
 80010f8:	2280      	movs	r2, #128	; 0x80
 80010fa:	0492      	lsls	r2, r2, #18
 80010fc:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 80010fe:	187b      	adds	r3, r7, r1
 8001100:	22c0      	movs	r2, #192	; 0xc0
 8001102:	05d2      	lsls	r2, r2, #23
 8001104:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001106:	187b      	adds	r3, r7, r1
 8001108:	0018      	movs	r0, r3
 800110a:	f000 ff85 	bl	8002018 <HAL_RCC_OscConfig>
 800110e:	1e03      	subs	r3, r0, #0
 8001110:	d001      	beq.n	8001116 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001112:	f000 f9db 	bl	80014cc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001116:	2138      	movs	r1, #56	; 0x38
 8001118:	187b      	adds	r3, r7, r1
 800111a:	2207      	movs	r2, #7
 800111c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800111e:	187b      	adds	r3, r7, r1
 8001120:	2202      	movs	r2, #2
 8001122:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001124:	187b      	adds	r3, r7, r1
 8001126:	2200      	movs	r2, #0
 8001128:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800112a:	187b      	adds	r3, r7, r1
 800112c:	2200      	movs	r2, #0
 800112e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001130:	187b      	adds	r3, r7, r1
 8001132:	2102      	movs	r1, #2
 8001134:	0018      	movs	r0, r3
 8001136:	f001 fa89 	bl	800264c <HAL_RCC_ClockConfig>
 800113a:	1e03      	subs	r3, r0, #0
 800113c:	d001      	beq.n	8001142 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800113e:	f000 f9c5 	bl	80014cc <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
 8001142:	1d3b      	adds	r3, r7, #4
 8001144:	2203      	movs	r2, #3
 8001146:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001148:	1d3b      	adds	r3, r7, #4
 800114a:	2200      	movs	r2, #0
 800114c:	605a      	str	r2, [r3, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800114e:	1d3b      	adds	r3, r7, #4
 8001150:	2200      	movs	r2, #0
 8001152:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001154:	1d3b      	adds	r3, r7, #4
 8001156:	0018      	movs	r0, r3
 8001158:	f001 fc22 	bl	80029a0 <HAL_RCCEx_PeriphCLKConfig>
 800115c:	1e03      	subs	r3, r0, #0
 800115e:	d001      	beq.n	8001164 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8001160:	f000 f9b4 	bl	80014cc <Error_Handler>
  }
}
 8001164:	46c0      	nop			; (mov r8, r8)
 8001166:	46bd      	mov	sp, r7
 8001168:	b021      	add	sp, #132	; 0x84
 800116a:	bd90      	pop	{r4, r7, pc}

0800116c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b084      	sub	sp, #16
 8001170:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001172:	1d3b      	adds	r3, r7, #4
 8001174:	0018      	movs	r0, r3
 8001176:	230c      	movs	r3, #12
 8001178:	001a      	movs	r2, r3
 800117a:	2100      	movs	r1, #0
 800117c:	f004 f831 	bl	80051e2 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001180:	4b15      	ldr	r3, [pc, #84]	; (80011d8 <MX_TIM6_Init+0x6c>)
 8001182:	4a16      	ldr	r2, [pc, #88]	; (80011dc <MX_TIM6_Init+0x70>)
 8001184:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 50-1;
 8001186:	4b14      	ldr	r3, [pc, #80]	; (80011d8 <MX_TIM6_Init+0x6c>)
 8001188:	2231      	movs	r2, #49	; 0x31
 800118a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800118c:	4b12      	ldr	r3, [pc, #72]	; (80011d8 <MX_TIM6_Init+0x6c>)
 800118e:	2200      	movs	r2, #0
 8001190:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 0xffff-1;
 8001192:	4b11      	ldr	r3, [pc, #68]	; (80011d8 <MX_TIM6_Init+0x6c>)
 8001194:	4a12      	ldr	r2, [pc, #72]	; (80011e0 <MX_TIM6_Init+0x74>)
 8001196:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001198:	4b0f      	ldr	r3, [pc, #60]	; (80011d8 <MX_TIM6_Init+0x6c>)
 800119a:	2200      	movs	r2, #0
 800119c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800119e:	4b0e      	ldr	r3, [pc, #56]	; (80011d8 <MX_TIM6_Init+0x6c>)
 80011a0:	0018      	movs	r0, r3
 80011a2:	f001 fdb5 	bl	8002d10 <HAL_TIM_Base_Init>
 80011a6:	1e03      	subs	r3, r0, #0
 80011a8:	d001      	beq.n	80011ae <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80011aa:	f000 f98f 	bl	80014cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011ae:	1d3b      	adds	r3, r7, #4
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011b4:	1d3b      	adds	r3, r7, #4
 80011b6:	2200      	movs	r2, #0
 80011b8:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80011ba:	1d3a      	adds	r2, r7, #4
 80011bc:	4b06      	ldr	r3, [pc, #24]	; (80011d8 <MX_TIM6_Init+0x6c>)
 80011be:	0011      	movs	r1, r2
 80011c0:	0018      	movs	r0, r3
 80011c2:	f001 fed1 	bl	8002f68 <HAL_TIMEx_MasterConfigSynchronization>
 80011c6:	1e03      	subs	r3, r0, #0
 80011c8:	d001      	beq.n	80011ce <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 80011ca:	f000 f97f 	bl	80014cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80011ce:	46c0      	nop			; (mov r8, r8)
 80011d0:	46bd      	mov	sp, r7
 80011d2:	b004      	add	sp, #16
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	46c0      	nop			; (mov r8, r8)
 80011d8:	2000022c 	.word	0x2000022c
 80011dc:	40001000 	.word	0x40001000
 80011e0:	0000fffe 	.word	0x0000fffe

080011e4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80011e8:	4b23      	ldr	r3, [pc, #140]	; (8001278 <MX_USART1_UART_Init+0x94>)
 80011ea:	4a24      	ldr	r2, [pc, #144]	; (800127c <MX_USART1_UART_Init+0x98>)
 80011ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80011ee:	4b22      	ldr	r3, [pc, #136]	; (8001278 <MX_USART1_UART_Init+0x94>)
 80011f0:	22e1      	movs	r2, #225	; 0xe1
 80011f2:	0252      	lsls	r2, r2, #9
 80011f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011f6:	4b20      	ldr	r3, [pc, #128]	; (8001278 <MX_USART1_UART_Init+0x94>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80011fc:	4b1e      	ldr	r3, [pc, #120]	; (8001278 <MX_USART1_UART_Init+0x94>)
 80011fe:	2200      	movs	r2, #0
 8001200:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001202:	4b1d      	ldr	r3, [pc, #116]	; (8001278 <MX_USART1_UART_Init+0x94>)
 8001204:	2200      	movs	r2, #0
 8001206:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001208:	4b1b      	ldr	r3, [pc, #108]	; (8001278 <MX_USART1_UART_Init+0x94>)
 800120a:	220c      	movs	r2, #12
 800120c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800120e:	4b1a      	ldr	r3, [pc, #104]	; (8001278 <MX_USART1_UART_Init+0x94>)
 8001210:	2200      	movs	r2, #0
 8001212:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001214:	4b18      	ldr	r3, [pc, #96]	; (8001278 <MX_USART1_UART_Init+0x94>)
 8001216:	2200      	movs	r2, #0
 8001218:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800121a:	4b17      	ldr	r3, [pc, #92]	; (8001278 <MX_USART1_UART_Init+0x94>)
 800121c:	2200      	movs	r2, #0
 800121e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001220:	4b15      	ldr	r3, [pc, #84]	; (8001278 <MX_USART1_UART_Init+0x94>)
 8001222:	2200      	movs	r2, #0
 8001224:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001226:	4b14      	ldr	r3, [pc, #80]	; (8001278 <MX_USART1_UART_Init+0x94>)
 8001228:	2200      	movs	r2, #0
 800122a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800122c:	4b12      	ldr	r3, [pc, #72]	; (8001278 <MX_USART1_UART_Init+0x94>)
 800122e:	0018      	movs	r0, r3
 8001230:	f001 ff08 	bl	8003044 <HAL_UART_Init>
 8001234:	1e03      	subs	r3, r0, #0
 8001236:	d001      	beq.n	800123c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001238:	f000 f948 	bl	80014cc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800123c:	4b0e      	ldr	r3, [pc, #56]	; (8001278 <MX_USART1_UART_Init+0x94>)
 800123e:	2100      	movs	r1, #0
 8001240:	0018      	movs	r0, r3
 8001242:	f003 febb 	bl	8004fbc <HAL_UARTEx_SetTxFifoThreshold>
 8001246:	1e03      	subs	r3, r0, #0
 8001248:	d001      	beq.n	800124e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800124a:	f000 f93f 	bl	80014cc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800124e:	4b0a      	ldr	r3, [pc, #40]	; (8001278 <MX_USART1_UART_Init+0x94>)
 8001250:	2100      	movs	r1, #0
 8001252:	0018      	movs	r0, r3
 8001254:	f003 fef2 	bl	800503c <HAL_UARTEx_SetRxFifoThreshold>
 8001258:	1e03      	subs	r3, r0, #0
 800125a:	d001      	beq.n	8001260 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800125c:	f000 f936 	bl	80014cc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001260:	4b05      	ldr	r3, [pc, #20]	; (8001278 <MX_USART1_UART_Init+0x94>)
 8001262:	0018      	movs	r0, r3
 8001264:	f003 fe70 	bl	8004f48 <HAL_UARTEx_DisableFifoMode>
 8001268:	1e03      	subs	r3, r0, #0
 800126a:	d001      	beq.n	8001270 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800126c:	f000 f92e 	bl	80014cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001270:	46c0      	nop			; (mov r8, r8)
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	46c0      	nop			; (mov r8, r8)
 8001278:	2000019c 	.word	0x2000019c
 800127c:	40013800 	.word	0x40013800

08001280 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001284:	4b23      	ldr	r3, [pc, #140]	; (8001314 <MX_USART2_UART_Init+0x94>)
 8001286:	4a24      	ldr	r2, [pc, #144]	; (8001318 <MX_USART2_UART_Init+0x98>)
 8001288:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800128a:	4b22      	ldr	r3, [pc, #136]	; (8001314 <MX_USART2_UART_Init+0x94>)
 800128c:	22e1      	movs	r2, #225	; 0xe1
 800128e:	0252      	lsls	r2, r2, #9
 8001290:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001292:	4b20      	ldr	r3, [pc, #128]	; (8001314 <MX_USART2_UART_Init+0x94>)
 8001294:	2200      	movs	r2, #0
 8001296:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001298:	4b1e      	ldr	r3, [pc, #120]	; (8001314 <MX_USART2_UART_Init+0x94>)
 800129a:	2200      	movs	r2, #0
 800129c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800129e:	4b1d      	ldr	r3, [pc, #116]	; (8001314 <MX_USART2_UART_Init+0x94>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012a4:	4b1b      	ldr	r3, [pc, #108]	; (8001314 <MX_USART2_UART_Init+0x94>)
 80012a6:	220c      	movs	r2, #12
 80012a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012aa:	4b1a      	ldr	r3, [pc, #104]	; (8001314 <MX_USART2_UART_Init+0x94>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012b0:	4b18      	ldr	r3, [pc, #96]	; (8001314 <MX_USART2_UART_Init+0x94>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012b6:	4b17      	ldr	r3, [pc, #92]	; (8001314 <MX_USART2_UART_Init+0x94>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80012bc:	4b15      	ldr	r3, [pc, #84]	; (8001314 <MX_USART2_UART_Init+0x94>)
 80012be:	2200      	movs	r2, #0
 80012c0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012c2:	4b14      	ldr	r3, [pc, #80]	; (8001314 <MX_USART2_UART_Init+0x94>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012c8:	4b12      	ldr	r3, [pc, #72]	; (8001314 <MX_USART2_UART_Init+0x94>)
 80012ca:	0018      	movs	r0, r3
 80012cc:	f001 feba 	bl	8003044 <HAL_UART_Init>
 80012d0:	1e03      	subs	r3, r0, #0
 80012d2:	d001      	beq.n	80012d8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80012d4:	f000 f8fa 	bl	80014cc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012d8:	4b0e      	ldr	r3, [pc, #56]	; (8001314 <MX_USART2_UART_Init+0x94>)
 80012da:	2100      	movs	r1, #0
 80012dc:	0018      	movs	r0, r3
 80012de:	f003 fe6d 	bl	8004fbc <HAL_UARTEx_SetTxFifoThreshold>
 80012e2:	1e03      	subs	r3, r0, #0
 80012e4:	d001      	beq.n	80012ea <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80012e6:	f000 f8f1 	bl	80014cc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012ea:	4b0a      	ldr	r3, [pc, #40]	; (8001314 <MX_USART2_UART_Init+0x94>)
 80012ec:	2100      	movs	r1, #0
 80012ee:	0018      	movs	r0, r3
 80012f0:	f003 fea4 	bl	800503c <HAL_UARTEx_SetRxFifoThreshold>
 80012f4:	1e03      	subs	r3, r0, #0
 80012f6:	d001      	beq.n	80012fc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80012f8:	f000 f8e8 	bl	80014cc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80012fc:	4b05      	ldr	r3, [pc, #20]	; (8001314 <MX_USART2_UART_Init+0x94>)
 80012fe:	0018      	movs	r0, r3
 8001300:	f003 fe22 	bl	8004f48 <HAL_UARTEx_DisableFifoMode>
 8001304:	1e03      	subs	r3, r0, #0
 8001306:	d001      	beq.n	800130c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001308:	f000 f8e0 	bl	80014cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800130c:	46c0      	nop			; (mov r8, r8)
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	46c0      	nop			; (mov r8, r8)
 8001314:	20000278 	.word	0x20000278
 8001318:	40004400 	.word	0x40004400

0800131c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800131c:	b590      	push	{r4, r7, lr}
 800131e:	b08b      	sub	sp, #44	; 0x2c
 8001320:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001322:	2414      	movs	r4, #20
 8001324:	193b      	adds	r3, r7, r4
 8001326:	0018      	movs	r0, r3
 8001328:	2314      	movs	r3, #20
 800132a:	001a      	movs	r2, r3
 800132c:	2100      	movs	r1, #0
 800132e:	f003 ff58 	bl	80051e2 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001332:	4b45      	ldr	r3, [pc, #276]	; (8001448 <MX_GPIO_Init+0x12c>)
 8001334:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001336:	4b44      	ldr	r3, [pc, #272]	; (8001448 <MX_GPIO_Init+0x12c>)
 8001338:	2104      	movs	r1, #4
 800133a:	430a      	orrs	r2, r1
 800133c:	635a      	str	r2, [r3, #52]	; 0x34
 800133e:	4b42      	ldr	r3, [pc, #264]	; (8001448 <MX_GPIO_Init+0x12c>)
 8001340:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001342:	2204      	movs	r2, #4
 8001344:	4013      	ands	r3, r2
 8001346:	613b      	str	r3, [r7, #16]
 8001348:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800134a:	4b3f      	ldr	r3, [pc, #252]	; (8001448 <MX_GPIO_Init+0x12c>)
 800134c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800134e:	4b3e      	ldr	r3, [pc, #248]	; (8001448 <MX_GPIO_Init+0x12c>)
 8001350:	2120      	movs	r1, #32
 8001352:	430a      	orrs	r2, r1
 8001354:	635a      	str	r2, [r3, #52]	; 0x34
 8001356:	4b3c      	ldr	r3, [pc, #240]	; (8001448 <MX_GPIO_Init+0x12c>)
 8001358:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800135a:	2220      	movs	r2, #32
 800135c:	4013      	ands	r3, r2
 800135e:	60fb      	str	r3, [r7, #12]
 8001360:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001362:	4b39      	ldr	r3, [pc, #228]	; (8001448 <MX_GPIO_Init+0x12c>)
 8001364:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001366:	4b38      	ldr	r3, [pc, #224]	; (8001448 <MX_GPIO_Init+0x12c>)
 8001368:	2101      	movs	r1, #1
 800136a:	430a      	orrs	r2, r1
 800136c:	635a      	str	r2, [r3, #52]	; 0x34
 800136e:	4b36      	ldr	r3, [pc, #216]	; (8001448 <MX_GPIO_Init+0x12c>)
 8001370:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001372:	2201      	movs	r2, #1
 8001374:	4013      	ands	r3, r2
 8001376:	60bb      	str	r3, [r7, #8]
 8001378:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800137a:	4b33      	ldr	r3, [pc, #204]	; (8001448 <MX_GPIO_Init+0x12c>)
 800137c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800137e:	4b32      	ldr	r3, [pc, #200]	; (8001448 <MX_GPIO_Init+0x12c>)
 8001380:	2102      	movs	r1, #2
 8001382:	430a      	orrs	r2, r1
 8001384:	635a      	str	r2, [r3, #52]	; 0x34
 8001386:	4b30      	ldr	r3, [pc, #192]	; (8001448 <MX_GPIO_Init+0x12c>)
 8001388:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800138a:	2202      	movs	r2, #2
 800138c:	4013      	ands	r3, r2
 800138e:	607b      	str	r3, [r7, #4]
 8001390:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_GREEN_Pin|Enable_Pin|X_STEP_Pin, GPIO_PIN_RESET);
 8001392:	23c4      	movs	r3, #196	; 0xc4
 8001394:	00d9      	lsls	r1, r3, #3
 8001396:	23a0      	movs	r3, #160	; 0xa0
 8001398:	05db      	lsls	r3, r3, #23
 800139a:	2200      	movs	r2, #0
 800139c:	0018      	movs	r0, r3
 800139e:	f000 fdd2 	bl	8001f46 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Y_DIR_Pin|Y_STEP_Pin|X_DIR_Pin|Z_STEP_Pin, GPIO_PIN_RESET);
 80013a2:	492a      	ldr	r1, [pc, #168]	; (800144c <MX_GPIO_Init+0x130>)
 80013a4:	4b2a      	ldr	r3, [pc, #168]	; (8001450 <MX_GPIO_Init+0x134>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	0018      	movs	r0, r3
 80013aa:	f000 fdcc 	bl	8001f46 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Limit_x_Pin Limit_y_Pin */
  GPIO_InitStruct.Pin = Limit_x_Pin|Limit_y_Pin;
 80013ae:	193b      	adds	r3, r7, r4
 80013b0:	220c      	movs	r2, #12
 80013b2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013b4:	193b      	adds	r3, r7, r4
 80013b6:	2200      	movs	r2, #0
 80013b8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80013ba:	193b      	adds	r3, r7, r4
 80013bc:	2202      	movs	r2, #2
 80013be:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013c0:	193b      	adds	r3, r7, r4
 80013c2:	4a24      	ldr	r2, [pc, #144]	; (8001454 <MX_GPIO_Init+0x138>)
 80013c4:	0019      	movs	r1, r3
 80013c6:	0010      	movs	r0, r2
 80013c8:	f000 fc3c 	bl	8001c44 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80013cc:	193b      	adds	r3, r7, r4
 80013ce:	2220      	movs	r2, #32
 80013d0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d2:	193b      	adds	r3, r7, r4
 80013d4:	2201      	movs	r2, #1
 80013d6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d8:	193b      	adds	r3, r7, r4
 80013da:	2200      	movs	r2, #0
 80013dc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013de:	193b      	adds	r3, r7, r4
 80013e0:	2202      	movs	r2, #2
 80013e2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80013e4:	193a      	adds	r2, r7, r4
 80013e6:	23a0      	movs	r3, #160	; 0xa0
 80013e8:	05db      	lsls	r3, r3, #23
 80013ea:	0011      	movs	r1, r2
 80013ec:	0018      	movs	r0, r3
 80013ee:	f000 fc29 	bl	8001c44 <HAL_GPIO_Init>

  /*Configure GPIO pins : Y_DIR_Pin Y_STEP_Pin X_DIR_Pin Z_STEP_Pin */
  GPIO_InitStruct.Pin = Y_DIR_Pin|Y_STEP_Pin|X_DIR_Pin|Z_STEP_Pin;
 80013f2:	193b      	adds	r3, r7, r4
 80013f4:	4a15      	ldr	r2, [pc, #84]	; (800144c <MX_GPIO_Init+0x130>)
 80013f6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013f8:	193b      	adds	r3, r7, r4
 80013fa:	2201      	movs	r2, #1
 80013fc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fe:	193b      	adds	r3, r7, r4
 8001400:	2200      	movs	r2, #0
 8001402:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001404:	193b      	adds	r3, r7, r4
 8001406:	2200      	movs	r2, #0
 8001408:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800140a:	193b      	adds	r3, r7, r4
 800140c:	4a10      	ldr	r2, [pc, #64]	; (8001450 <MX_GPIO_Init+0x134>)
 800140e:	0019      	movs	r1, r3
 8001410:	0010      	movs	r0, r2
 8001412:	f000 fc17 	bl	8001c44 <HAL_GPIO_Init>

  /*Configure GPIO pins : Enable_Pin X_STEP_Pin */
  GPIO_InitStruct.Pin = Enable_Pin|X_STEP_Pin;
 8001416:	0021      	movs	r1, r4
 8001418:	187b      	adds	r3, r7, r1
 800141a:	22c0      	movs	r2, #192	; 0xc0
 800141c:	00d2      	lsls	r2, r2, #3
 800141e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001420:	187b      	adds	r3, r7, r1
 8001422:	2201      	movs	r2, #1
 8001424:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001426:	187b      	adds	r3, r7, r1
 8001428:	2200      	movs	r2, #0
 800142a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800142c:	187b      	adds	r3, r7, r1
 800142e:	2200      	movs	r2, #0
 8001430:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001432:	187a      	adds	r2, r7, r1
 8001434:	23a0      	movs	r3, #160	; 0xa0
 8001436:	05db      	lsls	r3, r3, #23
 8001438:	0011      	movs	r1, r2
 800143a:	0018      	movs	r0, r3
 800143c:	f000 fc02 	bl	8001c44 <HAL_GPIO_Init>

}
 8001440:	46c0      	nop			; (mov r8, r8)
 8001442:	46bd      	mov	sp, r7
 8001444:	b00b      	add	sp, #44	; 0x2c
 8001446:	bd90      	pop	{r4, r7, pc}
 8001448:	40021000 	.word	0x40021000
 800144c:	00004038 	.word	0x00004038
 8001450:	50000400 	.word	0x50000400
 8001454:	50000800 	.word	0x50000800

08001458 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
	 static int i=0;
	 if(Rx=='.')
 8001460:	4b16      	ldr	r3, [pc, #88]	; (80014bc <HAL_UART_RxCpltCallback+0x64>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	2b2e      	cmp	r3, #46	; 0x2e
 8001466:	d10c      	bne.n	8001482 <HAL_UART_RxCpltCallback+0x2a>
	 {
		 buff[i]='\0';
 8001468:	4b15      	ldr	r3, [pc, #84]	; (80014c0 <HAL_UART_RxCpltCallback+0x68>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a15      	ldr	r2, [pc, #84]	; (80014c4 <HAL_UART_RxCpltCallback+0x6c>)
 800146e:	2100      	movs	r1, #0
 8001470:	54d1      	strb	r1, [r2, r3]
		 Recibir(buff);
 8001472:	4b14      	ldr	r3, [pc, #80]	; (80014c4 <HAL_UART_RxCpltCallback+0x6c>)
 8001474:	0018      	movs	r0, r3
 8001476:	f7ff f9f7 	bl	8000868 <Recibir>
		 i=0;
 800147a:	4b11      	ldr	r3, [pc, #68]	; (80014c0 <HAL_UART_RxCpltCallback+0x68>)
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	e012      	b.n	80014a8 <HAL_UART_RxCpltCallback+0x50>
	 }
	 else if(i<100)
 8001482:	4b0f      	ldr	r3, [pc, #60]	; (80014c0 <HAL_UART_RxCpltCallback+0x68>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	2b63      	cmp	r3, #99	; 0x63
 8001488:	dc0b      	bgt.n	80014a2 <HAL_UART_RxCpltCallback+0x4a>
	 {
		 buff[i]=Rx;
 800148a:	4b0d      	ldr	r3, [pc, #52]	; (80014c0 <HAL_UART_RxCpltCallback+0x68>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a0b      	ldr	r2, [pc, #44]	; (80014bc <HAL_UART_RxCpltCallback+0x64>)
 8001490:	7811      	ldrb	r1, [r2, #0]
 8001492:	4a0c      	ldr	r2, [pc, #48]	; (80014c4 <HAL_UART_RxCpltCallback+0x6c>)
 8001494:	54d1      	strb	r1, [r2, r3]
		 i++;
 8001496:	4b0a      	ldr	r3, [pc, #40]	; (80014c0 <HAL_UART_RxCpltCallback+0x68>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	1c5a      	adds	r2, r3, #1
 800149c:	4b08      	ldr	r3, [pc, #32]	; (80014c0 <HAL_UART_RxCpltCallback+0x68>)
 800149e:	601a      	str	r2, [r3, #0]
 80014a0:	e002      	b.n	80014a8 <HAL_UART_RxCpltCallback+0x50>
	 }
	 else
	 {
		 i=0;
 80014a2:	4b07      	ldr	r3, [pc, #28]	; (80014c0 <HAL_UART_RxCpltCallback+0x68>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]
	 }

	HAL_UART_Receive_IT(&huart1,&Rx,1);
 80014a8:	4904      	ldr	r1, [pc, #16]	; (80014bc <HAL_UART_RxCpltCallback+0x64>)
 80014aa:	4b07      	ldr	r3, [pc, #28]	; (80014c8 <HAL_UART_RxCpltCallback+0x70>)
 80014ac:	2201      	movs	r2, #1
 80014ae:	0018      	movs	r0, r3
 80014b0:	f001 feca 	bl	8003248 <HAL_UART_Receive_IT>
}
 80014b4:	46c0      	nop			; (mov r8, r8)
 80014b6:	46bd      	mov	sp, r7
 80014b8:	b002      	add	sp, #8
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	2000013c 	.word	0x2000013c
 80014c0:	2000015c 	.word	0x2000015c
 80014c4:	200000d8 	.word	0x200000d8
 80014c8:	2000019c 	.word	0x2000019c

080014cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014d0:	b672      	cpsid	i
}
 80014d2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014d4:	e7fe      	b.n	80014d4 <Error_Handler+0x8>
	...

080014d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014de:	4b11      	ldr	r3, [pc, #68]	; (8001524 <HAL_MspInit+0x4c>)
 80014e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014e2:	4b10      	ldr	r3, [pc, #64]	; (8001524 <HAL_MspInit+0x4c>)
 80014e4:	2101      	movs	r1, #1
 80014e6:	430a      	orrs	r2, r1
 80014e8:	641a      	str	r2, [r3, #64]	; 0x40
 80014ea:	4b0e      	ldr	r3, [pc, #56]	; (8001524 <HAL_MspInit+0x4c>)
 80014ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ee:	2201      	movs	r2, #1
 80014f0:	4013      	ands	r3, r2
 80014f2:	607b      	str	r3, [r7, #4]
 80014f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014f6:	4b0b      	ldr	r3, [pc, #44]	; (8001524 <HAL_MspInit+0x4c>)
 80014f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80014fa:	4b0a      	ldr	r3, [pc, #40]	; (8001524 <HAL_MspInit+0x4c>)
 80014fc:	2180      	movs	r1, #128	; 0x80
 80014fe:	0549      	lsls	r1, r1, #21
 8001500:	430a      	orrs	r2, r1
 8001502:	63da      	str	r2, [r3, #60]	; 0x3c
 8001504:	4b07      	ldr	r3, [pc, #28]	; (8001524 <HAL_MspInit+0x4c>)
 8001506:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001508:	2380      	movs	r3, #128	; 0x80
 800150a:	055b      	lsls	r3, r3, #21
 800150c:	4013      	ands	r3, r2
 800150e:	603b      	str	r3, [r7, #0]
 8001510:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8001512:	23c0      	movs	r3, #192	; 0xc0
 8001514:	00db      	lsls	r3, r3, #3
 8001516:	0018      	movs	r0, r3
 8001518:	f000 f9d4 	bl	80018c4 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800151c:	46c0      	nop			; (mov r8, r8)
 800151e:	46bd      	mov	sp, r7
 8001520:	b002      	add	sp, #8
 8001522:	bd80      	pop	{r7, pc}
 8001524:	40021000 	.word	0x40021000

08001528 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a09      	ldr	r2, [pc, #36]	; (800155c <HAL_TIM_Base_MspInit+0x34>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d10b      	bne.n	8001552 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800153a:	4b09      	ldr	r3, [pc, #36]	; (8001560 <HAL_TIM_Base_MspInit+0x38>)
 800153c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800153e:	4b08      	ldr	r3, [pc, #32]	; (8001560 <HAL_TIM_Base_MspInit+0x38>)
 8001540:	2110      	movs	r1, #16
 8001542:	430a      	orrs	r2, r1
 8001544:	63da      	str	r2, [r3, #60]	; 0x3c
 8001546:	4b06      	ldr	r3, [pc, #24]	; (8001560 <HAL_TIM_Base_MspInit+0x38>)
 8001548:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800154a:	2210      	movs	r2, #16
 800154c:	4013      	ands	r3, r2
 800154e:	60fb      	str	r3, [r7, #12]
 8001550:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001552:	46c0      	nop			; (mov r8, r8)
 8001554:	46bd      	mov	sp, r7
 8001556:	b004      	add	sp, #16
 8001558:	bd80      	pop	{r7, pc}
 800155a:	46c0      	nop			; (mov r8, r8)
 800155c:	40001000 	.word	0x40001000
 8001560:	40021000 	.word	0x40021000

08001564 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001564:	b590      	push	{r4, r7, lr}
 8001566:	b08d      	sub	sp, #52	; 0x34
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800156c:	241c      	movs	r4, #28
 800156e:	193b      	adds	r3, r7, r4
 8001570:	0018      	movs	r0, r3
 8001572:	2314      	movs	r3, #20
 8001574:	001a      	movs	r2, r3
 8001576:	2100      	movs	r1, #0
 8001578:	f003 fe33 	bl	80051e2 <memset>
  if(huart->Instance==USART1)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a3e      	ldr	r2, [pc, #248]	; (800167c <HAL_UART_MspInit+0x118>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d138      	bne.n	80015f8 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001586:	4b3e      	ldr	r3, [pc, #248]	; (8001680 <HAL_UART_MspInit+0x11c>)
 8001588:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800158a:	4b3d      	ldr	r3, [pc, #244]	; (8001680 <HAL_UART_MspInit+0x11c>)
 800158c:	2180      	movs	r1, #128	; 0x80
 800158e:	01c9      	lsls	r1, r1, #7
 8001590:	430a      	orrs	r2, r1
 8001592:	641a      	str	r2, [r3, #64]	; 0x40
 8001594:	4b3a      	ldr	r3, [pc, #232]	; (8001680 <HAL_UART_MspInit+0x11c>)
 8001596:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001598:	2380      	movs	r3, #128	; 0x80
 800159a:	01db      	lsls	r3, r3, #7
 800159c:	4013      	ands	r3, r2
 800159e:	61bb      	str	r3, [r7, #24]
 80015a0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015a2:	4b37      	ldr	r3, [pc, #220]	; (8001680 <HAL_UART_MspInit+0x11c>)
 80015a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015a6:	4b36      	ldr	r3, [pc, #216]	; (8001680 <HAL_UART_MspInit+0x11c>)
 80015a8:	2104      	movs	r1, #4
 80015aa:	430a      	orrs	r2, r1
 80015ac:	635a      	str	r2, [r3, #52]	; 0x34
 80015ae:	4b34      	ldr	r3, [pc, #208]	; (8001680 <HAL_UART_MspInit+0x11c>)
 80015b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015b2:	2204      	movs	r2, #4
 80015b4:	4013      	ands	r3, r2
 80015b6:	617b      	str	r3, [r7, #20]
 80015b8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80015ba:	0021      	movs	r1, r4
 80015bc:	187b      	adds	r3, r7, r1
 80015be:	2230      	movs	r2, #48	; 0x30
 80015c0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c2:	187b      	adds	r3, r7, r1
 80015c4:	2202      	movs	r2, #2
 80015c6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c8:	187b      	adds	r3, r7, r1
 80015ca:	2200      	movs	r2, #0
 80015cc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ce:	187b      	adds	r3, r7, r1
 80015d0:	2200      	movs	r2, #0
 80015d2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80015d4:	187b      	adds	r3, r7, r1
 80015d6:	2201      	movs	r2, #1
 80015d8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015da:	187b      	adds	r3, r7, r1
 80015dc:	4a29      	ldr	r2, [pc, #164]	; (8001684 <HAL_UART_MspInit+0x120>)
 80015de:	0019      	movs	r1, r3
 80015e0:	0010      	movs	r0, r2
 80015e2:	f000 fb2f 	bl	8001c44 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80015e6:	2200      	movs	r2, #0
 80015e8:	2100      	movs	r1, #0
 80015ea:	201b      	movs	r0, #27
 80015ec:	f000 fa2c 	bl	8001a48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80015f0:	201b      	movs	r0, #27
 80015f2:	f000 fa3e 	bl	8001a72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80015f6:	e03d      	b.n	8001674 <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART2)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a22      	ldr	r2, [pc, #136]	; (8001688 <HAL_UART_MspInit+0x124>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d138      	bne.n	8001674 <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001602:	4b1f      	ldr	r3, [pc, #124]	; (8001680 <HAL_UART_MspInit+0x11c>)
 8001604:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001606:	4b1e      	ldr	r3, [pc, #120]	; (8001680 <HAL_UART_MspInit+0x11c>)
 8001608:	2180      	movs	r1, #128	; 0x80
 800160a:	0289      	lsls	r1, r1, #10
 800160c:	430a      	orrs	r2, r1
 800160e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001610:	4b1b      	ldr	r3, [pc, #108]	; (8001680 <HAL_UART_MspInit+0x11c>)
 8001612:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001614:	2380      	movs	r3, #128	; 0x80
 8001616:	029b      	lsls	r3, r3, #10
 8001618:	4013      	ands	r3, r2
 800161a:	613b      	str	r3, [r7, #16]
 800161c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800161e:	4b18      	ldr	r3, [pc, #96]	; (8001680 <HAL_UART_MspInit+0x11c>)
 8001620:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001622:	4b17      	ldr	r3, [pc, #92]	; (8001680 <HAL_UART_MspInit+0x11c>)
 8001624:	2101      	movs	r1, #1
 8001626:	430a      	orrs	r2, r1
 8001628:	635a      	str	r2, [r3, #52]	; 0x34
 800162a:	4b15      	ldr	r3, [pc, #84]	; (8001680 <HAL_UART_MspInit+0x11c>)
 800162c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800162e:	2201      	movs	r2, #1
 8001630:	4013      	ands	r3, r2
 8001632:	60fb      	str	r3, [r7, #12]
 8001634:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8001636:	211c      	movs	r1, #28
 8001638:	187b      	adds	r3, r7, r1
 800163a:	220c      	movs	r2, #12
 800163c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800163e:	187b      	adds	r3, r7, r1
 8001640:	2202      	movs	r2, #2
 8001642:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001644:	187b      	adds	r3, r7, r1
 8001646:	2201      	movs	r2, #1
 8001648:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800164a:	187b      	adds	r3, r7, r1
 800164c:	2200      	movs	r2, #0
 800164e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001650:	187b      	adds	r3, r7, r1
 8001652:	2201      	movs	r2, #1
 8001654:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001656:	187a      	adds	r2, r7, r1
 8001658:	23a0      	movs	r3, #160	; 0xa0
 800165a:	05db      	lsls	r3, r3, #23
 800165c:	0011      	movs	r1, r2
 800165e:	0018      	movs	r0, r3
 8001660:	f000 faf0 	bl	8001c44 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001664:	2200      	movs	r2, #0
 8001666:	2100      	movs	r1, #0
 8001668:	201c      	movs	r0, #28
 800166a:	f000 f9ed 	bl	8001a48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800166e:	201c      	movs	r0, #28
 8001670:	f000 f9ff 	bl	8001a72 <HAL_NVIC_EnableIRQ>
}
 8001674:	46c0      	nop			; (mov r8, r8)
 8001676:	46bd      	mov	sp, r7
 8001678:	b00d      	add	sp, #52	; 0x34
 800167a:	bd90      	pop	{r4, r7, pc}
 800167c:	40013800 	.word	0x40013800
 8001680:	40021000 	.word	0x40021000
 8001684:	50000800 	.word	0x50000800
 8001688:	40004400 	.word	0x40004400

0800168c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001690:	e7fe      	b.n	8001690 <NMI_Handler+0x4>

08001692 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001692:	b580      	push	{r7, lr}
 8001694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001696:	e7fe      	b.n	8001696 <HardFault_Handler+0x4>

08001698 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800169c:	46c0      	nop			; (mov r8, r8)
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}

080016a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016a2:	b580      	push	{r7, lr}
 80016a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016a6:	46c0      	nop			; (mov r8, r8)
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}

080016ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016b0:	f000 f8ec 	bl	800188c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016b4:	46c0      	nop			; (mov r8, r8)
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
	...

080016bc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80016c0:	4b03      	ldr	r3, [pc, #12]	; (80016d0 <USART1_IRQHandler+0x14>)
 80016c2:	0018      	movs	r0, r3
 80016c4:	f001 fe2a 	bl	800331c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80016c8:	46c0      	nop			; (mov r8, r8)
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	46c0      	nop			; (mov r8, r8)
 80016d0:	2000019c 	.word	0x2000019c

080016d4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80016d8:	4b03      	ldr	r3, [pc, #12]	; (80016e8 <USART2_IRQHandler+0x14>)
 80016da:	0018      	movs	r0, r3
 80016dc:	f001 fe1e 	bl	800331c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80016e0:	46c0      	nop			; (mov r8, r8)
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	46c0      	nop			; (mov r8, r8)
 80016e8:	20000278 	.word	0x20000278

080016ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b086      	sub	sp, #24
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016f4:	4a14      	ldr	r2, [pc, #80]	; (8001748 <_sbrk+0x5c>)
 80016f6:	4b15      	ldr	r3, [pc, #84]	; (800174c <_sbrk+0x60>)
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001700:	4b13      	ldr	r3, [pc, #76]	; (8001750 <_sbrk+0x64>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d102      	bne.n	800170e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001708:	4b11      	ldr	r3, [pc, #68]	; (8001750 <_sbrk+0x64>)
 800170a:	4a12      	ldr	r2, [pc, #72]	; (8001754 <_sbrk+0x68>)
 800170c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800170e:	4b10      	ldr	r3, [pc, #64]	; (8001750 <_sbrk+0x64>)
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	18d3      	adds	r3, r2, r3
 8001716:	693a      	ldr	r2, [r7, #16]
 8001718:	429a      	cmp	r2, r3
 800171a:	d207      	bcs.n	800172c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800171c:	f003 fd2e 	bl	800517c <__errno>
 8001720:	0003      	movs	r3, r0
 8001722:	220c      	movs	r2, #12
 8001724:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001726:	2301      	movs	r3, #1
 8001728:	425b      	negs	r3, r3
 800172a:	e009      	b.n	8001740 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800172c:	4b08      	ldr	r3, [pc, #32]	; (8001750 <_sbrk+0x64>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001732:	4b07      	ldr	r3, [pc, #28]	; (8001750 <_sbrk+0x64>)
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	18d2      	adds	r2, r2, r3
 800173a:	4b05      	ldr	r3, [pc, #20]	; (8001750 <_sbrk+0x64>)
 800173c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800173e:	68fb      	ldr	r3, [r7, #12]
}
 8001740:	0018      	movs	r0, r3
 8001742:	46bd      	mov	sp, r7
 8001744:	b006      	add	sp, #24
 8001746:	bd80      	pop	{r7, pc}
 8001748:	20009000 	.word	0x20009000
 800174c:	00000400 	.word	0x00000400
 8001750:	20000160 	.word	0x20000160
 8001754:	20000320 	.word	0x20000320

08001758 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800175c:	46c0      	nop			; (mov r8, r8)
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
	...

08001764 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001764:	480d      	ldr	r0, [pc, #52]	; (800179c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001766:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001768:	f7ff fff6 	bl	8001758 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800176c:	480c      	ldr	r0, [pc, #48]	; (80017a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800176e:	490d      	ldr	r1, [pc, #52]	; (80017a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001770:	4a0d      	ldr	r2, [pc, #52]	; (80017a8 <LoopForever+0xe>)
  movs r3, #0
 8001772:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001774:	e002      	b.n	800177c <LoopCopyDataInit>

08001776 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001776:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001778:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800177a:	3304      	adds	r3, #4

0800177c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800177c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800177e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001780:	d3f9      	bcc.n	8001776 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001782:	4a0a      	ldr	r2, [pc, #40]	; (80017ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8001784:	4c0a      	ldr	r4, [pc, #40]	; (80017b0 <LoopForever+0x16>)
  movs r3, #0
 8001786:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001788:	e001      	b.n	800178e <LoopFillZerobss>

0800178a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800178a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800178c:	3204      	adds	r2, #4

0800178e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800178e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001790:	d3fb      	bcc.n	800178a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001792:	f003 fcf9 	bl	8005188 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001796:	f7ff fa6d 	bl	8000c74 <main>

0800179a <LoopForever>:

LoopForever:
  b LoopForever
 800179a:	e7fe      	b.n	800179a <LoopForever>
  ldr   r0, =_estack
 800179c:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80017a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017a4:	200000bc 	.word	0x200000bc
  ldr r2, =_sidata
 80017a8:	08005bdc 	.word	0x08005bdc
  ldr r2, =_sbss
 80017ac:	200000bc 	.word	0x200000bc
  ldr r4, =_ebss
 80017b0:	2000031c 	.word	0x2000031c

080017b4 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80017b4:	e7fe      	b.n	80017b4 <ADC1_COMP_IRQHandler>
	...

080017b8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80017be:	1dfb      	adds	r3, r7, #7
 80017c0:	2200      	movs	r2, #0
 80017c2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017c4:	4b0b      	ldr	r3, [pc, #44]	; (80017f4 <HAL_Init+0x3c>)
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	4b0a      	ldr	r3, [pc, #40]	; (80017f4 <HAL_Init+0x3c>)
 80017ca:	2180      	movs	r1, #128	; 0x80
 80017cc:	0049      	lsls	r1, r1, #1
 80017ce:	430a      	orrs	r2, r1
 80017d0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017d2:	2000      	movs	r0, #0
 80017d4:	f000 f810 	bl	80017f8 <HAL_InitTick>
 80017d8:	1e03      	subs	r3, r0, #0
 80017da:	d003      	beq.n	80017e4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80017dc:	1dfb      	adds	r3, r7, #7
 80017de:	2201      	movs	r2, #1
 80017e0:	701a      	strb	r2, [r3, #0]
 80017e2:	e001      	b.n	80017e8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80017e4:	f7ff fe78 	bl	80014d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80017e8:	1dfb      	adds	r3, r7, #7
 80017ea:	781b      	ldrb	r3, [r3, #0]
}
 80017ec:	0018      	movs	r0, r3
 80017ee:	46bd      	mov	sp, r7
 80017f0:	b002      	add	sp, #8
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	40022000 	.word	0x40022000

080017f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017f8:	b590      	push	{r4, r7, lr}
 80017fa:	b085      	sub	sp, #20
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001800:	230f      	movs	r3, #15
 8001802:	18fb      	adds	r3, r7, r3
 8001804:	2200      	movs	r2, #0
 8001806:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001808:	4b1d      	ldr	r3, [pc, #116]	; (8001880 <HAL_InitTick+0x88>)
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d02b      	beq.n	8001868 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001810:	4b1c      	ldr	r3, [pc, #112]	; (8001884 <HAL_InitTick+0x8c>)
 8001812:	681c      	ldr	r4, [r3, #0]
 8001814:	4b1a      	ldr	r3, [pc, #104]	; (8001880 <HAL_InitTick+0x88>)
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	0019      	movs	r1, r3
 800181a:	23fa      	movs	r3, #250	; 0xfa
 800181c:	0098      	lsls	r0, r3, #2
 800181e:	f7fe fc83 	bl	8000128 <__udivsi3>
 8001822:	0003      	movs	r3, r0
 8001824:	0019      	movs	r1, r3
 8001826:	0020      	movs	r0, r4
 8001828:	f7fe fc7e 	bl	8000128 <__udivsi3>
 800182c:	0003      	movs	r3, r0
 800182e:	0018      	movs	r0, r3
 8001830:	f000 f92f 	bl	8001a92 <HAL_SYSTICK_Config>
 8001834:	1e03      	subs	r3, r0, #0
 8001836:	d112      	bne.n	800185e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2b03      	cmp	r3, #3
 800183c:	d80a      	bhi.n	8001854 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800183e:	6879      	ldr	r1, [r7, #4]
 8001840:	2301      	movs	r3, #1
 8001842:	425b      	negs	r3, r3
 8001844:	2200      	movs	r2, #0
 8001846:	0018      	movs	r0, r3
 8001848:	f000 f8fe 	bl	8001a48 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800184c:	4b0e      	ldr	r3, [pc, #56]	; (8001888 <HAL_InitTick+0x90>)
 800184e:	687a      	ldr	r2, [r7, #4]
 8001850:	601a      	str	r2, [r3, #0]
 8001852:	e00d      	b.n	8001870 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001854:	230f      	movs	r3, #15
 8001856:	18fb      	adds	r3, r7, r3
 8001858:	2201      	movs	r2, #1
 800185a:	701a      	strb	r2, [r3, #0]
 800185c:	e008      	b.n	8001870 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800185e:	230f      	movs	r3, #15
 8001860:	18fb      	adds	r3, r7, r3
 8001862:	2201      	movs	r2, #1
 8001864:	701a      	strb	r2, [r3, #0]
 8001866:	e003      	b.n	8001870 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001868:	230f      	movs	r3, #15
 800186a:	18fb      	adds	r3, r7, r3
 800186c:	2201      	movs	r2, #1
 800186e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001870:	230f      	movs	r3, #15
 8001872:	18fb      	adds	r3, r7, r3
 8001874:	781b      	ldrb	r3, [r3, #0]
}
 8001876:	0018      	movs	r0, r3
 8001878:	46bd      	mov	sp, r7
 800187a:	b005      	add	sp, #20
 800187c:	bd90      	pop	{r4, r7, pc}
 800187e:	46c0      	nop			; (mov r8, r8)
 8001880:	20000054 	.word	0x20000054
 8001884:	2000004c 	.word	0x2000004c
 8001888:	20000050 	.word	0x20000050

0800188c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001890:	4b05      	ldr	r3, [pc, #20]	; (80018a8 <HAL_IncTick+0x1c>)
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	001a      	movs	r2, r3
 8001896:	4b05      	ldr	r3, [pc, #20]	; (80018ac <HAL_IncTick+0x20>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	18d2      	adds	r2, r2, r3
 800189c:	4b03      	ldr	r3, [pc, #12]	; (80018ac <HAL_IncTick+0x20>)
 800189e:	601a      	str	r2, [r3, #0]
}
 80018a0:	46c0      	nop			; (mov r8, r8)
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	46c0      	nop			; (mov r8, r8)
 80018a8:	20000054 	.word	0x20000054
 80018ac:	20000308 	.word	0x20000308

080018b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
  return uwTick;
 80018b4:	4b02      	ldr	r3, [pc, #8]	; (80018c0 <HAL_GetTick+0x10>)
 80018b6:	681b      	ldr	r3, [r3, #0]
}
 80018b8:	0018      	movs	r0, r3
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	46c0      	nop			; (mov r8, r8)
 80018c0:	20000308 	.word	0x20000308

080018c4 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 80018cc:	4b06      	ldr	r3, [pc, #24]	; (80018e8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a06      	ldr	r2, [pc, #24]	; (80018ec <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 80018d2:	4013      	ands	r3, r2
 80018d4:	0019      	movs	r1, r3
 80018d6:	4b04      	ldr	r3, [pc, #16]	; (80018e8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80018d8:	687a      	ldr	r2, [r7, #4]
 80018da:	430a      	orrs	r2, r1
 80018dc:	601a      	str	r2, [r3, #0]
}
 80018de:	46c0      	nop			; (mov r8, r8)
 80018e0:	46bd      	mov	sp, r7
 80018e2:	b002      	add	sp, #8
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	46c0      	nop			; (mov r8, r8)
 80018e8:	40010000 	.word	0x40010000
 80018ec:	fffff9ff 	.word	0xfffff9ff

080018f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	0002      	movs	r2, r0
 80018f8:	1dfb      	adds	r3, r7, #7
 80018fa:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80018fc:	1dfb      	adds	r3, r7, #7
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	2b7f      	cmp	r3, #127	; 0x7f
 8001902:	d809      	bhi.n	8001918 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001904:	1dfb      	adds	r3, r7, #7
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	001a      	movs	r2, r3
 800190a:	231f      	movs	r3, #31
 800190c:	401a      	ands	r2, r3
 800190e:	4b04      	ldr	r3, [pc, #16]	; (8001920 <__NVIC_EnableIRQ+0x30>)
 8001910:	2101      	movs	r1, #1
 8001912:	4091      	lsls	r1, r2
 8001914:	000a      	movs	r2, r1
 8001916:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001918:	46c0      	nop			; (mov r8, r8)
 800191a:	46bd      	mov	sp, r7
 800191c:	b002      	add	sp, #8
 800191e:	bd80      	pop	{r7, pc}
 8001920:	e000e100 	.word	0xe000e100

08001924 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001924:	b590      	push	{r4, r7, lr}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	0002      	movs	r2, r0
 800192c:	6039      	str	r1, [r7, #0]
 800192e:	1dfb      	adds	r3, r7, #7
 8001930:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001932:	1dfb      	adds	r3, r7, #7
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	2b7f      	cmp	r3, #127	; 0x7f
 8001938:	d828      	bhi.n	800198c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800193a:	4a2f      	ldr	r2, [pc, #188]	; (80019f8 <__NVIC_SetPriority+0xd4>)
 800193c:	1dfb      	adds	r3, r7, #7
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	b25b      	sxtb	r3, r3
 8001942:	089b      	lsrs	r3, r3, #2
 8001944:	33c0      	adds	r3, #192	; 0xc0
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	589b      	ldr	r3, [r3, r2]
 800194a:	1dfa      	adds	r2, r7, #7
 800194c:	7812      	ldrb	r2, [r2, #0]
 800194e:	0011      	movs	r1, r2
 8001950:	2203      	movs	r2, #3
 8001952:	400a      	ands	r2, r1
 8001954:	00d2      	lsls	r2, r2, #3
 8001956:	21ff      	movs	r1, #255	; 0xff
 8001958:	4091      	lsls	r1, r2
 800195a:	000a      	movs	r2, r1
 800195c:	43d2      	mvns	r2, r2
 800195e:	401a      	ands	r2, r3
 8001960:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	019b      	lsls	r3, r3, #6
 8001966:	22ff      	movs	r2, #255	; 0xff
 8001968:	401a      	ands	r2, r3
 800196a:	1dfb      	adds	r3, r7, #7
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	0018      	movs	r0, r3
 8001970:	2303      	movs	r3, #3
 8001972:	4003      	ands	r3, r0
 8001974:	00db      	lsls	r3, r3, #3
 8001976:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001978:	481f      	ldr	r0, [pc, #124]	; (80019f8 <__NVIC_SetPriority+0xd4>)
 800197a:	1dfb      	adds	r3, r7, #7
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	b25b      	sxtb	r3, r3
 8001980:	089b      	lsrs	r3, r3, #2
 8001982:	430a      	orrs	r2, r1
 8001984:	33c0      	adds	r3, #192	; 0xc0
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800198a:	e031      	b.n	80019f0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800198c:	4a1b      	ldr	r2, [pc, #108]	; (80019fc <__NVIC_SetPriority+0xd8>)
 800198e:	1dfb      	adds	r3, r7, #7
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	0019      	movs	r1, r3
 8001994:	230f      	movs	r3, #15
 8001996:	400b      	ands	r3, r1
 8001998:	3b08      	subs	r3, #8
 800199a:	089b      	lsrs	r3, r3, #2
 800199c:	3306      	adds	r3, #6
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	18d3      	adds	r3, r2, r3
 80019a2:	3304      	adds	r3, #4
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	1dfa      	adds	r2, r7, #7
 80019a8:	7812      	ldrb	r2, [r2, #0]
 80019aa:	0011      	movs	r1, r2
 80019ac:	2203      	movs	r2, #3
 80019ae:	400a      	ands	r2, r1
 80019b0:	00d2      	lsls	r2, r2, #3
 80019b2:	21ff      	movs	r1, #255	; 0xff
 80019b4:	4091      	lsls	r1, r2
 80019b6:	000a      	movs	r2, r1
 80019b8:	43d2      	mvns	r2, r2
 80019ba:	401a      	ands	r2, r3
 80019bc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	019b      	lsls	r3, r3, #6
 80019c2:	22ff      	movs	r2, #255	; 0xff
 80019c4:	401a      	ands	r2, r3
 80019c6:	1dfb      	adds	r3, r7, #7
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	0018      	movs	r0, r3
 80019cc:	2303      	movs	r3, #3
 80019ce:	4003      	ands	r3, r0
 80019d0:	00db      	lsls	r3, r3, #3
 80019d2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80019d4:	4809      	ldr	r0, [pc, #36]	; (80019fc <__NVIC_SetPriority+0xd8>)
 80019d6:	1dfb      	adds	r3, r7, #7
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	001c      	movs	r4, r3
 80019dc:	230f      	movs	r3, #15
 80019de:	4023      	ands	r3, r4
 80019e0:	3b08      	subs	r3, #8
 80019e2:	089b      	lsrs	r3, r3, #2
 80019e4:	430a      	orrs	r2, r1
 80019e6:	3306      	adds	r3, #6
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	18c3      	adds	r3, r0, r3
 80019ec:	3304      	adds	r3, #4
 80019ee:	601a      	str	r2, [r3, #0]
}
 80019f0:	46c0      	nop			; (mov r8, r8)
 80019f2:	46bd      	mov	sp, r7
 80019f4:	b003      	add	sp, #12
 80019f6:	bd90      	pop	{r4, r7, pc}
 80019f8:	e000e100 	.word	0xe000e100
 80019fc:	e000ed00 	.word	0xe000ed00

08001a00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	1e5a      	subs	r2, r3, #1
 8001a0c:	2380      	movs	r3, #128	; 0x80
 8001a0e:	045b      	lsls	r3, r3, #17
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d301      	bcc.n	8001a18 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a14:	2301      	movs	r3, #1
 8001a16:	e010      	b.n	8001a3a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a18:	4b0a      	ldr	r3, [pc, #40]	; (8001a44 <SysTick_Config+0x44>)
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	3a01      	subs	r2, #1
 8001a1e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a20:	2301      	movs	r3, #1
 8001a22:	425b      	negs	r3, r3
 8001a24:	2103      	movs	r1, #3
 8001a26:	0018      	movs	r0, r3
 8001a28:	f7ff ff7c 	bl	8001924 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a2c:	4b05      	ldr	r3, [pc, #20]	; (8001a44 <SysTick_Config+0x44>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a32:	4b04      	ldr	r3, [pc, #16]	; (8001a44 <SysTick_Config+0x44>)
 8001a34:	2207      	movs	r2, #7
 8001a36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a38:	2300      	movs	r3, #0
}
 8001a3a:	0018      	movs	r0, r3
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	b002      	add	sp, #8
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	46c0      	nop			; (mov r8, r8)
 8001a44:	e000e010 	.word	0xe000e010

08001a48 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b084      	sub	sp, #16
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	60b9      	str	r1, [r7, #8]
 8001a50:	607a      	str	r2, [r7, #4]
 8001a52:	210f      	movs	r1, #15
 8001a54:	187b      	adds	r3, r7, r1
 8001a56:	1c02      	adds	r2, r0, #0
 8001a58:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001a5a:	68ba      	ldr	r2, [r7, #8]
 8001a5c:	187b      	adds	r3, r7, r1
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	b25b      	sxtb	r3, r3
 8001a62:	0011      	movs	r1, r2
 8001a64:	0018      	movs	r0, r3
 8001a66:	f7ff ff5d 	bl	8001924 <__NVIC_SetPriority>
}
 8001a6a:	46c0      	nop			; (mov r8, r8)
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	b004      	add	sp, #16
 8001a70:	bd80      	pop	{r7, pc}

08001a72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a72:	b580      	push	{r7, lr}
 8001a74:	b082      	sub	sp, #8
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	0002      	movs	r2, r0
 8001a7a:	1dfb      	adds	r3, r7, #7
 8001a7c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a7e:	1dfb      	adds	r3, r7, #7
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	b25b      	sxtb	r3, r3
 8001a84:	0018      	movs	r0, r3
 8001a86:	f7ff ff33 	bl	80018f0 <__NVIC_EnableIRQ>
}
 8001a8a:	46c0      	nop			; (mov r8, r8)
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	b002      	add	sp, #8
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a92:	b580      	push	{r7, lr}
 8001a94:	b082      	sub	sp, #8
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	0018      	movs	r0, r3
 8001a9e:	f7ff ffaf 	bl	8001a00 <SysTick_Config>
 8001aa2:	0003      	movs	r3, r0
}
 8001aa4:	0018      	movs	r0, r3
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	b002      	add	sp, #8
 8001aaa:	bd80      	pop	{r7, pc}

08001aac <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d101      	bne.n	8001abe <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e050      	b.n	8001b60 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2225      	movs	r2, #37	; 0x25
 8001ac2:	5c9b      	ldrb	r3, [r3, r2]
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	d008      	beq.n	8001adc <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2204      	movs	r2, #4
 8001ace:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2224      	movs	r2, #36	; 0x24
 8001ad4:	2100      	movs	r1, #0
 8001ad6:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e041      	b.n	8001b60 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	210e      	movs	r1, #14
 8001ae8:	438a      	bics	r2, r1
 8001aea:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001af6:	491c      	ldr	r1, [pc, #112]	; (8001b68 <HAL_DMA_Abort+0xbc>)
 8001af8:	400a      	ands	r2, r1
 8001afa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	2101      	movs	r1, #1
 8001b08:	438a      	bics	r2, r1
 8001b0a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8001b0c:	4b17      	ldr	r3, [pc, #92]	; (8001b6c <HAL_DMA_Abort+0xc0>)
 8001b0e:	6859      	ldr	r1, [r3, #4]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b14:	221c      	movs	r2, #28
 8001b16:	4013      	ands	r3, r2
 8001b18:	2201      	movs	r2, #1
 8001b1a:	409a      	lsls	r2, r3
 8001b1c:	4b13      	ldr	r3, [pc, #76]	; (8001b6c <HAL_DMA_Abort+0xc0>)
 8001b1e:	430a      	orrs	r2, r1
 8001b20:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001b2a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d00c      	beq.n	8001b4e <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b3e:	490a      	ldr	r1, [pc, #40]	; (8001b68 <HAL_DMA_Abort+0xbc>)
 8001b40:	400a      	ands	r2, r1
 8001b42:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b48:	687a      	ldr	r2, [r7, #4]
 8001b4a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001b4c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2225      	movs	r2, #37	; 0x25
 8001b52:	2101      	movs	r1, #1
 8001b54:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2224      	movs	r2, #36	; 0x24
 8001b5a:	2100      	movs	r1, #0
 8001b5c:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8001b5e:	2300      	movs	r3, #0
}
 8001b60:	0018      	movs	r0, r3
 8001b62:	46bd      	mov	sp, r7
 8001b64:	b002      	add	sp, #8
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	fffffeff 	.word	0xfffffeff
 8001b6c:	40020000 	.word	0x40020000

08001b70 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b084      	sub	sp, #16
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b78:	210f      	movs	r1, #15
 8001b7a:	187b      	adds	r3, r7, r1
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2225      	movs	r2, #37	; 0x25
 8001b84:	5c9b      	ldrb	r3, [r3, r2]
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	2b02      	cmp	r3, #2
 8001b8a:	d006      	beq.n	8001b9a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2204      	movs	r2, #4
 8001b90:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001b92:	187b      	adds	r3, r7, r1
 8001b94:	2201      	movs	r2, #1
 8001b96:	701a      	strb	r2, [r3, #0]
 8001b98:	e049      	b.n	8001c2e <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	210e      	movs	r1, #14
 8001ba6:	438a      	bics	r2, r1
 8001ba8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	2101      	movs	r1, #1
 8001bb6:	438a      	bics	r2, r1
 8001bb8:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc4:	491d      	ldr	r1, [pc, #116]	; (8001c3c <HAL_DMA_Abort_IT+0xcc>)
 8001bc6:	400a      	ands	r2, r1
 8001bc8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8001bca:	4b1d      	ldr	r3, [pc, #116]	; (8001c40 <HAL_DMA_Abort_IT+0xd0>)
 8001bcc:	6859      	ldr	r1, [r3, #4]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd2:	221c      	movs	r2, #28
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	409a      	lsls	r2, r3
 8001bda:	4b19      	ldr	r3, [pc, #100]	; (8001c40 <HAL_DMA_Abort_IT+0xd0>)
 8001bdc:	430a      	orrs	r2, r1
 8001bde:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001be4:	687a      	ldr	r2, [r7, #4]
 8001be6:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001be8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d00c      	beq.n	8001c0c <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bfc:	490f      	ldr	r1, [pc, #60]	; (8001c3c <HAL_DMA_Abort_IT+0xcc>)
 8001bfe:	400a      	ands	r2, r1
 8001c00:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001c0a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2225      	movs	r2, #37	; 0x25
 8001c10:	2101      	movs	r1, #1
 8001c12:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2224      	movs	r2, #36	; 0x24
 8001c18:	2100      	movs	r1, #0
 8001c1a:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d004      	beq.n	8001c2e <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c28:	687a      	ldr	r2, [r7, #4]
 8001c2a:	0010      	movs	r0, r2
 8001c2c:	4798      	blx	r3
    }
  }
  return status;
 8001c2e:	230f      	movs	r3, #15
 8001c30:	18fb      	adds	r3, r7, r3
 8001c32:	781b      	ldrb	r3, [r3, #0]
}
 8001c34:	0018      	movs	r0, r3
 8001c36:	46bd      	mov	sp, r7
 8001c38:	b004      	add	sp, #16
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	fffffeff 	.word	0xfffffeff
 8001c40:	40020000 	.word	0x40020000

08001c44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b086      	sub	sp, #24
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
 8001c4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c52:	e147      	b.n	8001ee4 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	2101      	movs	r1, #1
 8001c5a:	697a      	ldr	r2, [r7, #20]
 8001c5c:	4091      	lsls	r1, r2
 8001c5e:	000a      	movs	r2, r1
 8001c60:	4013      	ands	r3, r2
 8001c62:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d100      	bne.n	8001c6c <HAL_GPIO_Init+0x28>
 8001c6a:	e138      	b.n	8001ede <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	2203      	movs	r2, #3
 8001c72:	4013      	ands	r3, r2
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d005      	beq.n	8001c84 <HAL_GPIO_Init+0x40>
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	2203      	movs	r2, #3
 8001c7e:	4013      	ands	r3, r2
 8001c80:	2b02      	cmp	r3, #2
 8001c82:	d130      	bne.n	8001ce6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	005b      	lsls	r3, r3, #1
 8001c8e:	2203      	movs	r2, #3
 8001c90:	409a      	lsls	r2, r3
 8001c92:	0013      	movs	r3, r2
 8001c94:	43da      	mvns	r2, r3
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	4013      	ands	r3, r2
 8001c9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	68da      	ldr	r2, [r3, #12]
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	005b      	lsls	r3, r3, #1
 8001ca4:	409a      	lsls	r2, r3
 8001ca6:	0013      	movs	r3, r2
 8001ca8:	693a      	ldr	r2, [r7, #16]
 8001caa:	4313      	orrs	r3, r2
 8001cac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	693a      	ldr	r2, [r7, #16]
 8001cb2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001cba:	2201      	movs	r2, #1
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	409a      	lsls	r2, r3
 8001cc0:	0013      	movs	r3, r2
 8001cc2:	43da      	mvns	r2, r3
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	091b      	lsrs	r3, r3, #4
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	401a      	ands	r2, r3
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	409a      	lsls	r2, r3
 8001cd8:	0013      	movs	r3, r2
 8001cda:	693a      	ldr	r2, [r7, #16]
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	693a      	ldr	r2, [r7, #16]
 8001ce4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	2203      	movs	r2, #3
 8001cec:	4013      	ands	r3, r2
 8001cee:	2b03      	cmp	r3, #3
 8001cf0:	d017      	beq.n	8001d22 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	68db      	ldr	r3, [r3, #12]
 8001cf6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	005b      	lsls	r3, r3, #1
 8001cfc:	2203      	movs	r2, #3
 8001cfe:	409a      	lsls	r2, r3
 8001d00:	0013      	movs	r3, r2
 8001d02:	43da      	mvns	r2, r3
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	4013      	ands	r3, r2
 8001d08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	689a      	ldr	r2, [r3, #8]
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	005b      	lsls	r3, r3, #1
 8001d12:	409a      	lsls	r2, r3
 8001d14:	0013      	movs	r3, r2
 8001d16:	693a      	ldr	r2, [r7, #16]
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	693a      	ldr	r2, [r7, #16]
 8001d20:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	2203      	movs	r2, #3
 8001d28:	4013      	ands	r3, r2
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	d123      	bne.n	8001d76 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	08da      	lsrs	r2, r3, #3
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	3208      	adds	r2, #8
 8001d36:	0092      	lsls	r2, r2, #2
 8001d38:	58d3      	ldr	r3, [r2, r3]
 8001d3a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	2207      	movs	r2, #7
 8001d40:	4013      	ands	r3, r2
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	220f      	movs	r2, #15
 8001d46:	409a      	lsls	r2, r3
 8001d48:	0013      	movs	r3, r2
 8001d4a:	43da      	mvns	r2, r3
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	4013      	ands	r3, r2
 8001d50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	691a      	ldr	r2, [r3, #16]
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	2107      	movs	r1, #7
 8001d5a:	400b      	ands	r3, r1
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	409a      	lsls	r2, r3
 8001d60:	0013      	movs	r3, r2
 8001d62:	693a      	ldr	r2, [r7, #16]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	08da      	lsrs	r2, r3, #3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	3208      	adds	r2, #8
 8001d70:	0092      	lsls	r2, r2, #2
 8001d72:	6939      	ldr	r1, [r7, #16]
 8001d74:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	005b      	lsls	r3, r3, #1
 8001d80:	2203      	movs	r2, #3
 8001d82:	409a      	lsls	r2, r3
 8001d84:	0013      	movs	r3, r2
 8001d86:	43da      	mvns	r2, r3
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	2203      	movs	r2, #3
 8001d94:	401a      	ands	r2, r3
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	005b      	lsls	r3, r3, #1
 8001d9a:	409a      	lsls	r2, r3
 8001d9c:	0013      	movs	r3, r2
 8001d9e:	693a      	ldr	r2, [r7, #16]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	693a      	ldr	r2, [r7, #16]
 8001da8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	685a      	ldr	r2, [r3, #4]
 8001dae:	23c0      	movs	r3, #192	; 0xc0
 8001db0:	029b      	lsls	r3, r3, #10
 8001db2:	4013      	ands	r3, r2
 8001db4:	d100      	bne.n	8001db8 <HAL_GPIO_Init+0x174>
 8001db6:	e092      	b.n	8001ede <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001db8:	4a50      	ldr	r2, [pc, #320]	; (8001efc <HAL_GPIO_Init+0x2b8>)
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	089b      	lsrs	r3, r3, #2
 8001dbe:	3318      	adds	r3, #24
 8001dc0:	009b      	lsls	r3, r3, #2
 8001dc2:	589b      	ldr	r3, [r3, r2]
 8001dc4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	2203      	movs	r2, #3
 8001dca:	4013      	ands	r3, r2
 8001dcc:	00db      	lsls	r3, r3, #3
 8001dce:	220f      	movs	r2, #15
 8001dd0:	409a      	lsls	r2, r3
 8001dd2:	0013      	movs	r3, r2
 8001dd4:	43da      	mvns	r2, r3
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	4013      	ands	r3, r2
 8001dda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001ddc:	687a      	ldr	r2, [r7, #4]
 8001dde:	23a0      	movs	r3, #160	; 0xa0
 8001de0:	05db      	lsls	r3, r3, #23
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d013      	beq.n	8001e0e <HAL_GPIO_Init+0x1ca>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4a45      	ldr	r2, [pc, #276]	; (8001f00 <HAL_GPIO_Init+0x2bc>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d00d      	beq.n	8001e0a <HAL_GPIO_Init+0x1c6>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4a44      	ldr	r2, [pc, #272]	; (8001f04 <HAL_GPIO_Init+0x2c0>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d007      	beq.n	8001e06 <HAL_GPIO_Init+0x1c2>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4a43      	ldr	r2, [pc, #268]	; (8001f08 <HAL_GPIO_Init+0x2c4>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d101      	bne.n	8001e02 <HAL_GPIO_Init+0x1be>
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e006      	b.n	8001e10 <HAL_GPIO_Init+0x1cc>
 8001e02:	2305      	movs	r3, #5
 8001e04:	e004      	b.n	8001e10 <HAL_GPIO_Init+0x1cc>
 8001e06:	2302      	movs	r3, #2
 8001e08:	e002      	b.n	8001e10 <HAL_GPIO_Init+0x1cc>
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e000      	b.n	8001e10 <HAL_GPIO_Init+0x1cc>
 8001e0e:	2300      	movs	r3, #0
 8001e10:	697a      	ldr	r2, [r7, #20]
 8001e12:	2103      	movs	r1, #3
 8001e14:	400a      	ands	r2, r1
 8001e16:	00d2      	lsls	r2, r2, #3
 8001e18:	4093      	lsls	r3, r2
 8001e1a:	693a      	ldr	r2, [r7, #16]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001e20:	4936      	ldr	r1, [pc, #216]	; (8001efc <HAL_GPIO_Init+0x2b8>)
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	089b      	lsrs	r3, r3, #2
 8001e26:	3318      	adds	r3, #24
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	693a      	ldr	r2, [r7, #16]
 8001e2c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e2e:	4b33      	ldr	r3, [pc, #204]	; (8001efc <HAL_GPIO_Init+0x2b8>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	43da      	mvns	r2, r3
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	685a      	ldr	r2, [r3, #4]
 8001e42:	2380      	movs	r3, #128	; 0x80
 8001e44:	035b      	lsls	r3, r3, #13
 8001e46:	4013      	ands	r3, r2
 8001e48:	d003      	beq.n	8001e52 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001e4a:	693a      	ldr	r2, [r7, #16]
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001e52:	4b2a      	ldr	r3, [pc, #168]	; (8001efc <HAL_GPIO_Init+0x2b8>)
 8001e54:	693a      	ldr	r2, [r7, #16]
 8001e56:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001e58:	4b28      	ldr	r3, [pc, #160]	; (8001efc <HAL_GPIO_Init+0x2b8>)
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	43da      	mvns	r2, r3
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	4013      	ands	r3, r2
 8001e66:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	685a      	ldr	r2, [r3, #4]
 8001e6c:	2380      	movs	r3, #128	; 0x80
 8001e6e:	039b      	lsls	r3, r3, #14
 8001e70:	4013      	ands	r3, r2
 8001e72:	d003      	beq.n	8001e7c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001e74:	693a      	ldr	r2, [r7, #16]
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001e7c:	4b1f      	ldr	r3, [pc, #124]	; (8001efc <HAL_GPIO_Init+0x2b8>)
 8001e7e:	693a      	ldr	r2, [r7, #16]
 8001e80:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001e82:	4a1e      	ldr	r2, [pc, #120]	; (8001efc <HAL_GPIO_Init+0x2b8>)
 8001e84:	2384      	movs	r3, #132	; 0x84
 8001e86:	58d3      	ldr	r3, [r2, r3]
 8001e88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	43da      	mvns	r2, r3
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	4013      	ands	r3, r2
 8001e92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	685a      	ldr	r2, [r3, #4]
 8001e98:	2380      	movs	r3, #128	; 0x80
 8001e9a:	029b      	lsls	r3, r3, #10
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	d003      	beq.n	8001ea8 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001ea0:	693a      	ldr	r2, [r7, #16]
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001ea8:	4914      	ldr	r1, [pc, #80]	; (8001efc <HAL_GPIO_Init+0x2b8>)
 8001eaa:	2284      	movs	r2, #132	; 0x84
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001eb0:	4a12      	ldr	r2, [pc, #72]	; (8001efc <HAL_GPIO_Init+0x2b8>)
 8001eb2:	2380      	movs	r3, #128	; 0x80
 8001eb4:	58d3      	ldr	r3, [r2, r3]
 8001eb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	43da      	mvns	r2, r3
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	685a      	ldr	r2, [r3, #4]
 8001ec6:	2380      	movs	r3, #128	; 0x80
 8001ec8:	025b      	lsls	r3, r3, #9
 8001eca:	4013      	ands	r3, r2
 8001ecc:	d003      	beq.n	8001ed6 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001ece:	693a      	ldr	r2, [r7, #16]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001ed6:	4909      	ldr	r1, [pc, #36]	; (8001efc <HAL_GPIO_Init+0x2b8>)
 8001ed8:	2280      	movs	r2, #128	; 0x80
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	40da      	lsrs	r2, r3
 8001eec:	1e13      	subs	r3, r2, #0
 8001eee:	d000      	beq.n	8001ef2 <HAL_GPIO_Init+0x2ae>
 8001ef0:	e6b0      	b.n	8001c54 <HAL_GPIO_Init+0x10>
  }
}
 8001ef2:	46c0      	nop			; (mov r8, r8)
 8001ef4:	46c0      	nop			; (mov r8, r8)
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	b006      	add	sp, #24
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	40021800 	.word	0x40021800
 8001f00:	50000400 	.word	0x50000400
 8001f04:	50000800 	.word	0x50000800
 8001f08:	50000c00 	.word	0x50000c00

08001f0c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	000a      	movs	r2, r1
 8001f16:	1cbb      	adds	r3, r7, #2
 8001f18:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	691b      	ldr	r3, [r3, #16]
 8001f1e:	1cba      	adds	r2, r7, #2
 8001f20:	8812      	ldrh	r2, [r2, #0]
 8001f22:	4013      	ands	r3, r2
 8001f24:	d004      	beq.n	8001f30 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001f26:	230f      	movs	r3, #15
 8001f28:	18fb      	adds	r3, r7, r3
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	701a      	strb	r2, [r3, #0]
 8001f2e:	e003      	b.n	8001f38 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f30:	230f      	movs	r3, #15
 8001f32:	18fb      	adds	r3, r7, r3
 8001f34:	2200      	movs	r2, #0
 8001f36:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001f38:	230f      	movs	r3, #15
 8001f3a:	18fb      	adds	r3, r7, r3
 8001f3c:	781b      	ldrb	r3, [r3, #0]
}
 8001f3e:	0018      	movs	r0, r3
 8001f40:	46bd      	mov	sp, r7
 8001f42:	b004      	add	sp, #16
 8001f44:	bd80      	pop	{r7, pc}

08001f46 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f46:	b580      	push	{r7, lr}
 8001f48:	b082      	sub	sp, #8
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]
 8001f4e:	0008      	movs	r0, r1
 8001f50:	0011      	movs	r1, r2
 8001f52:	1cbb      	adds	r3, r7, #2
 8001f54:	1c02      	adds	r2, r0, #0
 8001f56:	801a      	strh	r2, [r3, #0]
 8001f58:	1c7b      	adds	r3, r7, #1
 8001f5a:	1c0a      	adds	r2, r1, #0
 8001f5c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f5e:	1c7b      	adds	r3, r7, #1
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d004      	beq.n	8001f70 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f66:	1cbb      	adds	r3, r7, #2
 8001f68:	881a      	ldrh	r2, [r3, #0]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f6e:	e003      	b.n	8001f78 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f70:	1cbb      	adds	r3, r7, #2
 8001f72:	881a      	ldrh	r2, [r3, #0]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001f78:	46c0      	nop			; (mov r8, r8)
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	b002      	add	sp, #8
 8001f7e:	bd80      	pop	{r7, pc}

08001f80 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b084      	sub	sp, #16
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001f88:	4b19      	ldr	r3, [pc, #100]	; (8001ff0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a19      	ldr	r2, [pc, #100]	; (8001ff4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001f8e:	4013      	ands	r3, r2
 8001f90:	0019      	movs	r1, r3
 8001f92:	4b17      	ldr	r3, [pc, #92]	; (8001ff0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001f94:	687a      	ldr	r2, [r7, #4]
 8001f96:	430a      	orrs	r2, r1
 8001f98:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	2380      	movs	r3, #128	; 0x80
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d11f      	bne.n	8001fe4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001fa4:	4b14      	ldr	r3, [pc, #80]	; (8001ff8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	0013      	movs	r3, r2
 8001faa:	005b      	lsls	r3, r3, #1
 8001fac:	189b      	adds	r3, r3, r2
 8001fae:	005b      	lsls	r3, r3, #1
 8001fb0:	4912      	ldr	r1, [pc, #72]	; (8001ffc <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001fb2:	0018      	movs	r0, r3
 8001fb4:	f7fe f8b8 	bl	8000128 <__udivsi3>
 8001fb8:	0003      	movs	r3, r0
 8001fba:	3301      	adds	r3, #1
 8001fbc:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001fbe:	e008      	b.n	8001fd2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d003      	beq.n	8001fce <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	3b01      	subs	r3, #1
 8001fca:	60fb      	str	r3, [r7, #12]
 8001fcc:	e001      	b.n	8001fd2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	e009      	b.n	8001fe6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001fd2:	4b07      	ldr	r3, [pc, #28]	; (8001ff0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001fd4:	695a      	ldr	r2, [r3, #20]
 8001fd6:	2380      	movs	r3, #128	; 0x80
 8001fd8:	00db      	lsls	r3, r3, #3
 8001fda:	401a      	ands	r2, r3
 8001fdc:	2380      	movs	r3, #128	; 0x80
 8001fde:	00db      	lsls	r3, r3, #3
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d0ed      	beq.n	8001fc0 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001fe4:	2300      	movs	r3, #0
}
 8001fe6:	0018      	movs	r0, r3
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	b004      	add	sp, #16
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	46c0      	nop			; (mov r8, r8)
 8001ff0:	40007000 	.word	0x40007000
 8001ff4:	fffff9ff 	.word	0xfffff9ff
 8001ff8:	2000004c 	.word	0x2000004c
 8001ffc:	000f4240 	.word	0x000f4240

08002000 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002004:	4b03      	ldr	r3, [pc, #12]	; (8002014 <LL_RCC_GetAPB1Prescaler+0x14>)
 8002006:	689a      	ldr	r2, [r3, #8]
 8002008:	23e0      	movs	r3, #224	; 0xe0
 800200a:	01db      	lsls	r3, r3, #7
 800200c:	4013      	ands	r3, r2
}
 800200e:	0018      	movs	r0, r3
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}
 8002014:	40021000 	.word	0x40021000

08002018 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b088      	sub	sp, #32
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d101      	bne.n	800202a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e2fe      	b.n	8002628 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	2201      	movs	r2, #1
 8002030:	4013      	ands	r3, r2
 8002032:	d100      	bne.n	8002036 <HAL_RCC_OscConfig+0x1e>
 8002034:	e07c      	b.n	8002130 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002036:	4bc3      	ldr	r3, [pc, #780]	; (8002344 <HAL_RCC_OscConfig+0x32c>)
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	2238      	movs	r2, #56	; 0x38
 800203c:	4013      	ands	r3, r2
 800203e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002040:	4bc0      	ldr	r3, [pc, #768]	; (8002344 <HAL_RCC_OscConfig+0x32c>)
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	2203      	movs	r2, #3
 8002046:	4013      	ands	r3, r2
 8002048:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800204a:	69bb      	ldr	r3, [r7, #24]
 800204c:	2b10      	cmp	r3, #16
 800204e:	d102      	bne.n	8002056 <HAL_RCC_OscConfig+0x3e>
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	2b03      	cmp	r3, #3
 8002054:	d002      	beq.n	800205c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002056:	69bb      	ldr	r3, [r7, #24]
 8002058:	2b08      	cmp	r3, #8
 800205a:	d10b      	bne.n	8002074 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800205c:	4bb9      	ldr	r3, [pc, #740]	; (8002344 <HAL_RCC_OscConfig+0x32c>)
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	2380      	movs	r3, #128	; 0x80
 8002062:	029b      	lsls	r3, r3, #10
 8002064:	4013      	ands	r3, r2
 8002066:	d062      	beq.n	800212e <HAL_RCC_OscConfig+0x116>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d15e      	bne.n	800212e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	e2d9      	b.n	8002628 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	685a      	ldr	r2, [r3, #4]
 8002078:	2380      	movs	r3, #128	; 0x80
 800207a:	025b      	lsls	r3, r3, #9
 800207c:	429a      	cmp	r2, r3
 800207e:	d107      	bne.n	8002090 <HAL_RCC_OscConfig+0x78>
 8002080:	4bb0      	ldr	r3, [pc, #704]	; (8002344 <HAL_RCC_OscConfig+0x32c>)
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	4baf      	ldr	r3, [pc, #700]	; (8002344 <HAL_RCC_OscConfig+0x32c>)
 8002086:	2180      	movs	r1, #128	; 0x80
 8002088:	0249      	lsls	r1, r1, #9
 800208a:	430a      	orrs	r2, r1
 800208c:	601a      	str	r2, [r3, #0]
 800208e:	e020      	b.n	80020d2 <HAL_RCC_OscConfig+0xba>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	685a      	ldr	r2, [r3, #4]
 8002094:	23a0      	movs	r3, #160	; 0xa0
 8002096:	02db      	lsls	r3, r3, #11
 8002098:	429a      	cmp	r2, r3
 800209a:	d10e      	bne.n	80020ba <HAL_RCC_OscConfig+0xa2>
 800209c:	4ba9      	ldr	r3, [pc, #676]	; (8002344 <HAL_RCC_OscConfig+0x32c>)
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	4ba8      	ldr	r3, [pc, #672]	; (8002344 <HAL_RCC_OscConfig+0x32c>)
 80020a2:	2180      	movs	r1, #128	; 0x80
 80020a4:	02c9      	lsls	r1, r1, #11
 80020a6:	430a      	orrs	r2, r1
 80020a8:	601a      	str	r2, [r3, #0]
 80020aa:	4ba6      	ldr	r3, [pc, #664]	; (8002344 <HAL_RCC_OscConfig+0x32c>)
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	4ba5      	ldr	r3, [pc, #660]	; (8002344 <HAL_RCC_OscConfig+0x32c>)
 80020b0:	2180      	movs	r1, #128	; 0x80
 80020b2:	0249      	lsls	r1, r1, #9
 80020b4:	430a      	orrs	r2, r1
 80020b6:	601a      	str	r2, [r3, #0]
 80020b8:	e00b      	b.n	80020d2 <HAL_RCC_OscConfig+0xba>
 80020ba:	4ba2      	ldr	r3, [pc, #648]	; (8002344 <HAL_RCC_OscConfig+0x32c>)
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	4ba1      	ldr	r3, [pc, #644]	; (8002344 <HAL_RCC_OscConfig+0x32c>)
 80020c0:	49a1      	ldr	r1, [pc, #644]	; (8002348 <HAL_RCC_OscConfig+0x330>)
 80020c2:	400a      	ands	r2, r1
 80020c4:	601a      	str	r2, [r3, #0]
 80020c6:	4b9f      	ldr	r3, [pc, #636]	; (8002344 <HAL_RCC_OscConfig+0x32c>)
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	4b9e      	ldr	r3, [pc, #632]	; (8002344 <HAL_RCC_OscConfig+0x32c>)
 80020cc:	499f      	ldr	r1, [pc, #636]	; (800234c <HAL_RCC_OscConfig+0x334>)
 80020ce:	400a      	ands	r2, r1
 80020d0:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d014      	beq.n	8002104 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020da:	f7ff fbe9 	bl	80018b0 <HAL_GetTick>
 80020de:	0003      	movs	r3, r0
 80020e0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020e2:	e008      	b.n	80020f6 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020e4:	f7ff fbe4 	bl	80018b0 <HAL_GetTick>
 80020e8:	0002      	movs	r2, r0
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	2b64      	cmp	r3, #100	; 0x64
 80020f0:	d901      	bls.n	80020f6 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80020f2:	2303      	movs	r3, #3
 80020f4:	e298      	b.n	8002628 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020f6:	4b93      	ldr	r3, [pc, #588]	; (8002344 <HAL_RCC_OscConfig+0x32c>)
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	2380      	movs	r3, #128	; 0x80
 80020fc:	029b      	lsls	r3, r3, #10
 80020fe:	4013      	ands	r3, r2
 8002100:	d0f0      	beq.n	80020e4 <HAL_RCC_OscConfig+0xcc>
 8002102:	e015      	b.n	8002130 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002104:	f7ff fbd4 	bl	80018b0 <HAL_GetTick>
 8002108:	0003      	movs	r3, r0
 800210a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800210c:	e008      	b.n	8002120 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800210e:	f7ff fbcf 	bl	80018b0 <HAL_GetTick>
 8002112:	0002      	movs	r2, r0
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	1ad3      	subs	r3, r2, r3
 8002118:	2b64      	cmp	r3, #100	; 0x64
 800211a:	d901      	bls.n	8002120 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800211c:	2303      	movs	r3, #3
 800211e:	e283      	b.n	8002628 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002120:	4b88      	ldr	r3, [pc, #544]	; (8002344 <HAL_RCC_OscConfig+0x32c>)
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	2380      	movs	r3, #128	; 0x80
 8002126:	029b      	lsls	r3, r3, #10
 8002128:	4013      	ands	r3, r2
 800212a:	d1f0      	bne.n	800210e <HAL_RCC_OscConfig+0xf6>
 800212c:	e000      	b.n	8002130 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800212e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	2202      	movs	r2, #2
 8002136:	4013      	ands	r3, r2
 8002138:	d100      	bne.n	800213c <HAL_RCC_OscConfig+0x124>
 800213a:	e099      	b.n	8002270 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800213c:	4b81      	ldr	r3, [pc, #516]	; (8002344 <HAL_RCC_OscConfig+0x32c>)
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	2238      	movs	r2, #56	; 0x38
 8002142:	4013      	ands	r3, r2
 8002144:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002146:	4b7f      	ldr	r3, [pc, #508]	; (8002344 <HAL_RCC_OscConfig+0x32c>)
 8002148:	68db      	ldr	r3, [r3, #12]
 800214a:	2203      	movs	r2, #3
 800214c:	4013      	ands	r3, r2
 800214e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002150:	69bb      	ldr	r3, [r7, #24]
 8002152:	2b10      	cmp	r3, #16
 8002154:	d102      	bne.n	800215c <HAL_RCC_OscConfig+0x144>
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	2b02      	cmp	r3, #2
 800215a:	d002      	beq.n	8002162 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800215c:	69bb      	ldr	r3, [r7, #24]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d135      	bne.n	80021ce <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002162:	4b78      	ldr	r3, [pc, #480]	; (8002344 <HAL_RCC_OscConfig+0x32c>)
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	2380      	movs	r3, #128	; 0x80
 8002168:	00db      	lsls	r3, r3, #3
 800216a:	4013      	ands	r3, r2
 800216c:	d005      	beq.n	800217a <HAL_RCC_OscConfig+0x162>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	68db      	ldr	r3, [r3, #12]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d101      	bne.n	800217a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e256      	b.n	8002628 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800217a:	4b72      	ldr	r3, [pc, #456]	; (8002344 <HAL_RCC_OscConfig+0x32c>)
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	4a74      	ldr	r2, [pc, #464]	; (8002350 <HAL_RCC_OscConfig+0x338>)
 8002180:	4013      	ands	r3, r2
 8002182:	0019      	movs	r1, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	695b      	ldr	r3, [r3, #20]
 8002188:	021a      	lsls	r2, r3, #8
 800218a:	4b6e      	ldr	r3, [pc, #440]	; (8002344 <HAL_RCC_OscConfig+0x32c>)
 800218c:	430a      	orrs	r2, r1
 800218e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002190:	69bb      	ldr	r3, [r7, #24]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d112      	bne.n	80021bc <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002196:	4b6b      	ldr	r3, [pc, #428]	; (8002344 <HAL_RCC_OscConfig+0x32c>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a6e      	ldr	r2, [pc, #440]	; (8002354 <HAL_RCC_OscConfig+0x33c>)
 800219c:	4013      	ands	r3, r2
 800219e:	0019      	movs	r1, r3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	691a      	ldr	r2, [r3, #16]
 80021a4:	4b67      	ldr	r3, [pc, #412]	; (8002344 <HAL_RCC_OscConfig+0x32c>)
 80021a6:	430a      	orrs	r2, r1
 80021a8:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80021aa:	4b66      	ldr	r3, [pc, #408]	; (8002344 <HAL_RCC_OscConfig+0x32c>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	0adb      	lsrs	r3, r3, #11
 80021b0:	2207      	movs	r2, #7
 80021b2:	4013      	ands	r3, r2
 80021b4:	4a68      	ldr	r2, [pc, #416]	; (8002358 <HAL_RCC_OscConfig+0x340>)
 80021b6:	40da      	lsrs	r2, r3
 80021b8:	4b68      	ldr	r3, [pc, #416]	; (800235c <HAL_RCC_OscConfig+0x344>)
 80021ba:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80021bc:	4b68      	ldr	r3, [pc, #416]	; (8002360 <HAL_RCC_OscConfig+0x348>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	0018      	movs	r0, r3
 80021c2:	f7ff fb19 	bl	80017f8 <HAL_InitTick>
 80021c6:	1e03      	subs	r3, r0, #0
 80021c8:	d051      	beq.n	800226e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e22c      	b.n	8002628 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	68db      	ldr	r3, [r3, #12]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d030      	beq.n	8002238 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80021d6:	4b5b      	ldr	r3, [pc, #364]	; (8002344 <HAL_RCC_OscConfig+0x32c>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a5e      	ldr	r2, [pc, #376]	; (8002354 <HAL_RCC_OscConfig+0x33c>)
 80021dc:	4013      	ands	r3, r2
 80021de:	0019      	movs	r1, r3
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	691a      	ldr	r2, [r3, #16]
 80021e4:	4b57      	ldr	r3, [pc, #348]	; (8002344 <HAL_RCC_OscConfig+0x32c>)
 80021e6:	430a      	orrs	r2, r1
 80021e8:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80021ea:	4b56      	ldr	r3, [pc, #344]	; (8002344 <HAL_RCC_OscConfig+0x32c>)
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	4b55      	ldr	r3, [pc, #340]	; (8002344 <HAL_RCC_OscConfig+0x32c>)
 80021f0:	2180      	movs	r1, #128	; 0x80
 80021f2:	0049      	lsls	r1, r1, #1
 80021f4:	430a      	orrs	r2, r1
 80021f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021f8:	f7ff fb5a 	bl	80018b0 <HAL_GetTick>
 80021fc:	0003      	movs	r3, r0
 80021fe:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002200:	e008      	b.n	8002214 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002202:	f7ff fb55 	bl	80018b0 <HAL_GetTick>
 8002206:	0002      	movs	r2, r0
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	2b02      	cmp	r3, #2
 800220e:	d901      	bls.n	8002214 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002210:	2303      	movs	r3, #3
 8002212:	e209      	b.n	8002628 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002214:	4b4b      	ldr	r3, [pc, #300]	; (8002344 <HAL_RCC_OscConfig+0x32c>)
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	2380      	movs	r3, #128	; 0x80
 800221a:	00db      	lsls	r3, r3, #3
 800221c:	4013      	ands	r3, r2
 800221e:	d0f0      	beq.n	8002202 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002220:	4b48      	ldr	r3, [pc, #288]	; (8002344 <HAL_RCC_OscConfig+0x32c>)
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	4a4a      	ldr	r2, [pc, #296]	; (8002350 <HAL_RCC_OscConfig+0x338>)
 8002226:	4013      	ands	r3, r2
 8002228:	0019      	movs	r1, r3
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	695b      	ldr	r3, [r3, #20]
 800222e:	021a      	lsls	r2, r3, #8
 8002230:	4b44      	ldr	r3, [pc, #272]	; (8002344 <HAL_RCC_OscConfig+0x32c>)
 8002232:	430a      	orrs	r2, r1
 8002234:	605a      	str	r2, [r3, #4]
 8002236:	e01b      	b.n	8002270 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002238:	4b42      	ldr	r3, [pc, #264]	; (8002344 <HAL_RCC_OscConfig+0x32c>)
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	4b41      	ldr	r3, [pc, #260]	; (8002344 <HAL_RCC_OscConfig+0x32c>)
 800223e:	4949      	ldr	r1, [pc, #292]	; (8002364 <HAL_RCC_OscConfig+0x34c>)
 8002240:	400a      	ands	r2, r1
 8002242:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002244:	f7ff fb34 	bl	80018b0 <HAL_GetTick>
 8002248:	0003      	movs	r3, r0
 800224a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800224c:	e008      	b.n	8002260 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800224e:	f7ff fb2f 	bl	80018b0 <HAL_GetTick>
 8002252:	0002      	movs	r2, r0
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	1ad3      	subs	r3, r2, r3
 8002258:	2b02      	cmp	r3, #2
 800225a:	d901      	bls.n	8002260 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800225c:	2303      	movs	r3, #3
 800225e:	e1e3      	b.n	8002628 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002260:	4b38      	ldr	r3, [pc, #224]	; (8002344 <HAL_RCC_OscConfig+0x32c>)
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	2380      	movs	r3, #128	; 0x80
 8002266:	00db      	lsls	r3, r3, #3
 8002268:	4013      	ands	r3, r2
 800226a:	d1f0      	bne.n	800224e <HAL_RCC_OscConfig+0x236>
 800226c:	e000      	b.n	8002270 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800226e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	2208      	movs	r2, #8
 8002276:	4013      	ands	r3, r2
 8002278:	d047      	beq.n	800230a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800227a:	4b32      	ldr	r3, [pc, #200]	; (8002344 <HAL_RCC_OscConfig+0x32c>)
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	2238      	movs	r2, #56	; 0x38
 8002280:	4013      	ands	r3, r2
 8002282:	2b18      	cmp	r3, #24
 8002284:	d10a      	bne.n	800229c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002286:	4b2f      	ldr	r3, [pc, #188]	; (8002344 <HAL_RCC_OscConfig+0x32c>)
 8002288:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800228a:	2202      	movs	r2, #2
 800228c:	4013      	ands	r3, r2
 800228e:	d03c      	beq.n	800230a <HAL_RCC_OscConfig+0x2f2>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	699b      	ldr	r3, [r3, #24]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d138      	bne.n	800230a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	e1c5      	b.n	8002628 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	699b      	ldr	r3, [r3, #24]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d019      	beq.n	80022d8 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80022a4:	4b27      	ldr	r3, [pc, #156]	; (8002344 <HAL_RCC_OscConfig+0x32c>)
 80022a6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80022a8:	4b26      	ldr	r3, [pc, #152]	; (8002344 <HAL_RCC_OscConfig+0x32c>)
 80022aa:	2101      	movs	r1, #1
 80022ac:	430a      	orrs	r2, r1
 80022ae:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022b0:	f7ff fafe 	bl	80018b0 <HAL_GetTick>
 80022b4:	0003      	movs	r3, r0
 80022b6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022b8:	e008      	b.n	80022cc <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022ba:	f7ff faf9 	bl	80018b0 <HAL_GetTick>
 80022be:	0002      	movs	r2, r0
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	1ad3      	subs	r3, r2, r3
 80022c4:	2b02      	cmp	r3, #2
 80022c6:	d901      	bls.n	80022cc <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80022c8:	2303      	movs	r3, #3
 80022ca:	e1ad      	b.n	8002628 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022cc:	4b1d      	ldr	r3, [pc, #116]	; (8002344 <HAL_RCC_OscConfig+0x32c>)
 80022ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022d0:	2202      	movs	r2, #2
 80022d2:	4013      	ands	r3, r2
 80022d4:	d0f1      	beq.n	80022ba <HAL_RCC_OscConfig+0x2a2>
 80022d6:	e018      	b.n	800230a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80022d8:	4b1a      	ldr	r3, [pc, #104]	; (8002344 <HAL_RCC_OscConfig+0x32c>)
 80022da:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80022dc:	4b19      	ldr	r3, [pc, #100]	; (8002344 <HAL_RCC_OscConfig+0x32c>)
 80022de:	2101      	movs	r1, #1
 80022e0:	438a      	bics	r2, r1
 80022e2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022e4:	f7ff fae4 	bl	80018b0 <HAL_GetTick>
 80022e8:	0003      	movs	r3, r0
 80022ea:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80022ec:	e008      	b.n	8002300 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022ee:	f7ff fadf 	bl	80018b0 <HAL_GetTick>
 80022f2:	0002      	movs	r2, r0
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	1ad3      	subs	r3, r2, r3
 80022f8:	2b02      	cmp	r3, #2
 80022fa:	d901      	bls.n	8002300 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80022fc:	2303      	movs	r3, #3
 80022fe:	e193      	b.n	8002628 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002300:	4b10      	ldr	r3, [pc, #64]	; (8002344 <HAL_RCC_OscConfig+0x32c>)
 8002302:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002304:	2202      	movs	r2, #2
 8002306:	4013      	ands	r3, r2
 8002308:	d1f1      	bne.n	80022ee <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	2204      	movs	r2, #4
 8002310:	4013      	ands	r3, r2
 8002312:	d100      	bne.n	8002316 <HAL_RCC_OscConfig+0x2fe>
 8002314:	e0c6      	b.n	80024a4 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002316:	231f      	movs	r3, #31
 8002318:	18fb      	adds	r3, r7, r3
 800231a:	2200      	movs	r2, #0
 800231c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800231e:	4b09      	ldr	r3, [pc, #36]	; (8002344 <HAL_RCC_OscConfig+0x32c>)
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	2238      	movs	r2, #56	; 0x38
 8002324:	4013      	ands	r3, r2
 8002326:	2b20      	cmp	r3, #32
 8002328:	d11e      	bne.n	8002368 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800232a:	4b06      	ldr	r3, [pc, #24]	; (8002344 <HAL_RCC_OscConfig+0x32c>)
 800232c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800232e:	2202      	movs	r2, #2
 8002330:	4013      	ands	r3, r2
 8002332:	d100      	bne.n	8002336 <HAL_RCC_OscConfig+0x31e>
 8002334:	e0b6      	b.n	80024a4 <HAL_RCC_OscConfig+0x48c>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d000      	beq.n	8002340 <HAL_RCC_OscConfig+0x328>
 800233e:	e0b1      	b.n	80024a4 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e171      	b.n	8002628 <HAL_RCC_OscConfig+0x610>
 8002344:	40021000 	.word	0x40021000
 8002348:	fffeffff 	.word	0xfffeffff
 800234c:	fffbffff 	.word	0xfffbffff
 8002350:	ffff80ff 	.word	0xffff80ff
 8002354:	ffffc7ff 	.word	0xffffc7ff
 8002358:	00f42400 	.word	0x00f42400
 800235c:	2000004c 	.word	0x2000004c
 8002360:	20000050 	.word	0x20000050
 8002364:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002368:	4bb1      	ldr	r3, [pc, #708]	; (8002630 <HAL_RCC_OscConfig+0x618>)
 800236a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800236c:	2380      	movs	r3, #128	; 0x80
 800236e:	055b      	lsls	r3, r3, #21
 8002370:	4013      	ands	r3, r2
 8002372:	d101      	bne.n	8002378 <HAL_RCC_OscConfig+0x360>
 8002374:	2301      	movs	r3, #1
 8002376:	e000      	b.n	800237a <HAL_RCC_OscConfig+0x362>
 8002378:	2300      	movs	r3, #0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d011      	beq.n	80023a2 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800237e:	4bac      	ldr	r3, [pc, #688]	; (8002630 <HAL_RCC_OscConfig+0x618>)
 8002380:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002382:	4bab      	ldr	r3, [pc, #684]	; (8002630 <HAL_RCC_OscConfig+0x618>)
 8002384:	2180      	movs	r1, #128	; 0x80
 8002386:	0549      	lsls	r1, r1, #21
 8002388:	430a      	orrs	r2, r1
 800238a:	63da      	str	r2, [r3, #60]	; 0x3c
 800238c:	4ba8      	ldr	r3, [pc, #672]	; (8002630 <HAL_RCC_OscConfig+0x618>)
 800238e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002390:	2380      	movs	r3, #128	; 0x80
 8002392:	055b      	lsls	r3, r3, #21
 8002394:	4013      	ands	r3, r2
 8002396:	60fb      	str	r3, [r7, #12]
 8002398:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800239a:	231f      	movs	r3, #31
 800239c:	18fb      	adds	r3, r7, r3
 800239e:	2201      	movs	r2, #1
 80023a0:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023a2:	4ba4      	ldr	r3, [pc, #656]	; (8002634 <HAL_RCC_OscConfig+0x61c>)
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	2380      	movs	r3, #128	; 0x80
 80023a8:	005b      	lsls	r3, r3, #1
 80023aa:	4013      	ands	r3, r2
 80023ac:	d11a      	bne.n	80023e4 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023ae:	4ba1      	ldr	r3, [pc, #644]	; (8002634 <HAL_RCC_OscConfig+0x61c>)
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	4ba0      	ldr	r3, [pc, #640]	; (8002634 <HAL_RCC_OscConfig+0x61c>)
 80023b4:	2180      	movs	r1, #128	; 0x80
 80023b6:	0049      	lsls	r1, r1, #1
 80023b8:	430a      	orrs	r2, r1
 80023ba:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80023bc:	f7ff fa78 	bl	80018b0 <HAL_GetTick>
 80023c0:	0003      	movs	r3, r0
 80023c2:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023c4:	e008      	b.n	80023d8 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023c6:	f7ff fa73 	bl	80018b0 <HAL_GetTick>
 80023ca:	0002      	movs	r2, r0
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	1ad3      	subs	r3, r2, r3
 80023d0:	2b02      	cmp	r3, #2
 80023d2:	d901      	bls.n	80023d8 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80023d4:	2303      	movs	r3, #3
 80023d6:	e127      	b.n	8002628 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023d8:	4b96      	ldr	r3, [pc, #600]	; (8002634 <HAL_RCC_OscConfig+0x61c>)
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	2380      	movs	r3, #128	; 0x80
 80023de:	005b      	lsls	r3, r3, #1
 80023e0:	4013      	ands	r3, r2
 80023e2:	d0f0      	beq.n	80023c6 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d106      	bne.n	80023fa <HAL_RCC_OscConfig+0x3e2>
 80023ec:	4b90      	ldr	r3, [pc, #576]	; (8002630 <HAL_RCC_OscConfig+0x618>)
 80023ee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80023f0:	4b8f      	ldr	r3, [pc, #572]	; (8002630 <HAL_RCC_OscConfig+0x618>)
 80023f2:	2101      	movs	r1, #1
 80023f4:	430a      	orrs	r2, r1
 80023f6:	65da      	str	r2, [r3, #92]	; 0x5c
 80023f8:	e01c      	b.n	8002434 <HAL_RCC_OscConfig+0x41c>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	2b05      	cmp	r3, #5
 8002400:	d10c      	bne.n	800241c <HAL_RCC_OscConfig+0x404>
 8002402:	4b8b      	ldr	r3, [pc, #556]	; (8002630 <HAL_RCC_OscConfig+0x618>)
 8002404:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002406:	4b8a      	ldr	r3, [pc, #552]	; (8002630 <HAL_RCC_OscConfig+0x618>)
 8002408:	2104      	movs	r1, #4
 800240a:	430a      	orrs	r2, r1
 800240c:	65da      	str	r2, [r3, #92]	; 0x5c
 800240e:	4b88      	ldr	r3, [pc, #544]	; (8002630 <HAL_RCC_OscConfig+0x618>)
 8002410:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002412:	4b87      	ldr	r3, [pc, #540]	; (8002630 <HAL_RCC_OscConfig+0x618>)
 8002414:	2101      	movs	r1, #1
 8002416:	430a      	orrs	r2, r1
 8002418:	65da      	str	r2, [r3, #92]	; 0x5c
 800241a:	e00b      	b.n	8002434 <HAL_RCC_OscConfig+0x41c>
 800241c:	4b84      	ldr	r3, [pc, #528]	; (8002630 <HAL_RCC_OscConfig+0x618>)
 800241e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002420:	4b83      	ldr	r3, [pc, #524]	; (8002630 <HAL_RCC_OscConfig+0x618>)
 8002422:	2101      	movs	r1, #1
 8002424:	438a      	bics	r2, r1
 8002426:	65da      	str	r2, [r3, #92]	; 0x5c
 8002428:	4b81      	ldr	r3, [pc, #516]	; (8002630 <HAL_RCC_OscConfig+0x618>)
 800242a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800242c:	4b80      	ldr	r3, [pc, #512]	; (8002630 <HAL_RCC_OscConfig+0x618>)
 800242e:	2104      	movs	r1, #4
 8002430:	438a      	bics	r2, r1
 8002432:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d014      	beq.n	8002466 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800243c:	f7ff fa38 	bl	80018b0 <HAL_GetTick>
 8002440:	0003      	movs	r3, r0
 8002442:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002444:	e009      	b.n	800245a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002446:	f7ff fa33 	bl	80018b0 <HAL_GetTick>
 800244a:	0002      	movs	r2, r0
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	1ad3      	subs	r3, r2, r3
 8002450:	4a79      	ldr	r2, [pc, #484]	; (8002638 <HAL_RCC_OscConfig+0x620>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d901      	bls.n	800245a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	e0e6      	b.n	8002628 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800245a:	4b75      	ldr	r3, [pc, #468]	; (8002630 <HAL_RCC_OscConfig+0x618>)
 800245c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800245e:	2202      	movs	r2, #2
 8002460:	4013      	ands	r3, r2
 8002462:	d0f0      	beq.n	8002446 <HAL_RCC_OscConfig+0x42e>
 8002464:	e013      	b.n	800248e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002466:	f7ff fa23 	bl	80018b0 <HAL_GetTick>
 800246a:	0003      	movs	r3, r0
 800246c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800246e:	e009      	b.n	8002484 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002470:	f7ff fa1e 	bl	80018b0 <HAL_GetTick>
 8002474:	0002      	movs	r2, r0
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	4a6f      	ldr	r2, [pc, #444]	; (8002638 <HAL_RCC_OscConfig+0x620>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d901      	bls.n	8002484 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002480:	2303      	movs	r3, #3
 8002482:	e0d1      	b.n	8002628 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002484:	4b6a      	ldr	r3, [pc, #424]	; (8002630 <HAL_RCC_OscConfig+0x618>)
 8002486:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002488:	2202      	movs	r2, #2
 800248a:	4013      	ands	r3, r2
 800248c:	d1f0      	bne.n	8002470 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800248e:	231f      	movs	r3, #31
 8002490:	18fb      	adds	r3, r7, r3
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	2b01      	cmp	r3, #1
 8002496:	d105      	bne.n	80024a4 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002498:	4b65      	ldr	r3, [pc, #404]	; (8002630 <HAL_RCC_OscConfig+0x618>)
 800249a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800249c:	4b64      	ldr	r3, [pc, #400]	; (8002630 <HAL_RCC_OscConfig+0x618>)
 800249e:	4967      	ldr	r1, [pc, #412]	; (800263c <HAL_RCC_OscConfig+0x624>)
 80024a0:	400a      	ands	r2, r1
 80024a2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	69db      	ldr	r3, [r3, #28]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d100      	bne.n	80024ae <HAL_RCC_OscConfig+0x496>
 80024ac:	e0bb      	b.n	8002626 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024ae:	4b60      	ldr	r3, [pc, #384]	; (8002630 <HAL_RCC_OscConfig+0x618>)
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	2238      	movs	r2, #56	; 0x38
 80024b4:	4013      	ands	r3, r2
 80024b6:	2b10      	cmp	r3, #16
 80024b8:	d100      	bne.n	80024bc <HAL_RCC_OscConfig+0x4a4>
 80024ba:	e07b      	b.n	80025b4 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	69db      	ldr	r3, [r3, #28]
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d156      	bne.n	8002572 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024c4:	4b5a      	ldr	r3, [pc, #360]	; (8002630 <HAL_RCC_OscConfig+0x618>)
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	4b59      	ldr	r3, [pc, #356]	; (8002630 <HAL_RCC_OscConfig+0x618>)
 80024ca:	495d      	ldr	r1, [pc, #372]	; (8002640 <HAL_RCC_OscConfig+0x628>)
 80024cc:	400a      	ands	r2, r1
 80024ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024d0:	f7ff f9ee 	bl	80018b0 <HAL_GetTick>
 80024d4:	0003      	movs	r3, r0
 80024d6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024d8:	e008      	b.n	80024ec <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024da:	f7ff f9e9 	bl	80018b0 <HAL_GetTick>
 80024de:	0002      	movs	r2, r0
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d901      	bls.n	80024ec <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80024e8:	2303      	movs	r3, #3
 80024ea:	e09d      	b.n	8002628 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024ec:	4b50      	ldr	r3, [pc, #320]	; (8002630 <HAL_RCC_OscConfig+0x618>)
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	2380      	movs	r3, #128	; 0x80
 80024f2:	049b      	lsls	r3, r3, #18
 80024f4:	4013      	ands	r3, r2
 80024f6:	d1f0      	bne.n	80024da <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024f8:	4b4d      	ldr	r3, [pc, #308]	; (8002630 <HAL_RCC_OscConfig+0x618>)
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	4a51      	ldr	r2, [pc, #324]	; (8002644 <HAL_RCC_OscConfig+0x62c>)
 80024fe:	4013      	ands	r3, r2
 8002500:	0019      	movs	r1, r3
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6a1a      	ldr	r2, [r3, #32]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800250a:	431a      	orrs	r2, r3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002510:	021b      	lsls	r3, r3, #8
 8002512:	431a      	orrs	r2, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002518:	431a      	orrs	r2, r3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251e:	431a      	orrs	r2, r3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002524:	431a      	orrs	r2, r3
 8002526:	4b42      	ldr	r3, [pc, #264]	; (8002630 <HAL_RCC_OscConfig+0x618>)
 8002528:	430a      	orrs	r2, r1
 800252a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800252c:	4b40      	ldr	r3, [pc, #256]	; (8002630 <HAL_RCC_OscConfig+0x618>)
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	4b3f      	ldr	r3, [pc, #252]	; (8002630 <HAL_RCC_OscConfig+0x618>)
 8002532:	2180      	movs	r1, #128	; 0x80
 8002534:	0449      	lsls	r1, r1, #17
 8002536:	430a      	orrs	r2, r1
 8002538:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800253a:	4b3d      	ldr	r3, [pc, #244]	; (8002630 <HAL_RCC_OscConfig+0x618>)
 800253c:	68da      	ldr	r2, [r3, #12]
 800253e:	4b3c      	ldr	r3, [pc, #240]	; (8002630 <HAL_RCC_OscConfig+0x618>)
 8002540:	2180      	movs	r1, #128	; 0x80
 8002542:	0549      	lsls	r1, r1, #21
 8002544:	430a      	orrs	r2, r1
 8002546:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002548:	f7ff f9b2 	bl	80018b0 <HAL_GetTick>
 800254c:	0003      	movs	r3, r0
 800254e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002550:	e008      	b.n	8002564 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002552:	f7ff f9ad 	bl	80018b0 <HAL_GetTick>
 8002556:	0002      	movs	r2, r0
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	2b02      	cmp	r3, #2
 800255e:	d901      	bls.n	8002564 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8002560:	2303      	movs	r3, #3
 8002562:	e061      	b.n	8002628 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002564:	4b32      	ldr	r3, [pc, #200]	; (8002630 <HAL_RCC_OscConfig+0x618>)
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	2380      	movs	r3, #128	; 0x80
 800256a:	049b      	lsls	r3, r3, #18
 800256c:	4013      	ands	r3, r2
 800256e:	d0f0      	beq.n	8002552 <HAL_RCC_OscConfig+0x53a>
 8002570:	e059      	b.n	8002626 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002572:	4b2f      	ldr	r3, [pc, #188]	; (8002630 <HAL_RCC_OscConfig+0x618>)
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	4b2e      	ldr	r3, [pc, #184]	; (8002630 <HAL_RCC_OscConfig+0x618>)
 8002578:	4931      	ldr	r1, [pc, #196]	; (8002640 <HAL_RCC_OscConfig+0x628>)
 800257a:	400a      	ands	r2, r1
 800257c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800257e:	f7ff f997 	bl	80018b0 <HAL_GetTick>
 8002582:	0003      	movs	r3, r0
 8002584:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002586:	e008      	b.n	800259a <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002588:	f7ff f992 	bl	80018b0 <HAL_GetTick>
 800258c:	0002      	movs	r2, r0
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	2b02      	cmp	r3, #2
 8002594:	d901      	bls.n	800259a <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8002596:	2303      	movs	r3, #3
 8002598:	e046      	b.n	8002628 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800259a:	4b25      	ldr	r3, [pc, #148]	; (8002630 <HAL_RCC_OscConfig+0x618>)
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	2380      	movs	r3, #128	; 0x80
 80025a0:	049b      	lsls	r3, r3, #18
 80025a2:	4013      	ands	r3, r2
 80025a4:	d1f0      	bne.n	8002588 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80025a6:	4b22      	ldr	r3, [pc, #136]	; (8002630 <HAL_RCC_OscConfig+0x618>)
 80025a8:	68da      	ldr	r2, [r3, #12]
 80025aa:	4b21      	ldr	r3, [pc, #132]	; (8002630 <HAL_RCC_OscConfig+0x618>)
 80025ac:	4926      	ldr	r1, [pc, #152]	; (8002648 <HAL_RCC_OscConfig+0x630>)
 80025ae:	400a      	ands	r2, r1
 80025b0:	60da      	str	r2, [r3, #12]
 80025b2:	e038      	b.n	8002626 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	69db      	ldr	r3, [r3, #28]
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d101      	bne.n	80025c0 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	e033      	b.n	8002628 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80025c0:	4b1b      	ldr	r3, [pc, #108]	; (8002630 <HAL_RCC_OscConfig+0x618>)
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	2203      	movs	r2, #3
 80025ca:	401a      	ands	r2, r3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6a1b      	ldr	r3, [r3, #32]
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d126      	bne.n	8002622 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	2270      	movs	r2, #112	; 0x70
 80025d8:	401a      	ands	r2, r3
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025de:	429a      	cmp	r2, r3
 80025e0:	d11f      	bne.n	8002622 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80025e2:	697a      	ldr	r2, [r7, #20]
 80025e4:	23fe      	movs	r3, #254	; 0xfe
 80025e6:	01db      	lsls	r3, r3, #7
 80025e8:	401a      	ands	r2, r3
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ee:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d116      	bne.n	8002622 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80025f4:	697a      	ldr	r2, [r7, #20]
 80025f6:	23f8      	movs	r3, #248	; 0xf8
 80025f8:	039b      	lsls	r3, r3, #14
 80025fa:	401a      	ands	r2, r3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002600:	429a      	cmp	r2, r3
 8002602:	d10e      	bne.n	8002622 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002604:	697a      	ldr	r2, [r7, #20]
 8002606:	23e0      	movs	r3, #224	; 0xe0
 8002608:	051b      	lsls	r3, r3, #20
 800260a:	401a      	ands	r2, r3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002610:	429a      	cmp	r2, r3
 8002612:	d106      	bne.n	8002622 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	0f5b      	lsrs	r3, r3, #29
 8002618:	075a      	lsls	r2, r3, #29
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800261e:	429a      	cmp	r2, r3
 8002620:	d001      	beq.n	8002626 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e000      	b.n	8002628 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8002626:	2300      	movs	r3, #0
}
 8002628:	0018      	movs	r0, r3
 800262a:	46bd      	mov	sp, r7
 800262c:	b008      	add	sp, #32
 800262e:	bd80      	pop	{r7, pc}
 8002630:	40021000 	.word	0x40021000
 8002634:	40007000 	.word	0x40007000
 8002638:	00001388 	.word	0x00001388
 800263c:	efffffff 	.word	0xefffffff
 8002640:	feffffff 	.word	0xfeffffff
 8002644:	11c1808c 	.word	0x11c1808c
 8002648:	eefefffc 	.word	0xeefefffc

0800264c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b084      	sub	sp, #16
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d101      	bne.n	8002660 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e0e9      	b.n	8002834 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002660:	4b76      	ldr	r3, [pc, #472]	; (800283c <HAL_RCC_ClockConfig+0x1f0>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	2207      	movs	r2, #7
 8002666:	4013      	ands	r3, r2
 8002668:	683a      	ldr	r2, [r7, #0]
 800266a:	429a      	cmp	r2, r3
 800266c:	d91e      	bls.n	80026ac <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800266e:	4b73      	ldr	r3, [pc, #460]	; (800283c <HAL_RCC_ClockConfig+0x1f0>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	2207      	movs	r2, #7
 8002674:	4393      	bics	r3, r2
 8002676:	0019      	movs	r1, r3
 8002678:	4b70      	ldr	r3, [pc, #448]	; (800283c <HAL_RCC_ClockConfig+0x1f0>)
 800267a:	683a      	ldr	r2, [r7, #0]
 800267c:	430a      	orrs	r2, r1
 800267e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002680:	f7ff f916 	bl	80018b0 <HAL_GetTick>
 8002684:	0003      	movs	r3, r0
 8002686:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002688:	e009      	b.n	800269e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800268a:	f7ff f911 	bl	80018b0 <HAL_GetTick>
 800268e:	0002      	movs	r2, r0
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	4a6a      	ldr	r2, [pc, #424]	; (8002840 <HAL_RCC_ClockConfig+0x1f4>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d901      	bls.n	800269e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e0ca      	b.n	8002834 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800269e:	4b67      	ldr	r3, [pc, #412]	; (800283c <HAL_RCC_ClockConfig+0x1f0>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	2207      	movs	r2, #7
 80026a4:	4013      	ands	r3, r2
 80026a6:	683a      	ldr	r2, [r7, #0]
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d1ee      	bne.n	800268a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	2202      	movs	r2, #2
 80026b2:	4013      	ands	r3, r2
 80026b4:	d015      	beq.n	80026e2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	2204      	movs	r2, #4
 80026bc:	4013      	ands	r3, r2
 80026be:	d006      	beq.n	80026ce <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80026c0:	4b60      	ldr	r3, [pc, #384]	; (8002844 <HAL_RCC_ClockConfig+0x1f8>)
 80026c2:	689a      	ldr	r2, [r3, #8]
 80026c4:	4b5f      	ldr	r3, [pc, #380]	; (8002844 <HAL_RCC_ClockConfig+0x1f8>)
 80026c6:	21e0      	movs	r1, #224	; 0xe0
 80026c8:	01c9      	lsls	r1, r1, #7
 80026ca:	430a      	orrs	r2, r1
 80026cc:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026ce:	4b5d      	ldr	r3, [pc, #372]	; (8002844 <HAL_RCC_ClockConfig+0x1f8>)
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	4a5d      	ldr	r2, [pc, #372]	; (8002848 <HAL_RCC_ClockConfig+0x1fc>)
 80026d4:	4013      	ands	r3, r2
 80026d6:	0019      	movs	r1, r3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	689a      	ldr	r2, [r3, #8]
 80026dc:	4b59      	ldr	r3, [pc, #356]	; (8002844 <HAL_RCC_ClockConfig+0x1f8>)
 80026de:	430a      	orrs	r2, r1
 80026e0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	2201      	movs	r2, #1
 80026e8:	4013      	ands	r3, r2
 80026ea:	d057      	beq.n	800279c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d107      	bne.n	8002704 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026f4:	4b53      	ldr	r3, [pc, #332]	; (8002844 <HAL_RCC_ClockConfig+0x1f8>)
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	2380      	movs	r3, #128	; 0x80
 80026fa:	029b      	lsls	r3, r3, #10
 80026fc:	4013      	ands	r3, r2
 80026fe:	d12b      	bne.n	8002758 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e097      	b.n	8002834 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	2b02      	cmp	r3, #2
 800270a:	d107      	bne.n	800271c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800270c:	4b4d      	ldr	r3, [pc, #308]	; (8002844 <HAL_RCC_ClockConfig+0x1f8>)
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	2380      	movs	r3, #128	; 0x80
 8002712:	049b      	lsls	r3, r3, #18
 8002714:	4013      	ands	r3, r2
 8002716:	d11f      	bne.n	8002758 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	e08b      	b.n	8002834 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d107      	bne.n	8002734 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002724:	4b47      	ldr	r3, [pc, #284]	; (8002844 <HAL_RCC_ClockConfig+0x1f8>)
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	2380      	movs	r3, #128	; 0x80
 800272a:	00db      	lsls	r3, r3, #3
 800272c:	4013      	ands	r3, r2
 800272e:	d113      	bne.n	8002758 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	e07f      	b.n	8002834 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	2b03      	cmp	r3, #3
 800273a:	d106      	bne.n	800274a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800273c:	4b41      	ldr	r3, [pc, #260]	; (8002844 <HAL_RCC_ClockConfig+0x1f8>)
 800273e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002740:	2202      	movs	r2, #2
 8002742:	4013      	ands	r3, r2
 8002744:	d108      	bne.n	8002758 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e074      	b.n	8002834 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800274a:	4b3e      	ldr	r3, [pc, #248]	; (8002844 <HAL_RCC_ClockConfig+0x1f8>)
 800274c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800274e:	2202      	movs	r2, #2
 8002750:	4013      	ands	r3, r2
 8002752:	d101      	bne.n	8002758 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e06d      	b.n	8002834 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002758:	4b3a      	ldr	r3, [pc, #232]	; (8002844 <HAL_RCC_ClockConfig+0x1f8>)
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	2207      	movs	r2, #7
 800275e:	4393      	bics	r3, r2
 8002760:	0019      	movs	r1, r3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	685a      	ldr	r2, [r3, #4]
 8002766:	4b37      	ldr	r3, [pc, #220]	; (8002844 <HAL_RCC_ClockConfig+0x1f8>)
 8002768:	430a      	orrs	r2, r1
 800276a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800276c:	f7ff f8a0 	bl	80018b0 <HAL_GetTick>
 8002770:	0003      	movs	r3, r0
 8002772:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002774:	e009      	b.n	800278a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002776:	f7ff f89b 	bl	80018b0 <HAL_GetTick>
 800277a:	0002      	movs	r2, r0
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	4a2f      	ldr	r2, [pc, #188]	; (8002840 <HAL_RCC_ClockConfig+0x1f4>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d901      	bls.n	800278a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	e054      	b.n	8002834 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800278a:	4b2e      	ldr	r3, [pc, #184]	; (8002844 <HAL_RCC_ClockConfig+0x1f8>)
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	2238      	movs	r2, #56	; 0x38
 8002790:	401a      	ands	r2, r3
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	00db      	lsls	r3, r3, #3
 8002798:	429a      	cmp	r2, r3
 800279a:	d1ec      	bne.n	8002776 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800279c:	4b27      	ldr	r3, [pc, #156]	; (800283c <HAL_RCC_ClockConfig+0x1f0>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	2207      	movs	r2, #7
 80027a2:	4013      	ands	r3, r2
 80027a4:	683a      	ldr	r2, [r7, #0]
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d21e      	bcs.n	80027e8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027aa:	4b24      	ldr	r3, [pc, #144]	; (800283c <HAL_RCC_ClockConfig+0x1f0>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	2207      	movs	r2, #7
 80027b0:	4393      	bics	r3, r2
 80027b2:	0019      	movs	r1, r3
 80027b4:	4b21      	ldr	r3, [pc, #132]	; (800283c <HAL_RCC_ClockConfig+0x1f0>)
 80027b6:	683a      	ldr	r2, [r7, #0]
 80027b8:	430a      	orrs	r2, r1
 80027ba:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80027bc:	f7ff f878 	bl	80018b0 <HAL_GetTick>
 80027c0:	0003      	movs	r3, r0
 80027c2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80027c4:	e009      	b.n	80027da <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027c6:	f7ff f873 	bl	80018b0 <HAL_GetTick>
 80027ca:	0002      	movs	r2, r0
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	4a1b      	ldr	r2, [pc, #108]	; (8002840 <HAL_RCC_ClockConfig+0x1f4>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d901      	bls.n	80027da <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80027d6:	2303      	movs	r3, #3
 80027d8:	e02c      	b.n	8002834 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80027da:	4b18      	ldr	r3, [pc, #96]	; (800283c <HAL_RCC_ClockConfig+0x1f0>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	2207      	movs	r2, #7
 80027e0:	4013      	ands	r3, r2
 80027e2:	683a      	ldr	r2, [r7, #0]
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d1ee      	bne.n	80027c6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	2204      	movs	r2, #4
 80027ee:	4013      	ands	r3, r2
 80027f0:	d009      	beq.n	8002806 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80027f2:	4b14      	ldr	r3, [pc, #80]	; (8002844 <HAL_RCC_ClockConfig+0x1f8>)
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	4a15      	ldr	r2, [pc, #84]	; (800284c <HAL_RCC_ClockConfig+0x200>)
 80027f8:	4013      	ands	r3, r2
 80027fa:	0019      	movs	r1, r3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	68da      	ldr	r2, [r3, #12]
 8002800:	4b10      	ldr	r3, [pc, #64]	; (8002844 <HAL_RCC_ClockConfig+0x1f8>)
 8002802:	430a      	orrs	r2, r1
 8002804:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002806:	f000 f829 	bl	800285c <HAL_RCC_GetSysClockFreq>
 800280a:	0001      	movs	r1, r0
 800280c:	4b0d      	ldr	r3, [pc, #52]	; (8002844 <HAL_RCC_ClockConfig+0x1f8>)
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	0a1b      	lsrs	r3, r3, #8
 8002812:	220f      	movs	r2, #15
 8002814:	401a      	ands	r2, r3
 8002816:	4b0e      	ldr	r3, [pc, #56]	; (8002850 <HAL_RCC_ClockConfig+0x204>)
 8002818:	0092      	lsls	r2, r2, #2
 800281a:	58d3      	ldr	r3, [r2, r3]
 800281c:	221f      	movs	r2, #31
 800281e:	4013      	ands	r3, r2
 8002820:	000a      	movs	r2, r1
 8002822:	40da      	lsrs	r2, r3
 8002824:	4b0b      	ldr	r3, [pc, #44]	; (8002854 <HAL_RCC_ClockConfig+0x208>)
 8002826:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002828:	4b0b      	ldr	r3, [pc, #44]	; (8002858 <HAL_RCC_ClockConfig+0x20c>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	0018      	movs	r0, r3
 800282e:	f7fe ffe3 	bl	80017f8 <HAL_InitTick>
 8002832:	0003      	movs	r3, r0
}
 8002834:	0018      	movs	r0, r3
 8002836:	46bd      	mov	sp, r7
 8002838:	b004      	add	sp, #16
 800283a:	bd80      	pop	{r7, pc}
 800283c:	40022000 	.word	0x40022000
 8002840:	00001388 	.word	0x00001388
 8002844:	40021000 	.word	0x40021000
 8002848:	fffff0ff 	.word	0xfffff0ff
 800284c:	ffff8fff 	.word	0xffff8fff
 8002850:	08005b10 	.word	0x08005b10
 8002854:	2000004c 	.word	0x2000004c
 8002858:	20000050 	.word	0x20000050

0800285c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b086      	sub	sp, #24
 8002860:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002862:	4b3c      	ldr	r3, [pc, #240]	; (8002954 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	2238      	movs	r2, #56	; 0x38
 8002868:	4013      	ands	r3, r2
 800286a:	d10f      	bne.n	800288c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800286c:	4b39      	ldr	r3, [pc, #228]	; (8002954 <HAL_RCC_GetSysClockFreq+0xf8>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	0adb      	lsrs	r3, r3, #11
 8002872:	2207      	movs	r2, #7
 8002874:	4013      	ands	r3, r2
 8002876:	2201      	movs	r2, #1
 8002878:	409a      	lsls	r2, r3
 800287a:	0013      	movs	r3, r2
 800287c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800287e:	6839      	ldr	r1, [r7, #0]
 8002880:	4835      	ldr	r0, [pc, #212]	; (8002958 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002882:	f7fd fc51 	bl	8000128 <__udivsi3>
 8002886:	0003      	movs	r3, r0
 8002888:	613b      	str	r3, [r7, #16]
 800288a:	e05d      	b.n	8002948 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800288c:	4b31      	ldr	r3, [pc, #196]	; (8002954 <HAL_RCC_GetSysClockFreq+0xf8>)
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	2238      	movs	r2, #56	; 0x38
 8002892:	4013      	ands	r3, r2
 8002894:	2b08      	cmp	r3, #8
 8002896:	d102      	bne.n	800289e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002898:	4b30      	ldr	r3, [pc, #192]	; (800295c <HAL_RCC_GetSysClockFreq+0x100>)
 800289a:	613b      	str	r3, [r7, #16]
 800289c:	e054      	b.n	8002948 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800289e:	4b2d      	ldr	r3, [pc, #180]	; (8002954 <HAL_RCC_GetSysClockFreq+0xf8>)
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	2238      	movs	r2, #56	; 0x38
 80028a4:	4013      	ands	r3, r2
 80028a6:	2b10      	cmp	r3, #16
 80028a8:	d138      	bne.n	800291c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80028aa:	4b2a      	ldr	r3, [pc, #168]	; (8002954 <HAL_RCC_GetSysClockFreq+0xf8>)
 80028ac:	68db      	ldr	r3, [r3, #12]
 80028ae:	2203      	movs	r2, #3
 80028b0:	4013      	ands	r3, r2
 80028b2:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80028b4:	4b27      	ldr	r3, [pc, #156]	; (8002954 <HAL_RCC_GetSysClockFreq+0xf8>)
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	091b      	lsrs	r3, r3, #4
 80028ba:	2207      	movs	r2, #7
 80028bc:	4013      	ands	r3, r2
 80028be:	3301      	adds	r3, #1
 80028c0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2b03      	cmp	r3, #3
 80028c6:	d10d      	bne.n	80028e4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80028c8:	68b9      	ldr	r1, [r7, #8]
 80028ca:	4824      	ldr	r0, [pc, #144]	; (800295c <HAL_RCC_GetSysClockFreq+0x100>)
 80028cc:	f7fd fc2c 	bl	8000128 <__udivsi3>
 80028d0:	0003      	movs	r3, r0
 80028d2:	0019      	movs	r1, r3
 80028d4:	4b1f      	ldr	r3, [pc, #124]	; (8002954 <HAL_RCC_GetSysClockFreq+0xf8>)
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	0a1b      	lsrs	r3, r3, #8
 80028da:	227f      	movs	r2, #127	; 0x7f
 80028dc:	4013      	ands	r3, r2
 80028de:	434b      	muls	r3, r1
 80028e0:	617b      	str	r3, [r7, #20]
        break;
 80028e2:	e00d      	b.n	8002900 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80028e4:	68b9      	ldr	r1, [r7, #8]
 80028e6:	481c      	ldr	r0, [pc, #112]	; (8002958 <HAL_RCC_GetSysClockFreq+0xfc>)
 80028e8:	f7fd fc1e 	bl	8000128 <__udivsi3>
 80028ec:	0003      	movs	r3, r0
 80028ee:	0019      	movs	r1, r3
 80028f0:	4b18      	ldr	r3, [pc, #96]	; (8002954 <HAL_RCC_GetSysClockFreq+0xf8>)
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	0a1b      	lsrs	r3, r3, #8
 80028f6:	227f      	movs	r2, #127	; 0x7f
 80028f8:	4013      	ands	r3, r2
 80028fa:	434b      	muls	r3, r1
 80028fc:	617b      	str	r3, [r7, #20]
        break;
 80028fe:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002900:	4b14      	ldr	r3, [pc, #80]	; (8002954 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	0f5b      	lsrs	r3, r3, #29
 8002906:	2207      	movs	r2, #7
 8002908:	4013      	ands	r3, r2
 800290a:	3301      	adds	r3, #1
 800290c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800290e:	6879      	ldr	r1, [r7, #4]
 8002910:	6978      	ldr	r0, [r7, #20]
 8002912:	f7fd fc09 	bl	8000128 <__udivsi3>
 8002916:	0003      	movs	r3, r0
 8002918:	613b      	str	r3, [r7, #16]
 800291a:	e015      	b.n	8002948 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800291c:	4b0d      	ldr	r3, [pc, #52]	; (8002954 <HAL_RCC_GetSysClockFreq+0xf8>)
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	2238      	movs	r2, #56	; 0x38
 8002922:	4013      	ands	r3, r2
 8002924:	2b20      	cmp	r3, #32
 8002926:	d103      	bne.n	8002930 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002928:	2380      	movs	r3, #128	; 0x80
 800292a:	021b      	lsls	r3, r3, #8
 800292c:	613b      	str	r3, [r7, #16]
 800292e:	e00b      	b.n	8002948 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002930:	4b08      	ldr	r3, [pc, #32]	; (8002954 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	2238      	movs	r2, #56	; 0x38
 8002936:	4013      	ands	r3, r2
 8002938:	2b18      	cmp	r3, #24
 800293a:	d103      	bne.n	8002944 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800293c:	23fa      	movs	r3, #250	; 0xfa
 800293e:	01db      	lsls	r3, r3, #7
 8002940:	613b      	str	r3, [r7, #16]
 8002942:	e001      	b.n	8002948 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002944:	2300      	movs	r3, #0
 8002946:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002948:	693b      	ldr	r3, [r7, #16]
}
 800294a:	0018      	movs	r0, r3
 800294c:	46bd      	mov	sp, r7
 800294e:	b006      	add	sp, #24
 8002950:	bd80      	pop	{r7, pc}
 8002952:	46c0      	nop			; (mov r8, r8)
 8002954:	40021000 	.word	0x40021000
 8002958:	00f42400 	.word	0x00f42400
 800295c:	007a1200 	.word	0x007a1200

08002960 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002964:	4b02      	ldr	r3, [pc, #8]	; (8002970 <HAL_RCC_GetHCLKFreq+0x10>)
 8002966:	681b      	ldr	r3, [r3, #0]
}
 8002968:	0018      	movs	r0, r3
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	46c0      	nop			; (mov r8, r8)
 8002970:	2000004c 	.word	0x2000004c

08002974 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002974:	b5b0      	push	{r4, r5, r7, lr}
 8002976:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002978:	f7ff fff2 	bl	8002960 <HAL_RCC_GetHCLKFreq>
 800297c:	0004      	movs	r4, r0
 800297e:	f7ff fb3f 	bl	8002000 <LL_RCC_GetAPB1Prescaler>
 8002982:	0003      	movs	r3, r0
 8002984:	0b1a      	lsrs	r2, r3, #12
 8002986:	4b05      	ldr	r3, [pc, #20]	; (800299c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002988:	0092      	lsls	r2, r2, #2
 800298a:	58d3      	ldr	r3, [r2, r3]
 800298c:	221f      	movs	r2, #31
 800298e:	4013      	ands	r3, r2
 8002990:	40dc      	lsrs	r4, r3
 8002992:	0023      	movs	r3, r4
}
 8002994:	0018      	movs	r0, r3
 8002996:	46bd      	mov	sp, r7
 8002998:	bdb0      	pop	{r4, r5, r7, pc}
 800299a:	46c0      	nop			; (mov r8, r8)
 800299c:	08005b50 	.word	0x08005b50

080029a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b086      	sub	sp, #24
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80029a8:	2313      	movs	r3, #19
 80029aa:	18fb      	adds	r3, r7, r3
 80029ac:	2200      	movs	r2, #0
 80029ae:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80029b0:	2312      	movs	r3, #18
 80029b2:	18fb      	adds	r3, r7, r3
 80029b4:	2200      	movs	r2, #0
 80029b6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	2380      	movs	r3, #128	; 0x80
 80029be:	029b      	lsls	r3, r3, #10
 80029c0:	4013      	ands	r3, r2
 80029c2:	d100      	bne.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80029c4:	e0a3      	b.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029c6:	2011      	movs	r0, #17
 80029c8:	183b      	adds	r3, r7, r0
 80029ca:	2200      	movs	r2, #0
 80029cc:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029ce:	4bc3      	ldr	r3, [pc, #780]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80029d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80029d2:	2380      	movs	r3, #128	; 0x80
 80029d4:	055b      	lsls	r3, r3, #21
 80029d6:	4013      	ands	r3, r2
 80029d8:	d110      	bne.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029da:	4bc0      	ldr	r3, [pc, #768]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80029dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80029de:	4bbf      	ldr	r3, [pc, #764]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80029e0:	2180      	movs	r1, #128	; 0x80
 80029e2:	0549      	lsls	r1, r1, #21
 80029e4:	430a      	orrs	r2, r1
 80029e6:	63da      	str	r2, [r3, #60]	; 0x3c
 80029e8:	4bbc      	ldr	r3, [pc, #752]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80029ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80029ec:	2380      	movs	r3, #128	; 0x80
 80029ee:	055b      	lsls	r3, r3, #21
 80029f0:	4013      	ands	r3, r2
 80029f2:	60bb      	str	r3, [r7, #8]
 80029f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029f6:	183b      	adds	r3, r7, r0
 80029f8:	2201      	movs	r2, #1
 80029fa:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80029fc:	4bb8      	ldr	r3, [pc, #736]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	4bb7      	ldr	r3, [pc, #732]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002a02:	2180      	movs	r1, #128	; 0x80
 8002a04:	0049      	lsls	r1, r1, #1
 8002a06:	430a      	orrs	r2, r1
 8002a08:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a0a:	f7fe ff51 	bl	80018b0 <HAL_GetTick>
 8002a0e:	0003      	movs	r3, r0
 8002a10:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a12:	e00b      	b.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a14:	f7fe ff4c 	bl	80018b0 <HAL_GetTick>
 8002a18:	0002      	movs	r2, r0
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	2b02      	cmp	r3, #2
 8002a20:	d904      	bls.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002a22:	2313      	movs	r3, #19
 8002a24:	18fb      	adds	r3, r7, r3
 8002a26:	2203      	movs	r2, #3
 8002a28:	701a      	strb	r2, [r3, #0]
        break;
 8002a2a:	e005      	b.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a2c:	4bac      	ldr	r3, [pc, #688]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	2380      	movs	r3, #128	; 0x80
 8002a32:	005b      	lsls	r3, r3, #1
 8002a34:	4013      	ands	r3, r2
 8002a36:	d0ed      	beq.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002a38:	2313      	movs	r3, #19
 8002a3a:	18fb      	adds	r3, r7, r3
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d154      	bne.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002a42:	4ba6      	ldr	r3, [pc, #664]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a44:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002a46:	23c0      	movs	r3, #192	; 0xc0
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d019      	beq.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a58:	697a      	ldr	r2, [r7, #20]
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d014      	beq.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002a5e:	4b9f      	ldr	r3, [pc, #636]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a62:	4aa0      	ldr	r2, [pc, #640]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002a64:	4013      	ands	r3, r2
 8002a66:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002a68:	4b9c      	ldr	r3, [pc, #624]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a6a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002a6c:	4b9b      	ldr	r3, [pc, #620]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a6e:	2180      	movs	r1, #128	; 0x80
 8002a70:	0249      	lsls	r1, r1, #9
 8002a72:	430a      	orrs	r2, r1
 8002a74:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002a76:	4b99      	ldr	r3, [pc, #612]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a78:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002a7a:	4b98      	ldr	r3, [pc, #608]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a7c:	499a      	ldr	r1, [pc, #616]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8002a7e:	400a      	ands	r2, r1
 8002a80:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002a82:	4b96      	ldr	r3, [pc, #600]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a84:	697a      	ldr	r2, [r7, #20]
 8002a86:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	d016      	beq.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a90:	f7fe ff0e 	bl	80018b0 <HAL_GetTick>
 8002a94:	0003      	movs	r3, r0
 8002a96:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a98:	e00c      	b.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a9a:	f7fe ff09 	bl	80018b0 <HAL_GetTick>
 8002a9e:	0002      	movs	r2, r0
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	1ad3      	subs	r3, r2, r3
 8002aa4:	4a91      	ldr	r2, [pc, #580]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d904      	bls.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002aaa:	2313      	movs	r3, #19
 8002aac:	18fb      	adds	r3, r7, r3
 8002aae:	2203      	movs	r2, #3
 8002ab0:	701a      	strb	r2, [r3, #0]
            break;
 8002ab2:	e004      	b.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ab4:	4b89      	ldr	r3, [pc, #548]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ab6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ab8:	2202      	movs	r2, #2
 8002aba:	4013      	ands	r3, r2
 8002abc:	d0ed      	beq.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002abe:	2313      	movs	r3, #19
 8002ac0:	18fb      	adds	r3, r7, r3
 8002ac2:	781b      	ldrb	r3, [r3, #0]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d10a      	bne.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ac8:	4b84      	ldr	r3, [pc, #528]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002aca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002acc:	4a85      	ldr	r2, [pc, #532]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002ace:	4013      	ands	r3, r2
 8002ad0:	0019      	movs	r1, r3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ad6:	4b81      	ldr	r3, [pc, #516]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ad8:	430a      	orrs	r2, r1
 8002ada:	65da      	str	r2, [r3, #92]	; 0x5c
 8002adc:	e00c      	b.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002ade:	2312      	movs	r3, #18
 8002ae0:	18fb      	adds	r3, r7, r3
 8002ae2:	2213      	movs	r2, #19
 8002ae4:	18ba      	adds	r2, r7, r2
 8002ae6:	7812      	ldrb	r2, [r2, #0]
 8002ae8:	701a      	strb	r2, [r3, #0]
 8002aea:	e005      	b.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002aec:	2312      	movs	r3, #18
 8002aee:	18fb      	adds	r3, r7, r3
 8002af0:	2213      	movs	r2, #19
 8002af2:	18ba      	adds	r2, r7, r2
 8002af4:	7812      	ldrb	r2, [r2, #0]
 8002af6:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002af8:	2311      	movs	r3, #17
 8002afa:	18fb      	adds	r3, r7, r3
 8002afc:	781b      	ldrb	r3, [r3, #0]
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d105      	bne.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b02:	4b76      	ldr	r3, [pc, #472]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b04:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b06:	4b75      	ldr	r3, [pc, #468]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b08:	4979      	ldr	r1, [pc, #484]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8002b0a:	400a      	ands	r2, r1
 8002b0c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	2201      	movs	r2, #1
 8002b14:	4013      	ands	r3, r2
 8002b16:	d009      	beq.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b18:	4b70      	ldr	r3, [pc, #448]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b1c:	2203      	movs	r2, #3
 8002b1e:	4393      	bics	r3, r2
 8002b20:	0019      	movs	r1, r3
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	685a      	ldr	r2, [r3, #4]
 8002b26:	4b6d      	ldr	r3, [pc, #436]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b28:	430a      	orrs	r2, r1
 8002b2a:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2202      	movs	r2, #2
 8002b32:	4013      	ands	r3, r2
 8002b34:	d009      	beq.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b36:	4b69      	ldr	r3, [pc, #420]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b3a:	220c      	movs	r2, #12
 8002b3c:	4393      	bics	r3, r2
 8002b3e:	0019      	movs	r1, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	689a      	ldr	r2, [r3, #8]
 8002b44:	4b65      	ldr	r3, [pc, #404]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b46:	430a      	orrs	r2, r1
 8002b48:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	2210      	movs	r2, #16
 8002b50:	4013      	ands	r3, r2
 8002b52:	d009      	beq.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002b54:	4b61      	ldr	r3, [pc, #388]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b58:	4a66      	ldr	r2, [pc, #408]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	0019      	movs	r1, r3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	68da      	ldr	r2, [r3, #12]
 8002b62:	4b5e      	ldr	r3, [pc, #376]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b64:	430a      	orrs	r2, r1
 8002b66:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	2380      	movs	r3, #128	; 0x80
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	4013      	ands	r3, r2
 8002b72:	d009      	beq.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b74:	4b59      	ldr	r3, [pc, #356]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b78:	4a5f      	ldr	r2, [pc, #380]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	0019      	movs	r1, r3
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	699a      	ldr	r2, [r3, #24]
 8002b82:	4b56      	ldr	r3, [pc, #344]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b84:	430a      	orrs	r2, r1
 8002b86:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	2380      	movs	r3, #128	; 0x80
 8002b8e:	00db      	lsls	r3, r3, #3
 8002b90:	4013      	ands	r3, r2
 8002b92:	d009      	beq.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002b94:	4b51      	ldr	r3, [pc, #324]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b98:	4a58      	ldr	r2, [pc, #352]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	0019      	movs	r1, r3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	69da      	ldr	r2, [r3, #28]
 8002ba2:	4b4e      	ldr	r3, [pc, #312]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ba4:	430a      	orrs	r2, r1
 8002ba6:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	2220      	movs	r2, #32
 8002bae:	4013      	ands	r3, r2
 8002bb0:	d009      	beq.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002bb2:	4b4a      	ldr	r3, [pc, #296]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002bb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bb6:	4a52      	ldr	r2, [pc, #328]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8002bb8:	4013      	ands	r3, r2
 8002bba:	0019      	movs	r1, r3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	691a      	ldr	r2, [r3, #16]
 8002bc0:	4b46      	ldr	r3, [pc, #280]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002bc2:	430a      	orrs	r2, r1
 8002bc4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	2380      	movs	r3, #128	; 0x80
 8002bcc:	01db      	lsls	r3, r3, #7
 8002bce:	4013      	ands	r3, r2
 8002bd0:	d015      	beq.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002bd2:	4b42      	ldr	r3, [pc, #264]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002bd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	0899      	lsrs	r1, r3, #2
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6a1a      	ldr	r2, [r3, #32]
 8002bde:	4b3f      	ldr	r3, [pc, #252]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002be0:	430a      	orrs	r2, r1
 8002be2:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6a1a      	ldr	r2, [r3, #32]
 8002be8:	2380      	movs	r3, #128	; 0x80
 8002bea:	05db      	lsls	r3, r3, #23
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d106      	bne.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002bf0:	4b3a      	ldr	r3, [pc, #232]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002bf2:	68da      	ldr	r2, [r3, #12]
 8002bf4:	4b39      	ldr	r3, [pc, #228]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002bf6:	2180      	movs	r1, #128	; 0x80
 8002bf8:	0249      	lsls	r1, r1, #9
 8002bfa:	430a      	orrs	r2, r1
 8002bfc:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	2380      	movs	r3, #128	; 0x80
 8002c04:	031b      	lsls	r3, r3, #12
 8002c06:	4013      	ands	r3, r2
 8002c08:	d009      	beq.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002c0a:	4b34      	ldr	r3, [pc, #208]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c0e:	2240      	movs	r2, #64	; 0x40
 8002c10:	4393      	bics	r3, r2
 8002c12:	0019      	movs	r1, r3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c18:	4b30      	ldr	r3, [pc, #192]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c1a:	430a      	orrs	r2, r1
 8002c1c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	2380      	movs	r3, #128	; 0x80
 8002c24:	039b      	lsls	r3, r3, #14
 8002c26:	4013      	ands	r3, r2
 8002c28:	d016      	beq.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002c2a:	4b2c      	ldr	r3, [pc, #176]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c2e:	4a35      	ldr	r2, [pc, #212]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002c30:	4013      	ands	r3, r2
 8002c32:	0019      	movs	r1, r3
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c38:	4b28      	ldr	r3, [pc, #160]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c3a:	430a      	orrs	r2, r1
 8002c3c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c42:	2380      	movs	r3, #128	; 0x80
 8002c44:	03db      	lsls	r3, r3, #15
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d106      	bne.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002c4a:	4b24      	ldr	r3, [pc, #144]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c4c:	68da      	ldr	r2, [r3, #12]
 8002c4e:	4b23      	ldr	r3, [pc, #140]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c50:	2180      	movs	r1, #128	; 0x80
 8002c52:	0449      	lsls	r1, r1, #17
 8002c54:	430a      	orrs	r2, r1
 8002c56:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	2380      	movs	r3, #128	; 0x80
 8002c5e:	03db      	lsls	r3, r3, #15
 8002c60:	4013      	ands	r3, r2
 8002c62:	d016      	beq.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002c64:	4b1d      	ldr	r3, [pc, #116]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c68:	4a27      	ldr	r2, [pc, #156]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	0019      	movs	r1, r3
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c72:	4b1a      	ldr	r3, [pc, #104]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c74:	430a      	orrs	r2, r1
 8002c76:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c7c:	2380      	movs	r3, #128	; 0x80
 8002c7e:	045b      	lsls	r3, r3, #17
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d106      	bne.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002c84:	4b15      	ldr	r3, [pc, #84]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c86:	68da      	ldr	r2, [r3, #12]
 8002c88:	4b14      	ldr	r3, [pc, #80]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c8a:	2180      	movs	r1, #128	; 0x80
 8002c8c:	0449      	lsls	r1, r1, #17
 8002c8e:	430a      	orrs	r2, r1
 8002c90:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	2380      	movs	r3, #128	; 0x80
 8002c98:	011b      	lsls	r3, r3, #4
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	d016      	beq.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002c9e:	4b0f      	ldr	r3, [pc, #60]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ca0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ca2:	4a1a      	ldr	r2, [pc, #104]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	0019      	movs	r1, r3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	695a      	ldr	r2, [r3, #20]
 8002cac:	4b0b      	ldr	r3, [pc, #44]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002cae:	430a      	orrs	r2, r1
 8002cb0:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	695a      	ldr	r2, [r3, #20]
 8002cb6:	2380      	movs	r3, #128	; 0x80
 8002cb8:	01db      	lsls	r3, r3, #7
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d106      	bne.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002cbe:	4b07      	ldr	r3, [pc, #28]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002cc0:	68da      	ldr	r2, [r3, #12]
 8002cc2:	4b06      	ldr	r3, [pc, #24]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002cc4:	2180      	movs	r1, #128	; 0x80
 8002cc6:	0249      	lsls	r1, r1, #9
 8002cc8:	430a      	orrs	r2, r1
 8002cca:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002ccc:	2312      	movs	r3, #18
 8002cce:	18fb      	adds	r3, r7, r3
 8002cd0:	781b      	ldrb	r3, [r3, #0]
}
 8002cd2:	0018      	movs	r0, r3
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	b006      	add	sp, #24
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	46c0      	nop			; (mov r8, r8)
 8002cdc:	40021000 	.word	0x40021000
 8002ce0:	40007000 	.word	0x40007000
 8002ce4:	fffffcff 	.word	0xfffffcff
 8002ce8:	fffeffff 	.word	0xfffeffff
 8002cec:	00001388 	.word	0x00001388
 8002cf0:	efffffff 	.word	0xefffffff
 8002cf4:	fffff3ff 	.word	0xfffff3ff
 8002cf8:	fff3ffff 	.word	0xfff3ffff
 8002cfc:	ffcfffff 	.word	0xffcfffff
 8002d00:	ffffcfff 	.word	0xffffcfff
 8002d04:	ffbfffff 	.word	0xffbfffff
 8002d08:	feffffff 	.word	0xfeffffff
 8002d0c:	ffff3fff 	.word	0xffff3fff

08002d10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d101      	bne.n	8002d22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e04a      	b.n	8002db8 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	223d      	movs	r2, #61	; 0x3d
 8002d26:	5c9b      	ldrb	r3, [r3, r2]
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d107      	bne.n	8002d3e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	223c      	movs	r2, #60	; 0x3c
 8002d32:	2100      	movs	r1, #0
 8002d34:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	0018      	movs	r0, r3
 8002d3a:	f7fe fbf5 	bl	8001528 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	223d      	movs	r2, #61	; 0x3d
 8002d42:	2102      	movs	r1, #2
 8002d44:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	3304      	adds	r3, #4
 8002d4e:	0019      	movs	r1, r3
 8002d50:	0010      	movs	r0, r2
 8002d52:	f000 f889 	bl	8002e68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2248      	movs	r2, #72	; 0x48
 8002d5a:	2101      	movs	r1, #1
 8002d5c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	223e      	movs	r2, #62	; 0x3e
 8002d62:	2101      	movs	r1, #1
 8002d64:	5499      	strb	r1, [r3, r2]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	223f      	movs	r2, #63	; 0x3f
 8002d6a:	2101      	movs	r1, #1
 8002d6c:	5499      	strb	r1, [r3, r2]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2240      	movs	r2, #64	; 0x40
 8002d72:	2101      	movs	r1, #1
 8002d74:	5499      	strb	r1, [r3, r2]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2241      	movs	r2, #65	; 0x41
 8002d7a:	2101      	movs	r1, #1
 8002d7c:	5499      	strb	r1, [r3, r2]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2242      	movs	r2, #66	; 0x42
 8002d82:	2101      	movs	r1, #1
 8002d84:	5499      	strb	r1, [r3, r2]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2243      	movs	r2, #67	; 0x43
 8002d8a:	2101      	movs	r1, #1
 8002d8c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2244      	movs	r2, #68	; 0x44
 8002d92:	2101      	movs	r1, #1
 8002d94:	5499      	strb	r1, [r3, r2]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2245      	movs	r2, #69	; 0x45
 8002d9a:	2101      	movs	r1, #1
 8002d9c:	5499      	strb	r1, [r3, r2]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2246      	movs	r2, #70	; 0x46
 8002da2:	2101      	movs	r1, #1
 8002da4:	5499      	strb	r1, [r3, r2]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2247      	movs	r2, #71	; 0x47
 8002daa:	2101      	movs	r1, #1
 8002dac:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	223d      	movs	r2, #61	; 0x3d
 8002db2:	2101      	movs	r1, #1
 8002db4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002db6:	2300      	movs	r3, #0
}
 8002db8:	0018      	movs	r0, r3
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	b002      	add	sp, #8
 8002dbe:	bd80      	pop	{r7, pc}

08002dc0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b084      	sub	sp, #16
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	223d      	movs	r2, #61	; 0x3d
 8002dcc:	5c9b      	ldrb	r3, [r3, r2]
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d001      	beq.n	8002dd8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e03a      	b.n	8002e4e <HAL_TIM_Base_Start+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	223d      	movs	r2, #61	; 0x3d
 8002ddc:	2102      	movs	r1, #2
 8002dde:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a1c      	ldr	r2, [pc, #112]	; (8002e58 <HAL_TIM_Base_Start+0x98>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d00f      	beq.n	8002e0a <HAL_TIM_Base_Start+0x4a>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	2380      	movs	r3, #128	; 0x80
 8002df0:	05db      	lsls	r3, r3, #23
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d009      	beq.n	8002e0a <HAL_TIM_Base_Start+0x4a>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a18      	ldr	r2, [pc, #96]	; (8002e5c <HAL_TIM_Base_Start+0x9c>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d004      	beq.n	8002e0a <HAL_TIM_Base_Start+0x4a>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a16      	ldr	r2, [pc, #88]	; (8002e60 <HAL_TIM_Base_Start+0xa0>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d116      	bne.n	8002e38 <HAL_TIM_Base_Start+0x78>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	4a14      	ldr	r2, [pc, #80]	; (8002e64 <HAL_TIM_Base_Start+0xa4>)
 8002e12:	4013      	ands	r3, r2
 8002e14:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2b06      	cmp	r3, #6
 8002e1a:	d016      	beq.n	8002e4a <HAL_TIM_Base_Start+0x8a>
 8002e1c:	68fa      	ldr	r2, [r7, #12]
 8002e1e:	2380      	movs	r3, #128	; 0x80
 8002e20:	025b      	lsls	r3, r3, #9
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d011      	beq.n	8002e4a <HAL_TIM_Base_Start+0x8a>
    {
      __HAL_TIM_ENABLE(htim);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	2101      	movs	r1, #1
 8002e32:	430a      	orrs	r2, r1
 8002e34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e36:	e008      	b.n	8002e4a <HAL_TIM_Base_Start+0x8a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	2101      	movs	r1, #1
 8002e44:	430a      	orrs	r2, r1
 8002e46:	601a      	str	r2, [r3, #0]
 8002e48:	e000      	b.n	8002e4c <HAL_TIM_Base_Start+0x8c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e4a:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8002e4c:	2300      	movs	r3, #0
}
 8002e4e:	0018      	movs	r0, r3
 8002e50:	46bd      	mov	sp, r7
 8002e52:	b004      	add	sp, #16
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	46c0      	nop			; (mov r8, r8)
 8002e58:	40012c00 	.word	0x40012c00
 8002e5c:	40000400 	.word	0x40000400
 8002e60:	40014000 	.word	0x40014000
 8002e64:	00010007 	.word	0x00010007

08002e68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b084      	sub	sp, #16
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	4a34      	ldr	r2, [pc, #208]	; (8002f4c <TIM_Base_SetConfig+0xe4>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d008      	beq.n	8002e92 <TIM_Base_SetConfig+0x2a>
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	2380      	movs	r3, #128	; 0x80
 8002e84:	05db      	lsls	r3, r3, #23
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d003      	beq.n	8002e92 <TIM_Base_SetConfig+0x2a>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	4a30      	ldr	r2, [pc, #192]	; (8002f50 <TIM_Base_SetConfig+0xe8>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d108      	bne.n	8002ea4 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2270      	movs	r2, #112	; 0x70
 8002e96:	4393      	bics	r3, r2
 8002e98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	68fa      	ldr	r2, [r7, #12]
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	4a29      	ldr	r2, [pc, #164]	; (8002f4c <TIM_Base_SetConfig+0xe4>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d018      	beq.n	8002ede <TIM_Base_SetConfig+0x76>
 8002eac:	687a      	ldr	r2, [r7, #4]
 8002eae:	2380      	movs	r3, #128	; 0x80
 8002eb0:	05db      	lsls	r3, r3, #23
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d013      	beq.n	8002ede <TIM_Base_SetConfig+0x76>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	4a25      	ldr	r2, [pc, #148]	; (8002f50 <TIM_Base_SetConfig+0xe8>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d00f      	beq.n	8002ede <TIM_Base_SetConfig+0x76>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4a24      	ldr	r2, [pc, #144]	; (8002f54 <TIM_Base_SetConfig+0xec>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d00b      	beq.n	8002ede <TIM_Base_SetConfig+0x76>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4a23      	ldr	r2, [pc, #140]	; (8002f58 <TIM_Base_SetConfig+0xf0>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d007      	beq.n	8002ede <TIM_Base_SetConfig+0x76>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	4a22      	ldr	r2, [pc, #136]	; (8002f5c <TIM_Base_SetConfig+0xf4>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d003      	beq.n	8002ede <TIM_Base_SetConfig+0x76>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4a21      	ldr	r2, [pc, #132]	; (8002f60 <TIM_Base_SetConfig+0xf8>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d108      	bne.n	8002ef0 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	4a20      	ldr	r2, [pc, #128]	; (8002f64 <TIM_Base_SetConfig+0xfc>)
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	68db      	ldr	r3, [r3, #12]
 8002eea:	68fa      	ldr	r2, [r7, #12]
 8002eec:	4313      	orrs	r3, r2
 8002eee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2280      	movs	r2, #128	; 0x80
 8002ef4:	4393      	bics	r3, r2
 8002ef6:	001a      	movs	r2, r3
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	695b      	ldr	r3, [r3, #20]
 8002efc:	4313      	orrs	r3, r2
 8002efe:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	68fa      	ldr	r2, [r7, #12]
 8002f04:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	689a      	ldr	r2, [r3, #8]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	4a0c      	ldr	r2, [pc, #48]	; (8002f4c <TIM_Base_SetConfig+0xe4>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d00b      	beq.n	8002f36 <TIM_Base_SetConfig+0xce>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4a0d      	ldr	r2, [pc, #52]	; (8002f58 <TIM_Base_SetConfig+0xf0>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d007      	beq.n	8002f36 <TIM_Base_SetConfig+0xce>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4a0c      	ldr	r2, [pc, #48]	; (8002f5c <TIM_Base_SetConfig+0xf4>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d003      	beq.n	8002f36 <TIM_Base_SetConfig+0xce>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	4a0b      	ldr	r2, [pc, #44]	; (8002f60 <TIM_Base_SetConfig+0xf8>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d103      	bne.n	8002f3e <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	691a      	ldr	r2, [r3, #16]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2201      	movs	r2, #1
 8002f42:	615a      	str	r2, [r3, #20]
}
 8002f44:	46c0      	nop			; (mov r8, r8)
 8002f46:	46bd      	mov	sp, r7
 8002f48:	b004      	add	sp, #16
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	40012c00 	.word	0x40012c00
 8002f50:	40000400 	.word	0x40000400
 8002f54:	40002000 	.word	0x40002000
 8002f58:	40014000 	.word	0x40014000
 8002f5c:	40014400 	.word	0x40014400
 8002f60:	40014800 	.word	0x40014800
 8002f64:	fffffcff 	.word	0xfffffcff

08002f68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	223c      	movs	r2, #60	; 0x3c
 8002f76:	5c9b      	ldrb	r3, [r3, r2]
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d101      	bne.n	8002f80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f7c:	2302      	movs	r3, #2
 8002f7e:	e055      	b.n	800302c <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	223c      	movs	r2, #60	; 0x3c
 8002f84:	2101      	movs	r1, #1
 8002f86:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	223d      	movs	r2, #61	; 0x3d
 8002f8c:	2102      	movs	r1, #2
 8002f8e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a23      	ldr	r2, [pc, #140]	; (8003034 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d108      	bne.n	8002fbc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	4a22      	ldr	r2, [pc, #136]	; (8003038 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002fae:	4013      	ands	r3, r2
 8002fb0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	68fa      	ldr	r2, [r7, #12]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2270      	movs	r2, #112	; 0x70
 8002fc0:	4393      	bics	r3, r2
 8002fc2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	68fa      	ldr	r2, [r7, #12]
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	68fa      	ldr	r2, [r7, #12]
 8002fd4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a16      	ldr	r2, [pc, #88]	; (8003034 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d00f      	beq.n	8003000 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	2380      	movs	r3, #128	; 0x80
 8002fe6:	05db      	lsls	r3, r3, #23
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d009      	beq.n	8003000 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a12      	ldr	r2, [pc, #72]	; (800303c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d004      	beq.n	8003000 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a11      	ldr	r2, [pc, #68]	; (8003040 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d10c      	bne.n	800301a <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	2280      	movs	r2, #128	; 0x80
 8003004:	4393      	bics	r3, r2
 8003006:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	68ba      	ldr	r2, [r7, #8]
 800300e:	4313      	orrs	r3, r2
 8003010:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	68ba      	ldr	r2, [r7, #8]
 8003018:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	223d      	movs	r2, #61	; 0x3d
 800301e:	2101      	movs	r1, #1
 8003020:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	223c      	movs	r2, #60	; 0x3c
 8003026:	2100      	movs	r1, #0
 8003028:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800302a:	2300      	movs	r3, #0
}
 800302c:	0018      	movs	r0, r3
 800302e:	46bd      	mov	sp, r7
 8003030:	b004      	add	sp, #16
 8003032:	bd80      	pop	{r7, pc}
 8003034:	40012c00 	.word	0x40012c00
 8003038:	ff0fffff 	.word	0xff0fffff
 800303c:	40000400 	.word	0x40000400
 8003040:	40014000 	.word	0x40014000

08003044 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b082      	sub	sp, #8
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d101      	bne.n	8003056 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e046      	b.n	80030e4 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2284      	movs	r2, #132	; 0x84
 800305a:	589b      	ldr	r3, [r3, r2]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d107      	bne.n	8003070 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2280      	movs	r2, #128	; 0x80
 8003064:	2100      	movs	r1, #0
 8003066:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	0018      	movs	r0, r3
 800306c:	f7fe fa7a 	bl	8001564 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2284      	movs	r2, #132	; 0x84
 8003074:	2124      	movs	r1, #36	; 0x24
 8003076:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	2101      	movs	r1, #1
 8003084:	438a      	bics	r2, r1
 8003086:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	0018      	movs	r0, r3
 800308c:	f000 fc7c 	bl	8003988 <UART_SetConfig>
 8003090:	0003      	movs	r3, r0
 8003092:	2b01      	cmp	r3, #1
 8003094:	d101      	bne.n	800309a <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e024      	b.n	80030e4 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d003      	beq.n	80030aa <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	0018      	movs	r0, r3
 80030a6:	f000 ff4b 	bl	8003f40 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	685a      	ldr	r2, [r3, #4]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	490d      	ldr	r1, [pc, #52]	; (80030ec <HAL_UART_Init+0xa8>)
 80030b6:	400a      	ands	r2, r1
 80030b8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	689a      	ldr	r2, [r3, #8]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	212a      	movs	r1, #42	; 0x2a
 80030c6:	438a      	bics	r2, r1
 80030c8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	2101      	movs	r1, #1
 80030d6:	430a      	orrs	r2, r1
 80030d8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	0018      	movs	r0, r3
 80030de:	f000 ffe3 	bl	80040a8 <UART_CheckIdleState>
 80030e2:	0003      	movs	r3, r0
}
 80030e4:	0018      	movs	r0, r3
 80030e6:	46bd      	mov	sp, r7
 80030e8:	b002      	add	sp, #8
 80030ea:	bd80      	pop	{r7, pc}
 80030ec:	ffffb7ff 	.word	0xffffb7ff

080030f0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b08a      	sub	sp, #40	; 0x28
 80030f4:	af02      	add	r7, sp, #8
 80030f6:	60f8      	str	r0, [r7, #12]
 80030f8:	60b9      	str	r1, [r7, #8]
 80030fa:	603b      	str	r3, [r7, #0]
 80030fc:	1dbb      	adds	r3, r7, #6
 80030fe:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2284      	movs	r2, #132	; 0x84
 8003104:	589b      	ldr	r3, [r3, r2]
 8003106:	2b20      	cmp	r3, #32
 8003108:	d000      	beq.n	800310c <HAL_UART_Transmit+0x1c>
 800310a:	e097      	b.n	800323c <HAL_UART_Transmit+0x14c>
  {
    if ((pData == NULL) || (Size == 0U))
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d003      	beq.n	800311a <HAL_UART_Transmit+0x2a>
 8003112:	1dbb      	adds	r3, r7, #6
 8003114:	881b      	ldrh	r3, [r3, #0]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d101      	bne.n	800311e <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e08f      	b.n	800323e <HAL_UART_Transmit+0x14e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	689a      	ldr	r2, [r3, #8]
 8003122:	2380      	movs	r3, #128	; 0x80
 8003124:	015b      	lsls	r3, r3, #5
 8003126:	429a      	cmp	r2, r3
 8003128:	d109      	bne.n	800313e <HAL_UART_Transmit+0x4e>
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	691b      	ldr	r3, [r3, #16]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d105      	bne.n	800313e <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	2201      	movs	r2, #1
 8003136:	4013      	ands	r3, r2
 8003138:	d001      	beq.n	800313e <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e07f      	b.n	800323e <HAL_UART_Transmit+0x14e>
      }
    }

    __HAL_LOCK(huart);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2280      	movs	r2, #128	; 0x80
 8003142:	5c9b      	ldrb	r3, [r3, r2]
 8003144:	2b01      	cmp	r3, #1
 8003146:	d101      	bne.n	800314c <HAL_UART_Transmit+0x5c>
 8003148:	2302      	movs	r3, #2
 800314a:	e078      	b.n	800323e <HAL_UART_Transmit+0x14e>
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2280      	movs	r2, #128	; 0x80
 8003150:	2101      	movs	r1, #1
 8003152:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	228c      	movs	r2, #140	; 0x8c
 8003158:	2100      	movs	r1, #0
 800315a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2284      	movs	r2, #132	; 0x84
 8003160:	2121      	movs	r1, #33	; 0x21
 8003162:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003164:	f7fe fba4 	bl	80018b0 <HAL_GetTick>
 8003168:	0003      	movs	r3, r0
 800316a:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	1dba      	adds	r2, r7, #6
 8003170:	2154      	movs	r1, #84	; 0x54
 8003172:	8812      	ldrh	r2, [r2, #0]
 8003174:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	1dba      	adds	r2, r7, #6
 800317a:	2156      	movs	r1, #86	; 0x56
 800317c:	8812      	ldrh	r2, [r2, #0]
 800317e:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	689a      	ldr	r2, [r3, #8]
 8003184:	2380      	movs	r3, #128	; 0x80
 8003186:	015b      	lsls	r3, r3, #5
 8003188:	429a      	cmp	r2, r3
 800318a:	d108      	bne.n	800319e <HAL_UART_Transmit+0xae>
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	691b      	ldr	r3, [r3, #16]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d104      	bne.n	800319e <HAL_UART_Transmit+0xae>
    {
      pdata8bits  = NULL;
 8003194:	2300      	movs	r3, #0
 8003196:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	61bb      	str	r3, [r7, #24]
 800319c:	e003      	b.n	80031a6 <HAL_UART_Transmit+0xb6>
    }
    else
    {
      pdata8bits  = pData;
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80031a2:	2300      	movs	r3, #0
 80031a4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2280      	movs	r2, #128	; 0x80
 80031aa:	2100      	movs	r1, #0
 80031ac:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 80031ae:	e02c      	b.n	800320a <HAL_UART_Transmit+0x11a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80031b0:	697a      	ldr	r2, [r7, #20]
 80031b2:	68f8      	ldr	r0, [r7, #12]
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	9300      	str	r3, [sp, #0]
 80031b8:	0013      	movs	r3, r2
 80031ba:	2200      	movs	r2, #0
 80031bc:	2180      	movs	r1, #128	; 0x80
 80031be:	f000 ffbd 	bl	800413c <UART_WaitOnFlagUntilTimeout>
 80031c2:	1e03      	subs	r3, r0, #0
 80031c4:	d001      	beq.n	80031ca <HAL_UART_Transmit+0xda>
      {
        return HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	e039      	b.n	800323e <HAL_UART_Transmit+0x14e>
      }
      if (pdata8bits == NULL)
 80031ca:	69fb      	ldr	r3, [r7, #28]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d10b      	bne.n	80031e8 <HAL_UART_Transmit+0xf8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80031d0:	69bb      	ldr	r3, [r7, #24]
 80031d2:	881b      	ldrh	r3, [r3, #0]
 80031d4:	001a      	movs	r2, r3
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	05d2      	lsls	r2, r2, #23
 80031dc:	0dd2      	lsrs	r2, r2, #23
 80031de:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80031e0:	69bb      	ldr	r3, [r7, #24]
 80031e2:	3302      	adds	r3, #2
 80031e4:	61bb      	str	r3, [r7, #24]
 80031e6:	e007      	b.n	80031f8 <HAL_UART_Transmit+0x108>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	781a      	ldrb	r2, [r3, #0]
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	3301      	adds	r3, #1
 80031f6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2256      	movs	r2, #86	; 0x56
 80031fc:	5a9b      	ldrh	r3, [r3, r2]
 80031fe:	b29b      	uxth	r3, r3
 8003200:	3b01      	subs	r3, #1
 8003202:	b299      	uxth	r1, r3
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2256      	movs	r2, #86	; 0x56
 8003208:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2256      	movs	r2, #86	; 0x56
 800320e:	5a9b      	ldrh	r3, [r3, r2]
 8003210:	b29b      	uxth	r3, r3
 8003212:	2b00      	cmp	r3, #0
 8003214:	d1cc      	bne.n	80031b0 <HAL_UART_Transmit+0xc0>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003216:	697a      	ldr	r2, [r7, #20]
 8003218:	68f8      	ldr	r0, [r7, #12]
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	9300      	str	r3, [sp, #0]
 800321e:	0013      	movs	r3, r2
 8003220:	2200      	movs	r2, #0
 8003222:	2140      	movs	r1, #64	; 0x40
 8003224:	f000 ff8a 	bl	800413c <UART_WaitOnFlagUntilTimeout>
 8003228:	1e03      	subs	r3, r0, #0
 800322a:	d001      	beq.n	8003230 <HAL_UART_Transmit+0x140>
    {
      return HAL_TIMEOUT;
 800322c:	2303      	movs	r3, #3
 800322e:	e006      	b.n	800323e <HAL_UART_Transmit+0x14e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2284      	movs	r2, #132	; 0x84
 8003234:	2120      	movs	r1, #32
 8003236:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8003238:	2300      	movs	r3, #0
 800323a:	e000      	b.n	800323e <HAL_UART_Transmit+0x14e>
  }
  else
  {
    return HAL_BUSY;
 800323c:	2302      	movs	r3, #2
  }
}
 800323e:	0018      	movs	r0, r3
 8003240:	46bd      	mov	sp, r7
 8003242:	b008      	add	sp, #32
 8003244:	bd80      	pop	{r7, pc}
	...

08003248 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b088      	sub	sp, #32
 800324c:	af00      	add	r7, sp, #0
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	60b9      	str	r1, [r7, #8]
 8003252:	1dbb      	adds	r3, r7, #6
 8003254:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2288      	movs	r2, #136	; 0x88
 800325a:	589b      	ldr	r3, [r3, r2]
 800325c:	2b20      	cmp	r3, #32
 800325e:	d155      	bne.n	800330c <HAL_UART_Receive_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d003      	beq.n	800326e <HAL_UART_Receive_IT+0x26>
 8003266:	1dbb      	adds	r3, r7, #6
 8003268:	881b      	ldrh	r3, [r3, #0]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d101      	bne.n	8003272 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e04d      	b.n	800330e <HAL_UART_Receive_IT+0xc6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	689a      	ldr	r2, [r3, #8]
 8003276:	2380      	movs	r3, #128	; 0x80
 8003278:	015b      	lsls	r3, r3, #5
 800327a:	429a      	cmp	r2, r3
 800327c:	d109      	bne.n	8003292 <HAL_UART_Receive_IT+0x4a>
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	691b      	ldr	r3, [r3, #16]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d105      	bne.n	8003292 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	2201      	movs	r2, #1
 800328a:	4013      	ands	r3, r2
 800328c:	d001      	beq.n	8003292 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e03d      	b.n	800330e <HAL_UART_Receive_IT+0xc6>
      }
    }

    __HAL_LOCK(huart);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2280      	movs	r2, #128	; 0x80
 8003296:	5c9b      	ldrb	r3, [r3, r2]
 8003298:	2b01      	cmp	r3, #1
 800329a:	d101      	bne.n	80032a0 <HAL_UART_Receive_IT+0x58>
 800329c:	2302      	movs	r3, #2
 800329e:	e036      	b.n	800330e <HAL_UART_Receive_IT+0xc6>
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2280      	movs	r2, #128	; 0x80
 80032a4:	2101      	movs	r1, #1
 80032a6:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2200      	movs	r2, #0
 80032ac:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a19      	ldr	r2, [pc, #100]	; (8003318 <HAL_UART_Receive_IT+0xd0>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d020      	beq.n	80032fa <HAL_UART_Receive_IT+0xb2>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	685a      	ldr	r2, [r3, #4]
 80032be:	2380      	movs	r3, #128	; 0x80
 80032c0:	041b      	lsls	r3, r3, #16
 80032c2:	4013      	ands	r3, r2
 80032c4:	d019      	beq.n	80032fa <HAL_UART_Receive_IT+0xb2>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032c6:	f3ef 8310 	mrs	r3, PRIMASK
 80032ca:	613b      	str	r3, [r7, #16]
  return(result);
 80032cc:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80032ce:	61fb      	str	r3, [r7, #28]
 80032d0:	2301      	movs	r3, #1
 80032d2:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	f383 8810 	msr	PRIMASK, r3
}
 80032da:	46c0      	nop			; (mov r8, r8)
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	2180      	movs	r1, #128	; 0x80
 80032e8:	04c9      	lsls	r1, r1, #19
 80032ea:	430a      	orrs	r2, r1
 80032ec:	601a      	str	r2, [r3, #0]
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032f2:	69bb      	ldr	r3, [r7, #24]
 80032f4:	f383 8810 	msr	PRIMASK, r3
}
 80032f8:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80032fa:	1dbb      	adds	r3, r7, #6
 80032fc:	881a      	ldrh	r2, [r3, #0]
 80032fe:	68b9      	ldr	r1, [r7, #8]
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	0018      	movs	r0, r3
 8003304:	f000 ffe2 	bl	80042cc <UART_Start_Receive_IT>
 8003308:	0003      	movs	r3, r0
 800330a:	e000      	b.n	800330e <HAL_UART_Receive_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 800330c:	2302      	movs	r3, #2
  }
}
 800330e:	0018      	movs	r0, r3
 8003310:	46bd      	mov	sp, r7
 8003312:	b008      	add	sp, #32
 8003314:	bd80      	pop	{r7, pc}
 8003316:	46c0      	nop			; (mov r8, r8)
 8003318:	40008000 	.word	0x40008000

0800331c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800331c:	b5b0      	push	{r4, r5, r7, lr}
 800331e:	b0aa      	sub	sp, #168	; 0xa8
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	69db      	ldr	r3, [r3, #28]
 800332a:	22a4      	movs	r2, #164	; 0xa4
 800332c:	18b9      	adds	r1, r7, r2
 800332e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	20a0      	movs	r0, #160	; 0xa0
 8003338:	1839      	adds	r1, r7, r0
 800333a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	249c      	movs	r4, #156	; 0x9c
 8003344:	1939      	adds	r1, r7, r4
 8003346:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003348:	0011      	movs	r1, r2
 800334a:	18bb      	adds	r3, r7, r2
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4aa0      	ldr	r2, [pc, #640]	; (80035d0 <HAL_UART_IRQHandler+0x2b4>)
 8003350:	4013      	ands	r3, r2
 8003352:	2298      	movs	r2, #152	; 0x98
 8003354:	18bd      	adds	r5, r7, r2
 8003356:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8003358:	18bb      	adds	r3, r7, r2
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d11a      	bne.n	8003396 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003360:	187b      	adds	r3, r7, r1
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	2220      	movs	r2, #32
 8003366:	4013      	ands	r3, r2
 8003368:	d015      	beq.n	8003396 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800336a:	183b      	adds	r3, r7, r0
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	2220      	movs	r2, #32
 8003370:	4013      	ands	r3, r2
 8003372:	d105      	bne.n	8003380 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003374:	193b      	adds	r3, r7, r4
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	2380      	movs	r3, #128	; 0x80
 800337a:	055b      	lsls	r3, r3, #21
 800337c:	4013      	ands	r3, r2
 800337e:	d00a      	beq.n	8003396 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003384:	2b00      	cmp	r3, #0
 8003386:	d100      	bne.n	800338a <HAL_UART_IRQHandler+0x6e>
 8003388:	e2cf      	b.n	800392a <HAL_UART_IRQHandler+0x60e>
      {
        huart->RxISR(huart);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	0010      	movs	r0, r2
 8003392:	4798      	blx	r3
      }
      return;
 8003394:	e2c9      	b.n	800392a <HAL_UART_IRQHandler+0x60e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003396:	2398      	movs	r3, #152	; 0x98
 8003398:	18fb      	adds	r3, r7, r3
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d100      	bne.n	80033a2 <HAL_UART_IRQHandler+0x86>
 80033a0:	e11e      	b.n	80035e0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80033a2:	239c      	movs	r3, #156	; 0x9c
 80033a4:	18fb      	adds	r3, r7, r3
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a8a      	ldr	r2, [pc, #552]	; (80035d4 <HAL_UART_IRQHandler+0x2b8>)
 80033aa:	4013      	ands	r3, r2
 80033ac:	d106      	bne.n	80033bc <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80033ae:	23a0      	movs	r3, #160	; 0xa0
 80033b0:	18fb      	adds	r3, r7, r3
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a88      	ldr	r2, [pc, #544]	; (80035d8 <HAL_UART_IRQHandler+0x2bc>)
 80033b6:	4013      	ands	r3, r2
 80033b8:	d100      	bne.n	80033bc <HAL_UART_IRQHandler+0xa0>
 80033ba:	e111      	b.n	80035e0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80033bc:	23a4      	movs	r3, #164	; 0xa4
 80033be:	18fb      	adds	r3, r7, r3
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	2201      	movs	r2, #1
 80033c4:	4013      	ands	r3, r2
 80033c6:	d012      	beq.n	80033ee <HAL_UART_IRQHandler+0xd2>
 80033c8:	23a0      	movs	r3, #160	; 0xa0
 80033ca:	18fb      	adds	r3, r7, r3
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	2380      	movs	r3, #128	; 0x80
 80033d0:	005b      	lsls	r3, r3, #1
 80033d2:	4013      	ands	r3, r2
 80033d4:	d00b      	beq.n	80033ee <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	2201      	movs	r2, #1
 80033dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	228c      	movs	r2, #140	; 0x8c
 80033e2:	589b      	ldr	r3, [r3, r2]
 80033e4:	2201      	movs	r2, #1
 80033e6:	431a      	orrs	r2, r3
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	218c      	movs	r1, #140	; 0x8c
 80033ec:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80033ee:	23a4      	movs	r3, #164	; 0xa4
 80033f0:	18fb      	adds	r3, r7, r3
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	2202      	movs	r2, #2
 80033f6:	4013      	ands	r3, r2
 80033f8:	d011      	beq.n	800341e <HAL_UART_IRQHandler+0x102>
 80033fa:	239c      	movs	r3, #156	; 0x9c
 80033fc:	18fb      	adds	r3, r7, r3
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	2201      	movs	r2, #1
 8003402:	4013      	ands	r3, r2
 8003404:	d00b      	beq.n	800341e <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	2202      	movs	r2, #2
 800340c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	228c      	movs	r2, #140	; 0x8c
 8003412:	589b      	ldr	r3, [r3, r2]
 8003414:	2204      	movs	r2, #4
 8003416:	431a      	orrs	r2, r3
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	218c      	movs	r1, #140	; 0x8c
 800341c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800341e:	23a4      	movs	r3, #164	; 0xa4
 8003420:	18fb      	adds	r3, r7, r3
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	2204      	movs	r2, #4
 8003426:	4013      	ands	r3, r2
 8003428:	d011      	beq.n	800344e <HAL_UART_IRQHandler+0x132>
 800342a:	239c      	movs	r3, #156	; 0x9c
 800342c:	18fb      	adds	r3, r7, r3
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	2201      	movs	r2, #1
 8003432:	4013      	ands	r3, r2
 8003434:	d00b      	beq.n	800344e <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	2204      	movs	r2, #4
 800343c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	228c      	movs	r2, #140	; 0x8c
 8003442:	589b      	ldr	r3, [r3, r2]
 8003444:	2202      	movs	r2, #2
 8003446:	431a      	orrs	r2, r3
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	218c      	movs	r1, #140	; 0x8c
 800344c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800344e:	23a4      	movs	r3, #164	; 0xa4
 8003450:	18fb      	adds	r3, r7, r3
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	2208      	movs	r2, #8
 8003456:	4013      	ands	r3, r2
 8003458:	d017      	beq.n	800348a <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800345a:	23a0      	movs	r3, #160	; 0xa0
 800345c:	18fb      	adds	r3, r7, r3
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	2220      	movs	r2, #32
 8003462:	4013      	ands	r3, r2
 8003464:	d105      	bne.n	8003472 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003466:	239c      	movs	r3, #156	; 0x9c
 8003468:	18fb      	adds	r3, r7, r3
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a59      	ldr	r2, [pc, #356]	; (80035d4 <HAL_UART_IRQHandler+0x2b8>)
 800346e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003470:	d00b      	beq.n	800348a <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	2208      	movs	r2, #8
 8003478:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	228c      	movs	r2, #140	; 0x8c
 800347e:	589b      	ldr	r3, [r3, r2]
 8003480:	2208      	movs	r2, #8
 8003482:	431a      	orrs	r2, r3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	218c      	movs	r1, #140	; 0x8c
 8003488:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800348a:	23a4      	movs	r3, #164	; 0xa4
 800348c:	18fb      	adds	r3, r7, r3
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	2380      	movs	r3, #128	; 0x80
 8003492:	011b      	lsls	r3, r3, #4
 8003494:	4013      	ands	r3, r2
 8003496:	d013      	beq.n	80034c0 <HAL_UART_IRQHandler+0x1a4>
 8003498:	23a0      	movs	r3, #160	; 0xa0
 800349a:	18fb      	adds	r3, r7, r3
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	2380      	movs	r3, #128	; 0x80
 80034a0:	04db      	lsls	r3, r3, #19
 80034a2:	4013      	ands	r3, r2
 80034a4:	d00c      	beq.n	80034c0 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	2280      	movs	r2, #128	; 0x80
 80034ac:	0112      	lsls	r2, r2, #4
 80034ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	228c      	movs	r2, #140	; 0x8c
 80034b4:	589b      	ldr	r3, [r3, r2]
 80034b6:	2220      	movs	r2, #32
 80034b8:	431a      	orrs	r2, r3
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	218c      	movs	r1, #140	; 0x8c
 80034be:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	228c      	movs	r2, #140	; 0x8c
 80034c4:	589b      	ldr	r3, [r3, r2]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d100      	bne.n	80034cc <HAL_UART_IRQHandler+0x1b0>
 80034ca:	e230      	b.n	800392e <HAL_UART_IRQHandler+0x612>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80034cc:	23a4      	movs	r3, #164	; 0xa4
 80034ce:	18fb      	adds	r3, r7, r3
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	2220      	movs	r2, #32
 80034d4:	4013      	ands	r3, r2
 80034d6:	d015      	beq.n	8003504 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80034d8:	23a0      	movs	r3, #160	; 0xa0
 80034da:	18fb      	adds	r3, r7, r3
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	2220      	movs	r2, #32
 80034e0:	4013      	ands	r3, r2
 80034e2:	d106      	bne.n	80034f2 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80034e4:	239c      	movs	r3, #156	; 0x9c
 80034e6:	18fb      	adds	r3, r7, r3
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	2380      	movs	r3, #128	; 0x80
 80034ec:	055b      	lsls	r3, r3, #21
 80034ee:	4013      	ands	r3, r2
 80034f0:	d008      	beq.n	8003504 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d004      	beq.n	8003504 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	0010      	movs	r0, r2
 8003502:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	228c      	movs	r2, #140	; 0x8c
 8003508:	589b      	ldr	r3, [r3, r2]
 800350a:	2194      	movs	r1, #148	; 0x94
 800350c:	187a      	adds	r2, r7, r1
 800350e:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	2240      	movs	r2, #64	; 0x40
 8003518:	4013      	ands	r3, r2
 800351a:	2b40      	cmp	r3, #64	; 0x40
 800351c:	d004      	beq.n	8003528 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800351e:	187b      	adds	r3, r7, r1
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	2228      	movs	r2, #40	; 0x28
 8003524:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003526:	d047      	beq.n	80035b8 <HAL_UART_IRQHandler+0x29c>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	0018      	movs	r0, r3
 800352c:	f000 fffa 	bl	8004524 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	2240      	movs	r2, #64	; 0x40
 8003538:	4013      	ands	r3, r2
 800353a:	2b40      	cmp	r3, #64	; 0x40
 800353c:	d137      	bne.n	80035ae <HAL_UART_IRQHandler+0x292>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800353e:	f3ef 8310 	mrs	r3, PRIMASK
 8003542:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8003544:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003546:	2090      	movs	r0, #144	; 0x90
 8003548:	183a      	adds	r2, r7, r0
 800354a:	6013      	str	r3, [r2, #0]
 800354c:	2301      	movs	r3, #1
 800354e:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003550:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003552:	f383 8810 	msr	PRIMASK, r3
}
 8003556:	46c0      	nop			; (mov r8, r8)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	689a      	ldr	r2, [r3, #8]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	2140      	movs	r1, #64	; 0x40
 8003564:	438a      	bics	r2, r1
 8003566:	609a      	str	r2, [r3, #8]
 8003568:	183b      	adds	r3, r7, r0
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800356e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003570:	f383 8810 	msr	PRIMASK, r3
}
 8003574:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800357a:	2b00      	cmp	r3, #0
 800357c:	d012      	beq.n	80035a4 <HAL_UART_IRQHandler+0x288>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003582:	4a16      	ldr	r2, [pc, #88]	; (80035dc <HAL_UART_IRQHandler+0x2c0>)
 8003584:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800358a:	0018      	movs	r0, r3
 800358c:	f7fe faf0 	bl	8001b70 <HAL_DMA_Abort_IT>
 8003590:	1e03      	subs	r3, r0, #0
 8003592:	d01a      	beq.n	80035ca <HAL_UART_IRQHandler+0x2ae>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003598:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800359e:	0018      	movs	r0, r3
 80035a0:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035a2:	e012      	b.n	80035ca <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	0018      	movs	r0, r3
 80035a8:	f000 f9da 	bl	8003960 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035ac:	e00d      	b.n	80035ca <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	0018      	movs	r0, r3
 80035b2:	f000 f9d5 	bl	8003960 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035b6:	e008      	b.n	80035ca <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	0018      	movs	r0, r3
 80035bc:	f000 f9d0 	bl	8003960 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	228c      	movs	r2, #140	; 0x8c
 80035c4:	2100      	movs	r1, #0
 80035c6:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80035c8:	e1b1      	b.n	800392e <HAL_UART_IRQHandler+0x612>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035ca:	46c0      	nop			; (mov r8, r8)
    return;
 80035cc:	e1af      	b.n	800392e <HAL_UART_IRQHandler+0x612>
 80035ce:	46c0      	nop			; (mov r8, r8)
 80035d0:	0000080f 	.word	0x0000080f
 80035d4:	10000001 	.word	0x10000001
 80035d8:	04000120 	.word	0x04000120
 80035dc:	080045f1 	.word	0x080045f1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d000      	beq.n	80035ea <HAL_UART_IRQHandler+0x2ce>
 80035e8:	e135      	b.n	8003856 <HAL_UART_IRQHandler+0x53a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80035ea:	23a4      	movs	r3, #164	; 0xa4
 80035ec:	18fb      	adds	r3, r7, r3
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	2210      	movs	r2, #16
 80035f2:	4013      	ands	r3, r2
 80035f4:	d100      	bne.n	80035f8 <HAL_UART_IRQHandler+0x2dc>
 80035f6:	e12e      	b.n	8003856 <HAL_UART_IRQHandler+0x53a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80035f8:	23a0      	movs	r3, #160	; 0xa0
 80035fa:	18fb      	adds	r3, r7, r3
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	2210      	movs	r2, #16
 8003600:	4013      	ands	r3, r2
 8003602:	d100      	bne.n	8003606 <HAL_UART_IRQHandler+0x2ea>
 8003604:	e127      	b.n	8003856 <HAL_UART_IRQHandler+0x53a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	2210      	movs	r2, #16
 800360c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	2240      	movs	r2, #64	; 0x40
 8003616:	4013      	ands	r3, r2
 8003618:	2b40      	cmp	r3, #64	; 0x40
 800361a:	d000      	beq.n	800361e <HAL_UART_IRQHandler+0x302>
 800361c:	e09e      	b.n	800375c <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	685a      	ldr	r2, [r3, #4]
 8003626:	217e      	movs	r1, #126	; 0x7e
 8003628:	187b      	adds	r3, r7, r1
 800362a:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800362c:	187b      	adds	r3, r7, r1
 800362e:	881b      	ldrh	r3, [r3, #0]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d100      	bne.n	8003636 <HAL_UART_IRQHandler+0x31a>
 8003634:	e17d      	b.n	8003932 <HAL_UART_IRQHandler+0x616>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	225c      	movs	r2, #92	; 0x5c
 800363a:	5a9b      	ldrh	r3, [r3, r2]
 800363c:	187a      	adds	r2, r7, r1
 800363e:	8812      	ldrh	r2, [r2, #0]
 8003640:	429a      	cmp	r2, r3
 8003642:	d300      	bcc.n	8003646 <HAL_UART_IRQHandler+0x32a>
 8003644:	e175      	b.n	8003932 <HAL_UART_IRQHandler+0x616>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	187a      	adds	r2, r7, r1
 800364a:	215e      	movs	r1, #94	; 0x5e
 800364c:	8812      	ldrh	r2, [r2, #0]
 800364e:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	2220      	movs	r2, #32
 800365a:	4013      	ands	r3, r2
 800365c:	d16f      	bne.n	800373e <HAL_UART_IRQHandler+0x422>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800365e:	f3ef 8310 	mrs	r3, PRIMASK
 8003662:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003666:	67bb      	str	r3, [r7, #120]	; 0x78
 8003668:	2301      	movs	r3, #1
 800366a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800366c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800366e:	f383 8810 	msr	PRIMASK, r3
}
 8003672:	46c0      	nop			; (mov r8, r8)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	49b1      	ldr	r1, [pc, #708]	; (8003944 <HAL_UART_IRQHandler+0x628>)
 8003680:	400a      	ands	r2, r1
 8003682:	601a      	str	r2, [r3, #0]
 8003684:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003686:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800368a:	f383 8810 	msr	PRIMASK, r3
}
 800368e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003690:	f3ef 8310 	mrs	r3, PRIMASK
 8003694:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8003696:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003698:	677b      	str	r3, [r7, #116]	; 0x74
 800369a:	2301      	movs	r3, #1
 800369c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800369e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036a0:	f383 8810 	msr	PRIMASK, r3
}
 80036a4:	46c0      	nop			; (mov r8, r8)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	689a      	ldr	r2, [r3, #8]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	2101      	movs	r1, #1
 80036b2:	438a      	bics	r2, r1
 80036b4:	609a      	str	r2, [r3, #8]
 80036b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036b8:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036bc:	f383 8810 	msr	PRIMASK, r3
}
 80036c0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036c2:	f3ef 8310 	mrs	r3, PRIMASK
 80036c6:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80036c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036ca:	673b      	str	r3, [r7, #112]	; 0x70
 80036cc:	2301      	movs	r3, #1
 80036ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036d2:	f383 8810 	msr	PRIMASK, r3
}
 80036d6:	46c0      	nop			; (mov r8, r8)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	689a      	ldr	r2, [r3, #8]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	2140      	movs	r1, #64	; 0x40
 80036e4:	438a      	bics	r2, r1
 80036e6:	609a      	str	r2, [r3, #8]
 80036e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80036ea:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036ee:	f383 8810 	msr	PRIMASK, r3
}
 80036f2:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2288      	movs	r2, #136	; 0x88
 80036f8:	2120      	movs	r1, #32
 80036fa:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2200      	movs	r2, #0
 8003700:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003702:	f3ef 8310 	mrs	r3, PRIMASK
 8003706:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8003708:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800370a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800370c:	2301      	movs	r3, #1
 800370e:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003710:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003712:	f383 8810 	msr	PRIMASK, r3
}
 8003716:	46c0      	nop			; (mov r8, r8)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	2110      	movs	r1, #16
 8003724:	438a      	bics	r2, r1
 8003726:	601a      	str	r2, [r3, #0]
 8003728:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800372a:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800372c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800372e:	f383 8810 	msr	PRIMASK, r3
}
 8003732:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003738:	0018      	movs	r0, r3
 800373a:	f7fe f9b7 	bl	8001aac <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	225c      	movs	r2, #92	; 0x5c
 8003742:	5a9a      	ldrh	r2, [r3, r2]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	215e      	movs	r1, #94	; 0x5e
 8003748:	5a5b      	ldrh	r3, [r3, r1]
 800374a:	b29b      	uxth	r3, r3
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	b29a      	uxth	r2, r3
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	0011      	movs	r1, r2
 8003754:	0018      	movs	r0, r3
 8003756:	f000 f90b 	bl	8003970 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800375a:	e0ea      	b.n	8003932 <HAL_UART_IRQHandler+0x616>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	225c      	movs	r2, #92	; 0x5c
 8003760:	5a99      	ldrh	r1, [r3, r2]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	225e      	movs	r2, #94	; 0x5e
 8003766:	5a9b      	ldrh	r3, [r3, r2]
 8003768:	b29a      	uxth	r2, r3
 800376a:	208e      	movs	r0, #142	; 0x8e
 800376c:	183b      	adds	r3, r7, r0
 800376e:	1a8a      	subs	r2, r1, r2
 8003770:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	225e      	movs	r2, #94	; 0x5e
 8003776:	5a9b      	ldrh	r3, [r3, r2]
 8003778:	b29b      	uxth	r3, r3
 800377a:	2b00      	cmp	r3, #0
 800377c:	d100      	bne.n	8003780 <HAL_UART_IRQHandler+0x464>
 800377e:	e0da      	b.n	8003936 <HAL_UART_IRQHandler+0x61a>
          && (nb_rx_data > 0U))
 8003780:	183b      	adds	r3, r7, r0
 8003782:	881b      	ldrh	r3, [r3, #0]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d100      	bne.n	800378a <HAL_UART_IRQHandler+0x46e>
 8003788:	e0d5      	b.n	8003936 <HAL_UART_IRQHandler+0x61a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800378a:	f3ef 8310 	mrs	r3, PRIMASK
 800378e:	60fb      	str	r3, [r7, #12]
  return(result);
 8003790:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003792:	2488      	movs	r4, #136	; 0x88
 8003794:	193a      	adds	r2, r7, r4
 8003796:	6013      	str	r3, [r2, #0]
 8003798:	2301      	movs	r3, #1
 800379a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	f383 8810 	msr	PRIMASK, r3
}
 80037a2:	46c0      	nop			; (mov r8, r8)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4966      	ldr	r1, [pc, #408]	; (8003948 <HAL_UART_IRQHandler+0x62c>)
 80037b0:	400a      	ands	r2, r1
 80037b2:	601a      	str	r2, [r3, #0]
 80037b4:	193b      	adds	r3, r7, r4
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	f383 8810 	msr	PRIMASK, r3
}
 80037c0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037c2:	f3ef 8310 	mrs	r3, PRIMASK
 80037c6:	61bb      	str	r3, [r7, #24]
  return(result);
 80037c8:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80037ca:	2484      	movs	r4, #132	; 0x84
 80037cc:	193a      	adds	r2, r7, r4
 80037ce:	6013      	str	r3, [r2, #0]
 80037d0:	2301      	movs	r3, #1
 80037d2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037d4:	69fb      	ldr	r3, [r7, #28]
 80037d6:	f383 8810 	msr	PRIMASK, r3
}
 80037da:	46c0      	nop			; (mov r8, r8)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	689a      	ldr	r2, [r3, #8]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4959      	ldr	r1, [pc, #356]	; (800394c <HAL_UART_IRQHandler+0x630>)
 80037e8:	400a      	ands	r2, r1
 80037ea:	609a      	str	r2, [r3, #8]
 80037ec:	193b      	adds	r3, r7, r4
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037f2:	6a3b      	ldr	r3, [r7, #32]
 80037f4:	f383 8810 	msr	PRIMASK, r3
}
 80037f8:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2288      	movs	r2, #136	; 0x88
 80037fe:	2120      	movs	r1, #32
 8003800:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2200      	movs	r2, #0
 8003806:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2200      	movs	r2, #0
 800380c:	671a      	str	r2, [r3, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800380e:	f3ef 8310 	mrs	r3, PRIMASK
 8003812:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003814:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003816:	2480      	movs	r4, #128	; 0x80
 8003818:	193a      	adds	r2, r7, r4
 800381a:	6013      	str	r3, [r2, #0]
 800381c:	2301      	movs	r3, #1
 800381e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003822:	f383 8810 	msr	PRIMASK, r3
}
 8003826:	46c0      	nop			; (mov r8, r8)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	2110      	movs	r1, #16
 8003834:	438a      	bics	r2, r1
 8003836:	601a      	str	r2, [r3, #0]
 8003838:	193b      	adds	r3, r7, r4
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800383e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003840:	f383 8810 	msr	PRIMASK, r3
}
 8003844:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003846:	183b      	adds	r3, r7, r0
 8003848:	881a      	ldrh	r2, [r3, #0]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	0011      	movs	r1, r2
 800384e:	0018      	movs	r0, r3
 8003850:	f000 f88e 	bl	8003970 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003854:	e06f      	b.n	8003936 <HAL_UART_IRQHandler+0x61a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003856:	23a4      	movs	r3, #164	; 0xa4
 8003858:	18fb      	adds	r3, r7, r3
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	2380      	movs	r3, #128	; 0x80
 800385e:	035b      	lsls	r3, r3, #13
 8003860:	4013      	ands	r3, r2
 8003862:	d010      	beq.n	8003886 <HAL_UART_IRQHandler+0x56a>
 8003864:	239c      	movs	r3, #156	; 0x9c
 8003866:	18fb      	adds	r3, r7, r3
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	2380      	movs	r3, #128	; 0x80
 800386c:	03db      	lsls	r3, r3, #15
 800386e:	4013      	ands	r3, r2
 8003870:	d009      	beq.n	8003886 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	2280      	movs	r2, #128	; 0x80
 8003878:	0352      	lsls	r2, r2, #13
 800387a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	0018      	movs	r0, r3
 8003880:	f001 fb4a 	bl	8004f18 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003884:	e05a      	b.n	800393c <HAL_UART_IRQHandler+0x620>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003886:	23a4      	movs	r3, #164	; 0xa4
 8003888:	18fb      	adds	r3, r7, r3
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	2280      	movs	r2, #128	; 0x80
 800388e:	4013      	ands	r3, r2
 8003890:	d016      	beq.n	80038c0 <HAL_UART_IRQHandler+0x5a4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003892:	23a0      	movs	r3, #160	; 0xa0
 8003894:	18fb      	adds	r3, r7, r3
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	2280      	movs	r2, #128	; 0x80
 800389a:	4013      	ands	r3, r2
 800389c:	d106      	bne.n	80038ac <HAL_UART_IRQHandler+0x590>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800389e:	239c      	movs	r3, #156	; 0x9c
 80038a0:	18fb      	adds	r3, r7, r3
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	2380      	movs	r3, #128	; 0x80
 80038a6:	041b      	lsls	r3, r3, #16
 80038a8:	4013      	ands	r3, r2
 80038aa:	d009      	beq.n	80038c0 <HAL_UART_IRQHandler+0x5a4>
  {
    if (huart->TxISR != NULL)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d042      	beq.n	800393a <HAL_UART_IRQHandler+0x61e>
    {
      huart->TxISR(huart);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	0010      	movs	r0, r2
 80038bc:	4798      	blx	r3
    }
    return;
 80038be:	e03c      	b.n	800393a <HAL_UART_IRQHandler+0x61e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80038c0:	23a4      	movs	r3, #164	; 0xa4
 80038c2:	18fb      	adds	r3, r7, r3
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	2240      	movs	r2, #64	; 0x40
 80038c8:	4013      	ands	r3, r2
 80038ca:	d00a      	beq.n	80038e2 <HAL_UART_IRQHandler+0x5c6>
 80038cc:	23a0      	movs	r3, #160	; 0xa0
 80038ce:	18fb      	adds	r3, r7, r3
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	2240      	movs	r2, #64	; 0x40
 80038d4:	4013      	ands	r3, r2
 80038d6:	d004      	beq.n	80038e2 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	0018      	movs	r0, r3
 80038dc:	f000 fe9f 	bl	800461e <UART_EndTransmit_IT>
    return;
 80038e0:	e02c      	b.n	800393c <HAL_UART_IRQHandler+0x620>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80038e2:	23a4      	movs	r3, #164	; 0xa4
 80038e4:	18fb      	adds	r3, r7, r3
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	2380      	movs	r3, #128	; 0x80
 80038ea:	041b      	lsls	r3, r3, #16
 80038ec:	4013      	ands	r3, r2
 80038ee:	d00b      	beq.n	8003908 <HAL_UART_IRQHandler+0x5ec>
 80038f0:	23a0      	movs	r3, #160	; 0xa0
 80038f2:	18fb      	adds	r3, r7, r3
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	2380      	movs	r3, #128	; 0x80
 80038f8:	05db      	lsls	r3, r3, #23
 80038fa:	4013      	ands	r3, r2
 80038fc:	d004      	beq.n	8003908 <HAL_UART_IRQHandler+0x5ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	0018      	movs	r0, r3
 8003902:	f001 fb19 	bl	8004f38 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003906:	e019      	b.n	800393c <HAL_UART_IRQHandler+0x620>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003908:	23a4      	movs	r3, #164	; 0xa4
 800390a:	18fb      	adds	r3, r7, r3
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	2380      	movs	r3, #128	; 0x80
 8003910:	045b      	lsls	r3, r3, #17
 8003912:	4013      	ands	r3, r2
 8003914:	d012      	beq.n	800393c <HAL_UART_IRQHandler+0x620>
 8003916:	23a0      	movs	r3, #160	; 0xa0
 8003918:	18fb      	adds	r3, r7, r3
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	2b00      	cmp	r3, #0
 800391e:	da0d      	bge.n	800393c <HAL_UART_IRQHandler+0x620>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	0018      	movs	r0, r3
 8003924:	f001 fb00 	bl	8004f28 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003928:	e008      	b.n	800393c <HAL_UART_IRQHandler+0x620>
      return;
 800392a:	46c0      	nop			; (mov r8, r8)
 800392c:	e006      	b.n	800393c <HAL_UART_IRQHandler+0x620>
    return;
 800392e:	46c0      	nop			; (mov r8, r8)
 8003930:	e004      	b.n	800393c <HAL_UART_IRQHandler+0x620>
      return;
 8003932:	46c0      	nop			; (mov r8, r8)
 8003934:	e002      	b.n	800393c <HAL_UART_IRQHandler+0x620>
      return;
 8003936:	46c0      	nop			; (mov r8, r8)
 8003938:	e000      	b.n	800393c <HAL_UART_IRQHandler+0x620>
    return;
 800393a:	46c0      	nop			; (mov r8, r8)
  }
}
 800393c:	46bd      	mov	sp, r7
 800393e:	b02a      	add	sp, #168	; 0xa8
 8003940:	bdb0      	pop	{r4, r5, r7, pc}
 8003942:	46c0      	nop			; (mov r8, r8)
 8003944:	fffffeff 	.word	0xfffffeff
 8003948:	fffffedf 	.word	0xfffffedf
 800394c:	effffffe 	.word	0xeffffffe

08003950 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b082      	sub	sp, #8
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003958:	46c0      	nop			; (mov r8, r8)
 800395a:	46bd      	mov	sp, r7
 800395c:	b002      	add	sp, #8
 800395e:	bd80      	pop	{r7, pc}

08003960 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b082      	sub	sp, #8
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003968:	46c0      	nop			; (mov r8, r8)
 800396a:	46bd      	mov	sp, r7
 800396c:	b002      	add	sp, #8
 800396e:	bd80      	pop	{r7, pc}

08003970 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b082      	sub	sp, #8
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
 8003978:	000a      	movs	r2, r1
 800397a:	1cbb      	adds	r3, r7, #2
 800397c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800397e:	46c0      	nop			; (mov r8, r8)
 8003980:	46bd      	mov	sp, r7
 8003982:	b002      	add	sp, #8
 8003984:	bd80      	pop	{r7, pc}
	...

08003988 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003988:	b5b0      	push	{r4, r5, r7, lr}
 800398a:	b090      	sub	sp, #64	; 0x40
 800398c:	af00      	add	r7, sp, #0
 800398e:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003990:	231a      	movs	r3, #26
 8003992:	2220      	movs	r2, #32
 8003994:	4694      	mov	ip, r2
 8003996:	44bc      	add	ip, r7
 8003998:	4463      	add	r3, ip
 800399a:	2200      	movs	r2, #0
 800399c:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800399e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a0:	689a      	ldr	r2, [r3, #8]
 80039a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a4:	691b      	ldr	r3, [r3, #16]
 80039a6:	431a      	orrs	r2, r3
 80039a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039aa:	695b      	ldr	r3, [r3, #20]
 80039ac:	431a      	orrs	r2, r3
 80039ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b0:	69db      	ldr	r3, [r3, #28]
 80039b2:	4313      	orrs	r3, r2
 80039b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80039b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4ab9      	ldr	r2, [pc, #740]	; (8003ca4 <UART_SetConfig+0x31c>)
 80039be:	4013      	ands	r3, r2
 80039c0:	0019      	movs	r1, r3
 80039c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039c8:	430b      	orrs	r3, r1
 80039ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	4ab5      	ldr	r2, [pc, #724]	; (8003ca8 <UART_SetConfig+0x320>)
 80039d4:	4013      	ands	r3, r2
 80039d6:	0018      	movs	r0, r3
 80039d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039da:	68d9      	ldr	r1, [r3, #12]
 80039dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	0003      	movs	r3, r0
 80039e2:	430b      	orrs	r3, r1
 80039e4:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80039e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e8:	699b      	ldr	r3, [r3, #24]
 80039ea:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80039ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4aae      	ldr	r2, [pc, #696]	; (8003cac <UART_SetConfig+0x324>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d004      	beq.n	8003a00 <UART_SetConfig+0x78>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80039f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f8:	6a1b      	ldr	r3, [r3, #32]
 80039fa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80039fc:	4313      	orrs	r3, r2
 80039fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	4aaa      	ldr	r2, [pc, #680]	; (8003cb0 <UART_SetConfig+0x328>)
 8003a08:	4013      	ands	r3, r2
 8003a0a:	0019      	movs	r1, r3
 8003a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a12:	430b      	orrs	r3, r1
 8003a14:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a1c:	220f      	movs	r2, #15
 8003a1e:	4393      	bics	r3, r2
 8003a20:	0018      	movs	r0, r3
 8003a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a24:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	0003      	movs	r3, r0
 8003a2c:	430b      	orrs	r3, r1
 8003a2e:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a9f      	ldr	r2, [pc, #636]	; (8003cb4 <UART_SetConfig+0x32c>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d136      	bne.n	8003aa8 <UART_SetConfig+0x120>
 8003a3a:	4b9f      	ldr	r3, [pc, #636]	; (8003cb8 <UART_SetConfig+0x330>)
 8003a3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a3e:	2203      	movs	r2, #3
 8003a40:	4013      	ands	r3, r2
 8003a42:	2b03      	cmp	r3, #3
 8003a44:	d020      	beq.n	8003a88 <UART_SetConfig+0x100>
 8003a46:	d827      	bhi.n	8003a98 <UART_SetConfig+0x110>
 8003a48:	2b02      	cmp	r3, #2
 8003a4a:	d00d      	beq.n	8003a68 <UART_SetConfig+0xe0>
 8003a4c:	d824      	bhi.n	8003a98 <UART_SetConfig+0x110>
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d002      	beq.n	8003a58 <UART_SetConfig+0xd0>
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d010      	beq.n	8003a78 <UART_SetConfig+0xf0>
 8003a56:	e01f      	b.n	8003a98 <UART_SetConfig+0x110>
 8003a58:	231b      	movs	r3, #27
 8003a5a:	2220      	movs	r2, #32
 8003a5c:	4694      	mov	ip, r2
 8003a5e:	44bc      	add	ip, r7
 8003a60:	4463      	add	r3, ip
 8003a62:	2200      	movs	r2, #0
 8003a64:	701a      	strb	r2, [r3, #0]
 8003a66:	e0c5      	b.n	8003bf4 <UART_SetConfig+0x26c>
 8003a68:	231b      	movs	r3, #27
 8003a6a:	2220      	movs	r2, #32
 8003a6c:	4694      	mov	ip, r2
 8003a6e:	44bc      	add	ip, r7
 8003a70:	4463      	add	r3, ip
 8003a72:	2202      	movs	r2, #2
 8003a74:	701a      	strb	r2, [r3, #0]
 8003a76:	e0bd      	b.n	8003bf4 <UART_SetConfig+0x26c>
 8003a78:	231b      	movs	r3, #27
 8003a7a:	2220      	movs	r2, #32
 8003a7c:	4694      	mov	ip, r2
 8003a7e:	44bc      	add	ip, r7
 8003a80:	4463      	add	r3, ip
 8003a82:	2204      	movs	r2, #4
 8003a84:	701a      	strb	r2, [r3, #0]
 8003a86:	e0b5      	b.n	8003bf4 <UART_SetConfig+0x26c>
 8003a88:	231b      	movs	r3, #27
 8003a8a:	2220      	movs	r2, #32
 8003a8c:	4694      	mov	ip, r2
 8003a8e:	44bc      	add	ip, r7
 8003a90:	4463      	add	r3, ip
 8003a92:	2208      	movs	r2, #8
 8003a94:	701a      	strb	r2, [r3, #0]
 8003a96:	e0ad      	b.n	8003bf4 <UART_SetConfig+0x26c>
 8003a98:	231b      	movs	r3, #27
 8003a9a:	2220      	movs	r2, #32
 8003a9c:	4694      	mov	ip, r2
 8003a9e:	44bc      	add	ip, r7
 8003aa0:	4463      	add	r3, ip
 8003aa2:	2210      	movs	r2, #16
 8003aa4:	701a      	strb	r2, [r3, #0]
 8003aa6:	e0a5      	b.n	8003bf4 <UART_SetConfig+0x26c>
 8003aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a83      	ldr	r2, [pc, #524]	; (8003cbc <UART_SetConfig+0x334>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d136      	bne.n	8003b20 <UART_SetConfig+0x198>
 8003ab2:	4b81      	ldr	r3, [pc, #516]	; (8003cb8 <UART_SetConfig+0x330>)
 8003ab4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ab6:	220c      	movs	r2, #12
 8003ab8:	4013      	ands	r3, r2
 8003aba:	2b0c      	cmp	r3, #12
 8003abc:	d020      	beq.n	8003b00 <UART_SetConfig+0x178>
 8003abe:	d827      	bhi.n	8003b10 <UART_SetConfig+0x188>
 8003ac0:	2b08      	cmp	r3, #8
 8003ac2:	d00d      	beq.n	8003ae0 <UART_SetConfig+0x158>
 8003ac4:	d824      	bhi.n	8003b10 <UART_SetConfig+0x188>
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d002      	beq.n	8003ad0 <UART_SetConfig+0x148>
 8003aca:	2b04      	cmp	r3, #4
 8003acc:	d010      	beq.n	8003af0 <UART_SetConfig+0x168>
 8003ace:	e01f      	b.n	8003b10 <UART_SetConfig+0x188>
 8003ad0:	231b      	movs	r3, #27
 8003ad2:	2220      	movs	r2, #32
 8003ad4:	4694      	mov	ip, r2
 8003ad6:	44bc      	add	ip, r7
 8003ad8:	4463      	add	r3, ip
 8003ada:	2200      	movs	r2, #0
 8003adc:	701a      	strb	r2, [r3, #0]
 8003ade:	e089      	b.n	8003bf4 <UART_SetConfig+0x26c>
 8003ae0:	231b      	movs	r3, #27
 8003ae2:	2220      	movs	r2, #32
 8003ae4:	4694      	mov	ip, r2
 8003ae6:	44bc      	add	ip, r7
 8003ae8:	4463      	add	r3, ip
 8003aea:	2202      	movs	r2, #2
 8003aec:	701a      	strb	r2, [r3, #0]
 8003aee:	e081      	b.n	8003bf4 <UART_SetConfig+0x26c>
 8003af0:	231b      	movs	r3, #27
 8003af2:	2220      	movs	r2, #32
 8003af4:	4694      	mov	ip, r2
 8003af6:	44bc      	add	ip, r7
 8003af8:	4463      	add	r3, ip
 8003afa:	2204      	movs	r2, #4
 8003afc:	701a      	strb	r2, [r3, #0]
 8003afe:	e079      	b.n	8003bf4 <UART_SetConfig+0x26c>
 8003b00:	231b      	movs	r3, #27
 8003b02:	2220      	movs	r2, #32
 8003b04:	4694      	mov	ip, r2
 8003b06:	44bc      	add	ip, r7
 8003b08:	4463      	add	r3, ip
 8003b0a:	2208      	movs	r2, #8
 8003b0c:	701a      	strb	r2, [r3, #0]
 8003b0e:	e071      	b.n	8003bf4 <UART_SetConfig+0x26c>
 8003b10:	231b      	movs	r3, #27
 8003b12:	2220      	movs	r2, #32
 8003b14:	4694      	mov	ip, r2
 8003b16:	44bc      	add	ip, r7
 8003b18:	4463      	add	r3, ip
 8003b1a:	2210      	movs	r2, #16
 8003b1c:	701a      	strb	r2, [r3, #0]
 8003b1e:	e069      	b.n	8003bf4 <UART_SetConfig+0x26c>
 8003b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a66      	ldr	r2, [pc, #408]	; (8003cc0 <UART_SetConfig+0x338>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d107      	bne.n	8003b3a <UART_SetConfig+0x1b2>
 8003b2a:	231b      	movs	r3, #27
 8003b2c:	2220      	movs	r2, #32
 8003b2e:	4694      	mov	ip, r2
 8003b30:	44bc      	add	ip, r7
 8003b32:	4463      	add	r3, ip
 8003b34:	2200      	movs	r2, #0
 8003b36:	701a      	strb	r2, [r3, #0]
 8003b38:	e05c      	b.n	8003bf4 <UART_SetConfig+0x26c>
 8003b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a61      	ldr	r2, [pc, #388]	; (8003cc4 <UART_SetConfig+0x33c>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d107      	bne.n	8003b54 <UART_SetConfig+0x1cc>
 8003b44:	231b      	movs	r3, #27
 8003b46:	2220      	movs	r2, #32
 8003b48:	4694      	mov	ip, r2
 8003b4a:	44bc      	add	ip, r7
 8003b4c:	4463      	add	r3, ip
 8003b4e:	2200      	movs	r2, #0
 8003b50:	701a      	strb	r2, [r3, #0]
 8003b52:	e04f      	b.n	8003bf4 <UART_SetConfig+0x26c>
 8003b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a54      	ldr	r2, [pc, #336]	; (8003cac <UART_SetConfig+0x324>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d143      	bne.n	8003be6 <UART_SetConfig+0x25e>
 8003b5e:	4b56      	ldr	r3, [pc, #344]	; (8003cb8 <UART_SetConfig+0x330>)
 8003b60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003b62:	23c0      	movs	r3, #192	; 0xc0
 8003b64:	011b      	lsls	r3, r3, #4
 8003b66:	4013      	ands	r3, r2
 8003b68:	22c0      	movs	r2, #192	; 0xc0
 8003b6a:	0112      	lsls	r2, r2, #4
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d02a      	beq.n	8003bc6 <UART_SetConfig+0x23e>
 8003b70:	22c0      	movs	r2, #192	; 0xc0
 8003b72:	0112      	lsls	r2, r2, #4
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d82e      	bhi.n	8003bd6 <UART_SetConfig+0x24e>
 8003b78:	2280      	movs	r2, #128	; 0x80
 8003b7a:	0112      	lsls	r2, r2, #4
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d012      	beq.n	8003ba6 <UART_SetConfig+0x21e>
 8003b80:	2280      	movs	r2, #128	; 0x80
 8003b82:	0112      	lsls	r2, r2, #4
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d826      	bhi.n	8003bd6 <UART_SetConfig+0x24e>
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d004      	beq.n	8003b96 <UART_SetConfig+0x20e>
 8003b8c:	2280      	movs	r2, #128	; 0x80
 8003b8e:	00d2      	lsls	r2, r2, #3
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d010      	beq.n	8003bb6 <UART_SetConfig+0x22e>
 8003b94:	e01f      	b.n	8003bd6 <UART_SetConfig+0x24e>
 8003b96:	231b      	movs	r3, #27
 8003b98:	2220      	movs	r2, #32
 8003b9a:	4694      	mov	ip, r2
 8003b9c:	44bc      	add	ip, r7
 8003b9e:	4463      	add	r3, ip
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	701a      	strb	r2, [r3, #0]
 8003ba4:	e026      	b.n	8003bf4 <UART_SetConfig+0x26c>
 8003ba6:	231b      	movs	r3, #27
 8003ba8:	2220      	movs	r2, #32
 8003baa:	4694      	mov	ip, r2
 8003bac:	44bc      	add	ip, r7
 8003bae:	4463      	add	r3, ip
 8003bb0:	2202      	movs	r2, #2
 8003bb2:	701a      	strb	r2, [r3, #0]
 8003bb4:	e01e      	b.n	8003bf4 <UART_SetConfig+0x26c>
 8003bb6:	231b      	movs	r3, #27
 8003bb8:	2220      	movs	r2, #32
 8003bba:	4694      	mov	ip, r2
 8003bbc:	44bc      	add	ip, r7
 8003bbe:	4463      	add	r3, ip
 8003bc0:	2204      	movs	r2, #4
 8003bc2:	701a      	strb	r2, [r3, #0]
 8003bc4:	e016      	b.n	8003bf4 <UART_SetConfig+0x26c>
 8003bc6:	231b      	movs	r3, #27
 8003bc8:	2220      	movs	r2, #32
 8003bca:	4694      	mov	ip, r2
 8003bcc:	44bc      	add	ip, r7
 8003bce:	4463      	add	r3, ip
 8003bd0:	2208      	movs	r2, #8
 8003bd2:	701a      	strb	r2, [r3, #0]
 8003bd4:	e00e      	b.n	8003bf4 <UART_SetConfig+0x26c>
 8003bd6:	231b      	movs	r3, #27
 8003bd8:	2220      	movs	r2, #32
 8003bda:	4694      	mov	ip, r2
 8003bdc:	44bc      	add	ip, r7
 8003bde:	4463      	add	r3, ip
 8003be0:	2210      	movs	r2, #16
 8003be2:	701a      	strb	r2, [r3, #0]
 8003be4:	e006      	b.n	8003bf4 <UART_SetConfig+0x26c>
 8003be6:	231b      	movs	r3, #27
 8003be8:	2220      	movs	r2, #32
 8003bea:	4694      	mov	ip, r2
 8003bec:	44bc      	add	ip, r7
 8003bee:	4463      	add	r3, ip
 8003bf0:	2210      	movs	r2, #16
 8003bf2:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a2c      	ldr	r2, [pc, #176]	; (8003cac <UART_SetConfig+0x324>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d000      	beq.n	8003c00 <UART_SetConfig+0x278>
 8003bfe:	e0ad      	b.n	8003d5c <UART_SetConfig+0x3d4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003c00:	231b      	movs	r3, #27
 8003c02:	2220      	movs	r2, #32
 8003c04:	4694      	mov	ip, r2
 8003c06:	44bc      	add	ip, r7
 8003c08:	4463      	add	r3, ip
 8003c0a:	781b      	ldrb	r3, [r3, #0]
 8003c0c:	2b08      	cmp	r3, #8
 8003c0e:	d015      	beq.n	8003c3c <UART_SetConfig+0x2b4>
 8003c10:	dc18      	bgt.n	8003c44 <UART_SetConfig+0x2bc>
 8003c12:	2b04      	cmp	r3, #4
 8003c14:	d00d      	beq.n	8003c32 <UART_SetConfig+0x2aa>
 8003c16:	dc15      	bgt.n	8003c44 <UART_SetConfig+0x2bc>
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d002      	beq.n	8003c22 <UART_SetConfig+0x29a>
 8003c1c:	2b02      	cmp	r3, #2
 8003c1e:	d005      	beq.n	8003c2c <UART_SetConfig+0x2a4>
 8003c20:	e010      	b.n	8003c44 <UART_SetConfig+0x2bc>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c22:	f7fe fea7 	bl	8002974 <HAL_RCC_GetPCLK1Freq>
 8003c26:	0003      	movs	r3, r0
 8003c28:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003c2a:	e015      	b.n	8003c58 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c2c:	4b26      	ldr	r3, [pc, #152]	; (8003cc8 <UART_SetConfig+0x340>)
 8003c2e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003c30:	e012      	b.n	8003c58 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c32:	f7fe fe13 	bl	800285c <HAL_RCC_GetSysClockFreq>
 8003c36:	0003      	movs	r3, r0
 8003c38:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003c3a:	e00d      	b.n	8003c58 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c3c:	2380      	movs	r3, #128	; 0x80
 8003c3e:	021b      	lsls	r3, r3, #8
 8003c40:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003c42:	e009      	b.n	8003c58 <UART_SetConfig+0x2d0>
      default:
        pclk = 0U;
 8003c44:	2300      	movs	r3, #0
 8003c46:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003c48:	231a      	movs	r3, #26
 8003c4a:	2220      	movs	r2, #32
 8003c4c:	4694      	mov	ip, r2
 8003c4e:	44bc      	add	ip, r7
 8003c50:	4463      	add	r3, ip
 8003c52:	2201      	movs	r2, #1
 8003c54:	701a      	strb	r2, [r3, #0]
        break;
 8003c56:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003c58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d100      	bne.n	8003c60 <UART_SetConfig+0x2d8>
 8003c5e:	e153      	b.n	8003f08 <UART_SetConfig+0x580>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c64:	4b19      	ldr	r3, [pc, #100]	; (8003ccc <UART_SetConfig+0x344>)
 8003c66:	0052      	lsls	r2, r2, #1
 8003c68:	5ad3      	ldrh	r3, [r2, r3]
 8003c6a:	0019      	movs	r1, r3
 8003c6c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003c6e:	f7fc fa5b 	bl	8000128 <__udivsi3>
 8003c72:	0003      	movs	r3, r0
 8003c74:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c78:	685a      	ldr	r2, [r3, #4]
 8003c7a:	0013      	movs	r3, r2
 8003c7c:	005b      	lsls	r3, r3, #1
 8003c7e:	189b      	adds	r3, r3, r2
 8003c80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c82:	429a      	cmp	r2, r3
 8003c84:	d305      	bcc.n	8003c92 <UART_SetConfig+0x30a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003c8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c8e:	429a      	cmp	r2, r3
 8003c90:	d91e      	bls.n	8003cd0 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8003c92:	231a      	movs	r3, #26
 8003c94:	2220      	movs	r2, #32
 8003c96:	4694      	mov	ip, r2
 8003c98:	44bc      	add	ip, r7
 8003c9a:	4463      	add	r3, ip
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	701a      	strb	r2, [r3, #0]
 8003ca0:	e132      	b.n	8003f08 <UART_SetConfig+0x580>
 8003ca2:	46c0      	nop			; (mov r8, r8)
 8003ca4:	cfff69f3 	.word	0xcfff69f3
 8003ca8:	ffffcfff 	.word	0xffffcfff
 8003cac:	40008000 	.word	0x40008000
 8003cb0:	11fff4ff 	.word	0x11fff4ff
 8003cb4:	40013800 	.word	0x40013800
 8003cb8:	40021000 	.word	0x40021000
 8003cbc:	40004400 	.word	0x40004400
 8003cc0:	40004800 	.word	0x40004800
 8003cc4:	40004c00 	.word	0x40004c00
 8003cc8:	00f42400 	.word	0x00f42400
 8003ccc:	08005b70 	.word	0x08005b70
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003cd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cd2:	61bb      	str	r3, [r7, #24]
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	61fb      	str	r3, [r7, #28]
 8003cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003cdc:	4b96      	ldr	r3, [pc, #600]	; (8003f38 <UART_SetConfig+0x5b0>)
 8003cde:	0052      	lsls	r2, r2, #1
 8003ce0:	5ad3      	ldrh	r3, [r2, r3]
 8003ce2:	613b      	str	r3, [r7, #16]
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	617b      	str	r3, [r7, #20]
 8003ce8:	693a      	ldr	r2, [r7, #16]
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	69b8      	ldr	r0, [r7, #24]
 8003cee:	69f9      	ldr	r1, [r7, #28]
 8003cf0:	f7fc fb90 	bl	8000414 <__aeabi_uldivmod>
 8003cf4:	0002      	movs	r2, r0
 8003cf6:	000b      	movs	r3, r1
 8003cf8:	0e11      	lsrs	r1, r2, #24
 8003cfa:	021d      	lsls	r5, r3, #8
 8003cfc:	430d      	orrs	r5, r1
 8003cfe:	0214      	lsls	r4, r2, #8
 8003d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	085b      	lsrs	r3, r3, #1
 8003d06:	60bb      	str	r3, [r7, #8]
 8003d08:	2300      	movs	r3, #0
 8003d0a:	60fb      	str	r3, [r7, #12]
 8003d0c:	68b8      	ldr	r0, [r7, #8]
 8003d0e:	68f9      	ldr	r1, [r7, #12]
 8003d10:	1900      	adds	r0, r0, r4
 8003d12:	4169      	adcs	r1, r5
 8003d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	603b      	str	r3, [r7, #0]
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	607b      	str	r3, [r7, #4]
 8003d1e:	683a      	ldr	r2, [r7, #0]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	f7fc fb77 	bl	8000414 <__aeabi_uldivmod>
 8003d26:	0002      	movs	r2, r0
 8003d28:	000b      	movs	r3, r1
 8003d2a:	0013      	movs	r3, r2
 8003d2c:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003d2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d30:	23c0      	movs	r3, #192	; 0xc0
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d309      	bcc.n	8003d4c <UART_SetConfig+0x3c4>
 8003d38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d3a:	2380      	movs	r3, #128	; 0x80
 8003d3c:	035b      	lsls	r3, r3, #13
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d204      	bcs.n	8003d4c <UART_SetConfig+0x3c4>
        {
          huart->Instance->BRR = usartdiv;
 8003d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d48:	60da      	str	r2, [r3, #12]
 8003d4a:	e0dd      	b.n	8003f08 <UART_SetConfig+0x580>
        }
        else
        {
          ret = HAL_ERROR;
 8003d4c:	231a      	movs	r3, #26
 8003d4e:	2220      	movs	r2, #32
 8003d50:	4694      	mov	ip, r2
 8003d52:	44bc      	add	ip, r7
 8003d54:	4463      	add	r3, ip
 8003d56:	2201      	movs	r2, #1
 8003d58:	701a      	strb	r2, [r3, #0]
 8003d5a:	e0d5      	b.n	8003f08 <UART_SetConfig+0x580>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d5e:	69da      	ldr	r2, [r3, #28]
 8003d60:	2380      	movs	r3, #128	; 0x80
 8003d62:	021b      	lsls	r3, r3, #8
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d000      	beq.n	8003d6a <UART_SetConfig+0x3e2>
 8003d68:	e073      	b.n	8003e52 <UART_SetConfig+0x4ca>
  {
    switch (clocksource)
 8003d6a:	231b      	movs	r3, #27
 8003d6c:	2220      	movs	r2, #32
 8003d6e:	4694      	mov	ip, r2
 8003d70:	44bc      	add	ip, r7
 8003d72:	4463      	add	r3, ip
 8003d74:	781b      	ldrb	r3, [r3, #0]
 8003d76:	2b08      	cmp	r3, #8
 8003d78:	d015      	beq.n	8003da6 <UART_SetConfig+0x41e>
 8003d7a:	dc18      	bgt.n	8003dae <UART_SetConfig+0x426>
 8003d7c:	2b04      	cmp	r3, #4
 8003d7e:	d00d      	beq.n	8003d9c <UART_SetConfig+0x414>
 8003d80:	dc15      	bgt.n	8003dae <UART_SetConfig+0x426>
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d002      	beq.n	8003d8c <UART_SetConfig+0x404>
 8003d86:	2b02      	cmp	r3, #2
 8003d88:	d005      	beq.n	8003d96 <UART_SetConfig+0x40e>
 8003d8a:	e010      	b.n	8003dae <UART_SetConfig+0x426>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d8c:	f7fe fdf2 	bl	8002974 <HAL_RCC_GetPCLK1Freq>
 8003d90:	0003      	movs	r3, r0
 8003d92:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003d94:	e015      	b.n	8003dc2 <UART_SetConfig+0x43a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d96:	4b69      	ldr	r3, [pc, #420]	; (8003f3c <UART_SetConfig+0x5b4>)
 8003d98:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003d9a:	e012      	b.n	8003dc2 <UART_SetConfig+0x43a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d9c:	f7fe fd5e 	bl	800285c <HAL_RCC_GetSysClockFreq>
 8003da0:	0003      	movs	r3, r0
 8003da2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003da4:	e00d      	b.n	8003dc2 <UART_SetConfig+0x43a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003da6:	2380      	movs	r3, #128	; 0x80
 8003da8:	021b      	lsls	r3, r3, #8
 8003daa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003dac:	e009      	b.n	8003dc2 <UART_SetConfig+0x43a>
      default:
        pclk = 0U;
 8003dae:	2300      	movs	r3, #0
 8003db0:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003db2:	231a      	movs	r3, #26
 8003db4:	2220      	movs	r2, #32
 8003db6:	4694      	mov	ip, r2
 8003db8:	44bc      	add	ip, r7
 8003dba:	4463      	add	r3, ip
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	701a      	strb	r2, [r3, #0]
        break;
 8003dc0:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003dc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d100      	bne.n	8003dca <UART_SetConfig+0x442>
 8003dc8:	e09e      	b.n	8003f08 <UART_SetConfig+0x580>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dcc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003dce:	4b5a      	ldr	r3, [pc, #360]	; (8003f38 <UART_SetConfig+0x5b0>)
 8003dd0:	0052      	lsls	r2, r2, #1
 8003dd2:	5ad3      	ldrh	r3, [r2, r3]
 8003dd4:	0019      	movs	r1, r3
 8003dd6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003dd8:	f7fc f9a6 	bl	8000128 <__udivsi3>
 8003ddc:	0003      	movs	r3, r0
 8003dde:	005a      	lsls	r2, r3, #1
 8003de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	085b      	lsrs	r3, r3, #1
 8003de6:	18d2      	adds	r2, r2, r3
 8003de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	0019      	movs	r1, r3
 8003dee:	0010      	movs	r0, r2
 8003df0:	f7fc f99a 	bl	8000128 <__udivsi3>
 8003df4:	0003      	movs	r3, r0
 8003df6:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dfa:	2b0f      	cmp	r3, #15
 8003dfc:	d921      	bls.n	8003e42 <UART_SetConfig+0x4ba>
 8003dfe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e00:	2380      	movs	r3, #128	; 0x80
 8003e02:	025b      	lsls	r3, r3, #9
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d21c      	bcs.n	8003e42 <UART_SetConfig+0x4ba>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e0a:	b29a      	uxth	r2, r3
 8003e0c:	200e      	movs	r0, #14
 8003e0e:	2420      	movs	r4, #32
 8003e10:	193b      	adds	r3, r7, r4
 8003e12:	181b      	adds	r3, r3, r0
 8003e14:	210f      	movs	r1, #15
 8003e16:	438a      	bics	r2, r1
 8003e18:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e1c:	085b      	lsrs	r3, r3, #1
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	2207      	movs	r2, #7
 8003e22:	4013      	ands	r3, r2
 8003e24:	b299      	uxth	r1, r3
 8003e26:	193b      	adds	r3, r7, r4
 8003e28:	181b      	adds	r3, r3, r0
 8003e2a:	193a      	adds	r2, r7, r4
 8003e2c:	1812      	adds	r2, r2, r0
 8003e2e:	8812      	ldrh	r2, [r2, #0]
 8003e30:	430a      	orrs	r2, r1
 8003e32:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	193a      	adds	r2, r7, r4
 8003e3a:	1812      	adds	r2, r2, r0
 8003e3c:	8812      	ldrh	r2, [r2, #0]
 8003e3e:	60da      	str	r2, [r3, #12]
 8003e40:	e062      	b.n	8003f08 <UART_SetConfig+0x580>
      }
      else
      {
        ret = HAL_ERROR;
 8003e42:	231a      	movs	r3, #26
 8003e44:	2220      	movs	r2, #32
 8003e46:	4694      	mov	ip, r2
 8003e48:	44bc      	add	ip, r7
 8003e4a:	4463      	add	r3, ip
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	701a      	strb	r2, [r3, #0]
 8003e50:	e05a      	b.n	8003f08 <UART_SetConfig+0x580>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e52:	231b      	movs	r3, #27
 8003e54:	2220      	movs	r2, #32
 8003e56:	4694      	mov	ip, r2
 8003e58:	44bc      	add	ip, r7
 8003e5a:	4463      	add	r3, ip
 8003e5c:	781b      	ldrb	r3, [r3, #0]
 8003e5e:	2b08      	cmp	r3, #8
 8003e60:	d015      	beq.n	8003e8e <UART_SetConfig+0x506>
 8003e62:	dc18      	bgt.n	8003e96 <UART_SetConfig+0x50e>
 8003e64:	2b04      	cmp	r3, #4
 8003e66:	d00d      	beq.n	8003e84 <UART_SetConfig+0x4fc>
 8003e68:	dc15      	bgt.n	8003e96 <UART_SetConfig+0x50e>
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d002      	beq.n	8003e74 <UART_SetConfig+0x4ec>
 8003e6e:	2b02      	cmp	r3, #2
 8003e70:	d005      	beq.n	8003e7e <UART_SetConfig+0x4f6>
 8003e72:	e010      	b.n	8003e96 <UART_SetConfig+0x50e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e74:	f7fe fd7e 	bl	8002974 <HAL_RCC_GetPCLK1Freq>
 8003e78:	0003      	movs	r3, r0
 8003e7a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003e7c:	e015      	b.n	8003eaa <UART_SetConfig+0x522>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e7e:	4b2f      	ldr	r3, [pc, #188]	; (8003f3c <UART_SetConfig+0x5b4>)
 8003e80:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003e82:	e012      	b.n	8003eaa <UART_SetConfig+0x522>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e84:	f7fe fcea 	bl	800285c <HAL_RCC_GetSysClockFreq>
 8003e88:	0003      	movs	r3, r0
 8003e8a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003e8c:	e00d      	b.n	8003eaa <UART_SetConfig+0x522>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e8e:	2380      	movs	r3, #128	; 0x80
 8003e90:	021b      	lsls	r3, r3, #8
 8003e92:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003e94:	e009      	b.n	8003eaa <UART_SetConfig+0x522>
      default:
        pclk = 0U;
 8003e96:	2300      	movs	r3, #0
 8003e98:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003e9a:	231a      	movs	r3, #26
 8003e9c:	2220      	movs	r2, #32
 8003e9e:	4694      	mov	ip, r2
 8003ea0:	44bc      	add	ip, r7
 8003ea2:	4463      	add	r3, ip
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	701a      	strb	r2, [r3, #0]
        break;
 8003ea8:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003eaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d02b      	beq.n	8003f08 <UART_SetConfig+0x580>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003eb4:	4b20      	ldr	r3, [pc, #128]	; (8003f38 <UART_SetConfig+0x5b0>)
 8003eb6:	0052      	lsls	r2, r2, #1
 8003eb8:	5ad3      	ldrh	r3, [r2, r3]
 8003eba:	0019      	movs	r1, r3
 8003ebc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003ebe:	f7fc f933 	bl	8000128 <__udivsi3>
 8003ec2:	0003      	movs	r3, r0
 8003ec4:	001a      	movs	r2, r3
 8003ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	085b      	lsrs	r3, r3, #1
 8003ecc:	18d2      	adds	r2, r2, r3
 8003ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	0019      	movs	r1, r3
 8003ed4:	0010      	movs	r0, r2
 8003ed6:	f7fc f927 	bl	8000128 <__udivsi3>
 8003eda:	0003      	movs	r3, r0
 8003edc:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ee0:	2b0f      	cmp	r3, #15
 8003ee2:	d90a      	bls.n	8003efa <UART_SetConfig+0x572>
 8003ee4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ee6:	2380      	movs	r3, #128	; 0x80
 8003ee8:	025b      	lsls	r3, r3, #9
 8003eea:	429a      	cmp	r2, r3
 8003eec:	d205      	bcs.n	8003efa <UART_SetConfig+0x572>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ef0:	b29a      	uxth	r2, r3
 8003ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	60da      	str	r2, [r3, #12]
 8003ef8:	e006      	b.n	8003f08 <UART_SetConfig+0x580>
      }
      else
      {
        ret = HAL_ERROR;
 8003efa:	231a      	movs	r3, #26
 8003efc:	2220      	movs	r2, #32
 8003efe:	4694      	mov	ip, r2
 8003f00:	44bc      	add	ip, r7
 8003f02:	4463      	add	r3, ip
 8003f04:	2201      	movs	r2, #1
 8003f06:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0a:	226a      	movs	r2, #106	; 0x6a
 8003f0c:	2101      	movs	r1, #1
 8003f0e:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8003f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f12:	2268      	movs	r2, #104	; 0x68
 8003f14:	2101      	movs	r1, #1
 8003f16:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8003f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f20:	2200      	movs	r2, #0
 8003f22:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003f24:	231a      	movs	r3, #26
 8003f26:	2220      	movs	r2, #32
 8003f28:	4694      	mov	ip, r2
 8003f2a:	44bc      	add	ip, r7
 8003f2c:	4463      	add	r3, ip
 8003f2e:	781b      	ldrb	r3, [r3, #0]
}
 8003f30:	0018      	movs	r0, r3
 8003f32:	46bd      	mov	sp, r7
 8003f34:	b010      	add	sp, #64	; 0x40
 8003f36:	bdb0      	pop	{r4, r5, r7, pc}
 8003f38:	08005b70 	.word	0x08005b70
 8003f3c:	00f42400 	.word	0x00f42400

08003f40 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b082      	sub	sp, #8
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	4013      	ands	r3, r2
 8003f50:	d00b      	beq.n	8003f6a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	4a4a      	ldr	r2, [pc, #296]	; (8004084 <UART_AdvFeatureConfig+0x144>)
 8003f5a:	4013      	ands	r3, r2
 8003f5c:	0019      	movs	r1, r3
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	430a      	orrs	r2, r1
 8003f68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f6e:	2202      	movs	r2, #2
 8003f70:	4013      	ands	r3, r2
 8003f72:	d00b      	beq.n	8003f8c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	4a43      	ldr	r2, [pc, #268]	; (8004088 <UART_AdvFeatureConfig+0x148>)
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	0019      	movs	r1, r3
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	430a      	orrs	r2, r1
 8003f8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f90:	2204      	movs	r2, #4
 8003f92:	4013      	ands	r3, r2
 8003f94:	d00b      	beq.n	8003fae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	4a3b      	ldr	r2, [pc, #236]	; (800408c <UART_AdvFeatureConfig+0x14c>)
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	0019      	movs	r1, r3
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	430a      	orrs	r2, r1
 8003fac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fb2:	2208      	movs	r2, #8
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	d00b      	beq.n	8003fd0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	4a34      	ldr	r2, [pc, #208]	; (8004090 <UART_AdvFeatureConfig+0x150>)
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	0019      	movs	r1, r3
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	430a      	orrs	r2, r1
 8003fce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fd4:	2210      	movs	r2, #16
 8003fd6:	4013      	ands	r3, r2
 8003fd8:	d00b      	beq.n	8003ff2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	4a2c      	ldr	r2, [pc, #176]	; (8004094 <UART_AdvFeatureConfig+0x154>)
 8003fe2:	4013      	ands	r3, r2
 8003fe4:	0019      	movs	r1, r3
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	430a      	orrs	r2, r1
 8003ff0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ff6:	2220      	movs	r2, #32
 8003ff8:	4013      	ands	r3, r2
 8003ffa:	d00b      	beq.n	8004014 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	4a25      	ldr	r2, [pc, #148]	; (8004098 <UART_AdvFeatureConfig+0x158>)
 8004004:	4013      	ands	r3, r2
 8004006:	0019      	movs	r1, r3
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	430a      	orrs	r2, r1
 8004012:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004018:	2240      	movs	r2, #64	; 0x40
 800401a:	4013      	ands	r3, r2
 800401c:	d01d      	beq.n	800405a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	4a1d      	ldr	r2, [pc, #116]	; (800409c <UART_AdvFeatureConfig+0x15c>)
 8004026:	4013      	ands	r3, r2
 8004028:	0019      	movs	r1, r3
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	430a      	orrs	r2, r1
 8004034:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800403a:	2380      	movs	r3, #128	; 0x80
 800403c:	035b      	lsls	r3, r3, #13
 800403e:	429a      	cmp	r2, r3
 8004040:	d10b      	bne.n	800405a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	4a15      	ldr	r2, [pc, #84]	; (80040a0 <UART_AdvFeatureConfig+0x160>)
 800404a:	4013      	ands	r3, r2
 800404c:	0019      	movs	r1, r3
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	430a      	orrs	r2, r1
 8004058:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800405e:	2280      	movs	r2, #128	; 0x80
 8004060:	4013      	ands	r3, r2
 8004062:	d00b      	beq.n	800407c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	4a0e      	ldr	r2, [pc, #56]	; (80040a4 <UART_AdvFeatureConfig+0x164>)
 800406c:	4013      	ands	r3, r2
 800406e:	0019      	movs	r1, r3
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	430a      	orrs	r2, r1
 800407a:	605a      	str	r2, [r3, #4]
  }
}
 800407c:	46c0      	nop			; (mov r8, r8)
 800407e:	46bd      	mov	sp, r7
 8004080:	b002      	add	sp, #8
 8004082:	bd80      	pop	{r7, pc}
 8004084:	fffdffff 	.word	0xfffdffff
 8004088:	fffeffff 	.word	0xfffeffff
 800408c:	fffbffff 	.word	0xfffbffff
 8004090:	ffff7fff 	.word	0xffff7fff
 8004094:	ffffefff 	.word	0xffffefff
 8004098:	ffffdfff 	.word	0xffffdfff
 800409c:	ffefffff 	.word	0xffefffff
 80040a0:	ff9fffff 	.word	0xff9fffff
 80040a4:	fff7ffff 	.word	0xfff7ffff

080040a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b086      	sub	sp, #24
 80040ac:	af02      	add	r7, sp, #8
 80040ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	228c      	movs	r2, #140	; 0x8c
 80040b4:	2100      	movs	r1, #0
 80040b6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80040b8:	f7fd fbfa 	bl	80018b0 <HAL_GetTick>
 80040bc:	0003      	movs	r3, r0
 80040be:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	2208      	movs	r2, #8
 80040c8:	4013      	ands	r3, r2
 80040ca:	2b08      	cmp	r3, #8
 80040cc:	d10c      	bne.n	80040e8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2280      	movs	r2, #128	; 0x80
 80040d2:	0391      	lsls	r1, r2, #14
 80040d4:	6878      	ldr	r0, [r7, #4]
 80040d6:	4a18      	ldr	r2, [pc, #96]	; (8004138 <UART_CheckIdleState+0x90>)
 80040d8:	9200      	str	r2, [sp, #0]
 80040da:	2200      	movs	r2, #0
 80040dc:	f000 f82e 	bl	800413c <UART_WaitOnFlagUntilTimeout>
 80040e0:	1e03      	subs	r3, r0, #0
 80040e2:	d001      	beq.n	80040e8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040e4:	2303      	movs	r3, #3
 80040e6:	e023      	b.n	8004130 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	2204      	movs	r2, #4
 80040f0:	4013      	ands	r3, r2
 80040f2:	2b04      	cmp	r3, #4
 80040f4:	d10c      	bne.n	8004110 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2280      	movs	r2, #128	; 0x80
 80040fa:	03d1      	lsls	r1, r2, #15
 80040fc:	6878      	ldr	r0, [r7, #4]
 80040fe:	4a0e      	ldr	r2, [pc, #56]	; (8004138 <UART_CheckIdleState+0x90>)
 8004100:	9200      	str	r2, [sp, #0]
 8004102:	2200      	movs	r2, #0
 8004104:	f000 f81a 	bl	800413c <UART_WaitOnFlagUntilTimeout>
 8004108:	1e03      	subs	r3, r0, #0
 800410a:	d001      	beq.n	8004110 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800410c:	2303      	movs	r3, #3
 800410e:	e00f      	b.n	8004130 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2284      	movs	r2, #132	; 0x84
 8004114:	2120      	movs	r1, #32
 8004116:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2288      	movs	r2, #136	; 0x88
 800411c:	2120      	movs	r1, #32
 800411e:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2200      	movs	r2, #0
 8004124:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2280      	movs	r2, #128	; 0x80
 800412a:	2100      	movs	r1, #0
 800412c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800412e:	2300      	movs	r3, #0
}
 8004130:	0018      	movs	r0, r3
 8004132:	46bd      	mov	sp, r7
 8004134:	b004      	add	sp, #16
 8004136:	bd80      	pop	{r7, pc}
 8004138:	01ffffff 	.word	0x01ffffff

0800413c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b094      	sub	sp, #80	; 0x50
 8004140:	af00      	add	r7, sp, #0
 8004142:	60f8      	str	r0, [r7, #12]
 8004144:	60b9      	str	r1, [r7, #8]
 8004146:	603b      	str	r3, [r7, #0]
 8004148:	1dfb      	adds	r3, r7, #7
 800414a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800414c:	e0a7      	b.n	800429e <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800414e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004150:	3301      	adds	r3, #1
 8004152:	d100      	bne.n	8004156 <UART_WaitOnFlagUntilTimeout+0x1a>
 8004154:	e0a3      	b.n	800429e <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004156:	f7fd fbab 	bl	80018b0 <HAL_GetTick>
 800415a:	0002      	movs	r2, r0
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	1ad3      	subs	r3, r2, r3
 8004160:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004162:	429a      	cmp	r2, r3
 8004164:	d302      	bcc.n	800416c <UART_WaitOnFlagUntilTimeout+0x30>
 8004166:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004168:	2b00      	cmp	r3, #0
 800416a:	d13f      	bne.n	80041ec <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800416c:	f3ef 8310 	mrs	r3, PRIMASK
 8004170:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8004172:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004174:	647b      	str	r3, [r7, #68]	; 0x44
 8004176:	2301      	movs	r3, #1
 8004178:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800417a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800417c:	f383 8810 	msr	PRIMASK, r3
}
 8004180:	46c0      	nop			; (mov r8, r8)
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	681a      	ldr	r2, [r3, #0]
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	494e      	ldr	r1, [pc, #312]	; (80042c8 <UART_WaitOnFlagUntilTimeout+0x18c>)
 800418e:	400a      	ands	r2, r1
 8004190:	601a      	str	r2, [r3, #0]
 8004192:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004194:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004198:	f383 8810 	msr	PRIMASK, r3
}
 800419c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800419e:	f3ef 8310 	mrs	r3, PRIMASK
 80041a2:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80041a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041a6:	643b      	str	r3, [r7, #64]	; 0x40
 80041a8:	2301      	movs	r3, #1
 80041aa:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ae:	f383 8810 	msr	PRIMASK, r3
}
 80041b2:	46c0      	nop			; (mov r8, r8)
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	689a      	ldr	r2, [r3, #8]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	2101      	movs	r1, #1
 80041c0:	438a      	bics	r2, r1
 80041c2:	609a      	str	r2, [r3, #8]
 80041c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041ca:	f383 8810 	msr	PRIMASK, r3
}
 80041ce:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2284      	movs	r2, #132	; 0x84
 80041d4:	2120      	movs	r1, #32
 80041d6:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2288      	movs	r2, #136	; 0x88
 80041dc:	2120      	movs	r1, #32
 80041de:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2280      	movs	r2, #128	; 0x80
 80041e4:	2100      	movs	r1, #0
 80041e6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80041e8:	2303      	movs	r3, #3
 80041ea:	e069      	b.n	80042c0 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	2204      	movs	r2, #4
 80041f4:	4013      	ands	r3, r2
 80041f6:	d052      	beq.n	800429e <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	69da      	ldr	r2, [r3, #28]
 80041fe:	2380      	movs	r3, #128	; 0x80
 8004200:	011b      	lsls	r3, r3, #4
 8004202:	401a      	ands	r2, r3
 8004204:	2380      	movs	r3, #128	; 0x80
 8004206:	011b      	lsls	r3, r3, #4
 8004208:	429a      	cmp	r2, r3
 800420a:	d148      	bne.n	800429e <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	2280      	movs	r2, #128	; 0x80
 8004212:	0112      	lsls	r2, r2, #4
 8004214:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004216:	f3ef 8310 	mrs	r3, PRIMASK
 800421a:	613b      	str	r3, [r7, #16]
  return(result);
 800421c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800421e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004220:	2301      	movs	r3, #1
 8004222:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	f383 8810 	msr	PRIMASK, r3
}
 800422a:	46c0      	nop			; (mov r8, r8)
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4924      	ldr	r1, [pc, #144]	; (80042c8 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8004238:	400a      	ands	r2, r1
 800423a:	601a      	str	r2, [r3, #0]
 800423c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800423e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004240:	69bb      	ldr	r3, [r7, #24]
 8004242:	f383 8810 	msr	PRIMASK, r3
}
 8004246:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004248:	f3ef 8310 	mrs	r3, PRIMASK
 800424c:	61fb      	str	r3, [r7, #28]
  return(result);
 800424e:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004250:	64bb      	str	r3, [r7, #72]	; 0x48
 8004252:	2301      	movs	r3, #1
 8004254:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004256:	6a3b      	ldr	r3, [r7, #32]
 8004258:	f383 8810 	msr	PRIMASK, r3
}
 800425c:	46c0      	nop			; (mov r8, r8)
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	689a      	ldr	r2, [r3, #8]
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	2101      	movs	r1, #1
 800426a:	438a      	bics	r2, r1
 800426c:	609a      	str	r2, [r3, #8]
 800426e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004270:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004274:	f383 8810 	msr	PRIMASK, r3
}
 8004278:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2284      	movs	r2, #132	; 0x84
 800427e:	2120      	movs	r1, #32
 8004280:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2288      	movs	r2, #136	; 0x88
 8004286:	2120      	movs	r1, #32
 8004288:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	228c      	movs	r2, #140	; 0x8c
 800428e:	2120      	movs	r1, #32
 8004290:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2280      	movs	r2, #128	; 0x80
 8004296:	2100      	movs	r1, #0
 8004298:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800429a:	2303      	movs	r3, #3
 800429c:	e010      	b.n	80042c0 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	69db      	ldr	r3, [r3, #28]
 80042a4:	68ba      	ldr	r2, [r7, #8]
 80042a6:	4013      	ands	r3, r2
 80042a8:	68ba      	ldr	r2, [r7, #8]
 80042aa:	1ad3      	subs	r3, r2, r3
 80042ac:	425a      	negs	r2, r3
 80042ae:	4153      	adcs	r3, r2
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	001a      	movs	r2, r3
 80042b4:	1dfb      	adds	r3, r7, #7
 80042b6:	781b      	ldrb	r3, [r3, #0]
 80042b8:	429a      	cmp	r2, r3
 80042ba:	d100      	bne.n	80042be <UART_WaitOnFlagUntilTimeout+0x182>
 80042bc:	e747      	b.n	800414e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80042be:	2300      	movs	r3, #0
}
 80042c0:	0018      	movs	r0, r3
 80042c2:	46bd      	mov	sp, r7
 80042c4:	b014      	add	sp, #80	; 0x50
 80042c6:	bd80      	pop	{r7, pc}
 80042c8:	fffffe5f 	.word	0xfffffe5f

080042cc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b098      	sub	sp, #96	; 0x60
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	60f8      	str	r0, [r7, #12]
 80042d4:	60b9      	str	r1, [r7, #8]
 80042d6:	1dbb      	adds	r3, r7, #6
 80042d8:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	68ba      	ldr	r2, [r7, #8]
 80042de:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	1dba      	adds	r2, r7, #6
 80042e4:	215c      	movs	r1, #92	; 0x5c
 80042e6:	8812      	ldrh	r2, [r2, #0]
 80042e8:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	1dba      	adds	r2, r7, #6
 80042ee:	215e      	movs	r1, #94	; 0x5e
 80042f0:	8812      	ldrh	r2, [r2, #0]
 80042f2:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2200      	movs	r2, #0
 80042f8:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	689a      	ldr	r2, [r3, #8]
 80042fe:	2380      	movs	r3, #128	; 0x80
 8004300:	015b      	lsls	r3, r3, #5
 8004302:	429a      	cmp	r2, r3
 8004304:	d10d      	bne.n	8004322 <UART_Start_Receive_IT+0x56>
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	691b      	ldr	r3, [r3, #16]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d104      	bne.n	8004318 <UART_Start_Receive_IT+0x4c>
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2260      	movs	r2, #96	; 0x60
 8004312:	497f      	ldr	r1, [pc, #508]	; (8004510 <UART_Start_Receive_IT+0x244>)
 8004314:	5299      	strh	r1, [r3, r2]
 8004316:	e02e      	b.n	8004376 <UART_Start_Receive_IT+0xaa>
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2260      	movs	r2, #96	; 0x60
 800431c:	21ff      	movs	r1, #255	; 0xff
 800431e:	5299      	strh	r1, [r3, r2]
 8004320:	e029      	b.n	8004376 <UART_Start_Receive_IT+0xaa>
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d10d      	bne.n	8004346 <UART_Start_Receive_IT+0x7a>
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	691b      	ldr	r3, [r3, #16]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d104      	bne.n	800433c <UART_Start_Receive_IT+0x70>
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2260      	movs	r2, #96	; 0x60
 8004336:	21ff      	movs	r1, #255	; 0xff
 8004338:	5299      	strh	r1, [r3, r2]
 800433a:	e01c      	b.n	8004376 <UART_Start_Receive_IT+0xaa>
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2260      	movs	r2, #96	; 0x60
 8004340:	217f      	movs	r1, #127	; 0x7f
 8004342:	5299      	strh	r1, [r3, r2]
 8004344:	e017      	b.n	8004376 <UART_Start_Receive_IT+0xaa>
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	689a      	ldr	r2, [r3, #8]
 800434a:	2380      	movs	r3, #128	; 0x80
 800434c:	055b      	lsls	r3, r3, #21
 800434e:	429a      	cmp	r2, r3
 8004350:	d10d      	bne.n	800436e <UART_Start_Receive_IT+0xa2>
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	691b      	ldr	r3, [r3, #16]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d104      	bne.n	8004364 <UART_Start_Receive_IT+0x98>
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2260      	movs	r2, #96	; 0x60
 800435e:	217f      	movs	r1, #127	; 0x7f
 8004360:	5299      	strh	r1, [r3, r2]
 8004362:	e008      	b.n	8004376 <UART_Start_Receive_IT+0xaa>
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2260      	movs	r2, #96	; 0x60
 8004368:	213f      	movs	r1, #63	; 0x3f
 800436a:	5299      	strh	r1, [r3, r2]
 800436c:	e003      	b.n	8004376 <UART_Start_Receive_IT+0xaa>
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2260      	movs	r2, #96	; 0x60
 8004372:	2100      	movs	r1, #0
 8004374:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	228c      	movs	r2, #140	; 0x8c
 800437a:	2100      	movs	r1, #0
 800437c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2288      	movs	r2, #136	; 0x88
 8004382:	2122      	movs	r1, #34	; 0x22
 8004384:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004386:	f3ef 8310 	mrs	r3, PRIMASK
 800438a:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 800438c:	6c3b      	ldr	r3, [r7, #64]	; 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800438e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004390:	2301      	movs	r3, #1
 8004392:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004394:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004396:	f383 8810 	msr	PRIMASK, r3
}
 800439a:	46c0      	nop			; (mov r8, r8)
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	689a      	ldr	r2, [r3, #8]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	2101      	movs	r1, #1
 80043a8:	430a      	orrs	r2, r1
 80043aa:	609a      	str	r2, [r3, #8]
 80043ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043ae:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043b2:	f383 8810 	msr	PRIMASK, r3
}
 80043b6:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80043bc:	2380      	movs	r3, #128	; 0x80
 80043be:	059b      	lsls	r3, r3, #22
 80043c0:	429a      	cmp	r2, r3
 80043c2:	d154      	bne.n	800446e <UART_Start_Receive_IT+0x1a2>
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2268      	movs	r2, #104	; 0x68
 80043c8:	5a9b      	ldrh	r3, [r3, r2]
 80043ca:	1dba      	adds	r2, r7, #6
 80043cc:	8812      	ldrh	r2, [r2, #0]
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d34d      	bcc.n	800446e <UART_Start_Receive_IT+0x1a2>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	689a      	ldr	r2, [r3, #8]
 80043d6:	2380      	movs	r3, #128	; 0x80
 80043d8:	015b      	lsls	r3, r3, #5
 80043da:	429a      	cmp	r2, r3
 80043dc:	d107      	bne.n	80043ee <UART_Start_Receive_IT+0x122>
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	691b      	ldr	r3, [r3, #16]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d103      	bne.n	80043ee <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	4a4a      	ldr	r2, [pc, #296]	; (8004514 <UART_Start_Receive_IT+0x248>)
 80043ea:	671a      	str	r2, [r3, #112]	; 0x70
 80043ec:	e002      	b.n	80043f4 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	4a49      	ldr	r2, [pc, #292]	; (8004518 <UART_Start_Receive_IT+0x24c>)
 80043f2:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2280      	movs	r2, #128	; 0x80
 80043f8:	2100      	movs	r1, #0
 80043fa:	5499      	strb	r1, [r3, r2]

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	691b      	ldr	r3, [r3, #16]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d019      	beq.n	8004438 <UART_Start_Receive_IT+0x16c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004404:	f3ef 8310 	mrs	r3, PRIMASK
 8004408:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800440a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800440c:	65bb      	str	r3, [r7, #88]	; 0x58
 800440e:	2301      	movs	r3, #1
 8004410:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004414:	f383 8810 	msr	PRIMASK, r3
}
 8004418:	46c0      	nop			; (mov r8, r8)
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	2180      	movs	r1, #128	; 0x80
 8004426:	0049      	lsls	r1, r1, #1
 8004428:	430a      	orrs	r2, r1
 800442a:	601a      	str	r2, [r3, #0]
 800442c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800442e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004430:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004432:	f383 8810 	msr	PRIMASK, r3
}
 8004436:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004438:	f3ef 8310 	mrs	r3, PRIMASK
 800443c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800443e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004440:	657b      	str	r3, [r7, #84]	; 0x54
 8004442:	2301      	movs	r3, #1
 8004444:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004448:	f383 8810 	msr	PRIMASK, r3
}
 800444c:	46c0      	nop			; (mov r8, r8)
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	689a      	ldr	r2, [r3, #8]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	2180      	movs	r1, #128	; 0x80
 800445a:	0549      	lsls	r1, r1, #21
 800445c:	430a      	orrs	r2, r1
 800445e:	609a      	str	r2, [r3, #8]
 8004460:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004462:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004466:	f383 8810 	msr	PRIMASK, r3
}
 800446a:	46c0      	nop			; (mov r8, r8)
 800446c:	e04b      	b.n	8004506 <UART_Start_Receive_IT+0x23a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	689a      	ldr	r2, [r3, #8]
 8004472:	2380      	movs	r3, #128	; 0x80
 8004474:	015b      	lsls	r3, r3, #5
 8004476:	429a      	cmp	r2, r3
 8004478:	d107      	bne.n	800448a <UART_Start_Receive_IT+0x1be>
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	691b      	ldr	r3, [r3, #16]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d103      	bne.n	800448a <UART_Start_Receive_IT+0x1be>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	4a25      	ldr	r2, [pc, #148]	; (800451c <UART_Start_Receive_IT+0x250>)
 8004486:	671a      	str	r2, [r3, #112]	; 0x70
 8004488:	e002      	b.n	8004490 <UART_Start_Receive_IT+0x1c4>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	4a24      	ldr	r2, [pc, #144]	; (8004520 <UART_Start_Receive_IT+0x254>)
 800448e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2280      	movs	r2, #128	; 0x80
 8004494:	2100      	movs	r1, #0
 8004496:	5499      	strb	r1, [r3, r2]

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	691b      	ldr	r3, [r3, #16]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d019      	beq.n	80044d4 <UART_Start_Receive_IT+0x208>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044a0:	f3ef 8310 	mrs	r3, PRIMASK
 80044a4:	61fb      	str	r3, [r7, #28]
  return(result);
 80044a6:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80044a8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044aa:	2301      	movs	r3, #1
 80044ac:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044ae:	6a3b      	ldr	r3, [r7, #32]
 80044b0:	f383 8810 	msr	PRIMASK, r3
}
 80044b4:	46c0      	nop			; (mov r8, r8)
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	2190      	movs	r1, #144	; 0x90
 80044c2:	0049      	lsls	r1, r1, #1
 80044c4:	430a      	orrs	r2, r1
 80044c6:	601a      	str	r2, [r3, #0]
 80044c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044ca:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ce:	f383 8810 	msr	PRIMASK, r3
}
 80044d2:	e018      	b.n	8004506 <UART_Start_Receive_IT+0x23a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044d4:	f3ef 8310 	mrs	r3, PRIMASK
 80044d8:	613b      	str	r3, [r7, #16]
  return(result);
 80044da:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80044dc:	653b      	str	r3, [r7, #80]	; 0x50
 80044de:	2301      	movs	r3, #1
 80044e0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	f383 8810 	msr	PRIMASK, r3
}
 80044e8:	46c0      	nop			; (mov r8, r8)
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	681a      	ldr	r2, [r3, #0]
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	2120      	movs	r1, #32
 80044f6:	430a      	orrs	r2, r1
 80044f8:	601a      	str	r2, [r3, #0]
 80044fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044fc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044fe:	69bb      	ldr	r3, [r7, #24]
 8004500:	f383 8810 	msr	PRIMASK, r3
}
 8004504:	46c0      	nop			; (mov r8, r8)
    }
  }
  return HAL_OK;
 8004506:	2300      	movs	r3, #0
}
 8004508:	0018      	movs	r0, r3
 800450a:	46bd      	mov	sp, r7
 800450c:	b018      	add	sp, #96	; 0x60
 800450e:	bd80      	pop	{r7, pc}
 8004510:	000001ff 	.word	0x000001ff
 8004514:	08004c35 	.word	0x08004c35
 8004518:	08004951 	.word	0x08004951
 800451c:	080047e5 	.word	0x080047e5
 8004520:	08004679 	.word	0x08004679

08004524 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b08e      	sub	sp, #56	; 0x38
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800452c:	f3ef 8310 	mrs	r3, PRIMASK
 8004530:	617b      	str	r3, [r7, #20]
  return(result);
 8004532:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004534:	637b      	str	r3, [r7, #52]	; 0x34
 8004536:	2301      	movs	r3, #1
 8004538:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800453a:	69bb      	ldr	r3, [r7, #24]
 800453c:	f383 8810 	msr	PRIMASK, r3
}
 8004540:	46c0      	nop			; (mov r8, r8)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4926      	ldr	r1, [pc, #152]	; (80045e8 <UART_EndRxTransfer+0xc4>)
 800454e:	400a      	ands	r2, r1
 8004550:	601a      	str	r2, [r3, #0]
 8004552:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004554:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004556:	69fb      	ldr	r3, [r7, #28]
 8004558:	f383 8810 	msr	PRIMASK, r3
}
 800455c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800455e:	f3ef 8310 	mrs	r3, PRIMASK
 8004562:	623b      	str	r3, [r7, #32]
  return(result);
 8004564:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004566:	633b      	str	r3, [r7, #48]	; 0x30
 8004568:	2301      	movs	r3, #1
 800456a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800456c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456e:	f383 8810 	msr	PRIMASK, r3
}
 8004572:	46c0      	nop			; (mov r8, r8)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	689a      	ldr	r2, [r3, #8]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	491b      	ldr	r1, [pc, #108]	; (80045ec <UART_EndRxTransfer+0xc8>)
 8004580:	400a      	ands	r2, r1
 8004582:	609a      	str	r2, [r3, #8]
 8004584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004586:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800458a:	f383 8810 	msr	PRIMASK, r3
}
 800458e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004594:	2b01      	cmp	r3, #1
 8004596:	d118      	bne.n	80045ca <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004598:	f3ef 8310 	mrs	r3, PRIMASK
 800459c:	60bb      	str	r3, [r7, #8]
  return(result);
 800459e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045a2:	2301      	movs	r3, #1
 80045a4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	f383 8810 	msr	PRIMASK, r3
}
 80045ac:	46c0      	nop			; (mov r8, r8)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	2110      	movs	r1, #16
 80045ba:	438a      	bics	r2, r1
 80045bc:	601a      	str	r2, [r3, #0]
 80045be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045c0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	f383 8810 	msr	PRIMASK, r3
}
 80045c8:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2288      	movs	r2, #136	; 0x88
 80045ce:	2120      	movs	r1, #32
 80045d0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2200      	movs	r2, #0
 80045d6:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2200      	movs	r2, #0
 80045dc:	671a      	str	r2, [r3, #112]	; 0x70
}
 80045de:	46c0      	nop			; (mov r8, r8)
 80045e0:	46bd      	mov	sp, r7
 80045e2:	b00e      	add	sp, #56	; 0x38
 80045e4:	bd80      	pop	{r7, pc}
 80045e6:	46c0      	nop			; (mov r8, r8)
 80045e8:	fffffedf 	.word	0xfffffedf
 80045ec:	effffffe 	.word	0xeffffffe

080045f0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b084      	sub	sp, #16
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045fc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	225e      	movs	r2, #94	; 0x5e
 8004602:	2100      	movs	r1, #0
 8004604:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2256      	movs	r2, #86	; 0x56
 800460a:	2100      	movs	r1, #0
 800460c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	0018      	movs	r0, r3
 8004612:	f7ff f9a5 	bl	8003960 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004616:	46c0      	nop			; (mov r8, r8)
 8004618:	46bd      	mov	sp, r7
 800461a:	b004      	add	sp, #16
 800461c:	bd80      	pop	{r7, pc}

0800461e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800461e:	b580      	push	{r7, lr}
 8004620:	b086      	sub	sp, #24
 8004622:	af00      	add	r7, sp, #0
 8004624:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004626:	f3ef 8310 	mrs	r3, PRIMASK
 800462a:	60bb      	str	r3, [r7, #8]
  return(result);
 800462c:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800462e:	617b      	str	r3, [r7, #20]
 8004630:	2301      	movs	r3, #1
 8004632:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f383 8810 	msr	PRIMASK, r3
}
 800463a:	46c0      	nop			; (mov r8, r8)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	2140      	movs	r1, #64	; 0x40
 8004648:	438a      	bics	r2, r1
 800464a:	601a      	str	r2, [r3, #0]
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	f383 8810 	msr	PRIMASK, r3
}
 8004656:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2284      	movs	r2, #132	; 0x84
 800465c:	2120      	movs	r1, #32
 800465e:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2200      	movs	r2, #0
 8004664:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	0018      	movs	r0, r3
 800466a:	f7ff f971 	bl	8003950 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800466e:	46c0      	nop			; (mov r8, r8)
 8004670:	46bd      	mov	sp, r7
 8004672:	b006      	add	sp, #24
 8004674:	bd80      	pop	{r7, pc}
	...

08004678 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b090      	sub	sp, #64	; 0x40
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004680:	203e      	movs	r0, #62	; 0x3e
 8004682:	183b      	adds	r3, r7, r0
 8004684:	687a      	ldr	r2, [r7, #4]
 8004686:	2160      	movs	r1, #96	; 0x60
 8004688:	5a52      	ldrh	r2, [r2, r1]
 800468a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2288      	movs	r2, #136	; 0x88
 8004690:	589b      	ldr	r3, [r3, r2]
 8004692:	2b22      	cmp	r3, #34	; 0x22
 8004694:	d000      	beq.n	8004698 <UART_RxISR_8BIT+0x20>
 8004696:	e097      	b.n	80047c8 <UART_RxISR_8BIT+0x150>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800469e:	213c      	movs	r1, #60	; 0x3c
 80046a0:	187b      	adds	r3, r7, r1
 80046a2:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80046a4:	187b      	adds	r3, r7, r1
 80046a6:	881b      	ldrh	r3, [r3, #0]
 80046a8:	b2da      	uxtb	r2, r3
 80046aa:	183b      	adds	r3, r7, r0
 80046ac:	881b      	ldrh	r3, [r3, #0]
 80046ae:	b2d9      	uxtb	r1, r3
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046b4:	400a      	ands	r2, r1
 80046b6:	b2d2      	uxtb	r2, r2
 80046b8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046be:	1c5a      	adds	r2, r3, #1
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	225e      	movs	r2, #94	; 0x5e
 80046c8:	5a9b      	ldrh	r3, [r3, r2]
 80046ca:	b29b      	uxth	r3, r3
 80046cc:	3b01      	subs	r3, #1
 80046ce:	b299      	uxth	r1, r3
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	225e      	movs	r2, #94	; 0x5e
 80046d4:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	225e      	movs	r2, #94	; 0x5e
 80046da:	5a9b      	ldrh	r3, [r3, r2]
 80046dc:	b29b      	uxth	r3, r3
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d000      	beq.n	80046e4 <UART_RxISR_8BIT+0x6c>
 80046e2:	e079      	b.n	80047d8 <UART_RxISR_8BIT+0x160>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046e4:	f3ef 8310 	mrs	r3, PRIMASK
 80046e8:	61bb      	str	r3, [r7, #24]
  return(result);
 80046ea:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80046ec:	63bb      	str	r3, [r7, #56]	; 0x38
 80046ee:	2301      	movs	r3, #1
 80046f0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046f2:	69fb      	ldr	r3, [r7, #28]
 80046f4:	f383 8810 	msr	PRIMASK, r3
}
 80046f8:	46c0      	nop			; (mov r8, r8)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4936      	ldr	r1, [pc, #216]	; (80047e0 <UART_RxISR_8BIT+0x168>)
 8004706:	400a      	ands	r2, r1
 8004708:	601a      	str	r2, [r3, #0]
 800470a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800470c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800470e:	6a3b      	ldr	r3, [r7, #32]
 8004710:	f383 8810 	msr	PRIMASK, r3
}
 8004714:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004716:	f3ef 8310 	mrs	r3, PRIMASK
 800471a:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800471c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800471e:	637b      	str	r3, [r7, #52]	; 0x34
 8004720:	2301      	movs	r3, #1
 8004722:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004726:	f383 8810 	msr	PRIMASK, r3
}
 800472a:	46c0      	nop			; (mov r8, r8)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	689a      	ldr	r2, [r3, #8]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	2101      	movs	r1, #1
 8004738:	438a      	bics	r2, r1
 800473a:	609a      	str	r2, [r3, #8]
 800473c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800473e:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004742:	f383 8810 	msr	PRIMASK, r3
}
 8004746:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2288      	movs	r2, #136	; 0x88
 800474c:	2120      	movs	r1, #32
 800474e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2200      	movs	r2, #0
 8004754:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800475a:	2b01      	cmp	r3, #1
 800475c:	d12f      	bne.n	80047be <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2200      	movs	r2, #0
 8004762:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004764:	f3ef 8310 	mrs	r3, PRIMASK
 8004768:	60fb      	str	r3, [r7, #12]
  return(result);
 800476a:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800476c:	633b      	str	r3, [r7, #48]	; 0x30
 800476e:	2301      	movs	r3, #1
 8004770:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	f383 8810 	msr	PRIMASK, r3
}
 8004778:	46c0      	nop			; (mov r8, r8)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	681a      	ldr	r2, [r3, #0]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	2110      	movs	r1, #16
 8004786:	438a      	bics	r2, r1
 8004788:	601a      	str	r2, [r3, #0]
 800478a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800478c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	f383 8810 	msr	PRIMASK, r3
}
 8004794:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	69db      	ldr	r3, [r3, #28]
 800479c:	2210      	movs	r2, #16
 800479e:	4013      	ands	r3, r2
 80047a0:	2b10      	cmp	r3, #16
 80047a2:	d103      	bne.n	80047ac <UART_RxISR_8BIT+0x134>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	2210      	movs	r2, #16
 80047aa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	225c      	movs	r2, #92	; 0x5c
 80047b0:	5a9a      	ldrh	r2, [r3, r2]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	0011      	movs	r1, r2
 80047b6:	0018      	movs	r0, r3
 80047b8:	f7ff f8da 	bl	8003970 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80047bc:	e00c      	b.n	80047d8 <UART_RxISR_8BIT+0x160>
        HAL_UART_RxCpltCallback(huart);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	0018      	movs	r0, r3
 80047c2:	f7fc fe49 	bl	8001458 <HAL_UART_RxCpltCallback>
}
 80047c6:	e007      	b.n	80047d8 <UART_RxISR_8BIT+0x160>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	699a      	ldr	r2, [r3, #24]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	2108      	movs	r1, #8
 80047d4:	430a      	orrs	r2, r1
 80047d6:	619a      	str	r2, [r3, #24]
}
 80047d8:	46c0      	nop			; (mov r8, r8)
 80047da:	46bd      	mov	sp, r7
 80047dc:	b010      	add	sp, #64	; 0x40
 80047de:	bd80      	pop	{r7, pc}
 80047e0:	fffffedf 	.word	0xfffffedf

080047e4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b090      	sub	sp, #64	; 0x40
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80047ec:	203e      	movs	r0, #62	; 0x3e
 80047ee:	183b      	adds	r3, r7, r0
 80047f0:	687a      	ldr	r2, [r7, #4]
 80047f2:	2160      	movs	r1, #96	; 0x60
 80047f4:	5a52      	ldrh	r2, [r2, r1]
 80047f6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2288      	movs	r2, #136	; 0x88
 80047fc:	589b      	ldr	r3, [r3, r2]
 80047fe:	2b22      	cmp	r3, #34	; 0x22
 8004800:	d000      	beq.n	8004804 <UART_RxISR_16BIT+0x20>
 8004802:	e097      	b.n	8004934 <UART_RxISR_16BIT+0x150>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800480a:	213c      	movs	r1, #60	; 0x3c
 800480c:	187b      	adds	r3, r7, r1
 800480e:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004814:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 8004816:	187b      	adds	r3, r7, r1
 8004818:	183a      	adds	r2, r7, r0
 800481a:	881b      	ldrh	r3, [r3, #0]
 800481c:	8812      	ldrh	r2, [r2, #0]
 800481e:	4013      	ands	r3, r2
 8004820:	b29a      	uxth	r2, r3
 8004822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004824:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800482a:	1c9a      	adds	r2, r3, #2
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	225e      	movs	r2, #94	; 0x5e
 8004834:	5a9b      	ldrh	r3, [r3, r2]
 8004836:	b29b      	uxth	r3, r3
 8004838:	3b01      	subs	r3, #1
 800483a:	b299      	uxth	r1, r3
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	225e      	movs	r2, #94	; 0x5e
 8004840:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	225e      	movs	r2, #94	; 0x5e
 8004846:	5a9b      	ldrh	r3, [r3, r2]
 8004848:	b29b      	uxth	r3, r3
 800484a:	2b00      	cmp	r3, #0
 800484c:	d000      	beq.n	8004850 <UART_RxISR_16BIT+0x6c>
 800484e:	e079      	b.n	8004944 <UART_RxISR_16BIT+0x160>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004850:	f3ef 8310 	mrs	r3, PRIMASK
 8004854:	617b      	str	r3, [r7, #20]
  return(result);
 8004856:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004858:	637b      	str	r3, [r7, #52]	; 0x34
 800485a:	2301      	movs	r3, #1
 800485c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800485e:	69bb      	ldr	r3, [r7, #24]
 8004860:	f383 8810 	msr	PRIMASK, r3
}
 8004864:	46c0      	nop			; (mov r8, r8)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4936      	ldr	r1, [pc, #216]	; (800494c <UART_RxISR_16BIT+0x168>)
 8004872:	400a      	ands	r2, r1
 8004874:	601a      	str	r2, [r3, #0]
 8004876:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004878:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800487a:	69fb      	ldr	r3, [r7, #28]
 800487c:	f383 8810 	msr	PRIMASK, r3
}
 8004880:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004882:	f3ef 8310 	mrs	r3, PRIMASK
 8004886:	623b      	str	r3, [r7, #32]
  return(result);
 8004888:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800488a:	633b      	str	r3, [r7, #48]	; 0x30
 800488c:	2301      	movs	r3, #1
 800488e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004892:	f383 8810 	msr	PRIMASK, r3
}
 8004896:	46c0      	nop			; (mov r8, r8)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	689a      	ldr	r2, [r3, #8]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	2101      	movs	r1, #1
 80048a4:	438a      	bics	r2, r1
 80048a6:	609a      	str	r2, [r3, #8]
 80048a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048aa:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ae:	f383 8810 	msr	PRIMASK, r3
}
 80048b2:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2288      	movs	r2, #136	; 0x88
 80048b8:	2120      	movs	r1, #32
 80048ba:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2200      	movs	r2, #0
 80048c0:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048c6:	2b01      	cmp	r3, #1
 80048c8:	d12f      	bne.n	800492a <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2200      	movs	r2, #0
 80048ce:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048d0:	f3ef 8310 	mrs	r3, PRIMASK
 80048d4:	60bb      	str	r3, [r7, #8]
  return(result);
 80048d6:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048da:	2301      	movs	r3, #1
 80048dc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	f383 8810 	msr	PRIMASK, r3
}
 80048e4:	46c0      	nop			; (mov r8, r8)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	2110      	movs	r1, #16
 80048f2:	438a      	bics	r2, r1
 80048f4:	601a      	str	r2, [r3, #0]
 80048f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048f8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	f383 8810 	msr	PRIMASK, r3
}
 8004900:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	69db      	ldr	r3, [r3, #28]
 8004908:	2210      	movs	r2, #16
 800490a:	4013      	ands	r3, r2
 800490c:	2b10      	cmp	r3, #16
 800490e:	d103      	bne.n	8004918 <UART_RxISR_16BIT+0x134>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	2210      	movs	r2, #16
 8004916:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	225c      	movs	r2, #92	; 0x5c
 800491c:	5a9a      	ldrh	r2, [r3, r2]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	0011      	movs	r1, r2
 8004922:	0018      	movs	r0, r3
 8004924:	f7ff f824 	bl	8003970 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004928:	e00c      	b.n	8004944 <UART_RxISR_16BIT+0x160>
        HAL_UART_RxCpltCallback(huart);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	0018      	movs	r0, r3
 800492e:	f7fc fd93 	bl	8001458 <HAL_UART_RxCpltCallback>
}
 8004932:	e007      	b.n	8004944 <UART_RxISR_16BIT+0x160>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	699a      	ldr	r2, [r3, #24]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	2108      	movs	r1, #8
 8004940:	430a      	orrs	r2, r1
 8004942:	619a      	str	r2, [r3, #24]
}
 8004944:	46c0      	nop			; (mov r8, r8)
 8004946:	46bd      	mov	sp, r7
 8004948:	b010      	add	sp, #64	; 0x40
 800494a:	bd80      	pop	{r7, pc}
 800494c:	fffffedf 	.word	0xfffffedf

08004950 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b09c      	sub	sp, #112	; 0x70
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8004958:	236a      	movs	r3, #106	; 0x6a
 800495a:	18fb      	adds	r3, r7, r3
 800495c:	687a      	ldr	r2, [r7, #4]
 800495e:	2160      	movs	r1, #96	; 0x60
 8004960:	5a52      	ldrh	r2, [r2, r1]
 8004962:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	69db      	ldr	r3, [r3, #28]
 800496a:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	663b      	str	r3, [r7, #96]	; 0x60

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2288      	movs	r2, #136	; 0x88
 8004980:	589b      	ldr	r3, [r3, r2]
 8004982:	2b22      	cmp	r3, #34	; 0x22
 8004984:	d000      	beq.n	8004988 <UART_RxISR_8BIT_FIFOEN+0x38>
 8004986:	e141      	b.n	8004c0c <UART_RxISR_8BIT_FIFOEN+0x2bc>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8004988:	235e      	movs	r3, #94	; 0x5e
 800498a:	18fb      	adds	r3, r7, r3
 800498c:	687a      	ldr	r2, [r7, #4]
 800498e:	2168      	movs	r1, #104	; 0x68
 8004990:	5a52      	ldrh	r2, [r2, r1]
 8004992:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004994:	e0e8      	b.n	8004b68 <UART_RxISR_8BIT_FIFOEN+0x218>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800499c:	215c      	movs	r1, #92	; 0x5c
 800499e:	187b      	adds	r3, r7, r1
 80049a0:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80049a2:	187b      	adds	r3, r7, r1
 80049a4:	881b      	ldrh	r3, [r3, #0]
 80049a6:	b2da      	uxtb	r2, r3
 80049a8:	236a      	movs	r3, #106	; 0x6a
 80049aa:	18fb      	adds	r3, r7, r3
 80049ac:	881b      	ldrh	r3, [r3, #0]
 80049ae:	b2d9      	uxtb	r1, r3
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049b4:	400a      	ands	r2, r1
 80049b6:	b2d2      	uxtb	r2, r2
 80049b8:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049be:	1c5a      	adds	r2, r3, #1
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	225e      	movs	r2, #94	; 0x5e
 80049c8:	5a9b      	ldrh	r3, [r3, r2]
 80049ca:	b29b      	uxth	r3, r3
 80049cc:	3b01      	subs	r3, #1
 80049ce:	b299      	uxth	r1, r3
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	225e      	movs	r2, #94	; 0x5e
 80049d4:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	69db      	ldr	r3, [r3, #28]
 80049dc:	66fb      	str	r3, [r7, #108]	; 0x6c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80049de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049e0:	2207      	movs	r2, #7
 80049e2:	4013      	ands	r3, r2
 80049e4:	d049      	beq.n	8004a7a <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80049e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049e8:	2201      	movs	r2, #1
 80049ea:	4013      	ands	r3, r2
 80049ec:	d010      	beq.n	8004a10 <UART_RxISR_8BIT_FIFOEN+0xc0>
 80049ee:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80049f0:	2380      	movs	r3, #128	; 0x80
 80049f2:	005b      	lsls	r3, r3, #1
 80049f4:	4013      	ands	r3, r2
 80049f6:	d00b      	beq.n	8004a10 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	2201      	movs	r2, #1
 80049fe:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	228c      	movs	r2, #140	; 0x8c
 8004a04:	589b      	ldr	r3, [r3, r2]
 8004a06:	2201      	movs	r2, #1
 8004a08:	431a      	orrs	r2, r3
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	218c      	movs	r1, #140	; 0x8c
 8004a0e:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004a10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a12:	2202      	movs	r2, #2
 8004a14:	4013      	ands	r3, r2
 8004a16:	d00f      	beq.n	8004a38 <UART_RxISR_8BIT_FIFOEN+0xe8>
 8004a18:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	4013      	ands	r3, r2
 8004a1e:	d00b      	beq.n	8004a38 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	2202      	movs	r2, #2
 8004a26:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	228c      	movs	r2, #140	; 0x8c
 8004a2c:	589b      	ldr	r3, [r3, r2]
 8004a2e:	2204      	movs	r2, #4
 8004a30:	431a      	orrs	r2, r3
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	218c      	movs	r1, #140	; 0x8c
 8004a36:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004a38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a3a:	2204      	movs	r2, #4
 8004a3c:	4013      	ands	r3, r2
 8004a3e:	d00f      	beq.n	8004a60 <UART_RxISR_8BIT_FIFOEN+0x110>
 8004a40:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a42:	2201      	movs	r2, #1
 8004a44:	4013      	ands	r3, r2
 8004a46:	d00b      	beq.n	8004a60 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	2204      	movs	r2, #4
 8004a4e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	228c      	movs	r2, #140	; 0x8c
 8004a54:	589b      	ldr	r3, [r3, r2]
 8004a56:	2202      	movs	r2, #2
 8004a58:	431a      	orrs	r2, r3
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	218c      	movs	r1, #140	; 0x8c
 8004a5e:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	228c      	movs	r2, #140	; 0x8c
 8004a64:	589b      	ldr	r3, [r3, r2]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d007      	beq.n	8004a7a <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	0018      	movs	r0, r3
 8004a6e:	f7fe ff77 	bl	8003960 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	228c      	movs	r2, #140	; 0x8c
 8004a76:	2100      	movs	r1, #0
 8004a78:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	225e      	movs	r2, #94	; 0x5e
 8004a7e:	5a9b      	ldrh	r3, [r3, r2]
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d170      	bne.n	8004b68 <UART_RxISR_8BIT_FIFOEN+0x218>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a86:	f3ef 8310 	mrs	r3, PRIMASK
 8004a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8004a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a8e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004a90:	2301      	movs	r3, #1
 8004a92:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a96:	f383 8810 	msr	PRIMASK, r3
}
 8004a9a:	46c0      	nop			; (mov r8, r8)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	495f      	ldr	r1, [pc, #380]	; (8004c24 <UART_RxISR_8BIT_FIFOEN+0x2d4>)
 8004aa8:	400a      	ands	r2, r1
 8004aaa:	601a      	str	r2, [r3, #0]
 8004aac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004aae:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ab0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ab2:	f383 8810 	msr	PRIMASK, r3
}
 8004ab6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ab8:	f3ef 8310 	mrs	r3, PRIMASK
 8004abc:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 8004abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004ac0:	657b      	str	r3, [r7, #84]	; 0x54
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ac6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ac8:	f383 8810 	msr	PRIMASK, r3
}
 8004acc:	46c0      	nop			; (mov r8, r8)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	689a      	ldr	r2, [r3, #8]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4953      	ldr	r1, [pc, #332]	; (8004c28 <UART_RxISR_8BIT_FIFOEN+0x2d8>)
 8004ada:	400a      	ands	r2, r1
 8004adc:	609a      	str	r2, [r3, #8]
 8004ade:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ae0:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ae2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ae4:	f383 8810 	msr	PRIMASK, r3
}
 8004ae8:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2288      	movs	r2, #136	; 0x88
 8004aee:	2120      	movs	r1, #32
 8004af0:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2200      	movs	r2, #0
 8004af6:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d12f      	bne.n	8004b60 <UART_RxISR_8BIT_FIFOEN+0x210>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2200      	movs	r2, #0
 8004b04:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b06:	f3ef 8310 	mrs	r3, PRIMASK
 8004b0a:	623b      	str	r3, [r7, #32]
  return(result);
 8004b0c:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b0e:	653b      	str	r3, [r7, #80]	; 0x50
 8004b10:	2301      	movs	r3, #1
 8004b12:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b16:	f383 8810 	msr	PRIMASK, r3
}
 8004b1a:	46c0      	nop			; (mov r8, r8)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	2110      	movs	r1, #16
 8004b28:	438a      	bics	r2, r1
 8004b2a:	601a      	str	r2, [r3, #0]
 8004b2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b2e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b32:	f383 8810 	msr	PRIMASK, r3
}
 8004b36:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	69db      	ldr	r3, [r3, #28]
 8004b3e:	2210      	movs	r2, #16
 8004b40:	4013      	ands	r3, r2
 8004b42:	2b10      	cmp	r3, #16
 8004b44:	d103      	bne.n	8004b4e <UART_RxISR_8BIT_FIFOEN+0x1fe>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	2210      	movs	r2, #16
 8004b4c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	225c      	movs	r2, #92	; 0x5c
 8004b52:	5a9a      	ldrh	r2, [r3, r2]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	0011      	movs	r1, r2
 8004b58:	0018      	movs	r0, r3
 8004b5a:	f7fe ff09 	bl	8003970 <HAL_UARTEx_RxEventCallback>
 8004b5e:	e003      	b.n	8004b68 <UART_RxISR_8BIT_FIFOEN+0x218>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	0018      	movs	r0, r3
 8004b64:	f7fc fc78 	bl	8001458 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004b68:	235e      	movs	r3, #94	; 0x5e
 8004b6a:	18fb      	adds	r3, r7, r3
 8004b6c:	881b      	ldrh	r3, [r3, #0]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d004      	beq.n	8004b7c <UART_RxISR_8BIT_FIFOEN+0x22c>
 8004b72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b74:	2220      	movs	r2, #32
 8004b76:	4013      	ands	r3, r2
 8004b78:	d000      	beq.n	8004b7c <UART_RxISR_8BIT_FIFOEN+0x22c>
 8004b7a:	e70c      	b.n	8004996 <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8004b7c:	204e      	movs	r0, #78	; 0x4e
 8004b7e:	183b      	adds	r3, r7, r0
 8004b80:	687a      	ldr	r2, [r7, #4]
 8004b82:	215e      	movs	r1, #94	; 0x5e
 8004b84:	5a52      	ldrh	r2, [r2, r1]
 8004b86:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004b88:	0001      	movs	r1, r0
 8004b8a:	187b      	adds	r3, r7, r1
 8004b8c:	881b      	ldrh	r3, [r3, #0]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d044      	beq.n	8004c1c <UART_RxISR_8BIT_FIFOEN+0x2cc>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2268      	movs	r2, #104	; 0x68
 8004b96:	5a9b      	ldrh	r3, [r3, r2]
 8004b98:	187a      	adds	r2, r7, r1
 8004b9a:	8812      	ldrh	r2, [r2, #0]
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d23d      	bcs.n	8004c1c <UART_RxISR_8BIT_FIFOEN+0x2cc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ba0:	f3ef 8310 	mrs	r3, PRIMASK
 8004ba4:	60bb      	str	r3, [r7, #8]
  return(result);
 8004ba6:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004ba8:	64bb      	str	r3, [r7, #72]	; 0x48
 8004baa:	2301      	movs	r3, #1
 8004bac:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	f383 8810 	msr	PRIMASK, r3
}
 8004bb4:	46c0      	nop			; (mov r8, r8)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	689a      	ldr	r2, [r3, #8]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	491a      	ldr	r1, [pc, #104]	; (8004c2c <UART_RxISR_8BIT_FIFOEN+0x2dc>)
 8004bc2:	400a      	ands	r2, r1
 8004bc4:	609a      	str	r2, [r3, #8]
 8004bc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bc8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	f383 8810 	msr	PRIMASK, r3
}
 8004bd0:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	4a16      	ldr	r2, [pc, #88]	; (8004c30 <UART_RxISR_8BIT_FIFOEN+0x2e0>)
 8004bd6:	671a      	str	r2, [r3, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bd8:	f3ef 8310 	mrs	r3, PRIMASK
 8004bdc:	617b      	str	r3, [r7, #20]
  return(result);
 8004bde:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004be0:	647b      	str	r3, [r7, #68]	; 0x44
 8004be2:	2301      	movs	r3, #1
 8004be4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004be6:	69bb      	ldr	r3, [r7, #24]
 8004be8:	f383 8810 	msr	PRIMASK, r3
}
 8004bec:	46c0      	nop			; (mov r8, r8)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	681a      	ldr	r2, [r3, #0]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	2120      	movs	r1, #32
 8004bfa:	430a      	orrs	r2, r1
 8004bfc:	601a      	str	r2, [r3, #0]
 8004bfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c00:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c02:	69fb      	ldr	r3, [r7, #28]
 8004c04:	f383 8810 	msr	PRIMASK, r3
}
 8004c08:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004c0a:	e007      	b.n	8004c1c <UART_RxISR_8BIT_FIFOEN+0x2cc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	699a      	ldr	r2, [r3, #24]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	2108      	movs	r1, #8
 8004c18:	430a      	orrs	r2, r1
 8004c1a:	619a      	str	r2, [r3, #24]
}
 8004c1c:	46c0      	nop			; (mov r8, r8)
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	b01c      	add	sp, #112	; 0x70
 8004c22:	bd80      	pop	{r7, pc}
 8004c24:	fffffeff 	.word	0xfffffeff
 8004c28:	effffffe 	.word	0xeffffffe
 8004c2c:	efffffff 	.word	0xefffffff
 8004c30:	08004679 	.word	0x08004679

08004c34 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b09e      	sub	sp, #120	; 0x78
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8004c3c:	2372      	movs	r3, #114	; 0x72
 8004c3e:	18fb      	adds	r3, r7, r3
 8004c40:	687a      	ldr	r2, [r7, #4]
 8004c42:	2160      	movs	r1, #96	; 0x60
 8004c44:	5a52      	ldrh	r2, [r2, r1]
 8004c46:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	69db      	ldr	r3, [r3, #28]
 8004c4e:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2288      	movs	r2, #136	; 0x88
 8004c64:	589b      	ldr	r3, [r3, r2]
 8004c66:	2b22      	cmp	r3, #34	; 0x22
 8004c68:	d000      	beq.n	8004c6c <UART_RxISR_16BIT_FIFOEN+0x38>
 8004c6a:	e141      	b.n	8004ef0 <UART_RxISR_16BIT_FIFOEN+0x2bc>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8004c6c:	2366      	movs	r3, #102	; 0x66
 8004c6e:	18fb      	adds	r3, r7, r3
 8004c70:	687a      	ldr	r2, [r7, #4]
 8004c72:	2168      	movs	r1, #104	; 0x68
 8004c74:	5a52      	ldrh	r2, [r2, r1]
 8004c76:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004c78:	e0e8      	b.n	8004e4c <UART_RxISR_16BIT_FIFOEN+0x218>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c80:	2164      	movs	r1, #100	; 0x64
 8004c82:	187b      	adds	r3, r7, r1
 8004c84:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c8a:	663b      	str	r3, [r7, #96]	; 0x60
      *tmp = (uint16_t)(uhdata & uhMask);
 8004c8c:	187b      	adds	r3, r7, r1
 8004c8e:	2272      	movs	r2, #114	; 0x72
 8004c90:	18ba      	adds	r2, r7, r2
 8004c92:	881b      	ldrh	r3, [r3, #0]
 8004c94:	8812      	ldrh	r2, [r2, #0]
 8004c96:	4013      	ands	r3, r2
 8004c98:	b29a      	uxth	r2, r3
 8004c9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c9c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ca2:	1c9a      	adds	r2, r3, #2
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	225e      	movs	r2, #94	; 0x5e
 8004cac:	5a9b      	ldrh	r3, [r3, r2]
 8004cae:	b29b      	uxth	r3, r3
 8004cb0:	3b01      	subs	r3, #1
 8004cb2:	b299      	uxth	r1, r3
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	225e      	movs	r2, #94	; 0x5e
 8004cb8:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	69db      	ldr	r3, [r3, #28]
 8004cc0:	677b      	str	r3, [r7, #116]	; 0x74

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8004cc2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004cc4:	2207      	movs	r2, #7
 8004cc6:	4013      	ands	r3, r2
 8004cc8:	d049      	beq.n	8004d5e <UART_RxISR_16BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004cca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ccc:	2201      	movs	r2, #1
 8004cce:	4013      	ands	r3, r2
 8004cd0:	d010      	beq.n	8004cf4 <UART_RxISR_16BIT_FIFOEN+0xc0>
 8004cd2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004cd4:	2380      	movs	r3, #128	; 0x80
 8004cd6:	005b      	lsls	r3, r3, #1
 8004cd8:	4013      	ands	r3, r2
 8004cda:	d00b      	beq.n	8004cf4 <UART_RxISR_16BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	228c      	movs	r2, #140	; 0x8c
 8004ce8:	589b      	ldr	r3, [r3, r2]
 8004cea:	2201      	movs	r2, #1
 8004cec:	431a      	orrs	r2, r3
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	218c      	movs	r1, #140	; 0x8c
 8004cf2:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004cf4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004cf6:	2202      	movs	r2, #2
 8004cf8:	4013      	ands	r3, r2
 8004cfa:	d00f      	beq.n	8004d1c <UART_RxISR_16BIT_FIFOEN+0xe8>
 8004cfc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004cfe:	2201      	movs	r2, #1
 8004d00:	4013      	ands	r3, r2
 8004d02:	d00b      	beq.n	8004d1c <UART_RxISR_16BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	2202      	movs	r2, #2
 8004d0a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	228c      	movs	r2, #140	; 0x8c
 8004d10:	589b      	ldr	r3, [r3, r2]
 8004d12:	2204      	movs	r2, #4
 8004d14:	431a      	orrs	r2, r3
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	218c      	movs	r1, #140	; 0x8c
 8004d1a:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004d1c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d1e:	2204      	movs	r2, #4
 8004d20:	4013      	ands	r3, r2
 8004d22:	d00f      	beq.n	8004d44 <UART_RxISR_16BIT_FIFOEN+0x110>
 8004d24:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004d26:	2201      	movs	r2, #1
 8004d28:	4013      	ands	r3, r2
 8004d2a:	d00b      	beq.n	8004d44 <UART_RxISR_16BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	2204      	movs	r2, #4
 8004d32:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	228c      	movs	r2, #140	; 0x8c
 8004d38:	589b      	ldr	r3, [r3, r2]
 8004d3a:	2202      	movs	r2, #2
 8004d3c:	431a      	orrs	r2, r3
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	218c      	movs	r1, #140	; 0x8c
 8004d42:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	228c      	movs	r2, #140	; 0x8c
 8004d48:	589b      	ldr	r3, [r3, r2]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d007      	beq.n	8004d5e <UART_RxISR_16BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	0018      	movs	r0, r3
 8004d52:	f7fe fe05 	bl	8003960 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	228c      	movs	r2, #140	; 0x8c
 8004d5a:	2100      	movs	r1, #0
 8004d5c:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	225e      	movs	r2, #94	; 0x5e
 8004d62:	5a9b      	ldrh	r3, [r3, r2]
 8004d64:	b29b      	uxth	r3, r3
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d170      	bne.n	8004e4c <UART_RxISR_16BIT_FIFOEN+0x218>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d6a:	f3ef 8310 	mrs	r3, PRIMASK
 8004d6e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8004d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d72:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d74:	2301      	movs	r3, #1
 8004d76:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d7a:	f383 8810 	msr	PRIMASK, r3
}
 8004d7e:	46c0      	nop			; (mov r8, r8)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	495f      	ldr	r1, [pc, #380]	; (8004f08 <UART_RxISR_16BIT_FIFOEN+0x2d4>)
 8004d8c:	400a      	ands	r2, r1
 8004d8e:	601a      	str	r2, [r3, #0]
 8004d90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d92:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d96:	f383 8810 	msr	PRIMASK, r3
}
 8004d9a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d9c:	f3ef 8310 	mrs	r3, PRIMASK
 8004da0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8004da2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004da4:	65bb      	str	r3, [r7, #88]	; 0x58
 8004da6:	2301      	movs	r3, #1
 8004da8:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004daa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004dac:	f383 8810 	msr	PRIMASK, r3
}
 8004db0:	46c0      	nop			; (mov r8, r8)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	689a      	ldr	r2, [r3, #8]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4953      	ldr	r1, [pc, #332]	; (8004f0c <UART_RxISR_16BIT_FIFOEN+0x2d8>)
 8004dbe:	400a      	ands	r2, r1
 8004dc0:	609a      	str	r2, [r3, #8]
 8004dc2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004dc4:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004dc8:	f383 8810 	msr	PRIMASK, r3
}
 8004dcc:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2288      	movs	r2, #136	; 0x88
 8004dd2:	2120      	movs	r1, #32
 8004dd4:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004de0:	2b01      	cmp	r3, #1
 8004de2:	d12f      	bne.n	8004e44 <UART_RxISR_16BIT_FIFOEN+0x210>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2200      	movs	r2, #0
 8004de8:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004dea:	f3ef 8310 	mrs	r3, PRIMASK
 8004dee:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004df2:	657b      	str	r3, [r7, #84]	; 0x54
 8004df4:	2301      	movs	r3, #1
 8004df6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dfa:	f383 8810 	msr	PRIMASK, r3
}
 8004dfe:	46c0      	nop			; (mov r8, r8)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	2110      	movs	r1, #16
 8004e0c:	438a      	bics	r2, r1
 8004e0e:	601a      	str	r2, [r3, #0]
 8004e10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e12:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e16:	f383 8810 	msr	PRIMASK, r3
}
 8004e1a:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	69db      	ldr	r3, [r3, #28]
 8004e22:	2210      	movs	r2, #16
 8004e24:	4013      	ands	r3, r2
 8004e26:	2b10      	cmp	r3, #16
 8004e28:	d103      	bne.n	8004e32 <UART_RxISR_16BIT_FIFOEN+0x1fe>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	2210      	movs	r2, #16
 8004e30:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	225c      	movs	r2, #92	; 0x5c
 8004e36:	5a9a      	ldrh	r2, [r3, r2]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	0011      	movs	r1, r2
 8004e3c:	0018      	movs	r0, r3
 8004e3e:	f7fe fd97 	bl	8003970 <HAL_UARTEx_RxEventCallback>
 8004e42:	e003      	b.n	8004e4c <UART_RxISR_16BIT_FIFOEN+0x218>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	0018      	movs	r0, r3
 8004e48:	f7fc fb06 	bl	8001458 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004e4c:	2366      	movs	r3, #102	; 0x66
 8004e4e:	18fb      	adds	r3, r7, r3
 8004e50:	881b      	ldrh	r3, [r3, #0]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d004      	beq.n	8004e60 <UART_RxISR_16BIT_FIFOEN+0x22c>
 8004e56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e58:	2220      	movs	r2, #32
 8004e5a:	4013      	ands	r3, r2
 8004e5c:	d000      	beq.n	8004e60 <UART_RxISR_16BIT_FIFOEN+0x22c>
 8004e5e:	e70c      	b.n	8004c7a <UART_RxISR_16BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8004e60:	2052      	movs	r0, #82	; 0x52
 8004e62:	183b      	adds	r3, r7, r0
 8004e64:	687a      	ldr	r2, [r7, #4]
 8004e66:	215e      	movs	r1, #94	; 0x5e
 8004e68:	5a52      	ldrh	r2, [r2, r1]
 8004e6a:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004e6c:	0001      	movs	r1, r0
 8004e6e:	187b      	adds	r3, r7, r1
 8004e70:	881b      	ldrh	r3, [r3, #0]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d044      	beq.n	8004f00 <UART_RxISR_16BIT_FIFOEN+0x2cc>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2268      	movs	r2, #104	; 0x68
 8004e7a:	5a9b      	ldrh	r3, [r3, r2]
 8004e7c:	187a      	adds	r2, r7, r1
 8004e7e:	8812      	ldrh	r2, [r2, #0]
 8004e80:	429a      	cmp	r2, r3
 8004e82:	d23d      	bcs.n	8004f00 <UART_RxISR_16BIT_FIFOEN+0x2cc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e84:	f3ef 8310 	mrs	r3, PRIMASK
 8004e88:	60fb      	str	r3, [r7, #12]
  return(result);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004e8c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e8e:	2301      	movs	r3, #1
 8004e90:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	f383 8810 	msr	PRIMASK, r3
}
 8004e98:	46c0      	nop			; (mov r8, r8)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	689a      	ldr	r2, [r3, #8]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	491a      	ldr	r1, [pc, #104]	; (8004f10 <UART_RxISR_16BIT_FIFOEN+0x2dc>)
 8004ea6:	400a      	ands	r2, r1
 8004ea8:	609a      	str	r2, [r3, #8]
 8004eaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004eac:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	f383 8810 	msr	PRIMASK, r3
}
 8004eb4:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	4a16      	ldr	r2, [pc, #88]	; (8004f14 <UART_RxISR_16BIT_FIFOEN+0x2e0>)
 8004eba:	671a      	str	r2, [r3, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ebc:	f3ef 8310 	mrs	r3, PRIMASK
 8004ec0:	61bb      	str	r3, [r7, #24]
  return(result);
 8004ec2:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004ec4:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004eca:	69fb      	ldr	r3, [r7, #28]
 8004ecc:	f383 8810 	msr	PRIMASK, r3
}
 8004ed0:	46c0      	nop			; (mov r8, r8)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	2120      	movs	r1, #32
 8004ede:	430a      	orrs	r2, r1
 8004ee0:	601a      	str	r2, [r3, #0]
 8004ee2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ee4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ee6:	6a3b      	ldr	r3, [r7, #32]
 8004ee8:	f383 8810 	msr	PRIMASK, r3
}
 8004eec:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004eee:	e007      	b.n	8004f00 <UART_RxISR_16BIT_FIFOEN+0x2cc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	699a      	ldr	r2, [r3, #24]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	2108      	movs	r1, #8
 8004efc:	430a      	orrs	r2, r1
 8004efe:	619a      	str	r2, [r3, #24]
}
 8004f00:	46c0      	nop			; (mov r8, r8)
 8004f02:	46bd      	mov	sp, r7
 8004f04:	b01e      	add	sp, #120	; 0x78
 8004f06:	bd80      	pop	{r7, pc}
 8004f08:	fffffeff 	.word	0xfffffeff
 8004f0c:	effffffe 	.word	0xeffffffe
 8004f10:	efffffff 	.word	0xefffffff
 8004f14:	080047e5 	.word	0x080047e5

08004f18 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b082      	sub	sp, #8
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004f20:	46c0      	nop			; (mov r8, r8)
 8004f22:	46bd      	mov	sp, r7
 8004f24:	b002      	add	sp, #8
 8004f26:	bd80      	pop	{r7, pc}

08004f28 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b082      	sub	sp, #8
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004f30:	46c0      	nop			; (mov r8, r8)
 8004f32:	46bd      	mov	sp, r7
 8004f34:	b002      	add	sp, #8
 8004f36:	bd80      	pop	{r7, pc}

08004f38 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b082      	sub	sp, #8
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004f40:	46c0      	nop			; (mov r8, r8)
 8004f42:	46bd      	mov	sp, r7
 8004f44:	b002      	add	sp, #8
 8004f46:	bd80      	pop	{r7, pc}

08004f48 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b084      	sub	sp, #16
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2280      	movs	r2, #128	; 0x80
 8004f54:	5c9b      	ldrb	r3, [r3, r2]
 8004f56:	2b01      	cmp	r3, #1
 8004f58:	d101      	bne.n	8004f5e <HAL_UARTEx_DisableFifoMode+0x16>
 8004f5a:	2302      	movs	r3, #2
 8004f5c:	e027      	b.n	8004fae <HAL_UARTEx_DisableFifoMode+0x66>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2280      	movs	r2, #128	; 0x80
 8004f62:	2101      	movs	r1, #1
 8004f64:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2284      	movs	r2, #132	; 0x84
 8004f6a:	2124      	movs	r1, #36	; 0x24
 8004f6c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	2101      	movs	r1, #1
 8004f82:	438a      	bics	r2, r1
 8004f84:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	4a0b      	ldr	r2, [pc, #44]	; (8004fb8 <HAL_UARTEx_DisableFifoMode+0x70>)
 8004f8a:	4013      	ands	r3, r2
 8004f8c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2200      	movs	r2, #0
 8004f92:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	68fa      	ldr	r2, [r7, #12]
 8004f9a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2284      	movs	r2, #132	; 0x84
 8004fa0:	2120      	movs	r1, #32
 8004fa2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2280      	movs	r2, #128	; 0x80
 8004fa8:	2100      	movs	r1, #0
 8004faa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004fac:	2300      	movs	r3, #0
}
 8004fae:	0018      	movs	r0, r3
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	b004      	add	sp, #16
 8004fb4:	bd80      	pop	{r7, pc}
 8004fb6:	46c0      	nop			; (mov r8, r8)
 8004fb8:	dfffffff 	.word	0xdfffffff

08004fbc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b084      	sub	sp, #16
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
 8004fc4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2280      	movs	r2, #128	; 0x80
 8004fca:	5c9b      	ldrb	r3, [r3, r2]
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	d101      	bne.n	8004fd4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004fd0:	2302      	movs	r3, #2
 8004fd2:	e02e      	b.n	8005032 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2280      	movs	r2, #128	; 0x80
 8004fd8:	2101      	movs	r1, #1
 8004fda:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2284      	movs	r2, #132	; 0x84
 8004fe0:	2124      	movs	r1, #36	; 0x24
 8004fe2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	681a      	ldr	r2, [r3, #0]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	2101      	movs	r1, #1
 8004ff8:	438a      	bics	r2, r1
 8004ffa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	00db      	lsls	r3, r3, #3
 8005004:	08d9      	lsrs	r1, r3, #3
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	683a      	ldr	r2, [r7, #0]
 800500c:	430a      	orrs	r2, r1
 800500e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	0018      	movs	r0, r3
 8005014:	f000 f854 	bl	80050c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	68fa      	ldr	r2, [r7, #12]
 800501e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2284      	movs	r2, #132	; 0x84
 8005024:	2120      	movs	r1, #32
 8005026:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2280      	movs	r2, #128	; 0x80
 800502c:	2100      	movs	r1, #0
 800502e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005030:	2300      	movs	r3, #0
}
 8005032:	0018      	movs	r0, r3
 8005034:	46bd      	mov	sp, r7
 8005036:	b004      	add	sp, #16
 8005038:	bd80      	pop	{r7, pc}
	...

0800503c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b084      	sub	sp, #16
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
 8005044:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2280      	movs	r2, #128	; 0x80
 800504a:	5c9b      	ldrb	r3, [r3, r2]
 800504c:	2b01      	cmp	r3, #1
 800504e:	d101      	bne.n	8005054 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005050:	2302      	movs	r3, #2
 8005052:	e02f      	b.n	80050b4 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2280      	movs	r2, #128	; 0x80
 8005058:	2101      	movs	r1, #1
 800505a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2284      	movs	r2, #132	; 0x84
 8005060:	2124      	movs	r1, #36	; 0x24
 8005062:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	2101      	movs	r1, #1
 8005078:	438a      	bics	r2, r1
 800507a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	4a0e      	ldr	r2, [pc, #56]	; (80050bc <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8005084:	4013      	ands	r3, r2
 8005086:	0019      	movs	r1, r3
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	683a      	ldr	r2, [r7, #0]
 800508e:	430a      	orrs	r2, r1
 8005090:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	0018      	movs	r0, r3
 8005096:	f000 f813 	bl	80050c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	68fa      	ldr	r2, [r7, #12]
 80050a0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2284      	movs	r2, #132	; 0x84
 80050a6:	2120      	movs	r1, #32
 80050a8:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2280      	movs	r2, #128	; 0x80
 80050ae:	2100      	movs	r1, #0
 80050b0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80050b2:	2300      	movs	r3, #0
}
 80050b4:	0018      	movs	r0, r3
 80050b6:	46bd      	mov	sp, r7
 80050b8:	b004      	add	sp, #16
 80050ba:	bd80      	pop	{r7, pc}
 80050bc:	f1ffffff 	.word	0xf1ffffff

080050c0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80050c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050c2:	b085      	sub	sp, #20
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d108      	bne.n	80050e2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	226a      	movs	r2, #106	; 0x6a
 80050d4:	2101      	movs	r1, #1
 80050d6:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2268      	movs	r2, #104	; 0x68
 80050dc:	2101      	movs	r1, #1
 80050de:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80050e0:	e043      	b.n	800516a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80050e2:	260f      	movs	r6, #15
 80050e4:	19bb      	adds	r3, r7, r6
 80050e6:	2208      	movs	r2, #8
 80050e8:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80050ea:	200e      	movs	r0, #14
 80050ec:	183b      	adds	r3, r7, r0
 80050ee:	2208      	movs	r2, #8
 80050f0:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	0e5b      	lsrs	r3, r3, #25
 80050fa:	b2da      	uxtb	r2, r3
 80050fc:	240d      	movs	r4, #13
 80050fe:	193b      	adds	r3, r7, r4
 8005100:	2107      	movs	r1, #7
 8005102:	400a      	ands	r2, r1
 8005104:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	0f5b      	lsrs	r3, r3, #29
 800510e:	b2da      	uxtb	r2, r3
 8005110:	250c      	movs	r5, #12
 8005112:	197b      	adds	r3, r7, r5
 8005114:	2107      	movs	r1, #7
 8005116:	400a      	ands	r2, r1
 8005118:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800511a:	183b      	adds	r3, r7, r0
 800511c:	781b      	ldrb	r3, [r3, #0]
 800511e:	197a      	adds	r2, r7, r5
 8005120:	7812      	ldrb	r2, [r2, #0]
 8005122:	4914      	ldr	r1, [pc, #80]	; (8005174 <UARTEx_SetNbDataToProcess+0xb4>)
 8005124:	5c8a      	ldrb	r2, [r1, r2]
 8005126:	435a      	muls	r2, r3
 8005128:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800512a:	197b      	adds	r3, r7, r5
 800512c:	781b      	ldrb	r3, [r3, #0]
 800512e:	4a12      	ldr	r2, [pc, #72]	; (8005178 <UARTEx_SetNbDataToProcess+0xb8>)
 8005130:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005132:	0019      	movs	r1, r3
 8005134:	f7fb f882 	bl	800023c <__divsi3>
 8005138:	0003      	movs	r3, r0
 800513a:	b299      	uxth	r1, r3
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	226a      	movs	r2, #106	; 0x6a
 8005140:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005142:	19bb      	adds	r3, r7, r6
 8005144:	781b      	ldrb	r3, [r3, #0]
 8005146:	193a      	adds	r2, r7, r4
 8005148:	7812      	ldrb	r2, [r2, #0]
 800514a:	490a      	ldr	r1, [pc, #40]	; (8005174 <UARTEx_SetNbDataToProcess+0xb4>)
 800514c:	5c8a      	ldrb	r2, [r1, r2]
 800514e:	435a      	muls	r2, r3
 8005150:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8005152:	193b      	adds	r3, r7, r4
 8005154:	781b      	ldrb	r3, [r3, #0]
 8005156:	4a08      	ldr	r2, [pc, #32]	; (8005178 <UARTEx_SetNbDataToProcess+0xb8>)
 8005158:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800515a:	0019      	movs	r1, r3
 800515c:	f7fb f86e 	bl	800023c <__divsi3>
 8005160:	0003      	movs	r3, r0
 8005162:	b299      	uxth	r1, r3
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2268      	movs	r2, #104	; 0x68
 8005168:	5299      	strh	r1, [r3, r2]
}
 800516a:	46c0      	nop			; (mov r8, r8)
 800516c:	46bd      	mov	sp, r7
 800516e:	b005      	add	sp, #20
 8005170:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005172:	46c0      	nop			; (mov r8, r8)
 8005174:	08005b88 	.word	0x08005b88
 8005178:	08005b90 	.word	0x08005b90

0800517c <__errno>:
 800517c:	4b01      	ldr	r3, [pc, #4]	; (8005184 <__errno+0x8>)
 800517e:	6818      	ldr	r0, [r3, #0]
 8005180:	4770      	bx	lr
 8005182:	46c0      	nop			; (mov r8, r8)
 8005184:	20000058 	.word	0x20000058

08005188 <__libc_init_array>:
 8005188:	b570      	push	{r4, r5, r6, lr}
 800518a:	2600      	movs	r6, #0
 800518c:	4d0c      	ldr	r5, [pc, #48]	; (80051c0 <__libc_init_array+0x38>)
 800518e:	4c0d      	ldr	r4, [pc, #52]	; (80051c4 <__libc_init_array+0x3c>)
 8005190:	1b64      	subs	r4, r4, r5
 8005192:	10a4      	asrs	r4, r4, #2
 8005194:	42a6      	cmp	r6, r4
 8005196:	d109      	bne.n	80051ac <__libc_init_array+0x24>
 8005198:	2600      	movs	r6, #0
 800519a:	f000 fc6b 	bl	8005a74 <_init>
 800519e:	4d0a      	ldr	r5, [pc, #40]	; (80051c8 <__libc_init_array+0x40>)
 80051a0:	4c0a      	ldr	r4, [pc, #40]	; (80051cc <__libc_init_array+0x44>)
 80051a2:	1b64      	subs	r4, r4, r5
 80051a4:	10a4      	asrs	r4, r4, #2
 80051a6:	42a6      	cmp	r6, r4
 80051a8:	d105      	bne.n	80051b6 <__libc_init_array+0x2e>
 80051aa:	bd70      	pop	{r4, r5, r6, pc}
 80051ac:	00b3      	lsls	r3, r6, #2
 80051ae:	58eb      	ldr	r3, [r5, r3]
 80051b0:	4798      	blx	r3
 80051b2:	3601      	adds	r6, #1
 80051b4:	e7ee      	b.n	8005194 <__libc_init_array+0xc>
 80051b6:	00b3      	lsls	r3, r6, #2
 80051b8:	58eb      	ldr	r3, [r5, r3]
 80051ba:	4798      	blx	r3
 80051bc:	3601      	adds	r6, #1
 80051be:	e7f2      	b.n	80051a6 <__libc_init_array+0x1e>
 80051c0:	08005bd4 	.word	0x08005bd4
 80051c4:	08005bd4 	.word	0x08005bd4
 80051c8:	08005bd4 	.word	0x08005bd4
 80051cc:	08005bd8 	.word	0x08005bd8

080051d0 <memcpy>:
 80051d0:	2300      	movs	r3, #0
 80051d2:	b510      	push	{r4, lr}
 80051d4:	429a      	cmp	r2, r3
 80051d6:	d100      	bne.n	80051da <memcpy+0xa>
 80051d8:	bd10      	pop	{r4, pc}
 80051da:	5ccc      	ldrb	r4, [r1, r3]
 80051dc:	54c4      	strb	r4, [r0, r3]
 80051de:	3301      	adds	r3, #1
 80051e0:	e7f8      	b.n	80051d4 <memcpy+0x4>

080051e2 <memset>:
 80051e2:	0003      	movs	r3, r0
 80051e4:	1882      	adds	r2, r0, r2
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d100      	bne.n	80051ec <memset+0xa>
 80051ea:	4770      	bx	lr
 80051ec:	7019      	strb	r1, [r3, #0]
 80051ee:	3301      	adds	r3, #1
 80051f0:	e7f9      	b.n	80051e6 <memset+0x4>
	...

080051f4 <siprintf>:
 80051f4:	b40e      	push	{r1, r2, r3}
 80051f6:	b500      	push	{lr}
 80051f8:	490b      	ldr	r1, [pc, #44]	; (8005228 <siprintf+0x34>)
 80051fa:	b09c      	sub	sp, #112	; 0x70
 80051fc:	ab1d      	add	r3, sp, #116	; 0x74
 80051fe:	9002      	str	r0, [sp, #8]
 8005200:	9006      	str	r0, [sp, #24]
 8005202:	9107      	str	r1, [sp, #28]
 8005204:	9104      	str	r1, [sp, #16]
 8005206:	4809      	ldr	r0, [pc, #36]	; (800522c <siprintf+0x38>)
 8005208:	4909      	ldr	r1, [pc, #36]	; (8005230 <siprintf+0x3c>)
 800520a:	cb04      	ldmia	r3!, {r2}
 800520c:	9105      	str	r1, [sp, #20]
 800520e:	6800      	ldr	r0, [r0, #0]
 8005210:	a902      	add	r1, sp, #8
 8005212:	9301      	str	r3, [sp, #4]
 8005214:	f000 f894 	bl	8005340 <_svfiprintf_r>
 8005218:	2300      	movs	r3, #0
 800521a:	9a02      	ldr	r2, [sp, #8]
 800521c:	7013      	strb	r3, [r2, #0]
 800521e:	b01c      	add	sp, #112	; 0x70
 8005220:	bc08      	pop	{r3}
 8005222:	b003      	add	sp, #12
 8005224:	4718      	bx	r3
 8005226:	46c0      	nop			; (mov r8, r8)
 8005228:	7fffffff 	.word	0x7fffffff
 800522c:	20000058 	.word	0x20000058
 8005230:	ffff0208 	.word	0xffff0208

08005234 <strchr>:
 8005234:	b2c9      	uxtb	r1, r1
 8005236:	7803      	ldrb	r3, [r0, #0]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d004      	beq.n	8005246 <strchr+0x12>
 800523c:	428b      	cmp	r3, r1
 800523e:	d100      	bne.n	8005242 <strchr+0xe>
 8005240:	4770      	bx	lr
 8005242:	3001      	adds	r0, #1
 8005244:	e7f7      	b.n	8005236 <strchr+0x2>
 8005246:	424b      	negs	r3, r1
 8005248:	4159      	adcs	r1, r3
 800524a:	4249      	negs	r1, r1
 800524c:	4008      	ands	r0, r1
 800524e:	e7f7      	b.n	8005240 <strchr+0xc>

08005250 <strstr>:
 8005250:	780a      	ldrb	r2, [r1, #0]
 8005252:	b530      	push	{r4, r5, lr}
 8005254:	2a00      	cmp	r2, #0
 8005256:	d10c      	bne.n	8005272 <strstr+0x22>
 8005258:	bd30      	pop	{r4, r5, pc}
 800525a:	429a      	cmp	r2, r3
 800525c:	d108      	bne.n	8005270 <strstr+0x20>
 800525e:	2301      	movs	r3, #1
 8005260:	5ccc      	ldrb	r4, [r1, r3]
 8005262:	2c00      	cmp	r4, #0
 8005264:	d0f8      	beq.n	8005258 <strstr+0x8>
 8005266:	5cc5      	ldrb	r5, [r0, r3]
 8005268:	42a5      	cmp	r5, r4
 800526a:	d101      	bne.n	8005270 <strstr+0x20>
 800526c:	3301      	adds	r3, #1
 800526e:	e7f7      	b.n	8005260 <strstr+0x10>
 8005270:	3001      	adds	r0, #1
 8005272:	7803      	ldrb	r3, [r0, #0]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d1f0      	bne.n	800525a <strstr+0xa>
 8005278:	0018      	movs	r0, r3
 800527a:	e7ed      	b.n	8005258 <strstr+0x8>

0800527c <__ssputs_r>:
 800527c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800527e:	688e      	ldr	r6, [r1, #8]
 8005280:	b085      	sub	sp, #20
 8005282:	0007      	movs	r7, r0
 8005284:	000c      	movs	r4, r1
 8005286:	9203      	str	r2, [sp, #12]
 8005288:	9301      	str	r3, [sp, #4]
 800528a:	429e      	cmp	r6, r3
 800528c:	d83c      	bhi.n	8005308 <__ssputs_r+0x8c>
 800528e:	2390      	movs	r3, #144	; 0x90
 8005290:	898a      	ldrh	r2, [r1, #12]
 8005292:	00db      	lsls	r3, r3, #3
 8005294:	421a      	tst	r2, r3
 8005296:	d034      	beq.n	8005302 <__ssputs_r+0x86>
 8005298:	2503      	movs	r5, #3
 800529a:	6909      	ldr	r1, [r1, #16]
 800529c:	6823      	ldr	r3, [r4, #0]
 800529e:	1a5b      	subs	r3, r3, r1
 80052a0:	9302      	str	r3, [sp, #8]
 80052a2:	6963      	ldr	r3, [r4, #20]
 80052a4:	9802      	ldr	r0, [sp, #8]
 80052a6:	435d      	muls	r5, r3
 80052a8:	0feb      	lsrs	r3, r5, #31
 80052aa:	195d      	adds	r5, r3, r5
 80052ac:	9b01      	ldr	r3, [sp, #4]
 80052ae:	106d      	asrs	r5, r5, #1
 80052b0:	3301      	adds	r3, #1
 80052b2:	181b      	adds	r3, r3, r0
 80052b4:	42ab      	cmp	r3, r5
 80052b6:	d900      	bls.n	80052ba <__ssputs_r+0x3e>
 80052b8:	001d      	movs	r5, r3
 80052ba:	0553      	lsls	r3, r2, #21
 80052bc:	d532      	bpl.n	8005324 <__ssputs_r+0xa8>
 80052be:	0029      	movs	r1, r5
 80052c0:	0038      	movs	r0, r7
 80052c2:	f000 fb27 	bl	8005914 <_malloc_r>
 80052c6:	1e06      	subs	r6, r0, #0
 80052c8:	d109      	bne.n	80052de <__ssputs_r+0x62>
 80052ca:	230c      	movs	r3, #12
 80052cc:	603b      	str	r3, [r7, #0]
 80052ce:	2340      	movs	r3, #64	; 0x40
 80052d0:	2001      	movs	r0, #1
 80052d2:	89a2      	ldrh	r2, [r4, #12]
 80052d4:	4240      	negs	r0, r0
 80052d6:	4313      	orrs	r3, r2
 80052d8:	81a3      	strh	r3, [r4, #12]
 80052da:	b005      	add	sp, #20
 80052dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052de:	9a02      	ldr	r2, [sp, #8]
 80052e0:	6921      	ldr	r1, [r4, #16]
 80052e2:	f7ff ff75 	bl	80051d0 <memcpy>
 80052e6:	89a3      	ldrh	r3, [r4, #12]
 80052e8:	4a14      	ldr	r2, [pc, #80]	; (800533c <__ssputs_r+0xc0>)
 80052ea:	401a      	ands	r2, r3
 80052ec:	2380      	movs	r3, #128	; 0x80
 80052ee:	4313      	orrs	r3, r2
 80052f0:	81a3      	strh	r3, [r4, #12]
 80052f2:	9b02      	ldr	r3, [sp, #8]
 80052f4:	6126      	str	r6, [r4, #16]
 80052f6:	18f6      	adds	r6, r6, r3
 80052f8:	6026      	str	r6, [r4, #0]
 80052fa:	6165      	str	r5, [r4, #20]
 80052fc:	9e01      	ldr	r6, [sp, #4]
 80052fe:	1aed      	subs	r5, r5, r3
 8005300:	60a5      	str	r5, [r4, #8]
 8005302:	9b01      	ldr	r3, [sp, #4]
 8005304:	429e      	cmp	r6, r3
 8005306:	d900      	bls.n	800530a <__ssputs_r+0x8e>
 8005308:	9e01      	ldr	r6, [sp, #4]
 800530a:	0032      	movs	r2, r6
 800530c:	9903      	ldr	r1, [sp, #12]
 800530e:	6820      	ldr	r0, [r4, #0]
 8005310:	f000 faa3 	bl	800585a <memmove>
 8005314:	68a3      	ldr	r3, [r4, #8]
 8005316:	2000      	movs	r0, #0
 8005318:	1b9b      	subs	r3, r3, r6
 800531a:	60a3      	str	r3, [r4, #8]
 800531c:	6823      	ldr	r3, [r4, #0]
 800531e:	199e      	adds	r6, r3, r6
 8005320:	6026      	str	r6, [r4, #0]
 8005322:	e7da      	b.n	80052da <__ssputs_r+0x5e>
 8005324:	002a      	movs	r2, r5
 8005326:	0038      	movs	r0, r7
 8005328:	f000 fb52 	bl	80059d0 <_realloc_r>
 800532c:	1e06      	subs	r6, r0, #0
 800532e:	d1e0      	bne.n	80052f2 <__ssputs_r+0x76>
 8005330:	0038      	movs	r0, r7
 8005332:	6921      	ldr	r1, [r4, #16]
 8005334:	f000 faa4 	bl	8005880 <_free_r>
 8005338:	e7c7      	b.n	80052ca <__ssputs_r+0x4e>
 800533a:	46c0      	nop			; (mov r8, r8)
 800533c:	fffffb7f 	.word	0xfffffb7f

08005340 <_svfiprintf_r>:
 8005340:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005342:	b0a1      	sub	sp, #132	; 0x84
 8005344:	9003      	str	r0, [sp, #12]
 8005346:	001d      	movs	r5, r3
 8005348:	898b      	ldrh	r3, [r1, #12]
 800534a:	000f      	movs	r7, r1
 800534c:	0016      	movs	r6, r2
 800534e:	061b      	lsls	r3, r3, #24
 8005350:	d511      	bpl.n	8005376 <_svfiprintf_r+0x36>
 8005352:	690b      	ldr	r3, [r1, #16]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d10e      	bne.n	8005376 <_svfiprintf_r+0x36>
 8005358:	2140      	movs	r1, #64	; 0x40
 800535a:	f000 fadb 	bl	8005914 <_malloc_r>
 800535e:	6038      	str	r0, [r7, #0]
 8005360:	6138      	str	r0, [r7, #16]
 8005362:	2800      	cmp	r0, #0
 8005364:	d105      	bne.n	8005372 <_svfiprintf_r+0x32>
 8005366:	230c      	movs	r3, #12
 8005368:	9a03      	ldr	r2, [sp, #12]
 800536a:	3801      	subs	r0, #1
 800536c:	6013      	str	r3, [r2, #0]
 800536e:	b021      	add	sp, #132	; 0x84
 8005370:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005372:	2340      	movs	r3, #64	; 0x40
 8005374:	617b      	str	r3, [r7, #20]
 8005376:	2300      	movs	r3, #0
 8005378:	ac08      	add	r4, sp, #32
 800537a:	6163      	str	r3, [r4, #20]
 800537c:	3320      	adds	r3, #32
 800537e:	7663      	strb	r3, [r4, #25]
 8005380:	3310      	adds	r3, #16
 8005382:	76a3      	strb	r3, [r4, #26]
 8005384:	9507      	str	r5, [sp, #28]
 8005386:	0035      	movs	r5, r6
 8005388:	782b      	ldrb	r3, [r5, #0]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d001      	beq.n	8005392 <_svfiprintf_r+0x52>
 800538e:	2b25      	cmp	r3, #37	; 0x25
 8005390:	d147      	bne.n	8005422 <_svfiprintf_r+0xe2>
 8005392:	1bab      	subs	r3, r5, r6
 8005394:	9305      	str	r3, [sp, #20]
 8005396:	42b5      	cmp	r5, r6
 8005398:	d00c      	beq.n	80053b4 <_svfiprintf_r+0x74>
 800539a:	0032      	movs	r2, r6
 800539c:	0039      	movs	r1, r7
 800539e:	9803      	ldr	r0, [sp, #12]
 80053a0:	f7ff ff6c 	bl	800527c <__ssputs_r>
 80053a4:	1c43      	adds	r3, r0, #1
 80053a6:	d100      	bne.n	80053aa <_svfiprintf_r+0x6a>
 80053a8:	e0ae      	b.n	8005508 <_svfiprintf_r+0x1c8>
 80053aa:	6962      	ldr	r2, [r4, #20]
 80053ac:	9b05      	ldr	r3, [sp, #20]
 80053ae:	4694      	mov	ip, r2
 80053b0:	4463      	add	r3, ip
 80053b2:	6163      	str	r3, [r4, #20]
 80053b4:	782b      	ldrb	r3, [r5, #0]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d100      	bne.n	80053bc <_svfiprintf_r+0x7c>
 80053ba:	e0a5      	b.n	8005508 <_svfiprintf_r+0x1c8>
 80053bc:	2201      	movs	r2, #1
 80053be:	2300      	movs	r3, #0
 80053c0:	4252      	negs	r2, r2
 80053c2:	6062      	str	r2, [r4, #4]
 80053c4:	a904      	add	r1, sp, #16
 80053c6:	3254      	adds	r2, #84	; 0x54
 80053c8:	1852      	adds	r2, r2, r1
 80053ca:	1c6e      	adds	r6, r5, #1
 80053cc:	6023      	str	r3, [r4, #0]
 80053ce:	60e3      	str	r3, [r4, #12]
 80053d0:	60a3      	str	r3, [r4, #8]
 80053d2:	7013      	strb	r3, [r2, #0]
 80053d4:	65a3      	str	r3, [r4, #88]	; 0x58
 80053d6:	2205      	movs	r2, #5
 80053d8:	7831      	ldrb	r1, [r6, #0]
 80053da:	4854      	ldr	r0, [pc, #336]	; (800552c <_svfiprintf_r+0x1ec>)
 80053dc:	f000 fa32 	bl	8005844 <memchr>
 80053e0:	1c75      	adds	r5, r6, #1
 80053e2:	2800      	cmp	r0, #0
 80053e4:	d11f      	bne.n	8005426 <_svfiprintf_r+0xe6>
 80053e6:	6822      	ldr	r2, [r4, #0]
 80053e8:	06d3      	lsls	r3, r2, #27
 80053ea:	d504      	bpl.n	80053f6 <_svfiprintf_r+0xb6>
 80053ec:	2353      	movs	r3, #83	; 0x53
 80053ee:	a904      	add	r1, sp, #16
 80053f0:	185b      	adds	r3, r3, r1
 80053f2:	2120      	movs	r1, #32
 80053f4:	7019      	strb	r1, [r3, #0]
 80053f6:	0713      	lsls	r3, r2, #28
 80053f8:	d504      	bpl.n	8005404 <_svfiprintf_r+0xc4>
 80053fa:	2353      	movs	r3, #83	; 0x53
 80053fc:	a904      	add	r1, sp, #16
 80053fe:	185b      	adds	r3, r3, r1
 8005400:	212b      	movs	r1, #43	; 0x2b
 8005402:	7019      	strb	r1, [r3, #0]
 8005404:	7833      	ldrb	r3, [r6, #0]
 8005406:	2b2a      	cmp	r3, #42	; 0x2a
 8005408:	d016      	beq.n	8005438 <_svfiprintf_r+0xf8>
 800540a:	0035      	movs	r5, r6
 800540c:	2100      	movs	r1, #0
 800540e:	200a      	movs	r0, #10
 8005410:	68e3      	ldr	r3, [r4, #12]
 8005412:	782a      	ldrb	r2, [r5, #0]
 8005414:	1c6e      	adds	r6, r5, #1
 8005416:	3a30      	subs	r2, #48	; 0x30
 8005418:	2a09      	cmp	r2, #9
 800541a:	d94e      	bls.n	80054ba <_svfiprintf_r+0x17a>
 800541c:	2900      	cmp	r1, #0
 800541e:	d111      	bne.n	8005444 <_svfiprintf_r+0x104>
 8005420:	e017      	b.n	8005452 <_svfiprintf_r+0x112>
 8005422:	3501      	adds	r5, #1
 8005424:	e7b0      	b.n	8005388 <_svfiprintf_r+0x48>
 8005426:	4b41      	ldr	r3, [pc, #260]	; (800552c <_svfiprintf_r+0x1ec>)
 8005428:	6822      	ldr	r2, [r4, #0]
 800542a:	1ac0      	subs	r0, r0, r3
 800542c:	2301      	movs	r3, #1
 800542e:	4083      	lsls	r3, r0
 8005430:	4313      	orrs	r3, r2
 8005432:	002e      	movs	r6, r5
 8005434:	6023      	str	r3, [r4, #0]
 8005436:	e7ce      	b.n	80053d6 <_svfiprintf_r+0x96>
 8005438:	9b07      	ldr	r3, [sp, #28]
 800543a:	1d19      	adds	r1, r3, #4
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	9107      	str	r1, [sp, #28]
 8005440:	2b00      	cmp	r3, #0
 8005442:	db01      	blt.n	8005448 <_svfiprintf_r+0x108>
 8005444:	930b      	str	r3, [sp, #44]	; 0x2c
 8005446:	e004      	b.n	8005452 <_svfiprintf_r+0x112>
 8005448:	425b      	negs	r3, r3
 800544a:	60e3      	str	r3, [r4, #12]
 800544c:	2302      	movs	r3, #2
 800544e:	4313      	orrs	r3, r2
 8005450:	6023      	str	r3, [r4, #0]
 8005452:	782b      	ldrb	r3, [r5, #0]
 8005454:	2b2e      	cmp	r3, #46	; 0x2e
 8005456:	d10a      	bne.n	800546e <_svfiprintf_r+0x12e>
 8005458:	786b      	ldrb	r3, [r5, #1]
 800545a:	2b2a      	cmp	r3, #42	; 0x2a
 800545c:	d135      	bne.n	80054ca <_svfiprintf_r+0x18a>
 800545e:	9b07      	ldr	r3, [sp, #28]
 8005460:	3502      	adds	r5, #2
 8005462:	1d1a      	adds	r2, r3, #4
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	9207      	str	r2, [sp, #28]
 8005468:	2b00      	cmp	r3, #0
 800546a:	db2b      	blt.n	80054c4 <_svfiprintf_r+0x184>
 800546c:	9309      	str	r3, [sp, #36]	; 0x24
 800546e:	4e30      	ldr	r6, [pc, #192]	; (8005530 <_svfiprintf_r+0x1f0>)
 8005470:	2203      	movs	r2, #3
 8005472:	0030      	movs	r0, r6
 8005474:	7829      	ldrb	r1, [r5, #0]
 8005476:	f000 f9e5 	bl	8005844 <memchr>
 800547a:	2800      	cmp	r0, #0
 800547c:	d006      	beq.n	800548c <_svfiprintf_r+0x14c>
 800547e:	2340      	movs	r3, #64	; 0x40
 8005480:	1b80      	subs	r0, r0, r6
 8005482:	4083      	lsls	r3, r0
 8005484:	6822      	ldr	r2, [r4, #0]
 8005486:	3501      	adds	r5, #1
 8005488:	4313      	orrs	r3, r2
 800548a:	6023      	str	r3, [r4, #0]
 800548c:	7829      	ldrb	r1, [r5, #0]
 800548e:	2206      	movs	r2, #6
 8005490:	4828      	ldr	r0, [pc, #160]	; (8005534 <_svfiprintf_r+0x1f4>)
 8005492:	1c6e      	adds	r6, r5, #1
 8005494:	7621      	strb	r1, [r4, #24]
 8005496:	f000 f9d5 	bl	8005844 <memchr>
 800549a:	2800      	cmp	r0, #0
 800549c:	d03c      	beq.n	8005518 <_svfiprintf_r+0x1d8>
 800549e:	4b26      	ldr	r3, [pc, #152]	; (8005538 <_svfiprintf_r+0x1f8>)
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d125      	bne.n	80054f0 <_svfiprintf_r+0x1b0>
 80054a4:	2207      	movs	r2, #7
 80054a6:	9b07      	ldr	r3, [sp, #28]
 80054a8:	3307      	adds	r3, #7
 80054aa:	4393      	bics	r3, r2
 80054ac:	3308      	adds	r3, #8
 80054ae:	9307      	str	r3, [sp, #28]
 80054b0:	6963      	ldr	r3, [r4, #20]
 80054b2:	9a04      	ldr	r2, [sp, #16]
 80054b4:	189b      	adds	r3, r3, r2
 80054b6:	6163      	str	r3, [r4, #20]
 80054b8:	e765      	b.n	8005386 <_svfiprintf_r+0x46>
 80054ba:	4343      	muls	r3, r0
 80054bc:	0035      	movs	r5, r6
 80054be:	2101      	movs	r1, #1
 80054c0:	189b      	adds	r3, r3, r2
 80054c2:	e7a6      	b.n	8005412 <_svfiprintf_r+0xd2>
 80054c4:	2301      	movs	r3, #1
 80054c6:	425b      	negs	r3, r3
 80054c8:	e7d0      	b.n	800546c <_svfiprintf_r+0x12c>
 80054ca:	2300      	movs	r3, #0
 80054cc:	200a      	movs	r0, #10
 80054ce:	001a      	movs	r2, r3
 80054d0:	3501      	adds	r5, #1
 80054d2:	6063      	str	r3, [r4, #4]
 80054d4:	7829      	ldrb	r1, [r5, #0]
 80054d6:	1c6e      	adds	r6, r5, #1
 80054d8:	3930      	subs	r1, #48	; 0x30
 80054da:	2909      	cmp	r1, #9
 80054dc:	d903      	bls.n	80054e6 <_svfiprintf_r+0x1a6>
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d0c5      	beq.n	800546e <_svfiprintf_r+0x12e>
 80054e2:	9209      	str	r2, [sp, #36]	; 0x24
 80054e4:	e7c3      	b.n	800546e <_svfiprintf_r+0x12e>
 80054e6:	4342      	muls	r2, r0
 80054e8:	0035      	movs	r5, r6
 80054ea:	2301      	movs	r3, #1
 80054ec:	1852      	adds	r2, r2, r1
 80054ee:	e7f1      	b.n	80054d4 <_svfiprintf_r+0x194>
 80054f0:	ab07      	add	r3, sp, #28
 80054f2:	9300      	str	r3, [sp, #0]
 80054f4:	003a      	movs	r2, r7
 80054f6:	0021      	movs	r1, r4
 80054f8:	4b10      	ldr	r3, [pc, #64]	; (800553c <_svfiprintf_r+0x1fc>)
 80054fa:	9803      	ldr	r0, [sp, #12]
 80054fc:	e000      	b.n	8005500 <_svfiprintf_r+0x1c0>
 80054fe:	bf00      	nop
 8005500:	9004      	str	r0, [sp, #16]
 8005502:	9b04      	ldr	r3, [sp, #16]
 8005504:	3301      	adds	r3, #1
 8005506:	d1d3      	bne.n	80054b0 <_svfiprintf_r+0x170>
 8005508:	89bb      	ldrh	r3, [r7, #12]
 800550a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800550c:	065b      	lsls	r3, r3, #25
 800550e:	d400      	bmi.n	8005512 <_svfiprintf_r+0x1d2>
 8005510:	e72d      	b.n	800536e <_svfiprintf_r+0x2e>
 8005512:	2001      	movs	r0, #1
 8005514:	4240      	negs	r0, r0
 8005516:	e72a      	b.n	800536e <_svfiprintf_r+0x2e>
 8005518:	ab07      	add	r3, sp, #28
 800551a:	9300      	str	r3, [sp, #0]
 800551c:	003a      	movs	r2, r7
 800551e:	0021      	movs	r1, r4
 8005520:	4b06      	ldr	r3, [pc, #24]	; (800553c <_svfiprintf_r+0x1fc>)
 8005522:	9803      	ldr	r0, [sp, #12]
 8005524:	f000 f87c 	bl	8005620 <_printf_i>
 8005528:	e7ea      	b.n	8005500 <_svfiprintf_r+0x1c0>
 800552a:	46c0      	nop			; (mov r8, r8)
 800552c:	08005b98 	.word	0x08005b98
 8005530:	08005b9e 	.word	0x08005b9e
 8005534:	08005ba2 	.word	0x08005ba2
 8005538:	00000000 	.word	0x00000000
 800553c:	0800527d 	.word	0x0800527d

08005540 <_printf_common>:
 8005540:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005542:	0015      	movs	r5, r2
 8005544:	9301      	str	r3, [sp, #4]
 8005546:	688a      	ldr	r2, [r1, #8]
 8005548:	690b      	ldr	r3, [r1, #16]
 800554a:	000c      	movs	r4, r1
 800554c:	9000      	str	r0, [sp, #0]
 800554e:	4293      	cmp	r3, r2
 8005550:	da00      	bge.n	8005554 <_printf_common+0x14>
 8005552:	0013      	movs	r3, r2
 8005554:	0022      	movs	r2, r4
 8005556:	602b      	str	r3, [r5, #0]
 8005558:	3243      	adds	r2, #67	; 0x43
 800555a:	7812      	ldrb	r2, [r2, #0]
 800555c:	2a00      	cmp	r2, #0
 800555e:	d001      	beq.n	8005564 <_printf_common+0x24>
 8005560:	3301      	adds	r3, #1
 8005562:	602b      	str	r3, [r5, #0]
 8005564:	6823      	ldr	r3, [r4, #0]
 8005566:	069b      	lsls	r3, r3, #26
 8005568:	d502      	bpl.n	8005570 <_printf_common+0x30>
 800556a:	682b      	ldr	r3, [r5, #0]
 800556c:	3302      	adds	r3, #2
 800556e:	602b      	str	r3, [r5, #0]
 8005570:	6822      	ldr	r2, [r4, #0]
 8005572:	2306      	movs	r3, #6
 8005574:	0017      	movs	r7, r2
 8005576:	401f      	ands	r7, r3
 8005578:	421a      	tst	r2, r3
 800557a:	d027      	beq.n	80055cc <_printf_common+0x8c>
 800557c:	0023      	movs	r3, r4
 800557e:	3343      	adds	r3, #67	; 0x43
 8005580:	781b      	ldrb	r3, [r3, #0]
 8005582:	1e5a      	subs	r2, r3, #1
 8005584:	4193      	sbcs	r3, r2
 8005586:	6822      	ldr	r2, [r4, #0]
 8005588:	0692      	lsls	r2, r2, #26
 800558a:	d430      	bmi.n	80055ee <_printf_common+0xae>
 800558c:	0022      	movs	r2, r4
 800558e:	9901      	ldr	r1, [sp, #4]
 8005590:	9800      	ldr	r0, [sp, #0]
 8005592:	9e08      	ldr	r6, [sp, #32]
 8005594:	3243      	adds	r2, #67	; 0x43
 8005596:	47b0      	blx	r6
 8005598:	1c43      	adds	r3, r0, #1
 800559a:	d025      	beq.n	80055e8 <_printf_common+0xa8>
 800559c:	2306      	movs	r3, #6
 800559e:	6820      	ldr	r0, [r4, #0]
 80055a0:	682a      	ldr	r2, [r5, #0]
 80055a2:	68e1      	ldr	r1, [r4, #12]
 80055a4:	2500      	movs	r5, #0
 80055a6:	4003      	ands	r3, r0
 80055a8:	2b04      	cmp	r3, #4
 80055aa:	d103      	bne.n	80055b4 <_printf_common+0x74>
 80055ac:	1a8d      	subs	r5, r1, r2
 80055ae:	43eb      	mvns	r3, r5
 80055b0:	17db      	asrs	r3, r3, #31
 80055b2:	401d      	ands	r5, r3
 80055b4:	68a3      	ldr	r3, [r4, #8]
 80055b6:	6922      	ldr	r2, [r4, #16]
 80055b8:	4293      	cmp	r3, r2
 80055ba:	dd01      	ble.n	80055c0 <_printf_common+0x80>
 80055bc:	1a9b      	subs	r3, r3, r2
 80055be:	18ed      	adds	r5, r5, r3
 80055c0:	2700      	movs	r7, #0
 80055c2:	42bd      	cmp	r5, r7
 80055c4:	d120      	bne.n	8005608 <_printf_common+0xc8>
 80055c6:	2000      	movs	r0, #0
 80055c8:	e010      	b.n	80055ec <_printf_common+0xac>
 80055ca:	3701      	adds	r7, #1
 80055cc:	68e3      	ldr	r3, [r4, #12]
 80055ce:	682a      	ldr	r2, [r5, #0]
 80055d0:	1a9b      	subs	r3, r3, r2
 80055d2:	42bb      	cmp	r3, r7
 80055d4:	ddd2      	ble.n	800557c <_printf_common+0x3c>
 80055d6:	0022      	movs	r2, r4
 80055d8:	2301      	movs	r3, #1
 80055da:	9901      	ldr	r1, [sp, #4]
 80055dc:	9800      	ldr	r0, [sp, #0]
 80055de:	9e08      	ldr	r6, [sp, #32]
 80055e0:	3219      	adds	r2, #25
 80055e2:	47b0      	blx	r6
 80055e4:	1c43      	adds	r3, r0, #1
 80055e6:	d1f0      	bne.n	80055ca <_printf_common+0x8a>
 80055e8:	2001      	movs	r0, #1
 80055ea:	4240      	negs	r0, r0
 80055ec:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80055ee:	2030      	movs	r0, #48	; 0x30
 80055f0:	18e1      	adds	r1, r4, r3
 80055f2:	3143      	adds	r1, #67	; 0x43
 80055f4:	7008      	strb	r0, [r1, #0]
 80055f6:	0021      	movs	r1, r4
 80055f8:	1c5a      	adds	r2, r3, #1
 80055fa:	3145      	adds	r1, #69	; 0x45
 80055fc:	7809      	ldrb	r1, [r1, #0]
 80055fe:	18a2      	adds	r2, r4, r2
 8005600:	3243      	adds	r2, #67	; 0x43
 8005602:	3302      	adds	r3, #2
 8005604:	7011      	strb	r1, [r2, #0]
 8005606:	e7c1      	b.n	800558c <_printf_common+0x4c>
 8005608:	0022      	movs	r2, r4
 800560a:	2301      	movs	r3, #1
 800560c:	9901      	ldr	r1, [sp, #4]
 800560e:	9800      	ldr	r0, [sp, #0]
 8005610:	9e08      	ldr	r6, [sp, #32]
 8005612:	321a      	adds	r2, #26
 8005614:	47b0      	blx	r6
 8005616:	1c43      	adds	r3, r0, #1
 8005618:	d0e6      	beq.n	80055e8 <_printf_common+0xa8>
 800561a:	3701      	adds	r7, #1
 800561c:	e7d1      	b.n	80055c2 <_printf_common+0x82>
	...

08005620 <_printf_i>:
 8005620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005622:	b08b      	sub	sp, #44	; 0x2c
 8005624:	9206      	str	r2, [sp, #24]
 8005626:	000a      	movs	r2, r1
 8005628:	3243      	adds	r2, #67	; 0x43
 800562a:	9307      	str	r3, [sp, #28]
 800562c:	9005      	str	r0, [sp, #20]
 800562e:	9204      	str	r2, [sp, #16]
 8005630:	7e0a      	ldrb	r2, [r1, #24]
 8005632:	000c      	movs	r4, r1
 8005634:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005636:	2a78      	cmp	r2, #120	; 0x78
 8005638:	d806      	bhi.n	8005648 <_printf_i+0x28>
 800563a:	2a62      	cmp	r2, #98	; 0x62
 800563c:	d808      	bhi.n	8005650 <_printf_i+0x30>
 800563e:	2a00      	cmp	r2, #0
 8005640:	d100      	bne.n	8005644 <_printf_i+0x24>
 8005642:	e0c0      	b.n	80057c6 <_printf_i+0x1a6>
 8005644:	2a58      	cmp	r2, #88	; 0x58
 8005646:	d052      	beq.n	80056ee <_printf_i+0xce>
 8005648:	0026      	movs	r6, r4
 800564a:	3642      	adds	r6, #66	; 0x42
 800564c:	7032      	strb	r2, [r6, #0]
 800564e:	e022      	b.n	8005696 <_printf_i+0x76>
 8005650:	0010      	movs	r0, r2
 8005652:	3863      	subs	r0, #99	; 0x63
 8005654:	2815      	cmp	r0, #21
 8005656:	d8f7      	bhi.n	8005648 <_printf_i+0x28>
 8005658:	f7fa fd5c 	bl	8000114 <__gnu_thumb1_case_shi>
 800565c:	001f0016 	.word	0x001f0016
 8005660:	fff6fff6 	.word	0xfff6fff6
 8005664:	fff6fff6 	.word	0xfff6fff6
 8005668:	fff6001f 	.word	0xfff6001f
 800566c:	fff6fff6 	.word	0xfff6fff6
 8005670:	00a8fff6 	.word	0x00a8fff6
 8005674:	009a0036 	.word	0x009a0036
 8005678:	fff6fff6 	.word	0xfff6fff6
 800567c:	fff600b9 	.word	0xfff600b9
 8005680:	fff60036 	.word	0xfff60036
 8005684:	009efff6 	.word	0x009efff6
 8005688:	0026      	movs	r6, r4
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	3642      	adds	r6, #66	; 0x42
 800568e:	1d11      	adds	r1, r2, #4
 8005690:	6019      	str	r1, [r3, #0]
 8005692:	6813      	ldr	r3, [r2, #0]
 8005694:	7033      	strb	r3, [r6, #0]
 8005696:	2301      	movs	r3, #1
 8005698:	e0a7      	b.n	80057ea <_printf_i+0x1ca>
 800569a:	6808      	ldr	r0, [r1, #0]
 800569c:	6819      	ldr	r1, [r3, #0]
 800569e:	1d0a      	adds	r2, r1, #4
 80056a0:	0605      	lsls	r5, r0, #24
 80056a2:	d50b      	bpl.n	80056bc <_printf_i+0x9c>
 80056a4:	680d      	ldr	r5, [r1, #0]
 80056a6:	601a      	str	r2, [r3, #0]
 80056a8:	2d00      	cmp	r5, #0
 80056aa:	da03      	bge.n	80056b4 <_printf_i+0x94>
 80056ac:	232d      	movs	r3, #45	; 0x2d
 80056ae:	9a04      	ldr	r2, [sp, #16]
 80056b0:	426d      	negs	r5, r5
 80056b2:	7013      	strb	r3, [r2, #0]
 80056b4:	4b61      	ldr	r3, [pc, #388]	; (800583c <_printf_i+0x21c>)
 80056b6:	270a      	movs	r7, #10
 80056b8:	9303      	str	r3, [sp, #12]
 80056ba:	e032      	b.n	8005722 <_printf_i+0x102>
 80056bc:	680d      	ldr	r5, [r1, #0]
 80056be:	601a      	str	r2, [r3, #0]
 80056c0:	0641      	lsls	r1, r0, #25
 80056c2:	d5f1      	bpl.n	80056a8 <_printf_i+0x88>
 80056c4:	b22d      	sxth	r5, r5
 80056c6:	e7ef      	b.n	80056a8 <_printf_i+0x88>
 80056c8:	680d      	ldr	r5, [r1, #0]
 80056ca:	6819      	ldr	r1, [r3, #0]
 80056cc:	1d08      	adds	r0, r1, #4
 80056ce:	6018      	str	r0, [r3, #0]
 80056d0:	062e      	lsls	r6, r5, #24
 80056d2:	d501      	bpl.n	80056d8 <_printf_i+0xb8>
 80056d4:	680d      	ldr	r5, [r1, #0]
 80056d6:	e003      	b.n	80056e0 <_printf_i+0xc0>
 80056d8:	066d      	lsls	r5, r5, #25
 80056da:	d5fb      	bpl.n	80056d4 <_printf_i+0xb4>
 80056dc:	680d      	ldr	r5, [r1, #0]
 80056de:	b2ad      	uxth	r5, r5
 80056e0:	4b56      	ldr	r3, [pc, #344]	; (800583c <_printf_i+0x21c>)
 80056e2:	270a      	movs	r7, #10
 80056e4:	9303      	str	r3, [sp, #12]
 80056e6:	2a6f      	cmp	r2, #111	; 0x6f
 80056e8:	d117      	bne.n	800571a <_printf_i+0xfa>
 80056ea:	2708      	movs	r7, #8
 80056ec:	e015      	b.n	800571a <_printf_i+0xfa>
 80056ee:	3145      	adds	r1, #69	; 0x45
 80056f0:	700a      	strb	r2, [r1, #0]
 80056f2:	4a52      	ldr	r2, [pc, #328]	; (800583c <_printf_i+0x21c>)
 80056f4:	9203      	str	r2, [sp, #12]
 80056f6:	681a      	ldr	r2, [r3, #0]
 80056f8:	6821      	ldr	r1, [r4, #0]
 80056fa:	ca20      	ldmia	r2!, {r5}
 80056fc:	601a      	str	r2, [r3, #0]
 80056fe:	0608      	lsls	r0, r1, #24
 8005700:	d550      	bpl.n	80057a4 <_printf_i+0x184>
 8005702:	07cb      	lsls	r3, r1, #31
 8005704:	d502      	bpl.n	800570c <_printf_i+0xec>
 8005706:	2320      	movs	r3, #32
 8005708:	4319      	orrs	r1, r3
 800570a:	6021      	str	r1, [r4, #0]
 800570c:	2710      	movs	r7, #16
 800570e:	2d00      	cmp	r5, #0
 8005710:	d103      	bne.n	800571a <_printf_i+0xfa>
 8005712:	2320      	movs	r3, #32
 8005714:	6822      	ldr	r2, [r4, #0]
 8005716:	439a      	bics	r2, r3
 8005718:	6022      	str	r2, [r4, #0]
 800571a:	0023      	movs	r3, r4
 800571c:	2200      	movs	r2, #0
 800571e:	3343      	adds	r3, #67	; 0x43
 8005720:	701a      	strb	r2, [r3, #0]
 8005722:	6863      	ldr	r3, [r4, #4]
 8005724:	60a3      	str	r3, [r4, #8]
 8005726:	2b00      	cmp	r3, #0
 8005728:	db03      	blt.n	8005732 <_printf_i+0x112>
 800572a:	2204      	movs	r2, #4
 800572c:	6821      	ldr	r1, [r4, #0]
 800572e:	4391      	bics	r1, r2
 8005730:	6021      	str	r1, [r4, #0]
 8005732:	2d00      	cmp	r5, #0
 8005734:	d102      	bne.n	800573c <_printf_i+0x11c>
 8005736:	9e04      	ldr	r6, [sp, #16]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d00c      	beq.n	8005756 <_printf_i+0x136>
 800573c:	9e04      	ldr	r6, [sp, #16]
 800573e:	0028      	movs	r0, r5
 8005740:	0039      	movs	r1, r7
 8005742:	f7fa fd77 	bl	8000234 <__aeabi_uidivmod>
 8005746:	9b03      	ldr	r3, [sp, #12]
 8005748:	3e01      	subs	r6, #1
 800574a:	5c5b      	ldrb	r3, [r3, r1]
 800574c:	7033      	strb	r3, [r6, #0]
 800574e:	002b      	movs	r3, r5
 8005750:	0005      	movs	r5, r0
 8005752:	429f      	cmp	r7, r3
 8005754:	d9f3      	bls.n	800573e <_printf_i+0x11e>
 8005756:	2f08      	cmp	r7, #8
 8005758:	d109      	bne.n	800576e <_printf_i+0x14e>
 800575a:	6823      	ldr	r3, [r4, #0]
 800575c:	07db      	lsls	r3, r3, #31
 800575e:	d506      	bpl.n	800576e <_printf_i+0x14e>
 8005760:	6863      	ldr	r3, [r4, #4]
 8005762:	6922      	ldr	r2, [r4, #16]
 8005764:	4293      	cmp	r3, r2
 8005766:	dc02      	bgt.n	800576e <_printf_i+0x14e>
 8005768:	2330      	movs	r3, #48	; 0x30
 800576a:	3e01      	subs	r6, #1
 800576c:	7033      	strb	r3, [r6, #0]
 800576e:	9b04      	ldr	r3, [sp, #16]
 8005770:	1b9b      	subs	r3, r3, r6
 8005772:	6123      	str	r3, [r4, #16]
 8005774:	9b07      	ldr	r3, [sp, #28]
 8005776:	0021      	movs	r1, r4
 8005778:	9300      	str	r3, [sp, #0]
 800577a:	9805      	ldr	r0, [sp, #20]
 800577c:	9b06      	ldr	r3, [sp, #24]
 800577e:	aa09      	add	r2, sp, #36	; 0x24
 8005780:	f7ff fede 	bl	8005540 <_printf_common>
 8005784:	1c43      	adds	r3, r0, #1
 8005786:	d135      	bne.n	80057f4 <_printf_i+0x1d4>
 8005788:	2001      	movs	r0, #1
 800578a:	4240      	negs	r0, r0
 800578c:	b00b      	add	sp, #44	; 0x2c
 800578e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005790:	2220      	movs	r2, #32
 8005792:	6809      	ldr	r1, [r1, #0]
 8005794:	430a      	orrs	r2, r1
 8005796:	6022      	str	r2, [r4, #0]
 8005798:	0022      	movs	r2, r4
 800579a:	2178      	movs	r1, #120	; 0x78
 800579c:	3245      	adds	r2, #69	; 0x45
 800579e:	7011      	strb	r1, [r2, #0]
 80057a0:	4a27      	ldr	r2, [pc, #156]	; (8005840 <_printf_i+0x220>)
 80057a2:	e7a7      	b.n	80056f4 <_printf_i+0xd4>
 80057a4:	0648      	lsls	r0, r1, #25
 80057a6:	d5ac      	bpl.n	8005702 <_printf_i+0xe2>
 80057a8:	b2ad      	uxth	r5, r5
 80057aa:	e7aa      	b.n	8005702 <_printf_i+0xe2>
 80057ac:	681a      	ldr	r2, [r3, #0]
 80057ae:	680d      	ldr	r5, [r1, #0]
 80057b0:	1d10      	adds	r0, r2, #4
 80057b2:	6949      	ldr	r1, [r1, #20]
 80057b4:	6018      	str	r0, [r3, #0]
 80057b6:	6813      	ldr	r3, [r2, #0]
 80057b8:	062e      	lsls	r6, r5, #24
 80057ba:	d501      	bpl.n	80057c0 <_printf_i+0x1a0>
 80057bc:	6019      	str	r1, [r3, #0]
 80057be:	e002      	b.n	80057c6 <_printf_i+0x1a6>
 80057c0:	066d      	lsls	r5, r5, #25
 80057c2:	d5fb      	bpl.n	80057bc <_printf_i+0x19c>
 80057c4:	8019      	strh	r1, [r3, #0]
 80057c6:	2300      	movs	r3, #0
 80057c8:	9e04      	ldr	r6, [sp, #16]
 80057ca:	6123      	str	r3, [r4, #16]
 80057cc:	e7d2      	b.n	8005774 <_printf_i+0x154>
 80057ce:	681a      	ldr	r2, [r3, #0]
 80057d0:	1d11      	adds	r1, r2, #4
 80057d2:	6019      	str	r1, [r3, #0]
 80057d4:	6816      	ldr	r6, [r2, #0]
 80057d6:	2100      	movs	r1, #0
 80057d8:	0030      	movs	r0, r6
 80057da:	6862      	ldr	r2, [r4, #4]
 80057dc:	f000 f832 	bl	8005844 <memchr>
 80057e0:	2800      	cmp	r0, #0
 80057e2:	d001      	beq.n	80057e8 <_printf_i+0x1c8>
 80057e4:	1b80      	subs	r0, r0, r6
 80057e6:	6060      	str	r0, [r4, #4]
 80057e8:	6863      	ldr	r3, [r4, #4]
 80057ea:	6123      	str	r3, [r4, #16]
 80057ec:	2300      	movs	r3, #0
 80057ee:	9a04      	ldr	r2, [sp, #16]
 80057f0:	7013      	strb	r3, [r2, #0]
 80057f2:	e7bf      	b.n	8005774 <_printf_i+0x154>
 80057f4:	6923      	ldr	r3, [r4, #16]
 80057f6:	0032      	movs	r2, r6
 80057f8:	9906      	ldr	r1, [sp, #24]
 80057fa:	9805      	ldr	r0, [sp, #20]
 80057fc:	9d07      	ldr	r5, [sp, #28]
 80057fe:	47a8      	blx	r5
 8005800:	1c43      	adds	r3, r0, #1
 8005802:	d0c1      	beq.n	8005788 <_printf_i+0x168>
 8005804:	6823      	ldr	r3, [r4, #0]
 8005806:	079b      	lsls	r3, r3, #30
 8005808:	d415      	bmi.n	8005836 <_printf_i+0x216>
 800580a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800580c:	68e0      	ldr	r0, [r4, #12]
 800580e:	4298      	cmp	r0, r3
 8005810:	dabc      	bge.n	800578c <_printf_i+0x16c>
 8005812:	0018      	movs	r0, r3
 8005814:	e7ba      	b.n	800578c <_printf_i+0x16c>
 8005816:	0022      	movs	r2, r4
 8005818:	2301      	movs	r3, #1
 800581a:	9906      	ldr	r1, [sp, #24]
 800581c:	9805      	ldr	r0, [sp, #20]
 800581e:	9e07      	ldr	r6, [sp, #28]
 8005820:	3219      	adds	r2, #25
 8005822:	47b0      	blx	r6
 8005824:	1c43      	adds	r3, r0, #1
 8005826:	d0af      	beq.n	8005788 <_printf_i+0x168>
 8005828:	3501      	adds	r5, #1
 800582a:	68e3      	ldr	r3, [r4, #12]
 800582c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800582e:	1a9b      	subs	r3, r3, r2
 8005830:	42ab      	cmp	r3, r5
 8005832:	dcf0      	bgt.n	8005816 <_printf_i+0x1f6>
 8005834:	e7e9      	b.n	800580a <_printf_i+0x1ea>
 8005836:	2500      	movs	r5, #0
 8005838:	e7f7      	b.n	800582a <_printf_i+0x20a>
 800583a:	46c0      	nop			; (mov r8, r8)
 800583c:	08005ba9 	.word	0x08005ba9
 8005840:	08005bba 	.word	0x08005bba

08005844 <memchr>:
 8005844:	b2c9      	uxtb	r1, r1
 8005846:	1882      	adds	r2, r0, r2
 8005848:	4290      	cmp	r0, r2
 800584a:	d101      	bne.n	8005850 <memchr+0xc>
 800584c:	2000      	movs	r0, #0
 800584e:	4770      	bx	lr
 8005850:	7803      	ldrb	r3, [r0, #0]
 8005852:	428b      	cmp	r3, r1
 8005854:	d0fb      	beq.n	800584e <memchr+0xa>
 8005856:	3001      	adds	r0, #1
 8005858:	e7f6      	b.n	8005848 <memchr+0x4>

0800585a <memmove>:
 800585a:	b510      	push	{r4, lr}
 800585c:	4288      	cmp	r0, r1
 800585e:	d902      	bls.n	8005866 <memmove+0xc>
 8005860:	188b      	adds	r3, r1, r2
 8005862:	4298      	cmp	r0, r3
 8005864:	d303      	bcc.n	800586e <memmove+0x14>
 8005866:	2300      	movs	r3, #0
 8005868:	e007      	b.n	800587a <memmove+0x20>
 800586a:	5c8b      	ldrb	r3, [r1, r2]
 800586c:	5483      	strb	r3, [r0, r2]
 800586e:	3a01      	subs	r2, #1
 8005870:	d2fb      	bcs.n	800586a <memmove+0x10>
 8005872:	bd10      	pop	{r4, pc}
 8005874:	5ccc      	ldrb	r4, [r1, r3]
 8005876:	54c4      	strb	r4, [r0, r3]
 8005878:	3301      	adds	r3, #1
 800587a:	429a      	cmp	r2, r3
 800587c:	d1fa      	bne.n	8005874 <memmove+0x1a>
 800587e:	e7f8      	b.n	8005872 <memmove+0x18>

08005880 <_free_r>:
 8005880:	b570      	push	{r4, r5, r6, lr}
 8005882:	0005      	movs	r5, r0
 8005884:	2900      	cmp	r1, #0
 8005886:	d010      	beq.n	80058aa <_free_r+0x2a>
 8005888:	1f0c      	subs	r4, r1, #4
 800588a:	6823      	ldr	r3, [r4, #0]
 800588c:	2b00      	cmp	r3, #0
 800588e:	da00      	bge.n	8005892 <_free_r+0x12>
 8005890:	18e4      	adds	r4, r4, r3
 8005892:	0028      	movs	r0, r5
 8005894:	f000 f8d4 	bl	8005a40 <__malloc_lock>
 8005898:	4a1d      	ldr	r2, [pc, #116]	; (8005910 <_free_r+0x90>)
 800589a:	6813      	ldr	r3, [r2, #0]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d105      	bne.n	80058ac <_free_r+0x2c>
 80058a0:	6063      	str	r3, [r4, #4]
 80058a2:	6014      	str	r4, [r2, #0]
 80058a4:	0028      	movs	r0, r5
 80058a6:	f000 f8d3 	bl	8005a50 <__malloc_unlock>
 80058aa:	bd70      	pop	{r4, r5, r6, pc}
 80058ac:	42a3      	cmp	r3, r4
 80058ae:	d908      	bls.n	80058c2 <_free_r+0x42>
 80058b0:	6821      	ldr	r1, [r4, #0]
 80058b2:	1860      	adds	r0, r4, r1
 80058b4:	4283      	cmp	r3, r0
 80058b6:	d1f3      	bne.n	80058a0 <_free_r+0x20>
 80058b8:	6818      	ldr	r0, [r3, #0]
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	1841      	adds	r1, r0, r1
 80058be:	6021      	str	r1, [r4, #0]
 80058c0:	e7ee      	b.n	80058a0 <_free_r+0x20>
 80058c2:	001a      	movs	r2, r3
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d001      	beq.n	80058ce <_free_r+0x4e>
 80058ca:	42a3      	cmp	r3, r4
 80058cc:	d9f9      	bls.n	80058c2 <_free_r+0x42>
 80058ce:	6811      	ldr	r1, [r2, #0]
 80058d0:	1850      	adds	r0, r2, r1
 80058d2:	42a0      	cmp	r0, r4
 80058d4:	d10b      	bne.n	80058ee <_free_r+0x6e>
 80058d6:	6820      	ldr	r0, [r4, #0]
 80058d8:	1809      	adds	r1, r1, r0
 80058da:	1850      	adds	r0, r2, r1
 80058dc:	6011      	str	r1, [r2, #0]
 80058de:	4283      	cmp	r3, r0
 80058e0:	d1e0      	bne.n	80058a4 <_free_r+0x24>
 80058e2:	6818      	ldr	r0, [r3, #0]
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	1841      	adds	r1, r0, r1
 80058e8:	6011      	str	r1, [r2, #0]
 80058ea:	6053      	str	r3, [r2, #4]
 80058ec:	e7da      	b.n	80058a4 <_free_r+0x24>
 80058ee:	42a0      	cmp	r0, r4
 80058f0:	d902      	bls.n	80058f8 <_free_r+0x78>
 80058f2:	230c      	movs	r3, #12
 80058f4:	602b      	str	r3, [r5, #0]
 80058f6:	e7d5      	b.n	80058a4 <_free_r+0x24>
 80058f8:	6821      	ldr	r1, [r4, #0]
 80058fa:	1860      	adds	r0, r4, r1
 80058fc:	4283      	cmp	r3, r0
 80058fe:	d103      	bne.n	8005908 <_free_r+0x88>
 8005900:	6818      	ldr	r0, [r3, #0]
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	1841      	adds	r1, r0, r1
 8005906:	6021      	str	r1, [r4, #0]
 8005908:	6063      	str	r3, [r4, #4]
 800590a:	6054      	str	r4, [r2, #4]
 800590c:	e7ca      	b.n	80058a4 <_free_r+0x24>
 800590e:	46c0      	nop			; (mov r8, r8)
 8005910:	20000164 	.word	0x20000164

08005914 <_malloc_r>:
 8005914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005916:	2303      	movs	r3, #3
 8005918:	1ccd      	adds	r5, r1, #3
 800591a:	439d      	bics	r5, r3
 800591c:	3508      	adds	r5, #8
 800591e:	0006      	movs	r6, r0
 8005920:	2d0c      	cmp	r5, #12
 8005922:	d21f      	bcs.n	8005964 <_malloc_r+0x50>
 8005924:	250c      	movs	r5, #12
 8005926:	42a9      	cmp	r1, r5
 8005928:	d81e      	bhi.n	8005968 <_malloc_r+0x54>
 800592a:	0030      	movs	r0, r6
 800592c:	f000 f888 	bl	8005a40 <__malloc_lock>
 8005930:	4925      	ldr	r1, [pc, #148]	; (80059c8 <_malloc_r+0xb4>)
 8005932:	680a      	ldr	r2, [r1, #0]
 8005934:	0014      	movs	r4, r2
 8005936:	2c00      	cmp	r4, #0
 8005938:	d11a      	bne.n	8005970 <_malloc_r+0x5c>
 800593a:	4f24      	ldr	r7, [pc, #144]	; (80059cc <_malloc_r+0xb8>)
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d104      	bne.n	800594c <_malloc_r+0x38>
 8005942:	0021      	movs	r1, r4
 8005944:	0030      	movs	r0, r6
 8005946:	f000 f869 	bl	8005a1c <_sbrk_r>
 800594a:	6038      	str	r0, [r7, #0]
 800594c:	0029      	movs	r1, r5
 800594e:	0030      	movs	r0, r6
 8005950:	f000 f864 	bl	8005a1c <_sbrk_r>
 8005954:	1c43      	adds	r3, r0, #1
 8005956:	d12b      	bne.n	80059b0 <_malloc_r+0x9c>
 8005958:	230c      	movs	r3, #12
 800595a:	0030      	movs	r0, r6
 800595c:	6033      	str	r3, [r6, #0]
 800595e:	f000 f877 	bl	8005a50 <__malloc_unlock>
 8005962:	e003      	b.n	800596c <_malloc_r+0x58>
 8005964:	2d00      	cmp	r5, #0
 8005966:	dade      	bge.n	8005926 <_malloc_r+0x12>
 8005968:	230c      	movs	r3, #12
 800596a:	6033      	str	r3, [r6, #0]
 800596c:	2000      	movs	r0, #0
 800596e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005970:	6823      	ldr	r3, [r4, #0]
 8005972:	1b5b      	subs	r3, r3, r5
 8005974:	d419      	bmi.n	80059aa <_malloc_r+0x96>
 8005976:	2b0b      	cmp	r3, #11
 8005978:	d903      	bls.n	8005982 <_malloc_r+0x6e>
 800597a:	6023      	str	r3, [r4, #0]
 800597c:	18e4      	adds	r4, r4, r3
 800597e:	6025      	str	r5, [r4, #0]
 8005980:	e003      	b.n	800598a <_malloc_r+0x76>
 8005982:	6863      	ldr	r3, [r4, #4]
 8005984:	42a2      	cmp	r2, r4
 8005986:	d10e      	bne.n	80059a6 <_malloc_r+0x92>
 8005988:	600b      	str	r3, [r1, #0]
 800598a:	0030      	movs	r0, r6
 800598c:	f000 f860 	bl	8005a50 <__malloc_unlock>
 8005990:	0020      	movs	r0, r4
 8005992:	2207      	movs	r2, #7
 8005994:	300b      	adds	r0, #11
 8005996:	1d23      	adds	r3, r4, #4
 8005998:	4390      	bics	r0, r2
 800599a:	1ac2      	subs	r2, r0, r3
 800599c:	4298      	cmp	r0, r3
 800599e:	d0e6      	beq.n	800596e <_malloc_r+0x5a>
 80059a0:	1a1b      	subs	r3, r3, r0
 80059a2:	50a3      	str	r3, [r4, r2]
 80059a4:	e7e3      	b.n	800596e <_malloc_r+0x5a>
 80059a6:	6053      	str	r3, [r2, #4]
 80059a8:	e7ef      	b.n	800598a <_malloc_r+0x76>
 80059aa:	0022      	movs	r2, r4
 80059ac:	6864      	ldr	r4, [r4, #4]
 80059ae:	e7c2      	b.n	8005936 <_malloc_r+0x22>
 80059b0:	2303      	movs	r3, #3
 80059b2:	1cc4      	adds	r4, r0, #3
 80059b4:	439c      	bics	r4, r3
 80059b6:	42a0      	cmp	r0, r4
 80059b8:	d0e1      	beq.n	800597e <_malloc_r+0x6a>
 80059ba:	1a21      	subs	r1, r4, r0
 80059bc:	0030      	movs	r0, r6
 80059be:	f000 f82d 	bl	8005a1c <_sbrk_r>
 80059c2:	1c43      	adds	r3, r0, #1
 80059c4:	d1db      	bne.n	800597e <_malloc_r+0x6a>
 80059c6:	e7c7      	b.n	8005958 <_malloc_r+0x44>
 80059c8:	20000164 	.word	0x20000164
 80059cc:	20000168 	.word	0x20000168

080059d0 <_realloc_r>:
 80059d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059d2:	0007      	movs	r7, r0
 80059d4:	000d      	movs	r5, r1
 80059d6:	0016      	movs	r6, r2
 80059d8:	2900      	cmp	r1, #0
 80059da:	d105      	bne.n	80059e8 <_realloc_r+0x18>
 80059dc:	0011      	movs	r1, r2
 80059de:	f7ff ff99 	bl	8005914 <_malloc_r>
 80059e2:	0004      	movs	r4, r0
 80059e4:	0020      	movs	r0, r4
 80059e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059e8:	2a00      	cmp	r2, #0
 80059ea:	d103      	bne.n	80059f4 <_realloc_r+0x24>
 80059ec:	f7ff ff48 	bl	8005880 <_free_r>
 80059f0:	0034      	movs	r4, r6
 80059f2:	e7f7      	b.n	80059e4 <_realloc_r+0x14>
 80059f4:	f000 f834 	bl	8005a60 <_malloc_usable_size_r>
 80059f8:	002c      	movs	r4, r5
 80059fa:	42b0      	cmp	r0, r6
 80059fc:	d2f2      	bcs.n	80059e4 <_realloc_r+0x14>
 80059fe:	0031      	movs	r1, r6
 8005a00:	0038      	movs	r0, r7
 8005a02:	f7ff ff87 	bl	8005914 <_malloc_r>
 8005a06:	1e04      	subs	r4, r0, #0
 8005a08:	d0ec      	beq.n	80059e4 <_realloc_r+0x14>
 8005a0a:	0029      	movs	r1, r5
 8005a0c:	0032      	movs	r2, r6
 8005a0e:	f7ff fbdf 	bl	80051d0 <memcpy>
 8005a12:	0029      	movs	r1, r5
 8005a14:	0038      	movs	r0, r7
 8005a16:	f7ff ff33 	bl	8005880 <_free_r>
 8005a1a:	e7e3      	b.n	80059e4 <_realloc_r+0x14>

08005a1c <_sbrk_r>:
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	b570      	push	{r4, r5, r6, lr}
 8005a20:	4d06      	ldr	r5, [pc, #24]	; (8005a3c <_sbrk_r+0x20>)
 8005a22:	0004      	movs	r4, r0
 8005a24:	0008      	movs	r0, r1
 8005a26:	602b      	str	r3, [r5, #0]
 8005a28:	f7fb fe60 	bl	80016ec <_sbrk>
 8005a2c:	1c43      	adds	r3, r0, #1
 8005a2e:	d103      	bne.n	8005a38 <_sbrk_r+0x1c>
 8005a30:	682b      	ldr	r3, [r5, #0]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d000      	beq.n	8005a38 <_sbrk_r+0x1c>
 8005a36:	6023      	str	r3, [r4, #0]
 8005a38:	bd70      	pop	{r4, r5, r6, pc}
 8005a3a:	46c0      	nop			; (mov r8, r8)
 8005a3c:	2000030c 	.word	0x2000030c

08005a40 <__malloc_lock>:
 8005a40:	b510      	push	{r4, lr}
 8005a42:	4802      	ldr	r0, [pc, #8]	; (8005a4c <__malloc_lock+0xc>)
 8005a44:	f000 f814 	bl	8005a70 <__retarget_lock_acquire_recursive>
 8005a48:	bd10      	pop	{r4, pc}
 8005a4a:	46c0      	nop			; (mov r8, r8)
 8005a4c:	20000314 	.word	0x20000314

08005a50 <__malloc_unlock>:
 8005a50:	b510      	push	{r4, lr}
 8005a52:	4802      	ldr	r0, [pc, #8]	; (8005a5c <__malloc_unlock+0xc>)
 8005a54:	f000 f80d 	bl	8005a72 <__retarget_lock_release_recursive>
 8005a58:	bd10      	pop	{r4, pc}
 8005a5a:	46c0      	nop			; (mov r8, r8)
 8005a5c:	20000314 	.word	0x20000314

08005a60 <_malloc_usable_size_r>:
 8005a60:	1f0b      	subs	r3, r1, #4
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	1f18      	subs	r0, r3, #4
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	da01      	bge.n	8005a6e <_malloc_usable_size_r+0xe>
 8005a6a:	580b      	ldr	r3, [r1, r0]
 8005a6c:	18c0      	adds	r0, r0, r3
 8005a6e:	4770      	bx	lr

08005a70 <__retarget_lock_acquire_recursive>:
 8005a70:	4770      	bx	lr

08005a72 <__retarget_lock_release_recursive>:
 8005a72:	4770      	bx	lr

08005a74 <_init>:
 8005a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a76:	46c0      	nop			; (mov r8, r8)
 8005a78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a7a:	bc08      	pop	{r3}
 8005a7c:	469e      	mov	lr, r3
 8005a7e:	4770      	bx	lr

08005a80 <_fini>:
 8005a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a82:	46c0      	nop			; (mov r8, r8)
 8005a84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a86:	bc08      	pop	{r3}
 8005a88:	469e      	mov	lr, r3
 8005a8a:	4770      	bx	lr
