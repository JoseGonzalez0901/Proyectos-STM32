
tarjeta.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000700c  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b4  080070c8  080070c8  000170c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800727c  0800727c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800727c  0800727c  0001727c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007284  08007284  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007284  08007284  00017284  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007288  08007288  00017288  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800728c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000664  20000074  08007300  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006d8  08007300  000206d8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015c77  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d26  00000000  00000000  00035d13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fb0  00000000  00000000  00038a40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e98  00000000  00000000  000399f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019653  00000000  00000000  0003a888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013ed6  00000000  00000000  00053edb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009cb4a  00000000  00000000  00067db1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001048fb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003bcc  00000000  00000000  00104950  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000074 	.word	0x20000074
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080070b0 	.word	0x080070b0

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000078 	.word	0x20000078
 8000100:	080070b0 	.word	0x080070b0

08000104 <strcmp>:
 8000104:	7802      	ldrb	r2, [r0, #0]
 8000106:	780b      	ldrb	r3, [r1, #0]
 8000108:	2a00      	cmp	r2, #0
 800010a:	d003      	beq.n	8000114 <strcmp+0x10>
 800010c:	3001      	adds	r0, #1
 800010e:	3101      	adds	r1, #1
 8000110:	429a      	cmp	r2, r3
 8000112:	d0f7      	beq.n	8000104 <strcmp>
 8000114:	1ad0      	subs	r0, r2, r3
 8000116:	4770      	bx	lr

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	; 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	; 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <__aeabi_uldivmod>:
 8000418:	2b00      	cmp	r3, #0
 800041a:	d111      	bne.n	8000440 <__aeabi_uldivmod+0x28>
 800041c:	2a00      	cmp	r2, #0
 800041e:	d10f      	bne.n	8000440 <__aeabi_uldivmod+0x28>
 8000420:	2900      	cmp	r1, #0
 8000422:	d100      	bne.n	8000426 <__aeabi_uldivmod+0xe>
 8000424:	2800      	cmp	r0, #0
 8000426:	d002      	beq.n	800042e <__aeabi_uldivmod+0x16>
 8000428:	2100      	movs	r1, #0
 800042a:	43c9      	mvns	r1, r1
 800042c:	1c08      	adds	r0, r1, #0
 800042e:	b407      	push	{r0, r1, r2}
 8000430:	4802      	ldr	r0, [pc, #8]	; (800043c <__aeabi_uldivmod+0x24>)
 8000432:	a102      	add	r1, pc, #8	; (adr r1, 800043c <__aeabi_uldivmod+0x24>)
 8000434:	1840      	adds	r0, r0, r1
 8000436:	9002      	str	r0, [sp, #8]
 8000438:	bd03      	pop	{r0, r1, pc}
 800043a:	46c0      	nop			; (mov r8, r8)
 800043c:	ffffffd9 	.word	0xffffffd9
 8000440:	b403      	push	{r0, r1}
 8000442:	4668      	mov	r0, sp
 8000444:	b501      	push	{r0, lr}
 8000446:	9802      	ldr	r0, [sp, #8]
 8000448:	f000 f806 	bl	8000458 <__udivmoddi4>
 800044c:	9b01      	ldr	r3, [sp, #4]
 800044e:	469e      	mov	lr, r3
 8000450:	b002      	add	sp, #8
 8000452:	bc0c      	pop	{r2, r3}
 8000454:	4770      	bx	lr
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <__udivmoddi4>:
 8000458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800045a:	4657      	mov	r7, sl
 800045c:	464e      	mov	r6, r9
 800045e:	4645      	mov	r5, r8
 8000460:	46de      	mov	lr, fp
 8000462:	b5e0      	push	{r5, r6, r7, lr}
 8000464:	0004      	movs	r4, r0
 8000466:	000d      	movs	r5, r1
 8000468:	4692      	mov	sl, r2
 800046a:	4699      	mov	r9, r3
 800046c:	b083      	sub	sp, #12
 800046e:	428b      	cmp	r3, r1
 8000470:	d830      	bhi.n	80004d4 <__udivmoddi4+0x7c>
 8000472:	d02d      	beq.n	80004d0 <__udivmoddi4+0x78>
 8000474:	4649      	mov	r1, r9
 8000476:	4650      	mov	r0, sl
 8000478:	f000 f8ba 	bl	80005f0 <__clzdi2>
 800047c:	0029      	movs	r1, r5
 800047e:	0006      	movs	r6, r0
 8000480:	0020      	movs	r0, r4
 8000482:	f000 f8b5 	bl	80005f0 <__clzdi2>
 8000486:	1a33      	subs	r3, r6, r0
 8000488:	4698      	mov	r8, r3
 800048a:	3b20      	subs	r3, #32
 800048c:	469b      	mov	fp, r3
 800048e:	d433      	bmi.n	80004f8 <__udivmoddi4+0xa0>
 8000490:	465a      	mov	r2, fp
 8000492:	4653      	mov	r3, sl
 8000494:	4093      	lsls	r3, r2
 8000496:	4642      	mov	r2, r8
 8000498:	001f      	movs	r7, r3
 800049a:	4653      	mov	r3, sl
 800049c:	4093      	lsls	r3, r2
 800049e:	001e      	movs	r6, r3
 80004a0:	42af      	cmp	r7, r5
 80004a2:	d83a      	bhi.n	800051a <__udivmoddi4+0xc2>
 80004a4:	42af      	cmp	r7, r5
 80004a6:	d100      	bne.n	80004aa <__udivmoddi4+0x52>
 80004a8:	e078      	b.n	800059c <__udivmoddi4+0x144>
 80004aa:	465b      	mov	r3, fp
 80004ac:	1ba4      	subs	r4, r4, r6
 80004ae:	41bd      	sbcs	r5, r7
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	da00      	bge.n	80004b6 <__udivmoddi4+0x5e>
 80004b4:	e075      	b.n	80005a2 <__udivmoddi4+0x14a>
 80004b6:	2200      	movs	r2, #0
 80004b8:	2300      	movs	r3, #0
 80004ba:	9200      	str	r2, [sp, #0]
 80004bc:	9301      	str	r3, [sp, #4]
 80004be:	2301      	movs	r3, #1
 80004c0:	465a      	mov	r2, fp
 80004c2:	4093      	lsls	r3, r2
 80004c4:	9301      	str	r3, [sp, #4]
 80004c6:	2301      	movs	r3, #1
 80004c8:	4642      	mov	r2, r8
 80004ca:	4093      	lsls	r3, r2
 80004cc:	9300      	str	r3, [sp, #0]
 80004ce:	e028      	b.n	8000522 <__udivmoddi4+0xca>
 80004d0:	4282      	cmp	r2, r0
 80004d2:	d9cf      	bls.n	8000474 <__udivmoddi4+0x1c>
 80004d4:	2200      	movs	r2, #0
 80004d6:	2300      	movs	r3, #0
 80004d8:	9200      	str	r2, [sp, #0]
 80004da:	9301      	str	r3, [sp, #4]
 80004dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d001      	beq.n	80004e6 <__udivmoddi4+0x8e>
 80004e2:	601c      	str	r4, [r3, #0]
 80004e4:	605d      	str	r5, [r3, #4]
 80004e6:	9800      	ldr	r0, [sp, #0]
 80004e8:	9901      	ldr	r1, [sp, #4]
 80004ea:	b003      	add	sp, #12
 80004ec:	bcf0      	pop	{r4, r5, r6, r7}
 80004ee:	46bb      	mov	fp, r7
 80004f0:	46b2      	mov	sl, r6
 80004f2:	46a9      	mov	r9, r5
 80004f4:	46a0      	mov	r8, r4
 80004f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f8:	4642      	mov	r2, r8
 80004fa:	2320      	movs	r3, #32
 80004fc:	1a9b      	subs	r3, r3, r2
 80004fe:	4652      	mov	r2, sl
 8000500:	40da      	lsrs	r2, r3
 8000502:	4641      	mov	r1, r8
 8000504:	0013      	movs	r3, r2
 8000506:	464a      	mov	r2, r9
 8000508:	408a      	lsls	r2, r1
 800050a:	0017      	movs	r7, r2
 800050c:	4642      	mov	r2, r8
 800050e:	431f      	orrs	r7, r3
 8000510:	4653      	mov	r3, sl
 8000512:	4093      	lsls	r3, r2
 8000514:	001e      	movs	r6, r3
 8000516:	42af      	cmp	r7, r5
 8000518:	d9c4      	bls.n	80004a4 <__udivmoddi4+0x4c>
 800051a:	2200      	movs	r2, #0
 800051c:	2300      	movs	r3, #0
 800051e:	9200      	str	r2, [sp, #0]
 8000520:	9301      	str	r3, [sp, #4]
 8000522:	4643      	mov	r3, r8
 8000524:	2b00      	cmp	r3, #0
 8000526:	d0d9      	beq.n	80004dc <__udivmoddi4+0x84>
 8000528:	07fb      	lsls	r3, r7, #31
 800052a:	0872      	lsrs	r2, r6, #1
 800052c:	431a      	orrs	r2, r3
 800052e:	4646      	mov	r6, r8
 8000530:	087b      	lsrs	r3, r7, #1
 8000532:	e00e      	b.n	8000552 <__udivmoddi4+0xfa>
 8000534:	42ab      	cmp	r3, r5
 8000536:	d101      	bne.n	800053c <__udivmoddi4+0xe4>
 8000538:	42a2      	cmp	r2, r4
 800053a:	d80c      	bhi.n	8000556 <__udivmoddi4+0xfe>
 800053c:	1aa4      	subs	r4, r4, r2
 800053e:	419d      	sbcs	r5, r3
 8000540:	2001      	movs	r0, #1
 8000542:	1924      	adds	r4, r4, r4
 8000544:	416d      	adcs	r5, r5
 8000546:	2100      	movs	r1, #0
 8000548:	3e01      	subs	r6, #1
 800054a:	1824      	adds	r4, r4, r0
 800054c:	414d      	adcs	r5, r1
 800054e:	2e00      	cmp	r6, #0
 8000550:	d006      	beq.n	8000560 <__udivmoddi4+0x108>
 8000552:	42ab      	cmp	r3, r5
 8000554:	d9ee      	bls.n	8000534 <__udivmoddi4+0xdc>
 8000556:	3e01      	subs	r6, #1
 8000558:	1924      	adds	r4, r4, r4
 800055a:	416d      	adcs	r5, r5
 800055c:	2e00      	cmp	r6, #0
 800055e:	d1f8      	bne.n	8000552 <__udivmoddi4+0xfa>
 8000560:	9800      	ldr	r0, [sp, #0]
 8000562:	9901      	ldr	r1, [sp, #4]
 8000564:	465b      	mov	r3, fp
 8000566:	1900      	adds	r0, r0, r4
 8000568:	4169      	adcs	r1, r5
 800056a:	2b00      	cmp	r3, #0
 800056c:	db24      	blt.n	80005b8 <__udivmoddi4+0x160>
 800056e:	002b      	movs	r3, r5
 8000570:	465a      	mov	r2, fp
 8000572:	4644      	mov	r4, r8
 8000574:	40d3      	lsrs	r3, r2
 8000576:	002a      	movs	r2, r5
 8000578:	40e2      	lsrs	r2, r4
 800057a:	001c      	movs	r4, r3
 800057c:	465b      	mov	r3, fp
 800057e:	0015      	movs	r5, r2
 8000580:	2b00      	cmp	r3, #0
 8000582:	db2a      	blt.n	80005da <__udivmoddi4+0x182>
 8000584:	0026      	movs	r6, r4
 8000586:	409e      	lsls	r6, r3
 8000588:	0033      	movs	r3, r6
 800058a:	0026      	movs	r6, r4
 800058c:	4647      	mov	r7, r8
 800058e:	40be      	lsls	r6, r7
 8000590:	0032      	movs	r2, r6
 8000592:	1a80      	subs	r0, r0, r2
 8000594:	4199      	sbcs	r1, r3
 8000596:	9000      	str	r0, [sp, #0]
 8000598:	9101      	str	r1, [sp, #4]
 800059a:	e79f      	b.n	80004dc <__udivmoddi4+0x84>
 800059c:	42a3      	cmp	r3, r4
 800059e:	d8bc      	bhi.n	800051a <__udivmoddi4+0xc2>
 80005a0:	e783      	b.n	80004aa <__udivmoddi4+0x52>
 80005a2:	4642      	mov	r2, r8
 80005a4:	2320      	movs	r3, #32
 80005a6:	2100      	movs	r1, #0
 80005a8:	1a9b      	subs	r3, r3, r2
 80005aa:	2200      	movs	r2, #0
 80005ac:	9100      	str	r1, [sp, #0]
 80005ae:	9201      	str	r2, [sp, #4]
 80005b0:	2201      	movs	r2, #1
 80005b2:	40da      	lsrs	r2, r3
 80005b4:	9201      	str	r2, [sp, #4]
 80005b6:	e786      	b.n	80004c6 <__udivmoddi4+0x6e>
 80005b8:	4642      	mov	r2, r8
 80005ba:	2320      	movs	r3, #32
 80005bc:	1a9b      	subs	r3, r3, r2
 80005be:	002a      	movs	r2, r5
 80005c0:	4646      	mov	r6, r8
 80005c2:	409a      	lsls	r2, r3
 80005c4:	0023      	movs	r3, r4
 80005c6:	40f3      	lsrs	r3, r6
 80005c8:	4644      	mov	r4, r8
 80005ca:	4313      	orrs	r3, r2
 80005cc:	002a      	movs	r2, r5
 80005ce:	40e2      	lsrs	r2, r4
 80005d0:	001c      	movs	r4, r3
 80005d2:	465b      	mov	r3, fp
 80005d4:	0015      	movs	r5, r2
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	dad4      	bge.n	8000584 <__udivmoddi4+0x12c>
 80005da:	4642      	mov	r2, r8
 80005dc:	002f      	movs	r7, r5
 80005de:	2320      	movs	r3, #32
 80005e0:	0026      	movs	r6, r4
 80005e2:	4097      	lsls	r7, r2
 80005e4:	1a9b      	subs	r3, r3, r2
 80005e6:	40de      	lsrs	r6, r3
 80005e8:	003b      	movs	r3, r7
 80005ea:	4333      	orrs	r3, r6
 80005ec:	e7cd      	b.n	800058a <__udivmoddi4+0x132>
 80005ee:	46c0      	nop			; (mov r8, r8)

080005f0 <__clzdi2>:
 80005f0:	b510      	push	{r4, lr}
 80005f2:	2900      	cmp	r1, #0
 80005f4:	d103      	bne.n	80005fe <__clzdi2+0xe>
 80005f6:	f000 f807 	bl	8000608 <__clzsi2>
 80005fa:	3020      	adds	r0, #32
 80005fc:	e002      	b.n	8000604 <__clzdi2+0x14>
 80005fe:	1c08      	adds	r0, r1, #0
 8000600:	f000 f802 	bl	8000608 <__clzsi2>
 8000604:	bd10      	pop	{r4, pc}
 8000606:	46c0      	nop			; (mov r8, r8)

08000608 <__clzsi2>:
 8000608:	211c      	movs	r1, #28
 800060a:	2301      	movs	r3, #1
 800060c:	041b      	lsls	r3, r3, #16
 800060e:	4298      	cmp	r0, r3
 8000610:	d301      	bcc.n	8000616 <__clzsi2+0xe>
 8000612:	0c00      	lsrs	r0, r0, #16
 8000614:	3910      	subs	r1, #16
 8000616:	0a1b      	lsrs	r3, r3, #8
 8000618:	4298      	cmp	r0, r3
 800061a:	d301      	bcc.n	8000620 <__clzsi2+0x18>
 800061c:	0a00      	lsrs	r0, r0, #8
 800061e:	3908      	subs	r1, #8
 8000620:	091b      	lsrs	r3, r3, #4
 8000622:	4298      	cmp	r0, r3
 8000624:	d301      	bcc.n	800062a <__clzsi2+0x22>
 8000626:	0900      	lsrs	r0, r0, #4
 8000628:	3904      	subs	r1, #4
 800062a:	a202      	add	r2, pc, #8	; (adr r2, 8000634 <__clzsi2+0x2c>)
 800062c:	5c10      	ldrb	r0, [r2, r0]
 800062e:	1840      	adds	r0, r0, r1
 8000630:	4770      	bx	lr
 8000632:	46c0      	nop			; (mov r8, r8)
 8000634:	02020304 	.word	0x02020304
 8000638:	01010101 	.word	0x01010101
	...

08000644 <DS1307_Init>:
	
/**
 * @brief Initializes the DS1307 module. Sets clock halt bit to 0 to start timing.
 * @param hi2c User I2C handle pointer.
 */
void DS1307_Init(I2C_HandleTypeDef *hi2c) {
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
	_ds1307_ui2c = hi2c;
 800064c:	4b04      	ldr	r3, [pc, #16]	; (8000660 <DS1307_Init+0x1c>)
 800064e:	687a      	ldr	r2, [r7, #4]
 8000650:	601a      	str	r2, [r3, #0]
	DS1307_SetClockHalt(0);
 8000652:	2000      	movs	r0, #0
 8000654:	f000 f806 	bl	8000664 <DS1307_SetClockHalt>
}
 8000658:	46c0      	nop			; (mov r8, r8)
 800065a:	46bd      	mov	sp, r7
 800065c:	b002      	add	sp, #8
 800065e:	bd80      	pop	{r7, pc}
 8000660:	200000c8 	.word	0x200000c8

08000664 <DS1307_SetClockHalt>:

/**
 * @brief Sets clock halt bit.
 * @param halt Clock halt bit to set, 0 or 1. 0 to start timing, 0 to stop.
 */
void DS1307_SetClockHalt(uint8_t halt) {
 8000664:	b590      	push	{r4, r7, lr}
 8000666:	b085      	sub	sp, #20
 8000668:	af00      	add	r7, sp, #0
 800066a:	0002      	movs	r2, r0
 800066c:	1dfb      	adds	r3, r7, #7
 800066e:	701a      	strb	r2, [r3, #0]
	uint8_t ch = (halt ? 1 << 7 : 0);
 8000670:	1dfb      	adds	r3, r7, #7
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <DS1307_SetClockHalt+0x18>
 8000678:	2280      	movs	r2, #128	; 0x80
 800067a:	e000      	b.n	800067e <DS1307_SetClockHalt+0x1a>
 800067c:	2200      	movs	r2, #0
 800067e:	240f      	movs	r4, #15
 8000680:	193b      	adds	r3, r7, r4
 8000682:	701a      	strb	r2, [r3, #0]
	DS1307_SetRegByte(DS1307_REG_SECOND, ch | (DS1307_GetRegByte(DS1307_REG_SECOND) & 0x7f));
 8000684:	2000      	movs	r0, #0
 8000686:	f000 f835 	bl	80006f4 <DS1307_GetRegByte>
 800068a:	0003      	movs	r3, r0
 800068c:	b25b      	sxtb	r3, r3
 800068e:	227f      	movs	r2, #127	; 0x7f
 8000690:	4013      	ands	r3, r2
 8000692:	b25a      	sxtb	r2, r3
 8000694:	193b      	adds	r3, r7, r4
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	b25b      	sxtb	r3, r3
 800069a:	4313      	orrs	r3, r2
 800069c:	b25b      	sxtb	r3, r3
 800069e:	b2db      	uxtb	r3, r3
 80006a0:	0019      	movs	r1, r3
 80006a2:	2000      	movs	r0, #0
 80006a4:	f000 f804 	bl	80006b0 <DS1307_SetRegByte>
}
 80006a8:	46c0      	nop			; (mov r8, r8)
 80006aa:	46bd      	mov	sp, r7
 80006ac:	b005      	add	sp, #20
 80006ae:	bd90      	pop	{r4, r7, pc}

080006b0 <DS1307_SetRegByte>:
/**
 * @brief Sets the byte in the designated DS1307 register to value.
 * @param regAddr Register address to write.
 * @param val Value to set, 0 to 255.
 */
void DS1307_SetRegByte(uint8_t regAddr, uint8_t val) {
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b086      	sub	sp, #24
 80006b4:	af02      	add	r7, sp, #8
 80006b6:	0002      	movs	r2, r0
 80006b8:	1dfb      	adds	r3, r7, #7
 80006ba:	701a      	strb	r2, [r3, #0]
 80006bc:	1dbb      	adds	r3, r7, #6
 80006be:	1c0a      	adds	r2, r1, #0
 80006c0:	701a      	strb	r2, [r3, #0]
	uint8_t bytes[2] = { regAddr, val };
 80006c2:	210c      	movs	r1, #12
 80006c4:	187b      	adds	r3, r7, r1
 80006c6:	1dfa      	adds	r2, r7, #7
 80006c8:	7812      	ldrb	r2, [r2, #0]
 80006ca:	701a      	strb	r2, [r3, #0]
 80006cc:	187b      	adds	r3, r7, r1
 80006ce:	1dba      	adds	r2, r7, #6
 80006d0:	7812      	ldrb	r2, [r2, #0]
 80006d2:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(_ds1307_ui2c, DS1307_I2C_ADDR << 1, bytes, 2, DS1307_TIMEOUT);
 80006d4:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <DS1307_SetRegByte+0x40>)
 80006d6:	6818      	ldr	r0, [r3, #0]
 80006d8:	187a      	adds	r2, r7, r1
 80006da:	23fa      	movs	r3, #250	; 0xfa
 80006dc:	009b      	lsls	r3, r3, #2
 80006de:	9300      	str	r3, [sp, #0]
 80006e0:	2302      	movs	r3, #2
 80006e2:	21d0      	movs	r1, #208	; 0xd0
 80006e4:	f001 ffe4 	bl	80026b0 <HAL_I2C_Master_Transmit>
}
 80006e8:	46c0      	nop			; (mov r8, r8)
 80006ea:	46bd      	mov	sp, r7
 80006ec:	b004      	add	sp, #16
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	200000c8 	.word	0x200000c8

080006f4 <DS1307_GetRegByte>:
/**
 * @brief Gets the byte in the designated DS1307 register.
 * @param regAddr Register address to read.
 * @return Value stored in the register, 0 to 255.
 */
uint8_t DS1307_GetRegByte(uint8_t regAddr) {
 80006f4:	b590      	push	{r4, r7, lr}
 80006f6:	b087      	sub	sp, #28
 80006f8:	af02      	add	r7, sp, #8
 80006fa:	0002      	movs	r2, r0
 80006fc:	1dfb      	adds	r3, r7, #7
 80006fe:	701a      	strb	r2, [r3, #0]
	uint8_t val;
	HAL_I2C_Master_Transmit(_ds1307_ui2c, DS1307_I2C_ADDR << 1, &regAddr, 1, DS1307_TIMEOUT);
 8000700:	4b0d      	ldr	r3, [pc, #52]	; (8000738 <DS1307_GetRegByte+0x44>)
 8000702:	6818      	ldr	r0, [r3, #0]
 8000704:	1dfa      	adds	r2, r7, #7
 8000706:	23fa      	movs	r3, #250	; 0xfa
 8000708:	009b      	lsls	r3, r3, #2
 800070a:	9300      	str	r3, [sp, #0]
 800070c:	2301      	movs	r3, #1
 800070e:	21d0      	movs	r1, #208	; 0xd0
 8000710:	f001 ffce 	bl	80026b0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_ds1307_ui2c, DS1307_I2C_ADDR << 1, &val, 1, DS1307_TIMEOUT);
 8000714:	4b08      	ldr	r3, [pc, #32]	; (8000738 <DS1307_GetRegByte+0x44>)
 8000716:	6818      	ldr	r0, [r3, #0]
 8000718:	240f      	movs	r4, #15
 800071a:	193a      	adds	r2, r7, r4
 800071c:	23fa      	movs	r3, #250	; 0xfa
 800071e:	009b      	lsls	r3, r3, #2
 8000720:	9300      	str	r3, [sp, #0]
 8000722:	2301      	movs	r3, #1
 8000724:	21d0      	movs	r1, #208	; 0xd0
 8000726:	f002 f8cb 	bl	80028c0 <HAL_I2C_Master_Receive>
	return val;
 800072a:	193b      	adds	r3, r7, r4
 800072c:	781b      	ldrb	r3, [r3, #0]
}
 800072e:	0018      	movs	r0, r3
 8000730:	46bd      	mov	sp, r7
 8000732:	b005      	add	sp, #20
 8000734:	bd90      	pop	{r4, r7, pc}
 8000736:	46c0      	nop			; (mov r8, r8)
 8000738:	200000c8 	.word	0x200000c8

0800073c <DS1307_GetDate>:

/**
 * @brief Gets the current day of month.
 * @return Day of month, 1 to 31.
 */
uint8_t DS1307_GetDate(void) {
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_DATE));
 8000740:	2004      	movs	r0, #4
 8000742:	f7ff ffd7 	bl	80006f4 <DS1307_GetRegByte>
 8000746:	0003      	movs	r3, r0
 8000748:	0018      	movs	r0, r3
 800074a:	f000 f85d 	bl	8000808 <DS1307_DecodeBCD>
 800074e:	0003      	movs	r3, r0
}
 8000750:	0018      	movs	r0, r3
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}

08000756 <DS1307_GetMonth>:

/**
 * @brief Gets the current month.
 * @return Month, 1 to 12.
 */
uint8_t DS1307_GetMonth(void) {
 8000756:	b580      	push	{r7, lr}
 8000758:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_MONTH));
 800075a:	2005      	movs	r0, #5
 800075c:	f7ff ffca 	bl	80006f4 <DS1307_GetRegByte>
 8000760:	0003      	movs	r3, r0
 8000762:	0018      	movs	r0, r3
 8000764:	f000 f850 	bl	8000808 <DS1307_DecodeBCD>
 8000768:	0003      	movs	r3, r0
}
 800076a:	0018      	movs	r0, r3
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}

08000770 <DS1307_GetYear>:

/**
 * @brief Gets the current year.
 * @return Year, 2000 to 2099.
 */
uint16_t DS1307_GetYear(void) {
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
	uint16_t cen = DS1307_GetRegByte(DS1307_REG_CENT) * 100;
 8000776:	2010      	movs	r0, #16
 8000778:	f7ff ffbc 	bl	80006f4 <DS1307_GetRegByte>
 800077c:	0003      	movs	r3, r0
 800077e:	b29a      	uxth	r2, r3
 8000780:	1dbb      	adds	r3, r7, #6
 8000782:	2164      	movs	r1, #100	; 0x64
 8000784:	434a      	muls	r2, r1
 8000786:	801a      	strh	r2, [r3, #0]
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_YEAR)) + cen;
 8000788:	2006      	movs	r0, #6
 800078a:	f7ff ffb3 	bl	80006f4 <DS1307_GetRegByte>
 800078e:	0003      	movs	r3, r0
 8000790:	0018      	movs	r0, r3
 8000792:	f000 f839 	bl	8000808 <DS1307_DecodeBCD>
 8000796:	0003      	movs	r3, r0
 8000798:	b29a      	uxth	r2, r3
 800079a:	1dbb      	adds	r3, r7, #6
 800079c:	881b      	ldrh	r3, [r3, #0]
 800079e:	18d3      	adds	r3, r2, r3
 80007a0:	b29b      	uxth	r3, r3
}
 80007a2:	0018      	movs	r0, r3
 80007a4:	46bd      	mov	sp, r7
 80007a6:	b002      	add	sp, #8
 80007a8:	bd80      	pop	{r7, pc}

080007aa <DS1307_GetHour>:

/**
 * @brief Gets the current hour in 24h format.
 * @return Hour in 24h format, 0 to 23.
 */
uint8_t DS1307_GetHour(void) {
 80007aa:	b580      	push	{r7, lr}
 80007ac:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_HOUR) & 0x3f);
 80007ae:	2002      	movs	r0, #2
 80007b0:	f7ff ffa0 	bl	80006f4 <DS1307_GetRegByte>
 80007b4:	0003      	movs	r3, r0
 80007b6:	001a      	movs	r2, r3
 80007b8:	233f      	movs	r3, #63	; 0x3f
 80007ba:	4013      	ands	r3, r2
 80007bc:	b2db      	uxtb	r3, r3
 80007be:	0018      	movs	r0, r3
 80007c0:	f000 f822 	bl	8000808 <DS1307_DecodeBCD>
 80007c4:	0003      	movs	r3, r0
}
 80007c6:	0018      	movs	r0, r3
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}

080007cc <DS1307_GetMinute>:

/**
 * @brief Gets the current minute.
 * @return Minute, 0 to 59.
 */
uint8_t DS1307_GetMinute(void) {
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_MINUTE));
 80007d0:	2001      	movs	r0, #1
 80007d2:	f7ff ff8f 	bl	80006f4 <DS1307_GetRegByte>
 80007d6:	0003      	movs	r3, r0
 80007d8:	0018      	movs	r0, r3
 80007da:	f000 f815 	bl	8000808 <DS1307_DecodeBCD>
 80007de:	0003      	movs	r3, r0
}
 80007e0:	0018      	movs	r0, r3
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}

080007e6 <DS1307_GetSecond>:

/**
 * @brief Gets the current second. Clock halt bit not included.
 * @return Second, 0 to 59.
 */
uint8_t DS1307_GetSecond(void) {
 80007e6:	b580      	push	{r7, lr}
 80007e8:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_SECOND) & 0x7f);
 80007ea:	2000      	movs	r0, #0
 80007ec:	f7ff ff82 	bl	80006f4 <DS1307_GetRegByte>
 80007f0:	0003      	movs	r3, r0
 80007f2:	001a      	movs	r2, r3
 80007f4:	237f      	movs	r3, #127	; 0x7f
 80007f6:	4013      	ands	r3, r2
 80007f8:	b2db      	uxtb	r3, r3
 80007fa:	0018      	movs	r0, r3
 80007fc:	f000 f804 	bl	8000808 <DS1307_DecodeBCD>
 8000800:	0003      	movs	r3, r0
}
 8000802:	0018      	movs	r0, r3
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}

08000808 <DS1307_DecodeBCD>:
/**
 * @brief Decodes the raw binary value stored in registers to decimal format.
 * @param bin Binary-coded decimal value retrieved from register, 0 to 255.
 * @return Decoded decimal value.
 */
uint8_t DS1307_DecodeBCD(uint8_t bin) {
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	0002      	movs	r2, r0
 8000810:	1dfb      	adds	r3, r7, #7
 8000812:	701a      	strb	r2, [r3, #0]
	return (((bin & 0xf0) >> 4) * 10) + (bin & 0x0f);
 8000814:	1dfb      	adds	r3, r7, #7
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	091b      	lsrs	r3, r3, #4
 800081a:	b2db      	uxtb	r3, r3
 800081c:	1c1a      	adds	r2, r3, #0
 800081e:	0092      	lsls	r2, r2, #2
 8000820:	18d3      	adds	r3, r2, r3
 8000822:	18db      	adds	r3, r3, r3
 8000824:	b2da      	uxtb	r2, r3
 8000826:	1dfb      	adds	r3, r7, #7
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	210f      	movs	r1, #15
 800082c:	400b      	ands	r3, r1
 800082e:	b2db      	uxtb	r3, r3
 8000830:	18d3      	adds	r3, r2, r3
 8000832:	b2db      	uxtb	r3, r3
}
 8000834:	0018      	movs	r0, r3
 8000836:	46bd      	mov	sp, r7
 8000838:	b002      	add	sp, #8
 800083a:	bd80      	pop	{r7, pc}

0800083c <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 800083c:	b590      	push	{r4, r7, lr}
 800083e:	b087      	sub	sp, #28
 8000840:	af02      	add	r7, sp, #8
 8000842:	0002      	movs	r2, r0
 8000844:	1dfb      	adds	r3, r7, #7
 8000846:	701a      	strb	r2, [r3, #0]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000848:	200f      	movs	r0, #15
 800084a:	183b      	adds	r3, r7, r0
 800084c:	1dfa      	adds	r2, r7, #7
 800084e:	7812      	ldrb	r2, [r2, #0]
 8000850:	210f      	movs	r1, #15
 8000852:	438a      	bics	r2, r1
 8000854:	701a      	strb	r2, [r3, #0]
	data_l = ((cmd<<4)&0xf0);
 8000856:	1dfb      	adds	r3, r7, #7
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	011a      	lsls	r2, r3, #4
 800085c:	240e      	movs	r4, #14
 800085e:	193b      	adds	r3, r7, r4
 8000860:	701a      	strb	r2, [r3, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000862:	183b      	adds	r3, r7, r0
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	220c      	movs	r2, #12
 8000868:	4313      	orrs	r3, r2
 800086a:	b2da      	uxtb	r2, r3
 800086c:	2108      	movs	r1, #8
 800086e:	187b      	adds	r3, r7, r1
 8000870:	701a      	strb	r2, [r3, #0]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000872:	183b      	adds	r3, r7, r0
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	2208      	movs	r2, #8
 8000878:	4313      	orrs	r3, r2
 800087a:	b2da      	uxtb	r2, r3
 800087c:	187b      	adds	r3, r7, r1
 800087e:	705a      	strb	r2, [r3, #1]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000880:	193b      	adds	r3, r7, r4
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	220c      	movs	r2, #12
 8000886:	4313      	orrs	r3, r2
 8000888:	b2da      	uxtb	r2, r3
 800088a:	187b      	adds	r3, r7, r1
 800088c:	709a      	strb	r2, [r3, #2]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 800088e:	193b      	adds	r3, r7, r4
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	2208      	movs	r2, #8
 8000894:	4313      	orrs	r3, r2
 8000896:	b2da      	uxtb	r2, r3
 8000898:	187b      	adds	r3, r7, r1
 800089a:	70da      	strb	r2, [r3, #3]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800089c:	187a      	adds	r2, r7, r1
 800089e:	4805      	ldr	r0, [pc, #20]	; (80008b4 <lcd_send_cmd+0x78>)
 80008a0:	2364      	movs	r3, #100	; 0x64
 80008a2:	9300      	str	r3, [sp, #0]
 80008a4:	2304      	movs	r3, #4
 80008a6:	214e      	movs	r1, #78	; 0x4e
 80008a8:	f001 ff02 	bl	80026b0 <HAL_I2C_Master_Transmit>
}
 80008ac:	46c0      	nop			; (mov r8, r8)
 80008ae:	46bd      	mov	sp, r7
 80008b0:	b005      	add	sp, #20
 80008b2:	bd90      	pop	{r4, r7, pc}
 80008b4:	200000d4 	.word	0x200000d4

080008b8 <lcd_send_data>:

void lcd_send_data (char data)
{
 80008b8:	b590      	push	{r4, r7, lr}
 80008ba:	b087      	sub	sp, #28
 80008bc:	af02      	add	r7, sp, #8
 80008be:	0002      	movs	r2, r0
 80008c0:	1dfb      	adds	r3, r7, #7
 80008c2:	701a      	strb	r2, [r3, #0]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80008c4:	200f      	movs	r0, #15
 80008c6:	183b      	adds	r3, r7, r0
 80008c8:	1dfa      	adds	r2, r7, #7
 80008ca:	7812      	ldrb	r2, [r2, #0]
 80008cc:	210f      	movs	r1, #15
 80008ce:	438a      	bics	r2, r1
 80008d0:	701a      	strb	r2, [r3, #0]
	data_l = ((data<<4)&0xf0);
 80008d2:	1dfb      	adds	r3, r7, #7
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	011a      	lsls	r2, r3, #4
 80008d8:	240e      	movs	r4, #14
 80008da:	193b      	adds	r3, r7, r4
 80008dc:	701a      	strb	r2, [r3, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80008de:	183b      	adds	r3, r7, r0
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	220d      	movs	r2, #13
 80008e4:	4313      	orrs	r3, r2
 80008e6:	b2da      	uxtb	r2, r3
 80008e8:	2108      	movs	r1, #8
 80008ea:	187b      	adds	r3, r7, r1
 80008ec:	701a      	strb	r2, [r3, #0]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80008ee:	183b      	adds	r3, r7, r0
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	2209      	movs	r2, #9
 80008f4:	4313      	orrs	r3, r2
 80008f6:	b2da      	uxtb	r2, r3
 80008f8:	187b      	adds	r3, r7, r1
 80008fa:	705a      	strb	r2, [r3, #1]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80008fc:	193b      	adds	r3, r7, r4
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	220d      	movs	r2, #13
 8000902:	4313      	orrs	r3, r2
 8000904:	b2da      	uxtb	r2, r3
 8000906:	187b      	adds	r3, r7, r1
 8000908:	709a      	strb	r2, [r3, #2]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800090a:	193b      	adds	r3, r7, r4
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	2209      	movs	r2, #9
 8000910:	4313      	orrs	r3, r2
 8000912:	b2da      	uxtb	r2, r3
 8000914:	187b      	adds	r3, r7, r1
 8000916:	70da      	strb	r2, [r3, #3]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000918:	187a      	adds	r2, r7, r1
 800091a:	4805      	ldr	r0, [pc, #20]	; (8000930 <lcd_send_data+0x78>)
 800091c:	2364      	movs	r3, #100	; 0x64
 800091e:	9300      	str	r3, [sp, #0]
 8000920:	2304      	movs	r3, #4
 8000922:	214e      	movs	r1, #78	; 0x4e
 8000924:	f001 fec4 	bl	80026b0 <HAL_I2C_Master_Transmit>
}
 8000928:	46c0      	nop			; (mov r8, r8)
 800092a:	46bd      	mov	sp, r7
 800092c:	b005      	add	sp, #20
 800092e:	bd90      	pop	{r4, r7, pc}
 8000930:	200000d4 	.word	0x200000d4

08000934 <lcd_clear>:

void lcd_clear (void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 800093a:	2080      	movs	r0, #128	; 0x80
 800093c:	f7ff ff7e 	bl	800083c <lcd_send_cmd>
	for (int i=0; i<70; i++)
 8000940:	2300      	movs	r3, #0
 8000942:	607b      	str	r3, [r7, #4]
 8000944:	e005      	b.n	8000952 <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 8000946:	2020      	movs	r0, #32
 8000948:	f7ff ffb6 	bl	80008b8 <lcd_send_data>
	for (int i=0; i<70; i++)
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	3301      	adds	r3, #1
 8000950:	607b      	str	r3, [r7, #4]
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	2b45      	cmp	r3, #69	; 0x45
 8000956:	ddf6      	ble.n	8000946 <lcd_clear+0x12>
	}
}
 8000958:	46c0      	nop			; (mov r8, r8)
 800095a:	46c0      	nop			; (mov r8, r8)
 800095c:	46bd      	mov	sp, r7
 800095e:	b002      	add	sp, #8
 8000960:	bd80      	pop	{r7, pc}

08000962 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8000962:	b580      	push	{r7, lr}
 8000964:	b082      	sub	sp, #8
 8000966:	af00      	add	r7, sp, #0
 8000968:	6078      	str	r0, [r7, #4]
 800096a:	6039      	str	r1, [r7, #0]
    switch (row)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	2b00      	cmp	r3, #0
 8000970:	d003      	beq.n	800097a <lcd_put_cur+0x18>
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	2b01      	cmp	r3, #1
 8000976:	d005      	beq.n	8000984 <lcd_put_cur+0x22>
 8000978:	e009      	b.n	800098e <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	2280      	movs	r2, #128	; 0x80
 800097e:	4313      	orrs	r3, r2
 8000980:	603b      	str	r3, [r7, #0]
            break;
 8000982:	e004      	b.n	800098e <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8000984:	683b      	ldr	r3, [r7, #0]
 8000986:	22c0      	movs	r2, #192	; 0xc0
 8000988:	4313      	orrs	r3, r2
 800098a:	603b      	str	r3, [r7, #0]
            break;
 800098c:	46c0      	nop			; (mov r8, r8)
    }

    lcd_send_cmd (col);
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	b2db      	uxtb	r3, r3
 8000992:	0018      	movs	r0, r3
 8000994:	f7ff ff52 	bl	800083c <lcd_send_cmd>
}
 8000998:	46c0      	nop			; (mov r8, r8)
 800099a:	46bd      	mov	sp, r7
 800099c:	b002      	add	sp, #8
 800099e:	bd80      	pop	{r7, pc}

080009a0 <lcd_init>:


void lcd_init (void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 80009a4:	2032      	movs	r0, #50	; 0x32
 80009a6:	f001 fa4f 	bl	8001e48 <HAL_Delay>
	lcd_send_cmd (0x30);
 80009aa:	2030      	movs	r0, #48	; 0x30
 80009ac:	f7ff ff46 	bl	800083c <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 80009b0:	2005      	movs	r0, #5
 80009b2:	f001 fa49 	bl	8001e48 <HAL_Delay>
	lcd_send_cmd (0x30);
 80009b6:	2030      	movs	r0, #48	; 0x30
 80009b8:	f7ff ff40 	bl	800083c <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 80009bc:	2001      	movs	r0, #1
 80009be:	f001 fa43 	bl	8001e48 <HAL_Delay>
	lcd_send_cmd (0x30);
 80009c2:	2030      	movs	r0, #48	; 0x30
 80009c4:	f7ff ff3a 	bl	800083c <lcd_send_cmd>
	HAL_Delay(10);
 80009c8:	200a      	movs	r0, #10
 80009ca:	f001 fa3d 	bl	8001e48 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 80009ce:	2020      	movs	r0, #32
 80009d0:	f7ff ff34 	bl	800083c <lcd_send_cmd>
	HAL_Delay(10);
 80009d4:	200a      	movs	r0, #10
 80009d6:	f001 fa37 	bl	8001e48 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80009da:	2028      	movs	r0, #40	; 0x28
 80009dc:	f7ff ff2e 	bl	800083c <lcd_send_cmd>
	HAL_Delay(1);
 80009e0:	2001      	movs	r0, #1
 80009e2:	f001 fa31 	bl	8001e48 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80009e6:	2008      	movs	r0, #8
 80009e8:	f7ff ff28 	bl	800083c <lcd_send_cmd>
	HAL_Delay(1);
 80009ec:	2001      	movs	r0, #1
 80009ee:	f001 fa2b 	bl	8001e48 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 80009f2:	2001      	movs	r0, #1
 80009f4:	f7ff ff22 	bl	800083c <lcd_send_cmd>
	HAL_Delay(1);
 80009f8:	2001      	movs	r0, #1
 80009fa:	f001 fa25 	bl	8001e48 <HAL_Delay>
	HAL_Delay(1);
 80009fe:	2001      	movs	r0, #1
 8000a00:	f001 fa22 	bl	8001e48 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000a04:	2006      	movs	r0, #6
 8000a06:	f7ff ff19 	bl	800083c <lcd_send_cmd>
	HAL_Delay(1);
 8000a0a:	2001      	movs	r0, #1
 8000a0c:	f001 fa1c 	bl	8001e48 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000a10:	200c      	movs	r0, #12
 8000a12:	f7ff ff13 	bl	800083c <lcd_send_cmd>
}
 8000a16:	46c0      	nop			; (mov r8, r8)
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}

08000a1c <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000a24:	e006      	b.n	8000a34 <lcd_send_string+0x18>
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	1c5a      	adds	r2, r3, #1
 8000a2a:	607a      	str	r2, [r7, #4]
 8000a2c:	781b      	ldrb	r3, [r3, #0]
 8000a2e:	0018      	movs	r0, r3
 8000a30:	f7ff ff42 	bl	80008b8 <lcd_send_data>
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d1f4      	bne.n	8000a26 <lcd_send_string+0xa>
}
 8000a3c:	46c0      	nop			; (mov r8, r8)
 8000a3e:	46c0      	nop			; (mov r8, r8)
 8000a40:	46bd      	mov	sp, r7
 8000a42:	b002      	add	sp, #8
 8000a44:	bd80      	pop	{r7, pc}
	...

08000a48 <reconocer>:
    char c[5];
    char nombre[100];
}tarjetas[10];

//Esta funcion retornara un 1 en caso de a ver encontrado una tarjeta y un 0 en el caso contrario
int reconocer(){
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0

	 j=0;
 8000a4e:	4b1c      	ldr	r3, [pc, #112]	; (8000ac0 <reconocer+0x78>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
	int count=0;
 8000a54:	2300      	movs	r3, #0
 8000a56:	607b      	str	r3, [r7, #4]
	do {
		for (int var = 0; var < 5; ++var) {//Busqueda de coincidencia de los ID de las tarjetas
 8000a58:	2300      	movs	r3, #0
 8000a5a:	603b      	str	r3, [r7, #0]
 8000a5c:	e017      	b.n	8000a8e <reconocer+0x46>
											//En la estructura
			if (tarjetas[j].c[var]==identificacion[var])
 8000a5e:	4b18      	ldr	r3, [pc, #96]	; (8000ac0 <reconocer+0x78>)
 8000a60:	681a      	ldr	r2, [r3, #0]
 8000a62:	4918      	ldr	r1, [pc, #96]	; (8000ac4 <reconocer+0x7c>)
 8000a64:	0013      	movs	r3, r2
 8000a66:	00db      	lsls	r3, r3, #3
 8000a68:	1a9b      	subs	r3, r3, r2
 8000a6a:	011a      	lsls	r2, r3, #4
 8000a6c:	1ad2      	subs	r2, r2, r3
 8000a6e:	188a      	adds	r2, r1, r2
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	18d3      	adds	r3, r2, r3
 8000a74:	781a      	ldrb	r2, [r3, #0]
 8000a76:	4914      	ldr	r1, [pc, #80]	; (8000ac8 <reconocer+0x80>)
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	18cb      	adds	r3, r1, r3
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	429a      	cmp	r2, r3
 8000a80:	d102      	bne.n	8000a88 <reconocer+0x40>
				    {
				    	count++;
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	3301      	adds	r3, #1
 8000a86:	607b      	str	r3, [r7, #4]
		for (int var = 0; var < 5; ++var) {//Busqueda de coincidencia de los ID de las tarjetas
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	3301      	adds	r3, #1
 8000a8c:	603b      	str	r3, [r7, #0]
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	2b04      	cmp	r3, #4
 8000a92:	dde4      	ble.n	8000a5e <reconocer+0x16>
				    }
		}
		if (count==5) {
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	2b05      	cmp	r3, #5
 8000a98:	d101      	bne.n	8000a9e <reconocer+0x56>
			return 1;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	e00b      	b.n	8000ab6 <reconocer+0x6e>

		} else {
		count=0;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	607b      	str	r3, [r7, #4]
		}

		 j++;
 8000aa2:	4b07      	ldr	r3, [pc, #28]	; (8000ac0 <reconocer+0x78>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	1c5a      	adds	r2, r3, #1
 8000aa8:	4b05      	ldr	r3, [pc, #20]	; (8000ac0 <reconocer+0x78>)
 8000aaa:	601a      	str	r2, [r3, #0]
	} while (j!=10);
 8000aac:	4b04      	ldr	r3, [pc, #16]	; (8000ac0 <reconocer+0x78>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	2b0a      	cmp	r3, #10
 8000ab2:	d1d1      	bne.n	8000a58 <reconocer+0x10>


	return 0;
 8000ab4:	2300      	movs	r3, #0
}
 8000ab6:	0018      	movs	r0, r3
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	b002      	add	sp, #8
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	46c0      	nop			; (mov r8, r8)
 8000ac0:	2000009c 	.word	0x2000009c
 8000ac4:	20000138 	.word	0x20000138
 8000ac8:	200000cc 	.word	0x200000cc

08000acc <agregar>:

//Funcion para agregar tarjetas
//Con la ayuda de la funcion de reconocer podemos saber si ya la tarjeta
//Leida se puede o no agregar en caso de ya estar agregada nos retornara un 1
//indicando que ya esta agregada en el caso contrario un 0
int agregar(){
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
	int pos=0;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	607b      	str	r3, [r7, #4]
if(reconocer()){
 8000ad6:	f7ff ffb7 	bl	8000a48 <reconocer>
 8000ada:	1e03      	subs	r3, r0, #0
 8000adc:	d001      	beq.n	8000ae2 <agregar+0x16>
	return 1;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	e025      	b.n	8000b2e <agregar+0x62>
}
for (int var = 0; var < 10; ++var) {//Posicionamiento en un espacio vacio de la estructura
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	603b      	str	r3, [r7, #0]
 8000ae6:	e00f      	b.n	8000b08 <agregar+0x3c>
									//Para poder agregar la tarjeta
	if(tarjetas[var].c[0]=='\0'){
 8000ae8:	4913      	ldr	r1, [pc, #76]	; (8000b38 <agregar+0x6c>)
 8000aea:	683a      	ldr	r2, [r7, #0]
 8000aec:	0013      	movs	r3, r2
 8000aee:	00db      	lsls	r3, r3, #3
 8000af0:	1a9b      	subs	r3, r3, r2
 8000af2:	011a      	lsls	r2, r3, #4
 8000af4:	1ad2      	subs	r2, r2, r3
 8000af6:	5c53      	ldrb	r3, [r2, r1]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d102      	bne.n	8000b02 <agregar+0x36>
		pos=var;
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	607b      	str	r3, [r7, #4]
		break;
 8000b00:	e005      	b.n	8000b0e <agregar+0x42>
for (int var = 0; var < 10; ++var) {//Posicionamiento en un espacio vacio de la estructura
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	3301      	adds	r3, #1
 8000b06:	603b      	str	r3, [r7, #0]
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	2b09      	cmp	r3, #9
 8000b0c:	ddec      	ble.n	8000ae8 <agregar+0x1c>
	}
}
memcpy(tarjetas[pos].c,identificacion,5);//Copiando tarjeta leida a la posicion pertinente
 8000b0e:	687a      	ldr	r2, [r7, #4]
 8000b10:	0013      	movs	r3, r2
 8000b12:	00db      	lsls	r3, r3, #3
 8000b14:	1a9b      	subs	r3, r3, r2
 8000b16:	011a      	lsls	r2, r3, #4
 8000b18:	1ad2      	subs	r2, r2, r3
 8000b1a:	4b07      	ldr	r3, [pc, #28]	; (8000b38 <agregar+0x6c>)
 8000b1c:	18d2      	adds	r2, r2, r3
 8000b1e:	4b07      	ldr	r3, [pc, #28]	; (8000b3c <agregar+0x70>)
 8000b20:	0010      	movs	r0, r2
 8000b22:	0019      	movs	r1, r3
 8000b24:	2305      	movs	r3, #5
 8000b26:	001a      	movs	r2, r3
 8000b28:	f005 fe94 	bl	8006854 <memcpy>
return 0;
 8000b2c:	2300      	movs	r3, #0
}
 8000b2e:	0018      	movs	r0, r3
 8000b30:	46bd      	mov	sp, r7
 8000b32:	b002      	add	sp, #8
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	46c0      	nop			; (mov r8, r8)
 8000b38:	20000138 	.word	0x20000138
 8000b3c:	200000cc 	.word	0x200000cc

08000b40 <clean>:
void eliminar(int pos){//eliminacion de tarjetas
	for (int var = 0; var < 5; ++var) {
		tarjetas[pos].c[var]='\0';
	}
}
void clean(){//Limpiador del array que almacena los comandos de eliminar y agregar
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
	for (int var = 0; var < 100; ++var) {
 8000b46:	2300      	movs	r3, #0
 8000b48:	607b      	str	r3, [r7, #4]
 8000b4a:	e007      	b.n	8000b5c <clean+0x1c>
		palabra[var]='\0';
 8000b4c:	4a07      	ldr	r2, [pc, #28]	; (8000b6c <clean+0x2c>)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	18d3      	adds	r3, r2, r3
 8000b52:	2200      	movs	r2, #0
 8000b54:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 100; ++var) {
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	3301      	adds	r3, #1
 8000b5a:	607b      	str	r3, [r7, #4]
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	2b63      	cmp	r3, #99	; 0x63
 8000b60:	ddf4      	ble.n	8000b4c <clean+0xc>
	}
}
 8000b62:	46c0      	nop			; (mov r8, r8)
 8000b64:	46c0      	nop			; (mov r8, r8)
 8000b66:	46bd      	mov	sp, r7
 8000b68:	b002      	add	sp, #8
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	20000650 	.word	0x20000650

08000b70 <call>:
void call(){//Llamado de el lector de tarjeta
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
		estado=MFRC522_Request(PICC_REQIDL,str);//Si estado=0 significa que a pasado una tarjeta por el lector
 8000b74:	4b0d      	ldr	r3, [pc, #52]	; (8000bac <call+0x3c>)
 8000b76:	0019      	movs	r1, r3
 8000b78:	2026      	movs	r0, #38	; 0x26
 8000b7a:	f000 fec0 	bl	80018fe <MFRC522_Request>
 8000b7e:	0003      	movs	r3, r0
 8000b80:	001a      	movs	r2, r3
 8000b82:	4b0b      	ldr	r3, [pc, #44]	; (8000bb0 <call+0x40>)
 8000b84:	701a      	strb	r2, [r3, #0]
												//En caso contrario permanecera en 1 o 2 dependiendo si hay o no un error
		 estado=MFRC522_Anticoll(str);
 8000b86:	4b09      	ldr	r3, [pc, #36]	; (8000bac <call+0x3c>)
 8000b88:	0018      	movs	r0, r3
 8000b8a:	f000 fee7 	bl	800195c <MFRC522_Anticoll>
 8000b8e:	0003      	movs	r3, r0
 8000b90:	001a      	movs	r2, r3
 8000b92:	4b07      	ldr	r3, [pc, #28]	; (8000bb0 <call+0x40>)
 8000b94:	701a      	strb	r2, [r3, #0]
		  memcpy(identificacion,str,5);//Copiando la tarjeta leida al array que indica la tarjeta actual
 8000b96:	4a07      	ldr	r2, [pc, #28]	; (8000bb4 <call+0x44>)
 8000b98:	4b04      	ldr	r3, [pc, #16]	; (8000bac <call+0x3c>)
 8000b9a:	0010      	movs	r0, r2
 8000b9c:	0019      	movs	r1, r3
 8000b9e:	2305      	movs	r3, #5
 8000ba0:	001a      	movs	r2, r3
 8000ba2:	f005 fe57 	bl	8006854 <memcpy>
}
 8000ba6:	46c0      	nop			; (mov r8, r8)
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	200006b4 	.word	0x200006b4
 8000bb0:	20000120 	.word	0x20000120
 8000bb4:	200000cc 	.word	0x200000cc

08000bb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bba:	b087      	sub	sp, #28
 8000bbc:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bbe:	f001 f8bd 	bl	8001d3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bc2:	f000 fa4b 	bl	800105c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bc6:	f000 fb77 	bl	80012b8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000bca:	f000 fb27 	bl	800121c <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000bce:	f000 fae7 	bl	80011a0 <MX_SPI1_Init>
  MX_I2C1_Init();
 8000bd2:	f000 faa5 	bl	8001120 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  //Inicializacion de los perifericos y los protocolos de comunicacion
  lcd_init();
 8000bd6:	f7ff fee3 	bl	80009a0 <lcd_init>
MFRC522_Init();
 8000bda:	f000 fd57 	bl	800168c <MFRC522_Init>
HAL_UART_Receive_IT(&huart2, data, 1);
 8000bde:	49e4      	ldr	r1, [pc, #912]	; (8000f70 <main+0x3b8>)
 8000be0:	4be4      	ldr	r3, [pc, #912]	; (8000f74 <main+0x3bc>)
 8000be2:	2201      	movs	r2, #1
 8000be4:	0018      	movs	r0, r3
 8000be6:	f003 fe71 	bl	80048cc <HAL_UART_Receive_IT>
DS1307_Init(&hi2c1);
 8000bea:	4be3      	ldr	r3, [pc, #908]	; (8000f78 <main+0x3c0>)
 8000bec:	0018      	movs	r0, r3
 8000bee:	f7ff fd29 	bl	8000644 <DS1307_Init>
//DS1307_SetDate(30);
//DS1307_SetMonth(4);
//DS1307_SetYear(2022);

//Inicializacion de la tarjeta principal
memcpy(tarjetas[0].nombre,"Miguel",6);//Nombre del usuario principal
 8000bf2:	49e2      	ldr	r1, [pc, #904]	; (8000f7c <main+0x3c4>)
 8000bf4:	4be2      	ldr	r3, [pc, #904]	; (8000f80 <main+0x3c8>)
 8000bf6:	2206      	movs	r2, #6
 8000bf8:	0018      	movs	r0, r3
 8000bfa:	f005 fe2b 	bl	8006854 <memcpy>

//ID de la tarjeta principal en Hexadecimal
tarjetas[0].c[0]=0xAC;
 8000bfe:	4be1      	ldr	r3, [pc, #900]	; (8000f84 <main+0x3cc>)
 8000c00:	22ac      	movs	r2, #172	; 0xac
 8000c02:	701a      	strb	r2, [r3, #0]
tarjetas[0].c[1]=0x6;
 8000c04:	4bdf      	ldr	r3, [pc, #892]	; (8000f84 <main+0x3cc>)
 8000c06:	2206      	movs	r2, #6
 8000c08:	705a      	strb	r2, [r3, #1]
tarjetas[0].c[2]=0xA;
 8000c0a:	4bde      	ldr	r3, [pc, #888]	; (8000f84 <main+0x3cc>)
 8000c0c:	220a      	movs	r2, #10
 8000c0e:	709a      	strb	r2, [r3, #2]
tarjetas[0].c[3]=0x4A;
 8000c10:	4bdc      	ldr	r3, [pc, #880]	; (8000f84 <main+0x3cc>)
 8000c12:	224a      	movs	r2, #74	; 0x4a
 8000c14:	70da      	strb	r2, [r3, #3]
tarjetas[0].c[4]=0xEA;
 8000c16:	4bdb      	ldr	r3, [pc, #876]	; (8000f84 <main+0x3cc>)
 8000c18:	22ea      	movs	r2, #234	; 0xea
 8000c1a:	711a      	strb	r2, [r3, #4]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (!bandera) {//Mensaje el cual se presentara cuando no se haya hecho una accion en el lector de tarjeta
 8000c1c:	4bda      	ldr	r3, [pc, #872]	; (8000f88 <main+0x3d0>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d10f      	bne.n	8000c44 <main+0x8c>
		  lcd_put_cur(0,0);
 8000c24:	2100      	movs	r1, #0
 8000c26:	2000      	movs	r0, #0
 8000c28:	f7ff fe9b 	bl	8000962 <lcd_put_cur>
		  lcd_send_string("Proyecto Final");
 8000c2c:	4bd7      	ldr	r3, [pc, #860]	; (8000f8c <main+0x3d4>)
 8000c2e:	0018      	movs	r0, r3
 8000c30:	f7ff fef4 	bl	8000a1c <lcd_send_string>
		  lcd_put_cur(1,0);
 8000c34:	2100      	movs	r1, #0
 8000c36:	2001      	movs	r0, #1
 8000c38:	f7ff fe93 	bl	8000962 <lcd_put_cur>
		  lcd_send_string("   de micro");
 8000c3c:	4bd4      	ldr	r3, [pc, #848]	; (8000f90 <main+0x3d8>)
 8000c3e:	0018      	movs	r0, r3
 8000c40:	f7ff feec 	bl	8000a1c <lcd_send_string>
	}
	 call();//llamado de la funcion de la tarjeta
 8000c44:	f7ff ff94 	bl	8000b70 <call>
	 if (reconocer()&&j==0) {//Bandera la cual indica que se ejercio alguna accion en el lector de tarjetas
 8000c48:	f7ff fefe 	bl	8000a48 <reconocer>
 8000c4c:	1e03      	subs	r3, r0, #0
 8000c4e:	d006      	beq.n	8000c5e <main+0xa6>
 8000c50:	4bd0      	ldr	r3, [pc, #832]	; (8000f94 <main+0x3dc>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d102      	bne.n	8000c5e <main+0xa6>
		bandera=1;
 8000c58:	4bcb      	ldr	r3, [pc, #812]	; (8000f88 <main+0x3d0>)
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	601a      	str	r2, [r3, #0]
	}


	 //eliminar y agregar tarjetas
	  if(enter==2&&bandera){//confirmacion que se desea borrar o agregar alguna tarjeta
 8000c5e:	4bce      	ldr	r3, [pc, #824]	; (8000f98 <main+0x3e0>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	2b02      	cmp	r3, #2
 8000c64:	d000      	beq.n	8000c68 <main+0xb0>
 8000c66:	e0fa      	b.n	8000e5e <main+0x2a6>
 8000c68:	4bc7      	ldr	r3, [pc, #796]	; (8000f88 <main+0x3d0>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d100      	bne.n	8000c72 <main+0xba>
 8000c70:	e0f5      	b.n	8000e5e <main+0x2a6>

		  if(strcmp(palabra,"agregar")==0){//Confirmacion de que se pidio agregar una tarjeta
 8000c72:	4aca      	ldr	r2, [pc, #808]	; (8000f9c <main+0x3e4>)
 8000c74:	4bca      	ldr	r3, [pc, #808]	; (8000fa0 <main+0x3e8>)
 8000c76:	0011      	movs	r1, r2
 8000c78:	0018      	movs	r0, r3
 8000c7a:	f7ff fa43 	bl	8000104 <strcmp>
 8000c7e:	1e03      	subs	r3, r0, #0
 8000c80:	d15e      	bne.n	8000d40 <main+0x188>

			  lcd_clear();//Limpiador de la pantalla lcd
 8000c82:	f7ff fe57 	bl	8000934 <lcd_clear>
			  lcd_put_cur(0,0);//posicionamiento de la lcd
 8000c86:	2100      	movs	r1, #0
 8000c88:	2000      	movs	r0, #0
 8000c8a:	f7ff fe6a 	bl	8000962 <lcd_put_cur>
			  //mensaje dirigido al usuario
			  lcd_send_string("Introduzca");
 8000c8e:	4bc5      	ldr	r3, [pc, #788]	; (8000fa4 <main+0x3ec>)
 8000c90:	0018      	movs	r0, r3
 8000c92:	f7ff fec3 	bl	8000a1c <lcd_send_string>
			  lcd_put_cur(1,0);
 8000c96:	2100      	movs	r1, #0
 8000c98:	2001      	movs	r0, #1
 8000c9a:	f7ff fe62 	bl	8000962 <lcd_put_cur>
			  lcd_send_string("la tarjeta");
 8000c9e:	4bc2      	ldr	r3, [pc, #776]	; (8000fa8 <main+0x3f0>)
 8000ca0:	0018      	movs	r0, r3
 8000ca2:	f7ff febb 	bl	8000a1c <lcd_send_string>
			  reconocer();//llamado a la funcion de reconocer
 8000ca6:	f7ff fecf 	bl	8000a48 <reconocer>

			  if(estado==0&&j>0){//en el caso que la tarjeta introducida
 8000caa:	4bc0      	ldr	r3, [pc, #768]	; (8000fac <main+0x3f4>)
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d000      	beq.n	8000cb4 <main+0xfc>
 8000cb2:	e1c9      	b.n	8001048 <main+0x490>
 8000cb4:	4bb7      	ldr	r3, [pc, #732]	; (8000f94 <main+0x3dc>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	dc00      	bgt.n	8000cbe <main+0x106>
 8000cbc:	e1c4      	b.n	8001048 <main+0x490>
			  if(agregar()==0){//no sea la principal y no este agregada se agregara
 8000cbe:	f7ff ff05 	bl	8000acc <agregar>
 8000cc2:	1e03      	subs	r3, r0, #0
 8000cc4:	d118      	bne.n	8000cf8 <main+0x140>

				  //Mensaje indicando que se agrego correctamente
				  lcd_clear();
 8000cc6:	f7ff fe35 	bl	8000934 <lcd_clear>
				  lcd_put_cur(0,0);
 8000cca:	2100      	movs	r1, #0
 8000ccc:	2000      	movs	r0, #0
 8000cce:	f7ff fe48 	bl	8000962 <lcd_put_cur>
				  lcd_send_string("Agregado");
 8000cd2:	4bb7      	ldr	r3, [pc, #732]	; (8000fb0 <main+0x3f8>)
 8000cd4:	0018      	movs	r0, r3
 8000cd6:	f7ff fea1 	bl	8000a1c <lcd_send_string>
				  lcd_put_cur(1,0);
 8000cda:	2100      	movs	r1, #0
 8000cdc:	2001      	movs	r0, #1
 8000cde:	f7ff fe40 	bl	8000962 <lcd_put_cur>
				  lcd_send_string("correctamente");
 8000ce2:	4bb4      	ldr	r3, [pc, #720]	; (8000fb4 <main+0x3fc>)
 8000ce4:	0018      	movs	r0, r3
 8000ce6:	f7ff fe99 	bl	8000a1c <lcd_send_string>
				  HAL_Delay(3000);//Tiempo de visualizacion
 8000cea:	4bb3      	ldr	r3, [pc, #716]	; (8000fb8 <main+0x400>)
 8000cec:	0018      	movs	r0, r3
 8000cee:	f001 f8ab 	bl	8001e48 <HAL_Delay>
				  lcd_clear();
 8000cf2:	f7ff fe1f 	bl	8000934 <lcd_clear>
 8000cf6:	e017      	b.n	8000d28 <main+0x170>

			  	}
			  	else{//Mensaje para el usuario en caso de que la tarjeta se encuentre registrada

			  		 lcd_clear();
 8000cf8:	f7ff fe1c 	bl	8000934 <lcd_clear>
					  lcd_put_cur(0,0);
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	2000      	movs	r0, #0
 8000d00:	f7ff fe2f 	bl	8000962 <lcd_put_cur>
					  lcd_send_string("Este usuario");
 8000d04:	4bad      	ldr	r3, [pc, #692]	; (8000fbc <main+0x404>)
 8000d06:	0018      	movs	r0, r3
 8000d08:	f7ff fe88 	bl	8000a1c <lcd_send_string>
					  lcd_put_cur(1,0);
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	2001      	movs	r0, #1
 8000d10:	f7ff fe27 	bl	8000962 <lcd_put_cur>
					  lcd_send_string("ya esta registrado");
 8000d14:	4baa      	ldr	r3, [pc, #680]	; (8000fc0 <main+0x408>)
 8000d16:	0018      	movs	r0, r3
 8000d18:	f7ff fe80 	bl	8000a1c <lcd_send_string>
			  		HAL_Delay(3000);//Tiempo de visualizacion
 8000d1c:	4ba6      	ldr	r3, [pc, #664]	; (8000fb8 <main+0x400>)
 8000d1e:	0018      	movs	r0, r3
 8000d20:	f001 f892 	bl	8001e48 <HAL_Delay>
			  		lcd_clear();
 8000d24:	f7ff fe06 	bl	8000934 <lcd_clear>
			  	}
			  //Reinicio del programa para la entrada de una nueva tarjeta
			  	 clean();
 8000d28:	f7ff ff0a 	bl	8000b40 <clean>
			  	 i=0;
 8000d2c:	4ba5      	ldr	r3, [pc, #660]	; (8000fc4 <main+0x40c>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	601a      	str	r2, [r3, #0]
			  	 enter=0;
 8000d32:	4b99      	ldr	r3, [pc, #612]	; (8000f98 <main+0x3e0>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
			  	 bandera=0;
 8000d38:	4b93      	ldr	r3, [pc, #588]	; (8000f88 <main+0x3d0>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	601a      	str	r2, [r3, #0]
		  if(strcmp(palabra,"agregar")==0){//Confirmacion de que se pidio agregar una tarjeta
 8000d3e:	e183      	b.n	8001048 <main+0x490>
			  }
		 	  }
		  else if(strcmp(palabra,"eliminar")==0){//Confirmacion de que se pidio eliminar una tarjeta
 8000d40:	4aa1      	ldr	r2, [pc, #644]	; (8000fc8 <main+0x410>)
 8000d42:	4b97      	ldr	r3, [pc, #604]	; (8000fa0 <main+0x3e8>)
 8000d44:	0011      	movs	r1, r2
 8000d46:	0018      	movs	r0, r3
 8000d48:	f7ff f9dc 	bl	8000104 <strcmp>
 8000d4c:	1e03      	subs	r3, r0, #0
 8000d4e:	d000      	beq.n	8000d52 <main+0x19a>
 8000d50:	e17a      	b.n	8001048 <main+0x490>

			  //Mensaje al usuario
			  lcd_clear();
 8000d52:	f7ff fdef 	bl	8000934 <lcd_clear>
			  lcd_put_cur(0,0);
 8000d56:	2100      	movs	r1, #0
 8000d58:	2000      	movs	r0, #0
 8000d5a:	f7ff fe02 	bl	8000962 <lcd_put_cur>
			  lcd_send_string("Introduzca");
 8000d5e:	4b91      	ldr	r3, [pc, #580]	; (8000fa4 <main+0x3ec>)
 8000d60:	0018      	movs	r0, r3
 8000d62:	f7ff fe5b 	bl	8000a1c <lcd_send_string>
			  lcd_put_cur(1,0);
 8000d66:	2100      	movs	r1, #0
 8000d68:	2001      	movs	r0, #1
 8000d6a:	f7ff fdfa 	bl	8000962 <lcd_put_cur>
			  lcd_send_string("   la tarjeta");
 8000d6e:	4b97      	ldr	r3, [pc, #604]	; (8000fcc <main+0x414>)
 8000d70:	0018      	movs	r0, r3
 8000d72:	f7ff fe53 	bl	8000a1c <lcd_send_string>

			  	  reconocer();//llamado a la funcion de reconocer
 8000d76:	f7ff fe67 	bl	8000a48 <reconocer>
			  			  if(estado==0&&j>0){//En el caso de reconocer una tarjeta que no sea la principal
 8000d7a:	4b8c      	ldr	r3, [pc, #560]	; (8000fac <main+0x3f4>)
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d000      	beq.n	8000d84 <main+0x1cc>
 8000d82:	e161      	b.n	8001048 <main+0x490>
 8000d84:	4b83      	ldr	r3, [pc, #524]	; (8000f94 <main+0x3dc>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	dc00      	bgt.n	8000d8e <main+0x1d6>
 8000d8c:	e15c      	b.n	8001048 <main+0x490>
			  				  if(reconocer()){//Se procede a borrarla en la ubicacion correspondiente dada por la variable J
 8000d8e:	f7ff fe5b 	bl	8000a48 <reconocer>
 8000d92:	1e03      	subs	r3, r0, #0
 8000d94:	d03f      	beq.n	8000e16 <main+0x25e>

			  					  //Eliminacion del ID de la tarjeta y el nombre de usuario
			  					  for (int var = 0; var < 100; ++var)
 8000d96:	2300      	movs	r3, #0
 8000d98:	607b      	str	r3, [r7, #4]
 8000d9a:	e020      	b.n	8000dde <main+0x226>
			  					{		if (var<5) {
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	2b04      	cmp	r3, #4
 8000da0:	dc0c      	bgt.n	8000dbc <main+0x204>
			  						tarjetas[j].c[var]='\0';
 8000da2:	4b7c      	ldr	r3, [pc, #496]	; (8000f94 <main+0x3dc>)
 8000da4:	681a      	ldr	r2, [r3, #0]
 8000da6:	4977      	ldr	r1, [pc, #476]	; (8000f84 <main+0x3cc>)
 8000da8:	0013      	movs	r3, r2
 8000daa:	00db      	lsls	r3, r3, #3
 8000dac:	1a9b      	subs	r3, r3, r2
 8000dae:	011a      	lsls	r2, r3, #4
 8000db0:	1ad2      	subs	r2, r2, r3
 8000db2:	188a      	adds	r2, r1, r2
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	18d3      	adds	r3, r2, r3
 8000db8:	2200      	movs	r2, #0
 8000dba:	701a      	strb	r2, [r3, #0]
											}
										tarjetas[j].nombre[var]='\0';
 8000dbc:	4b75      	ldr	r3, [pc, #468]	; (8000f94 <main+0x3dc>)
 8000dbe:	681a      	ldr	r2, [r3, #0]
 8000dc0:	4970      	ldr	r1, [pc, #448]	; (8000f84 <main+0x3cc>)
 8000dc2:	0013      	movs	r3, r2
 8000dc4:	00db      	lsls	r3, r3, #3
 8000dc6:	1a9b      	subs	r3, r3, r2
 8000dc8:	011a      	lsls	r2, r3, #4
 8000dca:	1ad2      	subs	r2, r2, r3
 8000dcc:	188a      	adds	r2, r1, r2
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	18d3      	adds	r3, r2, r3
 8000dd2:	3305      	adds	r3, #5
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	701a      	strb	r2, [r3, #0]
			  					  for (int var = 0; var < 100; ++var)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	3301      	adds	r3, #1
 8000ddc:	607b      	str	r3, [r7, #4]
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	2b63      	cmp	r3, #99	; 0x63
 8000de2:	dddb      	ble.n	8000d9c <main+0x1e4>
									}

			  					  //Mensaje para el usuario en el caso de que se efectue la eliminacion
			  					  lcd_clear();
 8000de4:	f7ff fda6 	bl	8000934 <lcd_clear>
								  lcd_put_cur(0,0);
 8000de8:	2100      	movs	r1, #0
 8000dea:	2000      	movs	r0, #0
 8000dec:	f7ff fdb9 	bl	8000962 <lcd_put_cur>
								  lcd_send_string("Elimiacion");
 8000df0:	4b77      	ldr	r3, [pc, #476]	; (8000fd0 <main+0x418>)
 8000df2:	0018      	movs	r0, r3
 8000df4:	f7ff fe12 	bl	8000a1c <lcd_send_string>
								  lcd_put_cur(1,0);
 8000df8:	2100      	movs	r1, #0
 8000dfa:	2001      	movs	r0, #1
 8000dfc:	f7ff fdb1 	bl	8000962 <lcd_put_cur>
								  lcd_send_string("exitosa");
 8000e00:	4b74      	ldr	r3, [pc, #464]	; (8000fd4 <main+0x41c>)
 8000e02:	0018      	movs	r0, r3
 8000e04:	f7ff fe0a 	bl	8000a1c <lcd_send_string>
								  HAL_Delay(3000);//Tiempo de visualizacion
 8000e08:	4b6b      	ldr	r3, [pc, #428]	; (8000fb8 <main+0x400>)
 8000e0a:	0018      	movs	r0, r3
 8000e0c:	f001 f81c 	bl	8001e48 <HAL_Delay>
								  lcd_clear();
 8000e10:	f7ff fd90 	bl	8000934 <lcd_clear>
 8000e14:	e017      	b.n	8000e46 <main+0x28e>
			  							  			  }
			  				  else {//En el caso de que la tarjeta introducida no este agregada se presenta el siguiente mensaje
							  lcd_clear();
 8000e16:	f7ff fd8d 	bl	8000934 <lcd_clear>
							  lcd_put_cur(0,0);
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	2000      	movs	r0, #0
 8000e1e:	f7ff fda0 	bl	8000962 <lcd_put_cur>
							  lcd_send_string("Este usuario no");
 8000e22:	4b6d      	ldr	r3, [pc, #436]	; (8000fd8 <main+0x420>)
 8000e24:	0018      	movs	r0, r3
 8000e26:	f7ff fdf9 	bl	8000a1c <lcd_send_string>
							  lcd_put_cur(1,0);
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	2001      	movs	r0, #1
 8000e2e:	f7ff fd98 	bl	8000962 <lcd_put_cur>
							  lcd_send_string("esta registrado");
 8000e32:	4b6a      	ldr	r3, [pc, #424]	; (8000fdc <main+0x424>)
 8000e34:	0018      	movs	r0, r3
 8000e36:	f7ff fdf1 	bl	8000a1c <lcd_send_string>
			  					  HAL_Delay(3000);
 8000e3a:	4b5f      	ldr	r3, [pc, #380]	; (8000fb8 <main+0x400>)
 8000e3c:	0018      	movs	r0, r3
 8000e3e:	f001 f803 	bl	8001e48 <HAL_Delay>
							  	lcd_clear();
 8000e42:	f7ff fd77 	bl	8000934 <lcd_clear>
							}
			  				//Reinicio del programa para la entrada de una nueva tarjeta
			  				 clean();
 8000e46:	f7ff fe7b 	bl	8000b40 <clean>
							 i=0;
 8000e4a:	4b5e      	ldr	r3, [pc, #376]	; (8000fc4 <main+0x40c>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	601a      	str	r2, [r3, #0]
							 enter=0;
 8000e50:	4b51      	ldr	r3, [pc, #324]	; (8000f98 <main+0x3e0>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	601a      	str	r2, [r3, #0]
							 bandera=0;
 8000e56:	4b4c      	ldr	r3, [pc, #304]	; (8000f88 <main+0x3d0>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	601a      	str	r2, [r3, #0]
		  if(strcmp(palabra,"agregar")==0){//Confirmacion de que se pidio agregar una tarjeta
 8000e5c:	e0f4      	b.n	8001048 <main+0x490>
			  				  }
		  }
	  }
	  else if(estado==0){//Abrir y cerrar puerta
 8000e5e:	4b53      	ldr	r3, [pc, #332]	; (8000fac <main+0x3f4>)
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d000      	beq.n	8000e68 <main+0x2b0>
 8000e66:	e6d9      	b.n	8000c1c <main+0x64>
		  if (reconocer()) {//Si la tarjeta introducida es reconocida se cambia el estado de la puerta
 8000e68:	f7ff fdee 	bl	8000a48 <reconocer>
 8000e6c:	1e03      	subs	r3, r0, #0
 8000e6e:	d100      	bne.n	8000e72 <main+0x2ba>
 8000e70:	e0ce      	b.n	8001010 <main+0x458>

		  	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);//Estado de la puerta
 8000e72:	4b5b      	ldr	r3, [pc, #364]	; (8000fe0 <main+0x428>)
 8000e74:	2108      	movs	r1, #8
 8000e76:	0018      	movs	r0, r3
 8000e78:	f001 fb68 	bl	800254c <HAL_GPIO_TogglePin>

		  	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3)) {//Si la puerta esta abierta
 8000e7c:	4b58      	ldr	r3, [pc, #352]	; (8000fe0 <main+0x428>)
 8000e7e:	2108      	movs	r1, #8
 8000e80:	0018      	movs	r0, r3
 8000e82:	f001 fb29 	bl	80024d8 <HAL_GPIO_ReadPin>
 8000e86:	1e03      	subs	r3, r0, #0
 8000e88:	d061      	beq.n	8000f4e <main+0x396>

		  		//Se presenta el nombre del usuario correspondiente y la hora y fecha al momento
		  		 lcd_clear();
 8000e8a:	f7ff fd53 	bl	8000934 <lcd_clear>
		  		 lcd_put_cur(0,0);
 8000e8e:	2100      	movs	r1, #0
 8000e90:	2000      	movs	r0, #0
 8000e92:	f7ff fd66 	bl	8000962 <lcd_put_cur>
				 lcd_send_string("Saludo");
 8000e96:	4b53      	ldr	r3, [pc, #332]	; (8000fe4 <main+0x42c>)
 8000e98:	0018      	movs	r0, r3
 8000e9a:	f7ff fdbf 	bl	8000a1c <lcd_send_string>
				 lcd_put_cur(0,8);
 8000e9e:	2108      	movs	r1, #8
 8000ea0:	2000      	movs	r0, #0
 8000ea2:	f7ff fd5e 	bl	8000962 <lcd_put_cur>
				 lcd_send_string(tarjetas[j].nombre);//impresion del nombre luego del saludo
 8000ea6:	4b3b      	ldr	r3, [pc, #236]	; (8000f94 <main+0x3dc>)
 8000ea8:	681a      	ldr	r2, [r3, #0]
 8000eaa:	0013      	movs	r3, r2
 8000eac:	00db      	lsls	r3, r3, #3
 8000eae:	1a9b      	subs	r3, r3, r2
 8000eb0:	011a      	lsls	r2, r3, #4
 8000eb2:	1ad2      	subs	r2, r2, r3
 8000eb4:	4b33      	ldr	r3, [pc, #204]	; (8000f84 <main+0x3cc>)
 8000eb6:	18d3      	adds	r3, r2, r3
 8000eb8:	3305      	adds	r3, #5
 8000eba:	0018      	movs	r0, r3
 8000ebc:	f7ff fdae 	bl	8000a1c <lcd_send_string>

				 //Cargar fecha del momento
				 horas = DS1307_GetHour();
 8000ec0:	f7ff fc73 	bl	80007aa <DS1307_GetHour>
 8000ec4:	0003      	movs	r3, r0
 8000ec6:	001a      	movs	r2, r3
 8000ec8:	4b47      	ldr	r3, [pc, #284]	; (8000fe8 <main+0x430>)
 8000eca:	601a      	str	r2, [r3, #0]
				 minutos = DS1307_GetMinute();
 8000ecc:	f7ff fc7e 	bl	80007cc <DS1307_GetMinute>
 8000ed0:	0003      	movs	r3, r0
 8000ed2:	001a      	movs	r2, r3
 8000ed4:	4b45      	ldr	r3, [pc, #276]	; (8000fec <main+0x434>)
 8000ed6:	601a      	str	r2, [r3, #0]
				 segundos = DS1307_GetSecond();
 8000ed8:	f7ff fc85 	bl	80007e6 <DS1307_GetSecond>
 8000edc:	0003      	movs	r3, r0
 8000ede:	001a      	movs	r2, r3
 8000ee0:	4b43      	ldr	r3, [pc, #268]	; (8000ff0 <main+0x438>)
 8000ee2:	601a      	str	r2, [r3, #0]
				 dia=DS1307_GetDate();
 8000ee4:	f7ff fc2a 	bl	800073c <DS1307_GetDate>
 8000ee8:	0003      	movs	r3, r0
 8000eea:	001a      	movs	r2, r3
 8000eec:	4b41      	ldr	r3, [pc, #260]	; (8000ff4 <main+0x43c>)
 8000eee:	601a      	str	r2, [r3, #0]
				 mes=DS1307_GetMonth();
 8000ef0:	f7ff fc31 	bl	8000756 <DS1307_GetMonth>
 8000ef4:	0003      	movs	r3, r0
 8000ef6:	001a      	movs	r2, r3
 8000ef8:	4b3f      	ldr	r3, [pc, #252]	; (8000ff8 <main+0x440>)
 8000efa:	601a      	str	r2, [r3, #0]
				 year=DS1307_GetYear();
 8000efc:	f7ff fc38 	bl	8000770 <DS1307_GetYear>
 8000f00:	0003      	movs	r3, r0
 8000f02:	001a      	movs	r2, r3
 8000f04:	4b3d      	ldr	r3, [pc, #244]	; (8000ffc <main+0x444>)
 8000f06:	601a      	str	r2, [r3, #0]

				sprintf(buff,"%2d:%2d %2d/%2d/%2d",horas,minutos,dia,mes,year);//Array que almacena la fecha y su estilo
 8000f08:	4b37      	ldr	r3, [pc, #220]	; (8000fe8 <main+0x430>)
 8000f0a:	681d      	ldr	r5, [r3, #0]
 8000f0c:	4b37      	ldr	r3, [pc, #220]	; (8000fec <main+0x434>)
 8000f0e:	681e      	ldr	r6, [r3, #0]
 8000f10:	4b38      	ldr	r3, [pc, #224]	; (8000ff4 <main+0x43c>)
 8000f12:	681a      	ldr	r2, [r3, #0]
 8000f14:	4b38      	ldr	r3, [pc, #224]	; (8000ff8 <main+0x440>)
 8000f16:	6819      	ldr	r1, [r3, #0]
 8000f18:	4b38      	ldr	r3, [pc, #224]	; (8000ffc <main+0x444>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4c38      	ldr	r4, [pc, #224]	; (8001000 <main+0x448>)
 8000f1e:	4839      	ldr	r0, [pc, #228]	; (8001004 <main+0x44c>)
 8000f20:	9302      	str	r3, [sp, #8]
 8000f22:	9101      	str	r1, [sp, #4]
 8000f24:	9200      	str	r2, [sp, #0]
 8000f26:	0033      	movs	r3, r6
 8000f28:	002a      	movs	r2, r5
 8000f2a:	0021      	movs	r1, r4
 8000f2c:	f005 fca4 	bl	8006878 <siprintf>
				lcd_put_cur(1,0);
 8000f30:	2100      	movs	r1, #0
 8000f32:	2001      	movs	r0, #1
 8000f34:	f7ff fd15 	bl	8000962 <lcd_put_cur>
				lcd_send_string(buff);//Impresion de la fecha en la fila de abajo
 8000f38:	4b32      	ldr	r3, [pc, #200]	; (8001004 <main+0x44c>)
 8000f3a:	0018      	movs	r0, r3
 8000f3c:	f7ff fd6e 	bl	8000a1c <lcd_send_string>
				HAL_Delay(5000);//Tiempo de visualizacion
 8000f40:	4b31      	ldr	r3, [pc, #196]	; (8001008 <main+0x450>)
 8000f42:	0018      	movs	r0, r3
 8000f44:	f000 ff80 	bl	8001e48 <HAL_Delay>
				lcd_clear();
 8000f48:	f7ff fcf4 	bl	8000934 <lcd_clear>
 8000f4c:	e078      	b.n	8001040 <main+0x488>

		  				}
		  			  	 else
		  			  	 {//En el caso de que la puerta pase de abierto a cerrado
		  			  		 //Se enviara el siguiente mensaje
		  			  	lcd_clear();
 8000f4e:	f7ff fcf1 	bl	8000934 <lcd_clear>
		  			  	lcd_put_cur(0,0);
 8000f52:	2100      	movs	r1, #0
 8000f54:	2000      	movs	r0, #0
 8000f56:	f7ff fd04 	bl	8000962 <lcd_put_cur>
						 lcd_send_string("Adios");
 8000f5a:	4b2c      	ldr	r3, [pc, #176]	; (800100c <main+0x454>)
 8000f5c:	0018      	movs	r0, r3
 8000f5e:	f7ff fd5d 	bl	8000a1c <lcd_send_string>
						 HAL_Delay(3000);//Tiempo de visualizacion
 8000f62:	4b15      	ldr	r3, [pc, #84]	; (8000fb8 <main+0x400>)
 8000f64:	0018      	movs	r0, r3
 8000f66:	f000 ff6f 	bl	8001e48 <HAL_Delay>
						 lcd_clear();
 8000f6a:	f7ff fce3 	bl	8000934 <lcd_clear>
 8000f6e:	e067      	b.n	8001040 <main+0x488>
 8000f70:	20000000 	.word	0x20000000
 8000f74:	200005c0 	.word	0x200005c0
 8000f78:	200000d4 	.word	0x200000d4
 8000f7c:	080070c8 	.word	0x080070c8
 8000f80:	2000013d 	.word	0x2000013d
 8000f84:	20000138 	.word	0x20000138
 8000f88:	20000090 	.word	0x20000090
 8000f8c:	080070d0 	.word	0x080070d0
 8000f90:	080070e0 	.word	0x080070e0
 8000f94:	2000009c 	.word	0x2000009c
 8000f98:	20000098 	.word	0x20000098
 8000f9c:	080070ec 	.word	0x080070ec
 8000fa0:	20000650 	.word	0x20000650
 8000fa4:	080070f4 	.word	0x080070f4
 8000fa8:	08007100 	.word	0x08007100
 8000fac:	20000120 	.word	0x20000120
 8000fb0:	0800710c 	.word	0x0800710c
 8000fb4:	08007118 	.word	0x08007118
 8000fb8:	00000bb8 	.word	0x00000bb8
 8000fbc:	08007128 	.word	0x08007128
 8000fc0:	08007138 	.word	0x08007138
 8000fc4:	20000094 	.word	0x20000094
 8000fc8:	0800714c 	.word	0x0800714c
 8000fcc:	08007158 	.word	0x08007158
 8000fd0:	08007168 	.word	0x08007168
 8000fd4:	08007174 	.word	0x08007174
 8000fd8:	0800717c 	.word	0x0800717c
 8000fdc:	0800718c 	.word	0x0800718c
 8000fe0:	50000400 	.word	0x50000400
 8000fe4:	0800719c 	.word	0x0800719c
 8000fe8:	200000ac 	.word	0x200000ac
 8000fec:	200000a8 	.word	0x200000a8
 8000ff0:	200000a4 	.word	0x200000a4
 8000ff4:	200000b4 	.word	0x200000b4
 8000ff8:	200000b8 	.word	0x200000b8
 8000ffc:	200000b0 	.word	0x200000b0
 8001000:	080071a4 	.word	0x080071a4
 8001004:	20000124 	.word	0x20000124
 8001008:	00001388 	.word	0x00001388
 800100c:	080071b8 	.word	0x080071b8
		  			  	 }
		  }
		  else
		  {//En el caso de que la tarjeta introducida no es reconocida
			  //Se envia el siguiente mensaje
			  lcd_clear();
 8001010:	f7ff fc90 	bl	8000934 <lcd_clear>
			  lcd_put_cur(0,0);
 8001014:	2100      	movs	r1, #0
 8001016:	2000      	movs	r0, #0
 8001018:	f7ff fca3 	bl	8000962 <lcd_put_cur>
			  lcd_send_string("Este usuario no");
 800101c:	4b0b      	ldr	r3, [pc, #44]	; (800104c <main+0x494>)
 800101e:	0018      	movs	r0, r3
 8001020:	f7ff fcfc 	bl	8000a1c <lcd_send_string>
			  lcd_put_cur(1,0);
 8001024:	2100      	movs	r1, #0
 8001026:	2001      	movs	r0, #1
 8001028:	f7ff fc9b 	bl	8000962 <lcd_put_cur>
			  lcd_send_string("esta registrado");
 800102c:	4b08      	ldr	r3, [pc, #32]	; (8001050 <main+0x498>)
 800102e:	0018      	movs	r0, r3
 8001030:	f7ff fcf4 	bl	8000a1c <lcd_send_string>
			  HAL_Delay(3000);//Tiempo de visualizacion
 8001034:	4b07      	ldr	r3, [pc, #28]	; (8001054 <main+0x49c>)
 8001036:	0018      	movs	r0, r3
 8001038:	f000 ff06 	bl	8001e48 <HAL_Delay>
			  lcd_clear();
 800103c:	f7ff fc7a 	bl	8000934 <lcd_clear>
		  }
		  bandera=0;//reinicio para la entrada o la salida del siguiente usuario
 8001040:	4b05      	ldr	r3, [pc, #20]	; (8001058 <main+0x4a0>)
 8001042:	2200      	movs	r2, #0
 8001044:	601a      	str	r2, [r3, #0]
 8001046:	e5e9      	b.n	8000c1c <main+0x64>
		  if(strcmp(palabra,"agregar")==0){//Confirmacion de que se pidio agregar una tarjeta
 8001048:	46c0      	nop			; (mov r8, r8)
	  if (!bandera) {//Mensaje el cual se presentara cuando no se haya hecho una accion en el lector de tarjeta
 800104a:	e5e7      	b.n	8000c1c <main+0x64>
 800104c:	0800717c 	.word	0x0800717c
 8001050:	0800718c 	.word	0x0800718c
 8001054:	00000bb8 	.word	0x00000bb8
 8001058:	20000090 	.word	0x20000090

0800105c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800105c:	b590      	push	{r4, r7, lr}
 800105e:	b0a1      	sub	sp, #132	; 0x84
 8001060:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001062:	2448      	movs	r4, #72	; 0x48
 8001064:	193b      	adds	r3, r7, r4
 8001066:	0018      	movs	r0, r3
 8001068:	2338      	movs	r3, #56	; 0x38
 800106a:	001a      	movs	r2, r3
 800106c:	2100      	movs	r1, #0
 800106e:	f005 fbfa 	bl	8006866 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001072:	2338      	movs	r3, #56	; 0x38
 8001074:	18fb      	adds	r3, r7, r3
 8001076:	0018      	movs	r0, r3
 8001078:	2310      	movs	r3, #16
 800107a:	001a      	movs	r2, r3
 800107c:	2100      	movs	r1, #0
 800107e:	f005 fbf2 	bl	8006866 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001082:	1d3b      	adds	r3, r7, #4
 8001084:	0018      	movs	r0, r3
 8001086:	2334      	movs	r3, #52	; 0x34
 8001088:	001a      	movs	r2, r3
 800108a:	2100      	movs	r1, #0
 800108c:	f005 fbeb 	bl	8006866 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001090:	2380      	movs	r3, #128	; 0x80
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	0018      	movs	r0, r3
 8001096:	f002 f84f 	bl	8003138 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800109a:	193b      	adds	r3, r7, r4
 800109c:	2202      	movs	r2, #2
 800109e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010a0:	193b      	adds	r3, r7, r4
 80010a2:	2280      	movs	r2, #128	; 0x80
 80010a4:	0052      	lsls	r2, r2, #1
 80010a6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80010a8:	193b      	adds	r3, r7, r4
 80010aa:	2200      	movs	r2, #0
 80010ac:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010ae:	193b      	adds	r3, r7, r4
 80010b0:	2240      	movs	r2, #64	; 0x40
 80010b2:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80010b4:	193b      	adds	r3, r7, r4
 80010b6:	2200      	movs	r2, #0
 80010b8:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010ba:	193b      	adds	r3, r7, r4
 80010bc:	0018      	movs	r0, r3
 80010be:	f002 f887 	bl	80031d0 <HAL_RCC_OscConfig>
 80010c2:	1e03      	subs	r3, r0, #0
 80010c4:	d001      	beq.n	80010ca <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80010c6:	f000 fa0b 	bl	80014e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010ca:	2138      	movs	r1, #56	; 0x38
 80010cc:	187b      	adds	r3, r7, r1
 80010ce:	2207      	movs	r2, #7
 80010d0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80010d2:	187b      	adds	r3, r7, r1
 80010d4:	2200      	movs	r2, #0
 80010d6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010d8:	187b      	adds	r3, r7, r1
 80010da:	2200      	movs	r2, #0
 80010dc:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010de:	187b      	adds	r3, r7, r1
 80010e0:	2200      	movs	r2, #0
 80010e2:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80010e4:	187b      	adds	r3, r7, r1
 80010e6:	2100      	movs	r1, #0
 80010e8:	0018      	movs	r0, r3
 80010ea:	f002 fb8b 	bl	8003804 <HAL_RCC_ClockConfig>
 80010ee:	1e03      	subs	r3, r0, #0
 80010f0:	d001      	beq.n	80010f6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80010f2:	f000 f9f5 	bl	80014e0 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 80010f6:	1d3b      	adds	r3, r7, #4
 80010f8:	2222      	movs	r2, #34	; 0x22
 80010fa:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80010fc:	1d3b      	adds	r3, r7, #4
 80010fe:	2200      	movs	r2, #0
 8001100:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001102:	1d3b      	adds	r3, r7, #4
 8001104:	2200      	movs	r2, #0
 8001106:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001108:	1d3b      	adds	r3, r7, #4
 800110a:	0018      	movs	r0, r3
 800110c:	f002 fd24 	bl	8003b58 <HAL_RCCEx_PeriphCLKConfig>
 8001110:	1e03      	subs	r3, r0, #0
 8001112:	d001      	beq.n	8001118 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8001114:	f000 f9e4 	bl	80014e0 <Error_Handler>
  }
}
 8001118:	46c0      	nop			; (mov r8, r8)
 800111a:	46bd      	mov	sp, r7
 800111c:	b021      	add	sp, #132	; 0x84
 800111e:	bd90      	pop	{r4, r7, pc}

08001120 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001124:	4b1b      	ldr	r3, [pc, #108]	; (8001194 <MX_I2C1_Init+0x74>)
 8001126:	4a1c      	ldr	r2, [pc, #112]	; (8001198 <MX_I2C1_Init+0x78>)
 8001128:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 800112a:	4b1a      	ldr	r3, [pc, #104]	; (8001194 <MX_I2C1_Init+0x74>)
 800112c:	4a1b      	ldr	r2, [pc, #108]	; (800119c <MX_I2C1_Init+0x7c>)
 800112e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001130:	4b18      	ldr	r3, [pc, #96]	; (8001194 <MX_I2C1_Init+0x74>)
 8001132:	2200      	movs	r2, #0
 8001134:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001136:	4b17      	ldr	r3, [pc, #92]	; (8001194 <MX_I2C1_Init+0x74>)
 8001138:	2201      	movs	r2, #1
 800113a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800113c:	4b15      	ldr	r3, [pc, #84]	; (8001194 <MX_I2C1_Init+0x74>)
 800113e:	2200      	movs	r2, #0
 8001140:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001142:	4b14      	ldr	r3, [pc, #80]	; (8001194 <MX_I2C1_Init+0x74>)
 8001144:	2200      	movs	r2, #0
 8001146:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001148:	4b12      	ldr	r3, [pc, #72]	; (8001194 <MX_I2C1_Init+0x74>)
 800114a:	2200      	movs	r2, #0
 800114c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800114e:	4b11      	ldr	r3, [pc, #68]	; (8001194 <MX_I2C1_Init+0x74>)
 8001150:	2200      	movs	r2, #0
 8001152:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001154:	4b0f      	ldr	r3, [pc, #60]	; (8001194 <MX_I2C1_Init+0x74>)
 8001156:	2200      	movs	r2, #0
 8001158:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800115a:	4b0e      	ldr	r3, [pc, #56]	; (8001194 <MX_I2C1_Init+0x74>)
 800115c:	0018      	movs	r0, r3
 800115e:	f001 fa11 	bl	8002584 <HAL_I2C_Init>
 8001162:	1e03      	subs	r3, r0, #0
 8001164:	d001      	beq.n	800116a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001166:	f000 f9bb 	bl	80014e0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800116a:	4b0a      	ldr	r3, [pc, #40]	; (8001194 <MX_I2C1_Init+0x74>)
 800116c:	2100      	movs	r1, #0
 800116e:	0018      	movs	r0, r3
 8001170:	f001 ff4a 	bl	8003008 <HAL_I2CEx_ConfigAnalogFilter>
 8001174:	1e03      	subs	r3, r0, #0
 8001176:	d001      	beq.n	800117c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001178:	f000 f9b2 	bl	80014e0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800117c:	4b05      	ldr	r3, [pc, #20]	; (8001194 <MX_I2C1_Init+0x74>)
 800117e:	2100      	movs	r1, #0
 8001180:	0018      	movs	r0, r3
 8001182:	f001 ff8d 	bl	80030a0 <HAL_I2CEx_ConfigDigitalFilter>
 8001186:	1e03      	subs	r3, r0, #0
 8001188:	d001      	beq.n	800118e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800118a:	f000 f9a9 	bl	80014e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800118e:	46c0      	nop			; (mov r8, r8)
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	200000d4 	.word	0x200000d4
 8001198:	40005400 	.word	0x40005400
 800119c:	00303d5b 	.word	0x00303d5b

080011a0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80011a4:	4b1b      	ldr	r3, [pc, #108]	; (8001214 <MX_SPI1_Init+0x74>)
 80011a6:	4a1c      	ldr	r2, [pc, #112]	; (8001218 <MX_SPI1_Init+0x78>)
 80011a8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011aa:	4b1a      	ldr	r3, [pc, #104]	; (8001214 <MX_SPI1_Init+0x74>)
 80011ac:	2282      	movs	r2, #130	; 0x82
 80011ae:	0052      	lsls	r2, r2, #1
 80011b0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80011b2:	4b18      	ldr	r3, [pc, #96]	; (8001214 <MX_SPI1_Init+0x74>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80011b8:	4b16      	ldr	r3, [pc, #88]	; (8001214 <MX_SPI1_Init+0x74>)
 80011ba:	22e0      	movs	r2, #224	; 0xe0
 80011bc:	00d2      	lsls	r2, r2, #3
 80011be:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011c0:	4b14      	ldr	r3, [pc, #80]	; (8001214 <MX_SPI1_Init+0x74>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011c6:	4b13      	ldr	r3, [pc, #76]	; (8001214 <MX_SPI1_Init+0x74>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80011cc:	4b11      	ldr	r3, [pc, #68]	; (8001214 <MX_SPI1_Init+0x74>)
 80011ce:	2280      	movs	r2, #128	; 0x80
 80011d0:	0092      	lsls	r2, r2, #2
 80011d2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80011d4:	4b0f      	ldr	r3, [pc, #60]	; (8001214 <MX_SPI1_Init+0x74>)
 80011d6:	2210      	movs	r2, #16
 80011d8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011da:	4b0e      	ldr	r3, [pc, #56]	; (8001214 <MX_SPI1_Init+0x74>)
 80011dc:	2200      	movs	r2, #0
 80011de:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011e0:	4b0c      	ldr	r3, [pc, #48]	; (8001214 <MX_SPI1_Init+0x74>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011e6:	4b0b      	ldr	r3, [pc, #44]	; (8001214 <MX_SPI1_Init+0x74>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80011ec:	4b09      	ldr	r3, [pc, #36]	; (8001214 <MX_SPI1_Init+0x74>)
 80011ee:	2207      	movs	r2, #7
 80011f0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80011f2:	4b08      	ldr	r3, [pc, #32]	; (8001214 <MX_SPI1_Init+0x74>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80011f8:	4b06      	ldr	r3, [pc, #24]	; (8001214 <MX_SPI1_Init+0x74>)
 80011fa:	2208      	movs	r2, #8
 80011fc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80011fe:	4b05      	ldr	r3, [pc, #20]	; (8001214 <MX_SPI1_Init+0x74>)
 8001200:	0018      	movs	r0, r3
 8001202:	f002 fe61 	bl	8003ec8 <HAL_SPI_Init>
 8001206:	1e03      	subs	r3, r0, #0
 8001208:	d001      	beq.n	800120e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800120a:	f000 f969 	bl	80014e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800120e:	46c0      	nop			; (mov r8, r8)
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	2000055c 	.word	0x2000055c
 8001218:	40013000 	.word	0x40013000

0800121c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001220:	4b23      	ldr	r3, [pc, #140]	; (80012b0 <MX_USART2_UART_Init+0x94>)
 8001222:	4a24      	ldr	r2, [pc, #144]	; (80012b4 <MX_USART2_UART_Init+0x98>)
 8001224:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001226:	4b22      	ldr	r3, [pc, #136]	; (80012b0 <MX_USART2_UART_Init+0x94>)
 8001228:	22e1      	movs	r2, #225	; 0xe1
 800122a:	0252      	lsls	r2, r2, #9
 800122c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800122e:	4b20      	ldr	r3, [pc, #128]	; (80012b0 <MX_USART2_UART_Init+0x94>)
 8001230:	2200      	movs	r2, #0
 8001232:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001234:	4b1e      	ldr	r3, [pc, #120]	; (80012b0 <MX_USART2_UART_Init+0x94>)
 8001236:	2200      	movs	r2, #0
 8001238:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800123a:	4b1d      	ldr	r3, [pc, #116]	; (80012b0 <MX_USART2_UART_Init+0x94>)
 800123c:	2200      	movs	r2, #0
 800123e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001240:	4b1b      	ldr	r3, [pc, #108]	; (80012b0 <MX_USART2_UART_Init+0x94>)
 8001242:	220c      	movs	r2, #12
 8001244:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001246:	4b1a      	ldr	r3, [pc, #104]	; (80012b0 <MX_USART2_UART_Init+0x94>)
 8001248:	2200      	movs	r2, #0
 800124a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800124c:	4b18      	ldr	r3, [pc, #96]	; (80012b0 <MX_USART2_UART_Init+0x94>)
 800124e:	2200      	movs	r2, #0
 8001250:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001252:	4b17      	ldr	r3, [pc, #92]	; (80012b0 <MX_USART2_UART_Init+0x94>)
 8001254:	2200      	movs	r2, #0
 8001256:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001258:	4b15      	ldr	r3, [pc, #84]	; (80012b0 <MX_USART2_UART_Init+0x94>)
 800125a:	2200      	movs	r2, #0
 800125c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800125e:	4b14      	ldr	r3, [pc, #80]	; (80012b0 <MX_USART2_UART_Init+0x94>)
 8001260:	2200      	movs	r2, #0
 8001262:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001264:	4b12      	ldr	r3, [pc, #72]	; (80012b0 <MX_USART2_UART_Init+0x94>)
 8001266:	0018      	movs	r0, r3
 8001268:	f003 fa2e 	bl	80046c8 <HAL_UART_Init>
 800126c:	1e03      	subs	r3, r0, #0
 800126e:	d001      	beq.n	8001274 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001270:	f000 f936 	bl	80014e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001274:	4b0e      	ldr	r3, [pc, #56]	; (80012b0 <MX_USART2_UART_Init+0x94>)
 8001276:	2100      	movs	r1, #0
 8001278:	0018      	movs	r0, r3
 800127a:	f005 f9e1 	bl	8006640 <HAL_UARTEx_SetTxFifoThreshold>
 800127e:	1e03      	subs	r3, r0, #0
 8001280:	d001      	beq.n	8001286 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001282:	f000 f92d 	bl	80014e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001286:	4b0a      	ldr	r3, [pc, #40]	; (80012b0 <MX_USART2_UART_Init+0x94>)
 8001288:	2100      	movs	r1, #0
 800128a:	0018      	movs	r0, r3
 800128c:	f005 fa18 	bl	80066c0 <HAL_UARTEx_SetRxFifoThreshold>
 8001290:	1e03      	subs	r3, r0, #0
 8001292:	d001      	beq.n	8001298 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001294:	f000 f924 	bl	80014e0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001298:	4b05      	ldr	r3, [pc, #20]	; (80012b0 <MX_USART2_UART_Init+0x94>)
 800129a:	0018      	movs	r0, r3
 800129c:	f005 f996 	bl	80065cc <HAL_UARTEx_DisableFifoMode>
 80012a0:	1e03      	subs	r3, r0, #0
 80012a2:	d001      	beq.n	80012a8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80012a4:	f000 f91c 	bl	80014e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012a8:	46c0      	nop			; (mov r8, r8)
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	46c0      	nop			; (mov r8, r8)
 80012b0:	200005c0 	.word	0x200005c0
 80012b4:	40004400 	.word	0x40004400

080012b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012b8:	b590      	push	{r4, r7, lr}
 80012ba:	b08b      	sub	sp, #44	; 0x2c
 80012bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012be:	2414      	movs	r4, #20
 80012c0:	193b      	adds	r3, r7, r4
 80012c2:	0018      	movs	r0, r3
 80012c4:	2314      	movs	r3, #20
 80012c6:	001a      	movs	r2, r3
 80012c8:	2100      	movs	r1, #0
 80012ca:	f005 facc 	bl	8006866 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ce:	4b33      	ldr	r3, [pc, #204]	; (800139c <MX_GPIO_Init+0xe4>)
 80012d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012d2:	4b32      	ldr	r3, [pc, #200]	; (800139c <MX_GPIO_Init+0xe4>)
 80012d4:	2104      	movs	r1, #4
 80012d6:	430a      	orrs	r2, r1
 80012d8:	635a      	str	r2, [r3, #52]	; 0x34
 80012da:	4b30      	ldr	r3, [pc, #192]	; (800139c <MX_GPIO_Init+0xe4>)
 80012dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012de:	2204      	movs	r2, #4
 80012e0:	4013      	ands	r3, r2
 80012e2:	613b      	str	r3, [r7, #16]
 80012e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80012e6:	4b2d      	ldr	r3, [pc, #180]	; (800139c <MX_GPIO_Init+0xe4>)
 80012e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012ea:	4b2c      	ldr	r3, [pc, #176]	; (800139c <MX_GPIO_Init+0xe4>)
 80012ec:	2120      	movs	r1, #32
 80012ee:	430a      	orrs	r2, r1
 80012f0:	635a      	str	r2, [r3, #52]	; 0x34
 80012f2:	4b2a      	ldr	r3, [pc, #168]	; (800139c <MX_GPIO_Init+0xe4>)
 80012f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012f6:	2220      	movs	r2, #32
 80012f8:	4013      	ands	r3, r2
 80012fa:	60fb      	str	r3, [r7, #12]
 80012fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012fe:	4b27      	ldr	r3, [pc, #156]	; (800139c <MX_GPIO_Init+0xe4>)
 8001300:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001302:	4b26      	ldr	r3, [pc, #152]	; (800139c <MX_GPIO_Init+0xe4>)
 8001304:	2101      	movs	r1, #1
 8001306:	430a      	orrs	r2, r1
 8001308:	635a      	str	r2, [r3, #52]	; 0x34
 800130a:	4b24      	ldr	r3, [pc, #144]	; (800139c <MX_GPIO_Init+0xe4>)
 800130c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800130e:	2201      	movs	r2, #1
 8001310:	4013      	ands	r3, r2
 8001312:	60bb      	str	r3, [r7, #8]
 8001314:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001316:	4b21      	ldr	r3, [pc, #132]	; (800139c <MX_GPIO_Init+0xe4>)
 8001318:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800131a:	4b20      	ldr	r3, [pc, #128]	; (800139c <MX_GPIO_Init+0xe4>)
 800131c:	2102      	movs	r1, #2
 800131e:	430a      	orrs	r2, r1
 8001320:	635a      	str	r2, [r3, #52]	; 0x34
 8001322:	4b1e      	ldr	r3, [pc, #120]	; (800139c <MX_GPIO_Init+0xe4>)
 8001324:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001326:	2202      	movs	r2, #2
 8001328:	4013      	ands	r3, r2
 800132a:	607b      	str	r3, [r7, #4]
 800132c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800132e:	23a0      	movs	r3, #160	; 0xa0
 8001330:	05db      	lsls	r3, r3, #23
 8001332:	2200      	movs	r2, #0
 8001334:	2110      	movs	r1, #16
 8001336:	0018      	movs	r0, r3
 8001338:	f001 f8eb 	bl	8002512 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_3, GPIO_PIN_RESET);
 800133c:	4b18      	ldr	r3, [pc, #96]	; (80013a0 <MX_GPIO_Init+0xe8>)
 800133e:	2200      	movs	r2, #0
 8001340:	2109      	movs	r1, #9
 8001342:	0018      	movs	r0, r3
 8001344:	f001 f8e5 	bl	8002512 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001348:	193b      	adds	r3, r7, r4
 800134a:	2210      	movs	r2, #16
 800134c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800134e:	193b      	adds	r3, r7, r4
 8001350:	2201      	movs	r2, #1
 8001352:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001354:	193b      	adds	r3, r7, r4
 8001356:	2200      	movs	r2, #0
 8001358:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135a:	193b      	adds	r3, r7, r4
 800135c:	2200      	movs	r2, #0
 800135e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001360:	193a      	adds	r2, r7, r4
 8001362:	23a0      	movs	r3, #160	; 0xa0
 8001364:	05db      	lsls	r3, r3, #23
 8001366:	0011      	movs	r1, r2
 8001368:	0018      	movs	r0, r3
 800136a:	f000 ff51 	bl	8002210 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 800136e:	0021      	movs	r1, r4
 8001370:	187b      	adds	r3, r7, r1
 8001372:	2209      	movs	r2, #9
 8001374:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001376:	187b      	adds	r3, r7, r1
 8001378:	2201      	movs	r2, #1
 800137a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137c:	187b      	adds	r3, r7, r1
 800137e:	2200      	movs	r2, #0
 8001380:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001382:	187b      	adds	r3, r7, r1
 8001384:	2200      	movs	r2, #0
 8001386:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001388:	187b      	adds	r3, r7, r1
 800138a:	4a05      	ldr	r2, [pc, #20]	; (80013a0 <MX_GPIO_Init+0xe8>)
 800138c:	0019      	movs	r1, r3
 800138e:	0010      	movs	r0, r2
 8001390:	f000 ff3e 	bl	8002210 <HAL_GPIO_Init>

}
 8001394:	46c0      	nop			; (mov r8, r8)
 8001396:	46bd      	mov	sp, r7
 8001398:	b00b      	add	sp, #44	; 0x2c
 800139a:	bd90      	pop	{r4, r7, pc}
 800139c:	40021000 	.word	0x40021000
 80013a0:	50000400 	.word	0x50000400

080013a4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)//Callback del uart
{
 80013a4:	b590      	push	{r4, r7, lr}
 80013a6:	b085      	sub	sp, #20
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
	 HAL_UART_Transmit(&huart2,data, 1,10);//Transmisión por UART
 80013ac:	4943      	ldr	r1, [pc, #268]	; (80014bc <HAL_UART_RxCpltCallback+0x118>)
 80013ae:	4844      	ldr	r0, [pc, #272]	; (80014c0 <HAL_UART_RxCpltCallback+0x11c>)
 80013b0:	230a      	movs	r3, #10
 80013b2:	2201      	movs	r2, #1
 80013b4:	f003 f9de 	bl	8004774 <HAL_UART_Transmit>

	 //Almacenamiento por teclado y activacion de la bandera para eliminar o borrar
	 if(strcmp(palabra,"eliminar")==0){
 80013b8:	4a42      	ldr	r2, [pc, #264]	; (80014c4 <HAL_UART_RxCpltCallback+0x120>)
 80013ba:	4b43      	ldr	r3, [pc, #268]	; (80014c8 <HAL_UART_RxCpltCallback+0x124>)
 80013bc:	0011      	movs	r1, r2
 80013be:	0018      	movs	r0, r3
 80013c0:	f7fe fea0 	bl	8000104 <strcmp>
 80013c4:	1e03      	subs	r3, r0, #0
 80013c6:	d106      	bne.n	80013d6 <HAL_UART_RxCpltCallback+0x32>
		 enter=2;
 80013c8:	4b40      	ldr	r3, [pc, #256]	; (80014cc <HAL_UART_RxCpltCallback+0x128>)
 80013ca:	2202      	movs	r2, #2
 80013cc:	601a      	str	r2, [r3, #0]
		 i=0;
 80013ce:	4b40      	ldr	r3, [pc, #256]	; (80014d0 <HAL_UART_RxCpltCallback+0x12c>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
 80013d4:	e05c      	b.n	8001490 <HAL_UART_RxCpltCallback+0xec>
	 }
	 else if(strcmp(palabra,"agregar")==0&&enter){
 80013d6:	4a3f      	ldr	r2, [pc, #252]	; (80014d4 <HAL_UART_RxCpltCallback+0x130>)
 80013d8:	4b3b      	ldr	r3, [pc, #236]	; (80014c8 <HAL_UART_RxCpltCallback+0x124>)
 80013da:	0011      	movs	r1, r2
 80013dc:	0018      	movs	r0, r3
 80013de:	f7fe fe91 	bl	8000104 <strcmp>
 80013e2:	1e03      	subs	r3, r0, #0
 80013e4:	d125      	bne.n	8001432 <HAL_UART_RxCpltCallback+0x8e>
 80013e6:	4b39      	ldr	r3, [pc, #228]	; (80014cc <HAL_UART_RxCpltCallback+0x128>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d021      	beq.n	8001432 <HAL_UART_RxCpltCallback+0x8e>
		 if(data[0]!='\r')
 80013ee:	4b33      	ldr	r3, [pc, #204]	; (80014bc <HAL_UART_RxCpltCallback+0x118>)
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	2b0d      	cmp	r3, #13
 80013f4:	d016      	beq.n	8001424 <HAL_UART_RxCpltCallback+0x80>
				  {
				  tarjetas[n].nombre[i]=data[0];//Almacenamiento del nombre de usuario
 80013f6:	4b38      	ldr	r3, [pc, #224]	; (80014d8 <HAL_UART_RxCpltCallback+0x134>)
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	4b35      	ldr	r3, [pc, #212]	; (80014d0 <HAL_UART_RxCpltCallback+0x12c>)
 80013fc:	6819      	ldr	r1, [r3, #0]
 80013fe:	4b2f      	ldr	r3, [pc, #188]	; (80014bc <HAL_UART_RxCpltCallback+0x118>)
 8001400:	781c      	ldrb	r4, [r3, #0]
 8001402:	4836      	ldr	r0, [pc, #216]	; (80014dc <HAL_UART_RxCpltCallback+0x138>)
 8001404:	0013      	movs	r3, r2
 8001406:	00db      	lsls	r3, r3, #3
 8001408:	1a9b      	subs	r3, r3, r2
 800140a:	011a      	lsls	r2, r3, #4
 800140c:	1ad2      	subs	r2, r2, r3
 800140e:	1883      	adds	r3, r0, r2
 8001410:	185b      	adds	r3, r3, r1
 8001412:	3305      	adds	r3, #5
 8001414:	1c22      	adds	r2, r4, #0
 8001416:	701a      	strb	r2, [r3, #0]
				  i++;
 8001418:	4b2d      	ldr	r3, [pc, #180]	; (80014d0 <HAL_UART_RxCpltCallback+0x12c>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	1c5a      	adds	r2, r3, #1
 800141e:	4b2c      	ldr	r3, [pc, #176]	; (80014d0 <HAL_UART_RxCpltCallback+0x12c>)
 8001420:	601a      	str	r2, [r3, #0]
		 if(data[0]!='\r')
 8001422:	e035      	b.n	8001490 <HAL_UART_RxCpltCallback+0xec>
				  }
		 	 else {
		 		 enter=2;
 8001424:	4b29      	ldr	r3, [pc, #164]	; (80014cc <HAL_UART_RxCpltCallback+0x128>)
 8001426:	2202      	movs	r2, #2
 8001428:	601a      	str	r2, [r3, #0]
		 		 i=0;
 800142a:	4b29      	ldr	r3, [pc, #164]	; (80014d0 <HAL_UART_RxCpltCallback+0x12c>)
 800142c:	2200      	movs	r2, #0
 800142e:	601a      	str	r2, [r3, #0]
		 if(data[0]!='\r')
 8001430:	e02e      	b.n	8001490 <HAL_UART_RxCpltCallback+0xec>
		 	}

	 }

	 else if(data[0]!='\r')
 8001432:	4b22      	ldr	r3, [pc, #136]	; (80014bc <HAL_UART_RxCpltCallback+0x118>)
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	2b0d      	cmp	r3, #13
 8001438:	d00b      	beq.n	8001452 <HAL_UART_RxCpltCallback+0xae>
		 	 		  {
		 	 		  palabra[i]=data[0];//Almacenamiento de los comandos ya sea eliminar o borrar
 800143a:	4b25      	ldr	r3, [pc, #148]	; (80014d0 <HAL_UART_RxCpltCallback+0x12c>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a1f      	ldr	r2, [pc, #124]	; (80014bc <HAL_UART_RxCpltCallback+0x118>)
 8001440:	7811      	ldrb	r1, [r2, #0]
 8001442:	4a21      	ldr	r2, [pc, #132]	; (80014c8 <HAL_UART_RxCpltCallback+0x124>)
 8001444:	54d1      	strb	r1, [r2, r3]
		 	 		  i++;
 8001446:	4b22      	ldr	r3, [pc, #136]	; (80014d0 <HAL_UART_RxCpltCallback+0x12c>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	1c5a      	adds	r2, r3, #1
 800144c:	4b20      	ldr	r3, [pc, #128]	; (80014d0 <HAL_UART_RxCpltCallback+0x12c>)
 800144e:	601a      	str	r2, [r3, #0]
 8001450:	e01e      	b.n	8001490 <HAL_UART_RxCpltCallback+0xec>
		 	 		  }
	 else {
		 for (int var = 0; var < 10; ++var) {//Ubicacion del nombre de usuario
 8001452:	2300      	movs	r3, #0
 8001454:	60fb      	str	r3, [r7, #12]
 8001456:	e012      	b.n	800147e <HAL_UART_RxCpltCallback+0xda>
		 	if(tarjetas[var].nombre[0]=='\0'){
 8001458:	4920      	ldr	r1, [pc, #128]	; (80014dc <HAL_UART_RxCpltCallback+0x138>)
 800145a:	68fa      	ldr	r2, [r7, #12]
 800145c:	0013      	movs	r3, r2
 800145e:	00db      	lsls	r3, r3, #3
 8001460:	1a9b      	subs	r3, r3, r2
 8001462:	011a      	lsls	r2, r3, #4
 8001464:	1ad2      	subs	r2, r2, r3
 8001466:	188b      	adds	r3, r1, r2
 8001468:	3305      	adds	r3, #5
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d103      	bne.n	8001478 <HAL_UART_RxCpltCallback+0xd4>
		 		n=var;
 8001470:	4b19      	ldr	r3, [pc, #100]	; (80014d8 <HAL_UART_RxCpltCallback+0x134>)
 8001472:	68fa      	ldr	r2, [r7, #12]
 8001474:	601a      	str	r2, [r3, #0]
		 		break;
 8001476:	e005      	b.n	8001484 <HAL_UART_RxCpltCallback+0xe0>
		 for (int var = 0; var < 10; ++var) {//Ubicacion del nombre de usuario
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	3301      	adds	r3, #1
 800147c:	60fb      	str	r3, [r7, #12]
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	2b09      	cmp	r3, #9
 8001482:	dde9      	ble.n	8001458 <HAL_UART_RxCpltCallback+0xb4>
		 	}
		 }
		 enter=1;
 8001484:	4b11      	ldr	r3, [pc, #68]	; (80014cc <HAL_UART_RxCpltCallback+0x128>)
 8001486:	2201      	movs	r2, #1
 8001488:	601a      	str	r2, [r3, #0]
		 i=0;
 800148a:	4b11      	ldr	r3, [pc, #68]	; (80014d0 <HAL_UART_RxCpltCallback+0x12c>)
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]

	}


					if (data[0]=='\b') {//Borrar en el caso de equivocacion
 8001490:	4b0a      	ldr	r3, [pc, #40]	; (80014bc <HAL_UART_RxCpltCallback+0x118>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	2b08      	cmp	r3, #8
 8001496:	d107      	bne.n	80014a8 <HAL_UART_RxCpltCallback+0x104>
						clean();
 8001498:	f7ff fb52 	bl	8000b40 <clean>
						enter=0;
 800149c:	4b0b      	ldr	r3, [pc, #44]	; (80014cc <HAL_UART_RxCpltCallback+0x128>)
 800149e:	2200      	movs	r2, #0
 80014a0:	601a      	str	r2, [r3, #0]
						i=0;
 80014a2:	4b0b      	ldr	r3, [pc, #44]	; (80014d0 <HAL_UART_RxCpltCallback+0x12c>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]
					}



	HAL_UART_Receive_IT(&huart2, data, 1);//Recivir por UART
 80014a8:	4904      	ldr	r1, [pc, #16]	; (80014bc <HAL_UART_RxCpltCallback+0x118>)
 80014aa:	4b05      	ldr	r3, [pc, #20]	; (80014c0 <HAL_UART_RxCpltCallback+0x11c>)
 80014ac:	2201      	movs	r2, #1
 80014ae:	0018      	movs	r0, r3
 80014b0:	f003 fa0c 	bl	80048cc <HAL_UART_Receive_IT>
}
 80014b4:	46c0      	nop			; (mov r8, r8)
 80014b6:	46bd      	mov	sp, r7
 80014b8:	b005      	add	sp, #20
 80014ba:	bd90      	pop	{r4, r7, pc}
 80014bc:	20000000 	.word	0x20000000
 80014c0:	200005c0 	.word	0x200005c0
 80014c4:	0800714c 	.word	0x0800714c
 80014c8:	20000650 	.word	0x20000650
 80014cc:	20000098 	.word	0x20000098
 80014d0:	20000094 	.word	0x20000094
 80014d4:	080070ec 	.word	0x080070ec
 80014d8:	200000a0 	.word	0x200000a0
 80014dc:	20000138 	.word	0x20000138

080014e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014e4:	b672      	cpsid	i
}
 80014e6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014e8:	e7fe      	b.n	80014e8 <Error_Handler+0x8>
	...

080014ec <RC522_SPI_Transfer>:
 * Chuc nang: wait 1 byte is stored in register MFRC522
 * Input:addr-> I just wrote down, val-> Value to record
 * Check: No
 */
uint8_t RC522_SPI_Transfer(uint8_t data)
{
 80014ec:	b590      	push	{r4, r7, lr}
 80014ee:	b087      	sub	sp, #28
 80014f0:	af02      	add	r7, sp, #8
 80014f2:	0002      	movs	r2, r0
 80014f4:	1dfb      	adds	r3, r7, #7
 80014f6:	701a      	strb	r2, [r3, #0]
	uint8_t rx_data;
	HAL_SPI_TransmitReceive(&hspi1,&data,&rx_data,1,100);
 80014f8:	240f      	movs	r4, #15
 80014fa:	193a      	adds	r2, r7, r4
 80014fc:	1df9      	adds	r1, r7, #7
 80014fe:	4806      	ldr	r0, [pc, #24]	; (8001518 <RC522_SPI_Transfer+0x2c>)
 8001500:	2364      	movs	r3, #100	; 0x64
 8001502:	9300      	str	r3, [sp, #0]
 8001504:	2301      	movs	r3, #1
 8001506:	f002 fd97 	bl	8004038 <HAL_SPI_TransmitReceive>
	/*while(SPI_I2S_GetFlagStatus(MFRC522_SPI, SPI_I2S_FLAG_TXE)==RESET);
	SPI_I2S_SendData(MFRC522_SPI,data);

	while(SPI_I2S_GetFlagStatus(MFRC522_SPI, SPI_I2S_FLAG_RXNE)==RESET);
	return SPI_I2S_ReceiveData(MFRC522_SPI);*/
	return rx_data;
 800150a:	193b      	adds	r3, r7, r4
 800150c:	781b      	ldrb	r3, [r3, #0]
}
 800150e:	0018      	movs	r0, r3
 8001510:	46bd      	mov	sp, r7
 8001512:	b005      	add	sp, #20
 8001514:	bd90      	pop	{r4, r7, pc}
 8001516:	46c0      	nop			; (mov r8, r8)
 8001518:	2000055c 	.word	0x2000055c

0800151c <Write_MFRC522>:
 * Note: wait 1 byte is stored in register MFRC522
 * Input: addr-> DIa write only, val-> Value to write
 * Check: No
 */
void Write_MFRC522(uint8_t addr, uint8_t val)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	0002      	movs	r2, r0
 8001524:	1dfb      	adds	r3, r7, #7
 8001526:	701a      	strb	r2, [r3, #0]
 8001528:	1dbb      	adds	r3, r7, #6
 800152a:	1c0a      	adds	r2, r1, #0
 800152c:	701a      	strb	r2, [r3, #0]
	/* CS LOW */
	//GPIO_ResetBits(MFRC522_CS_GPIO, MFRC522_CS_PIN);
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_RESET);
 800152e:	23a0      	movs	r3, #160	; 0xa0
 8001530:	05db      	lsls	r3, r3, #23
 8001532:	2200      	movs	r2, #0
 8001534:	2110      	movs	r1, #16
 8001536:	0018      	movs	r0, r3
 8001538:	f000 ffeb 	bl	8002512 <HAL_GPIO_WritePin>
	//The address is located:0XXXXXX0
	RC522_SPI_Transfer((addr<<1)&0x7E);	
 800153c:	1dfb      	adds	r3, r7, #7
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	005b      	lsls	r3, r3, #1
 8001542:	b2db      	uxtb	r3, r3
 8001544:	227e      	movs	r2, #126	; 0x7e
 8001546:	4013      	ands	r3, r2
 8001548:	b2db      	uxtb	r3, r3
 800154a:	0018      	movs	r0, r3
 800154c:	f7ff ffce 	bl	80014ec <RC522_SPI_Transfer>
	RC522_SPI_Transfer(val);
 8001550:	1dbb      	adds	r3, r7, #6
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	0018      	movs	r0, r3
 8001556:	f7ff ffc9 	bl	80014ec <RC522_SPI_Transfer>
	
	/* CS HIGH */
	//GPIO_SetBits(MFRC522_CS_GPIO, MFRC522_CS_PIN);
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_SET);
 800155a:	23a0      	movs	r3, #160	; 0xa0
 800155c:	05db      	lsls	r3, r3, #23
 800155e:	2201      	movs	r2, #1
 8001560:	2110      	movs	r1, #16
 8001562:	0018      	movs	r0, r3
 8001564:	f000 ffd5 	bl	8002512 <HAL_GPIO_WritePin>
}
 8001568:	46c0      	nop			; (mov r8, r8)
 800156a:	46bd      	mov	sp, r7
 800156c:	b002      	add	sp, #8
 800156e:	bd80      	pop	{r7, pc}

08001570 <Read_MFRC522>:
 * Note: A 1-byte doc is stored from a register MFRC522
 * Input: addr-> address doc
 * Look up: Value in the read register
 */
uint8_t Read_MFRC522(uint8_t addr)
{
 8001570:	b5b0      	push	{r4, r5, r7, lr}
 8001572:	b084      	sub	sp, #16
 8001574:	af00      	add	r7, sp, #0
 8001576:	0002      	movs	r2, r0
 8001578:	1dfb      	adds	r3, r7, #7
 800157a:	701a      	strb	r2, [r3, #0]
	uint8_t val;

	/* CS LOW */
	//GPIO_ResetBits(MFRC522_CS_GPIO, MFRC522_CS_PIN);
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_RESET);
 800157c:	23a0      	movs	r3, #160	; 0xa0
 800157e:	05db      	lsls	r3, r3, #23
 8001580:	2200      	movs	r2, #0
 8001582:	2110      	movs	r1, #16
 8001584:	0018      	movs	r0, r3
 8001586:	f000 ffc4 	bl	8002512 <HAL_GPIO_WritePin>

	//The address is located:1XXXXXX0
	RC522_SPI_Transfer(((addr<<1)&0x7E) | 0x80);	
 800158a:	1dfb      	adds	r3, r7, #7
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	005b      	lsls	r3, r3, #1
 8001590:	b25b      	sxtb	r3, r3
 8001592:	227e      	movs	r2, #126	; 0x7e
 8001594:	4013      	ands	r3, r2
 8001596:	b25b      	sxtb	r3, r3
 8001598:	2280      	movs	r2, #128	; 0x80
 800159a:	4252      	negs	r2, r2
 800159c:	4313      	orrs	r3, r2
 800159e:	b25b      	sxtb	r3, r3
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	0018      	movs	r0, r3
 80015a4:	f7ff ffa2 	bl	80014ec <RC522_SPI_Transfer>
	val = RC522_SPI_Transfer(0x00);
 80015a8:	250f      	movs	r5, #15
 80015aa:	197c      	adds	r4, r7, r5
 80015ac:	2000      	movs	r0, #0
 80015ae:	f7ff ff9d 	bl	80014ec <RC522_SPI_Transfer>
 80015b2:	0003      	movs	r3, r0
 80015b4:	7023      	strb	r3, [r4, #0]
	
	/* CS HIGH */
	//GPIO_SetBits(MFRC522_CS_GPIO, MFRC522_CS_PIN);
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_SET);
 80015b6:	23a0      	movs	r3, #160	; 0xa0
 80015b8:	05db      	lsls	r3, r3, #23
 80015ba:	2201      	movs	r2, #1
 80015bc:	2110      	movs	r1, #16
 80015be:	0018      	movs	r0, r3
 80015c0:	f000 ffa7 	bl	8002512 <HAL_GPIO_WritePin>
	return val;	
 80015c4:	197b      	adds	r3, r7, r5
 80015c6:	781b      	ldrb	r3, [r3, #0]
	
}
 80015c8:	0018      	movs	r0, r3
 80015ca:	46bd      	mov	sp, r7
 80015cc:	b004      	add	sp, #16
 80015ce:	bdb0      	pop	{r4, r5, r7, pc}

080015d0 <SetBitMask>:
 * Note: Set bits in an MFRC522 register
 * Input: reg - Registers settings; mask - value set
 * Check: No
 */
void SetBitMask(uint8_t reg, uint8_t mask)  
{
 80015d0:	b5b0      	push	{r4, r5, r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	0002      	movs	r2, r0
 80015d8:	1dfb      	adds	r3, r7, #7
 80015da:	701a      	strb	r2, [r3, #0]
 80015dc:	1dbb      	adds	r3, r7, #6
 80015de:	1c0a      	adds	r2, r1, #0
 80015e0:	701a      	strb	r2, [r3, #0]
    uint8_t tmp;
    tmp = Read_MFRC522(reg);
 80015e2:	250f      	movs	r5, #15
 80015e4:	197c      	adds	r4, r7, r5
 80015e6:	1dfb      	adds	r3, r7, #7
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	0018      	movs	r0, r3
 80015ec:	f7ff ffc0 	bl	8001570 <Read_MFRC522>
 80015f0:	0003      	movs	r3, r0
 80015f2:	7023      	strb	r3, [r4, #0]
    Write_MFRC522(reg, tmp | mask);  // set bit mask
 80015f4:	197a      	adds	r2, r7, r5
 80015f6:	1dbb      	adds	r3, r7, #6
 80015f8:	7812      	ldrb	r2, [r2, #0]
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	4313      	orrs	r3, r2
 80015fe:	b2da      	uxtb	r2, r3
 8001600:	1dfb      	adds	r3, r7, #7
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	0011      	movs	r1, r2
 8001606:	0018      	movs	r0, r3
 8001608:	f7ff ff88 	bl	800151c <Write_MFRC522>
}
 800160c:	46c0      	nop			; (mov r8, r8)
 800160e:	46bd      	mov	sp, r7
 8001610:	b004      	add	sp, #16
 8001612:	bdb0      	pop	{r4, r5, r7, pc}

08001614 <ClearBitMask>:
 * Note: Reset bit in register MFRC522
 * Input: reg - Dia register; mask - Value bit can clear
 * Check: No
 */
void ClearBitMask(uint8_t reg, uint8_t mask)  
{
 8001614:	b5b0      	push	{r4, r5, r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0
 800161a:	0002      	movs	r2, r0
 800161c:	1dfb      	adds	r3, r7, #7
 800161e:	701a      	strb	r2, [r3, #0]
 8001620:	1dbb      	adds	r3, r7, #6
 8001622:	1c0a      	adds	r2, r1, #0
 8001624:	701a      	strb	r2, [r3, #0]
    uint8_t tmp;
    tmp = Read_MFRC522(reg);
 8001626:	250f      	movs	r5, #15
 8001628:	197c      	adds	r4, r7, r5
 800162a:	1dfb      	adds	r3, r7, #7
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	0018      	movs	r0, r3
 8001630:	f7ff ff9e 	bl	8001570 <Read_MFRC522>
 8001634:	0003      	movs	r3, r0
 8001636:	7023      	strb	r3, [r4, #0]
    Write_MFRC522(reg, tmp & (~mask));  // clear bit mask
 8001638:	1dbb      	adds	r3, r7, #6
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	b25b      	sxtb	r3, r3
 800163e:	43db      	mvns	r3, r3
 8001640:	b25b      	sxtb	r3, r3
 8001642:	197a      	adds	r2, r7, r5
 8001644:	7812      	ldrb	r2, [r2, #0]
 8001646:	b252      	sxtb	r2, r2
 8001648:	4013      	ands	r3, r2
 800164a:	b25b      	sxtb	r3, r3
 800164c:	b2da      	uxtb	r2, r3
 800164e:	1dfb      	adds	r3, r7, #7
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	0011      	movs	r1, r2
 8001654:	0018      	movs	r0, r3
 8001656:	f7ff ff61 	bl	800151c <Write_MFRC522>
} 
 800165a:	46c0      	nop			; (mov r8, r8)
 800165c:	46bd      	mov	sp, r7
 800165e:	b004      	add	sp, #16
 8001660:	bdb0      	pop	{r4, r5, r7, pc}

08001662 <AntennaOn>:
 * Chuc Nang: Mo antenna, should have at least 1 ms
 * Input: no
 * Check: no
 */
void AntennaOn(void)
{
 8001662:	b580      	push	{r7, lr}
 8001664:	af00      	add	r7, sp, #0
	

Read_MFRC522(TxControlReg);
 8001666:	2014      	movs	r0, #20
 8001668:	f7ff ff82 	bl	8001570 <Read_MFRC522>
//	if (!(temp & 0x03))
//	{
//		SetBitMask(TxControlReg, 0x03);
//	}
	SetBitMask(TxControlReg, 0x03);
 800166c:	2103      	movs	r1, #3
 800166e:	2014      	movs	r0, #20
 8001670:	f7ff ffae 	bl	80015d0 <SetBitMask>
}
 8001674:	46c0      	nop			; (mov r8, r8)
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}

0800167a <MFRC522_Reset>:
 * Look: Restart RC522
 * Input: No.
 * Return: No.
 */
void MFRC522_Reset(void)
{
 800167a:	b580      	push	{r7, lr}
 800167c:	af00      	add	r7, sp, #0
    Write_MFRC522(CommandReg, PCD_RESETPHASE);
 800167e:	210f      	movs	r1, #15
 8001680:	2001      	movs	r0, #1
 8001682:	f7ff ff4b 	bl	800151c <Write_MFRC522>
}
 8001686:	46c0      	nop			; (mov r8, r8)
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}

0800168c <MFRC522_Init>:
 * Start RC522
 * Input:  No.
 * Look up:  No.
 */
void MFRC522_Init(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0

	//GPIO_SetBits(MFRC522_CS_GPIO,MFRC522_CS_PIN);						// Activate the RFID reader
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_SET);
 8001690:	23a0      	movs	r3, #160	; 0xa0
 8001692:	05db      	lsls	r3, r3, #23
 8001694:	2201      	movs	r2, #1
 8001696:	2110      	movs	r1, #16
 8001698:	0018      	movs	r0, r3
 800169a:	f000 ff3a 	bl	8002512 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,GPIO_PIN_SET);
 800169e:	4b12      	ldr	r3, [pc, #72]	; (80016e8 <MFRC522_Init+0x5c>)
 80016a0:	2201      	movs	r2, #1
 80016a2:	2101      	movs	r1, #1
 80016a4:	0018      	movs	r0, r3
 80016a6:	f000 ff34 	bl	8002512 <HAL_GPIO_WritePin>
	//GPIO_SetBits(MFRC522_RST_GPIO,MFRC522_RST_PIN);					// not reset

		// spi config
	//MFRC522_SPI_Init();
	
	MFRC522_Reset();
 80016aa:	f7ff ffe6 	bl	800167a <MFRC522_Reset>
	 	
	//Timer: TPrescaler*TreloadVal/6.78MHz = 24ms
	Write_MFRC522(TModeReg, 0x8D);		//auto=1; f(Timer) = 6.78MHz/TPreScaler
 80016ae:	218d      	movs	r1, #141	; 0x8d
 80016b0:	202a      	movs	r0, #42	; 0x2a
 80016b2:	f7ff ff33 	bl	800151c <Write_MFRC522>
	Write_MFRC522(TPrescalerReg, 0x3E);	//TModeReg[3..0] + TPrescalerReg
 80016b6:	213e      	movs	r1, #62	; 0x3e
 80016b8:	202b      	movs	r0, #43	; 0x2b
 80016ba:	f7ff ff2f 	bl	800151c <Write_MFRC522>
	Write_MFRC522(TReloadRegL, 30);           
 80016be:	211e      	movs	r1, #30
 80016c0:	202d      	movs	r0, #45	; 0x2d
 80016c2:	f7ff ff2b 	bl	800151c <Write_MFRC522>
	Write_MFRC522(TReloadRegH, 0);
 80016c6:	2100      	movs	r1, #0
 80016c8:	202c      	movs	r0, #44	; 0x2c
 80016ca:	f7ff ff27 	bl	800151c <Write_MFRC522>
	
	Write_MFRC522(TxAutoReg, 0x40);		//100%ASK
 80016ce:	2140      	movs	r1, #64	; 0x40
 80016d0:	2015      	movs	r0, #21
 80016d2:	f7ff ff23 	bl	800151c <Write_MFRC522>
	Write_MFRC522(ModeReg, 0x3D);		//CRC Original value 0x6363	???
 80016d6:	213d      	movs	r1, #61	; 0x3d
 80016d8:	2011      	movs	r0, #17
 80016da:	f7ff ff1f 	bl	800151c <Write_MFRC522>

	//ClearBitMask(Status2Reg, 0x08);		//MFCrypto1On=0
	//Write_MFRC522(RxSelReg, 0x86);		//RxWait = RxSelReg[5..0]
	//Write_MFRC522(RFCfgReg, 0x7F);   		//RxGain = 48dB

	AntennaOn();		//Mo Anten
 80016de:	f7ff ffc0 	bl	8001662 <AntennaOn>
}
 80016e2:	46c0      	nop			; (mov r8, r8)
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	50000400 	.word	0x50000400

080016ec <MFRC522_ToCard>:
 *			 backData - BackData is returned
 *			 backLen - Retrieve the data number
 * Check: MI_OK if successful
 */
uint8_t MFRC522_ToCard(uint8_t command, uint8_t *sendData, uint8_t sendLen, uint8_t *backData, uint *backLen)
{
 80016ec:	b5b0      	push	{r4, r5, r7, lr}
 80016ee:	b088      	sub	sp, #32
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	60b9      	str	r1, [r7, #8]
 80016f4:	0011      	movs	r1, r2
 80016f6:	607b      	str	r3, [r7, #4]
 80016f8:	240f      	movs	r4, #15
 80016fa:	193b      	adds	r3, r7, r4
 80016fc:	1c02      	adds	r2, r0, #0
 80016fe:	701a      	strb	r2, [r3, #0]
 8001700:	230e      	movs	r3, #14
 8001702:	18fb      	adds	r3, r7, r3
 8001704:	1c0a      	adds	r2, r1, #0
 8001706:	701a      	strb	r2, [r3, #0]
    uint8_t status = MI_ERR;
 8001708:	231f      	movs	r3, #31
 800170a:	18fb      	adds	r3, r7, r3
 800170c:	2202      	movs	r2, #2
 800170e:	701a      	strb	r2, [r3, #0]
    uint8_t irqEn = 0x00;
 8001710:	211e      	movs	r1, #30
 8001712:	187b      	adds	r3, r7, r1
 8001714:	2200      	movs	r2, #0
 8001716:	701a      	strb	r2, [r3, #0]
    uint8_t waitIRq = 0x00;
 8001718:	201d      	movs	r0, #29
 800171a:	183b      	adds	r3, r7, r0
 800171c:	2200      	movs	r2, #0
 800171e:	701a      	strb	r2, [r3, #0]
    uint8_t lastBits;
    uint8_t n;
    uint i;

    switch (command)
 8001720:	193b      	adds	r3, r7, r4
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	2b0c      	cmp	r3, #12
 8001726:	d008      	beq.n	800173a <MFRC522_ToCard+0x4e>
 8001728:	2b0e      	cmp	r3, #14
 800172a:	d10f      	bne.n	800174c <MFRC522_ToCard+0x60>
    {
        case PCD_AUTHENT:		//Acknowledging the liver
		{
			irqEn = 0x12;
 800172c:	187b      	adds	r3, r7, r1
 800172e:	2212      	movs	r2, #18
 8001730:	701a      	strb	r2, [r3, #0]
			waitIRq = 0x10;
 8001732:	183b      	adds	r3, r7, r0
 8001734:	2210      	movs	r2, #16
 8001736:	701a      	strb	r2, [r3, #0]
			break;
 8001738:	e009      	b.n	800174e <MFRC522_ToCard+0x62>
		}
		case PCD_TRANSCEIVE:	// FIFO data collection
		{
			irqEn = 0x77;
 800173a:	231e      	movs	r3, #30
 800173c:	18fb      	adds	r3, r7, r3
 800173e:	2277      	movs	r2, #119	; 0x77
 8001740:	701a      	strb	r2, [r3, #0]
			waitIRq = 0x30;
 8001742:	231d      	movs	r3, #29
 8001744:	18fb      	adds	r3, r7, r3
 8001746:	2230      	movs	r2, #48	; 0x30
 8001748:	701a      	strb	r2, [r3, #0]
			break;
 800174a:	e000      	b.n	800174e <MFRC522_ToCard+0x62>
		}
		default:
			break;
 800174c:	46c0      	nop			; (mov r8, r8)
    }
   
    Write_MFRC522(CommIEnReg, irqEn|0x80);	//Yeu cau ngat
 800174e:	231e      	movs	r3, #30
 8001750:	18fb      	adds	r3, r7, r3
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	2280      	movs	r2, #128	; 0x80
 8001756:	4252      	negs	r2, r2
 8001758:	4313      	orrs	r3, r2
 800175a:	b2db      	uxtb	r3, r3
 800175c:	0019      	movs	r1, r3
 800175e:	2002      	movs	r0, #2
 8001760:	f7ff fedc 	bl	800151c <Write_MFRC522>
    ClearBitMask(CommIrqReg, 0x80);			//Clear all the bits
 8001764:	2180      	movs	r1, #128	; 0x80
 8001766:	2004      	movs	r0, #4
 8001768:	f7ff ff54 	bl	8001614 <ClearBitMask>
    SetBitMask(FIFOLevelReg, 0x80);			//FlushBuffer=1, FIFO
 800176c:	2180      	movs	r1, #128	; 0x80
 800176e:	200a      	movs	r0, #10
 8001770:	f7ff ff2e 	bl	80015d0 <SetBitMask>
    
	Write_MFRC522(CommandReg, PCD_IDLE);	//NO action; Huy bo lenh hien hanh	???
 8001774:	2100      	movs	r1, #0
 8001776:	2001      	movs	r0, #1
 8001778:	f7ff fed0 	bl	800151c <Write_MFRC522>

	// Record in FIFO
    for (i=0; i<sendLen; i++)
 800177c:	2300      	movs	r3, #0
 800177e:	61bb      	str	r3, [r7, #24]
 8001780:	e00a      	b.n	8001798 <MFRC522_ToCard+0xac>
    {   
		Write_MFRC522(FIFODataReg, sendData[i]);    
 8001782:	68ba      	ldr	r2, [r7, #8]
 8001784:	69bb      	ldr	r3, [r7, #24]
 8001786:	18d3      	adds	r3, r2, r3
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	0019      	movs	r1, r3
 800178c:	2009      	movs	r0, #9
 800178e:	f7ff fec5 	bl	800151c <Write_MFRC522>
    for (i=0; i<sendLen; i++)
 8001792:	69bb      	ldr	r3, [r7, #24]
 8001794:	3301      	adds	r3, #1
 8001796:	61bb      	str	r3, [r7, #24]
 8001798:	230e      	movs	r3, #14
 800179a:	18fb      	adds	r3, r7, r3
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	69ba      	ldr	r2, [r7, #24]
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d3ee      	bcc.n	8001782 <MFRC522_ToCard+0x96>
	}

	//chay
	Write_MFRC522(CommandReg, command);
 80017a4:	240f      	movs	r4, #15
 80017a6:	193b      	adds	r3, r7, r4
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	0019      	movs	r1, r3
 80017ac:	2001      	movs	r0, #1
 80017ae:	f7ff feb5 	bl	800151c <Write_MFRC522>
    if (command == PCD_TRANSCEIVE)
 80017b2:	193b      	adds	r3, r7, r4
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	2b0c      	cmp	r3, #12
 80017b8:	d103      	bne.n	80017c2 <MFRC522_ToCard+0xd6>
    {    
		SetBitMask(BitFramingReg, 0x80);		//StartSend=1,transmission of data starts  
 80017ba:	2180      	movs	r1, #128	; 0x80
 80017bc:	200d      	movs	r0, #13
 80017be:	f7ff ff07 	bl	80015d0 <SetBitMask>
	}   
    
	//The team is allowed to be stored
	i = 2000;	//i tuy thuoc tan so thach anh, thoi gian toi da cho the M1 la 25ms
 80017c2:	23fa      	movs	r3, #250	; 0xfa
 80017c4:	00db      	lsls	r3, r3, #3
 80017c6:	61bb      	str	r3, [r7, #24]
    do 
    {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
        n = Read_MFRC522(CommIrqReg);
 80017c8:	251c      	movs	r5, #28
 80017ca:	197c      	adds	r4, r7, r5
 80017cc:	2004      	movs	r0, #4
 80017ce:	f7ff fecf 	bl	8001570 <Read_MFRC522>
 80017d2:	0003      	movs	r3, r0
 80017d4:	7023      	strb	r3, [r4, #0]
        i--;
 80017d6:	69bb      	ldr	r3, [r7, #24]
 80017d8:	3b01      	subs	r3, #1
 80017da:	61bb      	str	r3, [r7, #24]
    }
    while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 80017dc:	69bb      	ldr	r3, [r7, #24]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d00d      	beq.n	80017fe <MFRC522_ToCard+0x112>
 80017e2:	197b      	adds	r3, r7, r5
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	2201      	movs	r2, #1
 80017e8:	4013      	ands	r3, r2
 80017ea:	d108      	bne.n	80017fe <MFRC522_ToCard+0x112>
 80017ec:	197b      	adds	r3, r7, r5
 80017ee:	221d      	movs	r2, #29
 80017f0:	18ba      	adds	r2, r7, r2
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	7812      	ldrb	r2, [r2, #0]
 80017f6:	4013      	ands	r3, r2
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d0e4      	beq.n	80017c8 <MFRC522_ToCard+0xdc>

    ClearBitMask(BitFramingReg, 0x80);			//StartSend=0
 80017fe:	2180      	movs	r1, #128	; 0x80
 8001800:	200d      	movs	r0, #13
 8001802:	f7ff ff07 	bl	8001614 <ClearBitMask>
	
    if (i != 0)
 8001806:	69bb      	ldr	r3, [r7, #24]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d100      	bne.n	800180e <MFRC522_ToCard+0x122>
 800180c:	e070      	b.n	80018f0 <MFRC522_ToCard+0x204>
    {    
        if(!(Read_MFRC522(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
 800180e:	2006      	movs	r0, #6
 8001810:	f7ff feae 	bl	8001570 <Read_MFRC522>
 8001814:	0003      	movs	r3, r0
 8001816:	001a      	movs	r2, r3
 8001818:	231b      	movs	r3, #27
 800181a:	4013      	ands	r3, r2
 800181c:	d164      	bne.n	80018e8 <MFRC522_ToCard+0x1fc>
        {
            status = MI_OK;
 800181e:	211f      	movs	r1, #31
 8001820:	187b      	adds	r3, r7, r1
 8001822:	2200      	movs	r2, #0
 8001824:	701a      	strb	r2, [r3, #0]
            if (n & irqEn & 0x01)
 8001826:	231c      	movs	r3, #28
 8001828:	18fb      	adds	r3, r7, r3
 800182a:	221e      	movs	r2, #30
 800182c:	18ba      	adds	r2, r7, r2
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	7812      	ldrb	r2, [r2, #0]
 8001832:	4013      	ands	r3, r2
 8001834:	b2db      	uxtb	r3, r3
 8001836:	001a      	movs	r2, r3
 8001838:	2301      	movs	r3, #1
 800183a:	4013      	ands	r3, r2
 800183c:	d002      	beq.n	8001844 <MFRC522_ToCard+0x158>
            {   
				status = MI_NOTAGERR;			//??   
 800183e:	187b      	adds	r3, r7, r1
 8001840:	2201      	movs	r2, #1
 8001842:	701a      	strb	r2, [r3, #0]
			}

            if (command == PCD_TRANSCEIVE)
 8001844:	230f      	movs	r3, #15
 8001846:	18fb      	adds	r3, r7, r3
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	2b0c      	cmp	r3, #12
 800184c:	d150      	bne.n	80018f0 <MFRC522_ToCard+0x204>
            {
               	n = Read_MFRC522(FIFOLevelReg);
 800184e:	251c      	movs	r5, #28
 8001850:	197c      	adds	r4, r7, r5
 8001852:	200a      	movs	r0, #10
 8001854:	f7ff fe8c 	bl	8001570 <Read_MFRC522>
 8001858:	0003      	movs	r3, r0
 800185a:	7023      	strb	r3, [r4, #0]
              	lastBits = Read_MFRC522(ControlReg) & 0x07;
 800185c:	200c      	movs	r0, #12
 800185e:	f7ff fe87 	bl	8001570 <Read_MFRC522>
 8001862:	0003      	movs	r3, r0
 8001864:	0019      	movs	r1, r3
 8001866:	2017      	movs	r0, #23
 8001868:	183b      	adds	r3, r7, r0
 800186a:	2207      	movs	r2, #7
 800186c:	400a      	ands	r2, r1
 800186e:	701a      	strb	r2, [r3, #0]
                if (lastBits)
 8001870:	0001      	movs	r1, r0
 8001872:	187b      	adds	r3, r7, r1
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d00a      	beq.n	8001890 <MFRC522_ToCard+0x1a4>
                {   
					*backLen = (n-1)*8 + lastBits;   
 800187a:	197b      	adds	r3, r7, r5
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	3b01      	subs	r3, #1
 8001880:	00da      	lsls	r2, r3, #3
 8001882:	187b      	adds	r3, r7, r1
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	18d3      	adds	r3, r2, r3
 8001888:	001a      	movs	r2, r3
 800188a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800188c:	601a      	str	r2, [r3, #0]
 800188e:	e006      	b.n	800189e <MFRC522_ToCard+0x1b2>
				}
                else
                {   
					*backLen = n*8;   
 8001890:	231c      	movs	r3, #28
 8001892:	18fb      	adds	r3, r7, r3
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	00db      	lsls	r3, r3, #3
 8001898:	001a      	movs	r2, r3
 800189a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800189c:	601a      	str	r2, [r3, #0]
				}

                if (n == 0)
 800189e:	221c      	movs	r2, #28
 80018a0:	18bb      	adds	r3, r7, r2
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d102      	bne.n	80018ae <MFRC522_ToCard+0x1c2>
                {   
					n = 1;    
 80018a8:	18bb      	adds	r3, r7, r2
 80018aa:	2201      	movs	r2, #1
 80018ac:	701a      	strb	r2, [r3, #0]
				}
                if (n > MAX_LEN)
 80018ae:	221c      	movs	r2, #28
 80018b0:	18bb      	adds	r3, r7, r2
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	2b10      	cmp	r3, #16
 80018b6:	d902      	bls.n	80018be <MFRC522_ToCard+0x1d2>
                {   
					n = MAX_LEN;   
 80018b8:	18bb      	adds	r3, r7, r2
 80018ba:	2210      	movs	r2, #16
 80018bc:	701a      	strb	r2, [r3, #0]
				}
				
				//FIFO doc in the received data
                for (i=0; i<n; i++)
 80018be:	2300      	movs	r3, #0
 80018c0:	61bb      	str	r3, [r7, #24]
 80018c2:	e00a      	b.n	80018da <MFRC522_ToCard+0x1ee>
                {   
					backData[i] = Read_MFRC522(FIFODataReg);    
 80018c4:	687a      	ldr	r2, [r7, #4]
 80018c6:	69bb      	ldr	r3, [r7, #24]
 80018c8:	18d4      	adds	r4, r2, r3
 80018ca:	2009      	movs	r0, #9
 80018cc:	f7ff fe50 	bl	8001570 <Read_MFRC522>
 80018d0:	0003      	movs	r3, r0
 80018d2:	7023      	strb	r3, [r4, #0]
                for (i=0; i<n; i++)
 80018d4:	69bb      	ldr	r3, [r7, #24]
 80018d6:	3301      	adds	r3, #1
 80018d8:	61bb      	str	r3, [r7, #24]
 80018da:	231c      	movs	r3, #28
 80018dc:	18fb      	adds	r3, r7, r3
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	69ba      	ldr	r2, [r7, #24]
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d3ee      	bcc.n	80018c4 <MFRC522_ToCard+0x1d8>
 80018e6:	e003      	b.n	80018f0 <MFRC522_ToCard+0x204>
				}
            }
        }
        else
        {   
			status = MI_ERR;  
 80018e8:	231f      	movs	r3, #31
 80018ea:	18fb      	adds	r3, r7, r3
 80018ec:	2202      	movs	r2, #2
 80018ee:	701a      	strb	r2, [r3, #0]
    }
	
    //SetBitMask(ControlReg,0x80);           //timer stops
    //Write_MFRC522(CommandReg, PCD_IDLE); 

    return status;
 80018f0:	231f      	movs	r3, #31
 80018f2:	18fb      	adds	r3, r7, r3
 80018f4:	781b      	ldrb	r3, [r3, #0]
}
 80018f6:	0018      	movs	r0, r3
 80018f8:	46bd      	mov	sp, r7
 80018fa:	b008      	add	sp, #32
 80018fc:	bdb0      	pop	{r4, r5, r7, pc}

080018fe <MFRC522_Request>:
 *				0x0800 = Mifare_Pro(X)
 *				0x4403 = Mifare_DESFire
 * Return: MI_OK if the bar is curved
 */
uint8_t MFRC522_Request(uint8_t reqMode, uint8_t *TagType)
{
 80018fe:	b5b0      	push	{r4, r5, r7, lr}
 8001900:	b086      	sub	sp, #24
 8001902:	af02      	add	r7, sp, #8
 8001904:	0002      	movs	r2, r0
 8001906:	6039      	str	r1, [r7, #0]
 8001908:	1dfb      	adds	r3, r7, #7
 800190a:	701a      	strb	r2, [r3, #0]
	uint8_t status;  
	uint backBits;			//The bits are manipulated

	Write_MFRC522(BitFramingReg, 0x07);		//TxLastBists = BitFramingReg[2..0]	???
 800190c:	2107      	movs	r1, #7
 800190e:	200d      	movs	r0, #13
 8001910:	f7ff fe04 	bl	800151c <Write_MFRC522>
	
	TagType[0] = reqMode;
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	1dfa      	adds	r2, r7, #7
 8001918:	7812      	ldrb	r2, [r2, #0]
 800191a:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 800191c:	250f      	movs	r5, #15
 800191e:	197c      	adds	r4, r7, r5
 8001920:	683a      	ldr	r2, [r7, #0]
 8001922:	6839      	ldr	r1, [r7, #0]
 8001924:	2308      	movs	r3, #8
 8001926:	18fb      	adds	r3, r7, r3
 8001928:	9300      	str	r3, [sp, #0]
 800192a:	0013      	movs	r3, r2
 800192c:	2201      	movs	r2, #1
 800192e:	200c      	movs	r0, #12
 8001930:	f7ff fedc 	bl	80016ec <MFRC522_ToCard>
 8001934:	0003      	movs	r3, r0
 8001936:	7023      	strb	r3, [r4, #0]

	if ((status != MI_OK) || (backBits != 0x10))
 8001938:	197b      	adds	r3, r7, r5
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d102      	bne.n	8001946 <MFRC522_Request+0x48>
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	2b10      	cmp	r3, #16
 8001944:	d003      	beq.n	800194e <MFRC522_Request+0x50>
	{    
		status = MI_ERR;
 8001946:	230f      	movs	r3, #15
 8001948:	18fb      	adds	r3, r7, r3
 800194a:	2202      	movs	r2, #2
 800194c:	701a      	strb	r2, [r3, #0]
	}
   
	return status;
 800194e:	230f      	movs	r3, #15
 8001950:	18fb      	adds	r3, r7, r3
 8001952:	781b      	ldrb	r3, [r3, #0]
}
 8001954:	0018      	movs	r0, r3
 8001956:	46bd      	mov	sp, r7
 8001958:	b004      	add	sp, #16
 800195a:	bdb0      	pop	{r4, r5, r7, pc}

0800195c <MFRC522_Anticoll>:
 * Detect the collision, select and read the serial number
 * Input: serNum - Look up the serial the 4 byte, byte 5 is the ma checksum
 * Check: MI_OK if successful
 */
uint8_t MFRC522_Anticoll(uint8_t *serNum)
{
 800195c:	b5b0      	push	{r4, r5, r7, lr}
 800195e:	b086      	sub	sp, #24
 8001960:	af02      	add	r7, sp, #8
 8001962:	6078      	str	r0, [r7, #4]
    uint8_t status;
    uint8_t i;
	uint8_t serNumCheck=0;
 8001964:	230d      	movs	r3, #13
 8001966:	18fb      	adds	r3, r7, r3
 8001968:	2200      	movs	r2, #0
 800196a:	701a      	strb	r2, [r3, #0]
    uint unLen;
    

    //ClearBitMask(Status2Reg, 0x08);		//TempSensclear
    //ClearBitMask(CollReg,0x80);			//ValuesAfterColl
	Write_MFRC522(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
 800196c:	2100      	movs	r1, #0
 800196e:	200d      	movs	r0, #13
 8001970:	f7ff fdd4 	bl	800151c <Write_MFRC522>
 
    serNum[0] = PICC_ANTICOLL;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2293      	movs	r2, #147	; 0x93
 8001978:	701a      	strb	r2, [r3, #0]
    serNum[1] = 0x20;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	3301      	adds	r3, #1
 800197e:	2220      	movs	r2, #32
 8001980:	701a      	strb	r2, [r3, #0]
    status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 8001982:	250f      	movs	r5, #15
 8001984:	197c      	adds	r4, r7, r5
 8001986:	687a      	ldr	r2, [r7, #4]
 8001988:	6879      	ldr	r1, [r7, #4]
 800198a:	2308      	movs	r3, #8
 800198c:	18fb      	adds	r3, r7, r3
 800198e:	9300      	str	r3, [sp, #0]
 8001990:	0013      	movs	r3, r2
 8001992:	2202      	movs	r2, #2
 8001994:	200c      	movs	r0, #12
 8001996:	f7ff fea9 	bl	80016ec <MFRC522_ToCard>
 800199a:	0003      	movs	r3, r0
 800199c:	7023      	strb	r3, [r4, #0]

    if (status == MI_OK)
 800199e:	197b      	adds	r3, r7, r5
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d128      	bne.n	80019f8 <MFRC522_Anticoll+0x9c>
	{
		//Check the serial number
		for (i=0; i<4; i++)
 80019a6:	230e      	movs	r3, #14
 80019a8:	18fb      	adds	r3, r7, r3
 80019aa:	2200      	movs	r2, #0
 80019ac:	701a      	strb	r2, [r3, #0]
 80019ae:	e010      	b.n	80019d2 <MFRC522_Anticoll+0x76>
		{   
		 	serNumCheck ^= serNum[i];
 80019b0:	200e      	movs	r0, #14
 80019b2:	183b      	adds	r3, r7, r0
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	687a      	ldr	r2, [r7, #4]
 80019b8:	18d3      	adds	r3, r2, r3
 80019ba:	7819      	ldrb	r1, [r3, #0]
 80019bc:	220d      	movs	r2, #13
 80019be:	18bb      	adds	r3, r7, r2
 80019c0:	18ba      	adds	r2, r7, r2
 80019c2:	7812      	ldrb	r2, [r2, #0]
 80019c4:	404a      	eors	r2, r1
 80019c6:	701a      	strb	r2, [r3, #0]
		for (i=0; i<4; i++)
 80019c8:	183b      	adds	r3, r7, r0
 80019ca:	781a      	ldrb	r2, [r3, #0]
 80019cc:	183b      	adds	r3, r7, r0
 80019ce:	3201      	adds	r2, #1
 80019d0:	701a      	strb	r2, [r3, #0]
 80019d2:	220e      	movs	r2, #14
 80019d4:	18bb      	adds	r3, r7, r2
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	2b03      	cmp	r3, #3
 80019da:	d9e9      	bls.n	80019b0 <MFRC522_Anticoll+0x54>
		}
		if (serNumCheck != serNum[i])
 80019dc:	18bb      	adds	r3, r7, r2
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	18d3      	adds	r3, r2, r3
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	220d      	movs	r2, #13
 80019e8:	18ba      	adds	r2, r7, r2
 80019ea:	7812      	ldrb	r2, [r2, #0]
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d003      	beq.n	80019f8 <MFRC522_Anticoll+0x9c>
		{   
			status = MI_ERR;    
 80019f0:	230f      	movs	r3, #15
 80019f2:	18fb      	adds	r3, r7, r3
 80019f4:	2202      	movs	r2, #2
 80019f6:	701a      	strb	r2, [r3, #0]
		}
    }

    //SetBitMask(CollReg, 0x80);		//ValuesAfterColl=1

    return status;
 80019f8:	230f      	movs	r3, #15
 80019fa:	18fb      	adds	r3, r7, r3
 80019fc:	781b      	ldrb	r3, [r3, #0]
} 
 80019fe:	0018      	movs	r0, r3
 8001a00:	46bd      	mov	sp, r7
 8001a02:	b004      	add	sp, #16
 8001a04:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001a08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a0e:	4b11      	ldr	r3, [pc, #68]	; (8001a54 <HAL_MspInit+0x4c>)
 8001a10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a12:	4b10      	ldr	r3, [pc, #64]	; (8001a54 <HAL_MspInit+0x4c>)
 8001a14:	2101      	movs	r1, #1
 8001a16:	430a      	orrs	r2, r1
 8001a18:	641a      	str	r2, [r3, #64]	; 0x40
 8001a1a:	4b0e      	ldr	r3, [pc, #56]	; (8001a54 <HAL_MspInit+0x4c>)
 8001a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1e:	2201      	movs	r2, #1
 8001a20:	4013      	ands	r3, r2
 8001a22:	607b      	str	r3, [r7, #4]
 8001a24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a26:	4b0b      	ldr	r3, [pc, #44]	; (8001a54 <HAL_MspInit+0x4c>)
 8001a28:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a2a:	4b0a      	ldr	r3, [pc, #40]	; (8001a54 <HAL_MspInit+0x4c>)
 8001a2c:	2180      	movs	r1, #128	; 0x80
 8001a2e:	0549      	lsls	r1, r1, #21
 8001a30:	430a      	orrs	r2, r1
 8001a32:	63da      	str	r2, [r3, #60]	; 0x3c
 8001a34:	4b07      	ldr	r3, [pc, #28]	; (8001a54 <HAL_MspInit+0x4c>)
 8001a36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a38:	2380      	movs	r3, #128	; 0x80
 8001a3a:	055b      	lsls	r3, r3, #21
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	603b      	str	r3, [r7, #0]
 8001a40:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8001a42:	23c0      	movs	r3, #192	; 0xc0
 8001a44:	00db      	lsls	r3, r3, #3
 8001a46:	0018      	movs	r0, r3
 8001a48:	f000 fa22 	bl	8001e90 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a4c:	46c0      	nop			; (mov r8, r8)
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	b002      	add	sp, #8
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	40021000 	.word	0x40021000

08001a58 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a58:	b590      	push	{r4, r7, lr}
 8001a5a:	b08b      	sub	sp, #44	; 0x2c
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a60:	2414      	movs	r4, #20
 8001a62:	193b      	adds	r3, r7, r4
 8001a64:	0018      	movs	r0, r3
 8001a66:	2314      	movs	r3, #20
 8001a68:	001a      	movs	r2, r3
 8001a6a:	2100      	movs	r1, #0
 8001a6c:	f004 fefb 	bl	8006866 <memset>
  if(hi2c->Instance==I2C1)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a1c      	ldr	r2, [pc, #112]	; (8001ae8 <HAL_I2C_MspInit+0x90>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d131      	bne.n	8001ade <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a7a:	4b1c      	ldr	r3, [pc, #112]	; (8001aec <HAL_I2C_MspInit+0x94>)
 8001a7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a7e:	4b1b      	ldr	r3, [pc, #108]	; (8001aec <HAL_I2C_MspInit+0x94>)
 8001a80:	2101      	movs	r1, #1
 8001a82:	430a      	orrs	r2, r1
 8001a84:	635a      	str	r2, [r3, #52]	; 0x34
 8001a86:	4b19      	ldr	r3, [pc, #100]	; (8001aec <HAL_I2C_MspInit+0x94>)
 8001a88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	613b      	str	r3, [r7, #16]
 8001a90:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001a92:	193b      	adds	r3, r7, r4
 8001a94:	22c0      	movs	r2, #192	; 0xc0
 8001a96:	00d2      	lsls	r2, r2, #3
 8001a98:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a9a:	0021      	movs	r1, r4
 8001a9c:	187b      	adds	r3, r7, r1
 8001a9e:	2212      	movs	r2, #18
 8001aa0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa2:	187b      	adds	r3, r7, r1
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa8:	187b      	adds	r3, r7, r1
 8001aaa:	2200      	movs	r2, #0
 8001aac:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8001aae:	187b      	adds	r3, r7, r1
 8001ab0:	2206      	movs	r2, #6
 8001ab2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ab4:	187a      	adds	r2, r7, r1
 8001ab6:	23a0      	movs	r3, #160	; 0xa0
 8001ab8:	05db      	lsls	r3, r3, #23
 8001aba:	0011      	movs	r1, r2
 8001abc:	0018      	movs	r0, r3
 8001abe:	f000 fba7 	bl	8002210 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ac2:	4b0a      	ldr	r3, [pc, #40]	; (8001aec <HAL_I2C_MspInit+0x94>)
 8001ac4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001ac6:	4b09      	ldr	r3, [pc, #36]	; (8001aec <HAL_I2C_MspInit+0x94>)
 8001ac8:	2180      	movs	r1, #128	; 0x80
 8001aca:	0389      	lsls	r1, r1, #14
 8001acc:	430a      	orrs	r2, r1
 8001ace:	63da      	str	r2, [r3, #60]	; 0x3c
 8001ad0:	4b06      	ldr	r3, [pc, #24]	; (8001aec <HAL_I2C_MspInit+0x94>)
 8001ad2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001ad4:	2380      	movs	r3, #128	; 0x80
 8001ad6:	039b      	lsls	r3, r3, #14
 8001ad8:	4013      	ands	r3, r2
 8001ada:	60fb      	str	r3, [r7, #12]
 8001adc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001ade:	46c0      	nop			; (mov r8, r8)
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	b00b      	add	sp, #44	; 0x2c
 8001ae4:	bd90      	pop	{r4, r7, pc}
 8001ae6:	46c0      	nop			; (mov r8, r8)
 8001ae8:	40005400 	.word	0x40005400
 8001aec:	40021000 	.word	0x40021000

08001af0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001af0:	b590      	push	{r4, r7, lr}
 8001af2:	b08b      	sub	sp, #44	; 0x2c
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af8:	2414      	movs	r4, #20
 8001afa:	193b      	adds	r3, r7, r4
 8001afc:	0018      	movs	r0, r3
 8001afe:	2314      	movs	r3, #20
 8001b00:	001a      	movs	r2, r3
 8001b02:	2100      	movs	r1, #0
 8001b04:	f004 feaf 	bl	8006866 <memset>
  if(hspi->Instance==SPI1)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a1b      	ldr	r2, [pc, #108]	; (8001b7c <HAL_SPI_MspInit+0x8c>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d130      	bne.n	8001b74 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b12:	4b1b      	ldr	r3, [pc, #108]	; (8001b80 <HAL_SPI_MspInit+0x90>)
 8001b14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b16:	4b1a      	ldr	r3, [pc, #104]	; (8001b80 <HAL_SPI_MspInit+0x90>)
 8001b18:	2180      	movs	r1, #128	; 0x80
 8001b1a:	0149      	lsls	r1, r1, #5
 8001b1c:	430a      	orrs	r2, r1
 8001b1e:	641a      	str	r2, [r3, #64]	; 0x40
 8001b20:	4b17      	ldr	r3, [pc, #92]	; (8001b80 <HAL_SPI_MspInit+0x90>)
 8001b22:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b24:	2380      	movs	r3, #128	; 0x80
 8001b26:	015b      	lsls	r3, r3, #5
 8001b28:	4013      	ands	r3, r2
 8001b2a:	613b      	str	r3, [r7, #16]
 8001b2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b2e:	4b14      	ldr	r3, [pc, #80]	; (8001b80 <HAL_SPI_MspInit+0x90>)
 8001b30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b32:	4b13      	ldr	r3, [pc, #76]	; (8001b80 <HAL_SPI_MspInit+0x90>)
 8001b34:	2101      	movs	r1, #1
 8001b36:	430a      	orrs	r2, r1
 8001b38:	635a      	str	r2, [r3, #52]	; 0x34
 8001b3a:	4b11      	ldr	r3, [pc, #68]	; (8001b80 <HAL_SPI_MspInit+0x90>)
 8001b3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b3e:	2201      	movs	r2, #1
 8001b40:	4013      	ands	r3, r2
 8001b42:	60fb      	str	r3, [r7, #12]
 8001b44:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001b46:	0021      	movs	r1, r4
 8001b48:	187b      	adds	r3, r7, r1
 8001b4a:	22e0      	movs	r2, #224	; 0xe0
 8001b4c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b4e:	187b      	adds	r3, r7, r1
 8001b50:	2202      	movs	r2, #2
 8001b52:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b54:	187b      	adds	r3, r7, r1
 8001b56:	2200      	movs	r2, #0
 8001b58:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b5a:	187b      	adds	r3, r7, r1
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001b60:	187b      	adds	r3, r7, r1
 8001b62:	2200      	movs	r2, #0
 8001b64:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b66:	187a      	adds	r2, r7, r1
 8001b68:	23a0      	movs	r3, #160	; 0xa0
 8001b6a:	05db      	lsls	r3, r3, #23
 8001b6c:	0011      	movs	r1, r2
 8001b6e:	0018      	movs	r0, r3
 8001b70:	f000 fb4e 	bl	8002210 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001b74:	46c0      	nop			; (mov r8, r8)
 8001b76:	46bd      	mov	sp, r7
 8001b78:	b00b      	add	sp, #44	; 0x2c
 8001b7a:	bd90      	pop	{r4, r7, pc}
 8001b7c:	40013000 	.word	0x40013000
 8001b80:	40021000 	.word	0x40021000

08001b84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b84:	b590      	push	{r4, r7, lr}
 8001b86:	b08b      	sub	sp, #44	; 0x2c
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b8c:	2414      	movs	r4, #20
 8001b8e:	193b      	adds	r3, r7, r4
 8001b90:	0018      	movs	r0, r3
 8001b92:	2314      	movs	r3, #20
 8001b94:	001a      	movs	r2, r3
 8001b96:	2100      	movs	r1, #0
 8001b98:	f004 fe65 	bl	8006866 <memset>
  if(huart->Instance==USART2)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a1f      	ldr	r2, [pc, #124]	; (8001c20 <HAL_UART_MspInit+0x9c>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d138      	bne.n	8001c18 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ba6:	4b1f      	ldr	r3, [pc, #124]	; (8001c24 <HAL_UART_MspInit+0xa0>)
 8001ba8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001baa:	4b1e      	ldr	r3, [pc, #120]	; (8001c24 <HAL_UART_MspInit+0xa0>)
 8001bac:	2180      	movs	r1, #128	; 0x80
 8001bae:	0289      	lsls	r1, r1, #10
 8001bb0:	430a      	orrs	r2, r1
 8001bb2:	63da      	str	r2, [r3, #60]	; 0x3c
 8001bb4:	4b1b      	ldr	r3, [pc, #108]	; (8001c24 <HAL_UART_MspInit+0xa0>)
 8001bb6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001bb8:	2380      	movs	r3, #128	; 0x80
 8001bba:	029b      	lsls	r3, r3, #10
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	613b      	str	r3, [r7, #16]
 8001bc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bc2:	4b18      	ldr	r3, [pc, #96]	; (8001c24 <HAL_UART_MspInit+0xa0>)
 8001bc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bc6:	4b17      	ldr	r3, [pc, #92]	; (8001c24 <HAL_UART_MspInit+0xa0>)
 8001bc8:	2101      	movs	r1, #1
 8001bca:	430a      	orrs	r2, r1
 8001bcc:	635a      	str	r2, [r3, #52]	; 0x34
 8001bce:	4b15      	ldr	r3, [pc, #84]	; (8001c24 <HAL_UART_MspInit+0xa0>)
 8001bd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	60fb      	str	r3, [r7, #12]
 8001bd8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8001bda:	0021      	movs	r1, r4
 8001bdc:	187b      	adds	r3, r7, r1
 8001bde:	220c      	movs	r2, #12
 8001be0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be2:	187b      	adds	r3, r7, r1
 8001be4:	2202      	movs	r2, #2
 8001be6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001be8:	187b      	adds	r3, r7, r1
 8001bea:	2201      	movs	r2, #1
 8001bec:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bee:	187b      	adds	r3, r7, r1
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001bf4:	187b      	adds	r3, r7, r1
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bfa:	187a      	adds	r2, r7, r1
 8001bfc:	23a0      	movs	r3, #160	; 0xa0
 8001bfe:	05db      	lsls	r3, r3, #23
 8001c00:	0011      	movs	r1, r2
 8001c02:	0018      	movs	r0, r3
 8001c04:	f000 fb04 	bl	8002210 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001c08:	2200      	movs	r2, #0
 8001c0a:	2100      	movs	r1, #0
 8001c0c:	201c      	movs	r0, #28
 8001c0e:	f000 fa01 	bl	8002014 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001c12:	201c      	movs	r0, #28
 8001c14:	f000 fa13 	bl	800203e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001c18:	46c0      	nop			; (mov r8, r8)
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	b00b      	add	sp, #44	; 0x2c
 8001c1e:	bd90      	pop	{r4, r7, pc}
 8001c20:	40004400 	.word	0x40004400
 8001c24:	40021000 	.word	0x40021000

08001c28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c2c:	e7fe      	b.n	8001c2c <NMI_Handler+0x4>

08001c2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c2e:	b580      	push	{r7, lr}
 8001c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c32:	e7fe      	b.n	8001c32 <HardFault_Handler+0x4>

08001c34 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001c38:	46c0      	nop			; (mov r8, r8)
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}

08001c3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c3e:	b580      	push	{r7, lr}
 8001c40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c42:	46c0      	nop			; (mov r8, r8)
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}

08001c48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c4c:	f000 f8e0 	bl	8001e10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c50:	46c0      	nop			; (mov r8, r8)
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
	...

08001c58 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001c5c:	4b03      	ldr	r3, [pc, #12]	; (8001c6c <USART2_IRQHandler+0x14>)
 8001c5e:	0018      	movs	r0, r3
 8001c60:	f002 fe9e 	bl	80049a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001c64:	46c0      	nop			; (mov r8, r8)
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	46c0      	nop			; (mov r8, r8)
 8001c6c:	200005c0 	.word	0x200005c0

08001c70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b086      	sub	sp, #24
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c78:	4a14      	ldr	r2, [pc, #80]	; (8001ccc <_sbrk+0x5c>)
 8001c7a:	4b15      	ldr	r3, [pc, #84]	; (8001cd0 <_sbrk+0x60>)
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c84:	4b13      	ldr	r3, [pc, #76]	; (8001cd4 <_sbrk+0x64>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d102      	bne.n	8001c92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c8c:	4b11      	ldr	r3, [pc, #68]	; (8001cd4 <_sbrk+0x64>)
 8001c8e:	4a12      	ldr	r2, [pc, #72]	; (8001cd8 <_sbrk+0x68>)
 8001c90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c92:	4b10      	ldr	r3, [pc, #64]	; (8001cd4 <_sbrk+0x64>)
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	18d3      	adds	r3, r2, r3
 8001c9a:	693a      	ldr	r2, [r7, #16]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d207      	bcs.n	8001cb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ca0:	f004 fdae 	bl	8006800 <__errno>
 8001ca4:	0003      	movs	r3, r0
 8001ca6:	220c      	movs	r2, #12
 8001ca8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001caa:	2301      	movs	r3, #1
 8001cac:	425b      	negs	r3, r3
 8001cae:	e009      	b.n	8001cc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cb0:	4b08      	ldr	r3, [pc, #32]	; (8001cd4 <_sbrk+0x64>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cb6:	4b07      	ldr	r3, [pc, #28]	; (8001cd4 <_sbrk+0x64>)
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	18d2      	adds	r2, r2, r3
 8001cbe:	4b05      	ldr	r3, [pc, #20]	; (8001cd4 <_sbrk+0x64>)
 8001cc0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
}
 8001cc4:	0018      	movs	r0, r3
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	b006      	add	sp, #24
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	20009000 	.word	0x20009000
 8001cd0:	00000400 	.word	0x00000400
 8001cd4:	200000bc 	.word	0x200000bc
 8001cd8:	200006d8 	.word	0x200006d8

08001cdc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ce0:	46c0      	nop			; (mov r8, r8)
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
	...

08001ce8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001ce8:	480d      	ldr	r0, [pc, #52]	; (8001d20 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001cea:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001cec:	f7ff fff6 	bl	8001cdc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001cf0:	480c      	ldr	r0, [pc, #48]	; (8001d24 <LoopForever+0x6>)
  ldr r1, =_edata
 8001cf2:	490d      	ldr	r1, [pc, #52]	; (8001d28 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001cf4:	4a0d      	ldr	r2, [pc, #52]	; (8001d2c <LoopForever+0xe>)
  movs r3, #0
 8001cf6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cf8:	e002      	b.n	8001d00 <LoopCopyDataInit>

08001cfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cfe:	3304      	adds	r3, #4

08001d00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d04:	d3f9      	bcc.n	8001cfa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d06:	4a0a      	ldr	r2, [pc, #40]	; (8001d30 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d08:	4c0a      	ldr	r4, [pc, #40]	; (8001d34 <LoopForever+0x16>)
  movs r3, #0
 8001d0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d0c:	e001      	b.n	8001d12 <LoopFillZerobss>

08001d0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d10:	3204      	adds	r2, #4

08001d12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d14:	d3fb      	bcc.n	8001d0e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001d16:	f004 fd79 	bl	800680c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001d1a:	f7fe ff4d 	bl	8000bb8 <main>

08001d1e <LoopForever>:

LoopForever:
  b LoopForever
 8001d1e:	e7fe      	b.n	8001d1e <LoopForever>
  ldr   r0, =_estack
 8001d20:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8001d24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d28:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001d2c:	0800728c 	.word	0x0800728c
  ldr r2, =_sbss
 8001d30:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001d34:	200006d8 	.word	0x200006d8

08001d38 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d38:	e7fe      	b.n	8001d38 <ADC1_COMP_IRQHandler>
	...

08001d3c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d42:	1dfb      	adds	r3, r7, #7
 8001d44:	2200      	movs	r2, #0
 8001d46:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d48:	4b0b      	ldr	r3, [pc, #44]	; (8001d78 <HAL_Init+0x3c>)
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	4b0a      	ldr	r3, [pc, #40]	; (8001d78 <HAL_Init+0x3c>)
 8001d4e:	2180      	movs	r1, #128	; 0x80
 8001d50:	0049      	lsls	r1, r1, #1
 8001d52:	430a      	orrs	r2, r1
 8001d54:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d56:	2000      	movs	r0, #0
 8001d58:	f000 f810 	bl	8001d7c <HAL_InitTick>
 8001d5c:	1e03      	subs	r3, r0, #0
 8001d5e:	d003      	beq.n	8001d68 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001d60:	1dfb      	adds	r3, r7, #7
 8001d62:	2201      	movs	r2, #1
 8001d64:	701a      	strb	r2, [r3, #0]
 8001d66:	e001      	b.n	8001d6c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001d68:	f7ff fe4e 	bl	8001a08 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d6c:	1dfb      	adds	r3, r7, #7
 8001d6e:	781b      	ldrb	r3, [r3, #0]
}
 8001d70:	0018      	movs	r0, r3
 8001d72:	46bd      	mov	sp, r7
 8001d74:	b002      	add	sp, #8
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	40022000 	.word	0x40022000

08001d7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d7c:	b590      	push	{r4, r7, lr}
 8001d7e:	b085      	sub	sp, #20
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d84:	230f      	movs	r3, #15
 8001d86:	18fb      	adds	r3, r7, r3
 8001d88:	2200      	movs	r2, #0
 8001d8a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001d8c:	4b1d      	ldr	r3, [pc, #116]	; (8001e04 <HAL_InitTick+0x88>)
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d02b      	beq.n	8001dec <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001d94:	4b1c      	ldr	r3, [pc, #112]	; (8001e08 <HAL_InitTick+0x8c>)
 8001d96:	681c      	ldr	r4, [r3, #0]
 8001d98:	4b1a      	ldr	r3, [pc, #104]	; (8001e04 <HAL_InitTick+0x88>)
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	0019      	movs	r1, r3
 8001d9e:	23fa      	movs	r3, #250	; 0xfa
 8001da0:	0098      	lsls	r0, r3, #2
 8001da2:	f7fe f9c3 	bl	800012c <__udivsi3>
 8001da6:	0003      	movs	r3, r0
 8001da8:	0019      	movs	r1, r3
 8001daa:	0020      	movs	r0, r4
 8001dac:	f7fe f9be 	bl	800012c <__udivsi3>
 8001db0:	0003      	movs	r3, r0
 8001db2:	0018      	movs	r0, r3
 8001db4:	f000 f953 	bl	800205e <HAL_SYSTICK_Config>
 8001db8:	1e03      	subs	r3, r0, #0
 8001dba:	d112      	bne.n	8001de2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2b03      	cmp	r3, #3
 8001dc0:	d80a      	bhi.n	8001dd8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dc2:	6879      	ldr	r1, [r7, #4]
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	425b      	negs	r3, r3
 8001dc8:	2200      	movs	r2, #0
 8001dca:	0018      	movs	r0, r3
 8001dcc:	f000 f922 	bl	8002014 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001dd0:	4b0e      	ldr	r3, [pc, #56]	; (8001e0c <HAL_InitTick+0x90>)
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	601a      	str	r2, [r3, #0]
 8001dd6:	e00d      	b.n	8001df4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001dd8:	230f      	movs	r3, #15
 8001dda:	18fb      	adds	r3, r7, r3
 8001ddc:	2201      	movs	r2, #1
 8001dde:	701a      	strb	r2, [r3, #0]
 8001de0:	e008      	b.n	8001df4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001de2:	230f      	movs	r3, #15
 8001de4:	18fb      	adds	r3, r7, r3
 8001de6:	2201      	movs	r2, #1
 8001de8:	701a      	strb	r2, [r3, #0]
 8001dea:	e003      	b.n	8001df4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001dec:	230f      	movs	r3, #15
 8001dee:	18fb      	adds	r3, r7, r3
 8001df0:	2201      	movs	r2, #1
 8001df2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001df4:	230f      	movs	r3, #15
 8001df6:	18fb      	adds	r3, r7, r3
 8001df8:	781b      	ldrb	r3, [r3, #0]
}
 8001dfa:	0018      	movs	r0, r3
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	b005      	add	sp, #20
 8001e00:	bd90      	pop	{r4, r7, pc}
 8001e02:	46c0      	nop			; (mov r8, r8)
 8001e04:	2000000c 	.word	0x2000000c
 8001e08:	20000004 	.word	0x20000004
 8001e0c:	20000008 	.word	0x20000008

08001e10 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e14:	4b05      	ldr	r3, [pc, #20]	; (8001e2c <HAL_IncTick+0x1c>)
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	001a      	movs	r2, r3
 8001e1a:	4b05      	ldr	r3, [pc, #20]	; (8001e30 <HAL_IncTick+0x20>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	18d2      	adds	r2, r2, r3
 8001e20:	4b03      	ldr	r3, [pc, #12]	; (8001e30 <HAL_IncTick+0x20>)
 8001e22:	601a      	str	r2, [r3, #0]
}
 8001e24:	46c0      	nop			; (mov r8, r8)
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	46c0      	nop			; (mov r8, r8)
 8001e2c:	2000000c 	.word	0x2000000c
 8001e30:	200006c4 	.word	0x200006c4

08001e34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	af00      	add	r7, sp, #0
  return uwTick;
 8001e38:	4b02      	ldr	r3, [pc, #8]	; (8001e44 <HAL_GetTick+0x10>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
}
 8001e3c:	0018      	movs	r0, r3
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	46c0      	nop			; (mov r8, r8)
 8001e44:	200006c4 	.word	0x200006c4

08001e48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b084      	sub	sp, #16
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e50:	f7ff fff0 	bl	8001e34 <HAL_GetTick>
 8001e54:	0003      	movs	r3, r0
 8001e56:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	3301      	adds	r3, #1
 8001e60:	d005      	beq.n	8001e6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e62:	4b0a      	ldr	r3, [pc, #40]	; (8001e8c <HAL_Delay+0x44>)
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	001a      	movs	r2, r3
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	189b      	adds	r3, r3, r2
 8001e6c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e6e:	46c0      	nop			; (mov r8, r8)
 8001e70:	f7ff ffe0 	bl	8001e34 <HAL_GetTick>
 8001e74:	0002      	movs	r2, r0
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	68fa      	ldr	r2, [r7, #12]
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d8f7      	bhi.n	8001e70 <HAL_Delay+0x28>
  {
  }
}
 8001e80:	46c0      	nop			; (mov r8, r8)
 8001e82:	46c0      	nop			; (mov r8, r8)
 8001e84:	46bd      	mov	sp, r7
 8001e86:	b004      	add	sp, #16
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	46c0      	nop			; (mov r8, r8)
 8001e8c:	2000000c 	.word	0x2000000c

08001e90 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8001e98:	4b06      	ldr	r3, [pc, #24]	; (8001eb4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a06      	ldr	r2, [pc, #24]	; (8001eb8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	0019      	movs	r1, r3
 8001ea2:	4b04      	ldr	r3, [pc, #16]	; (8001eb4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001ea4:	687a      	ldr	r2, [r7, #4]
 8001ea6:	430a      	orrs	r2, r1
 8001ea8:	601a      	str	r2, [r3, #0]
}
 8001eaa:	46c0      	nop			; (mov r8, r8)
 8001eac:	46bd      	mov	sp, r7
 8001eae:	b002      	add	sp, #8
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	46c0      	nop			; (mov r8, r8)
 8001eb4:	40010000 	.word	0x40010000
 8001eb8:	fffff9ff 	.word	0xfffff9ff

08001ebc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	0002      	movs	r2, r0
 8001ec4:	1dfb      	adds	r3, r7, #7
 8001ec6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001ec8:	1dfb      	adds	r3, r7, #7
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	2b7f      	cmp	r3, #127	; 0x7f
 8001ece:	d809      	bhi.n	8001ee4 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ed0:	1dfb      	adds	r3, r7, #7
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	001a      	movs	r2, r3
 8001ed6:	231f      	movs	r3, #31
 8001ed8:	401a      	ands	r2, r3
 8001eda:	4b04      	ldr	r3, [pc, #16]	; (8001eec <__NVIC_EnableIRQ+0x30>)
 8001edc:	2101      	movs	r1, #1
 8001ede:	4091      	lsls	r1, r2
 8001ee0:	000a      	movs	r2, r1
 8001ee2:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001ee4:	46c0      	nop			; (mov r8, r8)
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	b002      	add	sp, #8
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	e000e100 	.word	0xe000e100

08001ef0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ef0:	b590      	push	{r4, r7, lr}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	0002      	movs	r2, r0
 8001ef8:	6039      	str	r1, [r7, #0]
 8001efa:	1dfb      	adds	r3, r7, #7
 8001efc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001efe:	1dfb      	adds	r3, r7, #7
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	2b7f      	cmp	r3, #127	; 0x7f
 8001f04:	d828      	bhi.n	8001f58 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f06:	4a2f      	ldr	r2, [pc, #188]	; (8001fc4 <__NVIC_SetPriority+0xd4>)
 8001f08:	1dfb      	adds	r3, r7, #7
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	b25b      	sxtb	r3, r3
 8001f0e:	089b      	lsrs	r3, r3, #2
 8001f10:	33c0      	adds	r3, #192	; 0xc0
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	589b      	ldr	r3, [r3, r2]
 8001f16:	1dfa      	adds	r2, r7, #7
 8001f18:	7812      	ldrb	r2, [r2, #0]
 8001f1a:	0011      	movs	r1, r2
 8001f1c:	2203      	movs	r2, #3
 8001f1e:	400a      	ands	r2, r1
 8001f20:	00d2      	lsls	r2, r2, #3
 8001f22:	21ff      	movs	r1, #255	; 0xff
 8001f24:	4091      	lsls	r1, r2
 8001f26:	000a      	movs	r2, r1
 8001f28:	43d2      	mvns	r2, r2
 8001f2a:	401a      	ands	r2, r3
 8001f2c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	019b      	lsls	r3, r3, #6
 8001f32:	22ff      	movs	r2, #255	; 0xff
 8001f34:	401a      	ands	r2, r3
 8001f36:	1dfb      	adds	r3, r7, #7
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	0018      	movs	r0, r3
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	4003      	ands	r3, r0
 8001f40:	00db      	lsls	r3, r3, #3
 8001f42:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f44:	481f      	ldr	r0, [pc, #124]	; (8001fc4 <__NVIC_SetPriority+0xd4>)
 8001f46:	1dfb      	adds	r3, r7, #7
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	b25b      	sxtb	r3, r3
 8001f4c:	089b      	lsrs	r3, r3, #2
 8001f4e:	430a      	orrs	r2, r1
 8001f50:	33c0      	adds	r3, #192	; 0xc0
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001f56:	e031      	b.n	8001fbc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f58:	4a1b      	ldr	r2, [pc, #108]	; (8001fc8 <__NVIC_SetPriority+0xd8>)
 8001f5a:	1dfb      	adds	r3, r7, #7
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	0019      	movs	r1, r3
 8001f60:	230f      	movs	r3, #15
 8001f62:	400b      	ands	r3, r1
 8001f64:	3b08      	subs	r3, #8
 8001f66:	089b      	lsrs	r3, r3, #2
 8001f68:	3306      	adds	r3, #6
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	18d3      	adds	r3, r2, r3
 8001f6e:	3304      	adds	r3, #4
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	1dfa      	adds	r2, r7, #7
 8001f74:	7812      	ldrb	r2, [r2, #0]
 8001f76:	0011      	movs	r1, r2
 8001f78:	2203      	movs	r2, #3
 8001f7a:	400a      	ands	r2, r1
 8001f7c:	00d2      	lsls	r2, r2, #3
 8001f7e:	21ff      	movs	r1, #255	; 0xff
 8001f80:	4091      	lsls	r1, r2
 8001f82:	000a      	movs	r2, r1
 8001f84:	43d2      	mvns	r2, r2
 8001f86:	401a      	ands	r2, r3
 8001f88:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	019b      	lsls	r3, r3, #6
 8001f8e:	22ff      	movs	r2, #255	; 0xff
 8001f90:	401a      	ands	r2, r3
 8001f92:	1dfb      	adds	r3, r7, #7
 8001f94:	781b      	ldrb	r3, [r3, #0]
 8001f96:	0018      	movs	r0, r3
 8001f98:	2303      	movs	r3, #3
 8001f9a:	4003      	ands	r3, r0
 8001f9c:	00db      	lsls	r3, r3, #3
 8001f9e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001fa0:	4809      	ldr	r0, [pc, #36]	; (8001fc8 <__NVIC_SetPriority+0xd8>)
 8001fa2:	1dfb      	adds	r3, r7, #7
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	001c      	movs	r4, r3
 8001fa8:	230f      	movs	r3, #15
 8001faa:	4023      	ands	r3, r4
 8001fac:	3b08      	subs	r3, #8
 8001fae:	089b      	lsrs	r3, r3, #2
 8001fb0:	430a      	orrs	r2, r1
 8001fb2:	3306      	adds	r3, #6
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	18c3      	adds	r3, r0, r3
 8001fb8:	3304      	adds	r3, #4
 8001fba:	601a      	str	r2, [r3, #0]
}
 8001fbc:	46c0      	nop			; (mov r8, r8)
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	b003      	add	sp, #12
 8001fc2:	bd90      	pop	{r4, r7, pc}
 8001fc4:	e000e100 	.word	0xe000e100
 8001fc8:	e000ed00 	.word	0xe000ed00

08001fcc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	1e5a      	subs	r2, r3, #1
 8001fd8:	2380      	movs	r3, #128	; 0x80
 8001fda:	045b      	lsls	r3, r3, #17
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d301      	bcc.n	8001fe4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e010      	b.n	8002006 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fe4:	4b0a      	ldr	r3, [pc, #40]	; (8002010 <SysTick_Config+0x44>)
 8001fe6:	687a      	ldr	r2, [r7, #4]
 8001fe8:	3a01      	subs	r2, #1
 8001fea:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fec:	2301      	movs	r3, #1
 8001fee:	425b      	negs	r3, r3
 8001ff0:	2103      	movs	r1, #3
 8001ff2:	0018      	movs	r0, r3
 8001ff4:	f7ff ff7c 	bl	8001ef0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ff8:	4b05      	ldr	r3, [pc, #20]	; (8002010 <SysTick_Config+0x44>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ffe:	4b04      	ldr	r3, [pc, #16]	; (8002010 <SysTick_Config+0x44>)
 8002000:	2207      	movs	r2, #7
 8002002:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002004:	2300      	movs	r3, #0
}
 8002006:	0018      	movs	r0, r3
 8002008:	46bd      	mov	sp, r7
 800200a:	b002      	add	sp, #8
 800200c:	bd80      	pop	{r7, pc}
 800200e:	46c0      	nop			; (mov r8, r8)
 8002010:	e000e010 	.word	0xe000e010

08002014 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
 800201a:	60b9      	str	r1, [r7, #8]
 800201c:	607a      	str	r2, [r7, #4]
 800201e:	210f      	movs	r1, #15
 8002020:	187b      	adds	r3, r7, r1
 8002022:	1c02      	adds	r2, r0, #0
 8002024:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8002026:	68ba      	ldr	r2, [r7, #8]
 8002028:	187b      	adds	r3, r7, r1
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	b25b      	sxtb	r3, r3
 800202e:	0011      	movs	r1, r2
 8002030:	0018      	movs	r0, r3
 8002032:	f7ff ff5d 	bl	8001ef0 <__NVIC_SetPriority>
}
 8002036:	46c0      	nop			; (mov r8, r8)
 8002038:	46bd      	mov	sp, r7
 800203a:	b004      	add	sp, #16
 800203c:	bd80      	pop	{r7, pc}

0800203e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800203e:	b580      	push	{r7, lr}
 8002040:	b082      	sub	sp, #8
 8002042:	af00      	add	r7, sp, #0
 8002044:	0002      	movs	r2, r0
 8002046:	1dfb      	adds	r3, r7, #7
 8002048:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800204a:	1dfb      	adds	r3, r7, #7
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	b25b      	sxtb	r3, r3
 8002050:	0018      	movs	r0, r3
 8002052:	f7ff ff33 	bl	8001ebc <__NVIC_EnableIRQ>
}
 8002056:	46c0      	nop			; (mov r8, r8)
 8002058:	46bd      	mov	sp, r7
 800205a:	b002      	add	sp, #8
 800205c:	bd80      	pop	{r7, pc}

0800205e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800205e:	b580      	push	{r7, lr}
 8002060:	b082      	sub	sp, #8
 8002062:	af00      	add	r7, sp, #0
 8002064:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	0018      	movs	r0, r3
 800206a:	f7ff ffaf 	bl	8001fcc <SysTick_Config>
 800206e:	0003      	movs	r3, r0
}
 8002070:	0018      	movs	r0, r3
 8002072:	46bd      	mov	sp, r7
 8002074:	b002      	add	sp, #8
 8002076:	bd80      	pop	{r7, pc}

08002078 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d101      	bne.n	800208a <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e050      	b.n	800212c <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2225      	movs	r2, #37	; 0x25
 800208e:	5c9b      	ldrb	r3, [r3, r2]
 8002090:	b2db      	uxtb	r3, r3
 8002092:	2b02      	cmp	r3, #2
 8002094:	d008      	beq.n	80020a8 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2204      	movs	r2, #4
 800209a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2224      	movs	r2, #36	; 0x24
 80020a0:	2100      	movs	r1, #0
 80020a2:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	e041      	b.n	800212c <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	210e      	movs	r1, #14
 80020b4:	438a      	bics	r2, r1
 80020b6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020c2:	491c      	ldr	r1, [pc, #112]	; (8002134 <HAL_DMA_Abort+0xbc>)
 80020c4:	400a      	ands	r2, r1
 80020c6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	2101      	movs	r1, #1
 80020d4:	438a      	bics	r2, r1
 80020d6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 80020d8:	4b17      	ldr	r3, [pc, #92]	; (8002138 <HAL_DMA_Abort+0xc0>)
 80020da:	6859      	ldr	r1, [r3, #4]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e0:	221c      	movs	r2, #28
 80020e2:	4013      	ands	r3, r2
 80020e4:	2201      	movs	r2, #1
 80020e6:	409a      	lsls	r2, r3
 80020e8:	4b13      	ldr	r3, [pc, #76]	; (8002138 <HAL_DMA_Abort+0xc0>)
 80020ea:	430a      	orrs	r2, r1
 80020ec:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020f2:	687a      	ldr	r2, [r7, #4]
 80020f4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80020f6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d00c      	beq.n	800211a <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800210a:	490a      	ldr	r1, [pc, #40]	; (8002134 <HAL_DMA_Abort+0xbc>)
 800210c:	400a      	ands	r2, r1
 800210e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002118:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2225      	movs	r2, #37	; 0x25
 800211e:	2101      	movs	r1, #1
 8002120:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2224      	movs	r2, #36	; 0x24
 8002126:	2100      	movs	r1, #0
 8002128:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 800212a:	2300      	movs	r3, #0
}
 800212c:	0018      	movs	r0, r3
 800212e:	46bd      	mov	sp, r7
 8002130:	b002      	add	sp, #8
 8002132:	bd80      	pop	{r7, pc}
 8002134:	fffffeff 	.word	0xfffffeff
 8002138:	40020000 	.word	0x40020000

0800213c <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b084      	sub	sp, #16
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002144:	210f      	movs	r1, #15
 8002146:	187b      	adds	r3, r7, r1
 8002148:	2200      	movs	r2, #0
 800214a:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2225      	movs	r2, #37	; 0x25
 8002150:	5c9b      	ldrb	r3, [r3, r2]
 8002152:	b2db      	uxtb	r3, r3
 8002154:	2b02      	cmp	r3, #2
 8002156:	d006      	beq.n	8002166 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2204      	movs	r2, #4
 800215c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800215e:	187b      	adds	r3, r7, r1
 8002160:	2201      	movs	r2, #1
 8002162:	701a      	strb	r2, [r3, #0]
 8002164:	e049      	b.n	80021fa <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	210e      	movs	r1, #14
 8002172:	438a      	bics	r2, r1
 8002174:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	2101      	movs	r1, #1
 8002182:	438a      	bics	r2, r1
 8002184:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002190:	491d      	ldr	r1, [pc, #116]	; (8002208 <HAL_DMA_Abort_IT+0xcc>)
 8002192:	400a      	ands	r2, r1
 8002194:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8002196:	4b1d      	ldr	r3, [pc, #116]	; (800220c <HAL_DMA_Abort_IT+0xd0>)
 8002198:	6859      	ldr	r1, [r3, #4]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219e:	221c      	movs	r2, #28
 80021a0:	4013      	ands	r3, r2
 80021a2:	2201      	movs	r2, #1
 80021a4:	409a      	lsls	r2, r3
 80021a6:	4b19      	ldr	r3, [pc, #100]	; (800220c <HAL_DMA_Abort_IT+0xd0>)
 80021a8:	430a      	orrs	r2, r1
 80021aa:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021b0:	687a      	ldr	r2, [r7, #4]
 80021b2:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80021b4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d00c      	beq.n	80021d8 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021c8:	490f      	ldr	r1, [pc, #60]	; (8002208 <HAL_DMA_Abort_IT+0xcc>)
 80021ca:	400a      	ands	r2, r1
 80021cc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80021d6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2225      	movs	r2, #37	; 0x25
 80021dc:	2101      	movs	r1, #1
 80021de:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2224      	movs	r2, #36	; 0x24
 80021e4:	2100      	movs	r1, #0
 80021e6:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d004      	beq.n	80021fa <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021f4:	687a      	ldr	r2, [r7, #4]
 80021f6:	0010      	movs	r0, r2
 80021f8:	4798      	blx	r3
    }
  }
  return status;
 80021fa:	230f      	movs	r3, #15
 80021fc:	18fb      	adds	r3, r7, r3
 80021fe:	781b      	ldrb	r3, [r3, #0]
}
 8002200:	0018      	movs	r0, r3
 8002202:	46bd      	mov	sp, r7
 8002204:	b004      	add	sp, #16
 8002206:	bd80      	pop	{r7, pc}
 8002208:	fffffeff 	.word	0xfffffeff
 800220c:	40020000 	.word	0x40020000

08002210 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b086      	sub	sp, #24
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800221a:	2300      	movs	r3, #0
 800221c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800221e:	e147      	b.n	80024b0 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	2101      	movs	r1, #1
 8002226:	697a      	ldr	r2, [r7, #20]
 8002228:	4091      	lsls	r1, r2
 800222a:	000a      	movs	r2, r1
 800222c:	4013      	ands	r3, r2
 800222e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d100      	bne.n	8002238 <HAL_GPIO_Init+0x28>
 8002236:	e138      	b.n	80024aa <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	2203      	movs	r2, #3
 800223e:	4013      	ands	r3, r2
 8002240:	2b01      	cmp	r3, #1
 8002242:	d005      	beq.n	8002250 <HAL_GPIO_Init+0x40>
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	2203      	movs	r2, #3
 800224a:	4013      	ands	r3, r2
 800224c:	2b02      	cmp	r3, #2
 800224e:	d130      	bne.n	80022b2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	005b      	lsls	r3, r3, #1
 800225a:	2203      	movs	r2, #3
 800225c:	409a      	lsls	r2, r3
 800225e:	0013      	movs	r3, r2
 8002260:	43da      	mvns	r2, r3
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	4013      	ands	r3, r2
 8002266:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	68da      	ldr	r2, [r3, #12]
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	005b      	lsls	r3, r3, #1
 8002270:	409a      	lsls	r2, r3
 8002272:	0013      	movs	r3, r2
 8002274:	693a      	ldr	r2, [r7, #16]
 8002276:	4313      	orrs	r3, r2
 8002278:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	693a      	ldr	r2, [r7, #16]
 800227e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002286:	2201      	movs	r2, #1
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	409a      	lsls	r2, r3
 800228c:	0013      	movs	r3, r2
 800228e:	43da      	mvns	r2, r3
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	4013      	ands	r3, r2
 8002294:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	091b      	lsrs	r3, r3, #4
 800229c:	2201      	movs	r2, #1
 800229e:	401a      	ands	r2, r3
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	409a      	lsls	r2, r3
 80022a4:	0013      	movs	r3, r2
 80022a6:	693a      	ldr	r2, [r7, #16]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	693a      	ldr	r2, [r7, #16]
 80022b0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	2203      	movs	r2, #3
 80022b8:	4013      	ands	r3, r2
 80022ba:	2b03      	cmp	r3, #3
 80022bc:	d017      	beq.n	80022ee <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	68db      	ldr	r3, [r3, #12]
 80022c2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	005b      	lsls	r3, r3, #1
 80022c8:	2203      	movs	r2, #3
 80022ca:	409a      	lsls	r2, r3
 80022cc:	0013      	movs	r3, r2
 80022ce:	43da      	mvns	r2, r3
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	4013      	ands	r3, r2
 80022d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	689a      	ldr	r2, [r3, #8]
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	005b      	lsls	r3, r3, #1
 80022de:	409a      	lsls	r2, r3
 80022e0:	0013      	movs	r3, r2
 80022e2:	693a      	ldr	r2, [r7, #16]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	693a      	ldr	r2, [r7, #16]
 80022ec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	2203      	movs	r2, #3
 80022f4:	4013      	ands	r3, r2
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d123      	bne.n	8002342 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	08da      	lsrs	r2, r3, #3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	3208      	adds	r2, #8
 8002302:	0092      	lsls	r2, r2, #2
 8002304:	58d3      	ldr	r3, [r2, r3]
 8002306:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	2207      	movs	r2, #7
 800230c:	4013      	ands	r3, r2
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	220f      	movs	r2, #15
 8002312:	409a      	lsls	r2, r3
 8002314:	0013      	movs	r3, r2
 8002316:	43da      	mvns	r2, r3
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	4013      	ands	r3, r2
 800231c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	691a      	ldr	r2, [r3, #16]
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	2107      	movs	r1, #7
 8002326:	400b      	ands	r3, r1
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	409a      	lsls	r2, r3
 800232c:	0013      	movs	r3, r2
 800232e:	693a      	ldr	r2, [r7, #16]
 8002330:	4313      	orrs	r3, r2
 8002332:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	08da      	lsrs	r2, r3, #3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	3208      	adds	r2, #8
 800233c:	0092      	lsls	r2, r2, #2
 800233e:	6939      	ldr	r1, [r7, #16]
 8002340:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	005b      	lsls	r3, r3, #1
 800234c:	2203      	movs	r2, #3
 800234e:	409a      	lsls	r2, r3
 8002350:	0013      	movs	r3, r2
 8002352:	43da      	mvns	r2, r3
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	4013      	ands	r3, r2
 8002358:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	2203      	movs	r2, #3
 8002360:	401a      	ands	r2, r3
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	005b      	lsls	r3, r3, #1
 8002366:	409a      	lsls	r2, r3
 8002368:	0013      	movs	r3, r2
 800236a:	693a      	ldr	r2, [r7, #16]
 800236c:	4313      	orrs	r3, r2
 800236e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	693a      	ldr	r2, [r7, #16]
 8002374:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	685a      	ldr	r2, [r3, #4]
 800237a:	23c0      	movs	r3, #192	; 0xc0
 800237c:	029b      	lsls	r3, r3, #10
 800237e:	4013      	ands	r3, r2
 8002380:	d100      	bne.n	8002384 <HAL_GPIO_Init+0x174>
 8002382:	e092      	b.n	80024aa <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002384:	4a50      	ldr	r2, [pc, #320]	; (80024c8 <HAL_GPIO_Init+0x2b8>)
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	089b      	lsrs	r3, r3, #2
 800238a:	3318      	adds	r3, #24
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	589b      	ldr	r3, [r3, r2]
 8002390:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	2203      	movs	r2, #3
 8002396:	4013      	ands	r3, r2
 8002398:	00db      	lsls	r3, r3, #3
 800239a:	220f      	movs	r2, #15
 800239c:	409a      	lsls	r2, r3
 800239e:	0013      	movs	r3, r2
 80023a0:	43da      	mvns	r2, r3
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	4013      	ands	r3, r2
 80023a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80023a8:	687a      	ldr	r2, [r7, #4]
 80023aa:	23a0      	movs	r3, #160	; 0xa0
 80023ac:	05db      	lsls	r3, r3, #23
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d013      	beq.n	80023da <HAL_GPIO_Init+0x1ca>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4a45      	ldr	r2, [pc, #276]	; (80024cc <HAL_GPIO_Init+0x2bc>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d00d      	beq.n	80023d6 <HAL_GPIO_Init+0x1c6>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4a44      	ldr	r2, [pc, #272]	; (80024d0 <HAL_GPIO_Init+0x2c0>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d007      	beq.n	80023d2 <HAL_GPIO_Init+0x1c2>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4a43      	ldr	r2, [pc, #268]	; (80024d4 <HAL_GPIO_Init+0x2c4>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d101      	bne.n	80023ce <HAL_GPIO_Init+0x1be>
 80023ca:	2303      	movs	r3, #3
 80023cc:	e006      	b.n	80023dc <HAL_GPIO_Init+0x1cc>
 80023ce:	2305      	movs	r3, #5
 80023d0:	e004      	b.n	80023dc <HAL_GPIO_Init+0x1cc>
 80023d2:	2302      	movs	r3, #2
 80023d4:	e002      	b.n	80023dc <HAL_GPIO_Init+0x1cc>
 80023d6:	2301      	movs	r3, #1
 80023d8:	e000      	b.n	80023dc <HAL_GPIO_Init+0x1cc>
 80023da:	2300      	movs	r3, #0
 80023dc:	697a      	ldr	r2, [r7, #20]
 80023de:	2103      	movs	r1, #3
 80023e0:	400a      	ands	r2, r1
 80023e2:	00d2      	lsls	r2, r2, #3
 80023e4:	4093      	lsls	r3, r2
 80023e6:	693a      	ldr	r2, [r7, #16]
 80023e8:	4313      	orrs	r3, r2
 80023ea:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80023ec:	4936      	ldr	r1, [pc, #216]	; (80024c8 <HAL_GPIO_Init+0x2b8>)
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	089b      	lsrs	r3, r3, #2
 80023f2:	3318      	adds	r3, #24
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	693a      	ldr	r2, [r7, #16]
 80023f8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80023fa:	4b33      	ldr	r3, [pc, #204]	; (80024c8 <HAL_GPIO_Init+0x2b8>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	43da      	mvns	r2, r3
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	4013      	ands	r3, r2
 8002408:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	685a      	ldr	r2, [r3, #4]
 800240e:	2380      	movs	r3, #128	; 0x80
 8002410:	035b      	lsls	r3, r3, #13
 8002412:	4013      	ands	r3, r2
 8002414:	d003      	beq.n	800241e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8002416:	693a      	ldr	r2, [r7, #16]
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	4313      	orrs	r3, r2
 800241c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800241e:	4b2a      	ldr	r3, [pc, #168]	; (80024c8 <HAL_GPIO_Init+0x2b8>)
 8002420:	693a      	ldr	r2, [r7, #16]
 8002422:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002424:	4b28      	ldr	r3, [pc, #160]	; (80024c8 <HAL_GPIO_Init+0x2b8>)
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	43da      	mvns	r2, r3
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	4013      	ands	r3, r2
 8002432:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	685a      	ldr	r2, [r3, #4]
 8002438:	2380      	movs	r3, #128	; 0x80
 800243a:	039b      	lsls	r3, r3, #14
 800243c:	4013      	ands	r3, r2
 800243e:	d003      	beq.n	8002448 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8002440:	693a      	ldr	r2, [r7, #16]
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	4313      	orrs	r3, r2
 8002446:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002448:	4b1f      	ldr	r3, [pc, #124]	; (80024c8 <HAL_GPIO_Init+0x2b8>)
 800244a:	693a      	ldr	r2, [r7, #16]
 800244c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800244e:	4a1e      	ldr	r2, [pc, #120]	; (80024c8 <HAL_GPIO_Init+0x2b8>)
 8002450:	2384      	movs	r3, #132	; 0x84
 8002452:	58d3      	ldr	r3, [r2, r3]
 8002454:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	43da      	mvns	r2, r3
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	4013      	ands	r3, r2
 800245e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	685a      	ldr	r2, [r3, #4]
 8002464:	2380      	movs	r3, #128	; 0x80
 8002466:	029b      	lsls	r3, r3, #10
 8002468:	4013      	ands	r3, r2
 800246a:	d003      	beq.n	8002474 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800246c:	693a      	ldr	r2, [r7, #16]
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	4313      	orrs	r3, r2
 8002472:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002474:	4914      	ldr	r1, [pc, #80]	; (80024c8 <HAL_GPIO_Init+0x2b8>)
 8002476:	2284      	movs	r2, #132	; 0x84
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800247c:	4a12      	ldr	r2, [pc, #72]	; (80024c8 <HAL_GPIO_Init+0x2b8>)
 800247e:	2380      	movs	r3, #128	; 0x80
 8002480:	58d3      	ldr	r3, [r2, r3]
 8002482:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	43da      	mvns	r2, r3
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	4013      	ands	r3, r2
 800248c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	685a      	ldr	r2, [r3, #4]
 8002492:	2380      	movs	r3, #128	; 0x80
 8002494:	025b      	lsls	r3, r3, #9
 8002496:	4013      	ands	r3, r2
 8002498:	d003      	beq.n	80024a2 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800249a:	693a      	ldr	r2, [r7, #16]
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	4313      	orrs	r3, r2
 80024a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80024a2:	4909      	ldr	r1, [pc, #36]	; (80024c8 <HAL_GPIO_Init+0x2b8>)
 80024a4:	2280      	movs	r2, #128	; 0x80
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	3301      	adds	r3, #1
 80024ae:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	40da      	lsrs	r2, r3
 80024b8:	1e13      	subs	r3, r2, #0
 80024ba:	d000      	beq.n	80024be <HAL_GPIO_Init+0x2ae>
 80024bc:	e6b0      	b.n	8002220 <HAL_GPIO_Init+0x10>
  }
}
 80024be:	46c0      	nop			; (mov r8, r8)
 80024c0:	46c0      	nop			; (mov r8, r8)
 80024c2:	46bd      	mov	sp, r7
 80024c4:	b006      	add	sp, #24
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	40021800 	.word	0x40021800
 80024cc:	50000400 	.word	0x50000400
 80024d0:	50000800 	.word	0x50000800
 80024d4:	50000c00 	.word	0x50000c00

080024d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b084      	sub	sp, #16
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	000a      	movs	r2, r1
 80024e2:	1cbb      	adds	r3, r7, #2
 80024e4:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	691b      	ldr	r3, [r3, #16]
 80024ea:	1cba      	adds	r2, r7, #2
 80024ec:	8812      	ldrh	r2, [r2, #0]
 80024ee:	4013      	ands	r3, r2
 80024f0:	d004      	beq.n	80024fc <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80024f2:	230f      	movs	r3, #15
 80024f4:	18fb      	adds	r3, r7, r3
 80024f6:	2201      	movs	r2, #1
 80024f8:	701a      	strb	r2, [r3, #0]
 80024fa:	e003      	b.n	8002504 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80024fc:	230f      	movs	r3, #15
 80024fe:	18fb      	adds	r3, r7, r3
 8002500:	2200      	movs	r2, #0
 8002502:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002504:	230f      	movs	r3, #15
 8002506:	18fb      	adds	r3, r7, r3
 8002508:	781b      	ldrb	r3, [r3, #0]
}
 800250a:	0018      	movs	r0, r3
 800250c:	46bd      	mov	sp, r7
 800250e:	b004      	add	sp, #16
 8002510:	bd80      	pop	{r7, pc}

08002512 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002512:	b580      	push	{r7, lr}
 8002514:	b082      	sub	sp, #8
 8002516:	af00      	add	r7, sp, #0
 8002518:	6078      	str	r0, [r7, #4]
 800251a:	0008      	movs	r0, r1
 800251c:	0011      	movs	r1, r2
 800251e:	1cbb      	adds	r3, r7, #2
 8002520:	1c02      	adds	r2, r0, #0
 8002522:	801a      	strh	r2, [r3, #0]
 8002524:	1c7b      	adds	r3, r7, #1
 8002526:	1c0a      	adds	r2, r1, #0
 8002528:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800252a:	1c7b      	adds	r3, r7, #1
 800252c:	781b      	ldrb	r3, [r3, #0]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d004      	beq.n	800253c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002532:	1cbb      	adds	r3, r7, #2
 8002534:	881a      	ldrh	r2, [r3, #0]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800253a:	e003      	b.n	8002544 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800253c:	1cbb      	adds	r3, r7, #2
 800253e:	881a      	ldrh	r2, [r3, #0]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002544:	46c0      	nop			; (mov r8, r8)
 8002546:	46bd      	mov	sp, r7
 8002548:	b002      	add	sp, #8
 800254a:	bd80      	pop	{r7, pc}

0800254c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b084      	sub	sp, #16
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	000a      	movs	r2, r1
 8002556:	1cbb      	adds	r3, r7, #2
 8002558:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	695b      	ldr	r3, [r3, #20]
 800255e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002560:	1cbb      	adds	r3, r7, #2
 8002562:	881b      	ldrh	r3, [r3, #0]
 8002564:	68fa      	ldr	r2, [r7, #12]
 8002566:	4013      	ands	r3, r2
 8002568:	041a      	lsls	r2, r3, #16
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	43db      	mvns	r3, r3
 800256e:	1cb9      	adds	r1, r7, #2
 8002570:	8809      	ldrh	r1, [r1, #0]
 8002572:	400b      	ands	r3, r1
 8002574:	431a      	orrs	r2, r3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	619a      	str	r2, [r3, #24]
}
 800257a:	46c0      	nop			; (mov r8, r8)
 800257c:	46bd      	mov	sp, r7
 800257e:	b004      	add	sp, #16
 8002580:	bd80      	pop	{r7, pc}
	...

08002584 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b082      	sub	sp, #8
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d101      	bne.n	8002596 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e082      	b.n	800269c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2241      	movs	r2, #65	; 0x41
 800259a:	5c9b      	ldrb	r3, [r3, r2]
 800259c:	b2db      	uxtb	r3, r3
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d107      	bne.n	80025b2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2240      	movs	r2, #64	; 0x40
 80025a6:	2100      	movs	r1, #0
 80025a8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	0018      	movs	r0, r3
 80025ae:	f7ff fa53 	bl	8001a58 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2241      	movs	r2, #65	; 0x41
 80025b6:	2124      	movs	r1, #36	; 0x24
 80025b8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	2101      	movs	r1, #1
 80025c6:	438a      	bics	r2, r1
 80025c8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	685a      	ldr	r2, [r3, #4]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4934      	ldr	r1, [pc, #208]	; (80026a4 <HAL_I2C_Init+0x120>)
 80025d4:	400a      	ands	r2, r1
 80025d6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	689a      	ldr	r2, [r3, #8]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4931      	ldr	r1, [pc, #196]	; (80026a8 <HAL_I2C_Init+0x124>)
 80025e4:	400a      	ands	r2, r1
 80025e6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d108      	bne.n	8002602 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	689a      	ldr	r2, [r3, #8]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	2180      	movs	r1, #128	; 0x80
 80025fa:	0209      	lsls	r1, r1, #8
 80025fc:	430a      	orrs	r2, r1
 80025fe:	609a      	str	r2, [r3, #8]
 8002600:	e007      	b.n	8002612 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	689a      	ldr	r2, [r3, #8]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	2184      	movs	r1, #132	; 0x84
 800260c:	0209      	lsls	r1, r1, #8
 800260e:	430a      	orrs	r2, r1
 8002610:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	68db      	ldr	r3, [r3, #12]
 8002616:	2b02      	cmp	r3, #2
 8002618:	d104      	bne.n	8002624 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	2280      	movs	r2, #128	; 0x80
 8002620:	0112      	lsls	r2, r2, #4
 8002622:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	685a      	ldr	r2, [r3, #4]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	491f      	ldr	r1, [pc, #124]	; (80026ac <HAL_I2C_Init+0x128>)
 8002630:	430a      	orrs	r2, r1
 8002632:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	68da      	ldr	r2, [r3, #12]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	491a      	ldr	r1, [pc, #104]	; (80026a8 <HAL_I2C_Init+0x124>)
 8002640:	400a      	ands	r2, r1
 8002642:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	691a      	ldr	r2, [r3, #16]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	695b      	ldr	r3, [r3, #20]
 800264c:	431a      	orrs	r2, r3
 800264e:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	699b      	ldr	r3, [r3, #24]
 8002654:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	430a      	orrs	r2, r1
 800265c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	69d9      	ldr	r1, [r3, #28]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6a1a      	ldr	r2, [r3, #32]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	430a      	orrs	r2, r1
 800266c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	2101      	movs	r1, #1
 800267a:	430a      	orrs	r2, r1
 800267c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2200      	movs	r2, #0
 8002682:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2241      	movs	r2, #65	; 0x41
 8002688:	2120      	movs	r1, #32
 800268a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2200      	movs	r2, #0
 8002690:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2242      	movs	r2, #66	; 0x42
 8002696:	2100      	movs	r1, #0
 8002698:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800269a:	2300      	movs	r3, #0
}
 800269c:	0018      	movs	r0, r3
 800269e:	46bd      	mov	sp, r7
 80026a0:	b002      	add	sp, #8
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	f0ffffff 	.word	0xf0ffffff
 80026a8:	ffff7fff 	.word	0xffff7fff
 80026ac:	02008000 	.word	0x02008000

080026b0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80026b0:	b590      	push	{r4, r7, lr}
 80026b2:	b089      	sub	sp, #36	; 0x24
 80026b4:	af02      	add	r7, sp, #8
 80026b6:	60f8      	str	r0, [r7, #12]
 80026b8:	0008      	movs	r0, r1
 80026ba:	607a      	str	r2, [r7, #4]
 80026bc:	0019      	movs	r1, r3
 80026be:	230a      	movs	r3, #10
 80026c0:	18fb      	adds	r3, r7, r3
 80026c2:	1c02      	adds	r2, r0, #0
 80026c4:	801a      	strh	r2, [r3, #0]
 80026c6:	2308      	movs	r3, #8
 80026c8:	18fb      	adds	r3, r7, r3
 80026ca:	1c0a      	adds	r2, r1, #0
 80026cc:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2241      	movs	r2, #65	; 0x41
 80026d2:	5c9b      	ldrb	r3, [r3, r2]
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	2b20      	cmp	r3, #32
 80026d8:	d000      	beq.n	80026dc <HAL_I2C_Master_Transmit+0x2c>
 80026da:	e0e7      	b.n	80028ac <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	2240      	movs	r2, #64	; 0x40
 80026e0:	5c9b      	ldrb	r3, [r3, r2]
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d101      	bne.n	80026ea <HAL_I2C_Master_Transmit+0x3a>
 80026e6:	2302      	movs	r3, #2
 80026e8:	e0e1      	b.n	80028ae <HAL_I2C_Master_Transmit+0x1fe>
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2240      	movs	r2, #64	; 0x40
 80026ee:	2101      	movs	r1, #1
 80026f0:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80026f2:	f7ff fb9f 	bl	8001e34 <HAL_GetTick>
 80026f6:	0003      	movs	r3, r0
 80026f8:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80026fa:	2380      	movs	r3, #128	; 0x80
 80026fc:	0219      	lsls	r1, r3, #8
 80026fe:	68f8      	ldr	r0, [r7, #12]
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	9300      	str	r3, [sp, #0]
 8002704:	2319      	movs	r3, #25
 8002706:	2201      	movs	r2, #1
 8002708:	f000 fa04 	bl	8002b14 <I2C_WaitOnFlagUntilTimeout>
 800270c:	1e03      	subs	r3, r0, #0
 800270e:	d001      	beq.n	8002714 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	e0cc      	b.n	80028ae <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2241      	movs	r2, #65	; 0x41
 8002718:	2121      	movs	r1, #33	; 0x21
 800271a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	2242      	movs	r2, #66	; 0x42
 8002720:	2110      	movs	r1, #16
 8002722:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2200      	movs	r2, #0
 8002728:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	687a      	ldr	r2, [r7, #4]
 800272e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2208      	movs	r2, #8
 8002734:	18ba      	adds	r2, r7, r2
 8002736:	8812      	ldrh	r2, [r2, #0]
 8002738:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2200      	movs	r2, #0
 800273e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002744:	b29b      	uxth	r3, r3
 8002746:	2bff      	cmp	r3, #255	; 0xff
 8002748:	d911      	bls.n	800276e <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	22ff      	movs	r2, #255	; 0xff
 800274e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002754:	b2da      	uxtb	r2, r3
 8002756:	2380      	movs	r3, #128	; 0x80
 8002758:	045c      	lsls	r4, r3, #17
 800275a:	230a      	movs	r3, #10
 800275c:	18fb      	adds	r3, r7, r3
 800275e:	8819      	ldrh	r1, [r3, #0]
 8002760:	68f8      	ldr	r0, [r7, #12]
 8002762:	4b55      	ldr	r3, [pc, #340]	; (80028b8 <HAL_I2C_Master_Transmit+0x208>)
 8002764:	9300      	str	r3, [sp, #0]
 8002766:	0023      	movs	r3, r4
 8002768:	f000 fc14 	bl	8002f94 <I2C_TransferConfig>
 800276c:	e075      	b.n	800285a <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002772:	b29a      	uxth	r2, r3
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800277c:	b2da      	uxtb	r2, r3
 800277e:	2380      	movs	r3, #128	; 0x80
 8002780:	049c      	lsls	r4, r3, #18
 8002782:	230a      	movs	r3, #10
 8002784:	18fb      	adds	r3, r7, r3
 8002786:	8819      	ldrh	r1, [r3, #0]
 8002788:	68f8      	ldr	r0, [r7, #12]
 800278a:	4b4b      	ldr	r3, [pc, #300]	; (80028b8 <HAL_I2C_Master_Transmit+0x208>)
 800278c:	9300      	str	r3, [sp, #0]
 800278e:	0023      	movs	r3, r4
 8002790:	f000 fc00 	bl	8002f94 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002794:	e061      	b.n	800285a <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002796:	697a      	ldr	r2, [r7, #20]
 8002798:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	0018      	movs	r0, r3
 800279e:	f000 f9f8 	bl	8002b92 <I2C_WaitOnTXISFlagUntilTimeout>
 80027a2:	1e03      	subs	r3, r0, #0
 80027a4:	d001      	beq.n	80027aa <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e081      	b.n	80028ae <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ae:	781a      	ldrb	r2, [r3, #0]
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ba:	1c5a      	adds	r2, r3, #1
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027c4:	b29b      	uxth	r3, r3
 80027c6:	3b01      	subs	r3, #1
 80027c8:	b29a      	uxth	r2, r3
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027d2:	3b01      	subs	r3, #1
 80027d4:	b29a      	uxth	r2, r3
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027de:	b29b      	uxth	r3, r3
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d03a      	beq.n	800285a <HAL_I2C_Master_Transmit+0x1aa>
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d136      	bne.n	800285a <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80027ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80027ee:	68f8      	ldr	r0, [r7, #12]
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	9300      	str	r3, [sp, #0]
 80027f4:	0013      	movs	r3, r2
 80027f6:	2200      	movs	r2, #0
 80027f8:	2180      	movs	r1, #128	; 0x80
 80027fa:	f000 f98b 	bl	8002b14 <I2C_WaitOnFlagUntilTimeout>
 80027fe:	1e03      	subs	r3, r0, #0
 8002800:	d001      	beq.n	8002806 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e053      	b.n	80028ae <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800280a:	b29b      	uxth	r3, r3
 800280c:	2bff      	cmp	r3, #255	; 0xff
 800280e:	d911      	bls.n	8002834 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	22ff      	movs	r2, #255	; 0xff
 8002814:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800281a:	b2da      	uxtb	r2, r3
 800281c:	2380      	movs	r3, #128	; 0x80
 800281e:	045c      	lsls	r4, r3, #17
 8002820:	230a      	movs	r3, #10
 8002822:	18fb      	adds	r3, r7, r3
 8002824:	8819      	ldrh	r1, [r3, #0]
 8002826:	68f8      	ldr	r0, [r7, #12]
 8002828:	2300      	movs	r3, #0
 800282a:	9300      	str	r3, [sp, #0]
 800282c:	0023      	movs	r3, r4
 800282e:	f000 fbb1 	bl	8002f94 <I2C_TransferConfig>
 8002832:	e012      	b.n	800285a <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002838:	b29a      	uxth	r2, r3
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002842:	b2da      	uxtb	r2, r3
 8002844:	2380      	movs	r3, #128	; 0x80
 8002846:	049c      	lsls	r4, r3, #18
 8002848:	230a      	movs	r3, #10
 800284a:	18fb      	adds	r3, r7, r3
 800284c:	8819      	ldrh	r1, [r3, #0]
 800284e:	68f8      	ldr	r0, [r7, #12]
 8002850:	2300      	movs	r3, #0
 8002852:	9300      	str	r3, [sp, #0]
 8002854:	0023      	movs	r3, r4
 8002856:	f000 fb9d 	bl	8002f94 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800285e:	b29b      	uxth	r3, r3
 8002860:	2b00      	cmp	r3, #0
 8002862:	d198      	bne.n	8002796 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002864:	697a      	ldr	r2, [r7, #20]
 8002866:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	0018      	movs	r0, r3
 800286c:	f000 f9d0 	bl	8002c10 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002870:	1e03      	subs	r3, r0, #0
 8002872:	d001      	beq.n	8002878 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	e01a      	b.n	80028ae <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	2220      	movs	r2, #32
 800287e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	685a      	ldr	r2, [r3, #4]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	490c      	ldr	r1, [pc, #48]	; (80028bc <HAL_I2C_Master_Transmit+0x20c>)
 800288c:	400a      	ands	r2, r1
 800288e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2241      	movs	r2, #65	; 0x41
 8002894:	2120      	movs	r1, #32
 8002896:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2242      	movs	r2, #66	; 0x42
 800289c:	2100      	movs	r1, #0
 800289e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2240      	movs	r2, #64	; 0x40
 80028a4:	2100      	movs	r1, #0
 80028a6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80028a8:	2300      	movs	r3, #0
 80028aa:	e000      	b.n	80028ae <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 80028ac:	2302      	movs	r3, #2
  }
}
 80028ae:	0018      	movs	r0, r3
 80028b0:	46bd      	mov	sp, r7
 80028b2:	b007      	add	sp, #28
 80028b4:	bd90      	pop	{r4, r7, pc}
 80028b6:	46c0      	nop			; (mov r8, r8)
 80028b8:	80002000 	.word	0x80002000
 80028bc:	fe00e800 	.word	0xfe00e800

080028c0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80028c0:	b590      	push	{r4, r7, lr}
 80028c2:	b089      	sub	sp, #36	; 0x24
 80028c4:	af02      	add	r7, sp, #8
 80028c6:	60f8      	str	r0, [r7, #12]
 80028c8:	0008      	movs	r0, r1
 80028ca:	607a      	str	r2, [r7, #4]
 80028cc:	0019      	movs	r1, r3
 80028ce:	230a      	movs	r3, #10
 80028d0:	18fb      	adds	r3, r7, r3
 80028d2:	1c02      	adds	r2, r0, #0
 80028d4:	801a      	strh	r2, [r3, #0]
 80028d6:	2308      	movs	r3, #8
 80028d8:	18fb      	adds	r3, r7, r3
 80028da:	1c0a      	adds	r2, r1, #0
 80028dc:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2241      	movs	r2, #65	; 0x41
 80028e2:	5c9b      	ldrb	r3, [r3, r2]
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	2b20      	cmp	r3, #32
 80028e8:	d000      	beq.n	80028ec <HAL_I2C_Master_Receive+0x2c>
 80028ea:	e0e8      	b.n	8002abe <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2240      	movs	r2, #64	; 0x40
 80028f0:	5c9b      	ldrb	r3, [r3, r2]
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d101      	bne.n	80028fa <HAL_I2C_Master_Receive+0x3a>
 80028f6:	2302      	movs	r3, #2
 80028f8:	e0e2      	b.n	8002ac0 <HAL_I2C_Master_Receive+0x200>
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2240      	movs	r2, #64	; 0x40
 80028fe:	2101      	movs	r1, #1
 8002900:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002902:	f7ff fa97 	bl	8001e34 <HAL_GetTick>
 8002906:	0003      	movs	r3, r0
 8002908:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800290a:	2380      	movs	r3, #128	; 0x80
 800290c:	0219      	lsls	r1, r3, #8
 800290e:	68f8      	ldr	r0, [r7, #12]
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	9300      	str	r3, [sp, #0]
 8002914:	2319      	movs	r3, #25
 8002916:	2201      	movs	r2, #1
 8002918:	f000 f8fc 	bl	8002b14 <I2C_WaitOnFlagUntilTimeout>
 800291c:	1e03      	subs	r3, r0, #0
 800291e:	d001      	beq.n	8002924 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e0cd      	b.n	8002ac0 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2241      	movs	r2, #65	; 0x41
 8002928:	2122      	movs	r1, #34	; 0x22
 800292a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2242      	movs	r2, #66	; 0x42
 8002930:	2110      	movs	r1, #16
 8002932:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2200      	movs	r2, #0
 8002938:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2208      	movs	r2, #8
 8002944:	18ba      	adds	r2, r7, r2
 8002946:	8812      	ldrh	r2, [r2, #0]
 8002948:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2200      	movs	r2, #0
 800294e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002954:	b29b      	uxth	r3, r3
 8002956:	2bff      	cmp	r3, #255	; 0xff
 8002958:	d911      	bls.n	800297e <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	22ff      	movs	r2, #255	; 0xff
 800295e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002964:	b2da      	uxtb	r2, r3
 8002966:	2380      	movs	r3, #128	; 0x80
 8002968:	045c      	lsls	r4, r3, #17
 800296a:	230a      	movs	r3, #10
 800296c:	18fb      	adds	r3, r7, r3
 800296e:	8819      	ldrh	r1, [r3, #0]
 8002970:	68f8      	ldr	r0, [r7, #12]
 8002972:	4b55      	ldr	r3, [pc, #340]	; (8002ac8 <HAL_I2C_Master_Receive+0x208>)
 8002974:	9300      	str	r3, [sp, #0]
 8002976:	0023      	movs	r3, r4
 8002978:	f000 fb0c 	bl	8002f94 <I2C_TransferConfig>
 800297c:	e076      	b.n	8002a6c <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002982:	b29a      	uxth	r2, r3
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800298c:	b2da      	uxtb	r2, r3
 800298e:	2380      	movs	r3, #128	; 0x80
 8002990:	049c      	lsls	r4, r3, #18
 8002992:	230a      	movs	r3, #10
 8002994:	18fb      	adds	r3, r7, r3
 8002996:	8819      	ldrh	r1, [r3, #0]
 8002998:	68f8      	ldr	r0, [r7, #12]
 800299a:	4b4b      	ldr	r3, [pc, #300]	; (8002ac8 <HAL_I2C_Master_Receive+0x208>)
 800299c:	9300      	str	r3, [sp, #0]
 800299e:	0023      	movs	r3, r4
 80029a0:	f000 faf8 	bl	8002f94 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80029a4:	e062      	b.n	8002a6c <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029a6:	697a      	ldr	r2, [r7, #20]
 80029a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	0018      	movs	r0, r3
 80029ae:	f000 f96b 	bl	8002c88 <I2C_WaitOnRXNEFlagUntilTimeout>
 80029b2:	1e03      	subs	r3, r0, #0
 80029b4:	d001      	beq.n	80029ba <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e082      	b.n	8002ac0 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c4:	b2d2      	uxtb	r2, r2
 80029c6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029cc:	1c5a      	adds	r2, r3, #1
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029d6:	3b01      	subs	r3, #1
 80029d8:	b29a      	uxth	r2, r3
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029e2:	b29b      	uxth	r3, r3
 80029e4:	3b01      	subs	r3, #1
 80029e6:	b29a      	uxth	r2, r3
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029f0:	b29b      	uxth	r3, r3
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d03a      	beq.n	8002a6c <HAL_I2C_Master_Receive+0x1ac>
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d136      	bne.n	8002a6c <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80029fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a00:	68f8      	ldr	r0, [r7, #12]
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	9300      	str	r3, [sp, #0]
 8002a06:	0013      	movs	r3, r2
 8002a08:	2200      	movs	r2, #0
 8002a0a:	2180      	movs	r1, #128	; 0x80
 8002a0c:	f000 f882 	bl	8002b14 <I2C_WaitOnFlagUntilTimeout>
 8002a10:	1e03      	subs	r3, r0, #0
 8002a12:	d001      	beq.n	8002a18 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e053      	b.n	8002ac0 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	2bff      	cmp	r3, #255	; 0xff
 8002a20:	d911      	bls.n	8002a46 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	22ff      	movs	r2, #255	; 0xff
 8002a26:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a2c:	b2da      	uxtb	r2, r3
 8002a2e:	2380      	movs	r3, #128	; 0x80
 8002a30:	045c      	lsls	r4, r3, #17
 8002a32:	230a      	movs	r3, #10
 8002a34:	18fb      	adds	r3, r7, r3
 8002a36:	8819      	ldrh	r1, [r3, #0]
 8002a38:	68f8      	ldr	r0, [r7, #12]
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	9300      	str	r3, [sp, #0]
 8002a3e:	0023      	movs	r3, r4
 8002a40:	f000 faa8 	bl	8002f94 <I2C_TransferConfig>
 8002a44:	e012      	b.n	8002a6c <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a4a:	b29a      	uxth	r2, r3
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a54:	b2da      	uxtb	r2, r3
 8002a56:	2380      	movs	r3, #128	; 0x80
 8002a58:	049c      	lsls	r4, r3, #18
 8002a5a:	230a      	movs	r3, #10
 8002a5c:	18fb      	adds	r3, r7, r3
 8002a5e:	8819      	ldrh	r1, [r3, #0]
 8002a60:	68f8      	ldr	r0, [r7, #12]
 8002a62:	2300      	movs	r3, #0
 8002a64:	9300      	str	r3, [sp, #0]
 8002a66:	0023      	movs	r3, r4
 8002a68:	f000 fa94 	bl	8002f94 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a70:	b29b      	uxth	r3, r3
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d197      	bne.n	80029a6 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a76:	697a      	ldr	r2, [r7, #20]
 8002a78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	0018      	movs	r0, r3
 8002a7e:	f000 f8c7 	bl	8002c10 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002a82:	1e03      	subs	r3, r0, #0
 8002a84:	d001      	beq.n	8002a8a <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e01a      	b.n	8002ac0 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	2220      	movs	r2, #32
 8002a90:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	685a      	ldr	r2, [r3, #4]
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	490b      	ldr	r1, [pc, #44]	; (8002acc <HAL_I2C_Master_Receive+0x20c>)
 8002a9e:	400a      	ands	r2, r1
 8002aa0:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2241      	movs	r2, #65	; 0x41
 8002aa6:	2120      	movs	r1, #32
 8002aa8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2242      	movs	r2, #66	; 0x42
 8002aae:	2100      	movs	r1, #0
 8002ab0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2240      	movs	r2, #64	; 0x40
 8002ab6:	2100      	movs	r1, #0
 8002ab8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002aba:	2300      	movs	r3, #0
 8002abc:	e000      	b.n	8002ac0 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8002abe:	2302      	movs	r3, #2
  }
}
 8002ac0:	0018      	movs	r0, r3
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	b007      	add	sp, #28
 8002ac6:	bd90      	pop	{r4, r7, pc}
 8002ac8:	80002400 	.word	0x80002400
 8002acc:	fe00e800 	.word	0xfe00e800

08002ad0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b082      	sub	sp, #8
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	699b      	ldr	r3, [r3, #24]
 8002ade:	2202      	movs	r2, #2
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	2b02      	cmp	r3, #2
 8002ae4:	d103      	bne.n	8002aee <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	2200      	movs	r2, #0
 8002aec:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	699b      	ldr	r3, [r3, #24]
 8002af4:	2201      	movs	r2, #1
 8002af6:	4013      	ands	r3, r2
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d007      	beq.n	8002b0c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	699a      	ldr	r2, [r3, #24]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	2101      	movs	r1, #1
 8002b08:	430a      	orrs	r2, r1
 8002b0a:	619a      	str	r2, [r3, #24]
  }
}
 8002b0c:	46c0      	nop			; (mov r8, r8)
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	b002      	add	sp, #8
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b084      	sub	sp, #16
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	60f8      	str	r0, [r7, #12]
 8002b1c:	60b9      	str	r1, [r7, #8]
 8002b1e:	603b      	str	r3, [r7, #0]
 8002b20:	1dfb      	adds	r3, r7, #7
 8002b22:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b24:	e021      	b.n	8002b6a <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	3301      	adds	r3, #1
 8002b2a:	d01e      	beq.n	8002b6a <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b2c:	f7ff f982 	bl	8001e34 <HAL_GetTick>
 8002b30:	0002      	movs	r2, r0
 8002b32:	69bb      	ldr	r3, [r7, #24]
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	683a      	ldr	r2, [r7, #0]
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d302      	bcc.n	8002b42 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d113      	bne.n	8002b6a <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b46:	2220      	movs	r2, #32
 8002b48:	431a      	orrs	r2, r3
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2241      	movs	r2, #65	; 0x41
 8002b52:	2120      	movs	r1, #32
 8002b54:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2242      	movs	r2, #66	; 0x42
 8002b5a:	2100      	movs	r1, #0
 8002b5c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2240      	movs	r2, #64	; 0x40
 8002b62:	2100      	movs	r1, #0
 8002b64:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e00f      	b.n	8002b8a <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	699b      	ldr	r3, [r3, #24]
 8002b70:	68ba      	ldr	r2, [r7, #8]
 8002b72:	4013      	ands	r3, r2
 8002b74:	68ba      	ldr	r2, [r7, #8]
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	425a      	negs	r2, r3
 8002b7a:	4153      	adcs	r3, r2
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	001a      	movs	r2, r3
 8002b80:	1dfb      	adds	r3, r7, #7
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d0ce      	beq.n	8002b26 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002b88:	2300      	movs	r3, #0
}
 8002b8a:	0018      	movs	r0, r3
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	b004      	add	sp, #16
 8002b90:	bd80      	pop	{r7, pc}

08002b92 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002b92:	b580      	push	{r7, lr}
 8002b94:	b084      	sub	sp, #16
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	60f8      	str	r0, [r7, #12]
 8002b9a:	60b9      	str	r1, [r7, #8]
 8002b9c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002b9e:	e02b      	b.n	8002bf8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ba0:	687a      	ldr	r2, [r7, #4]
 8002ba2:	68b9      	ldr	r1, [r7, #8]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	0018      	movs	r0, r3
 8002ba8:	f000 f8e8 	bl	8002d7c <I2C_IsErrorOccurred>
 8002bac:	1e03      	subs	r3, r0, #0
 8002bae:	d001      	beq.n	8002bb4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e029      	b.n	8002c08 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	3301      	adds	r3, #1
 8002bb8:	d01e      	beq.n	8002bf8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bba:	f7ff f93b 	bl	8001e34 <HAL_GetTick>
 8002bbe:	0002      	movs	r2, r0
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	68ba      	ldr	r2, [r7, #8]
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d302      	bcc.n	8002bd0 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d113      	bne.n	8002bf8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bd4:	2220      	movs	r2, #32
 8002bd6:	431a      	orrs	r2, r3
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2241      	movs	r2, #65	; 0x41
 8002be0:	2120      	movs	r1, #32
 8002be2:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2242      	movs	r2, #66	; 0x42
 8002be8:	2100      	movs	r1, #0
 8002bea:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2240      	movs	r2, #64	; 0x40
 8002bf0:	2100      	movs	r1, #0
 8002bf2:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e007      	b.n	8002c08 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	699b      	ldr	r3, [r3, #24]
 8002bfe:	2202      	movs	r2, #2
 8002c00:	4013      	ands	r3, r2
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d1cc      	bne.n	8002ba0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002c06:	2300      	movs	r3, #0
}
 8002c08:	0018      	movs	r0, r3
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	b004      	add	sp, #16
 8002c0e:	bd80      	pop	{r7, pc}

08002c10 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b084      	sub	sp, #16
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	60f8      	str	r0, [r7, #12]
 8002c18:	60b9      	str	r1, [r7, #8]
 8002c1a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c1c:	e028      	b.n	8002c70 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	68b9      	ldr	r1, [r7, #8]
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	0018      	movs	r0, r3
 8002c26:	f000 f8a9 	bl	8002d7c <I2C_IsErrorOccurred>
 8002c2a:	1e03      	subs	r3, r0, #0
 8002c2c:	d001      	beq.n	8002c32 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e026      	b.n	8002c80 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c32:	f7ff f8ff 	bl	8001e34 <HAL_GetTick>
 8002c36:	0002      	movs	r2, r0
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	1ad3      	subs	r3, r2, r3
 8002c3c:	68ba      	ldr	r2, [r7, #8]
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	d302      	bcc.n	8002c48 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d113      	bne.n	8002c70 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c4c:	2220      	movs	r2, #32
 8002c4e:	431a      	orrs	r2, r3
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2241      	movs	r2, #65	; 0x41
 8002c58:	2120      	movs	r1, #32
 8002c5a:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2242      	movs	r2, #66	; 0x42
 8002c60:	2100      	movs	r1, #0
 8002c62:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2240      	movs	r2, #64	; 0x40
 8002c68:	2100      	movs	r1, #0
 8002c6a:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e007      	b.n	8002c80 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	699b      	ldr	r3, [r3, #24]
 8002c76:	2220      	movs	r2, #32
 8002c78:	4013      	ands	r3, r2
 8002c7a:	2b20      	cmp	r3, #32
 8002c7c:	d1cf      	bne.n	8002c1e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002c7e:	2300      	movs	r3, #0
}
 8002c80:	0018      	movs	r0, r3
 8002c82:	46bd      	mov	sp, r7
 8002c84:	b004      	add	sp, #16
 8002c86:	bd80      	pop	{r7, pc}

08002c88 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b084      	sub	sp, #16
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	60f8      	str	r0, [r7, #12]
 8002c90:	60b9      	str	r1, [r7, #8]
 8002c92:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002c94:	e064      	b.n	8002d60 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	68b9      	ldr	r1, [r7, #8]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	0018      	movs	r0, r3
 8002c9e:	f000 f86d 	bl	8002d7c <I2C_IsErrorOccurred>
 8002ca2:	1e03      	subs	r3, r0, #0
 8002ca4:	d001      	beq.n	8002caa <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e062      	b.n	8002d70 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	699b      	ldr	r3, [r3, #24]
 8002cb0:	2220      	movs	r2, #32
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	2b20      	cmp	r3, #32
 8002cb6:	d138      	bne.n	8002d2a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	699b      	ldr	r3, [r3, #24]
 8002cbe:	2204      	movs	r2, #4
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	2b04      	cmp	r3, #4
 8002cc4:	d105      	bne.n	8002cd2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d001      	beq.n	8002cd2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	e04e      	b.n	8002d70 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	699b      	ldr	r3, [r3, #24]
 8002cd8:	2210      	movs	r2, #16
 8002cda:	4013      	ands	r3, r2
 8002cdc:	2b10      	cmp	r3, #16
 8002cde:	d107      	bne.n	8002cf0 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	2210      	movs	r2, #16
 8002ce6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2204      	movs	r2, #4
 8002cec:	645a      	str	r2, [r3, #68]	; 0x44
 8002cee:	e002      	b.n	8002cf6 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	2220      	movs	r2, #32
 8002cfc:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	685a      	ldr	r2, [r3, #4]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	491b      	ldr	r1, [pc, #108]	; (8002d78 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8002d0a:	400a      	ands	r2, r1
 8002d0c:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2241      	movs	r2, #65	; 0x41
 8002d12:	2120      	movs	r1, #32
 8002d14:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2242      	movs	r2, #66	; 0x42
 8002d1a:	2100      	movs	r1, #0
 8002d1c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2240      	movs	r2, #64	; 0x40
 8002d22:	2100      	movs	r1, #0
 8002d24:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e022      	b.n	8002d70 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d2a:	f7ff f883 	bl	8001e34 <HAL_GetTick>
 8002d2e:	0002      	movs	r2, r0
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	1ad3      	subs	r3, r2, r3
 8002d34:	68ba      	ldr	r2, [r7, #8]
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d302      	bcc.n	8002d40 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d10f      	bne.n	8002d60 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d44:	2220      	movs	r2, #32
 8002d46:	431a      	orrs	r2, r3
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2241      	movs	r2, #65	; 0x41
 8002d50:	2120      	movs	r1, #32
 8002d52:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2240      	movs	r2, #64	; 0x40
 8002d58:	2100      	movs	r1, #0
 8002d5a:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e007      	b.n	8002d70 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	699b      	ldr	r3, [r3, #24]
 8002d66:	2204      	movs	r2, #4
 8002d68:	4013      	ands	r3, r2
 8002d6a:	2b04      	cmp	r3, #4
 8002d6c:	d193      	bne.n	8002c96 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002d6e:	2300      	movs	r3, #0
}
 8002d70:	0018      	movs	r0, r3
 8002d72:	46bd      	mov	sp, r7
 8002d74:	b004      	add	sp, #16
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	fe00e800 	.word	0xfe00e800

08002d7c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d7c:	b590      	push	{r4, r7, lr}
 8002d7e:	b08b      	sub	sp, #44	; 0x2c
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	60f8      	str	r0, [r7, #12]
 8002d84:	60b9      	str	r1, [r7, #8]
 8002d86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d88:	2327      	movs	r3, #39	; 0x27
 8002d8a:	18fb      	adds	r3, r7, r3
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	699b      	ldr	r3, [r3, #24]
 8002d96:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002da0:	69bb      	ldr	r3, [r7, #24]
 8002da2:	2210      	movs	r2, #16
 8002da4:	4013      	ands	r3, r2
 8002da6:	d100      	bne.n	8002daa <I2C_IsErrorOccurred+0x2e>
 8002da8:	e08e      	b.n	8002ec8 <I2C_IsErrorOccurred+0x14c>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	2210      	movs	r2, #16
 8002db0:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002db2:	e06c      	b.n	8002e8e <I2C_IsErrorOccurred+0x112>
 8002db4:	2427      	movs	r4, #39	; 0x27
 8002db6:	193b      	adds	r3, r7, r4
 8002db8:	193a      	adds	r2, r7, r4
 8002dba:	7812      	ldrb	r2, [r2, #0]
 8002dbc:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	3301      	adds	r3, #1
 8002dc2:	d064      	beq.n	8002e8e <I2C_IsErrorOccurred+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002dc4:	f7ff f836 	bl	8001e34 <HAL_GetTick>
 8002dc8:	0002      	movs	r2, r0
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	68ba      	ldr	r2, [r7, #8]
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d306      	bcc.n	8002de2 <I2C_IsErrorOccurred+0x66>
 8002dd4:	193b      	adds	r3, r7, r4
 8002dd6:	193a      	adds	r2, r7, r4
 8002dd8:	7812      	ldrb	r2, [r2, #0]
 8002dda:	701a      	strb	r2, [r3, #0]
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d155      	bne.n	8002e8e <I2C_IsErrorOccurred+0x112>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	685a      	ldr	r2, [r3, #4]
 8002de8:	2380      	movs	r3, #128	; 0x80
 8002dea:	01db      	lsls	r3, r3, #7
 8002dec:	4013      	ands	r3, r2
 8002dee:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002df0:	2013      	movs	r0, #19
 8002df2:	183b      	adds	r3, r7, r0
 8002df4:	68fa      	ldr	r2, [r7, #12]
 8002df6:	2142      	movs	r1, #66	; 0x42
 8002df8:	5c52      	ldrb	r2, [r2, r1]
 8002dfa:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	699a      	ldr	r2, [r3, #24]
 8002e02:	2380      	movs	r3, #128	; 0x80
 8002e04:	021b      	lsls	r3, r3, #8
 8002e06:	401a      	ands	r2, r3
 8002e08:	2380      	movs	r3, #128	; 0x80
 8002e0a:	021b      	lsls	r3, r3, #8
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d137      	bne.n	8002e80 <I2C_IsErrorOccurred+0x104>
 8002e10:	697a      	ldr	r2, [r7, #20]
 8002e12:	2380      	movs	r3, #128	; 0x80
 8002e14:	01db      	lsls	r3, r3, #7
 8002e16:	429a      	cmp	r2, r3
 8002e18:	d032      	beq.n	8002e80 <I2C_IsErrorOccurred+0x104>
              (tmp1 != I2C_CR2_STOP) && \
 8002e1a:	183b      	adds	r3, r7, r0
 8002e1c:	781b      	ldrb	r3, [r3, #0]
 8002e1e:	2b20      	cmp	r3, #32
 8002e20:	d02e      	beq.n	8002e80 <I2C_IsErrorOccurred+0x104>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	685a      	ldr	r2, [r3, #4]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	2180      	movs	r1, #128	; 0x80
 8002e2e:	01c9      	lsls	r1, r1, #7
 8002e30:	430a      	orrs	r2, r1
 8002e32:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002e34:	f7fe fffe 	bl	8001e34 <HAL_GetTick>
 8002e38:	0003      	movs	r3, r0
 8002e3a:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e3c:	e020      	b.n	8002e80 <I2C_IsErrorOccurred+0x104>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002e3e:	f7fe fff9 	bl	8001e34 <HAL_GetTick>
 8002e42:	0002      	movs	r2, r0
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	1ad3      	subs	r3, r2, r3
 8002e48:	2027      	movs	r0, #39	; 0x27
 8002e4a:	183a      	adds	r2, r7, r0
 8002e4c:	1839      	adds	r1, r7, r0
 8002e4e:	7809      	ldrb	r1, [r1, #0]
 8002e50:	7011      	strb	r1, [r2, #0]
 8002e52:	2b19      	cmp	r3, #25
 8002e54:	d914      	bls.n	8002e80 <I2C_IsErrorOccurred+0x104>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e5a:	2220      	movs	r2, #32
 8002e5c:	431a      	orrs	r2, r3
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2241      	movs	r2, #65	; 0x41
 8002e66:	2120      	movs	r1, #32
 8002e68:	5499      	strb	r1, [r3, r2]
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2242      	movs	r2, #66	; 0x42
 8002e6e:	2100      	movs	r1, #0
 8002e70:	5499      	strb	r1, [r3, r2]

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2240      	movs	r2, #64	; 0x40
 8002e76:	2100      	movs	r1, #0
 8002e78:	5499      	strb	r1, [r3, r2]

              status = HAL_ERROR;
 8002e7a:	183b      	adds	r3, r7, r0
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	701a      	strb	r2, [r3, #0]
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	699b      	ldr	r3, [r3, #24]
 8002e86:	2220      	movs	r2, #32
 8002e88:	4013      	ands	r3, r2
 8002e8a:	2b20      	cmp	r3, #32
 8002e8c:	d1d7      	bne.n	8002e3e <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	699b      	ldr	r3, [r3, #24]
 8002e94:	2220      	movs	r2, #32
 8002e96:	4013      	ands	r3, r2
 8002e98:	2b20      	cmp	r3, #32
 8002e9a:	d004      	beq.n	8002ea6 <I2C_IsErrorOccurred+0x12a>
 8002e9c:	2327      	movs	r3, #39	; 0x27
 8002e9e:	18fb      	adds	r3, r7, r3
 8002ea0:	781b      	ldrb	r3, [r3, #0]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d086      	beq.n	8002db4 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002ea6:	2327      	movs	r3, #39	; 0x27
 8002ea8:	18fb      	adds	r3, r7, r3
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d103      	bne.n	8002eb8 <I2C_IsErrorOccurred+0x13c>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	2220      	movs	r2, #32
 8002eb6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002eb8:	6a3b      	ldr	r3, [r7, #32]
 8002eba:	2204      	movs	r2, #4
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002ec0:	2327      	movs	r3, #39	; 0x27
 8002ec2:	18fb      	adds	r3, r7, r3
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	699b      	ldr	r3, [r3, #24]
 8002ece:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002ed0:	69ba      	ldr	r2, [r7, #24]
 8002ed2:	2380      	movs	r3, #128	; 0x80
 8002ed4:	005b      	lsls	r3, r3, #1
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	d00c      	beq.n	8002ef4 <I2C_IsErrorOccurred+0x178>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002eda:	6a3b      	ldr	r3, [r7, #32]
 8002edc:	2201      	movs	r2, #1
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	2280      	movs	r2, #128	; 0x80
 8002ee8:	0052      	lsls	r2, r2, #1
 8002eea:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002eec:	2327      	movs	r3, #39	; 0x27
 8002eee:	18fb      	adds	r3, r7, r3
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002ef4:	69ba      	ldr	r2, [r7, #24]
 8002ef6:	2380      	movs	r3, #128	; 0x80
 8002ef8:	00db      	lsls	r3, r3, #3
 8002efa:	4013      	ands	r3, r2
 8002efc:	d00c      	beq.n	8002f18 <I2C_IsErrorOccurred+0x19c>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002efe:	6a3b      	ldr	r3, [r7, #32]
 8002f00:	2208      	movs	r2, #8
 8002f02:	4313      	orrs	r3, r2
 8002f04:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	2280      	movs	r2, #128	; 0x80
 8002f0c:	00d2      	lsls	r2, r2, #3
 8002f0e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002f10:	2327      	movs	r3, #39	; 0x27
 8002f12:	18fb      	adds	r3, r7, r3
 8002f14:	2201      	movs	r2, #1
 8002f16:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002f18:	69ba      	ldr	r2, [r7, #24]
 8002f1a:	2380      	movs	r3, #128	; 0x80
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	4013      	ands	r3, r2
 8002f20:	d00c      	beq.n	8002f3c <I2C_IsErrorOccurred+0x1c0>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002f22:	6a3b      	ldr	r3, [r7, #32]
 8002f24:	2202      	movs	r2, #2
 8002f26:	4313      	orrs	r3, r2
 8002f28:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	2280      	movs	r2, #128	; 0x80
 8002f30:	0092      	lsls	r2, r2, #2
 8002f32:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002f34:	2327      	movs	r3, #39	; 0x27
 8002f36:	18fb      	adds	r3, r7, r3
 8002f38:	2201      	movs	r2, #1
 8002f3a:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8002f3c:	2327      	movs	r3, #39	; 0x27
 8002f3e:	18fb      	adds	r3, r7, r3
 8002f40:	781b      	ldrb	r3, [r3, #0]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d01d      	beq.n	8002f82 <I2C_IsErrorOccurred+0x206>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	0018      	movs	r0, r3
 8002f4a:	f7ff fdc1 	bl	8002ad0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	685a      	ldr	r2, [r3, #4]
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	490d      	ldr	r1, [pc, #52]	; (8002f90 <I2C_IsErrorOccurred+0x214>)
 8002f5a:	400a      	ands	r2, r1
 8002f5c:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f62:	6a3b      	ldr	r3, [r7, #32]
 8002f64:	431a      	orrs	r2, r3
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2241      	movs	r2, #65	; 0x41
 8002f6e:	2120      	movs	r1, #32
 8002f70:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2242      	movs	r2, #66	; 0x42
 8002f76:	2100      	movs	r1, #0
 8002f78:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2240      	movs	r2, #64	; 0x40
 8002f7e:	2100      	movs	r1, #0
 8002f80:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8002f82:	2327      	movs	r3, #39	; 0x27
 8002f84:	18fb      	adds	r3, r7, r3
 8002f86:	781b      	ldrb	r3, [r3, #0]
}
 8002f88:	0018      	movs	r0, r3
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	b00b      	add	sp, #44	; 0x2c
 8002f8e:	bd90      	pop	{r4, r7, pc}
 8002f90:	fe00e800 	.word	0xfe00e800

08002f94 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002f94:	b590      	push	{r4, r7, lr}
 8002f96:	b087      	sub	sp, #28
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	60f8      	str	r0, [r7, #12]
 8002f9c:	0008      	movs	r0, r1
 8002f9e:	0011      	movs	r1, r2
 8002fa0:	607b      	str	r3, [r7, #4]
 8002fa2:	240a      	movs	r4, #10
 8002fa4:	193b      	adds	r3, r7, r4
 8002fa6:	1c02      	adds	r2, r0, #0
 8002fa8:	801a      	strh	r2, [r3, #0]
 8002faa:	2009      	movs	r0, #9
 8002fac:	183b      	adds	r3, r7, r0
 8002fae:	1c0a      	adds	r2, r1, #0
 8002fb0:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002fb2:	193b      	adds	r3, r7, r4
 8002fb4:	881b      	ldrh	r3, [r3, #0]
 8002fb6:	059b      	lsls	r3, r3, #22
 8002fb8:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002fba:	183b      	adds	r3, r7, r0
 8002fbc:	781b      	ldrb	r3, [r3, #0]
 8002fbe:	0419      	lsls	r1, r3, #16
 8002fc0:	23ff      	movs	r3, #255	; 0xff
 8002fc2:	041b      	lsls	r3, r3, #16
 8002fc4:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002fc6:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	005b      	lsls	r3, r3, #1
 8002fd2:	085b      	lsrs	r3, r3, #1
 8002fd4:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002fde:	0d51      	lsrs	r1, r2, #21
 8002fe0:	2280      	movs	r2, #128	; 0x80
 8002fe2:	00d2      	lsls	r2, r2, #3
 8002fe4:	400a      	ands	r2, r1
 8002fe6:	4907      	ldr	r1, [pc, #28]	; (8003004 <I2C_TransferConfig+0x70>)
 8002fe8:	430a      	orrs	r2, r1
 8002fea:	43d2      	mvns	r2, r2
 8002fec:	401a      	ands	r2, r3
 8002fee:	0011      	movs	r1, r2
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	697a      	ldr	r2, [r7, #20]
 8002ff6:	430a      	orrs	r2, r1
 8002ff8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002ffa:	46c0      	nop			; (mov r8, r8)
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	b007      	add	sp, #28
 8003000:	bd90      	pop	{r4, r7, pc}
 8003002:	46c0      	nop			; (mov r8, r8)
 8003004:	03ff63ff 	.word	0x03ff63ff

08003008 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b082      	sub	sp, #8
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2241      	movs	r2, #65	; 0x41
 8003016:	5c9b      	ldrb	r3, [r3, r2]
 8003018:	b2db      	uxtb	r3, r3
 800301a:	2b20      	cmp	r3, #32
 800301c:	d138      	bne.n	8003090 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2240      	movs	r2, #64	; 0x40
 8003022:	5c9b      	ldrb	r3, [r3, r2]
 8003024:	2b01      	cmp	r3, #1
 8003026:	d101      	bne.n	800302c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003028:	2302      	movs	r3, #2
 800302a:	e032      	b.n	8003092 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2240      	movs	r2, #64	; 0x40
 8003030:	2101      	movs	r1, #1
 8003032:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2241      	movs	r2, #65	; 0x41
 8003038:	2124      	movs	r1, #36	; 0x24
 800303a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	2101      	movs	r1, #1
 8003048:	438a      	bics	r2, r1
 800304a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4911      	ldr	r1, [pc, #68]	; (800309c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003058:	400a      	ands	r2, r1
 800305a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	6819      	ldr	r1, [r3, #0]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	683a      	ldr	r2, [r7, #0]
 8003068:	430a      	orrs	r2, r1
 800306a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	2101      	movs	r1, #1
 8003078:	430a      	orrs	r2, r1
 800307a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2241      	movs	r2, #65	; 0x41
 8003080:	2120      	movs	r1, #32
 8003082:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2240      	movs	r2, #64	; 0x40
 8003088:	2100      	movs	r1, #0
 800308a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800308c:	2300      	movs	r3, #0
 800308e:	e000      	b.n	8003092 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003090:	2302      	movs	r3, #2
  }
}
 8003092:	0018      	movs	r0, r3
 8003094:	46bd      	mov	sp, r7
 8003096:	b002      	add	sp, #8
 8003098:	bd80      	pop	{r7, pc}
 800309a:	46c0      	nop			; (mov r8, r8)
 800309c:	ffffefff 	.word	0xffffefff

080030a0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b084      	sub	sp, #16
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2241      	movs	r2, #65	; 0x41
 80030ae:	5c9b      	ldrb	r3, [r3, r2]
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	2b20      	cmp	r3, #32
 80030b4:	d139      	bne.n	800312a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2240      	movs	r2, #64	; 0x40
 80030ba:	5c9b      	ldrb	r3, [r3, r2]
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d101      	bne.n	80030c4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80030c0:	2302      	movs	r3, #2
 80030c2:	e033      	b.n	800312c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2240      	movs	r2, #64	; 0x40
 80030c8:	2101      	movs	r1, #1
 80030ca:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2241      	movs	r2, #65	; 0x41
 80030d0:	2124      	movs	r1, #36	; 0x24
 80030d2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	2101      	movs	r1, #1
 80030e0:	438a      	bics	r2, r1
 80030e2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	4a11      	ldr	r2, [pc, #68]	; (8003134 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80030f0:	4013      	ands	r3, r2
 80030f2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	021b      	lsls	r3, r3, #8
 80030f8:	68fa      	ldr	r2, [r7, #12]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	68fa      	ldr	r2, [r7, #12]
 8003104:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	2101      	movs	r1, #1
 8003112:	430a      	orrs	r2, r1
 8003114:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2241      	movs	r2, #65	; 0x41
 800311a:	2120      	movs	r1, #32
 800311c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2240      	movs	r2, #64	; 0x40
 8003122:	2100      	movs	r1, #0
 8003124:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003126:	2300      	movs	r3, #0
 8003128:	e000      	b.n	800312c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800312a:	2302      	movs	r3, #2
  }
}
 800312c:	0018      	movs	r0, r3
 800312e:	46bd      	mov	sp, r7
 8003130:	b004      	add	sp, #16
 8003132:	bd80      	pop	{r7, pc}
 8003134:	fffff0ff 	.word	0xfffff0ff

08003138 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003140:	4b19      	ldr	r3, [pc, #100]	; (80031a8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a19      	ldr	r2, [pc, #100]	; (80031ac <HAL_PWREx_ControlVoltageScaling+0x74>)
 8003146:	4013      	ands	r3, r2
 8003148:	0019      	movs	r1, r3
 800314a:	4b17      	ldr	r3, [pc, #92]	; (80031a8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	430a      	orrs	r2, r1
 8003150:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	2380      	movs	r3, #128	; 0x80
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	429a      	cmp	r2, r3
 800315a:	d11f      	bne.n	800319c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800315c:	4b14      	ldr	r3, [pc, #80]	; (80031b0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	0013      	movs	r3, r2
 8003162:	005b      	lsls	r3, r3, #1
 8003164:	189b      	adds	r3, r3, r2
 8003166:	005b      	lsls	r3, r3, #1
 8003168:	4912      	ldr	r1, [pc, #72]	; (80031b4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800316a:	0018      	movs	r0, r3
 800316c:	f7fc ffde 	bl	800012c <__udivsi3>
 8003170:	0003      	movs	r3, r0
 8003172:	3301      	adds	r3, #1
 8003174:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003176:	e008      	b.n	800318a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d003      	beq.n	8003186 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	3b01      	subs	r3, #1
 8003182:	60fb      	str	r3, [r7, #12]
 8003184:	e001      	b.n	800318a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8003186:	2303      	movs	r3, #3
 8003188:	e009      	b.n	800319e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800318a:	4b07      	ldr	r3, [pc, #28]	; (80031a8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800318c:	695a      	ldr	r2, [r3, #20]
 800318e:	2380      	movs	r3, #128	; 0x80
 8003190:	00db      	lsls	r3, r3, #3
 8003192:	401a      	ands	r2, r3
 8003194:	2380      	movs	r3, #128	; 0x80
 8003196:	00db      	lsls	r3, r3, #3
 8003198:	429a      	cmp	r2, r3
 800319a:	d0ed      	beq.n	8003178 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800319c:	2300      	movs	r3, #0
}
 800319e:	0018      	movs	r0, r3
 80031a0:	46bd      	mov	sp, r7
 80031a2:	b004      	add	sp, #16
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	46c0      	nop			; (mov r8, r8)
 80031a8:	40007000 	.word	0x40007000
 80031ac:	fffff9ff 	.word	0xfffff9ff
 80031b0:	20000004 	.word	0x20000004
 80031b4:	000f4240 	.word	0x000f4240

080031b8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80031bc:	4b03      	ldr	r3, [pc, #12]	; (80031cc <LL_RCC_GetAPB1Prescaler+0x14>)
 80031be:	689a      	ldr	r2, [r3, #8]
 80031c0:	23e0      	movs	r3, #224	; 0xe0
 80031c2:	01db      	lsls	r3, r3, #7
 80031c4:	4013      	ands	r3, r2
}
 80031c6:	0018      	movs	r0, r3
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	40021000 	.word	0x40021000

080031d0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b088      	sub	sp, #32
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d101      	bne.n	80031e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e2fe      	b.n	80037e0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	2201      	movs	r2, #1
 80031e8:	4013      	ands	r3, r2
 80031ea:	d100      	bne.n	80031ee <HAL_RCC_OscConfig+0x1e>
 80031ec:	e07c      	b.n	80032e8 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031ee:	4bc3      	ldr	r3, [pc, #780]	; (80034fc <HAL_RCC_OscConfig+0x32c>)
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	2238      	movs	r2, #56	; 0x38
 80031f4:	4013      	ands	r3, r2
 80031f6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80031f8:	4bc0      	ldr	r3, [pc, #768]	; (80034fc <HAL_RCC_OscConfig+0x32c>)
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	2203      	movs	r2, #3
 80031fe:	4013      	ands	r3, r2
 8003200:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003202:	69bb      	ldr	r3, [r7, #24]
 8003204:	2b10      	cmp	r3, #16
 8003206:	d102      	bne.n	800320e <HAL_RCC_OscConfig+0x3e>
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	2b03      	cmp	r3, #3
 800320c:	d002      	beq.n	8003214 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800320e:	69bb      	ldr	r3, [r7, #24]
 8003210:	2b08      	cmp	r3, #8
 8003212:	d10b      	bne.n	800322c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003214:	4bb9      	ldr	r3, [pc, #740]	; (80034fc <HAL_RCC_OscConfig+0x32c>)
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	2380      	movs	r3, #128	; 0x80
 800321a:	029b      	lsls	r3, r3, #10
 800321c:	4013      	ands	r3, r2
 800321e:	d062      	beq.n	80032e6 <HAL_RCC_OscConfig+0x116>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d15e      	bne.n	80032e6 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	e2d9      	b.n	80037e0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	685a      	ldr	r2, [r3, #4]
 8003230:	2380      	movs	r3, #128	; 0x80
 8003232:	025b      	lsls	r3, r3, #9
 8003234:	429a      	cmp	r2, r3
 8003236:	d107      	bne.n	8003248 <HAL_RCC_OscConfig+0x78>
 8003238:	4bb0      	ldr	r3, [pc, #704]	; (80034fc <HAL_RCC_OscConfig+0x32c>)
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	4baf      	ldr	r3, [pc, #700]	; (80034fc <HAL_RCC_OscConfig+0x32c>)
 800323e:	2180      	movs	r1, #128	; 0x80
 8003240:	0249      	lsls	r1, r1, #9
 8003242:	430a      	orrs	r2, r1
 8003244:	601a      	str	r2, [r3, #0]
 8003246:	e020      	b.n	800328a <HAL_RCC_OscConfig+0xba>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	685a      	ldr	r2, [r3, #4]
 800324c:	23a0      	movs	r3, #160	; 0xa0
 800324e:	02db      	lsls	r3, r3, #11
 8003250:	429a      	cmp	r2, r3
 8003252:	d10e      	bne.n	8003272 <HAL_RCC_OscConfig+0xa2>
 8003254:	4ba9      	ldr	r3, [pc, #676]	; (80034fc <HAL_RCC_OscConfig+0x32c>)
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	4ba8      	ldr	r3, [pc, #672]	; (80034fc <HAL_RCC_OscConfig+0x32c>)
 800325a:	2180      	movs	r1, #128	; 0x80
 800325c:	02c9      	lsls	r1, r1, #11
 800325e:	430a      	orrs	r2, r1
 8003260:	601a      	str	r2, [r3, #0]
 8003262:	4ba6      	ldr	r3, [pc, #664]	; (80034fc <HAL_RCC_OscConfig+0x32c>)
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	4ba5      	ldr	r3, [pc, #660]	; (80034fc <HAL_RCC_OscConfig+0x32c>)
 8003268:	2180      	movs	r1, #128	; 0x80
 800326a:	0249      	lsls	r1, r1, #9
 800326c:	430a      	orrs	r2, r1
 800326e:	601a      	str	r2, [r3, #0]
 8003270:	e00b      	b.n	800328a <HAL_RCC_OscConfig+0xba>
 8003272:	4ba2      	ldr	r3, [pc, #648]	; (80034fc <HAL_RCC_OscConfig+0x32c>)
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	4ba1      	ldr	r3, [pc, #644]	; (80034fc <HAL_RCC_OscConfig+0x32c>)
 8003278:	49a1      	ldr	r1, [pc, #644]	; (8003500 <HAL_RCC_OscConfig+0x330>)
 800327a:	400a      	ands	r2, r1
 800327c:	601a      	str	r2, [r3, #0]
 800327e:	4b9f      	ldr	r3, [pc, #636]	; (80034fc <HAL_RCC_OscConfig+0x32c>)
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	4b9e      	ldr	r3, [pc, #632]	; (80034fc <HAL_RCC_OscConfig+0x32c>)
 8003284:	499f      	ldr	r1, [pc, #636]	; (8003504 <HAL_RCC_OscConfig+0x334>)
 8003286:	400a      	ands	r2, r1
 8003288:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d014      	beq.n	80032bc <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003292:	f7fe fdcf 	bl	8001e34 <HAL_GetTick>
 8003296:	0003      	movs	r3, r0
 8003298:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800329a:	e008      	b.n	80032ae <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800329c:	f7fe fdca 	bl	8001e34 <HAL_GetTick>
 80032a0:	0002      	movs	r2, r0
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	2b64      	cmp	r3, #100	; 0x64
 80032a8:	d901      	bls.n	80032ae <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e298      	b.n	80037e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032ae:	4b93      	ldr	r3, [pc, #588]	; (80034fc <HAL_RCC_OscConfig+0x32c>)
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	2380      	movs	r3, #128	; 0x80
 80032b4:	029b      	lsls	r3, r3, #10
 80032b6:	4013      	ands	r3, r2
 80032b8:	d0f0      	beq.n	800329c <HAL_RCC_OscConfig+0xcc>
 80032ba:	e015      	b.n	80032e8 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032bc:	f7fe fdba 	bl	8001e34 <HAL_GetTick>
 80032c0:	0003      	movs	r3, r0
 80032c2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80032c4:	e008      	b.n	80032d8 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032c6:	f7fe fdb5 	bl	8001e34 <HAL_GetTick>
 80032ca:	0002      	movs	r2, r0
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	1ad3      	subs	r3, r2, r3
 80032d0:	2b64      	cmp	r3, #100	; 0x64
 80032d2:	d901      	bls.n	80032d8 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80032d4:	2303      	movs	r3, #3
 80032d6:	e283      	b.n	80037e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80032d8:	4b88      	ldr	r3, [pc, #544]	; (80034fc <HAL_RCC_OscConfig+0x32c>)
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	2380      	movs	r3, #128	; 0x80
 80032de:	029b      	lsls	r3, r3, #10
 80032e0:	4013      	ands	r3, r2
 80032e2:	d1f0      	bne.n	80032c6 <HAL_RCC_OscConfig+0xf6>
 80032e4:	e000      	b.n	80032e8 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032e6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	2202      	movs	r2, #2
 80032ee:	4013      	ands	r3, r2
 80032f0:	d100      	bne.n	80032f4 <HAL_RCC_OscConfig+0x124>
 80032f2:	e099      	b.n	8003428 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032f4:	4b81      	ldr	r3, [pc, #516]	; (80034fc <HAL_RCC_OscConfig+0x32c>)
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	2238      	movs	r2, #56	; 0x38
 80032fa:	4013      	ands	r3, r2
 80032fc:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80032fe:	4b7f      	ldr	r3, [pc, #508]	; (80034fc <HAL_RCC_OscConfig+0x32c>)
 8003300:	68db      	ldr	r3, [r3, #12]
 8003302:	2203      	movs	r2, #3
 8003304:	4013      	ands	r3, r2
 8003306:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003308:	69bb      	ldr	r3, [r7, #24]
 800330a:	2b10      	cmp	r3, #16
 800330c:	d102      	bne.n	8003314 <HAL_RCC_OscConfig+0x144>
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	2b02      	cmp	r3, #2
 8003312:	d002      	beq.n	800331a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003314:	69bb      	ldr	r3, [r7, #24]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d135      	bne.n	8003386 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800331a:	4b78      	ldr	r3, [pc, #480]	; (80034fc <HAL_RCC_OscConfig+0x32c>)
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	2380      	movs	r3, #128	; 0x80
 8003320:	00db      	lsls	r3, r3, #3
 8003322:	4013      	ands	r3, r2
 8003324:	d005      	beq.n	8003332 <HAL_RCC_OscConfig+0x162>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d101      	bne.n	8003332 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e256      	b.n	80037e0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003332:	4b72      	ldr	r3, [pc, #456]	; (80034fc <HAL_RCC_OscConfig+0x32c>)
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	4a74      	ldr	r2, [pc, #464]	; (8003508 <HAL_RCC_OscConfig+0x338>)
 8003338:	4013      	ands	r3, r2
 800333a:	0019      	movs	r1, r3
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	695b      	ldr	r3, [r3, #20]
 8003340:	021a      	lsls	r2, r3, #8
 8003342:	4b6e      	ldr	r3, [pc, #440]	; (80034fc <HAL_RCC_OscConfig+0x32c>)
 8003344:	430a      	orrs	r2, r1
 8003346:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003348:	69bb      	ldr	r3, [r7, #24]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d112      	bne.n	8003374 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800334e:	4b6b      	ldr	r3, [pc, #428]	; (80034fc <HAL_RCC_OscConfig+0x32c>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a6e      	ldr	r2, [pc, #440]	; (800350c <HAL_RCC_OscConfig+0x33c>)
 8003354:	4013      	ands	r3, r2
 8003356:	0019      	movs	r1, r3
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	691a      	ldr	r2, [r3, #16]
 800335c:	4b67      	ldr	r3, [pc, #412]	; (80034fc <HAL_RCC_OscConfig+0x32c>)
 800335e:	430a      	orrs	r2, r1
 8003360:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003362:	4b66      	ldr	r3, [pc, #408]	; (80034fc <HAL_RCC_OscConfig+0x32c>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	0adb      	lsrs	r3, r3, #11
 8003368:	2207      	movs	r2, #7
 800336a:	4013      	ands	r3, r2
 800336c:	4a68      	ldr	r2, [pc, #416]	; (8003510 <HAL_RCC_OscConfig+0x340>)
 800336e:	40da      	lsrs	r2, r3
 8003370:	4b68      	ldr	r3, [pc, #416]	; (8003514 <HAL_RCC_OscConfig+0x344>)
 8003372:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003374:	4b68      	ldr	r3, [pc, #416]	; (8003518 <HAL_RCC_OscConfig+0x348>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	0018      	movs	r0, r3
 800337a:	f7fe fcff 	bl	8001d7c <HAL_InitTick>
 800337e:	1e03      	subs	r3, r0, #0
 8003380:	d051      	beq.n	8003426 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e22c      	b.n	80037e0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	68db      	ldr	r3, [r3, #12]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d030      	beq.n	80033f0 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800338e:	4b5b      	ldr	r3, [pc, #364]	; (80034fc <HAL_RCC_OscConfig+0x32c>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a5e      	ldr	r2, [pc, #376]	; (800350c <HAL_RCC_OscConfig+0x33c>)
 8003394:	4013      	ands	r3, r2
 8003396:	0019      	movs	r1, r3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	691a      	ldr	r2, [r3, #16]
 800339c:	4b57      	ldr	r3, [pc, #348]	; (80034fc <HAL_RCC_OscConfig+0x32c>)
 800339e:	430a      	orrs	r2, r1
 80033a0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80033a2:	4b56      	ldr	r3, [pc, #344]	; (80034fc <HAL_RCC_OscConfig+0x32c>)
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	4b55      	ldr	r3, [pc, #340]	; (80034fc <HAL_RCC_OscConfig+0x32c>)
 80033a8:	2180      	movs	r1, #128	; 0x80
 80033aa:	0049      	lsls	r1, r1, #1
 80033ac:	430a      	orrs	r2, r1
 80033ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033b0:	f7fe fd40 	bl	8001e34 <HAL_GetTick>
 80033b4:	0003      	movs	r3, r0
 80033b6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033b8:	e008      	b.n	80033cc <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033ba:	f7fe fd3b 	bl	8001e34 <HAL_GetTick>
 80033be:	0002      	movs	r2, r0
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	1ad3      	subs	r3, r2, r3
 80033c4:	2b02      	cmp	r3, #2
 80033c6:	d901      	bls.n	80033cc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80033c8:	2303      	movs	r3, #3
 80033ca:	e209      	b.n	80037e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033cc:	4b4b      	ldr	r3, [pc, #300]	; (80034fc <HAL_RCC_OscConfig+0x32c>)
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	2380      	movs	r3, #128	; 0x80
 80033d2:	00db      	lsls	r3, r3, #3
 80033d4:	4013      	ands	r3, r2
 80033d6:	d0f0      	beq.n	80033ba <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033d8:	4b48      	ldr	r3, [pc, #288]	; (80034fc <HAL_RCC_OscConfig+0x32c>)
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	4a4a      	ldr	r2, [pc, #296]	; (8003508 <HAL_RCC_OscConfig+0x338>)
 80033de:	4013      	ands	r3, r2
 80033e0:	0019      	movs	r1, r3
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	695b      	ldr	r3, [r3, #20]
 80033e6:	021a      	lsls	r2, r3, #8
 80033e8:	4b44      	ldr	r3, [pc, #272]	; (80034fc <HAL_RCC_OscConfig+0x32c>)
 80033ea:	430a      	orrs	r2, r1
 80033ec:	605a      	str	r2, [r3, #4]
 80033ee:	e01b      	b.n	8003428 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80033f0:	4b42      	ldr	r3, [pc, #264]	; (80034fc <HAL_RCC_OscConfig+0x32c>)
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	4b41      	ldr	r3, [pc, #260]	; (80034fc <HAL_RCC_OscConfig+0x32c>)
 80033f6:	4949      	ldr	r1, [pc, #292]	; (800351c <HAL_RCC_OscConfig+0x34c>)
 80033f8:	400a      	ands	r2, r1
 80033fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033fc:	f7fe fd1a 	bl	8001e34 <HAL_GetTick>
 8003400:	0003      	movs	r3, r0
 8003402:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003404:	e008      	b.n	8003418 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003406:	f7fe fd15 	bl	8001e34 <HAL_GetTick>
 800340a:	0002      	movs	r2, r0
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	1ad3      	subs	r3, r2, r3
 8003410:	2b02      	cmp	r3, #2
 8003412:	d901      	bls.n	8003418 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003414:	2303      	movs	r3, #3
 8003416:	e1e3      	b.n	80037e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003418:	4b38      	ldr	r3, [pc, #224]	; (80034fc <HAL_RCC_OscConfig+0x32c>)
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	2380      	movs	r3, #128	; 0x80
 800341e:	00db      	lsls	r3, r3, #3
 8003420:	4013      	ands	r3, r2
 8003422:	d1f0      	bne.n	8003406 <HAL_RCC_OscConfig+0x236>
 8003424:	e000      	b.n	8003428 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003426:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	2208      	movs	r2, #8
 800342e:	4013      	ands	r3, r2
 8003430:	d047      	beq.n	80034c2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003432:	4b32      	ldr	r3, [pc, #200]	; (80034fc <HAL_RCC_OscConfig+0x32c>)
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	2238      	movs	r2, #56	; 0x38
 8003438:	4013      	ands	r3, r2
 800343a:	2b18      	cmp	r3, #24
 800343c:	d10a      	bne.n	8003454 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800343e:	4b2f      	ldr	r3, [pc, #188]	; (80034fc <HAL_RCC_OscConfig+0x32c>)
 8003440:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003442:	2202      	movs	r2, #2
 8003444:	4013      	ands	r3, r2
 8003446:	d03c      	beq.n	80034c2 <HAL_RCC_OscConfig+0x2f2>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	699b      	ldr	r3, [r3, #24]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d138      	bne.n	80034c2 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e1c5      	b.n	80037e0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	699b      	ldr	r3, [r3, #24]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d019      	beq.n	8003490 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800345c:	4b27      	ldr	r3, [pc, #156]	; (80034fc <HAL_RCC_OscConfig+0x32c>)
 800345e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003460:	4b26      	ldr	r3, [pc, #152]	; (80034fc <HAL_RCC_OscConfig+0x32c>)
 8003462:	2101      	movs	r1, #1
 8003464:	430a      	orrs	r2, r1
 8003466:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003468:	f7fe fce4 	bl	8001e34 <HAL_GetTick>
 800346c:	0003      	movs	r3, r0
 800346e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003470:	e008      	b.n	8003484 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003472:	f7fe fcdf 	bl	8001e34 <HAL_GetTick>
 8003476:	0002      	movs	r2, r0
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	1ad3      	subs	r3, r2, r3
 800347c:	2b02      	cmp	r3, #2
 800347e:	d901      	bls.n	8003484 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8003480:	2303      	movs	r3, #3
 8003482:	e1ad      	b.n	80037e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003484:	4b1d      	ldr	r3, [pc, #116]	; (80034fc <HAL_RCC_OscConfig+0x32c>)
 8003486:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003488:	2202      	movs	r2, #2
 800348a:	4013      	ands	r3, r2
 800348c:	d0f1      	beq.n	8003472 <HAL_RCC_OscConfig+0x2a2>
 800348e:	e018      	b.n	80034c2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003490:	4b1a      	ldr	r3, [pc, #104]	; (80034fc <HAL_RCC_OscConfig+0x32c>)
 8003492:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003494:	4b19      	ldr	r3, [pc, #100]	; (80034fc <HAL_RCC_OscConfig+0x32c>)
 8003496:	2101      	movs	r1, #1
 8003498:	438a      	bics	r2, r1
 800349a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800349c:	f7fe fcca 	bl	8001e34 <HAL_GetTick>
 80034a0:	0003      	movs	r3, r0
 80034a2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80034a4:	e008      	b.n	80034b8 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034a6:	f7fe fcc5 	bl	8001e34 <HAL_GetTick>
 80034aa:	0002      	movs	r2, r0
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	1ad3      	subs	r3, r2, r3
 80034b0:	2b02      	cmp	r3, #2
 80034b2:	d901      	bls.n	80034b8 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80034b4:	2303      	movs	r3, #3
 80034b6:	e193      	b.n	80037e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80034b8:	4b10      	ldr	r3, [pc, #64]	; (80034fc <HAL_RCC_OscConfig+0x32c>)
 80034ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034bc:	2202      	movs	r2, #2
 80034be:	4013      	ands	r3, r2
 80034c0:	d1f1      	bne.n	80034a6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	2204      	movs	r2, #4
 80034c8:	4013      	ands	r3, r2
 80034ca:	d100      	bne.n	80034ce <HAL_RCC_OscConfig+0x2fe>
 80034cc:	e0c6      	b.n	800365c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034ce:	231f      	movs	r3, #31
 80034d0:	18fb      	adds	r3, r7, r3
 80034d2:	2200      	movs	r2, #0
 80034d4:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80034d6:	4b09      	ldr	r3, [pc, #36]	; (80034fc <HAL_RCC_OscConfig+0x32c>)
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	2238      	movs	r2, #56	; 0x38
 80034dc:	4013      	ands	r3, r2
 80034de:	2b20      	cmp	r3, #32
 80034e0:	d11e      	bne.n	8003520 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80034e2:	4b06      	ldr	r3, [pc, #24]	; (80034fc <HAL_RCC_OscConfig+0x32c>)
 80034e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034e6:	2202      	movs	r2, #2
 80034e8:	4013      	ands	r3, r2
 80034ea:	d100      	bne.n	80034ee <HAL_RCC_OscConfig+0x31e>
 80034ec:	e0b6      	b.n	800365c <HAL_RCC_OscConfig+0x48c>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d000      	beq.n	80034f8 <HAL_RCC_OscConfig+0x328>
 80034f6:	e0b1      	b.n	800365c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	e171      	b.n	80037e0 <HAL_RCC_OscConfig+0x610>
 80034fc:	40021000 	.word	0x40021000
 8003500:	fffeffff 	.word	0xfffeffff
 8003504:	fffbffff 	.word	0xfffbffff
 8003508:	ffff80ff 	.word	0xffff80ff
 800350c:	ffffc7ff 	.word	0xffffc7ff
 8003510:	00f42400 	.word	0x00f42400
 8003514:	20000004 	.word	0x20000004
 8003518:	20000008 	.word	0x20000008
 800351c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003520:	4bb1      	ldr	r3, [pc, #708]	; (80037e8 <HAL_RCC_OscConfig+0x618>)
 8003522:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003524:	2380      	movs	r3, #128	; 0x80
 8003526:	055b      	lsls	r3, r3, #21
 8003528:	4013      	ands	r3, r2
 800352a:	d101      	bne.n	8003530 <HAL_RCC_OscConfig+0x360>
 800352c:	2301      	movs	r3, #1
 800352e:	e000      	b.n	8003532 <HAL_RCC_OscConfig+0x362>
 8003530:	2300      	movs	r3, #0
 8003532:	2b00      	cmp	r3, #0
 8003534:	d011      	beq.n	800355a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003536:	4bac      	ldr	r3, [pc, #688]	; (80037e8 <HAL_RCC_OscConfig+0x618>)
 8003538:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800353a:	4bab      	ldr	r3, [pc, #684]	; (80037e8 <HAL_RCC_OscConfig+0x618>)
 800353c:	2180      	movs	r1, #128	; 0x80
 800353e:	0549      	lsls	r1, r1, #21
 8003540:	430a      	orrs	r2, r1
 8003542:	63da      	str	r2, [r3, #60]	; 0x3c
 8003544:	4ba8      	ldr	r3, [pc, #672]	; (80037e8 <HAL_RCC_OscConfig+0x618>)
 8003546:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003548:	2380      	movs	r3, #128	; 0x80
 800354a:	055b      	lsls	r3, r3, #21
 800354c:	4013      	ands	r3, r2
 800354e:	60fb      	str	r3, [r7, #12]
 8003550:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8003552:	231f      	movs	r3, #31
 8003554:	18fb      	adds	r3, r7, r3
 8003556:	2201      	movs	r2, #1
 8003558:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800355a:	4ba4      	ldr	r3, [pc, #656]	; (80037ec <HAL_RCC_OscConfig+0x61c>)
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	2380      	movs	r3, #128	; 0x80
 8003560:	005b      	lsls	r3, r3, #1
 8003562:	4013      	ands	r3, r2
 8003564:	d11a      	bne.n	800359c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003566:	4ba1      	ldr	r3, [pc, #644]	; (80037ec <HAL_RCC_OscConfig+0x61c>)
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	4ba0      	ldr	r3, [pc, #640]	; (80037ec <HAL_RCC_OscConfig+0x61c>)
 800356c:	2180      	movs	r1, #128	; 0x80
 800356e:	0049      	lsls	r1, r1, #1
 8003570:	430a      	orrs	r2, r1
 8003572:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003574:	f7fe fc5e 	bl	8001e34 <HAL_GetTick>
 8003578:	0003      	movs	r3, r0
 800357a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800357c:	e008      	b.n	8003590 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800357e:	f7fe fc59 	bl	8001e34 <HAL_GetTick>
 8003582:	0002      	movs	r2, r0
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	1ad3      	subs	r3, r2, r3
 8003588:	2b02      	cmp	r3, #2
 800358a:	d901      	bls.n	8003590 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 800358c:	2303      	movs	r3, #3
 800358e:	e127      	b.n	80037e0 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003590:	4b96      	ldr	r3, [pc, #600]	; (80037ec <HAL_RCC_OscConfig+0x61c>)
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	2380      	movs	r3, #128	; 0x80
 8003596:	005b      	lsls	r3, r3, #1
 8003598:	4013      	ands	r3, r2
 800359a:	d0f0      	beq.n	800357e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d106      	bne.n	80035b2 <HAL_RCC_OscConfig+0x3e2>
 80035a4:	4b90      	ldr	r3, [pc, #576]	; (80037e8 <HAL_RCC_OscConfig+0x618>)
 80035a6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80035a8:	4b8f      	ldr	r3, [pc, #572]	; (80037e8 <HAL_RCC_OscConfig+0x618>)
 80035aa:	2101      	movs	r1, #1
 80035ac:	430a      	orrs	r2, r1
 80035ae:	65da      	str	r2, [r3, #92]	; 0x5c
 80035b0:	e01c      	b.n	80035ec <HAL_RCC_OscConfig+0x41c>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	2b05      	cmp	r3, #5
 80035b8:	d10c      	bne.n	80035d4 <HAL_RCC_OscConfig+0x404>
 80035ba:	4b8b      	ldr	r3, [pc, #556]	; (80037e8 <HAL_RCC_OscConfig+0x618>)
 80035bc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80035be:	4b8a      	ldr	r3, [pc, #552]	; (80037e8 <HAL_RCC_OscConfig+0x618>)
 80035c0:	2104      	movs	r1, #4
 80035c2:	430a      	orrs	r2, r1
 80035c4:	65da      	str	r2, [r3, #92]	; 0x5c
 80035c6:	4b88      	ldr	r3, [pc, #544]	; (80037e8 <HAL_RCC_OscConfig+0x618>)
 80035c8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80035ca:	4b87      	ldr	r3, [pc, #540]	; (80037e8 <HAL_RCC_OscConfig+0x618>)
 80035cc:	2101      	movs	r1, #1
 80035ce:	430a      	orrs	r2, r1
 80035d0:	65da      	str	r2, [r3, #92]	; 0x5c
 80035d2:	e00b      	b.n	80035ec <HAL_RCC_OscConfig+0x41c>
 80035d4:	4b84      	ldr	r3, [pc, #528]	; (80037e8 <HAL_RCC_OscConfig+0x618>)
 80035d6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80035d8:	4b83      	ldr	r3, [pc, #524]	; (80037e8 <HAL_RCC_OscConfig+0x618>)
 80035da:	2101      	movs	r1, #1
 80035dc:	438a      	bics	r2, r1
 80035de:	65da      	str	r2, [r3, #92]	; 0x5c
 80035e0:	4b81      	ldr	r3, [pc, #516]	; (80037e8 <HAL_RCC_OscConfig+0x618>)
 80035e2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80035e4:	4b80      	ldr	r3, [pc, #512]	; (80037e8 <HAL_RCC_OscConfig+0x618>)
 80035e6:	2104      	movs	r1, #4
 80035e8:	438a      	bics	r2, r1
 80035ea:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d014      	beq.n	800361e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035f4:	f7fe fc1e 	bl	8001e34 <HAL_GetTick>
 80035f8:	0003      	movs	r3, r0
 80035fa:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035fc:	e009      	b.n	8003612 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035fe:	f7fe fc19 	bl	8001e34 <HAL_GetTick>
 8003602:	0002      	movs	r2, r0
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	1ad3      	subs	r3, r2, r3
 8003608:	4a79      	ldr	r2, [pc, #484]	; (80037f0 <HAL_RCC_OscConfig+0x620>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d901      	bls.n	8003612 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800360e:	2303      	movs	r3, #3
 8003610:	e0e6      	b.n	80037e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003612:	4b75      	ldr	r3, [pc, #468]	; (80037e8 <HAL_RCC_OscConfig+0x618>)
 8003614:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003616:	2202      	movs	r2, #2
 8003618:	4013      	ands	r3, r2
 800361a:	d0f0      	beq.n	80035fe <HAL_RCC_OscConfig+0x42e>
 800361c:	e013      	b.n	8003646 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800361e:	f7fe fc09 	bl	8001e34 <HAL_GetTick>
 8003622:	0003      	movs	r3, r0
 8003624:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003626:	e009      	b.n	800363c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003628:	f7fe fc04 	bl	8001e34 <HAL_GetTick>
 800362c:	0002      	movs	r2, r0
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	4a6f      	ldr	r2, [pc, #444]	; (80037f0 <HAL_RCC_OscConfig+0x620>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d901      	bls.n	800363c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8003638:	2303      	movs	r3, #3
 800363a:	e0d1      	b.n	80037e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800363c:	4b6a      	ldr	r3, [pc, #424]	; (80037e8 <HAL_RCC_OscConfig+0x618>)
 800363e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003640:	2202      	movs	r2, #2
 8003642:	4013      	ands	r3, r2
 8003644:	d1f0      	bne.n	8003628 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003646:	231f      	movs	r3, #31
 8003648:	18fb      	adds	r3, r7, r3
 800364a:	781b      	ldrb	r3, [r3, #0]
 800364c:	2b01      	cmp	r3, #1
 800364e:	d105      	bne.n	800365c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003650:	4b65      	ldr	r3, [pc, #404]	; (80037e8 <HAL_RCC_OscConfig+0x618>)
 8003652:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003654:	4b64      	ldr	r3, [pc, #400]	; (80037e8 <HAL_RCC_OscConfig+0x618>)
 8003656:	4967      	ldr	r1, [pc, #412]	; (80037f4 <HAL_RCC_OscConfig+0x624>)
 8003658:	400a      	ands	r2, r1
 800365a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	69db      	ldr	r3, [r3, #28]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d100      	bne.n	8003666 <HAL_RCC_OscConfig+0x496>
 8003664:	e0bb      	b.n	80037de <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003666:	4b60      	ldr	r3, [pc, #384]	; (80037e8 <HAL_RCC_OscConfig+0x618>)
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	2238      	movs	r2, #56	; 0x38
 800366c:	4013      	ands	r3, r2
 800366e:	2b10      	cmp	r3, #16
 8003670:	d100      	bne.n	8003674 <HAL_RCC_OscConfig+0x4a4>
 8003672:	e07b      	b.n	800376c <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	69db      	ldr	r3, [r3, #28]
 8003678:	2b02      	cmp	r3, #2
 800367a:	d156      	bne.n	800372a <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800367c:	4b5a      	ldr	r3, [pc, #360]	; (80037e8 <HAL_RCC_OscConfig+0x618>)
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	4b59      	ldr	r3, [pc, #356]	; (80037e8 <HAL_RCC_OscConfig+0x618>)
 8003682:	495d      	ldr	r1, [pc, #372]	; (80037f8 <HAL_RCC_OscConfig+0x628>)
 8003684:	400a      	ands	r2, r1
 8003686:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003688:	f7fe fbd4 	bl	8001e34 <HAL_GetTick>
 800368c:	0003      	movs	r3, r0
 800368e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003690:	e008      	b.n	80036a4 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003692:	f7fe fbcf 	bl	8001e34 <HAL_GetTick>
 8003696:	0002      	movs	r2, r0
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	1ad3      	subs	r3, r2, r3
 800369c:	2b02      	cmp	r3, #2
 800369e:	d901      	bls.n	80036a4 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80036a0:	2303      	movs	r3, #3
 80036a2:	e09d      	b.n	80037e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036a4:	4b50      	ldr	r3, [pc, #320]	; (80037e8 <HAL_RCC_OscConfig+0x618>)
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	2380      	movs	r3, #128	; 0x80
 80036aa:	049b      	lsls	r3, r3, #18
 80036ac:	4013      	ands	r3, r2
 80036ae:	d1f0      	bne.n	8003692 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036b0:	4b4d      	ldr	r3, [pc, #308]	; (80037e8 <HAL_RCC_OscConfig+0x618>)
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	4a51      	ldr	r2, [pc, #324]	; (80037fc <HAL_RCC_OscConfig+0x62c>)
 80036b6:	4013      	ands	r3, r2
 80036b8:	0019      	movs	r1, r3
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6a1a      	ldr	r2, [r3, #32]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c2:	431a      	orrs	r2, r3
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036c8:	021b      	lsls	r3, r3, #8
 80036ca:	431a      	orrs	r2, r3
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d0:	431a      	orrs	r2, r3
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d6:	431a      	orrs	r2, r3
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036dc:	431a      	orrs	r2, r3
 80036de:	4b42      	ldr	r3, [pc, #264]	; (80037e8 <HAL_RCC_OscConfig+0x618>)
 80036e0:	430a      	orrs	r2, r1
 80036e2:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036e4:	4b40      	ldr	r3, [pc, #256]	; (80037e8 <HAL_RCC_OscConfig+0x618>)
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	4b3f      	ldr	r3, [pc, #252]	; (80037e8 <HAL_RCC_OscConfig+0x618>)
 80036ea:	2180      	movs	r1, #128	; 0x80
 80036ec:	0449      	lsls	r1, r1, #17
 80036ee:	430a      	orrs	r2, r1
 80036f0:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80036f2:	4b3d      	ldr	r3, [pc, #244]	; (80037e8 <HAL_RCC_OscConfig+0x618>)
 80036f4:	68da      	ldr	r2, [r3, #12]
 80036f6:	4b3c      	ldr	r3, [pc, #240]	; (80037e8 <HAL_RCC_OscConfig+0x618>)
 80036f8:	2180      	movs	r1, #128	; 0x80
 80036fa:	0549      	lsls	r1, r1, #21
 80036fc:	430a      	orrs	r2, r1
 80036fe:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003700:	f7fe fb98 	bl	8001e34 <HAL_GetTick>
 8003704:	0003      	movs	r3, r0
 8003706:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003708:	e008      	b.n	800371c <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800370a:	f7fe fb93 	bl	8001e34 <HAL_GetTick>
 800370e:	0002      	movs	r2, r0
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	1ad3      	subs	r3, r2, r3
 8003714:	2b02      	cmp	r3, #2
 8003716:	d901      	bls.n	800371c <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8003718:	2303      	movs	r3, #3
 800371a:	e061      	b.n	80037e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800371c:	4b32      	ldr	r3, [pc, #200]	; (80037e8 <HAL_RCC_OscConfig+0x618>)
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	2380      	movs	r3, #128	; 0x80
 8003722:	049b      	lsls	r3, r3, #18
 8003724:	4013      	ands	r3, r2
 8003726:	d0f0      	beq.n	800370a <HAL_RCC_OscConfig+0x53a>
 8003728:	e059      	b.n	80037de <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800372a:	4b2f      	ldr	r3, [pc, #188]	; (80037e8 <HAL_RCC_OscConfig+0x618>)
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	4b2e      	ldr	r3, [pc, #184]	; (80037e8 <HAL_RCC_OscConfig+0x618>)
 8003730:	4931      	ldr	r1, [pc, #196]	; (80037f8 <HAL_RCC_OscConfig+0x628>)
 8003732:	400a      	ands	r2, r1
 8003734:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003736:	f7fe fb7d 	bl	8001e34 <HAL_GetTick>
 800373a:	0003      	movs	r3, r0
 800373c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800373e:	e008      	b.n	8003752 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003740:	f7fe fb78 	bl	8001e34 <HAL_GetTick>
 8003744:	0002      	movs	r2, r0
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	1ad3      	subs	r3, r2, r3
 800374a:	2b02      	cmp	r3, #2
 800374c:	d901      	bls.n	8003752 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 800374e:	2303      	movs	r3, #3
 8003750:	e046      	b.n	80037e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003752:	4b25      	ldr	r3, [pc, #148]	; (80037e8 <HAL_RCC_OscConfig+0x618>)
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	2380      	movs	r3, #128	; 0x80
 8003758:	049b      	lsls	r3, r3, #18
 800375a:	4013      	ands	r3, r2
 800375c:	d1f0      	bne.n	8003740 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800375e:	4b22      	ldr	r3, [pc, #136]	; (80037e8 <HAL_RCC_OscConfig+0x618>)
 8003760:	68da      	ldr	r2, [r3, #12]
 8003762:	4b21      	ldr	r3, [pc, #132]	; (80037e8 <HAL_RCC_OscConfig+0x618>)
 8003764:	4926      	ldr	r1, [pc, #152]	; (8003800 <HAL_RCC_OscConfig+0x630>)
 8003766:	400a      	ands	r2, r1
 8003768:	60da      	str	r2, [r3, #12]
 800376a:	e038      	b.n	80037de <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	69db      	ldr	r3, [r3, #28]
 8003770:	2b01      	cmp	r3, #1
 8003772:	d101      	bne.n	8003778 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e033      	b.n	80037e0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8003778:	4b1b      	ldr	r3, [pc, #108]	; (80037e8 <HAL_RCC_OscConfig+0x618>)
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	2203      	movs	r2, #3
 8003782:	401a      	ands	r2, r3
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6a1b      	ldr	r3, [r3, #32]
 8003788:	429a      	cmp	r2, r3
 800378a:	d126      	bne.n	80037da <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	2270      	movs	r2, #112	; 0x70
 8003790:	401a      	ands	r2, r3
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003796:	429a      	cmp	r2, r3
 8003798:	d11f      	bne.n	80037da <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800379a:	697a      	ldr	r2, [r7, #20]
 800379c:	23fe      	movs	r3, #254	; 0xfe
 800379e:	01db      	lsls	r3, r3, #7
 80037a0:	401a      	ands	r2, r3
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037a6:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d116      	bne.n	80037da <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80037ac:	697a      	ldr	r2, [r7, #20]
 80037ae:	23f8      	movs	r3, #248	; 0xf8
 80037b0:	039b      	lsls	r3, r3, #14
 80037b2:	401a      	ands	r2, r3
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d10e      	bne.n	80037da <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80037bc:	697a      	ldr	r2, [r7, #20]
 80037be:	23e0      	movs	r3, #224	; 0xe0
 80037c0:	051b      	lsls	r3, r3, #20
 80037c2:	401a      	ands	r2, r3
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d106      	bne.n	80037da <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	0f5b      	lsrs	r3, r3, #29
 80037d0:	075a      	lsls	r2, r3, #29
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d001      	beq.n	80037de <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e000      	b.n	80037e0 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 80037de:	2300      	movs	r3, #0
}
 80037e0:	0018      	movs	r0, r3
 80037e2:	46bd      	mov	sp, r7
 80037e4:	b008      	add	sp, #32
 80037e6:	bd80      	pop	{r7, pc}
 80037e8:	40021000 	.word	0x40021000
 80037ec:	40007000 	.word	0x40007000
 80037f0:	00001388 	.word	0x00001388
 80037f4:	efffffff 	.word	0xefffffff
 80037f8:	feffffff 	.word	0xfeffffff
 80037fc:	11c1808c 	.word	0x11c1808c
 8003800:	eefefffc 	.word	0xeefefffc

08003804 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b084      	sub	sp, #16
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
 800380c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d101      	bne.n	8003818 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	e0e9      	b.n	80039ec <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003818:	4b76      	ldr	r3, [pc, #472]	; (80039f4 <HAL_RCC_ClockConfig+0x1f0>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	2207      	movs	r2, #7
 800381e:	4013      	ands	r3, r2
 8003820:	683a      	ldr	r2, [r7, #0]
 8003822:	429a      	cmp	r2, r3
 8003824:	d91e      	bls.n	8003864 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003826:	4b73      	ldr	r3, [pc, #460]	; (80039f4 <HAL_RCC_ClockConfig+0x1f0>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	2207      	movs	r2, #7
 800382c:	4393      	bics	r3, r2
 800382e:	0019      	movs	r1, r3
 8003830:	4b70      	ldr	r3, [pc, #448]	; (80039f4 <HAL_RCC_ClockConfig+0x1f0>)
 8003832:	683a      	ldr	r2, [r7, #0]
 8003834:	430a      	orrs	r2, r1
 8003836:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003838:	f7fe fafc 	bl	8001e34 <HAL_GetTick>
 800383c:	0003      	movs	r3, r0
 800383e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003840:	e009      	b.n	8003856 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003842:	f7fe faf7 	bl	8001e34 <HAL_GetTick>
 8003846:	0002      	movs	r2, r0
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	1ad3      	subs	r3, r2, r3
 800384c:	4a6a      	ldr	r2, [pc, #424]	; (80039f8 <HAL_RCC_ClockConfig+0x1f4>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d901      	bls.n	8003856 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003852:	2303      	movs	r3, #3
 8003854:	e0ca      	b.n	80039ec <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003856:	4b67      	ldr	r3, [pc, #412]	; (80039f4 <HAL_RCC_ClockConfig+0x1f0>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	2207      	movs	r2, #7
 800385c:	4013      	ands	r3, r2
 800385e:	683a      	ldr	r2, [r7, #0]
 8003860:	429a      	cmp	r2, r3
 8003862:	d1ee      	bne.n	8003842 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	2202      	movs	r2, #2
 800386a:	4013      	ands	r3, r2
 800386c:	d015      	beq.n	800389a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	2204      	movs	r2, #4
 8003874:	4013      	ands	r3, r2
 8003876:	d006      	beq.n	8003886 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003878:	4b60      	ldr	r3, [pc, #384]	; (80039fc <HAL_RCC_ClockConfig+0x1f8>)
 800387a:	689a      	ldr	r2, [r3, #8]
 800387c:	4b5f      	ldr	r3, [pc, #380]	; (80039fc <HAL_RCC_ClockConfig+0x1f8>)
 800387e:	21e0      	movs	r1, #224	; 0xe0
 8003880:	01c9      	lsls	r1, r1, #7
 8003882:	430a      	orrs	r2, r1
 8003884:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003886:	4b5d      	ldr	r3, [pc, #372]	; (80039fc <HAL_RCC_ClockConfig+0x1f8>)
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	4a5d      	ldr	r2, [pc, #372]	; (8003a00 <HAL_RCC_ClockConfig+0x1fc>)
 800388c:	4013      	ands	r3, r2
 800388e:	0019      	movs	r1, r3
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	689a      	ldr	r2, [r3, #8]
 8003894:	4b59      	ldr	r3, [pc, #356]	; (80039fc <HAL_RCC_ClockConfig+0x1f8>)
 8003896:	430a      	orrs	r2, r1
 8003898:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	2201      	movs	r2, #1
 80038a0:	4013      	ands	r3, r2
 80038a2:	d057      	beq.n	8003954 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d107      	bne.n	80038bc <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80038ac:	4b53      	ldr	r3, [pc, #332]	; (80039fc <HAL_RCC_ClockConfig+0x1f8>)
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	2380      	movs	r3, #128	; 0x80
 80038b2:	029b      	lsls	r3, r3, #10
 80038b4:	4013      	ands	r3, r2
 80038b6:	d12b      	bne.n	8003910 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	e097      	b.n	80039ec <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	2b02      	cmp	r3, #2
 80038c2:	d107      	bne.n	80038d4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038c4:	4b4d      	ldr	r3, [pc, #308]	; (80039fc <HAL_RCC_ClockConfig+0x1f8>)
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	2380      	movs	r3, #128	; 0x80
 80038ca:	049b      	lsls	r3, r3, #18
 80038cc:	4013      	ands	r3, r2
 80038ce:	d11f      	bne.n	8003910 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	e08b      	b.n	80039ec <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d107      	bne.n	80038ec <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038dc:	4b47      	ldr	r3, [pc, #284]	; (80039fc <HAL_RCC_ClockConfig+0x1f8>)
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	2380      	movs	r3, #128	; 0x80
 80038e2:	00db      	lsls	r3, r3, #3
 80038e4:	4013      	ands	r3, r2
 80038e6:	d113      	bne.n	8003910 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	e07f      	b.n	80039ec <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	2b03      	cmp	r3, #3
 80038f2:	d106      	bne.n	8003902 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80038f4:	4b41      	ldr	r3, [pc, #260]	; (80039fc <HAL_RCC_ClockConfig+0x1f8>)
 80038f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038f8:	2202      	movs	r2, #2
 80038fa:	4013      	ands	r3, r2
 80038fc:	d108      	bne.n	8003910 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e074      	b.n	80039ec <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003902:	4b3e      	ldr	r3, [pc, #248]	; (80039fc <HAL_RCC_ClockConfig+0x1f8>)
 8003904:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003906:	2202      	movs	r2, #2
 8003908:	4013      	ands	r3, r2
 800390a:	d101      	bne.n	8003910 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	e06d      	b.n	80039ec <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003910:	4b3a      	ldr	r3, [pc, #232]	; (80039fc <HAL_RCC_ClockConfig+0x1f8>)
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	2207      	movs	r2, #7
 8003916:	4393      	bics	r3, r2
 8003918:	0019      	movs	r1, r3
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	685a      	ldr	r2, [r3, #4]
 800391e:	4b37      	ldr	r3, [pc, #220]	; (80039fc <HAL_RCC_ClockConfig+0x1f8>)
 8003920:	430a      	orrs	r2, r1
 8003922:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003924:	f7fe fa86 	bl	8001e34 <HAL_GetTick>
 8003928:	0003      	movs	r3, r0
 800392a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800392c:	e009      	b.n	8003942 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800392e:	f7fe fa81 	bl	8001e34 <HAL_GetTick>
 8003932:	0002      	movs	r2, r0
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	1ad3      	subs	r3, r2, r3
 8003938:	4a2f      	ldr	r2, [pc, #188]	; (80039f8 <HAL_RCC_ClockConfig+0x1f4>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d901      	bls.n	8003942 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800393e:	2303      	movs	r3, #3
 8003940:	e054      	b.n	80039ec <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003942:	4b2e      	ldr	r3, [pc, #184]	; (80039fc <HAL_RCC_ClockConfig+0x1f8>)
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	2238      	movs	r2, #56	; 0x38
 8003948:	401a      	ands	r2, r3
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	00db      	lsls	r3, r3, #3
 8003950:	429a      	cmp	r2, r3
 8003952:	d1ec      	bne.n	800392e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003954:	4b27      	ldr	r3, [pc, #156]	; (80039f4 <HAL_RCC_ClockConfig+0x1f0>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	2207      	movs	r2, #7
 800395a:	4013      	ands	r3, r2
 800395c:	683a      	ldr	r2, [r7, #0]
 800395e:	429a      	cmp	r2, r3
 8003960:	d21e      	bcs.n	80039a0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003962:	4b24      	ldr	r3, [pc, #144]	; (80039f4 <HAL_RCC_ClockConfig+0x1f0>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	2207      	movs	r2, #7
 8003968:	4393      	bics	r3, r2
 800396a:	0019      	movs	r1, r3
 800396c:	4b21      	ldr	r3, [pc, #132]	; (80039f4 <HAL_RCC_ClockConfig+0x1f0>)
 800396e:	683a      	ldr	r2, [r7, #0]
 8003970:	430a      	orrs	r2, r1
 8003972:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003974:	f7fe fa5e 	bl	8001e34 <HAL_GetTick>
 8003978:	0003      	movs	r3, r0
 800397a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800397c:	e009      	b.n	8003992 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800397e:	f7fe fa59 	bl	8001e34 <HAL_GetTick>
 8003982:	0002      	movs	r2, r0
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	1ad3      	subs	r3, r2, r3
 8003988:	4a1b      	ldr	r2, [pc, #108]	; (80039f8 <HAL_RCC_ClockConfig+0x1f4>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d901      	bls.n	8003992 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800398e:	2303      	movs	r3, #3
 8003990:	e02c      	b.n	80039ec <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003992:	4b18      	ldr	r3, [pc, #96]	; (80039f4 <HAL_RCC_ClockConfig+0x1f0>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	2207      	movs	r2, #7
 8003998:	4013      	ands	r3, r2
 800399a:	683a      	ldr	r2, [r7, #0]
 800399c:	429a      	cmp	r2, r3
 800399e:	d1ee      	bne.n	800397e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	2204      	movs	r2, #4
 80039a6:	4013      	ands	r3, r2
 80039a8:	d009      	beq.n	80039be <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80039aa:	4b14      	ldr	r3, [pc, #80]	; (80039fc <HAL_RCC_ClockConfig+0x1f8>)
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	4a15      	ldr	r2, [pc, #84]	; (8003a04 <HAL_RCC_ClockConfig+0x200>)
 80039b0:	4013      	ands	r3, r2
 80039b2:	0019      	movs	r1, r3
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	68da      	ldr	r2, [r3, #12]
 80039b8:	4b10      	ldr	r3, [pc, #64]	; (80039fc <HAL_RCC_ClockConfig+0x1f8>)
 80039ba:	430a      	orrs	r2, r1
 80039bc:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80039be:	f000 f829 	bl	8003a14 <HAL_RCC_GetSysClockFreq>
 80039c2:	0001      	movs	r1, r0
 80039c4:	4b0d      	ldr	r3, [pc, #52]	; (80039fc <HAL_RCC_ClockConfig+0x1f8>)
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	0a1b      	lsrs	r3, r3, #8
 80039ca:	220f      	movs	r2, #15
 80039cc:	401a      	ands	r2, r3
 80039ce:	4b0e      	ldr	r3, [pc, #56]	; (8003a08 <HAL_RCC_ClockConfig+0x204>)
 80039d0:	0092      	lsls	r2, r2, #2
 80039d2:	58d3      	ldr	r3, [r2, r3]
 80039d4:	221f      	movs	r2, #31
 80039d6:	4013      	ands	r3, r2
 80039d8:	000a      	movs	r2, r1
 80039da:	40da      	lsrs	r2, r3
 80039dc:	4b0b      	ldr	r3, [pc, #44]	; (8003a0c <HAL_RCC_ClockConfig+0x208>)
 80039de:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80039e0:	4b0b      	ldr	r3, [pc, #44]	; (8003a10 <HAL_RCC_ClockConfig+0x20c>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	0018      	movs	r0, r3
 80039e6:	f7fe f9c9 	bl	8001d7c <HAL_InitTick>
 80039ea:	0003      	movs	r3, r0
}
 80039ec:	0018      	movs	r0, r3
 80039ee:	46bd      	mov	sp, r7
 80039f0:	b004      	add	sp, #16
 80039f2:	bd80      	pop	{r7, pc}
 80039f4:	40022000 	.word	0x40022000
 80039f8:	00001388 	.word	0x00001388
 80039fc:	40021000 	.word	0x40021000
 8003a00:	fffff0ff 	.word	0xfffff0ff
 8003a04:	ffff8fff 	.word	0xffff8fff
 8003a08:	080071c0 	.word	0x080071c0
 8003a0c:	20000004 	.word	0x20000004
 8003a10:	20000008 	.word	0x20000008

08003a14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b086      	sub	sp, #24
 8003a18:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a1a:	4b3c      	ldr	r3, [pc, #240]	; (8003b0c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	2238      	movs	r2, #56	; 0x38
 8003a20:	4013      	ands	r3, r2
 8003a22:	d10f      	bne.n	8003a44 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003a24:	4b39      	ldr	r3, [pc, #228]	; (8003b0c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	0adb      	lsrs	r3, r3, #11
 8003a2a:	2207      	movs	r2, #7
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	2201      	movs	r2, #1
 8003a30:	409a      	lsls	r2, r3
 8003a32:	0013      	movs	r3, r2
 8003a34:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003a36:	6839      	ldr	r1, [r7, #0]
 8003a38:	4835      	ldr	r0, [pc, #212]	; (8003b10 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003a3a:	f7fc fb77 	bl	800012c <__udivsi3>
 8003a3e:	0003      	movs	r3, r0
 8003a40:	613b      	str	r3, [r7, #16]
 8003a42:	e05d      	b.n	8003b00 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a44:	4b31      	ldr	r3, [pc, #196]	; (8003b0c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	2238      	movs	r2, #56	; 0x38
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	2b08      	cmp	r3, #8
 8003a4e:	d102      	bne.n	8003a56 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003a50:	4b30      	ldr	r3, [pc, #192]	; (8003b14 <HAL_RCC_GetSysClockFreq+0x100>)
 8003a52:	613b      	str	r3, [r7, #16]
 8003a54:	e054      	b.n	8003b00 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a56:	4b2d      	ldr	r3, [pc, #180]	; (8003b0c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	2238      	movs	r2, #56	; 0x38
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	2b10      	cmp	r3, #16
 8003a60:	d138      	bne.n	8003ad4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003a62:	4b2a      	ldr	r3, [pc, #168]	; (8003b0c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003a64:	68db      	ldr	r3, [r3, #12]
 8003a66:	2203      	movs	r2, #3
 8003a68:	4013      	ands	r3, r2
 8003a6a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003a6c:	4b27      	ldr	r3, [pc, #156]	; (8003b0c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	091b      	lsrs	r3, r3, #4
 8003a72:	2207      	movs	r2, #7
 8003a74:	4013      	ands	r3, r2
 8003a76:	3301      	adds	r3, #1
 8003a78:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2b03      	cmp	r3, #3
 8003a7e:	d10d      	bne.n	8003a9c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003a80:	68b9      	ldr	r1, [r7, #8]
 8003a82:	4824      	ldr	r0, [pc, #144]	; (8003b14 <HAL_RCC_GetSysClockFreq+0x100>)
 8003a84:	f7fc fb52 	bl	800012c <__udivsi3>
 8003a88:	0003      	movs	r3, r0
 8003a8a:	0019      	movs	r1, r3
 8003a8c:	4b1f      	ldr	r3, [pc, #124]	; (8003b0c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	0a1b      	lsrs	r3, r3, #8
 8003a92:	227f      	movs	r2, #127	; 0x7f
 8003a94:	4013      	ands	r3, r2
 8003a96:	434b      	muls	r3, r1
 8003a98:	617b      	str	r3, [r7, #20]
        break;
 8003a9a:	e00d      	b.n	8003ab8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003a9c:	68b9      	ldr	r1, [r7, #8]
 8003a9e:	481c      	ldr	r0, [pc, #112]	; (8003b10 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003aa0:	f7fc fb44 	bl	800012c <__udivsi3>
 8003aa4:	0003      	movs	r3, r0
 8003aa6:	0019      	movs	r1, r3
 8003aa8:	4b18      	ldr	r3, [pc, #96]	; (8003b0c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	0a1b      	lsrs	r3, r3, #8
 8003aae:	227f      	movs	r2, #127	; 0x7f
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	434b      	muls	r3, r1
 8003ab4:	617b      	str	r3, [r7, #20]
        break;
 8003ab6:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003ab8:	4b14      	ldr	r3, [pc, #80]	; (8003b0c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003aba:	68db      	ldr	r3, [r3, #12]
 8003abc:	0f5b      	lsrs	r3, r3, #29
 8003abe:	2207      	movs	r2, #7
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	3301      	adds	r3, #1
 8003ac4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8003ac6:	6879      	ldr	r1, [r7, #4]
 8003ac8:	6978      	ldr	r0, [r7, #20]
 8003aca:	f7fc fb2f 	bl	800012c <__udivsi3>
 8003ace:	0003      	movs	r3, r0
 8003ad0:	613b      	str	r3, [r7, #16]
 8003ad2:	e015      	b.n	8003b00 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003ad4:	4b0d      	ldr	r3, [pc, #52]	; (8003b0c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	2238      	movs	r2, #56	; 0x38
 8003ada:	4013      	ands	r3, r2
 8003adc:	2b20      	cmp	r3, #32
 8003ade:	d103      	bne.n	8003ae8 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003ae0:	2380      	movs	r3, #128	; 0x80
 8003ae2:	021b      	lsls	r3, r3, #8
 8003ae4:	613b      	str	r3, [r7, #16]
 8003ae6:	e00b      	b.n	8003b00 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003ae8:	4b08      	ldr	r3, [pc, #32]	; (8003b0c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	2238      	movs	r2, #56	; 0x38
 8003aee:	4013      	ands	r3, r2
 8003af0:	2b18      	cmp	r3, #24
 8003af2:	d103      	bne.n	8003afc <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003af4:	23fa      	movs	r3, #250	; 0xfa
 8003af6:	01db      	lsls	r3, r3, #7
 8003af8:	613b      	str	r3, [r7, #16]
 8003afa:	e001      	b.n	8003b00 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003afc:	2300      	movs	r3, #0
 8003afe:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003b00:	693b      	ldr	r3, [r7, #16]
}
 8003b02:	0018      	movs	r0, r3
 8003b04:	46bd      	mov	sp, r7
 8003b06:	b006      	add	sp, #24
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	46c0      	nop			; (mov r8, r8)
 8003b0c:	40021000 	.word	0x40021000
 8003b10:	00f42400 	.word	0x00f42400
 8003b14:	007a1200 	.word	0x007a1200

08003b18 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b1c:	4b02      	ldr	r3, [pc, #8]	; (8003b28 <HAL_RCC_GetHCLKFreq+0x10>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
}
 8003b20:	0018      	movs	r0, r3
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}
 8003b26:	46c0      	nop			; (mov r8, r8)
 8003b28:	20000004 	.word	0x20000004

08003b2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b2c:	b5b0      	push	{r4, r5, r7, lr}
 8003b2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003b30:	f7ff fff2 	bl	8003b18 <HAL_RCC_GetHCLKFreq>
 8003b34:	0004      	movs	r4, r0
 8003b36:	f7ff fb3f 	bl	80031b8 <LL_RCC_GetAPB1Prescaler>
 8003b3a:	0003      	movs	r3, r0
 8003b3c:	0b1a      	lsrs	r2, r3, #12
 8003b3e:	4b05      	ldr	r3, [pc, #20]	; (8003b54 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003b40:	0092      	lsls	r2, r2, #2
 8003b42:	58d3      	ldr	r3, [r2, r3]
 8003b44:	221f      	movs	r2, #31
 8003b46:	4013      	ands	r3, r2
 8003b48:	40dc      	lsrs	r4, r3
 8003b4a:	0023      	movs	r3, r4
}
 8003b4c:	0018      	movs	r0, r3
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bdb0      	pop	{r4, r5, r7, pc}
 8003b52:	46c0      	nop			; (mov r8, r8)
 8003b54:	08007200 	.word	0x08007200

08003b58 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b086      	sub	sp, #24
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003b60:	2313      	movs	r3, #19
 8003b62:	18fb      	adds	r3, r7, r3
 8003b64:	2200      	movs	r2, #0
 8003b66:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003b68:	2312      	movs	r3, #18
 8003b6a:	18fb      	adds	r3, r7, r3
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	2380      	movs	r3, #128	; 0x80
 8003b76:	029b      	lsls	r3, r3, #10
 8003b78:	4013      	ands	r3, r2
 8003b7a:	d100      	bne.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003b7c:	e0a3      	b.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b7e:	2011      	movs	r0, #17
 8003b80:	183b      	adds	r3, r7, r0
 8003b82:	2200      	movs	r2, #0
 8003b84:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b86:	4bc3      	ldr	r3, [pc, #780]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003b88:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b8a:	2380      	movs	r3, #128	; 0x80
 8003b8c:	055b      	lsls	r3, r3, #21
 8003b8e:	4013      	ands	r3, r2
 8003b90:	d110      	bne.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b92:	4bc0      	ldr	r3, [pc, #768]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003b94:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b96:	4bbf      	ldr	r3, [pc, #764]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003b98:	2180      	movs	r1, #128	; 0x80
 8003b9a:	0549      	lsls	r1, r1, #21
 8003b9c:	430a      	orrs	r2, r1
 8003b9e:	63da      	str	r2, [r3, #60]	; 0x3c
 8003ba0:	4bbc      	ldr	r3, [pc, #752]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003ba2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ba4:	2380      	movs	r3, #128	; 0x80
 8003ba6:	055b      	lsls	r3, r3, #21
 8003ba8:	4013      	ands	r3, r2
 8003baa:	60bb      	str	r3, [r7, #8]
 8003bac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bae:	183b      	adds	r3, r7, r0
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003bb4:	4bb8      	ldr	r3, [pc, #736]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	4bb7      	ldr	r3, [pc, #732]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003bba:	2180      	movs	r1, #128	; 0x80
 8003bbc:	0049      	lsls	r1, r1, #1
 8003bbe:	430a      	orrs	r2, r1
 8003bc0:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003bc2:	f7fe f937 	bl	8001e34 <HAL_GetTick>
 8003bc6:	0003      	movs	r3, r0
 8003bc8:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003bca:	e00b      	b.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bcc:	f7fe f932 	bl	8001e34 <HAL_GetTick>
 8003bd0:	0002      	movs	r2, r0
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	1ad3      	subs	r3, r2, r3
 8003bd6:	2b02      	cmp	r3, #2
 8003bd8:	d904      	bls.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8003bda:	2313      	movs	r3, #19
 8003bdc:	18fb      	adds	r3, r7, r3
 8003bde:	2203      	movs	r2, #3
 8003be0:	701a      	strb	r2, [r3, #0]
        break;
 8003be2:	e005      	b.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003be4:	4bac      	ldr	r3, [pc, #688]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	2380      	movs	r3, #128	; 0x80
 8003bea:	005b      	lsls	r3, r3, #1
 8003bec:	4013      	ands	r3, r2
 8003bee:	d0ed      	beq.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8003bf0:	2313      	movs	r3, #19
 8003bf2:	18fb      	adds	r3, r7, r3
 8003bf4:	781b      	ldrb	r3, [r3, #0]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d154      	bne.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003bfa:	4ba6      	ldr	r3, [pc, #664]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003bfc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003bfe:	23c0      	movs	r3, #192	; 0xc0
 8003c00:	009b      	lsls	r3, r3, #2
 8003c02:	4013      	ands	r3, r2
 8003c04:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d019      	beq.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c10:	697a      	ldr	r2, [r7, #20]
 8003c12:	429a      	cmp	r2, r3
 8003c14:	d014      	beq.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003c16:	4b9f      	ldr	r3, [pc, #636]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003c18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c1a:	4aa0      	ldr	r2, [pc, #640]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003c20:	4b9c      	ldr	r3, [pc, #624]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003c22:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003c24:	4b9b      	ldr	r3, [pc, #620]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003c26:	2180      	movs	r1, #128	; 0x80
 8003c28:	0249      	lsls	r1, r1, #9
 8003c2a:	430a      	orrs	r2, r1
 8003c2c:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003c2e:	4b99      	ldr	r3, [pc, #612]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003c30:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003c32:	4b98      	ldr	r3, [pc, #608]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003c34:	499a      	ldr	r1, [pc, #616]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8003c36:	400a      	ands	r2, r1
 8003c38:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003c3a:	4b96      	ldr	r3, [pc, #600]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003c3c:	697a      	ldr	r2, [r7, #20]
 8003c3e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	2201      	movs	r2, #1
 8003c44:	4013      	ands	r3, r2
 8003c46:	d016      	beq.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c48:	f7fe f8f4 	bl	8001e34 <HAL_GetTick>
 8003c4c:	0003      	movs	r3, r0
 8003c4e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c50:	e00c      	b.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c52:	f7fe f8ef 	bl	8001e34 <HAL_GetTick>
 8003c56:	0002      	movs	r2, r0
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	1ad3      	subs	r3, r2, r3
 8003c5c:	4a91      	ldr	r2, [pc, #580]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d904      	bls.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8003c62:	2313      	movs	r3, #19
 8003c64:	18fb      	adds	r3, r7, r3
 8003c66:	2203      	movs	r2, #3
 8003c68:	701a      	strb	r2, [r3, #0]
            break;
 8003c6a:	e004      	b.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c6c:	4b89      	ldr	r3, [pc, #548]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003c6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c70:	2202      	movs	r2, #2
 8003c72:	4013      	ands	r3, r2
 8003c74:	d0ed      	beq.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8003c76:	2313      	movs	r3, #19
 8003c78:	18fb      	adds	r3, r7, r3
 8003c7a:	781b      	ldrb	r3, [r3, #0]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d10a      	bne.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c80:	4b84      	ldr	r3, [pc, #528]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003c82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c84:	4a85      	ldr	r2, [pc, #532]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003c86:	4013      	ands	r3, r2
 8003c88:	0019      	movs	r1, r3
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c8e:	4b81      	ldr	r3, [pc, #516]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003c90:	430a      	orrs	r2, r1
 8003c92:	65da      	str	r2, [r3, #92]	; 0x5c
 8003c94:	e00c      	b.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003c96:	2312      	movs	r3, #18
 8003c98:	18fb      	adds	r3, r7, r3
 8003c9a:	2213      	movs	r2, #19
 8003c9c:	18ba      	adds	r2, r7, r2
 8003c9e:	7812      	ldrb	r2, [r2, #0]
 8003ca0:	701a      	strb	r2, [r3, #0]
 8003ca2:	e005      	b.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ca4:	2312      	movs	r3, #18
 8003ca6:	18fb      	adds	r3, r7, r3
 8003ca8:	2213      	movs	r2, #19
 8003caa:	18ba      	adds	r2, r7, r2
 8003cac:	7812      	ldrb	r2, [r2, #0]
 8003cae:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003cb0:	2311      	movs	r3, #17
 8003cb2:	18fb      	adds	r3, r7, r3
 8003cb4:	781b      	ldrb	r3, [r3, #0]
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d105      	bne.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cba:	4b76      	ldr	r3, [pc, #472]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003cbc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003cbe:	4b75      	ldr	r3, [pc, #468]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003cc0:	4979      	ldr	r1, [pc, #484]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8003cc2:	400a      	ands	r2, r1
 8003cc4:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	4013      	ands	r3, r2
 8003cce:	d009      	beq.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003cd0:	4b70      	ldr	r3, [pc, #448]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003cd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cd4:	2203      	movs	r2, #3
 8003cd6:	4393      	bics	r3, r2
 8003cd8:	0019      	movs	r1, r3
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	685a      	ldr	r2, [r3, #4]
 8003cde:	4b6d      	ldr	r3, [pc, #436]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003ce0:	430a      	orrs	r2, r1
 8003ce2:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	2202      	movs	r2, #2
 8003cea:	4013      	ands	r3, r2
 8003cec:	d009      	beq.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003cee:	4b69      	ldr	r3, [pc, #420]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003cf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cf2:	220c      	movs	r2, #12
 8003cf4:	4393      	bics	r3, r2
 8003cf6:	0019      	movs	r1, r3
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	689a      	ldr	r2, [r3, #8]
 8003cfc:	4b65      	ldr	r3, [pc, #404]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003cfe:	430a      	orrs	r2, r1
 8003d00:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	2210      	movs	r2, #16
 8003d08:	4013      	ands	r3, r2
 8003d0a:	d009      	beq.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003d0c:	4b61      	ldr	r3, [pc, #388]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003d0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d10:	4a66      	ldr	r2, [pc, #408]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8003d12:	4013      	ands	r3, r2
 8003d14:	0019      	movs	r1, r3
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	68da      	ldr	r2, [r3, #12]
 8003d1a:	4b5e      	ldr	r3, [pc, #376]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003d1c:	430a      	orrs	r2, r1
 8003d1e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	2380      	movs	r3, #128	; 0x80
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	4013      	ands	r3, r2
 8003d2a:	d009      	beq.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003d2c:	4b59      	ldr	r3, [pc, #356]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003d2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d30:	4a5f      	ldr	r2, [pc, #380]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003d32:	4013      	ands	r3, r2
 8003d34:	0019      	movs	r1, r3
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	699a      	ldr	r2, [r3, #24]
 8003d3a:	4b56      	ldr	r3, [pc, #344]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003d3c:	430a      	orrs	r2, r1
 8003d3e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	2380      	movs	r3, #128	; 0x80
 8003d46:	00db      	lsls	r3, r3, #3
 8003d48:	4013      	ands	r3, r2
 8003d4a:	d009      	beq.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003d4c:	4b51      	ldr	r3, [pc, #324]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003d4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d50:	4a58      	ldr	r2, [pc, #352]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d52:	4013      	ands	r3, r2
 8003d54:	0019      	movs	r1, r3
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	69da      	ldr	r2, [r3, #28]
 8003d5a:	4b4e      	ldr	r3, [pc, #312]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003d5c:	430a      	orrs	r2, r1
 8003d5e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	2220      	movs	r2, #32
 8003d66:	4013      	ands	r3, r2
 8003d68:	d009      	beq.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d6a:	4b4a      	ldr	r3, [pc, #296]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003d6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d6e:	4a52      	ldr	r2, [pc, #328]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8003d70:	4013      	ands	r3, r2
 8003d72:	0019      	movs	r1, r3
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	691a      	ldr	r2, [r3, #16]
 8003d78:	4b46      	ldr	r3, [pc, #280]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003d7a:	430a      	orrs	r2, r1
 8003d7c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	2380      	movs	r3, #128	; 0x80
 8003d84:	01db      	lsls	r3, r3, #7
 8003d86:	4013      	ands	r3, r2
 8003d88:	d015      	beq.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003d8a:	4b42      	ldr	r3, [pc, #264]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003d8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d8e:	009b      	lsls	r3, r3, #2
 8003d90:	0899      	lsrs	r1, r3, #2
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6a1a      	ldr	r2, [r3, #32]
 8003d96:	4b3f      	ldr	r3, [pc, #252]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003d98:	430a      	orrs	r2, r1
 8003d9a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6a1a      	ldr	r2, [r3, #32]
 8003da0:	2380      	movs	r3, #128	; 0x80
 8003da2:	05db      	lsls	r3, r3, #23
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d106      	bne.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003da8:	4b3a      	ldr	r3, [pc, #232]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003daa:	68da      	ldr	r2, [r3, #12]
 8003dac:	4b39      	ldr	r3, [pc, #228]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003dae:	2180      	movs	r1, #128	; 0x80
 8003db0:	0249      	lsls	r1, r1, #9
 8003db2:	430a      	orrs	r2, r1
 8003db4:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	2380      	movs	r3, #128	; 0x80
 8003dbc:	031b      	lsls	r3, r3, #12
 8003dbe:	4013      	ands	r3, r2
 8003dc0:	d009      	beq.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003dc2:	4b34      	ldr	r3, [pc, #208]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003dc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dc6:	2240      	movs	r2, #64	; 0x40
 8003dc8:	4393      	bics	r3, r2
 8003dca:	0019      	movs	r1, r3
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003dd0:	4b30      	ldr	r3, [pc, #192]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003dd2:	430a      	orrs	r2, r1
 8003dd4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	2380      	movs	r3, #128	; 0x80
 8003ddc:	039b      	lsls	r3, r3, #14
 8003dde:	4013      	ands	r3, r2
 8003de0:	d016      	beq.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003de2:	4b2c      	ldr	r3, [pc, #176]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003de4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003de6:	4a35      	ldr	r2, [pc, #212]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003de8:	4013      	ands	r3, r2
 8003dea:	0019      	movs	r1, r3
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003df0:	4b28      	ldr	r3, [pc, #160]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003df2:	430a      	orrs	r2, r1
 8003df4:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003dfa:	2380      	movs	r3, #128	; 0x80
 8003dfc:	03db      	lsls	r3, r3, #15
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d106      	bne.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003e02:	4b24      	ldr	r3, [pc, #144]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003e04:	68da      	ldr	r2, [r3, #12]
 8003e06:	4b23      	ldr	r3, [pc, #140]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003e08:	2180      	movs	r1, #128	; 0x80
 8003e0a:	0449      	lsls	r1, r1, #17
 8003e0c:	430a      	orrs	r2, r1
 8003e0e:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	2380      	movs	r3, #128	; 0x80
 8003e16:	03db      	lsls	r3, r3, #15
 8003e18:	4013      	ands	r3, r2
 8003e1a:	d016      	beq.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003e1c:	4b1d      	ldr	r3, [pc, #116]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003e1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e20:	4a27      	ldr	r2, [pc, #156]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8003e22:	4013      	ands	r3, r2
 8003e24:	0019      	movs	r1, r3
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e2a:	4b1a      	ldr	r3, [pc, #104]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003e2c:	430a      	orrs	r2, r1
 8003e2e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e34:	2380      	movs	r3, #128	; 0x80
 8003e36:	045b      	lsls	r3, r3, #17
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d106      	bne.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003e3c:	4b15      	ldr	r3, [pc, #84]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003e3e:	68da      	ldr	r2, [r3, #12]
 8003e40:	4b14      	ldr	r3, [pc, #80]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003e42:	2180      	movs	r1, #128	; 0x80
 8003e44:	0449      	lsls	r1, r1, #17
 8003e46:	430a      	orrs	r2, r1
 8003e48:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	2380      	movs	r3, #128	; 0x80
 8003e50:	011b      	lsls	r3, r3, #4
 8003e52:	4013      	ands	r3, r2
 8003e54:	d016      	beq.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003e56:	4b0f      	ldr	r3, [pc, #60]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003e58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e5a:	4a1a      	ldr	r2, [pc, #104]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	0019      	movs	r1, r3
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	695a      	ldr	r2, [r3, #20]
 8003e64:	4b0b      	ldr	r3, [pc, #44]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003e66:	430a      	orrs	r2, r1
 8003e68:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	695a      	ldr	r2, [r3, #20]
 8003e6e:	2380      	movs	r3, #128	; 0x80
 8003e70:	01db      	lsls	r3, r3, #7
 8003e72:	429a      	cmp	r2, r3
 8003e74:	d106      	bne.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003e76:	4b07      	ldr	r3, [pc, #28]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003e78:	68da      	ldr	r2, [r3, #12]
 8003e7a:	4b06      	ldr	r3, [pc, #24]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003e7c:	2180      	movs	r1, #128	; 0x80
 8003e7e:	0249      	lsls	r1, r1, #9
 8003e80:	430a      	orrs	r2, r1
 8003e82:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8003e84:	2312      	movs	r3, #18
 8003e86:	18fb      	adds	r3, r7, r3
 8003e88:	781b      	ldrb	r3, [r3, #0]
}
 8003e8a:	0018      	movs	r0, r3
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	b006      	add	sp, #24
 8003e90:	bd80      	pop	{r7, pc}
 8003e92:	46c0      	nop			; (mov r8, r8)
 8003e94:	40021000 	.word	0x40021000
 8003e98:	40007000 	.word	0x40007000
 8003e9c:	fffffcff 	.word	0xfffffcff
 8003ea0:	fffeffff 	.word	0xfffeffff
 8003ea4:	00001388 	.word	0x00001388
 8003ea8:	efffffff 	.word	0xefffffff
 8003eac:	fffff3ff 	.word	0xfffff3ff
 8003eb0:	fff3ffff 	.word	0xfff3ffff
 8003eb4:	ffcfffff 	.word	0xffcfffff
 8003eb8:	ffffcfff 	.word	0xffffcfff
 8003ebc:	ffbfffff 	.word	0xffbfffff
 8003ec0:	feffffff 	.word	0xfeffffff
 8003ec4:	ffff3fff 	.word	0xffff3fff

08003ec8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b084      	sub	sp, #16
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d101      	bne.n	8003eda <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e0a8      	b.n	800402c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d109      	bne.n	8003ef6 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	685a      	ldr	r2, [r3, #4]
 8003ee6:	2382      	movs	r3, #130	; 0x82
 8003ee8:	005b      	lsls	r3, r3, #1
 8003eea:	429a      	cmp	r2, r3
 8003eec:	d009      	beq.n	8003f02 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	61da      	str	r2, [r3, #28]
 8003ef4:	e005      	b.n	8003f02 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2200      	movs	r2, #0
 8003f00:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2200      	movs	r2, #0
 8003f06:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	225d      	movs	r2, #93	; 0x5d
 8003f0c:	5c9b      	ldrb	r3, [r3, r2]
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d107      	bne.n	8003f24 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	225c      	movs	r2, #92	; 0x5c
 8003f18:	2100      	movs	r1, #0
 8003f1a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	0018      	movs	r0, r3
 8003f20:	f7fd fde6 	bl	8001af0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	225d      	movs	r2, #93	; 0x5d
 8003f28:	2102      	movs	r1, #2
 8003f2a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	2140      	movs	r1, #64	; 0x40
 8003f38:	438a      	bics	r2, r1
 8003f3a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	68da      	ldr	r2, [r3, #12]
 8003f40:	23e0      	movs	r3, #224	; 0xe0
 8003f42:	00db      	lsls	r3, r3, #3
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d902      	bls.n	8003f4e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003f48:	2300      	movs	r3, #0
 8003f4a:	60fb      	str	r3, [r7, #12]
 8003f4c:	e002      	b.n	8003f54 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003f4e:	2380      	movs	r3, #128	; 0x80
 8003f50:	015b      	lsls	r3, r3, #5
 8003f52:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	68da      	ldr	r2, [r3, #12]
 8003f58:	23f0      	movs	r3, #240	; 0xf0
 8003f5a:	011b      	lsls	r3, r3, #4
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d008      	beq.n	8003f72 <HAL_SPI_Init+0xaa>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	68da      	ldr	r2, [r3, #12]
 8003f64:	23e0      	movs	r3, #224	; 0xe0
 8003f66:	00db      	lsls	r3, r3, #3
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d002      	beq.n	8003f72 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	685a      	ldr	r2, [r3, #4]
 8003f76:	2382      	movs	r3, #130	; 0x82
 8003f78:	005b      	lsls	r3, r3, #1
 8003f7a:	401a      	ands	r2, r3
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6899      	ldr	r1, [r3, #8]
 8003f80:	2384      	movs	r3, #132	; 0x84
 8003f82:	021b      	lsls	r3, r3, #8
 8003f84:	400b      	ands	r3, r1
 8003f86:	431a      	orrs	r2, r3
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	691b      	ldr	r3, [r3, #16]
 8003f8c:	2102      	movs	r1, #2
 8003f8e:	400b      	ands	r3, r1
 8003f90:	431a      	orrs	r2, r3
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	695b      	ldr	r3, [r3, #20]
 8003f96:	2101      	movs	r1, #1
 8003f98:	400b      	ands	r3, r1
 8003f9a:	431a      	orrs	r2, r3
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6999      	ldr	r1, [r3, #24]
 8003fa0:	2380      	movs	r3, #128	; 0x80
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	400b      	ands	r3, r1
 8003fa6:	431a      	orrs	r2, r3
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	69db      	ldr	r3, [r3, #28]
 8003fac:	2138      	movs	r1, #56	; 0x38
 8003fae:	400b      	ands	r3, r1
 8003fb0:	431a      	orrs	r2, r3
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6a1b      	ldr	r3, [r3, #32]
 8003fb6:	2180      	movs	r1, #128	; 0x80
 8003fb8:	400b      	ands	r3, r1
 8003fba:	431a      	orrs	r2, r3
 8003fbc:	0011      	movs	r1, r2
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003fc2:	2380      	movs	r3, #128	; 0x80
 8003fc4:	019b      	lsls	r3, r3, #6
 8003fc6:	401a      	ands	r2, r3
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	430a      	orrs	r2, r1
 8003fce:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	699b      	ldr	r3, [r3, #24]
 8003fd4:	0c1b      	lsrs	r3, r3, #16
 8003fd6:	2204      	movs	r2, #4
 8003fd8:	401a      	ands	r2, r3
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fde:	2110      	movs	r1, #16
 8003fe0:	400b      	ands	r3, r1
 8003fe2:	431a      	orrs	r2, r3
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fe8:	2108      	movs	r1, #8
 8003fea:	400b      	ands	r3, r1
 8003fec:	431a      	orrs	r2, r3
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	68d9      	ldr	r1, [r3, #12]
 8003ff2:	23f0      	movs	r3, #240	; 0xf0
 8003ff4:	011b      	lsls	r3, r3, #4
 8003ff6:	400b      	ands	r3, r1
 8003ff8:	431a      	orrs	r2, r3
 8003ffa:	0011      	movs	r1, r2
 8003ffc:	68fa      	ldr	r2, [r7, #12]
 8003ffe:	2380      	movs	r3, #128	; 0x80
 8004000:	015b      	lsls	r3, r3, #5
 8004002:	401a      	ands	r2, r3
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	430a      	orrs	r2, r1
 800400a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	69da      	ldr	r2, [r3, #28]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4907      	ldr	r1, [pc, #28]	; (8004034 <HAL_SPI_Init+0x16c>)
 8004018:	400a      	ands	r2, r1
 800401a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2200      	movs	r2, #0
 8004020:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	225d      	movs	r2, #93	; 0x5d
 8004026:	2101      	movs	r1, #1
 8004028:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800402a:	2300      	movs	r3, #0
}
 800402c:	0018      	movs	r0, r3
 800402e:	46bd      	mov	sp, r7
 8004030:	b004      	add	sp, #16
 8004032:	bd80      	pop	{r7, pc}
 8004034:	fffff7ff 	.word	0xfffff7ff

08004038 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b08a      	sub	sp, #40	; 0x28
 800403c:	af00      	add	r7, sp, #0
 800403e:	60f8      	str	r0, [r7, #12]
 8004040:	60b9      	str	r1, [r7, #8]
 8004042:	607a      	str	r2, [r7, #4]
 8004044:	001a      	movs	r2, r3
 8004046:	1cbb      	adds	r3, r7, #2
 8004048:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800404a:	2301      	movs	r3, #1
 800404c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800404e:	2323      	movs	r3, #35	; 0x23
 8004050:	18fb      	adds	r3, r7, r3
 8004052:	2200      	movs	r2, #0
 8004054:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	225c      	movs	r2, #92	; 0x5c
 800405a:	5c9b      	ldrb	r3, [r3, r2]
 800405c:	2b01      	cmp	r3, #1
 800405e:	d101      	bne.n	8004064 <HAL_SPI_TransmitReceive+0x2c>
 8004060:	2302      	movs	r3, #2
 8004062:	e1b5      	b.n	80043d0 <HAL_SPI_TransmitReceive+0x398>
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	225c      	movs	r2, #92	; 0x5c
 8004068:	2101      	movs	r1, #1
 800406a:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800406c:	f7fd fee2 	bl	8001e34 <HAL_GetTick>
 8004070:	0003      	movs	r3, r0
 8004072:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004074:	201b      	movs	r0, #27
 8004076:	183b      	adds	r3, r7, r0
 8004078:	68fa      	ldr	r2, [r7, #12]
 800407a:	215d      	movs	r1, #93	; 0x5d
 800407c:	5c52      	ldrb	r2, [r2, r1]
 800407e:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004086:	2312      	movs	r3, #18
 8004088:	18fb      	adds	r3, r7, r3
 800408a:	1cba      	adds	r2, r7, #2
 800408c:	8812      	ldrh	r2, [r2, #0]
 800408e:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004090:	183b      	adds	r3, r7, r0
 8004092:	781b      	ldrb	r3, [r3, #0]
 8004094:	2b01      	cmp	r3, #1
 8004096:	d011      	beq.n	80040bc <HAL_SPI_TransmitReceive+0x84>
 8004098:	697a      	ldr	r2, [r7, #20]
 800409a:	2382      	movs	r3, #130	; 0x82
 800409c:	005b      	lsls	r3, r3, #1
 800409e:	429a      	cmp	r2, r3
 80040a0:	d107      	bne.n	80040b2 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d103      	bne.n	80040b2 <HAL_SPI_TransmitReceive+0x7a>
 80040aa:	183b      	adds	r3, r7, r0
 80040ac:	781b      	ldrb	r3, [r3, #0]
 80040ae:	2b04      	cmp	r3, #4
 80040b0:	d004      	beq.n	80040bc <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 80040b2:	2323      	movs	r3, #35	; 0x23
 80040b4:	18fb      	adds	r3, r7, r3
 80040b6:	2202      	movs	r2, #2
 80040b8:	701a      	strb	r2, [r3, #0]
    goto error;
 80040ba:	e17e      	b.n	80043ba <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d006      	beq.n	80040d0 <HAL_SPI_TransmitReceive+0x98>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d003      	beq.n	80040d0 <HAL_SPI_TransmitReceive+0x98>
 80040c8:	1cbb      	adds	r3, r7, #2
 80040ca:	881b      	ldrh	r3, [r3, #0]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d104      	bne.n	80040da <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 80040d0:	2323      	movs	r3, #35	; 0x23
 80040d2:	18fb      	adds	r3, r7, r3
 80040d4:	2201      	movs	r2, #1
 80040d6:	701a      	strb	r2, [r3, #0]
    goto error;
 80040d8:	e16f      	b.n	80043ba <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	225d      	movs	r2, #93	; 0x5d
 80040de:	5c9b      	ldrb	r3, [r3, r2]
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	2b04      	cmp	r3, #4
 80040e4:	d003      	beq.n	80040ee <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	225d      	movs	r2, #93	; 0x5d
 80040ea:	2105      	movs	r1, #5
 80040ec:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2200      	movs	r2, #0
 80040f2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	687a      	ldr	r2, [r7, #4]
 80040f8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	1cba      	adds	r2, r7, #2
 80040fe:	2146      	movs	r1, #70	; 0x46
 8004100:	8812      	ldrh	r2, [r2, #0]
 8004102:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	1cba      	adds	r2, r7, #2
 8004108:	2144      	movs	r1, #68	; 0x44
 800410a:	8812      	ldrh	r2, [r2, #0]
 800410c:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	68ba      	ldr	r2, [r7, #8]
 8004112:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	1cba      	adds	r2, r7, #2
 8004118:	8812      	ldrh	r2, [r2, #0]
 800411a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	1cba      	adds	r2, r7, #2
 8004120:	8812      	ldrh	r2, [r2, #0]
 8004122:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2200      	movs	r2, #0
 8004128:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2200      	movs	r2, #0
 800412e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	68da      	ldr	r2, [r3, #12]
 8004134:	23e0      	movs	r3, #224	; 0xe0
 8004136:	00db      	lsls	r3, r3, #3
 8004138:	429a      	cmp	r2, r3
 800413a:	d908      	bls.n	800414e <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	685a      	ldr	r2, [r3, #4]
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	49a4      	ldr	r1, [pc, #656]	; (80043d8 <HAL_SPI_TransmitReceive+0x3a0>)
 8004148:	400a      	ands	r2, r1
 800414a:	605a      	str	r2, [r3, #4]
 800414c:	e008      	b.n	8004160 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	685a      	ldr	r2, [r3, #4]
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	2180      	movs	r1, #128	; 0x80
 800415a:	0149      	lsls	r1, r1, #5
 800415c:	430a      	orrs	r2, r1
 800415e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	2240      	movs	r2, #64	; 0x40
 8004168:	4013      	ands	r3, r2
 800416a:	2b40      	cmp	r3, #64	; 0x40
 800416c:	d007      	beq.n	800417e <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	2140      	movs	r1, #64	; 0x40
 800417a:	430a      	orrs	r2, r1
 800417c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	68da      	ldr	r2, [r3, #12]
 8004182:	23e0      	movs	r3, #224	; 0xe0
 8004184:	00db      	lsls	r3, r3, #3
 8004186:	429a      	cmp	r2, r3
 8004188:	d800      	bhi.n	800418c <HAL_SPI_TransmitReceive+0x154>
 800418a:	e07f      	b.n	800428c <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d005      	beq.n	80041a0 <HAL_SPI_TransmitReceive+0x168>
 8004194:	2312      	movs	r3, #18
 8004196:	18fb      	adds	r3, r7, r3
 8004198:	881b      	ldrh	r3, [r3, #0]
 800419a:	2b01      	cmp	r3, #1
 800419c:	d000      	beq.n	80041a0 <HAL_SPI_TransmitReceive+0x168>
 800419e:	e069      	b.n	8004274 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041a4:	881a      	ldrh	r2, [r3, #0]
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041b0:	1c9a      	adds	r2, r3, #2
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041ba:	b29b      	uxth	r3, r3
 80041bc:	3b01      	subs	r3, #1
 80041be:	b29a      	uxth	r2, r3
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80041c4:	e056      	b.n	8004274 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	2202      	movs	r2, #2
 80041ce:	4013      	ands	r3, r2
 80041d0:	2b02      	cmp	r3, #2
 80041d2:	d11b      	bne.n	800420c <HAL_SPI_TransmitReceive+0x1d4>
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041d8:	b29b      	uxth	r3, r3
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d016      	beq.n	800420c <HAL_SPI_TransmitReceive+0x1d4>
 80041de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d113      	bne.n	800420c <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041e8:	881a      	ldrh	r2, [r3, #0]
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041f4:	1c9a      	adds	r2, r3, #2
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041fe:	b29b      	uxth	r3, r3
 8004200:	3b01      	subs	r3, #1
 8004202:	b29a      	uxth	r2, r3
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004208:	2300      	movs	r3, #0
 800420a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	2201      	movs	r2, #1
 8004214:	4013      	ands	r3, r2
 8004216:	2b01      	cmp	r3, #1
 8004218:	d11c      	bne.n	8004254 <HAL_SPI_TransmitReceive+0x21c>
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2246      	movs	r2, #70	; 0x46
 800421e:	5a9b      	ldrh	r3, [r3, r2]
 8004220:	b29b      	uxth	r3, r3
 8004222:	2b00      	cmp	r3, #0
 8004224:	d016      	beq.n	8004254 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	68da      	ldr	r2, [r3, #12]
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004230:	b292      	uxth	r2, r2
 8004232:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004238:	1c9a      	adds	r2, r3, #2
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	2246      	movs	r2, #70	; 0x46
 8004242:	5a9b      	ldrh	r3, [r3, r2]
 8004244:	b29b      	uxth	r3, r3
 8004246:	3b01      	subs	r3, #1
 8004248:	b299      	uxth	r1, r3
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2246      	movs	r2, #70	; 0x46
 800424e:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004250:	2301      	movs	r3, #1
 8004252:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004254:	f7fd fdee 	bl	8001e34 <HAL_GetTick>
 8004258:	0002      	movs	r2, r0
 800425a:	69fb      	ldr	r3, [r7, #28]
 800425c:	1ad3      	subs	r3, r2, r3
 800425e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004260:	429a      	cmp	r2, r3
 8004262:	d807      	bhi.n	8004274 <HAL_SPI_TransmitReceive+0x23c>
 8004264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004266:	3301      	adds	r3, #1
 8004268:	d004      	beq.n	8004274 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 800426a:	2323      	movs	r3, #35	; 0x23
 800426c:	18fb      	adds	r3, r7, r3
 800426e:	2203      	movs	r2, #3
 8004270:	701a      	strb	r2, [r3, #0]
        goto error;
 8004272:	e0a2      	b.n	80043ba <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004278:	b29b      	uxth	r3, r3
 800427a:	2b00      	cmp	r3, #0
 800427c:	d1a3      	bne.n	80041c6 <HAL_SPI_TransmitReceive+0x18e>
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2246      	movs	r2, #70	; 0x46
 8004282:	5a9b      	ldrh	r3, [r3, r2]
 8004284:	b29b      	uxth	r3, r3
 8004286:	2b00      	cmp	r3, #0
 8004288:	d19d      	bne.n	80041c6 <HAL_SPI_TransmitReceive+0x18e>
 800428a:	e085      	b.n	8004398 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d005      	beq.n	80042a0 <HAL_SPI_TransmitReceive+0x268>
 8004294:	2312      	movs	r3, #18
 8004296:	18fb      	adds	r3, r7, r3
 8004298:	881b      	ldrh	r3, [r3, #0]
 800429a:	2b01      	cmp	r3, #1
 800429c:	d000      	beq.n	80042a0 <HAL_SPI_TransmitReceive+0x268>
 800429e:	e070      	b.n	8004382 <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	330c      	adds	r3, #12
 80042aa:	7812      	ldrb	r2, [r2, #0]
 80042ac:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042b2:	1c5a      	adds	r2, r3, #1
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042bc:	b29b      	uxth	r3, r3
 80042be:	3b01      	subs	r3, #1
 80042c0:	b29a      	uxth	r2, r3
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80042c6:	e05c      	b.n	8004382 <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	2202      	movs	r2, #2
 80042d0:	4013      	ands	r3, r2
 80042d2:	2b02      	cmp	r3, #2
 80042d4:	d11c      	bne.n	8004310 <HAL_SPI_TransmitReceive+0x2d8>
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042da:	b29b      	uxth	r3, r3
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d017      	beq.n	8004310 <HAL_SPI_TransmitReceive+0x2d8>
 80042e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d114      	bne.n	8004310 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	330c      	adds	r3, #12
 80042f0:	7812      	ldrb	r2, [r2, #0]
 80042f2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042f8:	1c5a      	adds	r2, r3, #1
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004302:	b29b      	uxth	r3, r3
 8004304:	3b01      	subs	r3, #1
 8004306:	b29a      	uxth	r2, r3
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800430c:	2300      	movs	r3, #0
 800430e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	2201      	movs	r2, #1
 8004318:	4013      	ands	r3, r2
 800431a:	2b01      	cmp	r3, #1
 800431c:	d11e      	bne.n	800435c <HAL_SPI_TransmitReceive+0x324>
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2246      	movs	r2, #70	; 0x46
 8004322:	5a9b      	ldrh	r3, [r3, r2]
 8004324:	b29b      	uxth	r3, r3
 8004326:	2b00      	cmp	r3, #0
 8004328:	d018      	beq.n	800435c <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	330c      	adds	r3, #12
 8004330:	001a      	movs	r2, r3
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004336:	7812      	ldrb	r2, [r2, #0]
 8004338:	b2d2      	uxtb	r2, r2
 800433a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004340:	1c5a      	adds	r2, r3, #1
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2246      	movs	r2, #70	; 0x46
 800434a:	5a9b      	ldrh	r3, [r3, r2]
 800434c:	b29b      	uxth	r3, r3
 800434e:	3b01      	subs	r3, #1
 8004350:	b299      	uxth	r1, r3
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2246      	movs	r2, #70	; 0x46
 8004356:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004358:	2301      	movs	r3, #1
 800435a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800435c:	f7fd fd6a 	bl	8001e34 <HAL_GetTick>
 8004360:	0002      	movs	r2, r0
 8004362:	69fb      	ldr	r3, [r7, #28]
 8004364:	1ad3      	subs	r3, r2, r3
 8004366:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004368:	429a      	cmp	r2, r3
 800436a:	d802      	bhi.n	8004372 <HAL_SPI_TransmitReceive+0x33a>
 800436c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800436e:	3301      	adds	r3, #1
 8004370:	d102      	bne.n	8004378 <HAL_SPI_TransmitReceive+0x340>
 8004372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004374:	2b00      	cmp	r3, #0
 8004376:	d104      	bne.n	8004382 <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8004378:	2323      	movs	r3, #35	; 0x23
 800437a:	18fb      	adds	r3, r7, r3
 800437c:	2203      	movs	r2, #3
 800437e:	701a      	strb	r2, [r3, #0]
        goto error;
 8004380:	e01b      	b.n	80043ba <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004386:	b29b      	uxth	r3, r3
 8004388:	2b00      	cmp	r3, #0
 800438a:	d19d      	bne.n	80042c8 <HAL_SPI_TransmitReceive+0x290>
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2246      	movs	r2, #70	; 0x46
 8004390:	5a9b      	ldrh	r3, [r3, r2]
 8004392:	b29b      	uxth	r3, r3
 8004394:	2b00      	cmp	r3, #0
 8004396:	d197      	bne.n	80042c8 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004398:	69fa      	ldr	r2, [r7, #28]
 800439a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	0018      	movs	r0, r3
 80043a0:	f000 f94c 	bl	800463c <SPI_EndRxTxTransaction>
 80043a4:	1e03      	subs	r3, r0, #0
 80043a6:	d007      	beq.n	80043b8 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 80043a8:	2323      	movs	r3, #35	; 0x23
 80043aa:	18fb      	adds	r3, r7, r3
 80043ac:	2201      	movs	r2, #1
 80043ae:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2220      	movs	r2, #32
 80043b4:	661a      	str	r2, [r3, #96]	; 0x60
 80043b6:	e000      	b.n	80043ba <HAL_SPI_TransmitReceive+0x382>
  }

error :
 80043b8:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	225d      	movs	r2, #93	; 0x5d
 80043be:	2101      	movs	r1, #1
 80043c0:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	225c      	movs	r2, #92	; 0x5c
 80043c6:	2100      	movs	r1, #0
 80043c8:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80043ca:	2323      	movs	r3, #35	; 0x23
 80043cc:	18fb      	adds	r3, r7, r3
 80043ce:	781b      	ldrb	r3, [r3, #0]
}
 80043d0:	0018      	movs	r0, r3
 80043d2:	46bd      	mov	sp, r7
 80043d4:	b00a      	add	sp, #40	; 0x28
 80043d6:	bd80      	pop	{r7, pc}
 80043d8:	ffffefff 	.word	0xffffefff

080043dc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b088      	sub	sp, #32
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	60f8      	str	r0, [r7, #12]
 80043e4:	60b9      	str	r1, [r7, #8]
 80043e6:	603b      	str	r3, [r7, #0]
 80043e8:	1dfb      	adds	r3, r7, #7
 80043ea:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80043ec:	f7fd fd22 	bl	8001e34 <HAL_GetTick>
 80043f0:	0002      	movs	r2, r0
 80043f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043f4:	1a9b      	subs	r3, r3, r2
 80043f6:	683a      	ldr	r2, [r7, #0]
 80043f8:	18d3      	adds	r3, r2, r3
 80043fa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80043fc:	f7fd fd1a 	bl	8001e34 <HAL_GetTick>
 8004400:	0003      	movs	r3, r0
 8004402:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004404:	4b3a      	ldr	r3, [pc, #232]	; (80044f0 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	015b      	lsls	r3, r3, #5
 800440a:	0d1b      	lsrs	r3, r3, #20
 800440c:	69fa      	ldr	r2, [r7, #28]
 800440e:	4353      	muls	r3, r2
 8004410:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004412:	e058      	b.n	80044c6 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	3301      	adds	r3, #1
 8004418:	d055      	beq.n	80044c6 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800441a:	f7fd fd0b 	bl	8001e34 <HAL_GetTick>
 800441e:	0002      	movs	r2, r0
 8004420:	69bb      	ldr	r3, [r7, #24]
 8004422:	1ad3      	subs	r3, r2, r3
 8004424:	69fa      	ldr	r2, [r7, #28]
 8004426:	429a      	cmp	r2, r3
 8004428:	d902      	bls.n	8004430 <SPI_WaitFlagStateUntilTimeout+0x54>
 800442a:	69fb      	ldr	r3, [r7, #28]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d142      	bne.n	80044b6 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	685a      	ldr	r2, [r3, #4]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	21e0      	movs	r1, #224	; 0xe0
 800443c:	438a      	bics	r2, r1
 800443e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	685a      	ldr	r2, [r3, #4]
 8004444:	2382      	movs	r3, #130	; 0x82
 8004446:	005b      	lsls	r3, r3, #1
 8004448:	429a      	cmp	r2, r3
 800444a:	d113      	bne.n	8004474 <SPI_WaitFlagStateUntilTimeout+0x98>
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	689a      	ldr	r2, [r3, #8]
 8004450:	2380      	movs	r3, #128	; 0x80
 8004452:	021b      	lsls	r3, r3, #8
 8004454:	429a      	cmp	r2, r3
 8004456:	d005      	beq.n	8004464 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	689a      	ldr	r2, [r3, #8]
 800445c:	2380      	movs	r3, #128	; 0x80
 800445e:	00db      	lsls	r3, r3, #3
 8004460:	429a      	cmp	r2, r3
 8004462:	d107      	bne.n	8004474 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	681a      	ldr	r2, [r3, #0]
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	2140      	movs	r1, #64	; 0x40
 8004470:	438a      	bics	r2, r1
 8004472:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004478:	2380      	movs	r3, #128	; 0x80
 800447a:	019b      	lsls	r3, r3, #6
 800447c:	429a      	cmp	r2, r3
 800447e:	d110      	bne.n	80044a2 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	491a      	ldr	r1, [pc, #104]	; (80044f4 <SPI_WaitFlagStateUntilTimeout+0x118>)
 800448c:	400a      	ands	r2, r1
 800448e:	601a      	str	r2, [r3, #0]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	2180      	movs	r1, #128	; 0x80
 800449c:	0189      	lsls	r1, r1, #6
 800449e:	430a      	orrs	r2, r1
 80044a0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	225d      	movs	r2, #93	; 0x5d
 80044a6:	2101      	movs	r1, #1
 80044a8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	225c      	movs	r2, #92	; 0x5c
 80044ae:	2100      	movs	r1, #0
 80044b0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80044b2:	2303      	movs	r3, #3
 80044b4:	e017      	b.n	80044e6 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d101      	bne.n	80044c0 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80044bc:	2300      	movs	r3, #0
 80044be:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	3b01      	subs	r3, #1
 80044c4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	68ba      	ldr	r2, [r7, #8]
 80044ce:	4013      	ands	r3, r2
 80044d0:	68ba      	ldr	r2, [r7, #8]
 80044d2:	1ad3      	subs	r3, r2, r3
 80044d4:	425a      	negs	r2, r3
 80044d6:	4153      	adcs	r3, r2
 80044d8:	b2db      	uxtb	r3, r3
 80044da:	001a      	movs	r2, r3
 80044dc:	1dfb      	adds	r3, r7, #7
 80044de:	781b      	ldrb	r3, [r3, #0]
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d197      	bne.n	8004414 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80044e4:	2300      	movs	r3, #0
}
 80044e6:	0018      	movs	r0, r3
 80044e8:	46bd      	mov	sp, r7
 80044ea:	b008      	add	sp, #32
 80044ec:	bd80      	pop	{r7, pc}
 80044ee:	46c0      	nop			; (mov r8, r8)
 80044f0:	20000004 	.word	0x20000004
 80044f4:	ffffdfff 	.word	0xffffdfff

080044f8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b08a      	sub	sp, #40	; 0x28
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	60f8      	str	r0, [r7, #12]
 8004500:	60b9      	str	r1, [r7, #8]
 8004502:	607a      	str	r2, [r7, #4]
 8004504:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004506:	2317      	movs	r3, #23
 8004508:	18fb      	adds	r3, r7, r3
 800450a:	2200      	movs	r2, #0
 800450c:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800450e:	f7fd fc91 	bl	8001e34 <HAL_GetTick>
 8004512:	0002      	movs	r2, r0
 8004514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004516:	1a9b      	subs	r3, r3, r2
 8004518:	683a      	ldr	r2, [r7, #0]
 800451a:	18d3      	adds	r3, r2, r3
 800451c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800451e:	f7fd fc89 	bl	8001e34 <HAL_GetTick>
 8004522:	0003      	movs	r3, r0
 8004524:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	330c      	adds	r3, #12
 800452c:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800452e:	4b41      	ldr	r3, [pc, #260]	; (8004634 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	0013      	movs	r3, r2
 8004534:	009b      	lsls	r3, r3, #2
 8004536:	189b      	adds	r3, r3, r2
 8004538:	00da      	lsls	r2, r3, #3
 800453a:	1ad3      	subs	r3, r2, r3
 800453c:	0d1b      	lsrs	r3, r3, #20
 800453e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004540:	4353      	muls	r3, r2
 8004542:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004544:	e068      	b.n	8004618 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004546:	68ba      	ldr	r2, [r7, #8]
 8004548:	23c0      	movs	r3, #192	; 0xc0
 800454a:	00db      	lsls	r3, r3, #3
 800454c:	429a      	cmp	r2, r3
 800454e:	d10a      	bne.n	8004566 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d107      	bne.n	8004566 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004556:	69fb      	ldr	r3, [r7, #28]
 8004558:	781b      	ldrb	r3, [r3, #0]
 800455a:	b2da      	uxtb	r2, r3
 800455c:	2117      	movs	r1, #23
 800455e:	187b      	adds	r3, r7, r1
 8004560:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004562:	187b      	adds	r3, r7, r1
 8004564:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	3301      	adds	r3, #1
 800456a:	d055      	beq.n	8004618 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800456c:	f7fd fc62 	bl	8001e34 <HAL_GetTick>
 8004570:	0002      	movs	r2, r0
 8004572:	6a3b      	ldr	r3, [r7, #32]
 8004574:	1ad3      	subs	r3, r2, r3
 8004576:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004578:	429a      	cmp	r2, r3
 800457a:	d902      	bls.n	8004582 <SPI_WaitFifoStateUntilTimeout+0x8a>
 800457c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800457e:	2b00      	cmp	r3, #0
 8004580:	d142      	bne.n	8004608 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	685a      	ldr	r2, [r3, #4]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	21e0      	movs	r1, #224	; 0xe0
 800458e:	438a      	bics	r2, r1
 8004590:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	685a      	ldr	r2, [r3, #4]
 8004596:	2382      	movs	r3, #130	; 0x82
 8004598:	005b      	lsls	r3, r3, #1
 800459a:	429a      	cmp	r2, r3
 800459c:	d113      	bne.n	80045c6 <SPI_WaitFifoStateUntilTimeout+0xce>
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	689a      	ldr	r2, [r3, #8]
 80045a2:	2380      	movs	r3, #128	; 0x80
 80045a4:	021b      	lsls	r3, r3, #8
 80045a6:	429a      	cmp	r2, r3
 80045a8:	d005      	beq.n	80045b6 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	689a      	ldr	r2, [r3, #8]
 80045ae:	2380      	movs	r3, #128	; 0x80
 80045b0:	00db      	lsls	r3, r3, #3
 80045b2:	429a      	cmp	r2, r3
 80045b4:	d107      	bne.n	80045c6 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	2140      	movs	r1, #64	; 0x40
 80045c2:	438a      	bics	r2, r1
 80045c4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80045ca:	2380      	movs	r3, #128	; 0x80
 80045cc:	019b      	lsls	r3, r3, #6
 80045ce:	429a      	cmp	r2, r3
 80045d0:	d110      	bne.n	80045f4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4916      	ldr	r1, [pc, #88]	; (8004638 <SPI_WaitFifoStateUntilTimeout+0x140>)
 80045de:	400a      	ands	r2, r1
 80045e0:	601a      	str	r2, [r3, #0]
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	2180      	movs	r1, #128	; 0x80
 80045ee:	0189      	lsls	r1, r1, #6
 80045f0:	430a      	orrs	r2, r1
 80045f2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	225d      	movs	r2, #93	; 0x5d
 80045f8:	2101      	movs	r1, #1
 80045fa:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	225c      	movs	r2, #92	; 0x5c
 8004600:	2100      	movs	r1, #0
 8004602:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004604:	2303      	movs	r3, #3
 8004606:	e010      	b.n	800462a <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004608:	69bb      	ldr	r3, [r7, #24]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d101      	bne.n	8004612 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800460e:	2300      	movs	r3, #0
 8004610:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004612:	69bb      	ldr	r3, [r7, #24]
 8004614:	3b01      	subs	r3, #1
 8004616:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	68ba      	ldr	r2, [r7, #8]
 8004620:	4013      	ands	r3, r2
 8004622:	687a      	ldr	r2, [r7, #4]
 8004624:	429a      	cmp	r2, r3
 8004626:	d18e      	bne.n	8004546 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8004628:	2300      	movs	r3, #0
}
 800462a:	0018      	movs	r0, r3
 800462c:	46bd      	mov	sp, r7
 800462e:	b00a      	add	sp, #40	; 0x28
 8004630:	bd80      	pop	{r7, pc}
 8004632:	46c0      	nop			; (mov r8, r8)
 8004634:	20000004 	.word	0x20000004
 8004638:	ffffdfff 	.word	0xffffdfff

0800463c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b086      	sub	sp, #24
 8004640:	af02      	add	r7, sp, #8
 8004642:	60f8      	str	r0, [r7, #12]
 8004644:	60b9      	str	r1, [r7, #8]
 8004646:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004648:	68ba      	ldr	r2, [r7, #8]
 800464a:	23c0      	movs	r3, #192	; 0xc0
 800464c:	0159      	lsls	r1, r3, #5
 800464e:	68f8      	ldr	r0, [r7, #12]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	9300      	str	r3, [sp, #0]
 8004654:	0013      	movs	r3, r2
 8004656:	2200      	movs	r2, #0
 8004658:	f7ff ff4e 	bl	80044f8 <SPI_WaitFifoStateUntilTimeout>
 800465c:	1e03      	subs	r3, r0, #0
 800465e:	d007      	beq.n	8004670 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004664:	2220      	movs	r2, #32
 8004666:	431a      	orrs	r2, r3
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800466c:	2303      	movs	r3, #3
 800466e:	e027      	b.n	80046c0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004670:	68ba      	ldr	r2, [r7, #8]
 8004672:	68f8      	ldr	r0, [r7, #12]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	9300      	str	r3, [sp, #0]
 8004678:	0013      	movs	r3, r2
 800467a:	2200      	movs	r2, #0
 800467c:	2180      	movs	r1, #128	; 0x80
 800467e:	f7ff fead 	bl	80043dc <SPI_WaitFlagStateUntilTimeout>
 8004682:	1e03      	subs	r3, r0, #0
 8004684:	d007      	beq.n	8004696 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800468a:	2220      	movs	r2, #32
 800468c:	431a      	orrs	r2, r3
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004692:	2303      	movs	r3, #3
 8004694:	e014      	b.n	80046c0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004696:	68ba      	ldr	r2, [r7, #8]
 8004698:	23c0      	movs	r3, #192	; 0xc0
 800469a:	00d9      	lsls	r1, r3, #3
 800469c:	68f8      	ldr	r0, [r7, #12]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	9300      	str	r3, [sp, #0]
 80046a2:	0013      	movs	r3, r2
 80046a4:	2200      	movs	r2, #0
 80046a6:	f7ff ff27 	bl	80044f8 <SPI_WaitFifoStateUntilTimeout>
 80046aa:	1e03      	subs	r3, r0, #0
 80046ac:	d007      	beq.n	80046be <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046b2:	2220      	movs	r2, #32
 80046b4:	431a      	orrs	r2, r3
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80046ba:	2303      	movs	r3, #3
 80046bc:	e000      	b.n	80046c0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80046be:	2300      	movs	r3, #0
}
 80046c0:	0018      	movs	r0, r3
 80046c2:	46bd      	mov	sp, r7
 80046c4:	b004      	add	sp, #16
 80046c6:	bd80      	pop	{r7, pc}

080046c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b082      	sub	sp, #8
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d101      	bne.n	80046da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	e046      	b.n	8004768 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2284      	movs	r2, #132	; 0x84
 80046de:	589b      	ldr	r3, [r3, r2]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d107      	bne.n	80046f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2280      	movs	r2, #128	; 0x80
 80046e8:	2100      	movs	r1, #0
 80046ea:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	0018      	movs	r0, r3
 80046f0:	f7fd fa48 	bl	8001b84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2284      	movs	r2, #132	; 0x84
 80046f8:	2124      	movs	r1, #36	; 0x24
 80046fa:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	681a      	ldr	r2, [r3, #0]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	2101      	movs	r1, #1
 8004708:	438a      	bics	r2, r1
 800470a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	0018      	movs	r0, r3
 8004710:	f000 fc7c 	bl	800500c <UART_SetConfig>
 8004714:	0003      	movs	r3, r0
 8004716:	2b01      	cmp	r3, #1
 8004718:	d101      	bne.n	800471e <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	e024      	b.n	8004768 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004722:	2b00      	cmp	r3, #0
 8004724:	d003      	beq.n	800472e <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	0018      	movs	r0, r3
 800472a:	f000 ff4b 	bl	80055c4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	685a      	ldr	r2, [r3, #4]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	490d      	ldr	r1, [pc, #52]	; (8004770 <HAL_UART_Init+0xa8>)
 800473a:	400a      	ands	r2, r1
 800473c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	689a      	ldr	r2, [r3, #8]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	212a      	movs	r1, #42	; 0x2a
 800474a:	438a      	bics	r2, r1
 800474c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	2101      	movs	r1, #1
 800475a:	430a      	orrs	r2, r1
 800475c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	0018      	movs	r0, r3
 8004762:	f000 ffe3 	bl	800572c <UART_CheckIdleState>
 8004766:	0003      	movs	r3, r0
}
 8004768:	0018      	movs	r0, r3
 800476a:	46bd      	mov	sp, r7
 800476c:	b002      	add	sp, #8
 800476e:	bd80      	pop	{r7, pc}
 8004770:	ffffb7ff 	.word	0xffffb7ff

08004774 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b08a      	sub	sp, #40	; 0x28
 8004778:	af02      	add	r7, sp, #8
 800477a:	60f8      	str	r0, [r7, #12]
 800477c:	60b9      	str	r1, [r7, #8]
 800477e:	603b      	str	r3, [r7, #0]
 8004780:	1dbb      	adds	r3, r7, #6
 8004782:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2284      	movs	r2, #132	; 0x84
 8004788:	589b      	ldr	r3, [r3, r2]
 800478a:	2b20      	cmp	r3, #32
 800478c:	d000      	beq.n	8004790 <HAL_UART_Transmit+0x1c>
 800478e:	e097      	b.n	80048c0 <HAL_UART_Transmit+0x14c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d003      	beq.n	800479e <HAL_UART_Transmit+0x2a>
 8004796:	1dbb      	adds	r3, r7, #6
 8004798:	881b      	ldrh	r3, [r3, #0]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d101      	bne.n	80047a2 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	e08f      	b.n	80048c2 <HAL_UART_Transmit+0x14e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	689a      	ldr	r2, [r3, #8]
 80047a6:	2380      	movs	r3, #128	; 0x80
 80047a8:	015b      	lsls	r3, r3, #5
 80047aa:	429a      	cmp	r2, r3
 80047ac:	d109      	bne.n	80047c2 <HAL_UART_Transmit+0x4e>
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	691b      	ldr	r3, [r3, #16]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d105      	bne.n	80047c2 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	2201      	movs	r2, #1
 80047ba:	4013      	ands	r3, r2
 80047bc:	d001      	beq.n	80047c2 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	e07f      	b.n	80048c2 <HAL_UART_Transmit+0x14e>
      }
    }

    __HAL_LOCK(huart);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2280      	movs	r2, #128	; 0x80
 80047c6:	5c9b      	ldrb	r3, [r3, r2]
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d101      	bne.n	80047d0 <HAL_UART_Transmit+0x5c>
 80047cc:	2302      	movs	r3, #2
 80047ce:	e078      	b.n	80048c2 <HAL_UART_Transmit+0x14e>
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2280      	movs	r2, #128	; 0x80
 80047d4:	2101      	movs	r1, #1
 80047d6:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	228c      	movs	r2, #140	; 0x8c
 80047dc:	2100      	movs	r1, #0
 80047de:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2284      	movs	r2, #132	; 0x84
 80047e4:	2121      	movs	r1, #33	; 0x21
 80047e6:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80047e8:	f7fd fb24 	bl	8001e34 <HAL_GetTick>
 80047ec:	0003      	movs	r3, r0
 80047ee:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	1dba      	adds	r2, r7, #6
 80047f4:	2154      	movs	r1, #84	; 0x54
 80047f6:	8812      	ldrh	r2, [r2, #0]
 80047f8:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	1dba      	adds	r2, r7, #6
 80047fe:	2156      	movs	r1, #86	; 0x56
 8004800:	8812      	ldrh	r2, [r2, #0]
 8004802:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	689a      	ldr	r2, [r3, #8]
 8004808:	2380      	movs	r3, #128	; 0x80
 800480a:	015b      	lsls	r3, r3, #5
 800480c:	429a      	cmp	r2, r3
 800480e:	d108      	bne.n	8004822 <HAL_UART_Transmit+0xae>
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	691b      	ldr	r3, [r3, #16]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d104      	bne.n	8004822 <HAL_UART_Transmit+0xae>
    {
      pdata8bits  = NULL;
 8004818:	2300      	movs	r3, #0
 800481a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	61bb      	str	r3, [r7, #24]
 8004820:	e003      	b.n	800482a <HAL_UART_Transmit+0xb6>
    }
    else
    {
      pdata8bits  = pData;
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004826:	2300      	movs	r3, #0
 8004828:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2280      	movs	r2, #128	; 0x80
 800482e:	2100      	movs	r1, #0
 8004830:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8004832:	e02c      	b.n	800488e <HAL_UART_Transmit+0x11a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004834:	697a      	ldr	r2, [r7, #20]
 8004836:	68f8      	ldr	r0, [r7, #12]
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	9300      	str	r3, [sp, #0]
 800483c:	0013      	movs	r3, r2
 800483e:	2200      	movs	r2, #0
 8004840:	2180      	movs	r1, #128	; 0x80
 8004842:	f000 ffbd 	bl	80057c0 <UART_WaitOnFlagUntilTimeout>
 8004846:	1e03      	subs	r3, r0, #0
 8004848:	d001      	beq.n	800484e <HAL_UART_Transmit+0xda>
      {
        return HAL_TIMEOUT;
 800484a:	2303      	movs	r3, #3
 800484c:	e039      	b.n	80048c2 <HAL_UART_Transmit+0x14e>
      }
      if (pdata8bits == NULL)
 800484e:	69fb      	ldr	r3, [r7, #28]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d10b      	bne.n	800486c <HAL_UART_Transmit+0xf8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004854:	69bb      	ldr	r3, [r7, #24]
 8004856:	881b      	ldrh	r3, [r3, #0]
 8004858:	001a      	movs	r2, r3
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	05d2      	lsls	r2, r2, #23
 8004860:	0dd2      	lsrs	r2, r2, #23
 8004862:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004864:	69bb      	ldr	r3, [r7, #24]
 8004866:	3302      	adds	r3, #2
 8004868:	61bb      	str	r3, [r7, #24]
 800486a:	e007      	b.n	800487c <HAL_UART_Transmit+0x108>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800486c:	69fb      	ldr	r3, [r7, #28]
 800486e:	781a      	ldrb	r2, [r3, #0]
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004876:	69fb      	ldr	r3, [r7, #28]
 8004878:	3301      	adds	r3, #1
 800487a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2256      	movs	r2, #86	; 0x56
 8004880:	5a9b      	ldrh	r3, [r3, r2]
 8004882:	b29b      	uxth	r3, r3
 8004884:	3b01      	subs	r3, #1
 8004886:	b299      	uxth	r1, r3
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2256      	movs	r2, #86	; 0x56
 800488c:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2256      	movs	r2, #86	; 0x56
 8004892:	5a9b      	ldrh	r3, [r3, r2]
 8004894:	b29b      	uxth	r3, r3
 8004896:	2b00      	cmp	r3, #0
 8004898:	d1cc      	bne.n	8004834 <HAL_UART_Transmit+0xc0>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800489a:	697a      	ldr	r2, [r7, #20]
 800489c:	68f8      	ldr	r0, [r7, #12]
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	9300      	str	r3, [sp, #0]
 80048a2:	0013      	movs	r3, r2
 80048a4:	2200      	movs	r2, #0
 80048a6:	2140      	movs	r1, #64	; 0x40
 80048a8:	f000 ff8a 	bl	80057c0 <UART_WaitOnFlagUntilTimeout>
 80048ac:	1e03      	subs	r3, r0, #0
 80048ae:	d001      	beq.n	80048b4 <HAL_UART_Transmit+0x140>
    {
      return HAL_TIMEOUT;
 80048b0:	2303      	movs	r3, #3
 80048b2:	e006      	b.n	80048c2 <HAL_UART_Transmit+0x14e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2284      	movs	r2, #132	; 0x84
 80048b8:	2120      	movs	r1, #32
 80048ba:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80048bc:	2300      	movs	r3, #0
 80048be:	e000      	b.n	80048c2 <HAL_UART_Transmit+0x14e>
  }
  else
  {
    return HAL_BUSY;
 80048c0:	2302      	movs	r3, #2
  }
}
 80048c2:	0018      	movs	r0, r3
 80048c4:	46bd      	mov	sp, r7
 80048c6:	b008      	add	sp, #32
 80048c8:	bd80      	pop	{r7, pc}
	...

080048cc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b088      	sub	sp, #32
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	60f8      	str	r0, [r7, #12]
 80048d4:	60b9      	str	r1, [r7, #8]
 80048d6:	1dbb      	adds	r3, r7, #6
 80048d8:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2288      	movs	r2, #136	; 0x88
 80048de:	589b      	ldr	r3, [r3, r2]
 80048e0:	2b20      	cmp	r3, #32
 80048e2:	d155      	bne.n	8004990 <HAL_UART_Receive_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d003      	beq.n	80048f2 <HAL_UART_Receive_IT+0x26>
 80048ea:	1dbb      	adds	r3, r7, #6
 80048ec:	881b      	ldrh	r3, [r3, #0]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d101      	bne.n	80048f6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	e04d      	b.n	8004992 <HAL_UART_Receive_IT+0xc6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	689a      	ldr	r2, [r3, #8]
 80048fa:	2380      	movs	r3, #128	; 0x80
 80048fc:	015b      	lsls	r3, r3, #5
 80048fe:	429a      	cmp	r2, r3
 8004900:	d109      	bne.n	8004916 <HAL_UART_Receive_IT+0x4a>
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	691b      	ldr	r3, [r3, #16]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d105      	bne.n	8004916 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	2201      	movs	r2, #1
 800490e:	4013      	ands	r3, r2
 8004910:	d001      	beq.n	8004916 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	e03d      	b.n	8004992 <HAL_UART_Receive_IT+0xc6>
      }
    }

    __HAL_LOCK(huart);
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2280      	movs	r2, #128	; 0x80
 800491a:	5c9b      	ldrb	r3, [r3, r2]
 800491c:	2b01      	cmp	r3, #1
 800491e:	d101      	bne.n	8004924 <HAL_UART_Receive_IT+0x58>
 8004920:	2302      	movs	r3, #2
 8004922:	e036      	b.n	8004992 <HAL_UART_Receive_IT+0xc6>
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2280      	movs	r2, #128	; 0x80
 8004928:	2101      	movs	r1, #1
 800492a:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2200      	movs	r2, #0
 8004930:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a19      	ldr	r2, [pc, #100]	; (800499c <HAL_UART_Receive_IT+0xd0>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d020      	beq.n	800497e <HAL_UART_Receive_IT+0xb2>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	685a      	ldr	r2, [r3, #4]
 8004942:	2380      	movs	r3, #128	; 0x80
 8004944:	041b      	lsls	r3, r3, #16
 8004946:	4013      	ands	r3, r2
 8004948:	d019      	beq.n	800497e <HAL_UART_Receive_IT+0xb2>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800494a:	f3ef 8310 	mrs	r3, PRIMASK
 800494e:	613b      	str	r3, [r7, #16]
  return(result);
 8004950:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004952:	61fb      	str	r3, [r7, #28]
 8004954:	2301      	movs	r3, #1
 8004956:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	f383 8810 	msr	PRIMASK, r3
}
 800495e:	46c0      	nop			; (mov r8, r8)
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	2180      	movs	r1, #128	; 0x80
 800496c:	04c9      	lsls	r1, r1, #19
 800496e:	430a      	orrs	r2, r1
 8004970:	601a      	str	r2, [r3, #0]
 8004972:	69fb      	ldr	r3, [r7, #28]
 8004974:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004976:	69bb      	ldr	r3, [r7, #24]
 8004978:	f383 8810 	msr	PRIMASK, r3
}
 800497c:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800497e:	1dbb      	adds	r3, r7, #6
 8004980:	881a      	ldrh	r2, [r3, #0]
 8004982:	68b9      	ldr	r1, [r7, #8]
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	0018      	movs	r0, r3
 8004988:	f000 ffe2 	bl	8005950 <UART_Start_Receive_IT>
 800498c:	0003      	movs	r3, r0
 800498e:	e000      	b.n	8004992 <HAL_UART_Receive_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8004990:	2302      	movs	r3, #2
  }
}
 8004992:	0018      	movs	r0, r3
 8004994:	46bd      	mov	sp, r7
 8004996:	b008      	add	sp, #32
 8004998:	bd80      	pop	{r7, pc}
 800499a:	46c0      	nop			; (mov r8, r8)
 800499c:	40008000 	.word	0x40008000

080049a0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80049a0:	b5b0      	push	{r4, r5, r7, lr}
 80049a2:	b0aa      	sub	sp, #168	; 0xa8
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	69db      	ldr	r3, [r3, #28]
 80049ae:	22a4      	movs	r2, #164	; 0xa4
 80049b0:	18b9      	adds	r1, r7, r2
 80049b2:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	20a0      	movs	r0, #160	; 0xa0
 80049bc:	1839      	adds	r1, r7, r0
 80049be:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	249c      	movs	r4, #156	; 0x9c
 80049c8:	1939      	adds	r1, r7, r4
 80049ca:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80049cc:	0011      	movs	r1, r2
 80049ce:	18bb      	adds	r3, r7, r2
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4aa0      	ldr	r2, [pc, #640]	; (8004c54 <HAL_UART_IRQHandler+0x2b4>)
 80049d4:	4013      	ands	r3, r2
 80049d6:	2298      	movs	r2, #152	; 0x98
 80049d8:	18bd      	adds	r5, r7, r2
 80049da:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 80049dc:	18bb      	adds	r3, r7, r2
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d11a      	bne.n	8004a1a <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80049e4:	187b      	adds	r3, r7, r1
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	2220      	movs	r2, #32
 80049ea:	4013      	ands	r3, r2
 80049ec:	d015      	beq.n	8004a1a <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80049ee:	183b      	adds	r3, r7, r0
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	2220      	movs	r2, #32
 80049f4:	4013      	ands	r3, r2
 80049f6:	d105      	bne.n	8004a04 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80049f8:	193b      	adds	r3, r7, r4
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	2380      	movs	r3, #128	; 0x80
 80049fe:	055b      	lsls	r3, r3, #21
 8004a00:	4013      	ands	r3, r2
 8004a02:	d00a      	beq.n	8004a1a <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d100      	bne.n	8004a0e <HAL_UART_IRQHandler+0x6e>
 8004a0c:	e2cf      	b.n	8004fae <HAL_UART_IRQHandler+0x60e>
      {
        huart->RxISR(huart);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a12:	687a      	ldr	r2, [r7, #4]
 8004a14:	0010      	movs	r0, r2
 8004a16:	4798      	blx	r3
      }
      return;
 8004a18:	e2c9      	b.n	8004fae <HAL_UART_IRQHandler+0x60e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004a1a:	2398      	movs	r3, #152	; 0x98
 8004a1c:	18fb      	adds	r3, r7, r3
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d100      	bne.n	8004a26 <HAL_UART_IRQHandler+0x86>
 8004a24:	e11e      	b.n	8004c64 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004a26:	239c      	movs	r3, #156	; 0x9c
 8004a28:	18fb      	adds	r3, r7, r3
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a8a      	ldr	r2, [pc, #552]	; (8004c58 <HAL_UART_IRQHandler+0x2b8>)
 8004a2e:	4013      	ands	r3, r2
 8004a30:	d106      	bne.n	8004a40 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004a32:	23a0      	movs	r3, #160	; 0xa0
 8004a34:	18fb      	adds	r3, r7, r3
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a88      	ldr	r2, [pc, #544]	; (8004c5c <HAL_UART_IRQHandler+0x2bc>)
 8004a3a:	4013      	ands	r3, r2
 8004a3c:	d100      	bne.n	8004a40 <HAL_UART_IRQHandler+0xa0>
 8004a3e:	e111      	b.n	8004c64 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004a40:	23a4      	movs	r3, #164	; 0xa4
 8004a42:	18fb      	adds	r3, r7, r3
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	2201      	movs	r2, #1
 8004a48:	4013      	ands	r3, r2
 8004a4a:	d012      	beq.n	8004a72 <HAL_UART_IRQHandler+0xd2>
 8004a4c:	23a0      	movs	r3, #160	; 0xa0
 8004a4e:	18fb      	adds	r3, r7, r3
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	2380      	movs	r3, #128	; 0x80
 8004a54:	005b      	lsls	r3, r3, #1
 8004a56:	4013      	ands	r3, r2
 8004a58:	d00b      	beq.n	8004a72 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	228c      	movs	r2, #140	; 0x8c
 8004a66:	589b      	ldr	r3, [r3, r2]
 8004a68:	2201      	movs	r2, #1
 8004a6a:	431a      	orrs	r2, r3
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	218c      	movs	r1, #140	; 0x8c
 8004a70:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004a72:	23a4      	movs	r3, #164	; 0xa4
 8004a74:	18fb      	adds	r3, r7, r3
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	2202      	movs	r2, #2
 8004a7a:	4013      	ands	r3, r2
 8004a7c:	d011      	beq.n	8004aa2 <HAL_UART_IRQHandler+0x102>
 8004a7e:	239c      	movs	r3, #156	; 0x9c
 8004a80:	18fb      	adds	r3, r7, r3
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	2201      	movs	r2, #1
 8004a86:	4013      	ands	r3, r2
 8004a88:	d00b      	beq.n	8004aa2 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	2202      	movs	r2, #2
 8004a90:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	228c      	movs	r2, #140	; 0x8c
 8004a96:	589b      	ldr	r3, [r3, r2]
 8004a98:	2204      	movs	r2, #4
 8004a9a:	431a      	orrs	r2, r3
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	218c      	movs	r1, #140	; 0x8c
 8004aa0:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004aa2:	23a4      	movs	r3, #164	; 0xa4
 8004aa4:	18fb      	adds	r3, r7, r3
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	2204      	movs	r2, #4
 8004aaa:	4013      	ands	r3, r2
 8004aac:	d011      	beq.n	8004ad2 <HAL_UART_IRQHandler+0x132>
 8004aae:	239c      	movs	r3, #156	; 0x9c
 8004ab0:	18fb      	adds	r3, r7, r3
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	4013      	ands	r3, r2
 8004ab8:	d00b      	beq.n	8004ad2 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	2204      	movs	r2, #4
 8004ac0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	228c      	movs	r2, #140	; 0x8c
 8004ac6:	589b      	ldr	r3, [r3, r2]
 8004ac8:	2202      	movs	r2, #2
 8004aca:	431a      	orrs	r2, r3
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	218c      	movs	r1, #140	; 0x8c
 8004ad0:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004ad2:	23a4      	movs	r3, #164	; 0xa4
 8004ad4:	18fb      	adds	r3, r7, r3
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	2208      	movs	r2, #8
 8004ada:	4013      	ands	r3, r2
 8004adc:	d017      	beq.n	8004b0e <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004ade:	23a0      	movs	r3, #160	; 0xa0
 8004ae0:	18fb      	adds	r3, r7, r3
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	2220      	movs	r2, #32
 8004ae6:	4013      	ands	r3, r2
 8004ae8:	d105      	bne.n	8004af6 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004aea:	239c      	movs	r3, #156	; 0x9c
 8004aec:	18fb      	adds	r3, r7, r3
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a59      	ldr	r2, [pc, #356]	; (8004c58 <HAL_UART_IRQHandler+0x2b8>)
 8004af2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004af4:	d00b      	beq.n	8004b0e <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	2208      	movs	r2, #8
 8004afc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	228c      	movs	r2, #140	; 0x8c
 8004b02:	589b      	ldr	r3, [r3, r2]
 8004b04:	2208      	movs	r2, #8
 8004b06:	431a      	orrs	r2, r3
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	218c      	movs	r1, #140	; 0x8c
 8004b0c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004b0e:	23a4      	movs	r3, #164	; 0xa4
 8004b10:	18fb      	adds	r3, r7, r3
 8004b12:	681a      	ldr	r2, [r3, #0]
 8004b14:	2380      	movs	r3, #128	; 0x80
 8004b16:	011b      	lsls	r3, r3, #4
 8004b18:	4013      	ands	r3, r2
 8004b1a:	d013      	beq.n	8004b44 <HAL_UART_IRQHandler+0x1a4>
 8004b1c:	23a0      	movs	r3, #160	; 0xa0
 8004b1e:	18fb      	adds	r3, r7, r3
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	2380      	movs	r3, #128	; 0x80
 8004b24:	04db      	lsls	r3, r3, #19
 8004b26:	4013      	ands	r3, r2
 8004b28:	d00c      	beq.n	8004b44 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	2280      	movs	r2, #128	; 0x80
 8004b30:	0112      	lsls	r2, r2, #4
 8004b32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	228c      	movs	r2, #140	; 0x8c
 8004b38:	589b      	ldr	r3, [r3, r2]
 8004b3a:	2220      	movs	r2, #32
 8004b3c:	431a      	orrs	r2, r3
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	218c      	movs	r1, #140	; 0x8c
 8004b42:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	228c      	movs	r2, #140	; 0x8c
 8004b48:	589b      	ldr	r3, [r3, r2]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d100      	bne.n	8004b50 <HAL_UART_IRQHandler+0x1b0>
 8004b4e:	e230      	b.n	8004fb2 <HAL_UART_IRQHandler+0x612>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004b50:	23a4      	movs	r3, #164	; 0xa4
 8004b52:	18fb      	adds	r3, r7, r3
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	2220      	movs	r2, #32
 8004b58:	4013      	ands	r3, r2
 8004b5a:	d015      	beq.n	8004b88 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004b5c:	23a0      	movs	r3, #160	; 0xa0
 8004b5e:	18fb      	adds	r3, r7, r3
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	2220      	movs	r2, #32
 8004b64:	4013      	ands	r3, r2
 8004b66:	d106      	bne.n	8004b76 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004b68:	239c      	movs	r3, #156	; 0x9c
 8004b6a:	18fb      	adds	r3, r7, r3
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	2380      	movs	r3, #128	; 0x80
 8004b70:	055b      	lsls	r3, r3, #21
 8004b72:	4013      	ands	r3, r2
 8004b74:	d008      	beq.n	8004b88 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d004      	beq.n	8004b88 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b82:	687a      	ldr	r2, [r7, #4]
 8004b84:	0010      	movs	r0, r2
 8004b86:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	228c      	movs	r2, #140	; 0x8c
 8004b8c:	589b      	ldr	r3, [r3, r2]
 8004b8e:	2194      	movs	r1, #148	; 0x94
 8004b90:	187a      	adds	r2, r7, r1
 8004b92:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	2240      	movs	r2, #64	; 0x40
 8004b9c:	4013      	ands	r3, r2
 8004b9e:	2b40      	cmp	r3, #64	; 0x40
 8004ba0:	d004      	beq.n	8004bac <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004ba2:	187b      	adds	r3, r7, r1
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	2228      	movs	r2, #40	; 0x28
 8004ba8:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004baa:	d047      	beq.n	8004c3c <HAL_UART_IRQHandler+0x29c>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	0018      	movs	r0, r3
 8004bb0:	f000 fffa 	bl	8005ba8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	2240      	movs	r2, #64	; 0x40
 8004bbc:	4013      	ands	r3, r2
 8004bbe:	2b40      	cmp	r3, #64	; 0x40
 8004bc0:	d137      	bne.n	8004c32 <HAL_UART_IRQHandler+0x292>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bc2:	f3ef 8310 	mrs	r3, PRIMASK
 8004bc6:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8004bc8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004bca:	2090      	movs	r0, #144	; 0x90
 8004bcc:	183a      	adds	r2, r7, r0
 8004bce:	6013      	str	r3, [r2, #0]
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bd4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004bd6:	f383 8810 	msr	PRIMASK, r3
}
 8004bda:	46c0      	nop			; (mov r8, r8)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	689a      	ldr	r2, [r3, #8]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	2140      	movs	r1, #64	; 0x40
 8004be8:	438a      	bics	r2, r1
 8004bea:	609a      	str	r2, [r3, #8]
 8004bec:	183b      	adds	r3, r7, r0
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bf2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004bf4:	f383 8810 	msr	PRIMASK, r3
}
 8004bf8:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d012      	beq.n	8004c28 <HAL_UART_IRQHandler+0x288>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c06:	4a16      	ldr	r2, [pc, #88]	; (8004c60 <HAL_UART_IRQHandler+0x2c0>)
 8004c08:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c0e:	0018      	movs	r0, r3
 8004c10:	f7fd fa94 	bl	800213c <HAL_DMA_Abort_IT>
 8004c14:	1e03      	subs	r3, r0, #0
 8004c16:	d01a      	beq.n	8004c4e <HAL_UART_IRQHandler+0x2ae>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c22:	0018      	movs	r0, r3
 8004c24:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c26:	e012      	b.n	8004c4e <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	0018      	movs	r0, r3
 8004c2c:	f000 f9da 	bl	8004fe4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c30:	e00d      	b.n	8004c4e <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	0018      	movs	r0, r3
 8004c36:	f000 f9d5 	bl	8004fe4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c3a:	e008      	b.n	8004c4e <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	0018      	movs	r0, r3
 8004c40:	f000 f9d0 	bl	8004fe4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	228c      	movs	r2, #140	; 0x8c
 8004c48:	2100      	movs	r1, #0
 8004c4a:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8004c4c:	e1b1      	b.n	8004fb2 <HAL_UART_IRQHandler+0x612>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c4e:	46c0      	nop			; (mov r8, r8)
    return;
 8004c50:	e1af      	b.n	8004fb2 <HAL_UART_IRQHandler+0x612>
 8004c52:	46c0      	nop			; (mov r8, r8)
 8004c54:	0000080f 	.word	0x0000080f
 8004c58:	10000001 	.word	0x10000001
 8004c5c:	04000120 	.word	0x04000120
 8004c60:	08005c75 	.word	0x08005c75

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d000      	beq.n	8004c6e <HAL_UART_IRQHandler+0x2ce>
 8004c6c:	e135      	b.n	8004eda <HAL_UART_IRQHandler+0x53a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004c6e:	23a4      	movs	r3, #164	; 0xa4
 8004c70:	18fb      	adds	r3, r7, r3
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	2210      	movs	r2, #16
 8004c76:	4013      	ands	r3, r2
 8004c78:	d100      	bne.n	8004c7c <HAL_UART_IRQHandler+0x2dc>
 8004c7a:	e12e      	b.n	8004eda <HAL_UART_IRQHandler+0x53a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004c7c:	23a0      	movs	r3, #160	; 0xa0
 8004c7e:	18fb      	adds	r3, r7, r3
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	2210      	movs	r2, #16
 8004c84:	4013      	ands	r3, r2
 8004c86:	d100      	bne.n	8004c8a <HAL_UART_IRQHandler+0x2ea>
 8004c88:	e127      	b.n	8004eda <HAL_UART_IRQHandler+0x53a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	2210      	movs	r2, #16
 8004c90:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	2240      	movs	r2, #64	; 0x40
 8004c9a:	4013      	ands	r3, r2
 8004c9c:	2b40      	cmp	r3, #64	; 0x40
 8004c9e:	d000      	beq.n	8004ca2 <HAL_UART_IRQHandler+0x302>
 8004ca0:	e09e      	b.n	8004de0 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	685a      	ldr	r2, [r3, #4]
 8004caa:	217e      	movs	r1, #126	; 0x7e
 8004cac:	187b      	adds	r3, r7, r1
 8004cae:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8004cb0:	187b      	adds	r3, r7, r1
 8004cb2:	881b      	ldrh	r3, [r3, #0]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d100      	bne.n	8004cba <HAL_UART_IRQHandler+0x31a>
 8004cb8:	e17d      	b.n	8004fb6 <HAL_UART_IRQHandler+0x616>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	225c      	movs	r2, #92	; 0x5c
 8004cbe:	5a9b      	ldrh	r3, [r3, r2]
 8004cc0:	187a      	adds	r2, r7, r1
 8004cc2:	8812      	ldrh	r2, [r2, #0]
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d300      	bcc.n	8004cca <HAL_UART_IRQHandler+0x32a>
 8004cc8:	e175      	b.n	8004fb6 <HAL_UART_IRQHandler+0x616>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	187a      	adds	r2, r7, r1
 8004cce:	215e      	movs	r1, #94	; 0x5e
 8004cd0:	8812      	ldrh	r2, [r2, #0]
 8004cd2:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	2220      	movs	r2, #32
 8004cde:	4013      	ands	r3, r2
 8004ce0:	d16f      	bne.n	8004dc2 <HAL_UART_IRQHandler+0x422>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ce2:	f3ef 8310 	mrs	r3, PRIMASK
 8004ce6:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8004ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004cea:	67bb      	str	r3, [r7, #120]	; 0x78
 8004cec:	2301      	movs	r3, #1
 8004cee:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cf2:	f383 8810 	msr	PRIMASK, r3
}
 8004cf6:	46c0      	nop			; (mov r8, r8)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	49b1      	ldr	r1, [pc, #708]	; (8004fc8 <HAL_UART_IRQHandler+0x628>)
 8004d04:	400a      	ands	r2, r1
 8004d06:	601a      	str	r2, [r3, #0]
 8004d08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d0a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d0e:	f383 8810 	msr	PRIMASK, r3
}
 8004d12:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d14:	f3ef 8310 	mrs	r3, PRIMASK
 8004d18:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8004d1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d1c:	677b      	str	r3, [r7, #116]	; 0x74
 8004d1e:	2301      	movs	r3, #1
 8004d20:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d24:	f383 8810 	msr	PRIMASK, r3
}
 8004d28:	46c0      	nop			; (mov r8, r8)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	689a      	ldr	r2, [r3, #8]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	2101      	movs	r1, #1
 8004d36:	438a      	bics	r2, r1
 8004d38:	609a      	str	r2, [r3, #8]
 8004d3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d3c:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d40:	f383 8810 	msr	PRIMASK, r3
}
 8004d44:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d46:	f3ef 8310 	mrs	r3, PRIMASK
 8004d4a:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8004d4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d4e:	673b      	str	r3, [r7, #112]	; 0x70
 8004d50:	2301      	movs	r3, #1
 8004d52:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d56:	f383 8810 	msr	PRIMASK, r3
}
 8004d5a:	46c0      	nop			; (mov r8, r8)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	689a      	ldr	r2, [r3, #8]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	2140      	movs	r1, #64	; 0x40
 8004d68:	438a      	bics	r2, r1
 8004d6a:	609a      	str	r2, [r3, #8]
 8004d6c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004d6e:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d72:	f383 8810 	msr	PRIMASK, r3
}
 8004d76:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2288      	movs	r2, #136	; 0x88
 8004d7c:	2120      	movs	r1, #32
 8004d7e:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2200      	movs	r2, #0
 8004d84:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d86:	f3ef 8310 	mrs	r3, PRIMASK
 8004d8a:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8004d8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d8e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004d90:	2301      	movs	r3, #1
 8004d92:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d94:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004d96:	f383 8810 	msr	PRIMASK, r3
}
 8004d9a:	46c0      	nop			; (mov r8, r8)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	681a      	ldr	r2, [r3, #0]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	2110      	movs	r1, #16
 8004da8:	438a      	bics	r2, r1
 8004daa:	601a      	str	r2, [r3, #0]
 8004dac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dae:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004db0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004db2:	f383 8810 	msr	PRIMASK, r3
}
 8004db6:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004dbc:	0018      	movs	r0, r3
 8004dbe:	f7fd f95b 	bl	8002078 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	225c      	movs	r2, #92	; 0x5c
 8004dc6:	5a9a      	ldrh	r2, [r3, r2]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	215e      	movs	r1, #94	; 0x5e
 8004dcc:	5a5b      	ldrh	r3, [r3, r1]
 8004dce:	b29b      	uxth	r3, r3
 8004dd0:	1ad3      	subs	r3, r2, r3
 8004dd2:	b29a      	uxth	r2, r3
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	0011      	movs	r1, r2
 8004dd8:	0018      	movs	r0, r3
 8004dda:	f000 f90b 	bl	8004ff4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004dde:	e0ea      	b.n	8004fb6 <HAL_UART_IRQHandler+0x616>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	225c      	movs	r2, #92	; 0x5c
 8004de4:	5a99      	ldrh	r1, [r3, r2]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	225e      	movs	r2, #94	; 0x5e
 8004dea:	5a9b      	ldrh	r3, [r3, r2]
 8004dec:	b29a      	uxth	r2, r3
 8004dee:	208e      	movs	r0, #142	; 0x8e
 8004df0:	183b      	adds	r3, r7, r0
 8004df2:	1a8a      	subs	r2, r1, r2
 8004df4:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	225e      	movs	r2, #94	; 0x5e
 8004dfa:	5a9b      	ldrh	r3, [r3, r2]
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d100      	bne.n	8004e04 <HAL_UART_IRQHandler+0x464>
 8004e02:	e0da      	b.n	8004fba <HAL_UART_IRQHandler+0x61a>
          && (nb_rx_data > 0U))
 8004e04:	183b      	adds	r3, r7, r0
 8004e06:	881b      	ldrh	r3, [r3, #0]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d100      	bne.n	8004e0e <HAL_UART_IRQHandler+0x46e>
 8004e0c:	e0d5      	b.n	8004fba <HAL_UART_IRQHandler+0x61a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e0e:	f3ef 8310 	mrs	r3, PRIMASK
 8004e12:	60fb      	str	r3, [r7, #12]
  return(result);
 8004e14:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004e16:	2488      	movs	r4, #136	; 0x88
 8004e18:	193a      	adds	r2, r7, r4
 8004e1a:	6013      	str	r3, [r2, #0]
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	f383 8810 	msr	PRIMASK, r3
}
 8004e26:	46c0      	nop			; (mov r8, r8)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4966      	ldr	r1, [pc, #408]	; (8004fcc <HAL_UART_IRQHandler+0x62c>)
 8004e34:	400a      	ands	r2, r1
 8004e36:	601a      	str	r2, [r3, #0]
 8004e38:	193b      	adds	r3, r7, r4
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	f383 8810 	msr	PRIMASK, r3
}
 8004e44:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e46:	f3ef 8310 	mrs	r3, PRIMASK
 8004e4a:	61bb      	str	r3, [r7, #24]
  return(result);
 8004e4c:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004e4e:	2484      	movs	r4, #132	; 0x84
 8004e50:	193a      	adds	r2, r7, r4
 8004e52:	6013      	str	r3, [r2, #0]
 8004e54:	2301      	movs	r3, #1
 8004e56:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e58:	69fb      	ldr	r3, [r7, #28]
 8004e5a:	f383 8810 	msr	PRIMASK, r3
}
 8004e5e:	46c0      	nop			; (mov r8, r8)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	689a      	ldr	r2, [r3, #8]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4959      	ldr	r1, [pc, #356]	; (8004fd0 <HAL_UART_IRQHandler+0x630>)
 8004e6c:	400a      	ands	r2, r1
 8004e6e:	609a      	str	r2, [r3, #8]
 8004e70:	193b      	adds	r3, r7, r4
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e76:	6a3b      	ldr	r3, [r7, #32]
 8004e78:	f383 8810 	msr	PRIMASK, r3
}
 8004e7c:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2288      	movs	r2, #136	; 0x88
 8004e82:	2120      	movs	r1, #32
 8004e84:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	671a      	str	r2, [r3, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e92:	f3ef 8310 	mrs	r3, PRIMASK
 8004e96:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e9a:	2480      	movs	r4, #128	; 0x80
 8004e9c:	193a      	adds	r2, r7, r4
 8004e9e:	6013      	str	r3, [r2, #0]
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ea6:	f383 8810 	msr	PRIMASK, r3
}
 8004eaa:	46c0      	nop			; (mov r8, r8)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	2110      	movs	r1, #16
 8004eb8:	438a      	bics	r2, r1
 8004eba:	601a      	str	r2, [r3, #0]
 8004ebc:	193b      	adds	r3, r7, r4
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ec4:	f383 8810 	msr	PRIMASK, r3
}
 8004ec8:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004eca:	183b      	adds	r3, r7, r0
 8004ecc:	881a      	ldrh	r2, [r3, #0]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	0011      	movs	r1, r2
 8004ed2:	0018      	movs	r0, r3
 8004ed4:	f000 f88e 	bl	8004ff4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004ed8:	e06f      	b.n	8004fba <HAL_UART_IRQHandler+0x61a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004eda:	23a4      	movs	r3, #164	; 0xa4
 8004edc:	18fb      	adds	r3, r7, r3
 8004ede:	681a      	ldr	r2, [r3, #0]
 8004ee0:	2380      	movs	r3, #128	; 0x80
 8004ee2:	035b      	lsls	r3, r3, #13
 8004ee4:	4013      	ands	r3, r2
 8004ee6:	d010      	beq.n	8004f0a <HAL_UART_IRQHandler+0x56a>
 8004ee8:	239c      	movs	r3, #156	; 0x9c
 8004eea:	18fb      	adds	r3, r7, r3
 8004eec:	681a      	ldr	r2, [r3, #0]
 8004eee:	2380      	movs	r3, #128	; 0x80
 8004ef0:	03db      	lsls	r3, r3, #15
 8004ef2:	4013      	ands	r3, r2
 8004ef4:	d009      	beq.n	8004f0a <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	2280      	movs	r2, #128	; 0x80
 8004efc:	0352      	lsls	r2, r2, #13
 8004efe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	0018      	movs	r0, r3
 8004f04:	f001 fb4a 	bl	800659c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004f08:	e05a      	b.n	8004fc0 <HAL_UART_IRQHandler+0x620>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004f0a:	23a4      	movs	r3, #164	; 0xa4
 8004f0c:	18fb      	adds	r3, r7, r3
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	2280      	movs	r2, #128	; 0x80
 8004f12:	4013      	ands	r3, r2
 8004f14:	d016      	beq.n	8004f44 <HAL_UART_IRQHandler+0x5a4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004f16:	23a0      	movs	r3, #160	; 0xa0
 8004f18:	18fb      	adds	r3, r7, r3
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	2280      	movs	r2, #128	; 0x80
 8004f1e:	4013      	ands	r3, r2
 8004f20:	d106      	bne.n	8004f30 <HAL_UART_IRQHandler+0x590>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004f22:	239c      	movs	r3, #156	; 0x9c
 8004f24:	18fb      	adds	r3, r7, r3
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	2380      	movs	r3, #128	; 0x80
 8004f2a:	041b      	lsls	r3, r3, #16
 8004f2c:	4013      	ands	r3, r2
 8004f2e:	d009      	beq.n	8004f44 <HAL_UART_IRQHandler+0x5a4>
  {
    if (huart->TxISR != NULL)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d042      	beq.n	8004fbe <HAL_UART_IRQHandler+0x61e>
    {
      huart->TxISR(huart);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f3c:	687a      	ldr	r2, [r7, #4]
 8004f3e:	0010      	movs	r0, r2
 8004f40:	4798      	blx	r3
    }
    return;
 8004f42:	e03c      	b.n	8004fbe <HAL_UART_IRQHandler+0x61e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004f44:	23a4      	movs	r3, #164	; 0xa4
 8004f46:	18fb      	adds	r3, r7, r3
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	2240      	movs	r2, #64	; 0x40
 8004f4c:	4013      	ands	r3, r2
 8004f4e:	d00a      	beq.n	8004f66 <HAL_UART_IRQHandler+0x5c6>
 8004f50:	23a0      	movs	r3, #160	; 0xa0
 8004f52:	18fb      	adds	r3, r7, r3
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	2240      	movs	r2, #64	; 0x40
 8004f58:	4013      	ands	r3, r2
 8004f5a:	d004      	beq.n	8004f66 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	0018      	movs	r0, r3
 8004f60:	f000 fe9f 	bl	8005ca2 <UART_EndTransmit_IT>
    return;
 8004f64:	e02c      	b.n	8004fc0 <HAL_UART_IRQHandler+0x620>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004f66:	23a4      	movs	r3, #164	; 0xa4
 8004f68:	18fb      	adds	r3, r7, r3
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	2380      	movs	r3, #128	; 0x80
 8004f6e:	041b      	lsls	r3, r3, #16
 8004f70:	4013      	ands	r3, r2
 8004f72:	d00b      	beq.n	8004f8c <HAL_UART_IRQHandler+0x5ec>
 8004f74:	23a0      	movs	r3, #160	; 0xa0
 8004f76:	18fb      	adds	r3, r7, r3
 8004f78:	681a      	ldr	r2, [r3, #0]
 8004f7a:	2380      	movs	r3, #128	; 0x80
 8004f7c:	05db      	lsls	r3, r3, #23
 8004f7e:	4013      	ands	r3, r2
 8004f80:	d004      	beq.n	8004f8c <HAL_UART_IRQHandler+0x5ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	0018      	movs	r0, r3
 8004f86:	f001 fb19 	bl	80065bc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004f8a:	e019      	b.n	8004fc0 <HAL_UART_IRQHandler+0x620>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004f8c:	23a4      	movs	r3, #164	; 0xa4
 8004f8e:	18fb      	adds	r3, r7, r3
 8004f90:	681a      	ldr	r2, [r3, #0]
 8004f92:	2380      	movs	r3, #128	; 0x80
 8004f94:	045b      	lsls	r3, r3, #17
 8004f96:	4013      	ands	r3, r2
 8004f98:	d012      	beq.n	8004fc0 <HAL_UART_IRQHandler+0x620>
 8004f9a:	23a0      	movs	r3, #160	; 0xa0
 8004f9c:	18fb      	adds	r3, r7, r3
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	da0d      	bge.n	8004fc0 <HAL_UART_IRQHandler+0x620>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	0018      	movs	r0, r3
 8004fa8:	f001 fb00 	bl	80065ac <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004fac:	e008      	b.n	8004fc0 <HAL_UART_IRQHandler+0x620>
      return;
 8004fae:	46c0      	nop			; (mov r8, r8)
 8004fb0:	e006      	b.n	8004fc0 <HAL_UART_IRQHandler+0x620>
    return;
 8004fb2:	46c0      	nop			; (mov r8, r8)
 8004fb4:	e004      	b.n	8004fc0 <HAL_UART_IRQHandler+0x620>
      return;
 8004fb6:	46c0      	nop			; (mov r8, r8)
 8004fb8:	e002      	b.n	8004fc0 <HAL_UART_IRQHandler+0x620>
      return;
 8004fba:	46c0      	nop			; (mov r8, r8)
 8004fbc:	e000      	b.n	8004fc0 <HAL_UART_IRQHandler+0x620>
    return;
 8004fbe:	46c0      	nop			; (mov r8, r8)
  }
}
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	b02a      	add	sp, #168	; 0xa8
 8004fc4:	bdb0      	pop	{r4, r5, r7, pc}
 8004fc6:	46c0      	nop			; (mov r8, r8)
 8004fc8:	fffffeff 	.word	0xfffffeff
 8004fcc:	fffffedf 	.word	0xfffffedf
 8004fd0:	effffffe 	.word	0xeffffffe

08004fd4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b082      	sub	sp, #8
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004fdc:	46c0      	nop			; (mov r8, r8)
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	b002      	add	sp, #8
 8004fe2:	bd80      	pop	{r7, pc}

08004fe4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b082      	sub	sp, #8
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004fec:	46c0      	nop			; (mov r8, r8)
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	b002      	add	sp, #8
 8004ff2:	bd80      	pop	{r7, pc}

08004ff4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b082      	sub	sp, #8
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
 8004ffc:	000a      	movs	r2, r1
 8004ffe:	1cbb      	adds	r3, r7, #2
 8005000:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005002:	46c0      	nop			; (mov r8, r8)
 8005004:	46bd      	mov	sp, r7
 8005006:	b002      	add	sp, #8
 8005008:	bd80      	pop	{r7, pc}
	...

0800500c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800500c:	b5b0      	push	{r4, r5, r7, lr}
 800500e:	b090      	sub	sp, #64	; 0x40
 8005010:	af00      	add	r7, sp, #0
 8005012:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005014:	231a      	movs	r3, #26
 8005016:	2220      	movs	r2, #32
 8005018:	4694      	mov	ip, r2
 800501a:	44bc      	add	ip, r7
 800501c:	4463      	add	r3, ip
 800501e:	2200      	movs	r2, #0
 8005020:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005024:	689a      	ldr	r2, [r3, #8]
 8005026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005028:	691b      	ldr	r3, [r3, #16]
 800502a:	431a      	orrs	r2, r3
 800502c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800502e:	695b      	ldr	r3, [r3, #20]
 8005030:	431a      	orrs	r2, r3
 8005032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005034:	69db      	ldr	r3, [r3, #28]
 8005036:	4313      	orrs	r3, r2
 8005038:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800503a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4ab9      	ldr	r2, [pc, #740]	; (8005328 <UART_SetConfig+0x31c>)
 8005042:	4013      	ands	r3, r2
 8005044:	0019      	movs	r1, r3
 8005046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005048:	681a      	ldr	r2, [r3, #0]
 800504a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800504c:	430b      	orrs	r3, r1
 800504e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	4ab5      	ldr	r2, [pc, #724]	; (800532c <UART_SetConfig+0x320>)
 8005058:	4013      	ands	r3, r2
 800505a:	0018      	movs	r0, r3
 800505c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800505e:	68d9      	ldr	r1, [r3, #12]
 8005060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005062:	681a      	ldr	r2, [r3, #0]
 8005064:	0003      	movs	r3, r0
 8005066:	430b      	orrs	r3, r1
 8005068:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800506a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800506c:	699b      	ldr	r3, [r3, #24]
 800506e:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4aae      	ldr	r2, [pc, #696]	; (8005330 <UART_SetConfig+0x324>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d004      	beq.n	8005084 <UART_SetConfig+0x78>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800507a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800507c:	6a1b      	ldr	r3, [r3, #32]
 800507e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005080:	4313      	orrs	r3, r2
 8005082:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	4aaa      	ldr	r2, [pc, #680]	; (8005334 <UART_SetConfig+0x328>)
 800508c:	4013      	ands	r3, r2
 800508e:	0019      	movs	r1, r3
 8005090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005096:	430b      	orrs	r3, r1
 8005098:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800509a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050a0:	220f      	movs	r2, #15
 80050a2:	4393      	bics	r3, r2
 80050a4:	0018      	movs	r0, r3
 80050a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80050aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	0003      	movs	r3, r0
 80050b0:	430b      	orrs	r3, r1
 80050b2:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80050b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a9f      	ldr	r2, [pc, #636]	; (8005338 <UART_SetConfig+0x32c>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d136      	bne.n	800512c <UART_SetConfig+0x120>
 80050be:	4b9f      	ldr	r3, [pc, #636]	; (800533c <UART_SetConfig+0x330>)
 80050c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050c2:	2203      	movs	r2, #3
 80050c4:	4013      	ands	r3, r2
 80050c6:	2b03      	cmp	r3, #3
 80050c8:	d020      	beq.n	800510c <UART_SetConfig+0x100>
 80050ca:	d827      	bhi.n	800511c <UART_SetConfig+0x110>
 80050cc:	2b02      	cmp	r3, #2
 80050ce:	d00d      	beq.n	80050ec <UART_SetConfig+0xe0>
 80050d0:	d824      	bhi.n	800511c <UART_SetConfig+0x110>
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d002      	beq.n	80050dc <UART_SetConfig+0xd0>
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	d010      	beq.n	80050fc <UART_SetConfig+0xf0>
 80050da:	e01f      	b.n	800511c <UART_SetConfig+0x110>
 80050dc:	231b      	movs	r3, #27
 80050de:	2220      	movs	r2, #32
 80050e0:	4694      	mov	ip, r2
 80050e2:	44bc      	add	ip, r7
 80050e4:	4463      	add	r3, ip
 80050e6:	2200      	movs	r2, #0
 80050e8:	701a      	strb	r2, [r3, #0]
 80050ea:	e0c5      	b.n	8005278 <UART_SetConfig+0x26c>
 80050ec:	231b      	movs	r3, #27
 80050ee:	2220      	movs	r2, #32
 80050f0:	4694      	mov	ip, r2
 80050f2:	44bc      	add	ip, r7
 80050f4:	4463      	add	r3, ip
 80050f6:	2202      	movs	r2, #2
 80050f8:	701a      	strb	r2, [r3, #0]
 80050fa:	e0bd      	b.n	8005278 <UART_SetConfig+0x26c>
 80050fc:	231b      	movs	r3, #27
 80050fe:	2220      	movs	r2, #32
 8005100:	4694      	mov	ip, r2
 8005102:	44bc      	add	ip, r7
 8005104:	4463      	add	r3, ip
 8005106:	2204      	movs	r2, #4
 8005108:	701a      	strb	r2, [r3, #0]
 800510a:	e0b5      	b.n	8005278 <UART_SetConfig+0x26c>
 800510c:	231b      	movs	r3, #27
 800510e:	2220      	movs	r2, #32
 8005110:	4694      	mov	ip, r2
 8005112:	44bc      	add	ip, r7
 8005114:	4463      	add	r3, ip
 8005116:	2208      	movs	r2, #8
 8005118:	701a      	strb	r2, [r3, #0]
 800511a:	e0ad      	b.n	8005278 <UART_SetConfig+0x26c>
 800511c:	231b      	movs	r3, #27
 800511e:	2220      	movs	r2, #32
 8005120:	4694      	mov	ip, r2
 8005122:	44bc      	add	ip, r7
 8005124:	4463      	add	r3, ip
 8005126:	2210      	movs	r2, #16
 8005128:	701a      	strb	r2, [r3, #0]
 800512a:	e0a5      	b.n	8005278 <UART_SetConfig+0x26c>
 800512c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a83      	ldr	r2, [pc, #524]	; (8005340 <UART_SetConfig+0x334>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d136      	bne.n	80051a4 <UART_SetConfig+0x198>
 8005136:	4b81      	ldr	r3, [pc, #516]	; (800533c <UART_SetConfig+0x330>)
 8005138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800513a:	220c      	movs	r2, #12
 800513c:	4013      	ands	r3, r2
 800513e:	2b0c      	cmp	r3, #12
 8005140:	d020      	beq.n	8005184 <UART_SetConfig+0x178>
 8005142:	d827      	bhi.n	8005194 <UART_SetConfig+0x188>
 8005144:	2b08      	cmp	r3, #8
 8005146:	d00d      	beq.n	8005164 <UART_SetConfig+0x158>
 8005148:	d824      	bhi.n	8005194 <UART_SetConfig+0x188>
 800514a:	2b00      	cmp	r3, #0
 800514c:	d002      	beq.n	8005154 <UART_SetConfig+0x148>
 800514e:	2b04      	cmp	r3, #4
 8005150:	d010      	beq.n	8005174 <UART_SetConfig+0x168>
 8005152:	e01f      	b.n	8005194 <UART_SetConfig+0x188>
 8005154:	231b      	movs	r3, #27
 8005156:	2220      	movs	r2, #32
 8005158:	4694      	mov	ip, r2
 800515a:	44bc      	add	ip, r7
 800515c:	4463      	add	r3, ip
 800515e:	2200      	movs	r2, #0
 8005160:	701a      	strb	r2, [r3, #0]
 8005162:	e089      	b.n	8005278 <UART_SetConfig+0x26c>
 8005164:	231b      	movs	r3, #27
 8005166:	2220      	movs	r2, #32
 8005168:	4694      	mov	ip, r2
 800516a:	44bc      	add	ip, r7
 800516c:	4463      	add	r3, ip
 800516e:	2202      	movs	r2, #2
 8005170:	701a      	strb	r2, [r3, #0]
 8005172:	e081      	b.n	8005278 <UART_SetConfig+0x26c>
 8005174:	231b      	movs	r3, #27
 8005176:	2220      	movs	r2, #32
 8005178:	4694      	mov	ip, r2
 800517a:	44bc      	add	ip, r7
 800517c:	4463      	add	r3, ip
 800517e:	2204      	movs	r2, #4
 8005180:	701a      	strb	r2, [r3, #0]
 8005182:	e079      	b.n	8005278 <UART_SetConfig+0x26c>
 8005184:	231b      	movs	r3, #27
 8005186:	2220      	movs	r2, #32
 8005188:	4694      	mov	ip, r2
 800518a:	44bc      	add	ip, r7
 800518c:	4463      	add	r3, ip
 800518e:	2208      	movs	r2, #8
 8005190:	701a      	strb	r2, [r3, #0]
 8005192:	e071      	b.n	8005278 <UART_SetConfig+0x26c>
 8005194:	231b      	movs	r3, #27
 8005196:	2220      	movs	r2, #32
 8005198:	4694      	mov	ip, r2
 800519a:	44bc      	add	ip, r7
 800519c:	4463      	add	r3, ip
 800519e:	2210      	movs	r2, #16
 80051a0:	701a      	strb	r2, [r3, #0]
 80051a2:	e069      	b.n	8005278 <UART_SetConfig+0x26c>
 80051a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a66      	ldr	r2, [pc, #408]	; (8005344 <UART_SetConfig+0x338>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d107      	bne.n	80051be <UART_SetConfig+0x1b2>
 80051ae:	231b      	movs	r3, #27
 80051b0:	2220      	movs	r2, #32
 80051b2:	4694      	mov	ip, r2
 80051b4:	44bc      	add	ip, r7
 80051b6:	4463      	add	r3, ip
 80051b8:	2200      	movs	r2, #0
 80051ba:	701a      	strb	r2, [r3, #0]
 80051bc:	e05c      	b.n	8005278 <UART_SetConfig+0x26c>
 80051be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a61      	ldr	r2, [pc, #388]	; (8005348 <UART_SetConfig+0x33c>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d107      	bne.n	80051d8 <UART_SetConfig+0x1cc>
 80051c8:	231b      	movs	r3, #27
 80051ca:	2220      	movs	r2, #32
 80051cc:	4694      	mov	ip, r2
 80051ce:	44bc      	add	ip, r7
 80051d0:	4463      	add	r3, ip
 80051d2:	2200      	movs	r2, #0
 80051d4:	701a      	strb	r2, [r3, #0]
 80051d6:	e04f      	b.n	8005278 <UART_SetConfig+0x26c>
 80051d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a54      	ldr	r2, [pc, #336]	; (8005330 <UART_SetConfig+0x324>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d143      	bne.n	800526a <UART_SetConfig+0x25e>
 80051e2:	4b56      	ldr	r3, [pc, #344]	; (800533c <UART_SetConfig+0x330>)
 80051e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80051e6:	23c0      	movs	r3, #192	; 0xc0
 80051e8:	011b      	lsls	r3, r3, #4
 80051ea:	4013      	ands	r3, r2
 80051ec:	22c0      	movs	r2, #192	; 0xc0
 80051ee:	0112      	lsls	r2, r2, #4
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d02a      	beq.n	800524a <UART_SetConfig+0x23e>
 80051f4:	22c0      	movs	r2, #192	; 0xc0
 80051f6:	0112      	lsls	r2, r2, #4
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d82e      	bhi.n	800525a <UART_SetConfig+0x24e>
 80051fc:	2280      	movs	r2, #128	; 0x80
 80051fe:	0112      	lsls	r2, r2, #4
 8005200:	4293      	cmp	r3, r2
 8005202:	d012      	beq.n	800522a <UART_SetConfig+0x21e>
 8005204:	2280      	movs	r2, #128	; 0x80
 8005206:	0112      	lsls	r2, r2, #4
 8005208:	4293      	cmp	r3, r2
 800520a:	d826      	bhi.n	800525a <UART_SetConfig+0x24e>
 800520c:	2b00      	cmp	r3, #0
 800520e:	d004      	beq.n	800521a <UART_SetConfig+0x20e>
 8005210:	2280      	movs	r2, #128	; 0x80
 8005212:	00d2      	lsls	r2, r2, #3
 8005214:	4293      	cmp	r3, r2
 8005216:	d010      	beq.n	800523a <UART_SetConfig+0x22e>
 8005218:	e01f      	b.n	800525a <UART_SetConfig+0x24e>
 800521a:	231b      	movs	r3, #27
 800521c:	2220      	movs	r2, #32
 800521e:	4694      	mov	ip, r2
 8005220:	44bc      	add	ip, r7
 8005222:	4463      	add	r3, ip
 8005224:	2200      	movs	r2, #0
 8005226:	701a      	strb	r2, [r3, #0]
 8005228:	e026      	b.n	8005278 <UART_SetConfig+0x26c>
 800522a:	231b      	movs	r3, #27
 800522c:	2220      	movs	r2, #32
 800522e:	4694      	mov	ip, r2
 8005230:	44bc      	add	ip, r7
 8005232:	4463      	add	r3, ip
 8005234:	2202      	movs	r2, #2
 8005236:	701a      	strb	r2, [r3, #0]
 8005238:	e01e      	b.n	8005278 <UART_SetConfig+0x26c>
 800523a:	231b      	movs	r3, #27
 800523c:	2220      	movs	r2, #32
 800523e:	4694      	mov	ip, r2
 8005240:	44bc      	add	ip, r7
 8005242:	4463      	add	r3, ip
 8005244:	2204      	movs	r2, #4
 8005246:	701a      	strb	r2, [r3, #0]
 8005248:	e016      	b.n	8005278 <UART_SetConfig+0x26c>
 800524a:	231b      	movs	r3, #27
 800524c:	2220      	movs	r2, #32
 800524e:	4694      	mov	ip, r2
 8005250:	44bc      	add	ip, r7
 8005252:	4463      	add	r3, ip
 8005254:	2208      	movs	r2, #8
 8005256:	701a      	strb	r2, [r3, #0]
 8005258:	e00e      	b.n	8005278 <UART_SetConfig+0x26c>
 800525a:	231b      	movs	r3, #27
 800525c:	2220      	movs	r2, #32
 800525e:	4694      	mov	ip, r2
 8005260:	44bc      	add	ip, r7
 8005262:	4463      	add	r3, ip
 8005264:	2210      	movs	r2, #16
 8005266:	701a      	strb	r2, [r3, #0]
 8005268:	e006      	b.n	8005278 <UART_SetConfig+0x26c>
 800526a:	231b      	movs	r3, #27
 800526c:	2220      	movs	r2, #32
 800526e:	4694      	mov	ip, r2
 8005270:	44bc      	add	ip, r7
 8005272:	4463      	add	r3, ip
 8005274:	2210      	movs	r2, #16
 8005276:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a2c      	ldr	r2, [pc, #176]	; (8005330 <UART_SetConfig+0x324>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d000      	beq.n	8005284 <UART_SetConfig+0x278>
 8005282:	e0ad      	b.n	80053e0 <UART_SetConfig+0x3d4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005284:	231b      	movs	r3, #27
 8005286:	2220      	movs	r2, #32
 8005288:	4694      	mov	ip, r2
 800528a:	44bc      	add	ip, r7
 800528c:	4463      	add	r3, ip
 800528e:	781b      	ldrb	r3, [r3, #0]
 8005290:	2b08      	cmp	r3, #8
 8005292:	d015      	beq.n	80052c0 <UART_SetConfig+0x2b4>
 8005294:	dc18      	bgt.n	80052c8 <UART_SetConfig+0x2bc>
 8005296:	2b04      	cmp	r3, #4
 8005298:	d00d      	beq.n	80052b6 <UART_SetConfig+0x2aa>
 800529a:	dc15      	bgt.n	80052c8 <UART_SetConfig+0x2bc>
 800529c:	2b00      	cmp	r3, #0
 800529e:	d002      	beq.n	80052a6 <UART_SetConfig+0x29a>
 80052a0:	2b02      	cmp	r3, #2
 80052a2:	d005      	beq.n	80052b0 <UART_SetConfig+0x2a4>
 80052a4:	e010      	b.n	80052c8 <UART_SetConfig+0x2bc>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052a6:	f7fe fc41 	bl	8003b2c <HAL_RCC_GetPCLK1Freq>
 80052aa:	0003      	movs	r3, r0
 80052ac:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80052ae:	e015      	b.n	80052dc <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052b0:	4b26      	ldr	r3, [pc, #152]	; (800534c <UART_SetConfig+0x340>)
 80052b2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80052b4:	e012      	b.n	80052dc <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052b6:	f7fe fbad 	bl	8003a14 <HAL_RCC_GetSysClockFreq>
 80052ba:	0003      	movs	r3, r0
 80052bc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80052be:	e00d      	b.n	80052dc <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052c0:	2380      	movs	r3, #128	; 0x80
 80052c2:	021b      	lsls	r3, r3, #8
 80052c4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80052c6:	e009      	b.n	80052dc <UART_SetConfig+0x2d0>
      default:
        pclk = 0U;
 80052c8:	2300      	movs	r3, #0
 80052ca:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80052cc:	231a      	movs	r3, #26
 80052ce:	2220      	movs	r2, #32
 80052d0:	4694      	mov	ip, r2
 80052d2:	44bc      	add	ip, r7
 80052d4:	4463      	add	r3, ip
 80052d6:	2201      	movs	r2, #1
 80052d8:	701a      	strb	r2, [r3, #0]
        break;
 80052da:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80052dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d100      	bne.n	80052e4 <UART_SetConfig+0x2d8>
 80052e2:	e153      	b.n	800558c <UART_SetConfig+0x580>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80052e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80052e8:	4b19      	ldr	r3, [pc, #100]	; (8005350 <UART_SetConfig+0x344>)
 80052ea:	0052      	lsls	r2, r2, #1
 80052ec:	5ad3      	ldrh	r3, [r2, r3]
 80052ee:	0019      	movs	r1, r3
 80052f0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80052f2:	f7fa ff1b 	bl	800012c <__udivsi3>
 80052f6:	0003      	movs	r3, r0
 80052f8:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80052fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fc:	685a      	ldr	r2, [r3, #4]
 80052fe:	0013      	movs	r3, r2
 8005300:	005b      	lsls	r3, r3, #1
 8005302:	189b      	adds	r3, r3, r2
 8005304:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005306:	429a      	cmp	r2, r3
 8005308:	d305      	bcc.n	8005316 <UART_SetConfig+0x30a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800530a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005310:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005312:	429a      	cmp	r2, r3
 8005314:	d91e      	bls.n	8005354 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8005316:	231a      	movs	r3, #26
 8005318:	2220      	movs	r2, #32
 800531a:	4694      	mov	ip, r2
 800531c:	44bc      	add	ip, r7
 800531e:	4463      	add	r3, ip
 8005320:	2201      	movs	r2, #1
 8005322:	701a      	strb	r2, [r3, #0]
 8005324:	e132      	b.n	800558c <UART_SetConfig+0x580>
 8005326:	46c0      	nop			; (mov r8, r8)
 8005328:	cfff69f3 	.word	0xcfff69f3
 800532c:	ffffcfff 	.word	0xffffcfff
 8005330:	40008000 	.word	0x40008000
 8005334:	11fff4ff 	.word	0x11fff4ff
 8005338:	40013800 	.word	0x40013800
 800533c:	40021000 	.word	0x40021000
 8005340:	40004400 	.word	0x40004400
 8005344:	40004800 	.word	0x40004800
 8005348:	40004c00 	.word	0x40004c00
 800534c:	00f42400 	.word	0x00f42400
 8005350:	08007220 	.word	0x08007220
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005354:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005356:	61bb      	str	r3, [r7, #24]
 8005358:	2300      	movs	r3, #0
 800535a:	61fb      	str	r3, [r7, #28]
 800535c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800535e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005360:	4b96      	ldr	r3, [pc, #600]	; (80055bc <UART_SetConfig+0x5b0>)
 8005362:	0052      	lsls	r2, r2, #1
 8005364:	5ad3      	ldrh	r3, [r2, r3]
 8005366:	613b      	str	r3, [r7, #16]
 8005368:	2300      	movs	r3, #0
 800536a:	617b      	str	r3, [r7, #20]
 800536c:	693a      	ldr	r2, [r7, #16]
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	69b8      	ldr	r0, [r7, #24]
 8005372:	69f9      	ldr	r1, [r7, #28]
 8005374:	f7fb f850 	bl	8000418 <__aeabi_uldivmod>
 8005378:	0002      	movs	r2, r0
 800537a:	000b      	movs	r3, r1
 800537c:	0e11      	lsrs	r1, r2, #24
 800537e:	021d      	lsls	r5, r3, #8
 8005380:	430d      	orrs	r5, r1
 8005382:	0214      	lsls	r4, r2, #8
 8005384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	085b      	lsrs	r3, r3, #1
 800538a:	60bb      	str	r3, [r7, #8]
 800538c:	2300      	movs	r3, #0
 800538e:	60fb      	str	r3, [r7, #12]
 8005390:	68b8      	ldr	r0, [r7, #8]
 8005392:	68f9      	ldr	r1, [r7, #12]
 8005394:	1900      	adds	r0, r0, r4
 8005396:	4169      	adcs	r1, r5
 8005398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	603b      	str	r3, [r7, #0]
 800539e:	2300      	movs	r3, #0
 80053a0:	607b      	str	r3, [r7, #4]
 80053a2:	683a      	ldr	r2, [r7, #0]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	f7fb f837 	bl	8000418 <__aeabi_uldivmod>
 80053aa:	0002      	movs	r2, r0
 80053ac:	000b      	movs	r3, r1
 80053ae:	0013      	movs	r3, r2
 80053b0:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80053b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053b4:	23c0      	movs	r3, #192	; 0xc0
 80053b6:	009b      	lsls	r3, r3, #2
 80053b8:	429a      	cmp	r2, r3
 80053ba:	d309      	bcc.n	80053d0 <UART_SetConfig+0x3c4>
 80053bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053be:	2380      	movs	r3, #128	; 0x80
 80053c0:	035b      	lsls	r3, r3, #13
 80053c2:	429a      	cmp	r2, r3
 80053c4:	d204      	bcs.n	80053d0 <UART_SetConfig+0x3c4>
        {
          huart->Instance->BRR = usartdiv;
 80053c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053cc:	60da      	str	r2, [r3, #12]
 80053ce:	e0dd      	b.n	800558c <UART_SetConfig+0x580>
        }
        else
        {
          ret = HAL_ERROR;
 80053d0:	231a      	movs	r3, #26
 80053d2:	2220      	movs	r2, #32
 80053d4:	4694      	mov	ip, r2
 80053d6:	44bc      	add	ip, r7
 80053d8:	4463      	add	r3, ip
 80053da:	2201      	movs	r2, #1
 80053dc:	701a      	strb	r2, [r3, #0]
 80053de:	e0d5      	b.n	800558c <UART_SetConfig+0x580>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e2:	69da      	ldr	r2, [r3, #28]
 80053e4:	2380      	movs	r3, #128	; 0x80
 80053e6:	021b      	lsls	r3, r3, #8
 80053e8:	429a      	cmp	r2, r3
 80053ea:	d000      	beq.n	80053ee <UART_SetConfig+0x3e2>
 80053ec:	e073      	b.n	80054d6 <UART_SetConfig+0x4ca>
  {
    switch (clocksource)
 80053ee:	231b      	movs	r3, #27
 80053f0:	2220      	movs	r2, #32
 80053f2:	4694      	mov	ip, r2
 80053f4:	44bc      	add	ip, r7
 80053f6:	4463      	add	r3, ip
 80053f8:	781b      	ldrb	r3, [r3, #0]
 80053fa:	2b08      	cmp	r3, #8
 80053fc:	d015      	beq.n	800542a <UART_SetConfig+0x41e>
 80053fe:	dc18      	bgt.n	8005432 <UART_SetConfig+0x426>
 8005400:	2b04      	cmp	r3, #4
 8005402:	d00d      	beq.n	8005420 <UART_SetConfig+0x414>
 8005404:	dc15      	bgt.n	8005432 <UART_SetConfig+0x426>
 8005406:	2b00      	cmp	r3, #0
 8005408:	d002      	beq.n	8005410 <UART_SetConfig+0x404>
 800540a:	2b02      	cmp	r3, #2
 800540c:	d005      	beq.n	800541a <UART_SetConfig+0x40e>
 800540e:	e010      	b.n	8005432 <UART_SetConfig+0x426>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005410:	f7fe fb8c 	bl	8003b2c <HAL_RCC_GetPCLK1Freq>
 8005414:	0003      	movs	r3, r0
 8005416:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005418:	e015      	b.n	8005446 <UART_SetConfig+0x43a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800541a:	4b69      	ldr	r3, [pc, #420]	; (80055c0 <UART_SetConfig+0x5b4>)
 800541c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800541e:	e012      	b.n	8005446 <UART_SetConfig+0x43a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005420:	f7fe faf8 	bl	8003a14 <HAL_RCC_GetSysClockFreq>
 8005424:	0003      	movs	r3, r0
 8005426:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005428:	e00d      	b.n	8005446 <UART_SetConfig+0x43a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800542a:	2380      	movs	r3, #128	; 0x80
 800542c:	021b      	lsls	r3, r3, #8
 800542e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005430:	e009      	b.n	8005446 <UART_SetConfig+0x43a>
      default:
        pclk = 0U;
 8005432:	2300      	movs	r3, #0
 8005434:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8005436:	231a      	movs	r3, #26
 8005438:	2220      	movs	r2, #32
 800543a:	4694      	mov	ip, r2
 800543c:	44bc      	add	ip, r7
 800543e:	4463      	add	r3, ip
 8005440:	2201      	movs	r2, #1
 8005442:	701a      	strb	r2, [r3, #0]
        break;
 8005444:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005446:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005448:	2b00      	cmp	r3, #0
 800544a:	d100      	bne.n	800544e <UART_SetConfig+0x442>
 800544c:	e09e      	b.n	800558c <UART_SetConfig+0x580>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800544e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005450:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005452:	4b5a      	ldr	r3, [pc, #360]	; (80055bc <UART_SetConfig+0x5b0>)
 8005454:	0052      	lsls	r2, r2, #1
 8005456:	5ad3      	ldrh	r3, [r2, r3]
 8005458:	0019      	movs	r1, r3
 800545a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800545c:	f7fa fe66 	bl	800012c <__udivsi3>
 8005460:	0003      	movs	r3, r0
 8005462:	005a      	lsls	r2, r3, #1
 8005464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	085b      	lsrs	r3, r3, #1
 800546a:	18d2      	adds	r2, r2, r3
 800546c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	0019      	movs	r1, r3
 8005472:	0010      	movs	r0, r2
 8005474:	f7fa fe5a 	bl	800012c <__udivsi3>
 8005478:	0003      	movs	r3, r0
 800547a:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800547c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800547e:	2b0f      	cmp	r3, #15
 8005480:	d921      	bls.n	80054c6 <UART_SetConfig+0x4ba>
 8005482:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005484:	2380      	movs	r3, #128	; 0x80
 8005486:	025b      	lsls	r3, r3, #9
 8005488:	429a      	cmp	r2, r3
 800548a:	d21c      	bcs.n	80054c6 <UART_SetConfig+0x4ba>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800548c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800548e:	b29a      	uxth	r2, r3
 8005490:	200e      	movs	r0, #14
 8005492:	2420      	movs	r4, #32
 8005494:	193b      	adds	r3, r7, r4
 8005496:	181b      	adds	r3, r3, r0
 8005498:	210f      	movs	r1, #15
 800549a:	438a      	bics	r2, r1
 800549c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800549e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054a0:	085b      	lsrs	r3, r3, #1
 80054a2:	b29b      	uxth	r3, r3
 80054a4:	2207      	movs	r2, #7
 80054a6:	4013      	ands	r3, r2
 80054a8:	b299      	uxth	r1, r3
 80054aa:	193b      	adds	r3, r7, r4
 80054ac:	181b      	adds	r3, r3, r0
 80054ae:	193a      	adds	r2, r7, r4
 80054b0:	1812      	adds	r2, r2, r0
 80054b2:	8812      	ldrh	r2, [r2, #0]
 80054b4:	430a      	orrs	r2, r1
 80054b6:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80054b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	193a      	adds	r2, r7, r4
 80054be:	1812      	adds	r2, r2, r0
 80054c0:	8812      	ldrh	r2, [r2, #0]
 80054c2:	60da      	str	r2, [r3, #12]
 80054c4:	e062      	b.n	800558c <UART_SetConfig+0x580>
      }
      else
      {
        ret = HAL_ERROR;
 80054c6:	231a      	movs	r3, #26
 80054c8:	2220      	movs	r2, #32
 80054ca:	4694      	mov	ip, r2
 80054cc:	44bc      	add	ip, r7
 80054ce:	4463      	add	r3, ip
 80054d0:	2201      	movs	r2, #1
 80054d2:	701a      	strb	r2, [r3, #0]
 80054d4:	e05a      	b.n	800558c <UART_SetConfig+0x580>
      }
    }
  }
  else
  {
    switch (clocksource)
 80054d6:	231b      	movs	r3, #27
 80054d8:	2220      	movs	r2, #32
 80054da:	4694      	mov	ip, r2
 80054dc:	44bc      	add	ip, r7
 80054de:	4463      	add	r3, ip
 80054e0:	781b      	ldrb	r3, [r3, #0]
 80054e2:	2b08      	cmp	r3, #8
 80054e4:	d015      	beq.n	8005512 <UART_SetConfig+0x506>
 80054e6:	dc18      	bgt.n	800551a <UART_SetConfig+0x50e>
 80054e8:	2b04      	cmp	r3, #4
 80054ea:	d00d      	beq.n	8005508 <UART_SetConfig+0x4fc>
 80054ec:	dc15      	bgt.n	800551a <UART_SetConfig+0x50e>
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d002      	beq.n	80054f8 <UART_SetConfig+0x4ec>
 80054f2:	2b02      	cmp	r3, #2
 80054f4:	d005      	beq.n	8005502 <UART_SetConfig+0x4f6>
 80054f6:	e010      	b.n	800551a <UART_SetConfig+0x50e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054f8:	f7fe fb18 	bl	8003b2c <HAL_RCC_GetPCLK1Freq>
 80054fc:	0003      	movs	r3, r0
 80054fe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005500:	e015      	b.n	800552e <UART_SetConfig+0x522>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005502:	4b2f      	ldr	r3, [pc, #188]	; (80055c0 <UART_SetConfig+0x5b4>)
 8005504:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005506:	e012      	b.n	800552e <UART_SetConfig+0x522>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005508:	f7fe fa84 	bl	8003a14 <HAL_RCC_GetSysClockFreq>
 800550c:	0003      	movs	r3, r0
 800550e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005510:	e00d      	b.n	800552e <UART_SetConfig+0x522>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005512:	2380      	movs	r3, #128	; 0x80
 8005514:	021b      	lsls	r3, r3, #8
 8005516:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005518:	e009      	b.n	800552e <UART_SetConfig+0x522>
      default:
        pclk = 0U;
 800551a:	2300      	movs	r3, #0
 800551c:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800551e:	231a      	movs	r3, #26
 8005520:	2220      	movs	r2, #32
 8005522:	4694      	mov	ip, r2
 8005524:	44bc      	add	ip, r7
 8005526:	4463      	add	r3, ip
 8005528:	2201      	movs	r2, #1
 800552a:	701a      	strb	r2, [r3, #0]
        break;
 800552c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800552e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005530:	2b00      	cmp	r3, #0
 8005532:	d02b      	beq.n	800558c <UART_SetConfig+0x580>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005536:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005538:	4b20      	ldr	r3, [pc, #128]	; (80055bc <UART_SetConfig+0x5b0>)
 800553a:	0052      	lsls	r2, r2, #1
 800553c:	5ad3      	ldrh	r3, [r2, r3]
 800553e:	0019      	movs	r1, r3
 8005540:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005542:	f7fa fdf3 	bl	800012c <__udivsi3>
 8005546:	0003      	movs	r3, r0
 8005548:	001a      	movs	r2, r3
 800554a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	085b      	lsrs	r3, r3, #1
 8005550:	18d2      	adds	r2, r2, r3
 8005552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	0019      	movs	r1, r3
 8005558:	0010      	movs	r0, r2
 800555a:	f7fa fde7 	bl	800012c <__udivsi3>
 800555e:	0003      	movs	r3, r0
 8005560:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005564:	2b0f      	cmp	r3, #15
 8005566:	d90a      	bls.n	800557e <UART_SetConfig+0x572>
 8005568:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800556a:	2380      	movs	r3, #128	; 0x80
 800556c:	025b      	lsls	r3, r3, #9
 800556e:	429a      	cmp	r2, r3
 8005570:	d205      	bcs.n	800557e <UART_SetConfig+0x572>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005574:	b29a      	uxth	r2, r3
 8005576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	60da      	str	r2, [r3, #12]
 800557c:	e006      	b.n	800558c <UART_SetConfig+0x580>
      }
      else
      {
        ret = HAL_ERROR;
 800557e:	231a      	movs	r3, #26
 8005580:	2220      	movs	r2, #32
 8005582:	4694      	mov	ip, r2
 8005584:	44bc      	add	ip, r7
 8005586:	4463      	add	r3, ip
 8005588:	2201      	movs	r2, #1
 800558a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800558c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800558e:	226a      	movs	r2, #106	; 0x6a
 8005590:	2101      	movs	r1, #1
 8005592:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8005594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005596:	2268      	movs	r2, #104	; 0x68
 8005598:	2101      	movs	r1, #1
 800559a:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800559c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800559e:	2200      	movs	r2, #0
 80055a0:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80055a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a4:	2200      	movs	r2, #0
 80055a6:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80055a8:	231a      	movs	r3, #26
 80055aa:	2220      	movs	r2, #32
 80055ac:	4694      	mov	ip, r2
 80055ae:	44bc      	add	ip, r7
 80055b0:	4463      	add	r3, ip
 80055b2:	781b      	ldrb	r3, [r3, #0]
}
 80055b4:	0018      	movs	r0, r3
 80055b6:	46bd      	mov	sp, r7
 80055b8:	b010      	add	sp, #64	; 0x40
 80055ba:	bdb0      	pop	{r4, r5, r7, pc}
 80055bc:	08007220 	.word	0x08007220
 80055c0:	00f42400 	.word	0x00f42400

080055c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b082      	sub	sp, #8
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055d0:	2201      	movs	r2, #1
 80055d2:	4013      	ands	r3, r2
 80055d4:	d00b      	beq.n	80055ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	4a4a      	ldr	r2, [pc, #296]	; (8005708 <UART_AdvFeatureConfig+0x144>)
 80055de:	4013      	ands	r3, r2
 80055e0:	0019      	movs	r1, r3
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	430a      	orrs	r2, r1
 80055ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055f2:	2202      	movs	r2, #2
 80055f4:	4013      	ands	r3, r2
 80055f6:	d00b      	beq.n	8005610 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	4a43      	ldr	r2, [pc, #268]	; (800570c <UART_AdvFeatureConfig+0x148>)
 8005600:	4013      	ands	r3, r2
 8005602:	0019      	movs	r1, r3
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	430a      	orrs	r2, r1
 800560e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005614:	2204      	movs	r2, #4
 8005616:	4013      	ands	r3, r2
 8005618:	d00b      	beq.n	8005632 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	4a3b      	ldr	r2, [pc, #236]	; (8005710 <UART_AdvFeatureConfig+0x14c>)
 8005622:	4013      	ands	r3, r2
 8005624:	0019      	movs	r1, r3
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	430a      	orrs	r2, r1
 8005630:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005636:	2208      	movs	r2, #8
 8005638:	4013      	ands	r3, r2
 800563a:	d00b      	beq.n	8005654 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	4a34      	ldr	r2, [pc, #208]	; (8005714 <UART_AdvFeatureConfig+0x150>)
 8005644:	4013      	ands	r3, r2
 8005646:	0019      	movs	r1, r3
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	430a      	orrs	r2, r1
 8005652:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005658:	2210      	movs	r2, #16
 800565a:	4013      	ands	r3, r2
 800565c:	d00b      	beq.n	8005676 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	689b      	ldr	r3, [r3, #8]
 8005664:	4a2c      	ldr	r2, [pc, #176]	; (8005718 <UART_AdvFeatureConfig+0x154>)
 8005666:	4013      	ands	r3, r2
 8005668:	0019      	movs	r1, r3
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	430a      	orrs	r2, r1
 8005674:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800567a:	2220      	movs	r2, #32
 800567c:	4013      	ands	r3, r2
 800567e:	d00b      	beq.n	8005698 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	689b      	ldr	r3, [r3, #8]
 8005686:	4a25      	ldr	r2, [pc, #148]	; (800571c <UART_AdvFeatureConfig+0x158>)
 8005688:	4013      	ands	r3, r2
 800568a:	0019      	movs	r1, r3
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	430a      	orrs	r2, r1
 8005696:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800569c:	2240      	movs	r2, #64	; 0x40
 800569e:	4013      	ands	r3, r2
 80056a0:	d01d      	beq.n	80056de <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	4a1d      	ldr	r2, [pc, #116]	; (8005720 <UART_AdvFeatureConfig+0x15c>)
 80056aa:	4013      	ands	r3, r2
 80056ac:	0019      	movs	r1, r3
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	430a      	orrs	r2, r1
 80056b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80056be:	2380      	movs	r3, #128	; 0x80
 80056c0:	035b      	lsls	r3, r3, #13
 80056c2:	429a      	cmp	r2, r3
 80056c4:	d10b      	bne.n	80056de <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	4a15      	ldr	r2, [pc, #84]	; (8005724 <UART_AdvFeatureConfig+0x160>)
 80056ce:	4013      	ands	r3, r2
 80056d0:	0019      	movs	r1, r3
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	430a      	orrs	r2, r1
 80056dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056e2:	2280      	movs	r2, #128	; 0x80
 80056e4:	4013      	ands	r3, r2
 80056e6:	d00b      	beq.n	8005700 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	4a0e      	ldr	r2, [pc, #56]	; (8005728 <UART_AdvFeatureConfig+0x164>)
 80056f0:	4013      	ands	r3, r2
 80056f2:	0019      	movs	r1, r3
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	430a      	orrs	r2, r1
 80056fe:	605a      	str	r2, [r3, #4]
  }
}
 8005700:	46c0      	nop			; (mov r8, r8)
 8005702:	46bd      	mov	sp, r7
 8005704:	b002      	add	sp, #8
 8005706:	bd80      	pop	{r7, pc}
 8005708:	fffdffff 	.word	0xfffdffff
 800570c:	fffeffff 	.word	0xfffeffff
 8005710:	fffbffff 	.word	0xfffbffff
 8005714:	ffff7fff 	.word	0xffff7fff
 8005718:	ffffefff 	.word	0xffffefff
 800571c:	ffffdfff 	.word	0xffffdfff
 8005720:	ffefffff 	.word	0xffefffff
 8005724:	ff9fffff 	.word	0xff9fffff
 8005728:	fff7ffff 	.word	0xfff7ffff

0800572c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b086      	sub	sp, #24
 8005730:	af02      	add	r7, sp, #8
 8005732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	228c      	movs	r2, #140	; 0x8c
 8005738:	2100      	movs	r1, #0
 800573a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800573c:	f7fc fb7a 	bl	8001e34 <HAL_GetTick>
 8005740:	0003      	movs	r3, r0
 8005742:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	2208      	movs	r2, #8
 800574c:	4013      	ands	r3, r2
 800574e:	2b08      	cmp	r3, #8
 8005750:	d10c      	bne.n	800576c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2280      	movs	r2, #128	; 0x80
 8005756:	0391      	lsls	r1, r2, #14
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	4a18      	ldr	r2, [pc, #96]	; (80057bc <UART_CheckIdleState+0x90>)
 800575c:	9200      	str	r2, [sp, #0]
 800575e:	2200      	movs	r2, #0
 8005760:	f000 f82e 	bl	80057c0 <UART_WaitOnFlagUntilTimeout>
 8005764:	1e03      	subs	r3, r0, #0
 8005766:	d001      	beq.n	800576c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005768:	2303      	movs	r3, #3
 800576a:	e023      	b.n	80057b4 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	2204      	movs	r2, #4
 8005774:	4013      	ands	r3, r2
 8005776:	2b04      	cmp	r3, #4
 8005778:	d10c      	bne.n	8005794 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2280      	movs	r2, #128	; 0x80
 800577e:	03d1      	lsls	r1, r2, #15
 8005780:	6878      	ldr	r0, [r7, #4]
 8005782:	4a0e      	ldr	r2, [pc, #56]	; (80057bc <UART_CheckIdleState+0x90>)
 8005784:	9200      	str	r2, [sp, #0]
 8005786:	2200      	movs	r2, #0
 8005788:	f000 f81a 	bl	80057c0 <UART_WaitOnFlagUntilTimeout>
 800578c:	1e03      	subs	r3, r0, #0
 800578e:	d001      	beq.n	8005794 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005790:	2303      	movs	r3, #3
 8005792:	e00f      	b.n	80057b4 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2284      	movs	r2, #132	; 0x84
 8005798:	2120      	movs	r1, #32
 800579a:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2288      	movs	r2, #136	; 0x88
 80057a0:	2120      	movs	r1, #32
 80057a2:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2200      	movs	r2, #0
 80057a8:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2280      	movs	r2, #128	; 0x80
 80057ae:	2100      	movs	r1, #0
 80057b0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80057b2:	2300      	movs	r3, #0
}
 80057b4:	0018      	movs	r0, r3
 80057b6:	46bd      	mov	sp, r7
 80057b8:	b004      	add	sp, #16
 80057ba:	bd80      	pop	{r7, pc}
 80057bc:	01ffffff 	.word	0x01ffffff

080057c0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b094      	sub	sp, #80	; 0x50
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	60f8      	str	r0, [r7, #12]
 80057c8:	60b9      	str	r1, [r7, #8]
 80057ca:	603b      	str	r3, [r7, #0]
 80057cc:	1dfb      	adds	r3, r7, #7
 80057ce:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057d0:	e0a7      	b.n	8005922 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80057d4:	3301      	adds	r3, #1
 80057d6:	d100      	bne.n	80057da <UART_WaitOnFlagUntilTimeout+0x1a>
 80057d8:	e0a3      	b.n	8005922 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057da:	f7fc fb2b 	bl	8001e34 <HAL_GetTick>
 80057de:	0002      	movs	r2, r0
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	1ad3      	subs	r3, r2, r3
 80057e4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80057e6:	429a      	cmp	r2, r3
 80057e8:	d302      	bcc.n	80057f0 <UART_WaitOnFlagUntilTimeout+0x30>
 80057ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d13f      	bne.n	8005870 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057f0:	f3ef 8310 	mrs	r3, PRIMASK
 80057f4:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80057f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80057f8:	647b      	str	r3, [r7, #68]	; 0x44
 80057fa:	2301      	movs	r3, #1
 80057fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005800:	f383 8810 	msr	PRIMASK, r3
}
 8005804:	46c0      	nop			; (mov r8, r8)
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	681a      	ldr	r2, [r3, #0]
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	494e      	ldr	r1, [pc, #312]	; (800594c <UART_WaitOnFlagUntilTimeout+0x18c>)
 8005812:	400a      	ands	r2, r1
 8005814:	601a      	str	r2, [r3, #0]
 8005816:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005818:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800581a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800581c:	f383 8810 	msr	PRIMASK, r3
}
 8005820:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005822:	f3ef 8310 	mrs	r3, PRIMASK
 8005826:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8005828:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800582a:	643b      	str	r3, [r7, #64]	; 0x40
 800582c:	2301      	movs	r3, #1
 800582e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005832:	f383 8810 	msr	PRIMASK, r3
}
 8005836:	46c0      	nop			; (mov r8, r8)
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	689a      	ldr	r2, [r3, #8]
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	2101      	movs	r1, #1
 8005844:	438a      	bics	r2, r1
 8005846:	609a      	str	r2, [r3, #8]
 8005848:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800584a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800584c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800584e:	f383 8810 	msr	PRIMASK, r3
}
 8005852:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2284      	movs	r2, #132	; 0x84
 8005858:	2120      	movs	r1, #32
 800585a:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2288      	movs	r2, #136	; 0x88
 8005860:	2120      	movs	r1, #32
 8005862:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	2280      	movs	r2, #128	; 0x80
 8005868:	2100      	movs	r1, #0
 800586a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800586c:	2303      	movs	r3, #3
 800586e:	e069      	b.n	8005944 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	2204      	movs	r2, #4
 8005878:	4013      	ands	r3, r2
 800587a:	d052      	beq.n	8005922 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	69da      	ldr	r2, [r3, #28]
 8005882:	2380      	movs	r3, #128	; 0x80
 8005884:	011b      	lsls	r3, r3, #4
 8005886:	401a      	ands	r2, r3
 8005888:	2380      	movs	r3, #128	; 0x80
 800588a:	011b      	lsls	r3, r3, #4
 800588c:	429a      	cmp	r2, r3
 800588e:	d148      	bne.n	8005922 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	2280      	movs	r2, #128	; 0x80
 8005896:	0112      	lsls	r2, r2, #4
 8005898:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800589a:	f3ef 8310 	mrs	r3, PRIMASK
 800589e:	613b      	str	r3, [r7, #16]
  return(result);
 80058a0:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80058a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80058a4:	2301      	movs	r3, #1
 80058a6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	f383 8810 	msr	PRIMASK, r3
}
 80058ae:	46c0      	nop			; (mov r8, r8)
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	681a      	ldr	r2, [r3, #0]
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4924      	ldr	r1, [pc, #144]	; (800594c <UART_WaitOnFlagUntilTimeout+0x18c>)
 80058bc:	400a      	ands	r2, r1
 80058be:	601a      	str	r2, [r3, #0]
 80058c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058c2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058c4:	69bb      	ldr	r3, [r7, #24]
 80058c6:	f383 8810 	msr	PRIMASK, r3
}
 80058ca:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058cc:	f3ef 8310 	mrs	r3, PRIMASK
 80058d0:	61fb      	str	r3, [r7, #28]
  return(result);
 80058d2:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80058d6:	2301      	movs	r3, #1
 80058d8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058da:	6a3b      	ldr	r3, [r7, #32]
 80058dc:	f383 8810 	msr	PRIMASK, r3
}
 80058e0:	46c0      	nop			; (mov r8, r8)
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	689a      	ldr	r2, [r3, #8]
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	2101      	movs	r1, #1
 80058ee:	438a      	bics	r2, r1
 80058f0:	609a      	str	r2, [r3, #8]
 80058f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058f4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f8:	f383 8810 	msr	PRIMASK, r3
}
 80058fc:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	2284      	movs	r2, #132	; 0x84
 8005902:	2120      	movs	r1, #32
 8005904:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2288      	movs	r2, #136	; 0x88
 800590a:	2120      	movs	r1, #32
 800590c:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	228c      	movs	r2, #140	; 0x8c
 8005912:	2120      	movs	r1, #32
 8005914:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	2280      	movs	r2, #128	; 0x80
 800591a:	2100      	movs	r1, #0
 800591c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800591e:	2303      	movs	r3, #3
 8005920:	e010      	b.n	8005944 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	69db      	ldr	r3, [r3, #28]
 8005928:	68ba      	ldr	r2, [r7, #8]
 800592a:	4013      	ands	r3, r2
 800592c:	68ba      	ldr	r2, [r7, #8]
 800592e:	1ad3      	subs	r3, r2, r3
 8005930:	425a      	negs	r2, r3
 8005932:	4153      	adcs	r3, r2
 8005934:	b2db      	uxtb	r3, r3
 8005936:	001a      	movs	r2, r3
 8005938:	1dfb      	adds	r3, r7, #7
 800593a:	781b      	ldrb	r3, [r3, #0]
 800593c:	429a      	cmp	r2, r3
 800593e:	d100      	bne.n	8005942 <UART_WaitOnFlagUntilTimeout+0x182>
 8005940:	e747      	b.n	80057d2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005942:	2300      	movs	r3, #0
}
 8005944:	0018      	movs	r0, r3
 8005946:	46bd      	mov	sp, r7
 8005948:	b014      	add	sp, #80	; 0x50
 800594a:	bd80      	pop	{r7, pc}
 800594c:	fffffe5f 	.word	0xfffffe5f

08005950 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b098      	sub	sp, #96	; 0x60
 8005954:	af00      	add	r7, sp, #0
 8005956:	60f8      	str	r0, [r7, #12]
 8005958:	60b9      	str	r1, [r7, #8]
 800595a:	1dbb      	adds	r3, r7, #6
 800595c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	68ba      	ldr	r2, [r7, #8]
 8005962:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	1dba      	adds	r2, r7, #6
 8005968:	215c      	movs	r1, #92	; 0x5c
 800596a:	8812      	ldrh	r2, [r2, #0]
 800596c:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	1dba      	adds	r2, r7, #6
 8005972:	215e      	movs	r1, #94	; 0x5e
 8005974:	8812      	ldrh	r2, [r2, #0]
 8005976:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2200      	movs	r2, #0
 800597c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	689a      	ldr	r2, [r3, #8]
 8005982:	2380      	movs	r3, #128	; 0x80
 8005984:	015b      	lsls	r3, r3, #5
 8005986:	429a      	cmp	r2, r3
 8005988:	d10d      	bne.n	80059a6 <UART_Start_Receive_IT+0x56>
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	691b      	ldr	r3, [r3, #16]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d104      	bne.n	800599c <UART_Start_Receive_IT+0x4c>
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	2260      	movs	r2, #96	; 0x60
 8005996:	497f      	ldr	r1, [pc, #508]	; (8005b94 <UART_Start_Receive_IT+0x244>)
 8005998:	5299      	strh	r1, [r3, r2]
 800599a:	e02e      	b.n	80059fa <UART_Start_Receive_IT+0xaa>
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	2260      	movs	r2, #96	; 0x60
 80059a0:	21ff      	movs	r1, #255	; 0xff
 80059a2:	5299      	strh	r1, [r3, r2]
 80059a4:	e029      	b.n	80059fa <UART_Start_Receive_IT+0xaa>
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	689b      	ldr	r3, [r3, #8]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d10d      	bne.n	80059ca <UART_Start_Receive_IT+0x7a>
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	691b      	ldr	r3, [r3, #16]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d104      	bne.n	80059c0 <UART_Start_Receive_IT+0x70>
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2260      	movs	r2, #96	; 0x60
 80059ba:	21ff      	movs	r1, #255	; 0xff
 80059bc:	5299      	strh	r1, [r3, r2]
 80059be:	e01c      	b.n	80059fa <UART_Start_Receive_IT+0xaa>
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2260      	movs	r2, #96	; 0x60
 80059c4:	217f      	movs	r1, #127	; 0x7f
 80059c6:	5299      	strh	r1, [r3, r2]
 80059c8:	e017      	b.n	80059fa <UART_Start_Receive_IT+0xaa>
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	689a      	ldr	r2, [r3, #8]
 80059ce:	2380      	movs	r3, #128	; 0x80
 80059d0:	055b      	lsls	r3, r3, #21
 80059d2:	429a      	cmp	r2, r3
 80059d4:	d10d      	bne.n	80059f2 <UART_Start_Receive_IT+0xa2>
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	691b      	ldr	r3, [r3, #16]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d104      	bne.n	80059e8 <UART_Start_Receive_IT+0x98>
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	2260      	movs	r2, #96	; 0x60
 80059e2:	217f      	movs	r1, #127	; 0x7f
 80059e4:	5299      	strh	r1, [r3, r2]
 80059e6:	e008      	b.n	80059fa <UART_Start_Receive_IT+0xaa>
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2260      	movs	r2, #96	; 0x60
 80059ec:	213f      	movs	r1, #63	; 0x3f
 80059ee:	5299      	strh	r1, [r3, r2]
 80059f0:	e003      	b.n	80059fa <UART_Start_Receive_IT+0xaa>
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	2260      	movs	r2, #96	; 0x60
 80059f6:	2100      	movs	r1, #0
 80059f8:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	228c      	movs	r2, #140	; 0x8c
 80059fe:	2100      	movs	r1, #0
 8005a00:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2288      	movs	r2, #136	; 0x88
 8005a06:	2122      	movs	r1, #34	; 0x22
 8005a08:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a0a:	f3ef 8310 	mrs	r3, PRIMASK
 8005a0e:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 8005a10:	6c3b      	ldr	r3, [r7, #64]	; 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a12:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a14:	2301      	movs	r3, #1
 8005a16:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a1a:	f383 8810 	msr	PRIMASK, r3
}
 8005a1e:	46c0      	nop			; (mov r8, r8)
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	689a      	ldr	r2, [r3, #8]
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	2101      	movs	r1, #1
 8005a2c:	430a      	orrs	r2, r1
 8005a2e:	609a      	str	r2, [r3, #8]
 8005a30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a32:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a36:	f383 8810 	msr	PRIMASK, r3
}
 8005a3a:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005a40:	2380      	movs	r3, #128	; 0x80
 8005a42:	059b      	lsls	r3, r3, #22
 8005a44:	429a      	cmp	r2, r3
 8005a46:	d154      	bne.n	8005af2 <UART_Start_Receive_IT+0x1a2>
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	2268      	movs	r2, #104	; 0x68
 8005a4c:	5a9b      	ldrh	r3, [r3, r2]
 8005a4e:	1dba      	adds	r2, r7, #6
 8005a50:	8812      	ldrh	r2, [r2, #0]
 8005a52:	429a      	cmp	r2, r3
 8005a54:	d34d      	bcc.n	8005af2 <UART_Start_Receive_IT+0x1a2>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	689a      	ldr	r2, [r3, #8]
 8005a5a:	2380      	movs	r3, #128	; 0x80
 8005a5c:	015b      	lsls	r3, r3, #5
 8005a5e:	429a      	cmp	r2, r3
 8005a60:	d107      	bne.n	8005a72 <UART_Start_Receive_IT+0x122>
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	691b      	ldr	r3, [r3, #16]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d103      	bne.n	8005a72 <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	4a4a      	ldr	r2, [pc, #296]	; (8005b98 <UART_Start_Receive_IT+0x248>)
 8005a6e:	671a      	str	r2, [r3, #112]	; 0x70
 8005a70:	e002      	b.n	8005a78 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	4a49      	ldr	r2, [pc, #292]	; (8005b9c <UART_Start_Receive_IT+0x24c>)
 8005a76:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2280      	movs	r2, #128	; 0x80
 8005a7c:	2100      	movs	r1, #0
 8005a7e:	5499      	strb	r1, [r3, r2]

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	691b      	ldr	r3, [r3, #16]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d019      	beq.n	8005abc <UART_Start_Receive_IT+0x16c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a88:	f3ef 8310 	mrs	r3, PRIMASK
 8005a8c:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8005a8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a90:	65bb      	str	r3, [r7, #88]	; 0x58
 8005a92:	2301      	movs	r3, #1
 8005a94:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a98:	f383 8810 	msr	PRIMASK, r3
}
 8005a9c:	46c0      	nop			; (mov r8, r8)
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	681a      	ldr	r2, [r3, #0]
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	2180      	movs	r1, #128	; 0x80
 8005aaa:	0049      	lsls	r1, r1, #1
 8005aac:	430a      	orrs	r2, r1
 8005aae:	601a      	str	r2, [r3, #0]
 8005ab0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ab4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ab6:	f383 8810 	msr	PRIMASK, r3
}
 8005aba:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005abc:	f3ef 8310 	mrs	r3, PRIMASK
 8005ac0:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8005ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005ac4:	657b      	str	r3, [r7, #84]	; 0x54
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005acc:	f383 8810 	msr	PRIMASK, r3
}
 8005ad0:	46c0      	nop			; (mov r8, r8)
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	689a      	ldr	r2, [r3, #8]
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	2180      	movs	r1, #128	; 0x80
 8005ade:	0549      	lsls	r1, r1, #21
 8005ae0:	430a      	orrs	r2, r1
 8005ae2:	609a      	str	r2, [r3, #8]
 8005ae4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ae6:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aea:	f383 8810 	msr	PRIMASK, r3
}
 8005aee:	46c0      	nop			; (mov r8, r8)
 8005af0:	e04b      	b.n	8005b8a <UART_Start_Receive_IT+0x23a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	689a      	ldr	r2, [r3, #8]
 8005af6:	2380      	movs	r3, #128	; 0x80
 8005af8:	015b      	lsls	r3, r3, #5
 8005afa:	429a      	cmp	r2, r3
 8005afc:	d107      	bne.n	8005b0e <UART_Start_Receive_IT+0x1be>
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	691b      	ldr	r3, [r3, #16]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d103      	bne.n	8005b0e <UART_Start_Receive_IT+0x1be>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	4a25      	ldr	r2, [pc, #148]	; (8005ba0 <UART_Start_Receive_IT+0x250>)
 8005b0a:	671a      	str	r2, [r3, #112]	; 0x70
 8005b0c:	e002      	b.n	8005b14 <UART_Start_Receive_IT+0x1c4>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	4a24      	ldr	r2, [pc, #144]	; (8005ba4 <UART_Start_Receive_IT+0x254>)
 8005b12:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2280      	movs	r2, #128	; 0x80
 8005b18:	2100      	movs	r1, #0
 8005b1a:	5499      	strb	r1, [r3, r2]

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	691b      	ldr	r3, [r3, #16]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d019      	beq.n	8005b58 <UART_Start_Receive_IT+0x208>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b24:	f3ef 8310 	mrs	r3, PRIMASK
 8005b28:	61fb      	str	r3, [r7, #28]
  return(result);
 8005b2a:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8005b2c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b2e:	2301      	movs	r3, #1
 8005b30:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b32:	6a3b      	ldr	r3, [r7, #32]
 8005b34:	f383 8810 	msr	PRIMASK, r3
}
 8005b38:	46c0      	nop			; (mov r8, r8)
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	681a      	ldr	r2, [r3, #0]
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	2190      	movs	r1, #144	; 0x90
 8005b46:	0049      	lsls	r1, r1, #1
 8005b48:	430a      	orrs	r2, r1
 8005b4a:	601a      	str	r2, [r3, #0]
 8005b4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b4e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b52:	f383 8810 	msr	PRIMASK, r3
}
 8005b56:	e018      	b.n	8005b8a <UART_Start_Receive_IT+0x23a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b58:	f3ef 8310 	mrs	r3, PRIMASK
 8005b5c:	613b      	str	r3, [r7, #16]
  return(result);
 8005b5e:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005b60:	653b      	str	r3, [r7, #80]	; 0x50
 8005b62:	2301      	movs	r3, #1
 8005b64:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	f383 8810 	msr	PRIMASK, r3
}
 8005b6c:	46c0      	nop			; (mov r8, r8)
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	681a      	ldr	r2, [r3, #0]
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	2120      	movs	r1, #32
 8005b7a:	430a      	orrs	r2, r1
 8005b7c:	601a      	str	r2, [r3, #0]
 8005b7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b80:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b82:	69bb      	ldr	r3, [r7, #24]
 8005b84:	f383 8810 	msr	PRIMASK, r3
}
 8005b88:	46c0      	nop			; (mov r8, r8)
    }
  }
  return HAL_OK;
 8005b8a:	2300      	movs	r3, #0
}
 8005b8c:	0018      	movs	r0, r3
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	b018      	add	sp, #96	; 0x60
 8005b92:	bd80      	pop	{r7, pc}
 8005b94:	000001ff 	.word	0x000001ff
 8005b98:	080062b9 	.word	0x080062b9
 8005b9c:	08005fd5 	.word	0x08005fd5
 8005ba0:	08005e69 	.word	0x08005e69
 8005ba4:	08005cfd 	.word	0x08005cfd

08005ba8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b08e      	sub	sp, #56	; 0x38
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bb0:	f3ef 8310 	mrs	r3, PRIMASK
 8005bb4:	617b      	str	r3, [r7, #20]
  return(result);
 8005bb6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005bb8:	637b      	str	r3, [r7, #52]	; 0x34
 8005bba:	2301      	movs	r3, #1
 8005bbc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bbe:	69bb      	ldr	r3, [r7, #24]
 8005bc0:	f383 8810 	msr	PRIMASK, r3
}
 8005bc4:	46c0      	nop			; (mov r8, r8)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	681a      	ldr	r2, [r3, #0]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4926      	ldr	r1, [pc, #152]	; (8005c6c <UART_EndRxTransfer+0xc4>)
 8005bd2:	400a      	ands	r2, r1
 8005bd4:	601a      	str	r2, [r3, #0]
 8005bd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bd8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bda:	69fb      	ldr	r3, [r7, #28]
 8005bdc:	f383 8810 	msr	PRIMASK, r3
}
 8005be0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005be2:	f3ef 8310 	mrs	r3, PRIMASK
 8005be6:	623b      	str	r3, [r7, #32]
  return(result);
 8005be8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005bea:	633b      	str	r3, [r7, #48]	; 0x30
 8005bec:	2301      	movs	r3, #1
 8005bee:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf2:	f383 8810 	msr	PRIMASK, r3
}
 8005bf6:	46c0      	nop			; (mov r8, r8)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	689a      	ldr	r2, [r3, #8]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	491b      	ldr	r1, [pc, #108]	; (8005c70 <UART_EndRxTransfer+0xc8>)
 8005c04:	400a      	ands	r2, r1
 8005c06:	609a      	str	r2, [r3, #8]
 8005c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c0a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c0e:	f383 8810 	msr	PRIMASK, r3
}
 8005c12:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d118      	bne.n	8005c4e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c1c:	f3ef 8310 	mrs	r3, PRIMASK
 8005c20:	60bb      	str	r3, [r7, #8]
  return(result);
 8005c22:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c26:	2301      	movs	r3, #1
 8005c28:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	f383 8810 	msr	PRIMASK, r3
}
 8005c30:	46c0      	nop			; (mov r8, r8)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	681a      	ldr	r2, [r3, #0]
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	2110      	movs	r1, #16
 8005c3e:	438a      	bics	r2, r1
 8005c40:	601a      	str	r2, [r3, #0]
 8005c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c44:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	f383 8810 	msr	PRIMASK, r3
}
 8005c4c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2288      	movs	r2, #136	; 0x88
 8005c52:	2120      	movs	r1, #32
 8005c54:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	671a      	str	r2, [r3, #112]	; 0x70
}
 8005c62:	46c0      	nop			; (mov r8, r8)
 8005c64:	46bd      	mov	sp, r7
 8005c66:	b00e      	add	sp, #56	; 0x38
 8005c68:	bd80      	pop	{r7, pc}
 8005c6a:	46c0      	nop			; (mov r8, r8)
 8005c6c:	fffffedf 	.word	0xfffffedf
 8005c70:	effffffe 	.word	0xeffffffe

08005c74 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b084      	sub	sp, #16
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c80:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	225e      	movs	r2, #94	; 0x5e
 8005c86:	2100      	movs	r1, #0
 8005c88:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2256      	movs	r2, #86	; 0x56
 8005c8e:	2100      	movs	r1, #0
 8005c90:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	0018      	movs	r0, r3
 8005c96:	f7ff f9a5 	bl	8004fe4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c9a:	46c0      	nop			; (mov r8, r8)
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	b004      	add	sp, #16
 8005ca0:	bd80      	pop	{r7, pc}

08005ca2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005ca2:	b580      	push	{r7, lr}
 8005ca4:	b086      	sub	sp, #24
 8005ca6:	af00      	add	r7, sp, #0
 8005ca8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005caa:	f3ef 8310 	mrs	r3, PRIMASK
 8005cae:	60bb      	str	r3, [r7, #8]
  return(result);
 8005cb0:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005cb2:	617b      	str	r3, [r7, #20]
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f383 8810 	msr	PRIMASK, r3
}
 8005cbe:	46c0      	nop			; (mov r8, r8)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	681a      	ldr	r2, [r3, #0]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	2140      	movs	r1, #64	; 0x40
 8005ccc:	438a      	bics	r2, r1
 8005cce:	601a      	str	r2, [r3, #0]
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	f383 8810 	msr	PRIMASK, r3
}
 8005cda:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2284      	movs	r2, #132	; 0x84
 8005ce0:	2120      	movs	r1, #32
 8005ce2:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	0018      	movs	r0, r3
 8005cee:	f7ff f971 	bl	8004fd4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005cf2:	46c0      	nop			; (mov r8, r8)
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	b006      	add	sp, #24
 8005cf8:	bd80      	pop	{r7, pc}
	...

08005cfc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b090      	sub	sp, #64	; 0x40
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005d04:	203e      	movs	r0, #62	; 0x3e
 8005d06:	183b      	adds	r3, r7, r0
 8005d08:	687a      	ldr	r2, [r7, #4]
 8005d0a:	2160      	movs	r1, #96	; 0x60
 8005d0c:	5a52      	ldrh	r2, [r2, r1]
 8005d0e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2288      	movs	r2, #136	; 0x88
 8005d14:	589b      	ldr	r3, [r3, r2]
 8005d16:	2b22      	cmp	r3, #34	; 0x22
 8005d18:	d000      	beq.n	8005d1c <UART_RxISR_8BIT+0x20>
 8005d1a:	e097      	b.n	8005e4c <UART_RxISR_8BIT+0x150>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005d22:	213c      	movs	r1, #60	; 0x3c
 8005d24:	187b      	adds	r3, r7, r1
 8005d26:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005d28:	187b      	adds	r3, r7, r1
 8005d2a:	881b      	ldrh	r3, [r3, #0]
 8005d2c:	b2da      	uxtb	r2, r3
 8005d2e:	183b      	adds	r3, r7, r0
 8005d30:	881b      	ldrh	r3, [r3, #0]
 8005d32:	b2d9      	uxtb	r1, r3
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d38:	400a      	ands	r2, r1
 8005d3a:	b2d2      	uxtb	r2, r2
 8005d3c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d42:	1c5a      	adds	r2, r3, #1
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	225e      	movs	r2, #94	; 0x5e
 8005d4c:	5a9b      	ldrh	r3, [r3, r2]
 8005d4e:	b29b      	uxth	r3, r3
 8005d50:	3b01      	subs	r3, #1
 8005d52:	b299      	uxth	r1, r3
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	225e      	movs	r2, #94	; 0x5e
 8005d58:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	225e      	movs	r2, #94	; 0x5e
 8005d5e:	5a9b      	ldrh	r3, [r3, r2]
 8005d60:	b29b      	uxth	r3, r3
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d000      	beq.n	8005d68 <UART_RxISR_8BIT+0x6c>
 8005d66:	e079      	b.n	8005e5c <UART_RxISR_8BIT+0x160>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d68:	f3ef 8310 	mrs	r3, PRIMASK
 8005d6c:	61bb      	str	r3, [r7, #24]
  return(result);
 8005d6e:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005d70:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d72:	2301      	movs	r3, #1
 8005d74:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d76:	69fb      	ldr	r3, [r7, #28]
 8005d78:	f383 8810 	msr	PRIMASK, r3
}
 8005d7c:	46c0      	nop			; (mov r8, r8)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	681a      	ldr	r2, [r3, #0]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4936      	ldr	r1, [pc, #216]	; (8005e64 <UART_RxISR_8BIT+0x168>)
 8005d8a:	400a      	ands	r2, r1
 8005d8c:	601a      	str	r2, [r3, #0]
 8005d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d90:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d92:	6a3b      	ldr	r3, [r7, #32]
 8005d94:	f383 8810 	msr	PRIMASK, r3
}
 8005d98:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d9a:	f3ef 8310 	mrs	r3, PRIMASK
 8005d9e:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005da2:	637b      	str	r3, [r7, #52]	; 0x34
 8005da4:	2301      	movs	r3, #1
 8005da6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005daa:	f383 8810 	msr	PRIMASK, r3
}
 8005dae:	46c0      	nop			; (mov r8, r8)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	689a      	ldr	r2, [r3, #8]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	2101      	movs	r1, #1
 8005dbc:	438a      	bics	r2, r1
 8005dbe:	609a      	str	r2, [r3, #8]
 8005dc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dc6:	f383 8810 	msr	PRIMASK, r3
}
 8005dca:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2288      	movs	r2, #136	; 0x88
 8005dd0:	2120      	movs	r1, #32
 8005dd2:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005dde:	2b01      	cmp	r3, #1
 8005de0:	d12f      	bne.n	8005e42 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2200      	movs	r2, #0
 8005de6:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005de8:	f3ef 8310 	mrs	r3, PRIMASK
 8005dec:	60fb      	str	r3, [r7, #12]
  return(result);
 8005dee:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005df0:	633b      	str	r3, [r7, #48]	; 0x30
 8005df2:	2301      	movs	r3, #1
 8005df4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	f383 8810 	msr	PRIMASK, r3
}
 8005dfc:	46c0      	nop			; (mov r8, r8)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	681a      	ldr	r2, [r3, #0]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	2110      	movs	r1, #16
 8005e0a:	438a      	bics	r2, r1
 8005e0c:	601a      	str	r2, [r3, #0]
 8005e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e10:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	f383 8810 	msr	PRIMASK, r3
}
 8005e18:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	69db      	ldr	r3, [r3, #28]
 8005e20:	2210      	movs	r2, #16
 8005e22:	4013      	ands	r3, r2
 8005e24:	2b10      	cmp	r3, #16
 8005e26:	d103      	bne.n	8005e30 <UART_RxISR_8BIT+0x134>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	2210      	movs	r2, #16
 8005e2e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	225c      	movs	r2, #92	; 0x5c
 8005e34:	5a9a      	ldrh	r2, [r3, r2]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	0011      	movs	r1, r2
 8005e3a:	0018      	movs	r0, r3
 8005e3c:	f7ff f8da 	bl	8004ff4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005e40:	e00c      	b.n	8005e5c <UART_RxISR_8BIT+0x160>
        HAL_UART_RxCpltCallback(huart);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	0018      	movs	r0, r3
 8005e46:	f7fb faad 	bl	80013a4 <HAL_UART_RxCpltCallback>
}
 8005e4a:	e007      	b.n	8005e5c <UART_RxISR_8BIT+0x160>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	699a      	ldr	r2, [r3, #24]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	2108      	movs	r1, #8
 8005e58:	430a      	orrs	r2, r1
 8005e5a:	619a      	str	r2, [r3, #24]
}
 8005e5c:	46c0      	nop			; (mov r8, r8)
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	b010      	add	sp, #64	; 0x40
 8005e62:	bd80      	pop	{r7, pc}
 8005e64:	fffffedf 	.word	0xfffffedf

08005e68 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b090      	sub	sp, #64	; 0x40
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005e70:	203e      	movs	r0, #62	; 0x3e
 8005e72:	183b      	adds	r3, r7, r0
 8005e74:	687a      	ldr	r2, [r7, #4]
 8005e76:	2160      	movs	r1, #96	; 0x60
 8005e78:	5a52      	ldrh	r2, [r2, r1]
 8005e7a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2288      	movs	r2, #136	; 0x88
 8005e80:	589b      	ldr	r3, [r3, r2]
 8005e82:	2b22      	cmp	r3, #34	; 0x22
 8005e84:	d000      	beq.n	8005e88 <UART_RxISR_16BIT+0x20>
 8005e86:	e097      	b.n	8005fb8 <UART_RxISR_16BIT+0x150>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005e8e:	213c      	movs	r1, #60	; 0x3c
 8005e90:	187b      	adds	r3, r7, r1
 8005e92:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e98:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 8005e9a:	187b      	adds	r3, r7, r1
 8005e9c:	183a      	adds	r2, r7, r0
 8005e9e:	881b      	ldrh	r3, [r3, #0]
 8005ea0:	8812      	ldrh	r2, [r2, #0]
 8005ea2:	4013      	ands	r3, r2
 8005ea4:	b29a      	uxth	r2, r3
 8005ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ea8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005eae:	1c9a      	adds	r2, r3, #2
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	225e      	movs	r2, #94	; 0x5e
 8005eb8:	5a9b      	ldrh	r3, [r3, r2]
 8005eba:	b29b      	uxth	r3, r3
 8005ebc:	3b01      	subs	r3, #1
 8005ebe:	b299      	uxth	r1, r3
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	225e      	movs	r2, #94	; 0x5e
 8005ec4:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	225e      	movs	r2, #94	; 0x5e
 8005eca:	5a9b      	ldrh	r3, [r3, r2]
 8005ecc:	b29b      	uxth	r3, r3
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d000      	beq.n	8005ed4 <UART_RxISR_16BIT+0x6c>
 8005ed2:	e079      	b.n	8005fc8 <UART_RxISR_16BIT+0x160>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ed4:	f3ef 8310 	mrs	r3, PRIMASK
 8005ed8:	617b      	str	r3, [r7, #20]
  return(result);
 8005eda:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005edc:	637b      	str	r3, [r7, #52]	; 0x34
 8005ede:	2301      	movs	r3, #1
 8005ee0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ee2:	69bb      	ldr	r3, [r7, #24]
 8005ee4:	f383 8810 	msr	PRIMASK, r3
}
 8005ee8:	46c0      	nop			; (mov r8, r8)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	681a      	ldr	r2, [r3, #0]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4936      	ldr	r1, [pc, #216]	; (8005fd0 <UART_RxISR_16BIT+0x168>)
 8005ef6:	400a      	ands	r2, r1
 8005ef8:	601a      	str	r2, [r3, #0]
 8005efa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005efc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005efe:	69fb      	ldr	r3, [r7, #28]
 8005f00:	f383 8810 	msr	PRIMASK, r3
}
 8005f04:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f06:	f3ef 8310 	mrs	r3, PRIMASK
 8005f0a:	623b      	str	r3, [r7, #32]
  return(result);
 8005f0c:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f0e:	633b      	str	r3, [r7, #48]	; 0x30
 8005f10:	2301      	movs	r3, #1
 8005f12:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f16:	f383 8810 	msr	PRIMASK, r3
}
 8005f1a:	46c0      	nop			; (mov r8, r8)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	689a      	ldr	r2, [r3, #8]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	2101      	movs	r1, #1
 8005f28:	438a      	bics	r2, r1
 8005f2a:	609a      	str	r2, [r3, #8]
 8005f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f2e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f32:	f383 8810 	msr	PRIMASK, r3
}
 8005f36:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2288      	movs	r2, #136	; 0x88
 8005f3c:	2120      	movs	r1, #32
 8005f3e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2200      	movs	r2, #0
 8005f44:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f4a:	2b01      	cmp	r3, #1
 8005f4c:	d12f      	bne.n	8005fae <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2200      	movs	r2, #0
 8005f52:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f54:	f3ef 8310 	mrs	r3, PRIMASK
 8005f58:	60bb      	str	r3, [r7, #8]
  return(result);
 8005f5a:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f5e:	2301      	movs	r3, #1
 8005f60:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	f383 8810 	msr	PRIMASK, r3
}
 8005f68:	46c0      	nop			; (mov r8, r8)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	681a      	ldr	r2, [r3, #0]
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	2110      	movs	r1, #16
 8005f76:	438a      	bics	r2, r1
 8005f78:	601a      	str	r2, [r3, #0]
 8005f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f7c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	f383 8810 	msr	PRIMASK, r3
}
 8005f84:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	69db      	ldr	r3, [r3, #28]
 8005f8c:	2210      	movs	r2, #16
 8005f8e:	4013      	ands	r3, r2
 8005f90:	2b10      	cmp	r3, #16
 8005f92:	d103      	bne.n	8005f9c <UART_RxISR_16BIT+0x134>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	2210      	movs	r2, #16
 8005f9a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	225c      	movs	r2, #92	; 0x5c
 8005fa0:	5a9a      	ldrh	r2, [r3, r2]
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	0011      	movs	r1, r2
 8005fa6:	0018      	movs	r0, r3
 8005fa8:	f7ff f824 	bl	8004ff4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005fac:	e00c      	b.n	8005fc8 <UART_RxISR_16BIT+0x160>
        HAL_UART_RxCpltCallback(huart);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	0018      	movs	r0, r3
 8005fb2:	f7fb f9f7 	bl	80013a4 <HAL_UART_RxCpltCallback>
}
 8005fb6:	e007      	b.n	8005fc8 <UART_RxISR_16BIT+0x160>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	699a      	ldr	r2, [r3, #24]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	2108      	movs	r1, #8
 8005fc4:	430a      	orrs	r2, r1
 8005fc6:	619a      	str	r2, [r3, #24]
}
 8005fc8:	46c0      	nop			; (mov r8, r8)
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	b010      	add	sp, #64	; 0x40
 8005fce:	bd80      	pop	{r7, pc}
 8005fd0:	fffffedf 	.word	0xfffffedf

08005fd4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b09c      	sub	sp, #112	; 0x70
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8005fdc:	236a      	movs	r3, #106	; 0x6a
 8005fde:	18fb      	adds	r3, r7, r3
 8005fe0:	687a      	ldr	r2, [r7, #4]
 8005fe2:	2160      	movs	r1, #96	; 0x60
 8005fe4:	5a52      	ldrh	r2, [r2, r1]
 8005fe6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	69db      	ldr	r3, [r3, #28]
 8005fee:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	689b      	ldr	r3, [r3, #8]
 8005ffe:	663b      	str	r3, [r7, #96]	; 0x60

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2288      	movs	r2, #136	; 0x88
 8006004:	589b      	ldr	r3, [r3, r2]
 8006006:	2b22      	cmp	r3, #34	; 0x22
 8006008:	d000      	beq.n	800600c <UART_RxISR_8BIT_FIFOEN+0x38>
 800600a:	e141      	b.n	8006290 <UART_RxISR_8BIT_FIFOEN+0x2bc>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800600c:	235e      	movs	r3, #94	; 0x5e
 800600e:	18fb      	adds	r3, r7, r3
 8006010:	687a      	ldr	r2, [r7, #4]
 8006012:	2168      	movs	r1, #104	; 0x68
 8006014:	5a52      	ldrh	r2, [r2, r1]
 8006016:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006018:	e0e8      	b.n	80061ec <UART_RxISR_8BIT_FIFOEN+0x218>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006020:	215c      	movs	r1, #92	; 0x5c
 8006022:	187b      	adds	r3, r7, r1
 8006024:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006026:	187b      	adds	r3, r7, r1
 8006028:	881b      	ldrh	r3, [r3, #0]
 800602a:	b2da      	uxtb	r2, r3
 800602c:	236a      	movs	r3, #106	; 0x6a
 800602e:	18fb      	adds	r3, r7, r3
 8006030:	881b      	ldrh	r3, [r3, #0]
 8006032:	b2d9      	uxtb	r1, r3
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006038:	400a      	ands	r2, r1
 800603a:	b2d2      	uxtb	r2, r2
 800603c:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006042:	1c5a      	adds	r2, r3, #1
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	225e      	movs	r2, #94	; 0x5e
 800604c:	5a9b      	ldrh	r3, [r3, r2]
 800604e:	b29b      	uxth	r3, r3
 8006050:	3b01      	subs	r3, #1
 8006052:	b299      	uxth	r1, r3
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	225e      	movs	r2, #94	; 0x5e
 8006058:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	69db      	ldr	r3, [r3, #28]
 8006060:	66fb      	str	r3, [r7, #108]	; 0x6c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006062:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006064:	2207      	movs	r2, #7
 8006066:	4013      	ands	r3, r2
 8006068:	d049      	beq.n	80060fe <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800606a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800606c:	2201      	movs	r2, #1
 800606e:	4013      	ands	r3, r2
 8006070:	d010      	beq.n	8006094 <UART_RxISR_8BIT_FIFOEN+0xc0>
 8006072:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006074:	2380      	movs	r3, #128	; 0x80
 8006076:	005b      	lsls	r3, r3, #1
 8006078:	4013      	ands	r3, r2
 800607a:	d00b      	beq.n	8006094 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	2201      	movs	r2, #1
 8006082:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	228c      	movs	r2, #140	; 0x8c
 8006088:	589b      	ldr	r3, [r3, r2]
 800608a:	2201      	movs	r2, #1
 800608c:	431a      	orrs	r2, r3
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	218c      	movs	r1, #140	; 0x8c
 8006092:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006094:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006096:	2202      	movs	r2, #2
 8006098:	4013      	ands	r3, r2
 800609a:	d00f      	beq.n	80060bc <UART_RxISR_8BIT_FIFOEN+0xe8>
 800609c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800609e:	2201      	movs	r2, #1
 80060a0:	4013      	ands	r3, r2
 80060a2:	d00b      	beq.n	80060bc <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	2202      	movs	r2, #2
 80060aa:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	228c      	movs	r2, #140	; 0x8c
 80060b0:	589b      	ldr	r3, [r3, r2]
 80060b2:	2204      	movs	r2, #4
 80060b4:	431a      	orrs	r2, r3
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	218c      	movs	r1, #140	; 0x8c
 80060ba:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80060bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060be:	2204      	movs	r2, #4
 80060c0:	4013      	ands	r3, r2
 80060c2:	d00f      	beq.n	80060e4 <UART_RxISR_8BIT_FIFOEN+0x110>
 80060c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80060c6:	2201      	movs	r2, #1
 80060c8:	4013      	ands	r3, r2
 80060ca:	d00b      	beq.n	80060e4 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	2204      	movs	r2, #4
 80060d2:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	228c      	movs	r2, #140	; 0x8c
 80060d8:	589b      	ldr	r3, [r3, r2]
 80060da:	2202      	movs	r2, #2
 80060dc:	431a      	orrs	r2, r3
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	218c      	movs	r1, #140	; 0x8c
 80060e2:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	228c      	movs	r2, #140	; 0x8c
 80060e8:	589b      	ldr	r3, [r3, r2]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d007      	beq.n	80060fe <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	0018      	movs	r0, r3
 80060f2:	f7fe ff77 	bl	8004fe4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	228c      	movs	r2, #140	; 0x8c
 80060fa:	2100      	movs	r1, #0
 80060fc:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	225e      	movs	r2, #94	; 0x5e
 8006102:	5a9b      	ldrh	r3, [r3, r2]
 8006104:	b29b      	uxth	r3, r3
 8006106:	2b00      	cmp	r3, #0
 8006108:	d170      	bne.n	80061ec <UART_RxISR_8BIT_FIFOEN+0x218>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800610a:	f3ef 8310 	mrs	r3, PRIMASK
 800610e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8006110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006112:	65bb      	str	r3, [r7, #88]	; 0x58
 8006114:	2301      	movs	r3, #1
 8006116:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800611a:	f383 8810 	msr	PRIMASK, r3
}
 800611e:	46c0      	nop			; (mov r8, r8)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	681a      	ldr	r2, [r3, #0]
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	495f      	ldr	r1, [pc, #380]	; (80062a8 <UART_RxISR_8BIT_FIFOEN+0x2d4>)
 800612c:	400a      	ands	r2, r1
 800612e:	601a      	str	r2, [r3, #0]
 8006130:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006132:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006134:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006136:	f383 8810 	msr	PRIMASK, r3
}
 800613a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800613c:	f3ef 8310 	mrs	r3, PRIMASK
 8006140:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 8006142:	6bbb      	ldr	r3, [r7, #56]	; 0x38

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006144:	657b      	str	r3, [r7, #84]	; 0x54
 8006146:	2301      	movs	r3, #1
 8006148:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800614a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800614c:	f383 8810 	msr	PRIMASK, r3
}
 8006150:	46c0      	nop			; (mov r8, r8)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	689a      	ldr	r2, [r3, #8]
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4953      	ldr	r1, [pc, #332]	; (80062ac <UART_RxISR_8BIT_FIFOEN+0x2d8>)
 800615e:	400a      	ands	r2, r1
 8006160:	609a      	str	r2, [r3, #8]
 8006162:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006164:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006166:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006168:	f383 8810 	msr	PRIMASK, r3
}
 800616c:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2288      	movs	r2, #136	; 0x88
 8006172:	2120      	movs	r1, #32
 8006174:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2200      	movs	r2, #0
 800617a:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006180:	2b01      	cmp	r3, #1
 8006182:	d12f      	bne.n	80061e4 <UART_RxISR_8BIT_FIFOEN+0x210>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2200      	movs	r2, #0
 8006188:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800618a:	f3ef 8310 	mrs	r3, PRIMASK
 800618e:	623b      	str	r3, [r7, #32]
  return(result);
 8006190:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006192:	653b      	str	r3, [r7, #80]	; 0x50
 8006194:	2301      	movs	r3, #1
 8006196:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800619a:	f383 8810 	msr	PRIMASK, r3
}
 800619e:	46c0      	nop			; (mov r8, r8)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	681a      	ldr	r2, [r3, #0]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	2110      	movs	r1, #16
 80061ac:	438a      	bics	r2, r1
 80061ae:	601a      	str	r2, [r3, #0]
 80061b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061b2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061b6:	f383 8810 	msr	PRIMASK, r3
}
 80061ba:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	69db      	ldr	r3, [r3, #28]
 80061c2:	2210      	movs	r2, #16
 80061c4:	4013      	ands	r3, r2
 80061c6:	2b10      	cmp	r3, #16
 80061c8:	d103      	bne.n	80061d2 <UART_RxISR_8BIT_FIFOEN+0x1fe>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	2210      	movs	r2, #16
 80061d0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	225c      	movs	r2, #92	; 0x5c
 80061d6:	5a9a      	ldrh	r2, [r3, r2]
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	0011      	movs	r1, r2
 80061dc:	0018      	movs	r0, r3
 80061de:	f7fe ff09 	bl	8004ff4 <HAL_UARTEx_RxEventCallback>
 80061e2:	e003      	b.n	80061ec <UART_RxISR_8BIT_FIFOEN+0x218>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	0018      	movs	r0, r3
 80061e8:	f7fb f8dc 	bl	80013a4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80061ec:	235e      	movs	r3, #94	; 0x5e
 80061ee:	18fb      	adds	r3, r7, r3
 80061f0:	881b      	ldrh	r3, [r3, #0]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d004      	beq.n	8006200 <UART_RxISR_8BIT_FIFOEN+0x22c>
 80061f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061f8:	2220      	movs	r2, #32
 80061fa:	4013      	ands	r3, r2
 80061fc:	d000      	beq.n	8006200 <UART_RxISR_8BIT_FIFOEN+0x22c>
 80061fe:	e70c      	b.n	800601a <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006200:	204e      	movs	r0, #78	; 0x4e
 8006202:	183b      	adds	r3, r7, r0
 8006204:	687a      	ldr	r2, [r7, #4]
 8006206:	215e      	movs	r1, #94	; 0x5e
 8006208:	5a52      	ldrh	r2, [r2, r1]
 800620a:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800620c:	0001      	movs	r1, r0
 800620e:	187b      	adds	r3, r7, r1
 8006210:	881b      	ldrh	r3, [r3, #0]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d044      	beq.n	80062a0 <UART_RxISR_8BIT_FIFOEN+0x2cc>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2268      	movs	r2, #104	; 0x68
 800621a:	5a9b      	ldrh	r3, [r3, r2]
 800621c:	187a      	adds	r2, r7, r1
 800621e:	8812      	ldrh	r2, [r2, #0]
 8006220:	429a      	cmp	r2, r3
 8006222:	d23d      	bcs.n	80062a0 <UART_RxISR_8BIT_FIFOEN+0x2cc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006224:	f3ef 8310 	mrs	r3, PRIMASK
 8006228:	60bb      	str	r3, [r7, #8]
  return(result);
 800622a:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800622c:	64bb      	str	r3, [r7, #72]	; 0x48
 800622e:	2301      	movs	r3, #1
 8006230:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	f383 8810 	msr	PRIMASK, r3
}
 8006238:	46c0      	nop			; (mov r8, r8)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	689a      	ldr	r2, [r3, #8]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	491a      	ldr	r1, [pc, #104]	; (80062b0 <UART_RxISR_8BIT_FIFOEN+0x2dc>)
 8006246:	400a      	ands	r2, r1
 8006248:	609a      	str	r2, [r3, #8]
 800624a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800624c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800624e:	693b      	ldr	r3, [r7, #16]
 8006250:	f383 8810 	msr	PRIMASK, r3
}
 8006254:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	4a16      	ldr	r2, [pc, #88]	; (80062b4 <UART_RxISR_8BIT_FIFOEN+0x2e0>)
 800625a:	671a      	str	r2, [r3, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800625c:	f3ef 8310 	mrs	r3, PRIMASK
 8006260:	617b      	str	r3, [r7, #20]
  return(result);
 8006262:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006264:	647b      	str	r3, [r7, #68]	; 0x44
 8006266:	2301      	movs	r3, #1
 8006268:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800626a:	69bb      	ldr	r3, [r7, #24]
 800626c:	f383 8810 	msr	PRIMASK, r3
}
 8006270:	46c0      	nop			; (mov r8, r8)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	681a      	ldr	r2, [r3, #0]
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	2120      	movs	r1, #32
 800627e:	430a      	orrs	r2, r1
 8006280:	601a      	str	r2, [r3, #0]
 8006282:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006284:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006286:	69fb      	ldr	r3, [r7, #28]
 8006288:	f383 8810 	msr	PRIMASK, r3
}
 800628c:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800628e:	e007      	b.n	80062a0 <UART_RxISR_8BIT_FIFOEN+0x2cc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	699a      	ldr	r2, [r3, #24]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	2108      	movs	r1, #8
 800629c:	430a      	orrs	r2, r1
 800629e:	619a      	str	r2, [r3, #24]
}
 80062a0:	46c0      	nop			; (mov r8, r8)
 80062a2:	46bd      	mov	sp, r7
 80062a4:	b01c      	add	sp, #112	; 0x70
 80062a6:	bd80      	pop	{r7, pc}
 80062a8:	fffffeff 	.word	0xfffffeff
 80062ac:	effffffe 	.word	0xeffffffe
 80062b0:	efffffff 	.word	0xefffffff
 80062b4:	08005cfd 	.word	0x08005cfd

080062b8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b09e      	sub	sp, #120	; 0x78
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80062c0:	2372      	movs	r3, #114	; 0x72
 80062c2:	18fb      	adds	r3, r7, r3
 80062c4:	687a      	ldr	r2, [r7, #4]
 80062c6:	2160      	movs	r1, #96	; 0x60
 80062c8:	5a52      	ldrh	r2, [r2, r1]
 80062ca:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	69db      	ldr	r3, [r3, #28]
 80062d2:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	689b      	ldr	r3, [r3, #8]
 80062e2:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2288      	movs	r2, #136	; 0x88
 80062e8:	589b      	ldr	r3, [r3, r2]
 80062ea:	2b22      	cmp	r3, #34	; 0x22
 80062ec:	d000      	beq.n	80062f0 <UART_RxISR_16BIT_FIFOEN+0x38>
 80062ee:	e141      	b.n	8006574 <UART_RxISR_16BIT_FIFOEN+0x2bc>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80062f0:	2366      	movs	r3, #102	; 0x66
 80062f2:	18fb      	adds	r3, r7, r3
 80062f4:	687a      	ldr	r2, [r7, #4]
 80062f6:	2168      	movs	r1, #104	; 0x68
 80062f8:	5a52      	ldrh	r2, [r2, r1]
 80062fa:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80062fc:	e0e8      	b.n	80064d0 <UART_RxISR_16BIT_FIFOEN+0x218>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006304:	2164      	movs	r1, #100	; 0x64
 8006306:	187b      	adds	r3, r7, r1
 8006308:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800630e:	663b      	str	r3, [r7, #96]	; 0x60
      *tmp = (uint16_t)(uhdata & uhMask);
 8006310:	187b      	adds	r3, r7, r1
 8006312:	2272      	movs	r2, #114	; 0x72
 8006314:	18ba      	adds	r2, r7, r2
 8006316:	881b      	ldrh	r3, [r3, #0]
 8006318:	8812      	ldrh	r2, [r2, #0]
 800631a:	4013      	ands	r3, r2
 800631c:	b29a      	uxth	r2, r3
 800631e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006320:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006326:	1c9a      	adds	r2, r3, #2
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	225e      	movs	r2, #94	; 0x5e
 8006330:	5a9b      	ldrh	r3, [r3, r2]
 8006332:	b29b      	uxth	r3, r3
 8006334:	3b01      	subs	r3, #1
 8006336:	b299      	uxth	r1, r3
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	225e      	movs	r2, #94	; 0x5e
 800633c:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	69db      	ldr	r3, [r3, #28]
 8006344:	677b      	str	r3, [r7, #116]	; 0x74

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006346:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006348:	2207      	movs	r2, #7
 800634a:	4013      	ands	r3, r2
 800634c:	d049      	beq.n	80063e2 <UART_RxISR_16BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800634e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006350:	2201      	movs	r2, #1
 8006352:	4013      	ands	r3, r2
 8006354:	d010      	beq.n	8006378 <UART_RxISR_16BIT_FIFOEN+0xc0>
 8006356:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006358:	2380      	movs	r3, #128	; 0x80
 800635a:	005b      	lsls	r3, r3, #1
 800635c:	4013      	ands	r3, r2
 800635e:	d00b      	beq.n	8006378 <UART_RxISR_16BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	2201      	movs	r2, #1
 8006366:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	228c      	movs	r2, #140	; 0x8c
 800636c:	589b      	ldr	r3, [r3, r2]
 800636e:	2201      	movs	r2, #1
 8006370:	431a      	orrs	r2, r3
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	218c      	movs	r1, #140	; 0x8c
 8006376:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006378:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800637a:	2202      	movs	r2, #2
 800637c:	4013      	ands	r3, r2
 800637e:	d00f      	beq.n	80063a0 <UART_RxISR_16BIT_FIFOEN+0xe8>
 8006380:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006382:	2201      	movs	r2, #1
 8006384:	4013      	ands	r3, r2
 8006386:	d00b      	beq.n	80063a0 <UART_RxISR_16BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	2202      	movs	r2, #2
 800638e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	228c      	movs	r2, #140	; 0x8c
 8006394:	589b      	ldr	r3, [r3, r2]
 8006396:	2204      	movs	r2, #4
 8006398:	431a      	orrs	r2, r3
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	218c      	movs	r1, #140	; 0x8c
 800639e:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80063a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80063a2:	2204      	movs	r2, #4
 80063a4:	4013      	ands	r3, r2
 80063a6:	d00f      	beq.n	80063c8 <UART_RxISR_16BIT_FIFOEN+0x110>
 80063a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80063aa:	2201      	movs	r2, #1
 80063ac:	4013      	ands	r3, r2
 80063ae:	d00b      	beq.n	80063c8 <UART_RxISR_16BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	2204      	movs	r2, #4
 80063b6:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	228c      	movs	r2, #140	; 0x8c
 80063bc:	589b      	ldr	r3, [r3, r2]
 80063be:	2202      	movs	r2, #2
 80063c0:	431a      	orrs	r2, r3
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	218c      	movs	r1, #140	; 0x8c
 80063c6:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	228c      	movs	r2, #140	; 0x8c
 80063cc:	589b      	ldr	r3, [r3, r2]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d007      	beq.n	80063e2 <UART_RxISR_16BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	0018      	movs	r0, r3
 80063d6:	f7fe fe05 	bl	8004fe4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	228c      	movs	r2, #140	; 0x8c
 80063de:	2100      	movs	r1, #0
 80063e0:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	225e      	movs	r2, #94	; 0x5e
 80063e6:	5a9b      	ldrh	r3, [r3, r2]
 80063e8:	b29b      	uxth	r3, r3
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d170      	bne.n	80064d0 <UART_RxISR_16BIT_FIFOEN+0x218>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80063ee:	f3ef 8310 	mrs	r3, PRIMASK
 80063f2:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80063f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80063f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80063f8:	2301      	movs	r3, #1
 80063fa:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063fe:	f383 8810 	msr	PRIMASK, r3
}
 8006402:	46c0      	nop			; (mov r8, r8)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	681a      	ldr	r2, [r3, #0]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	495f      	ldr	r1, [pc, #380]	; (800658c <UART_RxISR_16BIT_FIFOEN+0x2d4>)
 8006410:	400a      	ands	r2, r1
 8006412:	601a      	str	r2, [r3, #0]
 8006414:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006416:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800641a:	f383 8810 	msr	PRIMASK, r3
}
 800641e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006420:	f3ef 8310 	mrs	r3, PRIMASK
 8006424:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8006426:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006428:	65bb      	str	r3, [r7, #88]	; 0x58
 800642a:	2301      	movs	r3, #1
 800642c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800642e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006430:	f383 8810 	msr	PRIMASK, r3
}
 8006434:	46c0      	nop			; (mov r8, r8)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	689a      	ldr	r2, [r3, #8]
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4953      	ldr	r1, [pc, #332]	; (8006590 <UART_RxISR_16BIT_FIFOEN+0x2d8>)
 8006442:	400a      	ands	r2, r1
 8006444:	609a      	str	r2, [r3, #8]
 8006446:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006448:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800644a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800644c:	f383 8810 	msr	PRIMASK, r3
}
 8006450:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2288      	movs	r2, #136	; 0x88
 8006456:	2120      	movs	r1, #32
 8006458:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2200      	movs	r2, #0
 800645e:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006464:	2b01      	cmp	r3, #1
 8006466:	d12f      	bne.n	80064c8 <UART_RxISR_16BIT_FIFOEN+0x210>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2200      	movs	r2, #0
 800646c:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800646e:	f3ef 8310 	mrs	r3, PRIMASK
 8006472:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006474:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006476:	657b      	str	r3, [r7, #84]	; 0x54
 8006478:	2301      	movs	r3, #1
 800647a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800647c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800647e:	f383 8810 	msr	PRIMASK, r3
}
 8006482:	46c0      	nop			; (mov r8, r8)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	681a      	ldr	r2, [r3, #0]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	2110      	movs	r1, #16
 8006490:	438a      	bics	r2, r1
 8006492:	601a      	str	r2, [r3, #0]
 8006494:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006496:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800649a:	f383 8810 	msr	PRIMASK, r3
}
 800649e:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	69db      	ldr	r3, [r3, #28]
 80064a6:	2210      	movs	r2, #16
 80064a8:	4013      	ands	r3, r2
 80064aa:	2b10      	cmp	r3, #16
 80064ac:	d103      	bne.n	80064b6 <UART_RxISR_16BIT_FIFOEN+0x1fe>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	2210      	movs	r2, #16
 80064b4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	225c      	movs	r2, #92	; 0x5c
 80064ba:	5a9a      	ldrh	r2, [r3, r2]
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	0011      	movs	r1, r2
 80064c0:	0018      	movs	r0, r3
 80064c2:	f7fe fd97 	bl	8004ff4 <HAL_UARTEx_RxEventCallback>
 80064c6:	e003      	b.n	80064d0 <UART_RxISR_16BIT_FIFOEN+0x218>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	0018      	movs	r0, r3
 80064cc:	f7fa ff6a 	bl	80013a4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80064d0:	2366      	movs	r3, #102	; 0x66
 80064d2:	18fb      	adds	r3, r7, r3
 80064d4:	881b      	ldrh	r3, [r3, #0]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d004      	beq.n	80064e4 <UART_RxISR_16BIT_FIFOEN+0x22c>
 80064da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80064dc:	2220      	movs	r2, #32
 80064de:	4013      	ands	r3, r2
 80064e0:	d000      	beq.n	80064e4 <UART_RxISR_16BIT_FIFOEN+0x22c>
 80064e2:	e70c      	b.n	80062fe <UART_RxISR_16BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80064e4:	2052      	movs	r0, #82	; 0x52
 80064e6:	183b      	adds	r3, r7, r0
 80064e8:	687a      	ldr	r2, [r7, #4]
 80064ea:	215e      	movs	r1, #94	; 0x5e
 80064ec:	5a52      	ldrh	r2, [r2, r1]
 80064ee:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80064f0:	0001      	movs	r1, r0
 80064f2:	187b      	adds	r3, r7, r1
 80064f4:	881b      	ldrh	r3, [r3, #0]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d044      	beq.n	8006584 <UART_RxISR_16BIT_FIFOEN+0x2cc>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2268      	movs	r2, #104	; 0x68
 80064fe:	5a9b      	ldrh	r3, [r3, r2]
 8006500:	187a      	adds	r2, r7, r1
 8006502:	8812      	ldrh	r2, [r2, #0]
 8006504:	429a      	cmp	r2, r3
 8006506:	d23d      	bcs.n	8006584 <UART_RxISR_16BIT_FIFOEN+0x2cc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006508:	f3ef 8310 	mrs	r3, PRIMASK
 800650c:	60fb      	str	r3, [r7, #12]
  return(result);
 800650e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006510:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006512:	2301      	movs	r3, #1
 8006514:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006516:	693b      	ldr	r3, [r7, #16]
 8006518:	f383 8810 	msr	PRIMASK, r3
}
 800651c:	46c0      	nop			; (mov r8, r8)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	689a      	ldr	r2, [r3, #8]
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	491a      	ldr	r1, [pc, #104]	; (8006594 <UART_RxISR_16BIT_FIFOEN+0x2dc>)
 800652a:	400a      	ands	r2, r1
 800652c:	609a      	str	r2, [r3, #8]
 800652e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006530:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	f383 8810 	msr	PRIMASK, r3
}
 8006538:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	4a16      	ldr	r2, [pc, #88]	; (8006598 <UART_RxISR_16BIT_FIFOEN+0x2e0>)
 800653e:	671a      	str	r2, [r3, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006540:	f3ef 8310 	mrs	r3, PRIMASK
 8006544:	61bb      	str	r3, [r7, #24]
  return(result);
 8006546:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006548:	64bb      	str	r3, [r7, #72]	; 0x48
 800654a:	2301      	movs	r3, #1
 800654c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800654e:	69fb      	ldr	r3, [r7, #28]
 8006550:	f383 8810 	msr	PRIMASK, r3
}
 8006554:	46c0      	nop			; (mov r8, r8)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	681a      	ldr	r2, [r3, #0]
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	2120      	movs	r1, #32
 8006562:	430a      	orrs	r2, r1
 8006564:	601a      	str	r2, [r3, #0]
 8006566:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006568:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800656a:	6a3b      	ldr	r3, [r7, #32]
 800656c:	f383 8810 	msr	PRIMASK, r3
}
 8006570:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006572:	e007      	b.n	8006584 <UART_RxISR_16BIT_FIFOEN+0x2cc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	699a      	ldr	r2, [r3, #24]
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	2108      	movs	r1, #8
 8006580:	430a      	orrs	r2, r1
 8006582:	619a      	str	r2, [r3, #24]
}
 8006584:	46c0      	nop			; (mov r8, r8)
 8006586:	46bd      	mov	sp, r7
 8006588:	b01e      	add	sp, #120	; 0x78
 800658a:	bd80      	pop	{r7, pc}
 800658c:	fffffeff 	.word	0xfffffeff
 8006590:	effffffe 	.word	0xeffffffe
 8006594:	efffffff 	.word	0xefffffff
 8006598:	08005e69 	.word	0x08005e69

0800659c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b082      	sub	sp, #8
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80065a4:	46c0      	nop			; (mov r8, r8)
 80065a6:	46bd      	mov	sp, r7
 80065a8:	b002      	add	sp, #8
 80065aa:	bd80      	pop	{r7, pc}

080065ac <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b082      	sub	sp, #8
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80065b4:	46c0      	nop			; (mov r8, r8)
 80065b6:	46bd      	mov	sp, r7
 80065b8:	b002      	add	sp, #8
 80065ba:	bd80      	pop	{r7, pc}

080065bc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b082      	sub	sp, #8
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80065c4:	46c0      	nop			; (mov r8, r8)
 80065c6:	46bd      	mov	sp, r7
 80065c8:	b002      	add	sp, #8
 80065ca:	bd80      	pop	{r7, pc}

080065cc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b084      	sub	sp, #16
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2280      	movs	r2, #128	; 0x80
 80065d8:	5c9b      	ldrb	r3, [r3, r2]
 80065da:	2b01      	cmp	r3, #1
 80065dc:	d101      	bne.n	80065e2 <HAL_UARTEx_DisableFifoMode+0x16>
 80065de:	2302      	movs	r3, #2
 80065e0:	e027      	b.n	8006632 <HAL_UARTEx_DisableFifoMode+0x66>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2280      	movs	r2, #128	; 0x80
 80065e6:	2101      	movs	r1, #1
 80065e8:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2284      	movs	r2, #132	; 0x84
 80065ee:	2124      	movs	r1, #36	; 0x24
 80065f0:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	681a      	ldr	r2, [r3, #0]
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	2101      	movs	r1, #1
 8006606:	438a      	bics	r2, r1
 8006608:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	4a0b      	ldr	r2, [pc, #44]	; (800663c <HAL_UARTEx_DisableFifoMode+0x70>)
 800660e:	4013      	ands	r3, r2
 8006610:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2200      	movs	r2, #0
 8006616:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	68fa      	ldr	r2, [r7, #12]
 800661e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2284      	movs	r2, #132	; 0x84
 8006624:	2120      	movs	r1, #32
 8006626:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2280      	movs	r2, #128	; 0x80
 800662c:	2100      	movs	r1, #0
 800662e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006630:	2300      	movs	r3, #0
}
 8006632:	0018      	movs	r0, r3
 8006634:	46bd      	mov	sp, r7
 8006636:	b004      	add	sp, #16
 8006638:	bd80      	pop	{r7, pc}
 800663a:	46c0      	nop			; (mov r8, r8)
 800663c:	dfffffff 	.word	0xdfffffff

08006640 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b084      	sub	sp, #16
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
 8006648:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2280      	movs	r2, #128	; 0x80
 800664e:	5c9b      	ldrb	r3, [r3, r2]
 8006650:	2b01      	cmp	r3, #1
 8006652:	d101      	bne.n	8006658 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006654:	2302      	movs	r3, #2
 8006656:	e02e      	b.n	80066b6 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2280      	movs	r2, #128	; 0x80
 800665c:	2101      	movs	r1, #1
 800665e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2284      	movs	r2, #132	; 0x84
 8006664:	2124      	movs	r1, #36	; 0x24
 8006666:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	681a      	ldr	r2, [r3, #0]
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	2101      	movs	r1, #1
 800667c:	438a      	bics	r2, r1
 800667e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	689b      	ldr	r3, [r3, #8]
 8006686:	00db      	lsls	r3, r3, #3
 8006688:	08d9      	lsrs	r1, r3, #3
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	683a      	ldr	r2, [r7, #0]
 8006690:	430a      	orrs	r2, r1
 8006692:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	0018      	movs	r0, r3
 8006698:	f000 f854 	bl	8006744 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	68fa      	ldr	r2, [r7, #12]
 80066a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2284      	movs	r2, #132	; 0x84
 80066a8:	2120      	movs	r1, #32
 80066aa:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2280      	movs	r2, #128	; 0x80
 80066b0:	2100      	movs	r1, #0
 80066b2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80066b4:	2300      	movs	r3, #0
}
 80066b6:	0018      	movs	r0, r3
 80066b8:	46bd      	mov	sp, r7
 80066ba:	b004      	add	sp, #16
 80066bc:	bd80      	pop	{r7, pc}
	...

080066c0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b084      	sub	sp, #16
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
 80066c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2280      	movs	r2, #128	; 0x80
 80066ce:	5c9b      	ldrb	r3, [r3, r2]
 80066d0:	2b01      	cmp	r3, #1
 80066d2:	d101      	bne.n	80066d8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80066d4:	2302      	movs	r3, #2
 80066d6:	e02f      	b.n	8006738 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2280      	movs	r2, #128	; 0x80
 80066dc:	2101      	movs	r1, #1
 80066de:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2284      	movs	r2, #132	; 0x84
 80066e4:	2124      	movs	r1, #36	; 0x24
 80066e6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	681a      	ldr	r2, [r3, #0]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	2101      	movs	r1, #1
 80066fc:	438a      	bics	r2, r1
 80066fe:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	689b      	ldr	r3, [r3, #8]
 8006706:	4a0e      	ldr	r2, [pc, #56]	; (8006740 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8006708:	4013      	ands	r3, r2
 800670a:	0019      	movs	r1, r3
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	683a      	ldr	r2, [r7, #0]
 8006712:	430a      	orrs	r2, r1
 8006714:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	0018      	movs	r0, r3
 800671a:	f000 f813 	bl	8006744 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	68fa      	ldr	r2, [r7, #12]
 8006724:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2284      	movs	r2, #132	; 0x84
 800672a:	2120      	movs	r1, #32
 800672c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2280      	movs	r2, #128	; 0x80
 8006732:	2100      	movs	r1, #0
 8006734:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006736:	2300      	movs	r3, #0
}
 8006738:	0018      	movs	r0, r3
 800673a:	46bd      	mov	sp, r7
 800673c:	b004      	add	sp, #16
 800673e:	bd80      	pop	{r7, pc}
 8006740:	f1ffffff 	.word	0xf1ffffff

08006744 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006744:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006746:	b085      	sub	sp, #20
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006750:	2b00      	cmp	r3, #0
 8006752:	d108      	bne.n	8006766 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	226a      	movs	r2, #106	; 0x6a
 8006758:	2101      	movs	r1, #1
 800675a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2268      	movs	r2, #104	; 0x68
 8006760:	2101      	movs	r1, #1
 8006762:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006764:	e043      	b.n	80067ee <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006766:	260f      	movs	r6, #15
 8006768:	19bb      	adds	r3, r7, r6
 800676a:	2208      	movs	r2, #8
 800676c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800676e:	200e      	movs	r0, #14
 8006770:	183b      	adds	r3, r7, r0
 8006772:	2208      	movs	r2, #8
 8006774:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	689b      	ldr	r3, [r3, #8]
 800677c:	0e5b      	lsrs	r3, r3, #25
 800677e:	b2da      	uxtb	r2, r3
 8006780:	240d      	movs	r4, #13
 8006782:	193b      	adds	r3, r7, r4
 8006784:	2107      	movs	r1, #7
 8006786:	400a      	ands	r2, r1
 8006788:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	689b      	ldr	r3, [r3, #8]
 8006790:	0f5b      	lsrs	r3, r3, #29
 8006792:	b2da      	uxtb	r2, r3
 8006794:	250c      	movs	r5, #12
 8006796:	197b      	adds	r3, r7, r5
 8006798:	2107      	movs	r1, #7
 800679a:	400a      	ands	r2, r1
 800679c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800679e:	183b      	adds	r3, r7, r0
 80067a0:	781b      	ldrb	r3, [r3, #0]
 80067a2:	197a      	adds	r2, r7, r5
 80067a4:	7812      	ldrb	r2, [r2, #0]
 80067a6:	4914      	ldr	r1, [pc, #80]	; (80067f8 <UARTEx_SetNbDataToProcess+0xb4>)
 80067a8:	5c8a      	ldrb	r2, [r1, r2]
 80067aa:	435a      	muls	r2, r3
 80067ac:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80067ae:	197b      	adds	r3, r7, r5
 80067b0:	781b      	ldrb	r3, [r3, #0]
 80067b2:	4a12      	ldr	r2, [pc, #72]	; (80067fc <UARTEx_SetNbDataToProcess+0xb8>)
 80067b4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80067b6:	0019      	movs	r1, r3
 80067b8:	f7f9 fd42 	bl	8000240 <__divsi3>
 80067bc:	0003      	movs	r3, r0
 80067be:	b299      	uxth	r1, r3
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	226a      	movs	r2, #106	; 0x6a
 80067c4:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80067c6:	19bb      	adds	r3, r7, r6
 80067c8:	781b      	ldrb	r3, [r3, #0]
 80067ca:	193a      	adds	r2, r7, r4
 80067cc:	7812      	ldrb	r2, [r2, #0]
 80067ce:	490a      	ldr	r1, [pc, #40]	; (80067f8 <UARTEx_SetNbDataToProcess+0xb4>)
 80067d0:	5c8a      	ldrb	r2, [r1, r2]
 80067d2:	435a      	muls	r2, r3
 80067d4:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80067d6:	193b      	adds	r3, r7, r4
 80067d8:	781b      	ldrb	r3, [r3, #0]
 80067da:	4a08      	ldr	r2, [pc, #32]	; (80067fc <UARTEx_SetNbDataToProcess+0xb8>)
 80067dc:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80067de:	0019      	movs	r1, r3
 80067e0:	f7f9 fd2e 	bl	8000240 <__divsi3>
 80067e4:	0003      	movs	r3, r0
 80067e6:	b299      	uxth	r1, r3
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2268      	movs	r2, #104	; 0x68
 80067ec:	5299      	strh	r1, [r3, r2]
}
 80067ee:	46c0      	nop			; (mov r8, r8)
 80067f0:	46bd      	mov	sp, r7
 80067f2:	b005      	add	sp, #20
 80067f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067f6:	46c0      	nop			; (mov r8, r8)
 80067f8:	08007238 	.word	0x08007238
 80067fc:	08007240 	.word	0x08007240

08006800 <__errno>:
 8006800:	4b01      	ldr	r3, [pc, #4]	; (8006808 <__errno+0x8>)
 8006802:	6818      	ldr	r0, [r3, #0]
 8006804:	4770      	bx	lr
 8006806:	46c0      	nop			; (mov r8, r8)
 8006808:	20000010 	.word	0x20000010

0800680c <__libc_init_array>:
 800680c:	b570      	push	{r4, r5, r6, lr}
 800680e:	2600      	movs	r6, #0
 8006810:	4d0c      	ldr	r5, [pc, #48]	; (8006844 <__libc_init_array+0x38>)
 8006812:	4c0d      	ldr	r4, [pc, #52]	; (8006848 <__libc_init_array+0x3c>)
 8006814:	1b64      	subs	r4, r4, r5
 8006816:	10a4      	asrs	r4, r4, #2
 8006818:	42a6      	cmp	r6, r4
 800681a:	d109      	bne.n	8006830 <__libc_init_array+0x24>
 800681c:	2600      	movs	r6, #0
 800681e:	f000 fc47 	bl	80070b0 <_init>
 8006822:	4d0a      	ldr	r5, [pc, #40]	; (800684c <__libc_init_array+0x40>)
 8006824:	4c0a      	ldr	r4, [pc, #40]	; (8006850 <__libc_init_array+0x44>)
 8006826:	1b64      	subs	r4, r4, r5
 8006828:	10a4      	asrs	r4, r4, #2
 800682a:	42a6      	cmp	r6, r4
 800682c:	d105      	bne.n	800683a <__libc_init_array+0x2e>
 800682e:	bd70      	pop	{r4, r5, r6, pc}
 8006830:	00b3      	lsls	r3, r6, #2
 8006832:	58eb      	ldr	r3, [r5, r3]
 8006834:	4798      	blx	r3
 8006836:	3601      	adds	r6, #1
 8006838:	e7ee      	b.n	8006818 <__libc_init_array+0xc>
 800683a:	00b3      	lsls	r3, r6, #2
 800683c:	58eb      	ldr	r3, [r5, r3]
 800683e:	4798      	blx	r3
 8006840:	3601      	adds	r6, #1
 8006842:	e7f2      	b.n	800682a <__libc_init_array+0x1e>
 8006844:	08007284 	.word	0x08007284
 8006848:	08007284 	.word	0x08007284
 800684c:	08007284 	.word	0x08007284
 8006850:	08007288 	.word	0x08007288

08006854 <memcpy>:
 8006854:	2300      	movs	r3, #0
 8006856:	b510      	push	{r4, lr}
 8006858:	429a      	cmp	r2, r3
 800685a:	d100      	bne.n	800685e <memcpy+0xa>
 800685c:	bd10      	pop	{r4, pc}
 800685e:	5ccc      	ldrb	r4, [r1, r3]
 8006860:	54c4      	strb	r4, [r0, r3]
 8006862:	3301      	adds	r3, #1
 8006864:	e7f8      	b.n	8006858 <memcpy+0x4>

08006866 <memset>:
 8006866:	0003      	movs	r3, r0
 8006868:	1882      	adds	r2, r0, r2
 800686a:	4293      	cmp	r3, r2
 800686c:	d100      	bne.n	8006870 <memset+0xa>
 800686e:	4770      	bx	lr
 8006870:	7019      	strb	r1, [r3, #0]
 8006872:	3301      	adds	r3, #1
 8006874:	e7f9      	b.n	800686a <memset+0x4>
	...

08006878 <siprintf>:
 8006878:	b40e      	push	{r1, r2, r3}
 800687a:	b500      	push	{lr}
 800687c:	490b      	ldr	r1, [pc, #44]	; (80068ac <siprintf+0x34>)
 800687e:	b09c      	sub	sp, #112	; 0x70
 8006880:	ab1d      	add	r3, sp, #116	; 0x74
 8006882:	9002      	str	r0, [sp, #8]
 8006884:	9006      	str	r0, [sp, #24]
 8006886:	9107      	str	r1, [sp, #28]
 8006888:	9104      	str	r1, [sp, #16]
 800688a:	4809      	ldr	r0, [pc, #36]	; (80068b0 <siprintf+0x38>)
 800688c:	4909      	ldr	r1, [pc, #36]	; (80068b4 <siprintf+0x3c>)
 800688e:	cb04      	ldmia	r3!, {r2}
 8006890:	9105      	str	r1, [sp, #20]
 8006892:	6800      	ldr	r0, [r0, #0]
 8006894:	a902      	add	r1, sp, #8
 8006896:	9301      	str	r3, [sp, #4]
 8006898:	f000 f870 	bl	800697c <_svfiprintf_r>
 800689c:	2300      	movs	r3, #0
 800689e:	9a02      	ldr	r2, [sp, #8]
 80068a0:	7013      	strb	r3, [r2, #0]
 80068a2:	b01c      	add	sp, #112	; 0x70
 80068a4:	bc08      	pop	{r3}
 80068a6:	b003      	add	sp, #12
 80068a8:	4718      	bx	r3
 80068aa:	46c0      	nop			; (mov r8, r8)
 80068ac:	7fffffff 	.word	0x7fffffff
 80068b0:	20000010 	.word	0x20000010
 80068b4:	ffff0208 	.word	0xffff0208

080068b8 <__ssputs_r>:
 80068b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80068ba:	688e      	ldr	r6, [r1, #8]
 80068bc:	b085      	sub	sp, #20
 80068be:	0007      	movs	r7, r0
 80068c0:	000c      	movs	r4, r1
 80068c2:	9203      	str	r2, [sp, #12]
 80068c4:	9301      	str	r3, [sp, #4]
 80068c6:	429e      	cmp	r6, r3
 80068c8:	d83c      	bhi.n	8006944 <__ssputs_r+0x8c>
 80068ca:	2390      	movs	r3, #144	; 0x90
 80068cc:	898a      	ldrh	r2, [r1, #12]
 80068ce:	00db      	lsls	r3, r3, #3
 80068d0:	421a      	tst	r2, r3
 80068d2:	d034      	beq.n	800693e <__ssputs_r+0x86>
 80068d4:	2503      	movs	r5, #3
 80068d6:	6909      	ldr	r1, [r1, #16]
 80068d8:	6823      	ldr	r3, [r4, #0]
 80068da:	1a5b      	subs	r3, r3, r1
 80068dc:	9302      	str	r3, [sp, #8]
 80068de:	6963      	ldr	r3, [r4, #20]
 80068e0:	9802      	ldr	r0, [sp, #8]
 80068e2:	435d      	muls	r5, r3
 80068e4:	0feb      	lsrs	r3, r5, #31
 80068e6:	195d      	adds	r5, r3, r5
 80068e8:	9b01      	ldr	r3, [sp, #4]
 80068ea:	106d      	asrs	r5, r5, #1
 80068ec:	3301      	adds	r3, #1
 80068ee:	181b      	adds	r3, r3, r0
 80068f0:	42ab      	cmp	r3, r5
 80068f2:	d900      	bls.n	80068f6 <__ssputs_r+0x3e>
 80068f4:	001d      	movs	r5, r3
 80068f6:	0553      	lsls	r3, r2, #21
 80068f8:	d532      	bpl.n	8006960 <__ssputs_r+0xa8>
 80068fa:	0029      	movs	r1, r5
 80068fc:	0038      	movs	r0, r7
 80068fe:	f000 fb27 	bl	8006f50 <_malloc_r>
 8006902:	1e06      	subs	r6, r0, #0
 8006904:	d109      	bne.n	800691a <__ssputs_r+0x62>
 8006906:	230c      	movs	r3, #12
 8006908:	603b      	str	r3, [r7, #0]
 800690a:	2340      	movs	r3, #64	; 0x40
 800690c:	2001      	movs	r0, #1
 800690e:	89a2      	ldrh	r2, [r4, #12]
 8006910:	4240      	negs	r0, r0
 8006912:	4313      	orrs	r3, r2
 8006914:	81a3      	strh	r3, [r4, #12]
 8006916:	b005      	add	sp, #20
 8006918:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800691a:	9a02      	ldr	r2, [sp, #8]
 800691c:	6921      	ldr	r1, [r4, #16]
 800691e:	f7ff ff99 	bl	8006854 <memcpy>
 8006922:	89a3      	ldrh	r3, [r4, #12]
 8006924:	4a14      	ldr	r2, [pc, #80]	; (8006978 <__ssputs_r+0xc0>)
 8006926:	401a      	ands	r2, r3
 8006928:	2380      	movs	r3, #128	; 0x80
 800692a:	4313      	orrs	r3, r2
 800692c:	81a3      	strh	r3, [r4, #12]
 800692e:	9b02      	ldr	r3, [sp, #8]
 8006930:	6126      	str	r6, [r4, #16]
 8006932:	18f6      	adds	r6, r6, r3
 8006934:	6026      	str	r6, [r4, #0]
 8006936:	6165      	str	r5, [r4, #20]
 8006938:	9e01      	ldr	r6, [sp, #4]
 800693a:	1aed      	subs	r5, r5, r3
 800693c:	60a5      	str	r5, [r4, #8]
 800693e:	9b01      	ldr	r3, [sp, #4]
 8006940:	429e      	cmp	r6, r3
 8006942:	d900      	bls.n	8006946 <__ssputs_r+0x8e>
 8006944:	9e01      	ldr	r6, [sp, #4]
 8006946:	0032      	movs	r2, r6
 8006948:	9903      	ldr	r1, [sp, #12]
 800694a:	6820      	ldr	r0, [r4, #0]
 800694c:	f000 faa3 	bl	8006e96 <memmove>
 8006950:	68a3      	ldr	r3, [r4, #8]
 8006952:	2000      	movs	r0, #0
 8006954:	1b9b      	subs	r3, r3, r6
 8006956:	60a3      	str	r3, [r4, #8]
 8006958:	6823      	ldr	r3, [r4, #0]
 800695a:	199e      	adds	r6, r3, r6
 800695c:	6026      	str	r6, [r4, #0]
 800695e:	e7da      	b.n	8006916 <__ssputs_r+0x5e>
 8006960:	002a      	movs	r2, r5
 8006962:	0038      	movs	r0, r7
 8006964:	f000 fb52 	bl	800700c <_realloc_r>
 8006968:	1e06      	subs	r6, r0, #0
 800696a:	d1e0      	bne.n	800692e <__ssputs_r+0x76>
 800696c:	0038      	movs	r0, r7
 800696e:	6921      	ldr	r1, [r4, #16]
 8006970:	f000 faa4 	bl	8006ebc <_free_r>
 8006974:	e7c7      	b.n	8006906 <__ssputs_r+0x4e>
 8006976:	46c0      	nop			; (mov r8, r8)
 8006978:	fffffb7f 	.word	0xfffffb7f

0800697c <_svfiprintf_r>:
 800697c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800697e:	b0a1      	sub	sp, #132	; 0x84
 8006980:	9003      	str	r0, [sp, #12]
 8006982:	001d      	movs	r5, r3
 8006984:	898b      	ldrh	r3, [r1, #12]
 8006986:	000f      	movs	r7, r1
 8006988:	0016      	movs	r6, r2
 800698a:	061b      	lsls	r3, r3, #24
 800698c:	d511      	bpl.n	80069b2 <_svfiprintf_r+0x36>
 800698e:	690b      	ldr	r3, [r1, #16]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d10e      	bne.n	80069b2 <_svfiprintf_r+0x36>
 8006994:	2140      	movs	r1, #64	; 0x40
 8006996:	f000 fadb 	bl	8006f50 <_malloc_r>
 800699a:	6038      	str	r0, [r7, #0]
 800699c:	6138      	str	r0, [r7, #16]
 800699e:	2800      	cmp	r0, #0
 80069a0:	d105      	bne.n	80069ae <_svfiprintf_r+0x32>
 80069a2:	230c      	movs	r3, #12
 80069a4:	9a03      	ldr	r2, [sp, #12]
 80069a6:	3801      	subs	r0, #1
 80069a8:	6013      	str	r3, [r2, #0]
 80069aa:	b021      	add	sp, #132	; 0x84
 80069ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80069ae:	2340      	movs	r3, #64	; 0x40
 80069b0:	617b      	str	r3, [r7, #20]
 80069b2:	2300      	movs	r3, #0
 80069b4:	ac08      	add	r4, sp, #32
 80069b6:	6163      	str	r3, [r4, #20]
 80069b8:	3320      	adds	r3, #32
 80069ba:	7663      	strb	r3, [r4, #25]
 80069bc:	3310      	adds	r3, #16
 80069be:	76a3      	strb	r3, [r4, #26]
 80069c0:	9507      	str	r5, [sp, #28]
 80069c2:	0035      	movs	r5, r6
 80069c4:	782b      	ldrb	r3, [r5, #0]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d001      	beq.n	80069ce <_svfiprintf_r+0x52>
 80069ca:	2b25      	cmp	r3, #37	; 0x25
 80069cc:	d147      	bne.n	8006a5e <_svfiprintf_r+0xe2>
 80069ce:	1bab      	subs	r3, r5, r6
 80069d0:	9305      	str	r3, [sp, #20]
 80069d2:	42b5      	cmp	r5, r6
 80069d4:	d00c      	beq.n	80069f0 <_svfiprintf_r+0x74>
 80069d6:	0032      	movs	r2, r6
 80069d8:	0039      	movs	r1, r7
 80069da:	9803      	ldr	r0, [sp, #12]
 80069dc:	f7ff ff6c 	bl	80068b8 <__ssputs_r>
 80069e0:	1c43      	adds	r3, r0, #1
 80069e2:	d100      	bne.n	80069e6 <_svfiprintf_r+0x6a>
 80069e4:	e0ae      	b.n	8006b44 <_svfiprintf_r+0x1c8>
 80069e6:	6962      	ldr	r2, [r4, #20]
 80069e8:	9b05      	ldr	r3, [sp, #20]
 80069ea:	4694      	mov	ip, r2
 80069ec:	4463      	add	r3, ip
 80069ee:	6163      	str	r3, [r4, #20]
 80069f0:	782b      	ldrb	r3, [r5, #0]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d100      	bne.n	80069f8 <_svfiprintf_r+0x7c>
 80069f6:	e0a5      	b.n	8006b44 <_svfiprintf_r+0x1c8>
 80069f8:	2201      	movs	r2, #1
 80069fa:	2300      	movs	r3, #0
 80069fc:	4252      	negs	r2, r2
 80069fe:	6062      	str	r2, [r4, #4]
 8006a00:	a904      	add	r1, sp, #16
 8006a02:	3254      	adds	r2, #84	; 0x54
 8006a04:	1852      	adds	r2, r2, r1
 8006a06:	1c6e      	adds	r6, r5, #1
 8006a08:	6023      	str	r3, [r4, #0]
 8006a0a:	60e3      	str	r3, [r4, #12]
 8006a0c:	60a3      	str	r3, [r4, #8]
 8006a0e:	7013      	strb	r3, [r2, #0]
 8006a10:	65a3      	str	r3, [r4, #88]	; 0x58
 8006a12:	2205      	movs	r2, #5
 8006a14:	7831      	ldrb	r1, [r6, #0]
 8006a16:	4854      	ldr	r0, [pc, #336]	; (8006b68 <_svfiprintf_r+0x1ec>)
 8006a18:	f000 fa32 	bl	8006e80 <memchr>
 8006a1c:	1c75      	adds	r5, r6, #1
 8006a1e:	2800      	cmp	r0, #0
 8006a20:	d11f      	bne.n	8006a62 <_svfiprintf_r+0xe6>
 8006a22:	6822      	ldr	r2, [r4, #0]
 8006a24:	06d3      	lsls	r3, r2, #27
 8006a26:	d504      	bpl.n	8006a32 <_svfiprintf_r+0xb6>
 8006a28:	2353      	movs	r3, #83	; 0x53
 8006a2a:	a904      	add	r1, sp, #16
 8006a2c:	185b      	adds	r3, r3, r1
 8006a2e:	2120      	movs	r1, #32
 8006a30:	7019      	strb	r1, [r3, #0]
 8006a32:	0713      	lsls	r3, r2, #28
 8006a34:	d504      	bpl.n	8006a40 <_svfiprintf_r+0xc4>
 8006a36:	2353      	movs	r3, #83	; 0x53
 8006a38:	a904      	add	r1, sp, #16
 8006a3a:	185b      	adds	r3, r3, r1
 8006a3c:	212b      	movs	r1, #43	; 0x2b
 8006a3e:	7019      	strb	r1, [r3, #0]
 8006a40:	7833      	ldrb	r3, [r6, #0]
 8006a42:	2b2a      	cmp	r3, #42	; 0x2a
 8006a44:	d016      	beq.n	8006a74 <_svfiprintf_r+0xf8>
 8006a46:	0035      	movs	r5, r6
 8006a48:	2100      	movs	r1, #0
 8006a4a:	200a      	movs	r0, #10
 8006a4c:	68e3      	ldr	r3, [r4, #12]
 8006a4e:	782a      	ldrb	r2, [r5, #0]
 8006a50:	1c6e      	adds	r6, r5, #1
 8006a52:	3a30      	subs	r2, #48	; 0x30
 8006a54:	2a09      	cmp	r2, #9
 8006a56:	d94e      	bls.n	8006af6 <_svfiprintf_r+0x17a>
 8006a58:	2900      	cmp	r1, #0
 8006a5a:	d111      	bne.n	8006a80 <_svfiprintf_r+0x104>
 8006a5c:	e017      	b.n	8006a8e <_svfiprintf_r+0x112>
 8006a5e:	3501      	adds	r5, #1
 8006a60:	e7b0      	b.n	80069c4 <_svfiprintf_r+0x48>
 8006a62:	4b41      	ldr	r3, [pc, #260]	; (8006b68 <_svfiprintf_r+0x1ec>)
 8006a64:	6822      	ldr	r2, [r4, #0]
 8006a66:	1ac0      	subs	r0, r0, r3
 8006a68:	2301      	movs	r3, #1
 8006a6a:	4083      	lsls	r3, r0
 8006a6c:	4313      	orrs	r3, r2
 8006a6e:	002e      	movs	r6, r5
 8006a70:	6023      	str	r3, [r4, #0]
 8006a72:	e7ce      	b.n	8006a12 <_svfiprintf_r+0x96>
 8006a74:	9b07      	ldr	r3, [sp, #28]
 8006a76:	1d19      	adds	r1, r3, #4
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	9107      	str	r1, [sp, #28]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	db01      	blt.n	8006a84 <_svfiprintf_r+0x108>
 8006a80:	930b      	str	r3, [sp, #44]	; 0x2c
 8006a82:	e004      	b.n	8006a8e <_svfiprintf_r+0x112>
 8006a84:	425b      	negs	r3, r3
 8006a86:	60e3      	str	r3, [r4, #12]
 8006a88:	2302      	movs	r3, #2
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	6023      	str	r3, [r4, #0]
 8006a8e:	782b      	ldrb	r3, [r5, #0]
 8006a90:	2b2e      	cmp	r3, #46	; 0x2e
 8006a92:	d10a      	bne.n	8006aaa <_svfiprintf_r+0x12e>
 8006a94:	786b      	ldrb	r3, [r5, #1]
 8006a96:	2b2a      	cmp	r3, #42	; 0x2a
 8006a98:	d135      	bne.n	8006b06 <_svfiprintf_r+0x18a>
 8006a9a:	9b07      	ldr	r3, [sp, #28]
 8006a9c:	3502      	adds	r5, #2
 8006a9e:	1d1a      	adds	r2, r3, #4
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	9207      	str	r2, [sp, #28]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	db2b      	blt.n	8006b00 <_svfiprintf_r+0x184>
 8006aa8:	9309      	str	r3, [sp, #36]	; 0x24
 8006aaa:	4e30      	ldr	r6, [pc, #192]	; (8006b6c <_svfiprintf_r+0x1f0>)
 8006aac:	2203      	movs	r2, #3
 8006aae:	0030      	movs	r0, r6
 8006ab0:	7829      	ldrb	r1, [r5, #0]
 8006ab2:	f000 f9e5 	bl	8006e80 <memchr>
 8006ab6:	2800      	cmp	r0, #0
 8006ab8:	d006      	beq.n	8006ac8 <_svfiprintf_r+0x14c>
 8006aba:	2340      	movs	r3, #64	; 0x40
 8006abc:	1b80      	subs	r0, r0, r6
 8006abe:	4083      	lsls	r3, r0
 8006ac0:	6822      	ldr	r2, [r4, #0]
 8006ac2:	3501      	adds	r5, #1
 8006ac4:	4313      	orrs	r3, r2
 8006ac6:	6023      	str	r3, [r4, #0]
 8006ac8:	7829      	ldrb	r1, [r5, #0]
 8006aca:	2206      	movs	r2, #6
 8006acc:	4828      	ldr	r0, [pc, #160]	; (8006b70 <_svfiprintf_r+0x1f4>)
 8006ace:	1c6e      	adds	r6, r5, #1
 8006ad0:	7621      	strb	r1, [r4, #24]
 8006ad2:	f000 f9d5 	bl	8006e80 <memchr>
 8006ad6:	2800      	cmp	r0, #0
 8006ad8:	d03c      	beq.n	8006b54 <_svfiprintf_r+0x1d8>
 8006ada:	4b26      	ldr	r3, [pc, #152]	; (8006b74 <_svfiprintf_r+0x1f8>)
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d125      	bne.n	8006b2c <_svfiprintf_r+0x1b0>
 8006ae0:	2207      	movs	r2, #7
 8006ae2:	9b07      	ldr	r3, [sp, #28]
 8006ae4:	3307      	adds	r3, #7
 8006ae6:	4393      	bics	r3, r2
 8006ae8:	3308      	adds	r3, #8
 8006aea:	9307      	str	r3, [sp, #28]
 8006aec:	6963      	ldr	r3, [r4, #20]
 8006aee:	9a04      	ldr	r2, [sp, #16]
 8006af0:	189b      	adds	r3, r3, r2
 8006af2:	6163      	str	r3, [r4, #20]
 8006af4:	e765      	b.n	80069c2 <_svfiprintf_r+0x46>
 8006af6:	4343      	muls	r3, r0
 8006af8:	0035      	movs	r5, r6
 8006afa:	2101      	movs	r1, #1
 8006afc:	189b      	adds	r3, r3, r2
 8006afe:	e7a6      	b.n	8006a4e <_svfiprintf_r+0xd2>
 8006b00:	2301      	movs	r3, #1
 8006b02:	425b      	negs	r3, r3
 8006b04:	e7d0      	b.n	8006aa8 <_svfiprintf_r+0x12c>
 8006b06:	2300      	movs	r3, #0
 8006b08:	200a      	movs	r0, #10
 8006b0a:	001a      	movs	r2, r3
 8006b0c:	3501      	adds	r5, #1
 8006b0e:	6063      	str	r3, [r4, #4]
 8006b10:	7829      	ldrb	r1, [r5, #0]
 8006b12:	1c6e      	adds	r6, r5, #1
 8006b14:	3930      	subs	r1, #48	; 0x30
 8006b16:	2909      	cmp	r1, #9
 8006b18:	d903      	bls.n	8006b22 <_svfiprintf_r+0x1a6>
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d0c5      	beq.n	8006aaa <_svfiprintf_r+0x12e>
 8006b1e:	9209      	str	r2, [sp, #36]	; 0x24
 8006b20:	e7c3      	b.n	8006aaa <_svfiprintf_r+0x12e>
 8006b22:	4342      	muls	r2, r0
 8006b24:	0035      	movs	r5, r6
 8006b26:	2301      	movs	r3, #1
 8006b28:	1852      	adds	r2, r2, r1
 8006b2a:	e7f1      	b.n	8006b10 <_svfiprintf_r+0x194>
 8006b2c:	ab07      	add	r3, sp, #28
 8006b2e:	9300      	str	r3, [sp, #0]
 8006b30:	003a      	movs	r2, r7
 8006b32:	0021      	movs	r1, r4
 8006b34:	4b10      	ldr	r3, [pc, #64]	; (8006b78 <_svfiprintf_r+0x1fc>)
 8006b36:	9803      	ldr	r0, [sp, #12]
 8006b38:	e000      	b.n	8006b3c <_svfiprintf_r+0x1c0>
 8006b3a:	bf00      	nop
 8006b3c:	9004      	str	r0, [sp, #16]
 8006b3e:	9b04      	ldr	r3, [sp, #16]
 8006b40:	3301      	adds	r3, #1
 8006b42:	d1d3      	bne.n	8006aec <_svfiprintf_r+0x170>
 8006b44:	89bb      	ldrh	r3, [r7, #12]
 8006b46:	980d      	ldr	r0, [sp, #52]	; 0x34
 8006b48:	065b      	lsls	r3, r3, #25
 8006b4a:	d400      	bmi.n	8006b4e <_svfiprintf_r+0x1d2>
 8006b4c:	e72d      	b.n	80069aa <_svfiprintf_r+0x2e>
 8006b4e:	2001      	movs	r0, #1
 8006b50:	4240      	negs	r0, r0
 8006b52:	e72a      	b.n	80069aa <_svfiprintf_r+0x2e>
 8006b54:	ab07      	add	r3, sp, #28
 8006b56:	9300      	str	r3, [sp, #0]
 8006b58:	003a      	movs	r2, r7
 8006b5a:	0021      	movs	r1, r4
 8006b5c:	4b06      	ldr	r3, [pc, #24]	; (8006b78 <_svfiprintf_r+0x1fc>)
 8006b5e:	9803      	ldr	r0, [sp, #12]
 8006b60:	f000 f87c 	bl	8006c5c <_printf_i>
 8006b64:	e7ea      	b.n	8006b3c <_svfiprintf_r+0x1c0>
 8006b66:	46c0      	nop			; (mov r8, r8)
 8006b68:	08007248 	.word	0x08007248
 8006b6c:	0800724e 	.word	0x0800724e
 8006b70:	08007252 	.word	0x08007252
 8006b74:	00000000 	.word	0x00000000
 8006b78:	080068b9 	.word	0x080068b9

08006b7c <_printf_common>:
 8006b7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b7e:	0015      	movs	r5, r2
 8006b80:	9301      	str	r3, [sp, #4]
 8006b82:	688a      	ldr	r2, [r1, #8]
 8006b84:	690b      	ldr	r3, [r1, #16]
 8006b86:	000c      	movs	r4, r1
 8006b88:	9000      	str	r0, [sp, #0]
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	da00      	bge.n	8006b90 <_printf_common+0x14>
 8006b8e:	0013      	movs	r3, r2
 8006b90:	0022      	movs	r2, r4
 8006b92:	602b      	str	r3, [r5, #0]
 8006b94:	3243      	adds	r2, #67	; 0x43
 8006b96:	7812      	ldrb	r2, [r2, #0]
 8006b98:	2a00      	cmp	r2, #0
 8006b9a:	d001      	beq.n	8006ba0 <_printf_common+0x24>
 8006b9c:	3301      	adds	r3, #1
 8006b9e:	602b      	str	r3, [r5, #0]
 8006ba0:	6823      	ldr	r3, [r4, #0]
 8006ba2:	069b      	lsls	r3, r3, #26
 8006ba4:	d502      	bpl.n	8006bac <_printf_common+0x30>
 8006ba6:	682b      	ldr	r3, [r5, #0]
 8006ba8:	3302      	adds	r3, #2
 8006baa:	602b      	str	r3, [r5, #0]
 8006bac:	6822      	ldr	r2, [r4, #0]
 8006bae:	2306      	movs	r3, #6
 8006bb0:	0017      	movs	r7, r2
 8006bb2:	401f      	ands	r7, r3
 8006bb4:	421a      	tst	r2, r3
 8006bb6:	d027      	beq.n	8006c08 <_printf_common+0x8c>
 8006bb8:	0023      	movs	r3, r4
 8006bba:	3343      	adds	r3, #67	; 0x43
 8006bbc:	781b      	ldrb	r3, [r3, #0]
 8006bbe:	1e5a      	subs	r2, r3, #1
 8006bc0:	4193      	sbcs	r3, r2
 8006bc2:	6822      	ldr	r2, [r4, #0]
 8006bc4:	0692      	lsls	r2, r2, #26
 8006bc6:	d430      	bmi.n	8006c2a <_printf_common+0xae>
 8006bc8:	0022      	movs	r2, r4
 8006bca:	9901      	ldr	r1, [sp, #4]
 8006bcc:	9800      	ldr	r0, [sp, #0]
 8006bce:	9e08      	ldr	r6, [sp, #32]
 8006bd0:	3243      	adds	r2, #67	; 0x43
 8006bd2:	47b0      	blx	r6
 8006bd4:	1c43      	adds	r3, r0, #1
 8006bd6:	d025      	beq.n	8006c24 <_printf_common+0xa8>
 8006bd8:	2306      	movs	r3, #6
 8006bda:	6820      	ldr	r0, [r4, #0]
 8006bdc:	682a      	ldr	r2, [r5, #0]
 8006bde:	68e1      	ldr	r1, [r4, #12]
 8006be0:	2500      	movs	r5, #0
 8006be2:	4003      	ands	r3, r0
 8006be4:	2b04      	cmp	r3, #4
 8006be6:	d103      	bne.n	8006bf0 <_printf_common+0x74>
 8006be8:	1a8d      	subs	r5, r1, r2
 8006bea:	43eb      	mvns	r3, r5
 8006bec:	17db      	asrs	r3, r3, #31
 8006bee:	401d      	ands	r5, r3
 8006bf0:	68a3      	ldr	r3, [r4, #8]
 8006bf2:	6922      	ldr	r2, [r4, #16]
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	dd01      	ble.n	8006bfc <_printf_common+0x80>
 8006bf8:	1a9b      	subs	r3, r3, r2
 8006bfa:	18ed      	adds	r5, r5, r3
 8006bfc:	2700      	movs	r7, #0
 8006bfe:	42bd      	cmp	r5, r7
 8006c00:	d120      	bne.n	8006c44 <_printf_common+0xc8>
 8006c02:	2000      	movs	r0, #0
 8006c04:	e010      	b.n	8006c28 <_printf_common+0xac>
 8006c06:	3701      	adds	r7, #1
 8006c08:	68e3      	ldr	r3, [r4, #12]
 8006c0a:	682a      	ldr	r2, [r5, #0]
 8006c0c:	1a9b      	subs	r3, r3, r2
 8006c0e:	42bb      	cmp	r3, r7
 8006c10:	ddd2      	ble.n	8006bb8 <_printf_common+0x3c>
 8006c12:	0022      	movs	r2, r4
 8006c14:	2301      	movs	r3, #1
 8006c16:	9901      	ldr	r1, [sp, #4]
 8006c18:	9800      	ldr	r0, [sp, #0]
 8006c1a:	9e08      	ldr	r6, [sp, #32]
 8006c1c:	3219      	adds	r2, #25
 8006c1e:	47b0      	blx	r6
 8006c20:	1c43      	adds	r3, r0, #1
 8006c22:	d1f0      	bne.n	8006c06 <_printf_common+0x8a>
 8006c24:	2001      	movs	r0, #1
 8006c26:	4240      	negs	r0, r0
 8006c28:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006c2a:	2030      	movs	r0, #48	; 0x30
 8006c2c:	18e1      	adds	r1, r4, r3
 8006c2e:	3143      	adds	r1, #67	; 0x43
 8006c30:	7008      	strb	r0, [r1, #0]
 8006c32:	0021      	movs	r1, r4
 8006c34:	1c5a      	adds	r2, r3, #1
 8006c36:	3145      	adds	r1, #69	; 0x45
 8006c38:	7809      	ldrb	r1, [r1, #0]
 8006c3a:	18a2      	adds	r2, r4, r2
 8006c3c:	3243      	adds	r2, #67	; 0x43
 8006c3e:	3302      	adds	r3, #2
 8006c40:	7011      	strb	r1, [r2, #0]
 8006c42:	e7c1      	b.n	8006bc8 <_printf_common+0x4c>
 8006c44:	0022      	movs	r2, r4
 8006c46:	2301      	movs	r3, #1
 8006c48:	9901      	ldr	r1, [sp, #4]
 8006c4a:	9800      	ldr	r0, [sp, #0]
 8006c4c:	9e08      	ldr	r6, [sp, #32]
 8006c4e:	321a      	adds	r2, #26
 8006c50:	47b0      	blx	r6
 8006c52:	1c43      	adds	r3, r0, #1
 8006c54:	d0e6      	beq.n	8006c24 <_printf_common+0xa8>
 8006c56:	3701      	adds	r7, #1
 8006c58:	e7d1      	b.n	8006bfe <_printf_common+0x82>
	...

08006c5c <_printf_i>:
 8006c5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c5e:	b08b      	sub	sp, #44	; 0x2c
 8006c60:	9206      	str	r2, [sp, #24]
 8006c62:	000a      	movs	r2, r1
 8006c64:	3243      	adds	r2, #67	; 0x43
 8006c66:	9307      	str	r3, [sp, #28]
 8006c68:	9005      	str	r0, [sp, #20]
 8006c6a:	9204      	str	r2, [sp, #16]
 8006c6c:	7e0a      	ldrb	r2, [r1, #24]
 8006c6e:	000c      	movs	r4, r1
 8006c70:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006c72:	2a78      	cmp	r2, #120	; 0x78
 8006c74:	d806      	bhi.n	8006c84 <_printf_i+0x28>
 8006c76:	2a62      	cmp	r2, #98	; 0x62
 8006c78:	d808      	bhi.n	8006c8c <_printf_i+0x30>
 8006c7a:	2a00      	cmp	r2, #0
 8006c7c:	d100      	bne.n	8006c80 <_printf_i+0x24>
 8006c7e:	e0c0      	b.n	8006e02 <_printf_i+0x1a6>
 8006c80:	2a58      	cmp	r2, #88	; 0x58
 8006c82:	d052      	beq.n	8006d2a <_printf_i+0xce>
 8006c84:	0026      	movs	r6, r4
 8006c86:	3642      	adds	r6, #66	; 0x42
 8006c88:	7032      	strb	r2, [r6, #0]
 8006c8a:	e022      	b.n	8006cd2 <_printf_i+0x76>
 8006c8c:	0010      	movs	r0, r2
 8006c8e:	3863      	subs	r0, #99	; 0x63
 8006c90:	2815      	cmp	r0, #21
 8006c92:	d8f7      	bhi.n	8006c84 <_printf_i+0x28>
 8006c94:	f7f9 fa40 	bl	8000118 <__gnu_thumb1_case_shi>
 8006c98:	001f0016 	.word	0x001f0016
 8006c9c:	fff6fff6 	.word	0xfff6fff6
 8006ca0:	fff6fff6 	.word	0xfff6fff6
 8006ca4:	fff6001f 	.word	0xfff6001f
 8006ca8:	fff6fff6 	.word	0xfff6fff6
 8006cac:	00a8fff6 	.word	0x00a8fff6
 8006cb0:	009a0036 	.word	0x009a0036
 8006cb4:	fff6fff6 	.word	0xfff6fff6
 8006cb8:	fff600b9 	.word	0xfff600b9
 8006cbc:	fff60036 	.word	0xfff60036
 8006cc0:	009efff6 	.word	0x009efff6
 8006cc4:	0026      	movs	r6, r4
 8006cc6:	681a      	ldr	r2, [r3, #0]
 8006cc8:	3642      	adds	r6, #66	; 0x42
 8006cca:	1d11      	adds	r1, r2, #4
 8006ccc:	6019      	str	r1, [r3, #0]
 8006cce:	6813      	ldr	r3, [r2, #0]
 8006cd0:	7033      	strb	r3, [r6, #0]
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	e0a7      	b.n	8006e26 <_printf_i+0x1ca>
 8006cd6:	6808      	ldr	r0, [r1, #0]
 8006cd8:	6819      	ldr	r1, [r3, #0]
 8006cda:	1d0a      	adds	r2, r1, #4
 8006cdc:	0605      	lsls	r5, r0, #24
 8006cde:	d50b      	bpl.n	8006cf8 <_printf_i+0x9c>
 8006ce0:	680d      	ldr	r5, [r1, #0]
 8006ce2:	601a      	str	r2, [r3, #0]
 8006ce4:	2d00      	cmp	r5, #0
 8006ce6:	da03      	bge.n	8006cf0 <_printf_i+0x94>
 8006ce8:	232d      	movs	r3, #45	; 0x2d
 8006cea:	9a04      	ldr	r2, [sp, #16]
 8006cec:	426d      	negs	r5, r5
 8006cee:	7013      	strb	r3, [r2, #0]
 8006cf0:	4b61      	ldr	r3, [pc, #388]	; (8006e78 <_printf_i+0x21c>)
 8006cf2:	270a      	movs	r7, #10
 8006cf4:	9303      	str	r3, [sp, #12]
 8006cf6:	e032      	b.n	8006d5e <_printf_i+0x102>
 8006cf8:	680d      	ldr	r5, [r1, #0]
 8006cfa:	601a      	str	r2, [r3, #0]
 8006cfc:	0641      	lsls	r1, r0, #25
 8006cfe:	d5f1      	bpl.n	8006ce4 <_printf_i+0x88>
 8006d00:	b22d      	sxth	r5, r5
 8006d02:	e7ef      	b.n	8006ce4 <_printf_i+0x88>
 8006d04:	680d      	ldr	r5, [r1, #0]
 8006d06:	6819      	ldr	r1, [r3, #0]
 8006d08:	1d08      	adds	r0, r1, #4
 8006d0a:	6018      	str	r0, [r3, #0]
 8006d0c:	062e      	lsls	r6, r5, #24
 8006d0e:	d501      	bpl.n	8006d14 <_printf_i+0xb8>
 8006d10:	680d      	ldr	r5, [r1, #0]
 8006d12:	e003      	b.n	8006d1c <_printf_i+0xc0>
 8006d14:	066d      	lsls	r5, r5, #25
 8006d16:	d5fb      	bpl.n	8006d10 <_printf_i+0xb4>
 8006d18:	680d      	ldr	r5, [r1, #0]
 8006d1a:	b2ad      	uxth	r5, r5
 8006d1c:	4b56      	ldr	r3, [pc, #344]	; (8006e78 <_printf_i+0x21c>)
 8006d1e:	270a      	movs	r7, #10
 8006d20:	9303      	str	r3, [sp, #12]
 8006d22:	2a6f      	cmp	r2, #111	; 0x6f
 8006d24:	d117      	bne.n	8006d56 <_printf_i+0xfa>
 8006d26:	2708      	movs	r7, #8
 8006d28:	e015      	b.n	8006d56 <_printf_i+0xfa>
 8006d2a:	3145      	adds	r1, #69	; 0x45
 8006d2c:	700a      	strb	r2, [r1, #0]
 8006d2e:	4a52      	ldr	r2, [pc, #328]	; (8006e78 <_printf_i+0x21c>)
 8006d30:	9203      	str	r2, [sp, #12]
 8006d32:	681a      	ldr	r2, [r3, #0]
 8006d34:	6821      	ldr	r1, [r4, #0]
 8006d36:	ca20      	ldmia	r2!, {r5}
 8006d38:	601a      	str	r2, [r3, #0]
 8006d3a:	0608      	lsls	r0, r1, #24
 8006d3c:	d550      	bpl.n	8006de0 <_printf_i+0x184>
 8006d3e:	07cb      	lsls	r3, r1, #31
 8006d40:	d502      	bpl.n	8006d48 <_printf_i+0xec>
 8006d42:	2320      	movs	r3, #32
 8006d44:	4319      	orrs	r1, r3
 8006d46:	6021      	str	r1, [r4, #0]
 8006d48:	2710      	movs	r7, #16
 8006d4a:	2d00      	cmp	r5, #0
 8006d4c:	d103      	bne.n	8006d56 <_printf_i+0xfa>
 8006d4e:	2320      	movs	r3, #32
 8006d50:	6822      	ldr	r2, [r4, #0]
 8006d52:	439a      	bics	r2, r3
 8006d54:	6022      	str	r2, [r4, #0]
 8006d56:	0023      	movs	r3, r4
 8006d58:	2200      	movs	r2, #0
 8006d5a:	3343      	adds	r3, #67	; 0x43
 8006d5c:	701a      	strb	r2, [r3, #0]
 8006d5e:	6863      	ldr	r3, [r4, #4]
 8006d60:	60a3      	str	r3, [r4, #8]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	db03      	blt.n	8006d6e <_printf_i+0x112>
 8006d66:	2204      	movs	r2, #4
 8006d68:	6821      	ldr	r1, [r4, #0]
 8006d6a:	4391      	bics	r1, r2
 8006d6c:	6021      	str	r1, [r4, #0]
 8006d6e:	2d00      	cmp	r5, #0
 8006d70:	d102      	bne.n	8006d78 <_printf_i+0x11c>
 8006d72:	9e04      	ldr	r6, [sp, #16]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d00c      	beq.n	8006d92 <_printf_i+0x136>
 8006d78:	9e04      	ldr	r6, [sp, #16]
 8006d7a:	0028      	movs	r0, r5
 8006d7c:	0039      	movs	r1, r7
 8006d7e:	f7f9 fa5b 	bl	8000238 <__aeabi_uidivmod>
 8006d82:	9b03      	ldr	r3, [sp, #12]
 8006d84:	3e01      	subs	r6, #1
 8006d86:	5c5b      	ldrb	r3, [r3, r1]
 8006d88:	7033      	strb	r3, [r6, #0]
 8006d8a:	002b      	movs	r3, r5
 8006d8c:	0005      	movs	r5, r0
 8006d8e:	429f      	cmp	r7, r3
 8006d90:	d9f3      	bls.n	8006d7a <_printf_i+0x11e>
 8006d92:	2f08      	cmp	r7, #8
 8006d94:	d109      	bne.n	8006daa <_printf_i+0x14e>
 8006d96:	6823      	ldr	r3, [r4, #0]
 8006d98:	07db      	lsls	r3, r3, #31
 8006d9a:	d506      	bpl.n	8006daa <_printf_i+0x14e>
 8006d9c:	6863      	ldr	r3, [r4, #4]
 8006d9e:	6922      	ldr	r2, [r4, #16]
 8006da0:	4293      	cmp	r3, r2
 8006da2:	dc02      	bgt.n	8006daa <_printf_i+0x14e>
 8006da4:	2330      	movs	r3, #48	; 0x30
 8006da6:	3e01      	subs	r6, #1
 8006da8:	7033      	strb	r3, [r6, #0]
 8006daa:	9b04      	ldr	r3, [sp, #16]
 8006dac:	1b9b      	subs	r3, r3, r6
 8006dae:	6123      	str	r3, [r4, #16]
 8006db0:	9b07      	ldr	r3, [sp, #28]
 8006db2:	0021      	movs	r1, r4
 8006db4:	9300      	str	r3, [sp, #0]
 8006db6:	9805      	ldr	r0, [sp, #20]
 8006db8:	9b06      	ldr	r3, [sp, #24]
 8006dba:	aa09      	add	r2, sp, #36	; 0x24
 8006dbc:	f7ff fede 	bl	8006b7c <_printf_common>
 8006dc0:	1c43      	adds	r3, r0, #1
 8006dc2:	d135      	bne.n	8006e30 <_printf_i+0x1d4>
 8006dc4:	2001      	movs	r0, #1
 8006dc6:	4240      	negs	r0, r0
 8006dc8:	b00b      	add	sp, #44	; 0x2c
 8006dca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006dcc:	2220      	movs	r2, #32
 8006dce:	6809      	ldr	r1, [r1, #0]
 8006dd0:	430a      	orrs	r2, r1
 8006dd2:	6022      	str	r2, [r4, #0]
 8006dd4:	0022      	movs	r2, r4
 8006dd6:	2178      	movs	r1, #120	; 0x78
 8006dd8:	3245      	adds	r2, #69	; 0x45
 8006dda:	7011      	strb	r1, [r2, #0]
 8006ddc:	4a27      	ldr	r2, [pc, #156]	; (8006e7c <_printf_i+0x220>)
 8006dde:	e7a7      	b.n	8006d30 <_printf_i+0xd4>
 8006de0:	0648      	lsls	r0, r1, #25
 8006de2:	d5ac      	bpl.n	8006d3e <_printf_i+0xe2>
 8006de4:	b2ad      	uxth	r5, r5
 8006de6:	e7aa      	b.n	8006d3e <_printf_i+0xe2>
 8006de8:	681a      	ldr	r2, [r3, #0]
 8006dea:	680d      	ldr	r5, [r1, #0]
 8006dec:	1d10      	adds	r0, r2, #4
 8006dee:	6949      	ldr	r1, [r1, #20]
 8006df0:	6018      	str	r0, [r3, #0]
 8006df2:	6813      	ldr	r3, [r2, #0]
 8006df4:	062e      	lsls	r6, r5, #24
 8006df6:	d501      	bpl.n	8006dfc <_printf_i+0x1a0>
 8006df8:	6019      	str	r1, [r3, #0]
 8006dfa:	e002      	b.n	8006e02 <_printf_i+0x1a6>
 8006dfc:	066d      	lsls	r5, r5, #25
 8006dfe:	d5fb      	bpl.n	8006df8 <_printf_i+0x19c>
 8006e00:	8019      	strh	r1, [r3, #0]
 8006e02:	2300      	movs	r3, #0
 8006e04:	9e04      	ldr	r6, [sp, #16]
 8006e06:	6123      	str	r3, [r4, #16]
 8006e08:	e7d2      	b.n	8006db0 <_printf_i+0x154>
 8006e0a:	681a      	ldr	r2, [r3, #0]
 8006e0c:	1d11      	adds	r1, r2, #4
 8006e0e:	6019      	str	r1, [r3, #0]
 8006e10:	6816      	ldr	r6, [r2, #0]
 8006e12:	2100      	movs	r1, #0
 8006e14:	0030      	movs	r0, r6
 8006e16:	6862      	ldr	r2, [r4, #4]
 8006e18:	f000 f832 	bl	8006e80 <memchr>
 8006e1c:	2800      	cmp	r0, #0
 8006e1e:	d001      	beq.n	8006e24 <_printf_i+0x1c8>
 8006e20:	1b80      	subs	r0, r0, r6
 8006e22:	6060      	str	r0, [r4, #4]
 8006e24:	6863      	ldr	r3, [r4, #4]
 8006e26:	6123      	str	r3, [r4, #16]
 8006e28:	2300      	movs	r3, #0
 8006e2a:	9a04      	ldr	r2, [sp, #16]
 8006e2c:	7013      	strb	r3, [r2, #0]
 8006e2e:	e7bf      	b.n	8006db0 <_printf_i+0x154>
 8006e30:	6923      	ldr	r3, [r4, #16]
 8006e32:	0032      	movs	r2, r6
 8006e34:	9906      	ldr	r1, [sp, #24]
 8006e36:	9805      	ldr	r0, [sp, #20]
 8006e38:	9d07      	ldr	r5, [sp, #28]
 8006e3a:	47a8      	blx	r5
 8006e3c:	1c43      	adds	r3, r0, #1
 8006e3e:	d0c1      	beq.n	8006dc4 <_printf_i+0x168>
 8006e40:	6823      	ldr	r3, [r4, #0]
 8006e42:	079b      	lsls	r3, r3, #30
 8006e44:	d415      	bmi.n	8006e72 <_printf_i+0x216>
 8006e46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e48:	68e0      	ldr	r0, [r4, #12]
 8006e4a:	4298      	cmp	r0, r3
 8006e4c:	dabc      	bge.n	8006dc8 <_printf_i+0x16c>
 8006e4e:	0018      	movs	r0, r3
 8006e50:	e7ba      	b.n	8006dc8 <_printf_i+0x16c>
 8006e52:	0022      	movs	r2, r4
 8006e54:	2301      	movs	r3, #1
 8006e56:	9906      	ldr	r1, [sp, #24]
 8006e58:	9805      	ldr	r0, [sp, #20]
 8006e5a:	9e07      	ldr	r6, [sp, #28]
 8006e5c:	3219      	adds	r2, #25
 8006e5e:	47b0      	blx	r6
 8006e60:	1c43      	adds	r3, r0, #1
 8006e62:	d0af      	beq.n	8006dc4 <_printf_i+0x168>
 8006e64:	3501      	adds	r5, #1
 8006e66:	68e3      	ldr	r3, [r4, #12]
 8006e68:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006e6a:	1a9b      	subs	r3, r3, r2
 8006e6c:	42ab      	cmp	r3, r5
 8006e6e:	dcf0      	bgt.n	8006e52 <_printf_i+0x1f6>
 8006e70:	e7e9      	b.n	8006e46 <_printf_i+0x1ea>
 8006e72:	2500      	movs	r5, #0
 8006e74:	e7f7      	b.n	8006e66 <_printf_i+0x20a>
 8006e76:	46c0      	nop			; (mov r8, r8)
 8006e78:	08007259 	.word	0x08007259
 8006e7c:	0800726a 	.word	0x0800726a

08006e80 <memchr>:
 8006e80:	b2c9      	uxtb	r1, r1
 8006e82:	1882      	adds	r2, r0, r2
 8006e84:	4290      	cmp	r0, r2
 8006e86:	d101      	bne.n	8006e8c <memchr+0xc>
 8006e88:	2000      	movs	r0, #0
 8006e8a:	4770      	bx	lr
 8006e8c:	7803      	ldrb	r3, [r0, #0]
 8006e8e:	428b      	cmp	r3, r1
 8006e90:	d0fb      	beq.n	8006e8a <memchr+0xa>
 8006e92:	3001      	adds	r0, #1
 8006e94:	e7f6      	b.n	8006e84 <memchr+0x4>

08006e96 <memmove>:
 8006e96:	b510      	push	{r4, lr}
 8006e98:	4288      	cmp	r0, r1
 8006e9a:	d902      	bls.n	8006ea2 <memmove+0xc>
 8006e9c:	188b      	adds	r3, r1, r2
 8006e9e:	4298      	cmp	r0, r3
 8006ea0:	d303      	bcc.n	8006eaa <memmove+0x14>
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	e007      	b.n	8006eb6 <memmove+0x20>
 8006ea6:	5c8b      	ldrb	r3, [r1, r2]
 8006ea8:	5483      	strb	r3, [r0, r2]
 8006eaa:	3a01      	subs	r2, #1
 8006eac:	d2fb      	bcs.n	8006ea6 <memmove+0x10>
 8006eae:	bd10      	pop	{r4, pc}
 8006eb0:	5ccc      	ldrb	r4, [r1, r3]
 8006eb2:	54c4      	strb	r4, [r0, r3]
 8006eb4:	3301      	adds	r3, #1
 8006eb6:	429a      	cmp	r2, r3
 8006eb8:	d1fa      	bne.n	8006eb0 <memmove+0x1a>
 8006eba:	e7f8      	b.n	8006eae <memmove+0x18>

08006ebc <_free_r>:
 8006ebc:	b570      	push	{r4, r5, r6, lr}
 8006ebe:	0005      	movs	r5, r0
 8006ec0:	2900      	cmp	r1, #0
 8006ec2:	d010      	beq.n	8006ee6 <_free_r+0x2a>
 8006ec4:	1f0c      	subs	r4, r1, #4
 8006ec6:	6823      	ldr	r3, [r4, #0]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	da00      	bge.n	8006ece <_free_r+0x12>
 8006ecc:	18e4      	adds	r4, r4, r3
 8006ece:	0028      	movs	r0, r5
 8006ed0:	f000 f8d4 	bl	800707c <__malloc_lock>
 8006ed4:	4a1d      	ldr	r2, [pc, #116]	; (8006f4c <_free_r+0x90>)
 8006ed6:	6813      	ldr	r3, [r2, #0]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d105      	bne.n	8006ee8 <_free_r+0x2c>
 8006edc:	6063      	str	r3, [r4, #4]
 8006ede:	6014      	str	r4, [r2, #0]
 8006ee0:	0028      	movs	r0, r5
 8006ee2:	f000 f8d3 	bl	800708c <__malloc_unlock>
 8006ee6:	bd70      	pop	{r4, r5, r6, pc}
 8006ee8:	42a3      	cmp	r3, r4
 8006eea:	d908      	bls.n	8006efe <_free_r+0x42>
 8006eec:	6821      	ldr	r1, [r4, #0]
 8006eee:	1860      	adds	r0, r4, r1
 8006ef0:	4283      	cmp	r3, r0
 8006ef2:	d1f3      	bne.n	8006edc <_free_r+0x20>
 8006ef4:	6818      	ldr	r0, [r3, #0]
 8006ef6:	685b      	ldr	r3, [r3, #4]
 8006ef8:	1841      	adds	r1, r0, r1
 8006efa:	6021      	str	r1, [r4, #0]
 8006efc:	e7ee      	b.n	8006edc <_free_r+0x20>
 8006efe:	001a      	movs	r2, r3
 8006f00:	685b      	ldr	r3, [r3, #4]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d001      	beq.n	8006f0a <_free_r+0x4e>
 8006f06:	42a3      	cmp	r3, r4
 8006f08:	d9f9      	bls.n	8006efe <_free_r+0x42>
 8006f0a:	6811      	ldr	r1, [r2, #0]
 8006f0c:	1850      	adds	r0, r2, r1
 8006f0e:	42a0      	cmp	r0, r4
 8006f10:	d10b      	bne.n	8006f2a <_free_r+0x6e>
 8006f12:	6820      	ldr	r0, [r4, #0]
 8006f14:	1809      	adds	r1, r1, r0
 8006f16:	1850      	adds	r0, r2, r1
 8006f18:	6011      	str	r1, [r2, #0]
 8006f1a:	4283      	cmp	r3, r0
 8006f1c:	d1e0      	bne.n	8006ee0 <_free_r+0x24>
 8006f1e:	6818      	ldr	r0, [r3, #0]
 8006f20:	685b      	ldr	r3, [r3, #4]
 8006f22:	1841      	adds	r1, r0, r1
 8006f24:	6011      	str	r1, [r2, #0]
 8006f26:	6053      	str	r3, [r2, #4]
 8006f28:	e7da      	b.n	8006ee0 <_free_r+0x24>
 8006f2a:	42a0      	cmp	r0, r4
 8006f2c:	d902      	bls.n	8006f34 <_free_r+0x78>
 8006f2e:	230c      	movs	r3, #12
 8006f30:	602b      	str	r3, [r5, #0]
 8006f32:	e7d5      	b.n	8006ee0 <_free_r+0x24>
 8006f34:	6821      	ldr	r1, [r4, #0]
 8006f36:	1860      	adds	r0, r4, r1
 8006f38:	4283      	cmp	r3, r0
 8006f3a:	d103      	bne.n	8006f44 <_free_r+0x88>
 8006f3c:	6818      	ldr	r0, [r3, #0]
 8006f3e:	685b      	ldr	r3, [r3, #4]
 8006f40:	1841      	adds	r1, r0, r1
 8006f42:	6021      	str	r1, [r4, #0]
 8006f44:	6063      	str	r3, [r4, #4]
 8006f46:	6054      	str	r4, [r2, #4]
 8006f48:	e7ca      	b.n	8006ee0 <_free_r+0x24>
 8006f4a:	46c0      	nop			; (mov r8, r8)
 8006f4c:	200000c0 	.word	0x200000c0

08006f50 <_malloc_r>:
 8006f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f52:	2303      	movs	r3, #3
 8006f54:	1ccd      	adds	r5, r1, #3
 8006f56:	439d      	bics	r5, r3
 8006f58:	3508      	adds	r5, #8
 8006f5a:	0006      	movs	r6, r0
 8006f5c:	2d0c      	cmp	r5, #12
 8006f5e:	d21f      	bcs.n	8006fa0 <_malloc_r+0x50>
 8006f60:	250c      	movs	r5, #12
 8006f62:	42a9      	cmp	r1, r5
 8006f64:	d81e      	bhi.n	8006fa4 <_malloc_r+0x54>
 8006f66:	0030      	movs	r0, r6
 8006f68:	f000 f888 	bl	800707c <__malloc_lock>
 8006f6c:	4925      	ldr	r1, [pc, #148]	; (8007004 <_malloc_r+0xb4>)
 8006f6e:	680a      	ldr	r2, [r1, #0]
 8006f70:	0014      	movs	r4, r2
 8006f72:	2c00      	cmp	r4, #0
 8006f74:	d11a      	bne.n	8006fac <_malloc_r+0x5c>
 8006f76:	4f24      	ldr	r7, [pc, #144]	; (8007008 <_malloc_r+0xb8>)
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d104      	bne.n	8006f88 <_malloc_r+0x38>
 8006f7e:	0021      	movs	r1, r4
 8006f80:	0030      	movs	r0, r6
 8006f82:	f000 f869 	bl	8007058 <_sbrk_r>
 8006f86:	6038      	str	r0, [r7, #0]
 8006f88:	0029      	movs	r1, r5
 8006f8a:	0030      	movs	r0, r6
 8006f8c:	f000 f864 	bl	8007058 <_sbrk_r>
 8006f90:	1c43      	adds	r3, r0, #1
 8006f92:	d12b      	bne.n	8006fec <_malloc_r+0x9c>
 8006f94:	230c      	movs	r3, #12
 8006f96:	0030      	movs	r0, r6
 8006f98:	6033      	str	r3, [r6, #0]
 8006f9a:	f000 f877 	bl	800708c <__malloc_unlock>
 8006f9e:	e003      	b.n	8006fa8 <_malloc_r+0x58>
 8006fa0:	2d00      	cmp	r5, #0
 8006fa2:	dade      	bge.n	8006f62 <_malloc_r+0x12>
 8006fa4:	230c      	movs	r3, #12
 8006fa6:	6033      	str	r3, [r6, #0]
 8006fa8:	2000      	movs	r0, #0
 8006faa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006fac:	6823      	ldr	r3, [r4, #0]
 8006fae:	1b5b      	subs	r3, r3, r5
 8006fb0:	d419      	bmi.n	8006fe6 <_malloc_r+0x96>
 8006fb2:	2b0b      	cmp	r3, #11
 8006fb4:	d903      	bls.n	8006fbe <_malloc_r+0x6e>
 8006fb6:	6023      	str	r3, [r4, #0]
 8006fb8:	18e4      	adds	r4, r4, r3
 8006fba:	6025      	str	r5, [r4, #0]
 8006fbc:	e003      	b.n	8006fc6 <_malloc_r+0x76>
 8006fbe:	6863      	ldr	r3, [r4, #4]
 8006fc0:	42a2      	cmp	r2, r4
 8006fc2:	d10e      	bne.n	8006fe2 <_malloc_r+0x92>
 8006fc4:	600b      	str	r3, [r1, #0]
 8006fc6:	0030      	movs	r0, r6
 8006fc8:	f000 f860 	bl	800708c <__malloc_unlock>
 8006fcc:	0020      	movs	r0, r4
 8006fce:	2207      	movs	r2, #7
 8006fd0:	300b      	adds	r0, #11
 8006fd2:	1d23      	adds	r3, r4, #4
 8006fd4:	4390      	bics	r0, r2
 8006fd6:	1ac2      	subs	r2, r0, r3
 8006fd8:	4298      	cmp	r0, r3
 8006fda:	d0e6      	beq.n	8006faa <_malloc_r+0x5a>
 8006fdc:	1a1b      	subs	r3, r3, r0
 8006fde:	50a3      	str	r3, [r4, r2]
 8006fe0:	e7e3      	b.n	8006faa <_malloc_r+0x5a>
 8006fe2:	6053      	str	r3, [r2, #4]
 8006fe4:	e7ef      	b.n	8006fc6 <_malloc_r+0x76>
 8006fe6:	0022      	movs	r2, r4
 8006fe8:	6864      	ldr	r4, [r4, #4]
 8006fea:	e7c2      	b.n	8006f72 <_malloc_r+0x22>
 8006fec:	2303      	movs	r3, #3
 8006fee:	1cc4      	adds	r4, r0, #3
 8006ff0:	439c      	bics	r4, r3
 8006ff2:	42a0      	cmp	r0, r4
 8006ff4:	d0e1      	beq.n	8006fba <_malloc_r+0x6a>
 8006ff6:	1a21      	subs	r1, r4, r0
 8006ff8:	0030      	movs	r0, r6
 8006ffa:	f000 f82d 	bl	8007058 <_sbrk_r>
 8006ffe:	1c43      	adds	r3, r0, #1
 8007000:	d1db      	bne.n	8006fba <_malloc_r+0x6a>
 8007002:	e7c7      	b.n	8006f94 <_malloc_r+0x44>
 8007004:	200000c0 	.word	0x200000c0
 8007008:	200000c4 	.word	0x200000c4

0800700c <_realloc_r>:
 800700c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800700e:	0007      	movs	r7, r0
 8007010:	000d      	movs	r5, r1
 8007012:	0016      	movs	r6, r2
 8007014:	2900      	cmp	r1, #0
 8007016:	d105      	bne.n	8007024 <_realloc_r+0x18>
 8007018:	0011      	movs	r1, r2
 800701a:	f7ff ff99 	bl	8006f50 <_malloc_r>
 800701e:	0004      	movs	r4, r0
 8007020:	0020      	movs	r0, r4
 8007022:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007024:	2a00      	cmp	r2, #0
 8007026:	d103      	bne.n	8007030 <_realloc_r+0x24>
 8007028:	f7ff ff48 	bl	8006ebc <_free_r>
 800702c:	0034      	movs	r4, r6
 800702e:	e7f7      	b.n	8007020 <_realloc_r+0x14>
 8007030:	f000 f834 	bl	800709c <_malloc_usable_size_r>
 8007034:	002c      	movs	r4, r5
 8007036:	42b0      	cmp	r0, r6
 8007038:	d2f2      	bcs.n	8007020 <_realloc_r+0x14>
 800703a:	0031      	movs	r1, r6
 800703c:	0038      	movs	r0, r7
 800703e:	f7ff ff87 	bl	8006f50 <_malloc_r>
 8007042:	1e04      	subs	r4, r0, #0
 8007044:	d0ec      	beq.n	8007020 <_realloc_r+0x14>
 8007046:	0029      	movs	r1, r5
 8007048:	0032      	movs	r2, r6
 800704a:	f7ff fc03 	bl	8006854 <memcpy>
 800704e:	0029      	movs	r1, r5
 8007050:	0038      	movs	r0, r7
 8007052:	f7ff ff33 	bl	8006ebc <_free_r>
 8007056:	e7e3      	b.n	8007020 <_realloc_r+0x14>

08007058 <_sbrk_r>:
 8007058:	2300      	movs	r3, #0
 800705a:	b570      	push	{r4, r5, r6, lr}
 800705c:	4d06      	ldr	r5, [pc, #24]	; (8007078 <_sbrk_r+0x20>)
 800705e:	0004      	movs	r4, r0
 8007060:	0008      	movs	r0, r1
 8007062:	602b      	str	r3, [r5, #0]
 8007064:	f7fa fe04 	bl	8001c70 <_sbrk>
 8007068:	1c43      	adds	r3, r0, #1
 800706a:	d103      	bne.n	8007074 <_sbrk_r+0x1c>
 800706c:	682b      	ldr	r3, [r5, #0]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d000      	beq.n	8007074 <_sbrk_r+0x1c>
 8007072:	6023      	str	r3, [r4, #0]
 8007074:	bd70      	pop	{r4, r5, r6, pc}
 8007076:	46c0      	nop			; (mov r8, r8)
 8007078:	200006c8 	.word	0x200006c8

0800707c <__malloc_lock>:
 800707c:	b510      	push	{r4, lr}
 800707e:	4802      	ldr	r0, [pc, #8]	; (8007088 <__malloc_lock+0xc>)
 8007080:	f000 f814 	bl	80070ac <__retarget_lock_acquire_recursive>
 8007084:	bd10      	pop	{r4, pc}
 8007086:	46c0      	nop			; (mov r8, r8)
 8007088:	200006d0 	.word	0x200006d0

0800708c <__malloc_unlock>:
 800708c:	b510      	push	{r4, lr}
 800708e:	4802      	ldr	r0, [pc, #8]	; (8007098 <__malloc_unlock+0xc>)
 8007090:	f000 f80d 	bl	80070ae <__retarget_lock_release_recursive>
 8007094:	bd10      	pop	{r4, pc}
 8007096:	46c0      	nop			; (mov r8, r8)
 8007098:	200006d0 	.word	0x200006d0

0800709c <_malloc_usable_size_r>:
 800709c:	1f0b      	subs	r3, r1, #4
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	1f18      	subs	r0, r3, #4
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	da01      	bge.n	80070aa <_malloc_usable_size_r+0xe>
 80070a6:	580b      	ldr	r3, [r1, r0]
 80070a8:	18c0      	adds	r0, r0, r3
 80070aa:	4770      	bx	lr

080070ac <__retarget_lock_acquire_recursive>:
 80070ac:	4770      	bx	lr

080070ae <__retarget_lock_release_recursive>:
 80070ae:	4770      	bx	lr

080070b0 <_init>:
 80070b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070b2:	46c0      	nop			; (mov r8, r8)
 80070b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070b6:	bc08      	pop	{r3}
 80070b8:	469e      	mov	lr, r3
 80070ba:	4770      	bx	lr

080070bc <_fini>:
 80070bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070be:	46c0      	nop			; (mov r8, r8)
 80070c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070c2:	bc08      	pop	{r3}
 80070c4:	469e      	mov	lr, r3
 80070c6:	4770      	bx	lr
