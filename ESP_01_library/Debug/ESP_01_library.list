
ESP_01_library.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000051a8  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000254  08005264  08005264  00015264  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080054b8  080054b8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080054b8  080054b8  000154b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080054c0  080054c0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080054c0  080054c0  000154c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080054c4  080054c4  000154c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080054c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c8  20000070  08005538  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000238  08005538  00020238  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cdf9  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002091  00000000  00000000  0002ce91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000938  00000000  00000000  0002ef28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000870  00000000  00000000  0002f860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001863a  00000000  00000000  000300d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c734  00000000  00000000  0004870a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096c83  00000000  00000000  00054e3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ebac1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002424  00000000  00000000  000ebb14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000070 	.word	0x20000070
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800524c 	.word	0x0800524c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000074 	.word	0x20000074
 8000100:	0800524c 	.word	0x0800524c

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_shi>:
 8000114:	b403      	push	{r0, r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0040      	lsls	r0, r0, #1
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	5e09      	ldrsh	r1, [r1, r0]
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	448e      	add	lr, r1
 8000124:	bc03      	pop	{r0, r1}
 8000126:	4770      	bx	lr

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	; 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f8f0 	bl	8000410 <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__divsi3>:
 800023c:	4603      	mov	r3, r0
 800023e:	430b      	orrs	r3, r1
 8000240:	d47f      	bmi.n	8000342 <__divsi3+0x106>
 8000242:	2200      	movs	r2, #0
 8000244:	0843      	lsrs	r3, r0, #1
 8000246:	428b      	cmp	r3, r1
 8000248:	d374      	bcc.n	8000334 <__divsi3+0xf8>
 800024a:	0903      	lsrs	r3, r0, #4
 800024c:	428b      	cmp	r3, r1
 800024e:	d35f      	bcc.n	8000310 <__divsi3+0xd4>
 8000250:	0a03      	lsrs	r3, r0, #8
 8000252:	428b      	cmp	r3, r1
 8000254:	d344      	bcc.n	80002e0 <__divsi3+0xa4>
 8000256:	0b03      	lsrs	r3, r0, #12
 8000258:	428b      	cmp	r3, r1
 800025a:	d328      	bcc.n	80002ae <__divsi3+0x72>
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d30d      	bcc.n	800027e <__divsi3+0x42>
 8000262:	22ff      	movs	r2, #255	; 0xff
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	ba12      	rev	r2, r2
 8000268:	0c03      	lsrs	r3, r0, #16
 800026a:	428b      	cmp	r3, r1
 800026c:	d302      	bcc.n	8000274 <__divsi3+0x38>
 800026e:	1212      	asrs	r2, r2, #8
 8000270:	0209      	lsls	r1, r1, #8
 8000272:	d065      	beq.n	8000340 <__divsi3+0x104>
 8000274:	0b03      	lsrs	r3, r0, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d319      	bcc.n	80002ae <__divsi3+0x72>
 800027a:	e000      	b.n	800027e <__divsi3+0x42>
 800027c:	0a09      	lsrs	r1, r1, #8
 800027e:	0bc3      	lsrs	r3, r0, #15
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x4c>
 8000284:	03cb      	lsls	r3, r1, #15
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b83      	lsrs	r3, r0, #14
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x58>
 8000290:	038b      	lsls	r3, r1, #14
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b43      	lsrs	r3, r0, #13
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x64>
 800029c:	034b      	lsls	r3, r1, #13
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b03      	lsrs	r3, r0, #12
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x70>
 80002a8:	030b      	lsls	r3, r1, #12
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0ac3      	lsrs	r3, r0, #11
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x7c>
 80002b4:	02cb      	lsls	r3, r1, #11
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a83      	lsrs	r3, r0, #10
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x88>
 80002c0:	028b      	lsls	r3, r1, #10
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a43      	lsrs	r3, r0, #9
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x94>
 80002cc:	024b      	lsls	r3, r1, #9
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a03      	lsrs	r3, r0, #8
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0xa0>
 80002d8:	020b      	lsls	r3, r1, #8
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	d2cd      	bcs.n	800027c <__divsi3+0x40>
 80002e0:	09c3      	lsrs	r3, r0, #7
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xae>
 80002e6:	01cb      	lsls	r3, r1, #7
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0983      	lsrs	r3, r0, #6
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xba>
 80002f2:	018b      	lsls	r3, r1, #6
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0943      	lsrs	r3, r0, #5
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xc6>
 80002fe:	014b      	lsls	r3, r1, #5
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0903      	lsrs	r3, r0, #4
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xd2>
 800030a:	010b      	lsls	r3, r1, #4
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	08c3      	lsrs	r3, r0, #3
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xde>
 8000316:	00cb      	lsls	r3, r1, #3
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0883      	lsrs	r3, r0, #2
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xea>
 8000322:	008b      	lsls	r3, r1, #2
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0843      	lsrs	r3, r0, #1
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xf6>
 800032e:	004b      	lsls	r3, r1, #1
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	1a41      	subs	r1, r0, r1
 8000336:	d200      	bcs.n	800033a <__divsi3+0xfe>
 8000338:	4601      	mov	r1, r0
 800033a:	4152      	adcs	r2, r2
 800033c:	4610      	mov	r0, r2
 800033e:	4770      	bx	lr
 8000340:	e05d      	b.n	80003fe <__divsi3+0x1c2>
 8000342:	0fca      	lsrs	r2, r1, #31
 8000344:	d000      	beq.n	8000348 <__divsi3+0x10c>
 8000346:	4249      	negs	r1, r1
 8000348:	1003      	asrs	r3, r0, #32
 800034a:	d300      	bcc.n	800034e <__divsi3+0x112>
 800034c:	4240      	negs	r0, r0
 800034e:	4053      	eors	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	469c      	mov	ip, r3
 8000354:	0903      	lsrs	r3, r0, #4
 8000356:	428b      	cmp	r3, r1
 8000358:	d32d      	bcc.n	80003b6 <__divsi3+0x17a>
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d312      	bcc.n	8000386 <__divsi3+0x14a>
 8000360:	22fc      	movs	r2, #252	; 0xfc
 8000362:	0189      	lsls	r1, r1, #6
 8000364:	ba12      	rev	r2, r2
 8000366:	0a03      	lsrs	r3, r0, #8
 8000368:	428b      	cmp	r3, r1
 800036a:	d30c      	bcc.n	8000386 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	1192      	asrs	r2, r2, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d308      	bcc.n	8000386 <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d304      	bcc.n	8000386 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	d03a      	beq.n	80003f6 <__divsi3+0x1ba>
 8000380:	1192      	asrs	r2, r2, #6
 8000382:	e000      	b.n	8000386 <__divsi3+0x14a>
 8000384:	0989      	lsrs	r1, r1, #6
 8000386:	09c3      	lsrs	r3, r0, #7
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x154>
 800038c:	01cb      	lsls	r3, r1, #7
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0983      	lsrs	r3, r0, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x160>
 8000398:	018b      	lsls	r3, r1, #6
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0943      	lsrs	r3, r0, #5
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x16c>
 80003a4:	014b      	lsls	r3, r1, #5
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0903      	lsrs	r3, r0, #4
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x178>
 80003b0:	010b      	lsls	r3, r1, #4
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	08c3      	lsrs	r3, r0, #3
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x184>
 80003bc:	00cb      	lsls	r3, r1, #3
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0883      	lsrs	r3, r0, #2
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x190>
 80003c8:	008b      	lsls	r3, r1, #2
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	d2d9      	bcs.n	8000384 <__divsi3+0x148>
 80003d0:	0843      	lsrs	r3, r0, #1
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d301      	bcc.n	80003da <__divsi3+0x19e>
 80003d6:	004b      	lsls	r3, r1, #1
 80003d8:	1ac0      	subs	r0, r0, r3
 80003da:	4152      	adcs	r2, r2
 80003dc:	1a41      	subs	r1, r0, r1
 80003de:	d200      	bcs.n	80003e2 <__divsi3+0x1a6>
 80003e0:	4601      	mov	r1, r0
 80003e2:	4663      	mov	r3, ip
 80003e4:	4152      	adcs	r2, r2
 80003e6:	105b      	asrs	r3, r3, #1
 80003e8:	4610      	mov	r0, r2
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x1b4>
 80003ec:	4240      	negs	r0, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d500      	bpl.n	80003f4 <__divsi3+0x1b8>
 80003f2:	4249      	negs	r1, r1
 80003f4:	4770      	bx	lr
 80003f6:	4663      	mov	r3, ip
 80003f8:	105b      	asrs	r3, r3, #1
 80003fa:	d300      	bcc.n	80003fe <__divsi3+0x1c2>
 80003fc:	4240      	negs	r0, r0
 80003fe:	b501      	push	{r0, lr}
 8000400:	2000      	movs	r0, #0
 8000402:	f000 f805 	bl	8000410 <__aeabi_idiv0>
 8000406:	bd02      	pop	{r1, pc}

08000408 <__aeabi_idivmod>:
 8000408:	2900      	cmp	r1, #0
 800040a:	d0f8      	beq.n	80003fe <__divsi3+0x1c2>
 800040c:	e716      	b.n	800023c <__divsi3>
 800040e:	4770      	bx	lr

08000410 <__aeabi_idiv0>:
 8000410:	4770      	bx	lr
 8000412:	46c0      	nop			; (mov r8, r8)

08000414 <__aeabi_uldivmod>:
 8000414:	2b00      	cmp	r3, #0
 8000416:	d111      	bne.n	800043c <__aeabi_uldivmod+0x28>
 8000418:	2a00      	cmp	r2, #0
 800041a:	d10f      	bne.n	800043c <__aeabi_uldivmod+0x28>
 800041c:	2900      	cmp	r1, #0
 800041e:	d100      	bne.n	8000422 <__aeabi_uldivmod+0xe>
 8000420:	2800      	cmp	r0, #0
 8000422:	d002      	beq.n	800042a <__aeabi_uldivmod+0x16>
 8000424:	2100      	movs	r1, #0
 8000426:	43c9      	mvns	r1, r1
 8000428:	0008      	movs	r0, r1
 800042a:	b407      	push	{r0, r1, r2}
 800042c:	4802      	ldr	r0, [pc, #8]	; (8000438 <__aeabi_uldivmod+0x24>)
 800042e:	a102      	add	r1, pc, #8	; (adr r1, 8000438 <__aeabi_uldivmod+0x24>)
 8000430:	1840      	adds	r0, r0, r1
 8000432:	9002      	str	r0, [sp, #8]
 8000434:	bd03      	pop	{r0, r1, pc}
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	ffffffd9 	.word	0xffffffd9
 800043c:	b403      	push	{r0, r1}
 800043e:	4668      	mov	r0, sp
 8000440:	b501      	push	{r0, lr}
 8000442:	9802      	ldr	r0, [sp, #8]
 8000444:	f000 f806 	bl	8000454 <__udivmoddi4>
 8000448:	9b01      	ldr	r3, [sp, #4]
 800044a:	469e      	mov	lr, r3
 800044c:	b002      	add	sp, #8
 800044e:	bc0c      	pop	{r2, r3}
 8000450:	4770      	bx	lr
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__udivmoddi4>:
 8000454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000456:	4657      	mov	r7, sl
 8000458:	464e      	mov	r6, r9
 800045a:	4645      	mov	r5, r8
 800045c:	46de      	mov	lr, fp
 800045e:	b5e0      	push	{r5, r6, r7, lr}
 8000460:	0004      	movs	r4, r0
 8000462:	000d      	movs	r5, r1
 8000464:	4692      	mov	sl, r2
 8000466:	4699      	mov	r9, r3
 8000468:	b083      	sub	sp, #12
 800046a:	428b      	cmp	r3, r1
 800046c:	d830      	bhi.n	80004d0 <__udivmoddi4+0x7c>
 800046e:	d02d      	beq.n	80004cc <__udivmoddi4+0x78>
 8000470:	4649      	mov	r1, r9
 8000472:	4650      	mov	r0, sl
 8000474:	f000 f8ba 	bl	80005ec <__clzdi2>
 8000478:	0029      	movs	r1, r5
 800047a:	0006      	movs	r6, r0
 800047c:	0020      	movs	r0, r4
 800047e:	f000 f8b5 	bl	80005ec <__clzdi2>
 8000482:	1a33      	subs	r3, r6, r0
 8000484:	4698      	mov	r8, r3
 8000486:	3b20      	subs	r3, #32
 8000488:	469b      	mov	fp, r3
 800048a:	d433      	bmi.n	80004f4 <__udivmoddi4+0xa0>
 800048c:	465a      	mov	r2, fp
 800048e:	4653      	mov	r3, sl
 8000490:	4093      	lsls	r3, r2
 8000492:	4642      	mov	r2, r8
 8000494:	001f      	movs	r7, r3
 8000496:	4653      	mov	r3, sl
 8000498:	4093      	lsls	r3, r2
 800049a:	001e      	movs	r6, r3
 800049c:	42af      	cmp	r7, r5
 800049e:	d83a      	bhi.n	8000516 <__udivmoddi4+0xc2>
 80004a0:	42af      	cmp	r7, r5
 80004a2:	d100      	bne.n	80004a6 <__udivmoddi4+0x52>
 80004a4:	e078      	b.n	8000598 <__udivmoddi4+0x144>
 80004a6:	465b      	mov	r3, fp
 80004a8:	1ba4      	subs	r4, r4, r6
 80004aa:	41bd      	sbcs	r5, r7
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	da00      	bge.n	80004b2 <__udivmoddi4+0x5e>
 80004b0:	e075      	b.n	800059e <__udivmoddi4+0x14a>
 80004b2:	2200      	movs	r2, #0
 80004b4:	2300      	movs	r3, #0
 80004b6:	9200      	str	r2, [sp, #0]
 80004b8:	9301      	str	r3, [sp, #4]
 80004ba:	2301      	movs	r3, #1
 80004bc:	465a      	mov	r2, fp
 80004be:	4093      	lsls	r3, r2
 80004c0:	9301      	str	r3, [sp, #4]
 80004c2:	2301      	movs	r3, #1
 80004c4:	4642      	mov	r2, r8
 80004c6:	4093      	lsls	r3, r2
 80004c8:	9300      	str	r3, [sp, #0]
 80004ca:	e028      	b.n	800051e <__udivmoddi4+0xca>
 80004cc:	4282      	cmp	r2, r0
 80004ce:	d9cf      	bls.n	8000470 <__udivmoddi4+0x1c>
 80004d0:	2200      	movs	r2, #0
 80004d2:	2300      	movs	r3, #0
 80004d4:	9200      	str	r2, [sp, #0]
 80004d6:	9301      	str	r3, [sp, #4]
 80004d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <__udivmoddi4+0x8e>
 80004de:	601c      	str	r4, [r3, #0]
 80004e0:	605d      	str	r5, [r3, #4]
 80004e2:	9800      	ldr	r0, [sp, #0]
 80004e4:	9901      	ldr	r1, [sp, #4]
 80004e6:	b003      	add	sp, #12
 80004e8:	bcf0      	pop	{r4, r5, r6, r7}
 80004ea:	46bb      	mov	fp, r7
 80004ec:	46b2      	mov	sl, r6
 80004ee:	46a9      	mov	r9, r5
 80004f0:	46a0      	mov	r8, r4
 80004f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f4:	4642      	mov	r2, r8
 80004f6:	2320      	movs	r3, #32
 80004f8:	1a9b      	subs	r3, r3, r2
 80004fa:	4652      	mov	r2, sl
 80004fc:	40da      	lsrs	r2, r3
 80004fe:	4641      	mov	r1, r8
 8000500:	0013      	movs	r3, r2
 8000502:	464a      	mov	r2, r9
 8000504:	408a      	lsls	r2, r1
 8000506:	0017      	movs	r7, r2
 8000508:	4642      	mov	r2, r8
 800050a:	431f      	orrs	r7, r3
 800050c:	4653      	mov	r3, sl
 800050e:	4093      	lsls	r3, r2
 8000510:	001e      	movs	r6, r3
 8000512:	42af      	cmp	r7, r5
 8000514:	d9c4      	bls.n	80004a0 <__udivmoddi4+0x4c>
 8000516:	2200      	movs	r2, #0
 8000518:	2300      	movs	r3, #0
 800051a:	9200      	str	r2, [sp, #0]
 800051c:	9301      	str	r3, [sp, #4]
 800051e:	4643      	mov	r3, r8
 8000520:	2b00      	cmp	r3, #0
 8000522:	d0d9      	beq.n	80004d8 <__udivmoddi4+0x84>
 8000524:	07fb      	lsls	r3, r7, #31
 8000526:	0872      	lsrs	r2, r6, #1
 8000528:	431a      	orrs	r2, r3
 800052a:	4646      	mov	r6, r8
 800052c:	087b      	lsrs	r3, r7, #1
 800052e:	e00e      	b.n	800054e <__udivmoddi4+0xfa>
 8000530:	42ab      	cmp	r3, r5
 8000532:	d101      	bne.n	8000538 <__udivmoddi4+0xe4>
 8000534:	42a2      	cmp	r2, r4
 8000536:	d80c      	bhi.n	8000552 <__udivmoddi4+0xfe>
 8000538:	1aa4      	subs	r4, r4, r2
 800053a:	419d      	sbcs	r5, r3
 800053c:	2001      	movs	r0, #1
 800053e:	1924      	adds	r4, r4, r4
 8000540:	416d      	adcs	r5, r5
 8000542:	2100      	movs	r1, #0
 8000544:	3e01      	subs	r6, #1
 8000546:	1824      	adds	r4, r4, r0
 8000548:	414d      	adcs	r5, r1
 800054a:	2e00      	cmp	r6, #0
 800054c:	d006      	beq.n	800055c <__udivmoddi4+0x108>
 800054e:	42ab      	cmp	r3, r5
 8000550:	d9ee      	bls.n	8000530 <__udivmoddi4+0xdc>
 8000552:	3e01      	subs	r6, #1
 8000554:	1924      	adds	r4, r4, r4
 8000556:	416d      	adcs	r5, r5
 8000558:	2e00      	cmp	r6, #0
 800055a:	d1f8      	bne.n	800054e <__udivmoddi4+0xfa>
 800055c:	9800      	ldr	r0, [sp, #0]
 800055e:	9901      	ldr	r1, [sp, #4]
 8000560:	465b      	mov	r3, fp
 8000562:	1900      	adds	r0, r0, r4
 8000564:	4169      	adcs	r1, r5
 8000566:	2b00      	cmp	r3, #0
 8000568:	db24      	blt.n	80005b4 <__udivmoddi4+0x160>
 800056a:	002b      	movs	r3, r5
 800056c:	465a      	mov	r2, fp
 800056e:	4644      	mov	r4, r8
 8000570:	40d3      	lsrs	r3, r2
 8000572:	002a      	movs	r2, r5
 8000574:	40e2      	lsrs	r2, r4
 8000576:	001c      	movs	r4, r3
 8000578:	465b      	mov	r3, fp
 800057a:	0015      	movs	r5, r2
 800057c:	2b00      	cmp	r3, #0
 800057e:	db2a      	blt.n	80005d6 <__udivmoddi4+0x182>
 8000580:	0026      	movs	r6, r4
 8000582:	409e      	lsls	r6, r3
 8000584:	0033      	movs	r3, r6
 8000586:	0026      	movs	r6, r4
 8000588:	4647      	mov	r7, r8
 800058a:	40be      	lsls	r6, r7
 800058c:	0032      	movs	r2, r6
 800058e:	1a80      	subs	r0, r0, r2
 8000590:	4199      	sbcs	r1, r3
 8000592:	9000      	str	r0, [sp, #0]
 8000594:	9101      	str	r1, [sp, #4]
 8000596:	e79f      	b.n	80004d8 <__udivmoddi4+0x84>
 8000598:	42a3      	cmp	r3, r4
 800059a:	d8bc      	bhi.n	8000516 <__udivmoddi4+0xc2>
 800059c:	e783      	b.n	80004a6 <__udivmoddi4+0x52>
 800059e:	4642      	mov	r2, r8
 80005a0:	2320      	movs	r3, #32
 80005a2:	2100      	movs	r1, #0
 80005a4:	1a9b      	subs	r3, r3, r2
 80005a6:	2200      	movs	r2, #0
 80005a8:	9100      	str	r1, [sp, #0]
 80005aa:	9201      	str	r2, [sp, #4]
 80005ac:	2201      	movs	r2, #1
 80005ae:	40da      	lsrs	r2, r3
 80005b0:	9201      	str	r2, [sp, #4]
 80005b2:	e786      	b.n	80004c2 <__udivmoddi4+0x6e>
 80005b4:	4642      	mov	r2, r8
 80005b6:	2320      	movs	r3, #32
 80005b8:	1a9b      	subs	r3, r3, r2
 80005ba:	002a      	movs	r2, r5
 80005bc:	4646      	mov	r6, r8
 80005be:	409a      	lsls	r2, r3
 80005c0:	0023      	movs	r3, r4
 80005c2:	40f3      	lsrs	r3, r6
 80005c4:	4644      	mov	r4, r8
 80005c6:	4313      	orrs	r3, r2
 80005c8:	002a      	movs	r2, r5
 80005ca:	40e2      	lsrs	r2, r4
 80005cc:	001c      	movs	r4, r3
 80005ce:	465b      	mov	r3, fp
 80005d0:	0015      	movs	r5, r2
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	dad4      	bge.n	8000580 <__udivmoddi4+0x12c>
 80005d6:	4642      	mov	r2, r8
 80005d8:	002f      	movs	r7, r5
 80005da:	2320      	movs	r3, #32
 80005dc:	0026      	movs	r6, r4
 80005de:	4097      	lsls	r7, r2
 80005e0:	1a9b      	subs	r3, r3, r2
 80005e2:	40de      	lsrs	r6, r3
 80005e4:	003b      	movs	r3, r7
 80005e6:	4333      	orrs	r3, r6
 80005e8:	e7cd      	b.n	8000586 <__udivmoddi4+0x132>
 80005ea:	46c0      	nop			; (mov r8, r8)

080005ec <__clzdi2>:
 80005ec:	b510      	push	{r4, lr}
 80005ee:	2900      	cmp	r1, #0
 80005f0:	d103      	bne.n	80005fa <__clzdi2+0xe>
 80005f2:	f000 f807 	bl	8000604 <__clzsi2>
 80005f6:	3020      	adds	r0, #32
 80005f8:	e002      	b.n	8000600 <__clzdi2+0x14>
 80005fa:	0008      	movs	r0, r1
 80005fc:	f000 f802 	bl	8000604 <__clzsi2>
 8000600:	bd10      	pop	{r4, pc}
 8000602:	46c0      	nop			; (mov r8, r8)

08000604 <__clzsi2>:
 8000604:	211c      	movs	r1, #28
 8000606:	2301      	movs	r3, #1
 8000608:	041b      	lsls	r3, r3, #16
 800060a:	4298      	cmp	r0, r3
 800060c:	d301      	bcc.n	8000612 <__clzsi2+0xe>
 800060e:	0c00      	lsrs	r0, r0, #16
 8000610:	3910      	subs	r1, #16
 8000612:	0a1b      	lsrs	r3, r3, #8
 8000614:	4298      	cmp	r0, r3
 8000616:	d301      	bcc.n	800061c <__clzsi2+0x18>
 8000618:	0a00      	lsrs	r0, r0, #8
 800061a:	3908      	subs	r1, #8
 800061c:	091b      	lsrs	r3, r3, #4
 800061e:	4298      	cmp	r0, r3
 8000620:	d301      	bcc.n	8000626 <__clzsi2+0x22>
 8000622:	0900      	lsrs	r0, r0, #4
 8000624:	3904      	subs	r1, #4
 8000626:	a202      	add	r2, pc, #8	; (adr r2, 8000630 <__clzsi2+0x2c>)
 8000628:	5c10      	ldrb	r0, [r2, r0]
 800062a:	1840      	adds	r0, r0, r1
 800062c:	4770      	bx	lr
 800062e:	46c0      	nop			; (mov r8, r8)
 8000630:	02020304 	.word	0x02020304
 8000634:	01010101 	.word	0x01010101
	...

08000640 <FUNC_WIFI_CONECTAR>:
extern char buff[100];
extern UART_HandleTypeDef huart1;
TypedefFlag Flag;

void FUNC_WIFI_CONECTAR(char *SSID,char *PASSWORD)
{
 8000640:	b5b0      	push	{r4, r5, r7, lr}
 8000642:	b0a6      	sub	sp, #152	; 0x98
 8000644:	af22      	add	r7, sp, #136	; 0x88
 8000646:	6078      	str	r0, [r7, #4]
 8000648:	6039      	str	r1, [r7, #0]
	char *mensaje;
	int   tam=0;
 800064a:	2300      	movs	r3, #0
 800064c:	60fb      	str	r3, [r7, #12]
	if(!Flag.Wifi_conect)
 800064e:	4b26      	ldr	r3, [pc, #152]	; (80006e8 <FUNC_WIFI_CONECTAR+0xa8>)
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	2201      	movs	r2, #1
 8000654:	4013      	ands	r3, r2
 8000656:	b2db      	uxtb	r3, r3
 8000658:	2b00      	cmp	r3, #0
 800065a:	d140      	bne.n	80006de <FUNC_WIFI_CONECTAR+0x9e>
	{
	tam=strlen(SSID)+strlen(PASSWORD)+strlen(Conectar_Wifi)+4;
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	0018      	movs	r0, r3
 8000660:	f7ff fd50 	bl	8000104 <strlen>
 8000664:	0004      	movs	r4, r0
 8000666:	683b      	ldr	r3, [r7, #0]
 8000668:	0018      	movs	r0, r3
 800066a:	f7ff fd4b 	bl	8000104 <strlen>
 800066e:	0003      	movs	r3, r0
 8000670:	18e3      	adds	r3, r4, r3
 8000672:	330d      	adds	r3, #13
 8000674:	60fb      	str	r3, [r7, #12]
	mensaje=calloc(tam,sizeof(char));
 8000676:	68fb      	ldr	r3, [r7, #12]
 8000678:	2101      	movs	r1, #1
 800067a:	0018      	movs	r0, r3
 800067c:	f004 f8f4 	bl	8004868 <calloc>
 8000680:	0003      	movs	r3, r0
 8000682:	60bb      	str	r3, [r7, #8]
	sprintf(mensaje,"%s\"%s\",\"%s\"",Conectar_Wifi,SSID,PASSWORD);
 8000684:	687c      	ldr	r4, [r7, #4]
 8000686:	4a19      	ldr	r2, [pc, #100]	; (80006ec <FUNC_WIFI_CONECTAR+0xac>)
 8000688:	4919      	ldr	r1, [pc, #100]	; (80006f0 <FUNC_WIFI_CONECTAR+0xb0>)
 800068a:	68b8      	ldr	r0, [r7, #8]
 800068c:	683b      	ldr	r3, [r7, #0]
 800068e:	9300      	str	r3, [sp, #0]
 8000690:	0023      	movs	r3, r4
 8000692:	f004 fa59 	bl	8004b48 <siprintf>
	Transmit(mensaje,huart1);
 8000696:	4c17      	ldr	r4, [pc, #92]	; (80006f4 <FUNC_WIFI_CONECTAR+0xb4>)
 8000698:	68bd      	ldr	r5, [r7, #8]
 800069a:	466b      	mov	r3, sp
 800069c:	0018      	movs	r0, r3
 800069e:	0023      	movs	r3, r4
 80006a0:	330c      	adds	r3, #12
 80006a2:	2284      	movs	r2, #132	; 0x84
 80006a4:	0019      	movs	r1, r3
 80006a6:	f004 f91d 	bl	80048e4 <memcpy>
 80006aa:	6821      	ldr	r1, [r4, #0]
 80006ac:	6862      	ldr	r2, [r4, #4]
 80006ae:	68a3      	ldr	r3, [r4, #8]
 80006b0:	0028      	movs	r0, r5
 80006b2:	f000 f9b9 	bl	8000a28 <Transmit>
	Transmit((char*)String_final,huart1);
 80006b6:	4c0f      	ldr	r4, [pc, #60]	; (80006f4 <FUNC_WIFI_CONECTAR+0xb4>)
 80006b8:	4d0f      	ldr	r5, [pc, #60]	; (80006f8 <FUNC_WIFI_CONECTAR+0xb8>)
 80006ba:	466b      	mov	r3, sp
 80006bc:	0018      	movs	r0, r3
 80006be:	0023      	movs	r3, r4
 80006c0:	330c      	adds	r3, #12
 80006c2:	2284      	movs	r2, #132	; 0x84
 80006c4:	0019      	movs	r1, r3
 80006c6:	f004 f90d 	bl	80048e4 <memcpy>
 80006ca:	6821      	ldr	r1, [r4, #0]
 80006cc:	6862      	ldr	r2, [r4, #4]
 80006ce:	68a3      	ldr	r3, [r4, #8]
 80006d0:	0028      	movs	r0, r5
 80006d2:	f000 f9a9 	bl	8000a28 <Transmit>
	free(mensaje);
 80006d6:	68bb      	ldr	r3, [r7, #8]
 80006d8:	0018      	movs	r0, r3
 80006da:	f004 f8f9 	bl	80048d0 <free>
	}
}
 80006de:	46c0      	nop			; (mov r8, r8)
 80006e0:	46bd      	mov	sp, r7
 80006e2:	b004      	add	sp, #16
 80006e4:	bdb0      	pop	{r4, r5, r7, pc}
 80006e6:	46c0      	nop			; (mov r8, r8)
 80006e8:	2000008c 	.word	0x2000008c
 80006ec:	08005264 	.word	0x08005264
 80006f0:	08005270 	.word	0x08005270
 80006f4:	20000094 	.word	0x20000094
 80006f8:	0800527c 	.word	0x0800527c

080006fc <FUNC_MQTT_CONECTAR_SERVIDOR>:
//		HAL_UART_Receive_IT(&huart1,(uint8_t*)buff,strlen(buff)+1);
//	} while (!strstr(buff,"OK"));
}
/////////////////////////////////////////////////
void FUNC_MQTT_CONECTAR_SERVIDOR(char *BROKER, char *ID)
{
 80006fc:	b5b0      	push	{r4, r5, r7, lr}
 80006fe:	b0a6      	sub	sp, #152	; 0x98
 8000700:	af22      	add	r7, sp, #136	; 0x88
 8000702:	6078      	str	r0, [r7, #4]
 8000704:	6039      	str	r1, [r7, #0]
	char *mensaje;
	int   tam=0;
 8000706:	2300      	movs	r3, #0
 8000708:	60fb      	str	r3, [r7, #12]
	if(Flag.Wifi_conect)
 800070a:	4b48      	ldr	r3, [pc, #288]	; (800082c <FUNC_MQTT_CONECTAR_SERVIDOR+0x130>)
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	2201      	movs	r2, #1
 8000710:	4013      	ands	r3, r2
 8000712:	b2db      	uxtb	r3, r3
 8000714:	2b00      	cmp	r3, #0
 8000716:	d100      	bne.n	800071a <FUNC_MQTT_CONECTAR_SERVIDOR+0x1e>
 8000718:	e083      	b.n	8000822 <FUNC_MQTT_CONECTAR_SERVIDOR+0x126>
	{
		//AT+MQTTUSERCFG=0,1,"ESP32","espressif","1234567890",0,0,""
	tam=strlen(Configurar_ID)+strlen(Scheme)+strlen(ID)+strlen(comillas)+strlen(comillas)+10;
 800071a:	683b      	ldr	r3, [r7, #0]
 800071c:	0018      	movs	r0, r3
 800071e:	f7ff fcf1 	bl	8000104 <strlen>
 8000722:	0003      	movs	r3, r0
 8000724:	3320      	adds	r3, #32
 8000726:	60fb      	str	r3, [r7, #12]
	mensaje=calloc(tam,sizeof(char));
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	2101      	movs	r1, #1
 800072c:	0018      	movs	r0, r3
 800072e:	f004 f89b 	bl	8004868 <calloc>
 8000732:	0003      	movs	r3, r0
 8000734:	60bb      	str	r3, [r7, #8]
	sprintf(mensaje,"%s%s,\"%s\",%s,%s,0,0,%s",Configurar_ID,Scheme,ID,comillas,comillas,comillas);
 8000736:	4c3e      	ldr	r4, [pc, #248]	; (8000830 <FUNC_MQTT_CONECTAR_SERVIDOR+0x134>)
 8000738:	4a3e      	ldr	r2, [pc, #248]	; (8000834 <FUNC_MQTT_CONECTAR_SERVIDOR+0x138>)
 800073a:	493f      	ldr	r1, [pc, #252]	; (8000838 <FUNC_MQTT_CONECTAR_SERVIDOR+0x13c>)
 800073c:	68b8      	ldr	r0, [r7, #8]
 800073e:	4b3f      	ldr	r3, [pc, #252]	; (800083c <FUNC_MQTT_CONECTAR_SERVIDOR+0x140>)
 8000740:	9303      	str	r3, [sp, #12]
 8000742:	4b3e      	ldr	r3, [pc, #248]	; (800083c <FUNC_MQTT_CONECTAR_SERVIDOR+0x140>)
 8000744:	9302      	str	r3, [sp, #8]
 8000746:	4b3d      	ldr	r3, [pc, #244]	; (800083c <FUNC_MQTT_CONECTAR_SERVIDOR+0x140>)
 8000748:	9301      	str	r3, [sp, #4]
 800074a:	683b      	ldr	r3, [r7, #0]
 800074c:	9300      	str	r3, [sp, #0]
 800074e:	0023      	movs	r3, r4
 8000750:	f004 f9fa 	bl	8004b48 <siprintf>
	Transmit(mensaje,huart1);
 8000754:	4c3a      	ldr	r4, [pc, #232]	; (8000840 <FUNC_MQTT_CONECTAR_SERVIDOR+0x144>)
 8000756:	68bd      	ldr	r5, [r7, #8]
 8000758:	466b      	mov	r3, sp
 800075a:	0018      	movs	r0, r3
 800075c:	0023      	movs	r3, r4
 800075e:	330c      	adds	r3, #12
 8000760:	2284      	movs	r2, #132	; 0x84
 8000762:	0019      	movs	r1, r3
 8000764:	f004 f8be 	bl	80048e4 <memcpy>
 8000768:	6821      	ldr	r1, [r4, #0]
 800076a:	6862      	ldr	r2, [r4, #4]
 800076c:	68a3      	ldr	r3, [r4, #8]
 800076e:	0028      	movs	r0, r5
 8000770:	f000 f95a 	bl	8000a28 <Transmit>
	Transmit((char*)String_final,huart1);
 8000774:	4c32      	ldr	r4, [pc, #200]	; (8000840 <FUNC_MQTT_CONECTAR_SERVIDOR+0x144>)
 8000776:	4d33      	ldr	r5, [pc, #204]	; (8000844 <FUNC_MQTT_CONECTAR_SERVIDOR+0x148>)
 8000778:	466b      	mov	r3, sp
 800077a:	0018      	movs	r0, r3
 800077c:	0023      	movs	r3, r4
 800077e:	330c      	adds	r3, #12
 8000780:	2284      	movs	r2, #132	; 0x84
 8000782:	0019      	movs	r1, r3
 8000784:	f004 f8ae 	bl	80048e4 <memcpy>
 8000788:	6821      	ldr	r1, [r4, #0]
 800078a:	6862      	ldr	r2, [r4, #4]
 800078c:	68a3      	ldr	r3, [r4, #8]
 800078e:	0028      	movs	r0, r5
 8000790:	f000 f94a 	bl	8000a28 <Transmit>
	HAL_Delay(100);
 8000794:	2064      	movs	r0, #100	; 0x64
 8000796:	f000 fda1 	bl	80012dc <HAL_Delay>
	free(mensaje);
 800079a:	68bb      	ldr	r3, [r7, #8]
 800079c:	0018      	movs	r0, r3
 800079e:	f004 f897 	bl	80048d0 <free>
	HAL_Delay(100);
 80007a2:	2064      	movs	r0, #100	; 0x64
 80007a4:	f000 fd9a 	bl	80012dc <HAL_Delay>
	//AT+MQTTCONN=0,"192.168.31.113",1883,0
	tam=strlen(Conectar_broker)+strlen(BROKER)+strlen(Puerto)+4;
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	0018      	movs	r0, r3
 80007ac:	f7ff fcaa 	bl	8000104 <strlen>
 80007b0:	0003      	movs	r3, r0
 80007b2:	3316      	adds	r3, #22
 80007b4:	60fb      	str	r3, [r7, #12]
	mensaje=calloc(tam,sizeof(char));
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	2101      	movs	r1, #1
 80007ba:	0018      	movs	r0, r3
 80007bc:	f004 f854 	bl	8004868 <calloc>
 80007c0:	0003      	movs	r3, r0
 80007c2:	60bb      	str	r3, [r7, #8]
	sprintf(mensaje,"%s\"%s\",%s,%s",Conectar_broker,BROKER,Puerto,Reconnect_server);
 80007c4:	687c      	ldr	r4, [r7, #4]
 80007c6:	4a20      	ldr	r2, [pc, #128]	; (8000848 <FUNC_MQTT_CONECTAR_SERVIDOR+0x14c>)
 80007c8:	4920      	ldr	r1, [pc, #128]	; (800084c <FUNC_MQTT_CONECTAR_SERVIDOR+0x150>)
 80007ca:	68b8      	ldr	r0, [r7, #8]
 80007cc:	4b18      	ldr	r3, [pc, #96]	; (8000830 <FUNC_MQTT_CONECTAR_SERVIDOR+0x134>)
 80007ce:	9301      	str	r3, [sp, #4]
 80007d0:	4b1f      	ldr	r3, [pc, #124]	; (8000850 <FUNC_MQTT_CONECTAR_SERVIDOR+0x154>)
 80007d2:	9300      	str	r3, [sp, #0]
 80007d4:	0023      	movs	r3, r4
 80007d6:	f004 f9b7 	bl	8004b48 <siprintf>
	Transmit(mensaje, huart1);
 80007da:	4c19      	ldr	r4, [pc, #100]	; (8000840 <FUNC_MQTT_CONECTAR_SERVIDOR+0x144>)
 80007dc:	68bd      	ldr	r5, [r7, #8]
 80007de:	466b      	mov	r3, sp
 80007e0:	0018      	movs	r0, r3
 80007e2:	0023      	movs	r3, r4
 80007e4:	330c      	adds	r3, #12
 80007e6:	2284      	movs	r2, #132	; 0x84
 80007e8:	0019      	movs	r1, r3
 80007ea:	f004 f87b 	bl	80048e4 <memcpy>
 80007ee:	6821      	ldr	r1, [r4, #0]
 80007f0:	6862      	ldr	r2, [r4, #4]
 80007f2:	68a3      	ldr	r3, [r4, #8]
 80007f4:	0028      	movs	r0, r5
 80007f6:	f000 f917 	bl	8000a28 <Transmit>
	Transmit((char*)String_final,huart1);
 80007fa:	4c11      	ldr	r4, [pc, #68]	; (8000840 <FUNC_MQTT_CONECTAR_SERVIDOR+0x144>)
 80007fc:	4d11      	ldr	r5, [pc, #68]	; (8000844 <FUNC_MQTT_CONECTAR_SERVIDOR+0x148>)
 80007fe:	466b      	mov	r3, sp
 8000800:	0018      	movs	r0, r3
 8000802:	0023      	movs	r3, r4
 8000804:	330c      	adds	r3, #12
 8000806:	2284      	movs	r2, #132	; 0x84
 8000808:	0019      	movs	r1, r3
 800080a:	f004 f86b 	bl	80048e4 <memcpy>
 800080e:	6821      	ldr	r1, [r4, #0]
 8000810:	6862      	ldr	r2, [r4, #4]
 8000812:	68a3      	ldr	r3, [r4, #8]
 8000814:	0028      	movs	r0, r5
 8000816:	f000 f907 	bl	8000a28 <Transmit>
	free(mensaje);
 800081a:	68bb      	ldr	r3, [r7, #8]
 800081c:	0018      	movs	r0, r3
 800081e:	f004 f857 	bl	80048d0 <free>
	}
}
 8000822:	46c0      	nop			; (mov r8, r8)
 8000824:	46bd      	mov	sp, r7
 8000826:	b004      	add	sp, #16
 8000828:	bdb0      	pop	{r4, r5, r7, pc}
 800082a:	46c0      	nop			; (mov r8, r8)
 800082c:	2000008c 	.word	0x2000008c
 8000830:	08005280 	.word	0x08005280
 8000834:	08005284 	.word	0x08005284
 8000838:	08005298 	.word	0x08005298
 800083c:	080052b0 	.word	0x080052b0
 8000840:	20000094 	.word	0x20000094
 8000844:	0800527c 	.word	0x0800527c
 8000848:	080052b4 	.word	0x080052b4
 800084c:	080052c4 	.word	0x080052c4
 8000850:	080052d4 	.word	0x080052d4

08000854 <FUNC_MQTT_PUBLICAR>:
void FUNC_MQTT_PUBLICAR(char *Mensaje,char *Topico)
{
 8000854:	b5b0      	push	{r4, r5, r7, lr}
 8000856:	b0a6      	sub	sp, #152	; 0x98
 8000858:	af22      	add	r7, sp, #136	; 0x88
 800085a:	6078      	str	r0, [r7, #4]
 800085c:	6039      	str	r1, [r7, #0]
	char *mensaje;
	int   tam=0;
 800085e:	2300      	movs	r3, #0
 8000860:	60fb      	str	r3, [r7, #12]
	if(Flag.Server_conect)
 8000862:	4b28      	ldr	r3, [pc, #160]	; (8000904 <FUNC_MQTT_PUBLICAR+0xb0>)
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	2202      	movs	r2, #2
 8000868:	4013      	ands	r3, r2
 800086a:	b2db      	uxtb	r3, r3
 800086c:	2b00      	cmp	r3, #0
 800086e:	d044      	beq.n	80008fa <FUNC_MQTT_PUBLICAR+0xa6>
	{
		//AT+MQTTPUB=0,"topic","test",1,0
	tam=strlen(Publicar)+strlen(Topico)+strlen(Mensaje)+strlen(QOS)+strlen(Retain)+10;
 8000870:	683b      	ldr	r3, [r7, #0]
 8000872:	0018      	movs	r0, r3
 8000874:	f7ff fc46 	bl	8000104 <strlen>
 8000878:	0004      	movs	r4, r0
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	0018      	movs	r0, r3
 800087e:	f7ff fc41 	bl	8000104 <strlen>
 8000882:	0003      	movs	r3, r0
 8000884:	18e3      	adds	r3, r4, r3
 8000886:	3319      	adds	r3, #25
 8000888:	60fb      	str	r3, [r7, #12]
	mensaje=calloc(tam,sizeof(char));
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	2101      	movs	r1, #1
 800088e:	0018      	movs	r0, r3
 8000890:	f003 ffea 	bl	8004868 <calloc>
 8000894:	0003      	movs	r3, r0
 8000896:	60bb      	str	r3, [r7, #8]
	sprintf(mensaje,"%s\"%s\",\"%s\",%s,%s",Publicar,Topico,Mensaje,QOS,Retain);
 8000898:	683c      	ldr	r4, [r7, #0]
 800089a:	4a1b      	ldr	r2, [pc, #108]	; (8000908 <FUNC_MQTT_PUBLICAR+0xb4>)
 800089c:	491b      	ldr	r1, [pc, #108]	; (800090c <FUNC_MQTT_PUBLICAR+0xb8>)
 800089e:	68b8      	ldr	r0, [r7, #8]
 80008a0:	4b1b      	ldr	r3, [pc, #108]	; (8000910 <FUNC_MQTT_PUBLICAR+0xbc>)
 80008a2:	9302      	str	r3, [sp, #8]
 80008a4:	4b1b      	ldr	r3, [pc, #108]	; (8000914 <FUNC_MQTT_PUBLICAR+0xc0>)
 80008a6:	9301      	str	r3, [sp, #4]
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	9300      	str	r3, [sp, #0]
 80008ac:	0023      	movs	r3, r4
 80008ae:	f004 f94b 	bl	8004b48 <siprintf>
	Transmit(mensaje, huart1);
 80008b2:	4c19      	ldr	r4, [pc, #100]	; (8000918 <FUNC_MQTT_PUBLICAR+0xc4>)
 80008b4:	68bd      	ldr	r5, [r7, #8]
 80008b6:	466b      	mov	r3, sp
 80008b8:	0018      	movs	r0, r3
 80008ba:	0023      	movs	r3, r4
 80008bc:	330c      	adds	r3, #12
 80008be:	2284      	movs	r2, #132	; 0x84
 80008c0:	0019      	movs	r1, r3
 80008c2:	f004 f80f 	bl	80048e4 <memcpy>
 80008c6:	6821      	ldr	r1, [r4, #0]
 80008c8:	6862      	ldr	r2, [r4, #4]
 80008ca:	68a3      	ldr	r3, [r4, #8]
 80008cc:	0028      	movs	r0, r5
 80008ce:	f000 f8ab 	bl	8000a28 <Transmit>
	Transmit((char*)String_final,huart1);
 80008d2:	4c11      	ldr	r4, [pc, #68]	; (8000918 <FUNC_MQTT_PUBLICAR+0xc4>)
 80008d4:	4d11      	ldr	r5, [pc, #68]	; (800091c <FUNC_MQTT_PUBLICAR+0xc8>)
 80008d6:	466b      	mov	r3, sp
 80008d8:	0018      	movs	r0, r3
 80008da:	0023      	movs	r3, r4
 80008dc:	330c      	adds	r3, #12
 80008de:	2284      	movs	r2, #132	; 0x84
 80008e0:	0019      	movs	r1, r3
 80008e2:	f003 ffff 	bl	80048e4 <memcpy>
 80008e6:	6821      	ldr	r1, [r4, #0]
 80008e8:	6862      	ldr	r2, [r4, #4]
 80008ea:	68a3      	ldr	r3, [r4, #8]
 80008ec:	0028      	movs	r0, r5
 80008ee:	f000 f89b 	bl	8000a28 <Transmit>
	free(mensaje);
 80008f2:	68bb      	ldr	r3, [r7, #8]
 80008f4:	0018      	movs	r0, r3
 80008f6:	f003 ffeb 	bl	80048d0 <free>
	}
}
 80008fa:	46c0      	nop			; (mov r8, r8)
 80008fc:	46bd      	mov	sp, r7
 80008fe:	b004      	add	sp, #16
 8000900:	bdb0      	pop	{r4, r5, r7, pc}
 8000902:	46c0      	nop			; (mov r8, r8)
 8000904:	2000008c 	.word	0x2000008c
 8000908:	080052dc 	.word	0x080052dc
 800090c:	080052ec 	.word	0x080052ec
 8000910:	08005300 	.word	0x08005300
 8000914:	08005304 	.word	0x08005304
 8000918:	20000094 	.word	0x20000094
 800091c:	0800527c 	.word	0x0800527c

08000920 <FUNC_MQTT_SUBSCRIBIR>:
void FUNC_MQTT_SUBSCRIBIR(char *Topico)
{
 8000920:	b5b0      	push	{r4, r5, r7, lr}
 8000922:	b0a6      	sub	sp, #152	; 0x98
 8000924:	af22      	add	r7, sp, #136	; 0x88
 8000926:	6078      	str	r0, [r7, #4]
	char *mensaje;
	int   tam=0;
 8000928:	2300      	movs	r3, #0
 800092a:	60fb      	str	r3, [r7, #12]
	if(Flag.Server_conect)
 800092c:	4b22      	ldr	r3, [pc, #136]	; (80009b8 <FUNC_MQTT_SUBSCRIBIR+0x98>)
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	2202      	movs	r2, #2
 8000932:	4013      	ands	r3, r2
 8000934:	b2db      	uxtb	r3, r3
 8000936:	2b00      	cmp	r3, #0
 8000938:	d03a      	beq.n	80009b0 <FUNC_MQTT_SUBSCRIBIR+0x90>
	{
		//AT+MQTTSUB=0,"topic",1
	tam=strlen(Subscribirse)+strlen(Topico)+strlen(QOS)+10;
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	0018      	movs	r0, r3
 800093e:	f7ff fbe1 	bl	8000104 <strlen>
 8000942:	0003      	movs	r3, r0
 8000944:	3318      	adds	r3, #24
 8000946:	60fb      	str	r3, [r7, #12]
	mensaje=calloc(tam,sizeof(char));
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	2101      	movs	r1, #1
 800094c:	0018      	movs	r0, r3
 800094e:	f003 ff8b 	bl	8004868 <calloc>
 8000952:	0003      	movs	r3, r0
 8000954:	60bb      	str	r3, [r7, #8]
	sprintf(mensaje,"%s\"%s\",%s",Subscribirse,Topico,QOS);
 8000956:	687c      	ldr	r4, [r7, #4]
 8000958:	4a18      	ldr	r2, [pc, #96]	; (80009bc <FUNC_MQTT_SUBSCRIBIR+0x9c>)
 800095a:	4919      	ldr	r1, [pc, #100]	; (80009c0 <FUNC_MQTT_SUBSCRIBIR+0xa0>)
 800095c:	68b8      	ldr	r0, [r7, #8]
 800095e:	4b19      	ldr	r3, [pc, #100]	; (80009c4 <FUNC_MQTT_SUBSCRIBIR+0xa4>)
 8000960:	9300      	str	r3, [sp, #0]
 8000962:	0023      	movs	r3, r4
 8000964:	f004 f8f0 	bl	8004b48 <siprintf>
	Transmit(mensaje, huart1);
 8000968:	4c17      	ldr	r4, [pc, #92]	; (80009c8 <FUNC_MQTT_SUBSCRIBIR+0xa8>)
 800096a:	68bd      	ldr	r5, [r7, #8]
 800096c:	466b      	mov	r3, sp
 800096e:	0018      	movs	r0, r3
 8000970:	0023      	movs	r3, r4
 8000972:	330c      	adds	r3, #12
 8000974:	2284      	movs	r2, #132	; 0x84
 8000976:	0019      	movs	r1, r3
 8000978:	f003 ffb4 	bl	80048e4 <memcpy>
 800097c:	6821      	ldr	r1, [r4, #0]
 800097e:	6862      	ldr	r2, [r4, #4]
 8000980:	68a3      	ldr	r3, [r4, #8]
 8000982:	0028      	movs	r0, r5
 8000984:	f000 f850 	bl	8000a28 <Transmit>
	Transmit((char*)String_final,huart1);
 8000988:	4c0f      	ldr	r4, [pc, #60]	; (80009c8 <FUNC_MQTT_SUBSCRIBIR+0xa8>)
 800098a:	4d10      	ldr	r5, [pc, #64]	; (80009cc <FUNC_MQTT_SUBSCRIBIR+0xac>)
 800098c:	466b      	mov	r3, sp
 800098e:	0018      	movs	r0, r3
 8000990:	0023      	movs	r3, r4
 8000992:	330c      	adds	r3, #12
 8000994:	2284      	movs	r2, #132	; 0x84
 8000996:	0019      	movs	r1, r3
 8000998:	f003 ffa4 	bl	80048e4 <memcpy>
 800099c:	6821      	ldr	r1, [r4, #0]
 800099e:	6862      	ldr	r2, [r4, #4]
 80009a0:	68a3      	ldr	r3, [r4, #8]
 80009a2:	0028      	movs	r0, r5
 80009a4:	f000 f840 	bl	8000a28 <Transmit>
	free(mensaje);
 80009a8:	68bb      	ldr	r3, [r7, #8]
 80009aa:	0018      	movs	r0, r3
 80009ac:	f003 ff90 	bl	80048d0 <free>
	}
}
 80009b0:	46c0      	nop			; (mov r8, r8)
 80009b2:	46bd      	mov	sp, r7
 80009b4:	b004      	add	sp, #16
 80009b6:	bdb0      	pop	{r4, r5, r7, pc}
 80009b8:	2000008c 	.word	0x2000008c
 80009bc:	08005308 	.word	0x08005308
 80009c0:	08005318 	.word	0x08005318
 80009c4:	08005304 	.word	0x08005304
 80009c8:	20000094 	.word	0x20000094
 80009cc:	0800527c 	.word	0x0800527c

080009d0 <FUNC_ESP_RESET>:
///////////////////////////////////////////////////
//void FUNC_ESP_INIT(char *SSID,char *PASSWORD,char *BROKER,char *ID,int Conf_wifi);
void FUNC_ESP_RESET(char *Reset_comand)
{
 80009d0:	b5b0      	push	{r4, r5, r7, lr}
 80009d2:	b0a4      	sub	sp, #144	; 0x90
 80009d4:	af22      	add	r7, sp, #136	; 0x88
 80009d6:	6078      	str	r0, [r7, #4]
	Transmit(Reset_comand, huart1);
 80009d8:	4c11      	ldr	r4, [pc, #68]	; (8000a20 <FUNC_ESP_RESET+0x50>)
 80009da:	687d      	ldr	r5, [r7, #4]
 80009dc:	466b      	mov	r3, sp
 80009de:	0018      	movs	r0, r3
 80009e0:	0023      	movs	r3, r4
 80009e2:	330c      	adds	r3, #12
 80009e4:	2284      	movs	r2, #132	; 0x84
 80009e6:	0019      	movs	r1, r3
 80009e8:	f003 ff7c 	bl	80048e4 <memcpy>
 80009ec:	6821      	ldr	r1, [r4, #0]
 80009ee:	6862      	ldr	r2, [r4, #4]
 80009f0:	68a3      	ldr	r3, [r4, #8]
 80009f2:	0028      	movs	r0, r5
 80009f4:	f000 f818 	bl	8000a28 <Transmit>
	Transmit((char*)String_final,huart1);
 80009f8:	4c09      	ldr	r4, [pc, #36]	; (8000a20 <FUNC_ESP_RESET+0x50>)
 80009fa:	4d0a      	ldr	r5, [pc, #40]	; (8000a24 <FUNC_ESP_RESET+0x54>)
 80009fc:	466b      	mov	r3, sp
 80009fe:	0018      	movs	r0, r3
 8000a00:	0023      	movs	r3, r4
 8000a02:	330c      	adds	r3, #12
 8000a04:	2284      	movs	r2, #132	; 0x84
 8000a06:	0019      	movs	r1, r3
 8000a08:	f003 ff6c 	bl	80048e4 <memcpy>
 8000a0c:	6821      	ldr	r1, [r4, #0]
 8000a0e:	6862      	ldr	r2, [r4, #4]
 8000a10:	68a3      	ldr	r3, [r4, #8]
 8000a12:	0028      	movs	r0, r5
 8000a14:	f000 f808 	bl	8000a28 <Transmit>
}
 8000a18:	46c0      	nop			; (mov r8, r8)
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	b002      	add	sp, #8
 8000a1e:	bdb0      	pop	{r4, r5, r7, pc}
 8000a20:	20000094 	.word	0x20000094
 8000a24:	0800527c 	.word	0x0800527c

08000a28 <Transmit>:
//void FUNC_ESP_ENVIO_LIBRE(char *Mensaje);
////////////////////////////////////////////////
void Transmit(char *Mensaje,UART_HandleTypeDef huart)
{
 8000a28:	b084      	sub	sp, #16
 8000a2a:	b590      	push	{r4, r7, lr}
 8000a2c:	b083      	sub	sp, #12
 8000a2e:	af00      	add	r7, sp, #0
 8000a30:	6078      	str	r0, [r7, #4]
 8000a32:	2004      	movs	r0, #4
 8000a34:	2410      	movs	r4, #16
 8000a36:	1900      	adds	r0, r0, r4
 8000a38:	2408      	movs	r4, #8
 8000a3a:	46a4      	mov	ip, r4
 8000a3c:	44bc      	add	ip, r7
 8000a3e:	4460      	add	r0, ip
 8000a40:	6001      	str	r1, [r0, #0]
 8000a42:	6042      	str	r2, [r0, #4]
 8000a44:	6083      	str	r3, [r0, #8]
	//HAL_UART_Transmit_IT(&huart,(uint8_t*)Mensaje,strlen(Mensaje));
	HAL_UART_Transmit(&huart, (uint8_t*)Mensaje,strlen(Mensaje),HAL_MAX_DELAY);
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	0018      	movs	r0, r3
 8000a4a:	f7ff fb5b 	bl	8000104 <strlen>
 8000a4e:	0003      	movs	r3, r0
 8000a50:	b29a      	uxth	r2, r3
 8000a52:	2301      	movs	r3, #1
 8000a54:	425b      	negs	r3, r3
 8000a56:	6879      	ldr	r1, [r7, #4]
 8000a58:	2014      	movs	r0, #20
 8000a5a:	2408      	movs	r4, #8
 8000a5c:	1900      	adds	r0, r0, r4
 8000a5e:	19c0      	adds	r0, r0, r7
 8000a60:	f001 feda 	bl	8002818 <HAL_UART_Transmit>
}
 8000a64:	46c0      	nop			; (mov r8, r8)
 8000a66:	46bd      	mov	sp, r7
 8000a68:	b003      	add	sp, #12
 8000a6a:	bc90      	pop	{r4, r7}
 8000a6c:	bc08      	pop	{r3}
 8000a6e:	b004      	add	sp, #16
 8000a70:	4718      	bx	r3
	...

08000a74 <Recibir>:
  {
    FUNC_MQTT_PUBLICAR("B3ON","B3");
  }
}
void Recibir(char *Mensaje)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
	if(strstr(Mensaje,"GOT IP"))
 8000a7c:	4a27      	ldr	r2, [pc, #156]	; (8000b1c <Recibir+0xa8>)
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	0011      	movs	r1, r2
 8000a82:	0018      	movs	r0, r3
 8000a84:	f004 f880 	bl	8004b88 <strstr>
 8000a88:	1e03      	subs	r3, r0, #0
 8000a8a:	d005      	beq.n	8000a98 <Recibir+0x24>
	{
		Flag.Wifi_conect=1;
 8000a8c:	4b24      	ldr	r3, [pc, #144]	; (8000b20 <Recibir+0xac>)
 8000a8e:	781a      	ldrb	r2, [r3, #0]
 8000a90:	2101      	movs	r1, #1
 8000a92:	430a      	orrs	r2, r1
 8000a94:	701a      	strb	r2, [r3, #0]





}
 8000a96:	e03c      	b.n	8000b12 <Recibir+0x9e>
	else if(strstr(Mensaje,"ready"))
 8000a98:	4a22      	ldr	r2, [pc, #136]	; (8000b24 <Recibir+0xb0>)
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	0011      	movs	r1, r2
 8000a9e:	0018      	movs	r0, r3
 8000aa0:	f004 f872 	bl	8004b88 <strstr>
 8000aa4:	1e03      	subs	r3, r0, #0
 8000aa6:	d005      	beq.n	8000ab4 <Recibir+0x40>
		Flag.INIT=1;
 8000aa8:	4b1d      	ldr	r3, [pc, #116]	; (8000b20 <Recibir+0xac>)
 8000aaa:	781a      	ldrb	r2, [r3, #0]
 8000aac:	2140      	movs	r1, #64	; 0x40
 8000aae:	430a      	orrs	r2, r1
 8000ab0:	701a      	strb	r2, [r3, #0]
}
 8000ab2:	e02e      	b.n	8000b12 <Recibir+0x9e>
	else if(strstr(Mensaje,"+MQTTCONNECTED:"))
 8000ab4:	4a1c      	ldr	r2, [pc, #112]	; (8000b28 <Recibir+0xb4>)
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	0011      	movs	r1, r2
 8000aba:	0018      	movs	r0, r3
 8000abc:	f004 f864 	bl	8004b88 <strstr>
 8000ac0:	1e03      	subs	r3, r0, #0
 8000ac2:	d005      	beq.n	8000ad0 <Recibir+0x5c>
		Flag.Server_conect=1;
 8000ac4:	4b16      	ldr	r3, [pc, #88]	; (8000b20 <Recibir+0xac>)
 8000ac6:	781a      	ldrb	r2, [r3, #0]
 8000ac8:	2102      	movs	r1, #2
 8000aca:	430a      	orrs	r2, r1
 8000acc:	701a      	strb	r2, [r3, #0]
}
 8000ace:	e020      	b.n	8000b12 <Recibir+0x9e>
	else if(strstr(Mensaje,"+MQTTSUBRECV:"))
 8000ad0:	4a16      	ldr	r2, [pc, #88]	; (8000b2c <Recibir+0xb8>)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	0011      	movs	r1, r2
 8000ad6:	0018      	movs	r0, r3
 8000ad8:	f004 f856 	bl	8004b88 <strstr>
 8000adc:	1e03      	subs	r3, r0, #0
 8000ade:	d018      	beq.n	8000b12 <Recibir+0x9e>
	Flag.OK=!Flag.OK;
 8000ae0:	4b0f      	ldr	r3, [pc, #60]	; (8000b20 <Recibir+0xac>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	2204      	movs	r2, #4
 8000ae6:	4013      	ands	r3, r2
 8000ae8:	b2db      	uxtb	r3, r3
 8000aea:	425a      	negs	r2, r3
 8000aec:	4153      	adcs	r3, r2
 8000aee:	b2da      	uxtb	r2, r3
 8000af0:	4b0b      	ldr	r3, [pc, #44]	; (8000b20 <Recibir+0xac>)
 8000af2:	2101      	movs	r1, #1
 8000af4:	400a      	ands	r2, r1
 8000af6:	0090      	lsls	r0, r2, #2
 8000af8:	781a      	ldrb	r2, [r3, #0]
 8000afa:	2104      	movs	r1, #4
 8000afc:	438a      	bics	r2, r1
 8000afe:	1c11      	adds	r1, r2, #0
 8000b00:	1c02      	adds	r2, r0, #0
 8000b02:	430a      	orrs	r2, r1
 8000b04:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port,LED_GREEN_Pin);
 8000b06:	23a0      	movs	r3, #160	; 0xa0
 8000b08:	05db      	lsls	r3, r3, #23
 8000b0a:	2120      	movs	r1, #32
 8000b0c:	0018      	movs	r0, r3
 8000b0e:	f000 ff4a 	bl	80019a6 <HAL_GPIO_TogglePin>
}
 8000b12:	46c0      	nop			; (mov r8, r8)
 8000b14:	46bd      	mov	sp, r7
 8000b16:	b002      	add	sp, #8
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	46c0      	nop			; (mov r8, r8)
 8000b1c:	0800536c 	.word	0x0800536c
 8000b20:	2000008c 	.word	0x2000008c
 8000b24:	08005374 	.word	0x08005374
 8000b28:	0800537c 	.word	0x0800537c
 8000b2c:	0800538c 	.word	0x0800538c

08000b30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b34:	f000 fb4c 	bl	80011d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b38:	f000 f868 	bl	8000c0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b3c:	f000 f97a 	bl	8000e34 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000b40:	f000 f92a 	bl	8000d98 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000b44:	f000 f8da 	bl	8000cfc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1,&Rx,1);
 8000b48:	4925      	ldr	r1, [pc, #148]	; (8000be0 <main+0xb0>)
 8000b4a:	4b26      	ldr	r3, [pc, #152]	; (8000be4 <main+0xb4>)
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	0018      	movs	r0, r3
 8000b50:	f001 ff0e 	bl	8002970 <HAL_UART_Receive_IT>
  FUNC_ESP_RESET(Reset);
 8000b54:	4b24      	ldr	r3, [pc, #144]	; (8000be8 <main+0xb8>)
 8000b56:	0018      	movs	r0, r3
 8000b58:	f7ff ff3a 	bl	80009d0 <FUNC_ESP_RESET>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(Flag.INIT)
 8000b5c:	4b23      	ldr	r3, [pc, #140]	; (8000bec <main+0xbc>)
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	2240      	movs	r2, #64	; 0x40
 8000b62:	4013      	ands	r3, r2
 8000b64:	b2db      	uxtb	r3, r3
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d027      	beq.n	8000bba <main+0x8a>
	  {   HAL_Delay(1000);
 8000b6a:	23fa      	movs	r3, #250	; 0xfa
 8000b6c:	009b      	lsls	r3, r3, #2
 8000b6e:	0018      	movs	r0, r3
 8000b70:	f000 fbb4 	bl	80012dc <HAL_Delay>
		  FUNC_WIFI_CONECTAR("ClaroB550","santodomingo0901!");
 8000b74:	4a1e      	ldr	r2, [pc, #120]	; (8000bf0 <main+0xc0>)
 8000b76:	4b1f      	ldr	r3, [pc, #124]	; (8000bf4 <main+0xc4>)
 8000b78:	0011      	movs	r1, r2
 8000b7a:	0018      	movs	r0, r3
 8000b7c:	f7ff fd60 	bl	8000640 <FUNC_WIFI_CONECTAR>
		  if(!Flag.Server_conect)
 8000b80:	4b1a      	ldr	r3, [pc, #104]	; (8000bec <main+0xbc>)
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	2202      	movs	r2, #2
 8000b86:	4013      	ands	r3, r2
 8000b88:	b2db      	uxtb	r3, r3
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d105      	bne.n	8000b9a <main+0x6a>
		  {
			 FUNC_MQTT_CONECTAR_SERVIDOR("broker.mqttdashboard.com","Jose");
 8000b8e:	4a1a      	ldr	r2, [pc, #104]	; (8000bf8 <main+0xc8>)
 8000b90:	4b1a      	ldr	r3, [pc, #104]	; (8000bfc <main+0xcc>)
 8000b92:	0011      	movs	r1, r2
 8000b94:	0018      	movs	r0, r3
 8000b96:	f7ff fdb1 	bl	80006fc <FUNC_MQTT_CONECTAR_SERVIDOR>
		  }
		  if(Flag.Server_conect)
 8000b9a:	4b14      	ldr	r3, [pc, #80]	; (8000bec <main+0xbc>)
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	2202      	movs	r2, #2
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	b2db      	uxtb	r3, r3
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d008      	beq.n	8000bba <main+0x8a>
		  {
			  FUNC_MQTT_SUBSCRIBIR("ESP-01");
 8000ba8:	4b15      	ldr	r3, [pc, #84]	; (8000c00 <main+0xd0>)
 8000baa:	0018      	movs	r0, r3
 8000bac:	f7ff feb8 	bl	8000920 <FUNC_MQTT_SUBSCRIBIR>
			  Flag.INIT=0;
 8000bb0:	4b0e      	ldr	r3, [pc, #56]	; (8000bec <main+0xbc>)
 8000bb2:	781a      	ldrb	r2, [r3, #0]
 8000bb4:	2140      	movs	r1, #64	; 0x40
 8000bb6:	438a      	bics	r2, r1
 8000bb8:	701a      	strb	r2, [r3, #0]
		  }
	  }

	  if(Flag.Server_conect)
 8000bba:	4b0c      	ldr	r3, [pc, #48]	; (8000bec <main+0xbc>)
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	2202      	movs	r2, #2
 8000bc0:	4013      	ands	r3, r2
 8000bc2:	b2db      	uxtb	r3, r3
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d0c9      	beq.n	8000b5c <main+0x2c>
	  {
		  FUNC_MQTT_PUBLICAR("KLK","Esp-01");
 8000bc8:	4a0e      	ldr	r2, [pc, #56]	; (8000c04 <main+0xd4>)
 8000bca:	4b0f      	ldr	r3, [pc, #60]	; (8000c08 <main+0xd8>)
 8000bcc:	0011      	movs	r1, r2
 8000bce:	0018      	movs	r0, r3
 8000bd0:	f7ff fe40 	bl	8000854 <FUNC_MQTT_PUBLICAR>
		  HAL_Delay(1000);
 8000bd4:	23fa      	movs	r3, #250	; 0xfa
 8000bd6:	009b      	lsls	r3, r3, #2
 8000bd8:	0018      	movs	r0, r3
 8000bda:	f000 fb7f 	bl	80012dc <HAL_Delay>
	  if(Flag.INIT)
 8000bde:	e7bd      	b.n	8000b5c <main+0x2c>
 8000be0:	20000218 	.word	0x20000218
 8000be4:	20000094 	.word	0x20000094
 8000be8:	0800539c 	.word	0x0800539c
 8000bec:	2000008c 	.word	0x2000008c
 8000bf0:	080053a4 	.word	0x080053a4
 8000bf4:	080053b8 	.word	0x080053b8
 8000bf8:	080053c4 	.word	0x080053c4
 8000bfc:	080053cc 	.word	0x080053cc
 8000c00:	080053e8 	.word	0x080053e8
 8000c04:	080053f0 	.word	0x080053f0
 8000c08:	080053f8 	.word	0x080053f8

08000c0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c0c:	b590      	push	{r4, r7, lr}
 8000c0e:	b0a1      	sub	sp, #132	; 0x84
 8000c10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c12:	2448      	movs	r4, #72	; 0x48
 8000c14:	193b      	adds	r3, r7, r4
 8000c16:	0018      	movs	r0, r3
 8000c18:	2338      	movs	r3, #56	; 0x38
 8000c1a:	001a      	movs	r2, r3
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	f003 fe6a 	bl	80048f6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c22:	2338      	movs	r3, #56	; 0x38
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	0018      	movs	r0, r3
 8000c28:	2310      	movs	r3, #16
 8000c2a:	001a      	movs	r2, r3
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	f003 fe62 	bl	80048f6 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c32:	1d3b      	adds	r3, r7, #4
 8000c34:	0018      	movs	r0, r3
 8000c36:	2334      	movs	r3, #52	; 0x34
 8000c38:	001a      	movs	r2, r3
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	f003 fe5b 	bl	80048f6 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c40:	2380      	movs	r3, #128	; 0x80
 8000c42:	009b      	lsls	r3, r3, #2
 8000c44:	0018      	movs	r0, r3
 8000c46:	f000 fec9 	bl	80019dc <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c4a:	193b      	adds	r3, r7, r4
 8000c4c:	2202      	movs	r2, #2
 8000c4e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c50:	193b      	adds	r3, r7, r4
 8000c52:	2280      	movs	r2, #128	; 0x80
 8000c54:	0052      	lsls	r2, r2, #1
 8000c56:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000c58:	0021      	movs	r1, r4
 8000c5a:	187b      	adds	r3, r7, r1
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c60:	187b      	adds	r3, r7, r1
 8000c62:	2240      	movs	r2, #64	; 0x40
 8000c64:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c66:	187b      	adds	r3, r7, r1
 8000c68:	2202      	movs	r2, #2
 8000c6a:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c6c:	187b      	adds	r3, r7, r1
 8000c6e:	2202      	movs	r2, #2
 8000c70:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000c72:	187b      	adds	r3, r7, r1
 8000c74:	2200      	movs	r2, #0
 8000c76:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000c78:	187b      	adds	r3, r7, r1
 8000c7a:	2208      	movs	r2, #8
 8000c7c:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c7e:	187b      	adds	r3, r7, r1
 8000c80:	2280      	movs	r2, #128	; 0x80
 8000c82:	0292      	lsls	r2, r2, #10
 8000c84:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000c86:	187b      	adds	r3, r7, r1
 8000c88:	2280      	movs	r2, #128	; 0x80
 8000c8a:	0492      	lsls	r2, r2, #18
 8000c8c:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c8e:	187b      	adds	r3, r7, r1
 8000c90:	2280      	movs	r2, #128	; 0x80
 8000c92:	0592      	lsls	r2, r2, #22
 8000c94:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c96:	187b      	adds	r3, r7, r1
 8000c98:	0018      	movs	r0, r3
 8000c9a:	f000 feeb 	bl	8001a74 <HAL_RCC_OscConfig>
 8000c9e:	1e03      	subs	r3, r0, #0
 8000ca0:	d001      	beq.n	8000ca6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000ca2:	f000 f951 	bl	8000f48 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ca6:	2138      	movs	r1, #56	; 0x38
 8000ca8:	187b      	adds	r3, r7, r1
 8000caa:	2207      	movs	r2, #7
 8000cac:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cae:	187b      	adds	r3, r7, r1
 8000cb0:	2202      	movs	r2, #2
 8000cb2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cb4:	187b      	adds	r3, r7, r1
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cba:	187b      	adds	r3, r7, r1
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000cc0:	187b      	adds	r3, r7, r1
 8000cc2:	2102      	movs	r1, #2
 8000cc4:	0018      	movs	r0, r3
 8000cc6:	f001 f9ef 	bl	80020a8 <HAL_RCC_ClockConfig>
 8000cca:	1e03      	subs	r3, r0, #0
 8000ccc:	d001      	beq.n	8000cd2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000cce:	f000 f93b 	bl	8000f48 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
 8000cd2:	1d3b      	adds	r3, r7, #4
 8000cd4:	2203      	movs	r2, #3
 8000cd6:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000cd8:	1d3b      	adds	r3, r7, #4
 8000cda:	2200      	movs	r2, #0
 8000cdc:	605a      	str	r2, [r3, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000cde:	1d3b      	adds	r3, r7, #4
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ce4:	1d3b      	adds	r3, r7, #4
 8000ce6:	0018      	movs	r0, r3
 8000ce8:	f001 fb88 	bl	80023fc <HAL_RCCEx_PeriphCLKConfig>
 8000cec:	1e03      	subs	r3, r0, #0
 8000cee:	d001      	beq.n	8000cf4 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000cf0:	f000 f92a 	bl	8000f48 <Error_Handler>
  }
}
 8000cf4:	46c0      	nop			; (mov r8, r8)
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	b021      	add	sp, #132	; 0x84
 8000cfa:	bd90      	pop	{r4, r7, pc}

08000cfc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d00:	4b23      	ldr	r3, [pc, #140]	; (8000d90 <MX_USART1_UART_Init+0x94>)
 8000d02:	4a24      	ldr	r2, [pc, #144]	; (8000d94 <MX_USART1_UART_Init+0x98>)
 8000d04:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d06:	4b22      	ldr	r3, [pc, #136]	; (8000d90 <MX_USART1_UART_Init+0x94>)
 8000d08:	22e1      	movs	r2, #225	; 0xe1
 8000d0a:	0252      	lsls	r2, r2, #9
 8000d0c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d0e:	4b20      	ldr	r3, [pc, #128]	; (8000d90 <MX_USART1_UART_Init+0x94>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d14:	4b1e      	ldr	r3, [pc, #120]	; (8000d90 <MX_USART1_UART_Init+0x94>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d1a:	4b1d      	ldr	r3, [pc, #116]	; (8000d90 <MX_USART1_UART_Init+0x94>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d20:	4b1b      	ldr	r3, [pc, #108]	; (8000d90 <MX_USART1_UART_Init+0x94>)
 8000d22:	220c      	movs	r2, #12
 8000d24:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d26:	4b1a      	ldr	r3, [pc, #104]	; (8000d90 <MX_USART1_UART_Init+0x94>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d2c:	4b18      	ldr	r3, [pc, #96]	; (8000d90 <MX_USART1_UART_Init+0x94>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d32:	4b17      	ldr	r3, [pc, #92]	; (8000d90 <MX_USART1_UART_Init+0x94>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d38:	4b15      	ldr	r3, [pc, #84]	; (8000d90 <MX_USART1_UART_Init+0x94>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d3e:	4b14      	ldr	r3, [pc, #80]	; (8000d90 <MX_USART1_UART_Init+0x94>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d44:	4b12      	ldr	r3, [pc, #72]	; (8000d90 <MX_USART1_UART_Init+0x94>)
 8000d46:	0018      	movs	r0, r3
 8000d48:	f001 fd10 	bl	800276c <HAL_UART_Init>
 8000d4c:	1e03      	subs	r3, r0, #0
 8000d4e:	d001      	beq.n	8000d54 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000d50:	f000 f8fa 	bl	8000f48 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d54:	4b0e      	ldr	r3, [pc, #56]	; (8000d90 <MX_USART1_UART_Init+0x94>)
 8000d56:	2100      	movs	r1, #0
 8000d58:	0018      	movs	r0, r3
 8000d5a:	f003 fca5 	bl	80046a8 <HAL_UARTEx_SetTxFifoThreshold>
 8000d5e:	1e03      	subs	r3, r0, #0
 8000d60:	d001      	beq.n	8000d66 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000d62:	f000 f8f1 	bl	8000f48 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d66:	4b0a      	ldr	r3, [pc, #40]	; (8000d90 <MX_USART1_UART_Init+0x94>)
 8000d68:	2100      	movs	r1, #0
 8000d6a:	0018      	movs	r0, r3
 8000d6c:	f003 fcdc 	bl	8004728 <HAL_UARTEx_SetRxFifoThreshold>
 8000d70:	1e03      	subs	r3, r0, #0
 8000d72:	d001      	beq.n	8000d78 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000d74:	f000 f8e8 	bl	8000f48 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000d78:	4b05      	ldr	r3, [pc, #20]	; (8000d90 <MX_USART1_UART_Init+0x94>)
 8000d7a:	0018      	movs	r0, r3
 8000d7c:	f003 fc5a 	bl	8004634 <HAL_UARTEx_DisableFifoMode>
 8000d80:	1e03      	subs	r3, r0, #0
 8000d82:	d001      	beq.n	8000d88 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000d84:	f000 f8e0 	bl	8000f48 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d88:	46c0      	nop			; (mov r8, r8)
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	46c0      	nop			; (mov r8, r8)
 8000d90:	20000094 	.word	0x20000094
 8000d94:	40013800 	.word	0x40013800

08000d98 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d9c:	4b23      	ldr	r3, [pc, #140]	; (8000e2c <MX_USART2_UART_Init+0x94>)
 8000d9e:	4a24      	ldr	r2, [pc, #144]	; (8000e30 <MX_USART2_UART_Init+0x98>)
 8000da0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000da2:	4b22      	ldr	r3, [pc, #136]	; (8000e2c <MX_USART2_UART_Init+0x94>)
 8000da4:	22e1      	movs	r2, #225	; 0xe1
 8000da6:	0252      	lsls	r2, r2, #9
 8000da8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000daa:	4b20      	ldr	r3, [pc, #128]	; (8000e2c <MX_USART2_UART_Init+0x94>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000db0:	4b1e      	ldr	r3, [pc, #120]	; (8000e2c <MX_USART2_UART_Init+0x94>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000db6:	4b1d      	ldr	r3, [pc, #116]	; (8000e2c <MX_USART2_UART_Init+0x94>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000dbc:	4b1b      	ldr	r3, [pc, #108]	; (8000e2c <MX_USART2_UART_Init+0x94>)
 8000dbe:	220c      	movs	r2, #12
 8000dc0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dc2:	4b1a      	ldr	r3, [pc, #104]	; (8000e2c <MX_USART2_UART_Init+0x94>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dc8:	4b18      	ldr	r3, [pc, #96]	; (8000e2c <MX_USART2_UART_Init+0x94>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dce:	4b17      	ldr	r3, [pc, #92]	; (8000e2c <MX_USART2_UART_Init+0x94>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000dd4:	4b15      	ldr	r3, [pc, #84]	; (8000e2c <MX_USART2_UART_Init+0x94>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dda:	4b14      	ldr	r3, [pc, #80]	; (8000e2c <MX_USART2_UART_Init+0x94>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000de0:	4b12      	ldr	r3, [pc, #72]	; (8000e2c <MX_USART2_UART_Init+0x94>)
 8000de2:	0018      	movs	r0, r3
 8000de4:	f001 fcc2 	bl	800276c <HAL_UART_Init>
 8000de8:	1e03      	subs	r3, r0, #0
 8000dea:	d001      	beq.n	8000df0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000dec:	f000 f8ac 	bl	8000f48 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000df0:	4b0e      	ldr	r3, [pc, #56]	; (8000e2c <MX_USART2_UART_Init+0x94>)
 8000df2:	2100      	movs	r1, #0
 8000df4:	0018      	movs	r0, r3
 8000df6:	f003 fc57 	bl	80046a8 <HAL_UARTEx_SetTxFifoThreshold>
 8000dfa:	1e03      	subs	r3, r0, #0
 8000dfc:	d001      	beq.n	8000e02 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000dfe:	f000 f8a3 	bl	8000f48 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e02:	4b0a      	ldr	r3, [pc, #40]	; (8000e2c <MX_USART2_UART_Init+0x94>)
 8000e04:	2100      	movs	r1, #0
 8000e06:	0018      	movs	r0, r3
 8000e08:	f003 fc8e 	bl	8004728 <HAL_UARTEx_SetRxFifoThreshold>
 8000e0c:	1e03      	subs	r3, r0, #0
 8000e0e:	d001      	beq.n	8000e14 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000e10:	f000 f89a 	bl	8000f48 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000e14:	4b05      	ldr	r3, [pc, #20]	; (8000e2c <MX_USART2_UART_Init+0x94>)
 8000e16:	0018      	movs	r0, r3
 8000e18:	f003 fc0c 	bl	8004634 <HAL_UARTEx_DisableFifoMode>
 8000e1c:	1e03      	subs	r3, r0, #0
 8000e1e:	d001      	beq.n	8000e24 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000e20:	f000 f892 	bl	8000f48 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e24:	46c0      	nop			; (mov r8, r8)
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	46c0      	nop			; (mov r8, r8)
 8000e2c:	20000124 	.word	0x20000124
 8000e30:	40004400 	.word	0x40004400

08000e34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e34:	b590      	push	{r4, r7, lr}
 8000e36:	b089      	sub	sp, #36	; 0x24
 8000e38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e3a:	240c      	movs	r4, #12
 8000e3c:	193b      	adds	r3, r7, r4
 8000e3e:	0018      	movs	r0, r3
 8000e40:	2314      	movs	r3, #20
 8000e42:	001a      	movs	r2, r3
 8000e44:	2100      	movs	r1, #0
 8000e46:	f003 fd56 	bl	80048f6 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e4a:	4b21      	ldr	r3, [pc, #132]	; (8000ed0 <MX_GPIO_Init+0x9c>)
 8000e4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e4e:	4b20      	ldr	r3, [pc, #128]	; (8000ed0 <MX_GPIO_Init+0x9c>)
 8000e50:	2104      	movs	r1, #4
 8000e52:	430a      	orrs	r2, r1
 8000e54:	635a      	str	r2, [r3, #52]	; 0x34
 8000e56:	4b1e      	ldr	r3, [pc, #120]	; (8000ed0 <MX_GPIO_Init+0x9c>)
 8000e58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e5a:	2204      	movs	r2, #4
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	60bb      	str	r3, [r7, #8]
 8000e60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e62:	4b1b      	ldr	r3, [pc, #108]	; (8000ed0 <MX_GPIO_Init+0x9c>)
 8000e64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e66:	4b1a      	ldr	r3, [pc, #104]	; (8000ed0 <MX_GPIO_Init+0x9c>)
 8000e68:	2120      	movs	r1, #32
 8000e6a:	430a      	orrs	r2, r1
 8000e6c:	635a      	str	r2, [r3, #52]	; 0x34
 8000e6e:	4b18      	ldr	r3, [pc, #96]	; (8000ed0 <MX_GPIO_Init+0x9c>)
 8000e70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e72:	2220      	movs	r2, #32
 8000e74:	4013      	ands	r3, r2
 8000e76:	607b      	str	r3, [r7, #4]
 8000e78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e7a:	4b15      	ldr	r3, [pc, #84]	; (8000ed0 <MX_GPIO_Init+0x9c>)
 8000e7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e7e:	4b14      	ldr	r3, [pc, #80]	; (8000ed0 <MX_GPIO_Init+0x9c>)
 8000e80:	2101      	movs	r1, #1
 8000e82:	430a      	orrs	r2, r1
 8000e84:	635a      	str	r2, [r3, #52]	; 0x34
 8000e86:	4b12      	ldr	r3, [pc, #72]	; (8000ed0 <MX_GPIO_Init+0x9c>)
 8000e88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	603b      	str	r3, [r7, #0]
 8000e90:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000e92:	23a0      	movs	r3, #160	; 0xa0
 8000e94:	05db      	lsls	r3, r3, #23
 8000e96:	2200      	movs	r2, #0
 8000e98:	2120      	movs	r1, #32
 8000e9a:	0018      	movs	r0, r3
 8000e9c:	f000 fd66 	bl	800196c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000ea0:	0021      	movs	r1, r4
 8000ea2:	187b      	adds	r3, r7, r1
 8000ea4:	2220      	movs	r2, #32
 8000ea6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ea8:	187b      	adds	r3, r7, r1
 8000eaa:	2201      	movs	r2, #1
 8000eac:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eae:	187b      	adds	r3, r7, r1
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000eb4:	187b      	adds	r3, r7, r1
 8000eb6:	2202      	movs	r2, #2
 8000eb8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000eba:	187a      	adds	r2, r7, r1
 8000ebc:	23a0      	movs	r3, #160	; 0xa0
 8000ebe:	05db      	lsls	r3, r3, #23
 8000ec0:	0011      	movs	r1, r2
 8000ec2:	0018      	movs	r0, r3
 8000ec4:	f000 fbee 	bl	80016a4 <HAL_GPIO_Init>

}
 8000ec8:	46c0      	nop			; (mov r8, r8)
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	b009      	add	sp, #36	; 0x24
 8000ece:	bd90      	pop	{r4, r7, pc}
 8000ed0:	40021000 	.word	0x40021000

08000ed4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
	 static int i=0;
	 if(Rx=='\n')
 8000edc:	4b16      	ldr	r3, [pc, #88]	; (8000f38 <HAL_UART_RxCpltCallback+0x64>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	2b0a      	cmp	r3, #10
 8000ee2:	d10c      	bne.n	8000efe <HAL_UART_RxCpltCallback+0x2a>
	 {
		 buff[i]='\0';
 8000ee4:	4b15      	ldr	r3, [pc, #84]	; (8000f3c <HAL_UART_RxCpltCallback+0x68>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a15      	ldr	r2, [pc, #84]	; (8000f40 <HAL_UART_RxCpltCallback+0x6c>)
 8000eea:	2100      	movs	r1, #0
 8000eec:	54d1      	strb	r1, [r2, r3]
		 Recibir(buff);
 8000eee:	4b14      	ldr	r3, [pc, #80]	; (8000f40 <HAL_UART_RxCpltCallback+0x6c>)
 8000ef0:	0018      	movs	r0, r3
 8000ef2:	f7ff fdbf 	bl	8000a74 <Recibir>
		 i=0;
 8000ef6:	4b11      	ldr	r3, [pc, #68]	; (8000f3c <HAL_UART_RxCpltCallback+0x68>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	601a      	str	r2, [r3, #0]
 8000efc:	e012      	b.n	8000f24 <HAL_UART_RxCpltCallback+0x50>
	 }
	 else if(i<100)
 8000efe:	4b0f      	ldr	r3, [pc, #60]	; (8000f3c <HAL_UART_RxCpltCallback+0x68>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	2b63      	cmp	r3, #99	; 0x63
 8000f04:	dc0b      	bgt.n	8000f1e <HAL_UART_RxCpltCallback+0x4a>
	 {
		 buff[i]=Rx;
 8000f06:	4b0d      	ldr	r3, [pc, #52]	; (8000f3c <HAL_UART_RxCpltCallback+0x68>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4a0b      	ldr	r2, [pc, #44]	; (8000f38 <HAL_UART_RxCpltCallback+0x64>)
 8000f0c:	7811      	ldrb	r1, [r2, #0]
 8000f0e:	4a0c      	ldr	r2, [pc, #48]	; (8000f40 <HAL_UART_RxCpltCallback+0x6c>)
 8000f10:	54d1      	strb	r1, [r2, r3]
		 i++;
 8000f12:	4b0a      	ldr	r3, [pc, #40]	; (8000f3c <HAL_UART_RxCpltCallback+0x68>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	1c5a      	adds	r2, r3, #1
 8000f18:	4b08      	ldr	r3, [pc, #32]	; (8000f3c <HAL_UART_RxCpltCallback+0x68>)
 8000f1a:	601a      	str	r2, [r3, #0]
 8000f1c:	e002      	b.n	8000f24 <HAL_UART_RxCpltCallback+0x50>
	 }
	 else
	 {
		 i=0;
 8000f1e:	4b07      	ldr	r3, [pc, #28]	; (8000f3c <HAL_UART_RxCpltCallback+0x68>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
	 }

	HAL_UART_Receive_IT(&huart1,&Rx,1);
 8000f24:	4904      	ldr	r1, [pc, #16]	; (8000f38 <HAL_UART_RxCpltCallback+0x64>)
 8000f26:	4b07      	ldr	r3, [pc, #28]	; (8000f44 <HAL_UART_RxCpltCallback+0x70>)
 8000f28:	2201      	movs	r2, #1
 8000f2a:	0018      	movs	r0, r3
 8000f2c:	f001 fd20 	bl	8002970 <HAL_UART_Receive_IT>
}
 8000f30:	46c0      	nop			; (mov r8, r8)
 8000f32:	46bd      	mov	sp, r7
 8000f34:	b002      	add	sp, #8
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	20000218 	.word	0x20000218
 8000f3c:	2000021c 	.word	0x2000021c
 8000f40:	200001b4 	.word	0x200001b4
 8000f44:	20000094 	.word	0x20000094

08000f48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f4c:	b672      	cpsid	i
}
 8000f4e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f50:	e7fe      	b.n	8000f50 <Error_Handler+0x8>
	...

08000f54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f5a:	4b11      	ldr	r3, [pc, #68]	; (8000fa0 <HAL_MspInit+0x4c>)
 8000f5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f5e:	4b10      	ldr	r3, [pc, #64]	; (8000fa0 <HAL_MspInit+0x4c>)
 8000f60:	2101      	movs	r1, #1
 8000f62:	430a      	orrs	r2, r1
 8000f64:	641a      	str	r2, [r3, #64]	; 0x40
 8000f66:	4b0e      	ldr	r3, [pc, #56]	; (8000fa0 <HAL_MspInit+0x4c>)
 8000f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	607b      	str	r3, [r7, #4]
 8000f70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f72:	4b0b      	ldr	r3, [pc, #44]	; (8000fa0 <HAL_MspInit+0x4c>)
 8000f74:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f76:	4b0a      	ldr	r3, [pc, #40]	; (8000fa0 <HAL_MspInit+0x4c>)
 8000f78:	2180      	movs	r1, #128	; 0x80
 8000f7a:	0549      	lsls	r1, r1, #21
 8000f7c:	430a      	orrs	r2, r1
 8000f7e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000f80:	4b07      	ldr	r3, [pc, #28]	; (8000fa0 <HAL_MspInit+0x4c>)
 8000f82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f84:	2380      	movs	r3, #128	; 0x80
 8000f86:	055b      	lsls	r3, r3, #21
 8000f88:	4013      	ands	r3, r2
 8000f8a:	603b      	str	r3, [r7, #0]
 8000f8c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8000f8e:	23c0      	movs	r3, #192	; 0xc0
 8000f90:	00db      	lsls	r3, r3, #3
 8000f92:	0018      	movs	r0, r3
 8000f94:	f000 f9c6 	bl	8001324 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f98:	46c0      	nop			; (mov r8, r8)
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	b002      	add	sp, #8
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	40021000 	.word	0x40021000

08000fa4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fa4:	b590      	push	{r4, r7, lr}
 8000fa6:	b08d      	sub	sp, #52	; 0x34
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fac:	241c      	movs	r4, #28
 8000fae:	193b      	adds	r3, r7, r4
 8000fb0:	0018      	movs	r0, r3
 8000fb2:	2314      	movs	r3, #20
 8000fb4:	001a      	movs	r2, r3
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	f003 fc9d 	bl	80048f6 <memset>
  if(huart->Instance==USART1)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a3a      	ldr	r2, [pc, #232]	; (80010ac <HAL_UART_MspInit+0x108>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d138      	bne.n	8001038 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000fc6:	4b3a      	ldr	r3, [pc, #232]	; (80010b0 <HAL_UART_MspInit+0x10c>)
 8000fc8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fca:	4b39      	ldr	r3, [pc, #228]	; (80010b0 <HAL_UART_MspInit+0x10c>)
 8000fcc:	2180      	movs	r1, #128	; 0x80
 8000fce:	01c9      	lsls	r1, r1, #7
 8000fd0:	430a      	orrs	r2, r1
 8000fd2:	641a      	str	r2, [r3, #64]	; 0x40
 8000fd4:	4b36      	ldr	r3, [pc, #216]	; (80010b0 <HAL_UART_MspInit+0x10c>)
 8000fd6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fd8:	2380      	movs	r3, #128	; 0x80
 8000fda:	01db      	lsls	r3, r3, #7
 8000fdc:	4013      	ands	r3, r2
 8000fde:	61bb      	str	r3, [r7, #24]
 8000fe0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fe2:	4b33      	ldr	r3, [pc, #204]	; (80010b0 <HAL_UART_MspInit+0x10c>)
 8000fe4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000fe6:	4b32      	ldr	r3, [pc, #200]	; (80010b0 <HAL_UART_MspInit+0x10c>)
 8000fe8:	2104      	movs	r1, #4
 8000fea:	430a      	orrs	r2, r1
 8000fec:	635a      	str	r2, [r3, #52]	; 0x34
 8000fee:	4b30      	ldr	r3, [pc, #192]	; (80010b0 <HAL_UART_MspInit+0x10c>)
 8000ff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ff2:	2204      	movs	r2, #4
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	617b      	str	r3, [r7, #20]
 8000ff8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000ffa:	0021      	movs	r1, r4
 8000ffc:	187b      	adds	r3, r7, r1
 8000ffe:	2230      	movs	r2, #48	; 0x30
 8001000:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001002:	187b      	adds	r3, r7, r1
 8001004:	2202      	movs	r2, #2
 8001006:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001008:	187b      	adds	r3, r7, r1
 800100a:	2200      	movs	r2, #0
 800100c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100e:	187b      	adds	r3, r7, r1
 8001010:	2200      	movs	r2, #0
 8001012:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001014:	187b      	adds	r3, r7, r1
 8001016:	2201      	movs	r2, #1
 8001018:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800101a:	187b      	adds	r3, r7, r1
 800101c:	4a25      	ldr	r2, [pc, #148]	; (80010b4 <HAL_UART_MspInit+0x110>)
 800101e:	0019      	movs	r1, r3
 8001020:	0010      	movs	r0, r2
 8001022:	f000 fb3f 	bl	80016a4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001026:	2200      	movs	r2, #0
 8001028:	2100      	movs	r1, #0
 800102a:	201b      	movs	r0, #27
 800102c:	f000 fa3c 	bl	80014a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001030:	201b      	movs	r0, #27
 8001032:	f000 fa4e 	bl	80014d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001036:	e035      	b.n	80010a4 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a1e      	ldr	r2, [pc, #120]	; (80010b8 <HAL_UART_MspInit+0x114>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d130      	bne.n	80010a4 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001042:	4b1b      	ldr	r3, [pc, #108]	; (80010b0 <HAL_UART_MspInit+0x10c>)
 8001044:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001046:	4b1a      	ldr	r3, [pc, #104]	; (80010b0 <HAL_UART_MspInit+0x10c>)
 8001048:	2180      	movs	r1, #128	; 0x80
 800104a:	0289      	lsls	r1, r1, #10
 800104c:	430a      	orrs	r2, r1
 800104e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001050:	4b17      	ldr	r3, [pc, #92]	; (80010b0 <HAL_UART_MspInit+0x10c>)
 8001052:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001054:	2380      	movs	r3, #128	; 0x80
 8001056:	029b      	lsls	r3, r3, #10
 8001058:	4013      	ands	r3, r2
 800105a:	613b      	str	r3, [r7, #16]
 800105c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800105e:	4b14      	ldr	r3, [pc, #80]	; (80010b0 <HAL_UART_MspInit+0x10c>)
 8001060:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001062:	4b13      	ldr	r3, [pc, #76]	; (80010b0 <HAL_UART_MspInit+0x10c>)
 8001064:	2101      	movs	r1, #1
 8001066:	430a      	orrs	r2, r1
 8001068:	635a      	str	r2, [r3, #52]	; 0x34
 800106a:	4b11      	ldr	r3, [pc, #68]	; (80010b0 <HAL_UART_MspInit+0x10c>)
 800106c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800106e:	2201      	movs	r2, #1
 8001070:	4013      	ands	r3, r2
 8001072:	60fb      	str	r3, [r7, #12]
 8001074:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8001076:	211c      	movs	r1, #28
 8001078:	187b      	adds	r3, r7, r1
 800107a:	220c      	movs	r2, #12
 800107c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107e:	187b      	adds	r3, r7, r1
 8001080:	2202      	movs	r2, #2
 8001082:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001084:	187b      	adds	r3, r7, r1
 8001086:	2201      	movs	r2, #1
 8001088:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800108a:	187b      	adds	r3, r7, r1
 800108c:	2200      	movs	r2, #0
 800108e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001090:	187b      	adds	r3, r7, r1
 8001092:	2201      	movs	r2, #1
 8001094:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001096:	187a      	adds	r2, r7, r1
 8001098:	23a0      	movs	r3, #160	; 0xa0
 800109a:	05db      	lsls	r3, r3, #23
 800109c:	0011      	movs	r1, r2
 800109e:	0018      	movs	r0, r3
 80010a0:	f000 fb00 	bl	80016a4 <HAL_GPIO_Init>
}
 80010a4:	46c0      	nop			; (mov r8, r8)
 80010a6:	46bd      	mov	sp, r7
 80010a8:	b00d      	add	sp, #52	; 0x34
 80010aa:	bd90      	pop	{r4, r7, pc}
 80010ac:	40013800 	.word	0x40013800
 80010b0:	40021000 	.word	0x40021000
 80010b4:	50000800 	.word	0x50000800
 80010b8:	40004400 	.word	0x40004400

080010bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010c0:	e7fe      	b.n	80010c0 <NMI_Handler+0x4>

080010c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010c2:	b580      	push	{r7, lr}
 80010c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010c6:	e7fe      	b.n	80010c6 <HardFault_Handler+0x4>

080010c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80010cc:	46c0      	nop			; (mov r8, r8)
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}

080010d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010d2:	b580      	push	{r7, lr}
 80010d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010d6:	46c0      	nop			; (mov r8, r8)
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}

080010dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010e0:	f000 f8e0 	bl	80012a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010e4:	46c0      	nop			; (mov r8, r8)
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
	...

080010ec <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80010f0:	4b03      	ldr	r3, [pc, #12]	; (8001100 <USART1_IRQHandler+0x14>)
 80010f2:	0018      	movs	r0, r3
 80010f4:	f001 fca6 	bl	8002a44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80010f8:	46c0      	nop			; (mov r8, r8)
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	46c0      	nop			; (mov r8, r8)
 8001100:	20000094 	.word	0x20000094

08001104 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b086      	sub	sp, #24
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800110c:	4a14      	ldr	r2, [pc, #80]	; (8001160 <_sbrk+0x5c>)
 800110e:	4b15      	ldr	r3, [pc, #84]	; (8001164 <_sbrk+0x60>)
 8001110:	1ad3      	subs	r3, r2, r3
 8001112:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001118:	4b13      	ldr	r3, [pc, #76]	; (8001168 <_sbrk+0x64>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d102      	bne.n	8001126 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001120:	4b11      	ldr	r3, [pc, #68]	; (8001168 <_sbrk+0x64>)
 8001122:	4a12      	ldr	r2, [pc, #72]	; (800116c <_sbrk+0x68>)
 8001124:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001126:	4b10      	ldr	r3, [pc, #64]	; (8001168 <_sbrk+0x64>)
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	18d3      	adds	r3, r2, r3
 800112e:	693a      	ldr	r2, [r7, #16]
 8001130:	429a      	cmp	r2, r3
 8001132:	d207      	bcs.n	8001144 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001134:	f003 fba2 	bl	800487c <__errno>
 8001138:	0003      	movs	r3, r0
 800113a:	220c      	movs	r2, #12
 800113c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800113e:	2301      	movs	r3, #1
 8001140:	425b      	negs	r3, r3
 8001142:	e009      	b.n	8001158 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001144:	4b08      	ldr	r3, [pc, #32]	; (8001168 <_sbrk+0x64>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800114a:	4b07      	ldr	r3, [pc, #28]	; (8001168 <_sbrk+0x64>)
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	18d2      	adds	r2, r2, r3
 8001152:	4b05      	ldr	r3, [pc, #20]	; (8001168 <_sbrk+0x64>)
 8001154:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001156:	68fb      	ldr	r3, [r7, #12]
}
 8001158:	0018      	movs	r0, r3
 800115a:	46bd      	mov	sp, r7
 800115c:	b006      	add	sp, #24
 800115e:	bd80      	pop	{r7, pc}
 8001160:	20009000 	.word	0x20009000
 8001164:	00000400 	.word	0x00000400
 8001168:	20000220 	.word	0x20000220
 800116c:	20000238 	.word	0x20000238

08001170 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001174:	46c0      	nop			; (mov r8, r8)
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
	...

0800117c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800117c:	480d      	ldr	r0, [pc, #52]	; (80011b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800117e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001180:	f7ff fff6 	bl	8001170 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001184:	480c      	ldr	r0, [pc, #48]	; (80011b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001186:	490d      	ldr	r1, [pc, #52]	; (80011bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001188:	4a0d      	ldr	r2, [pc, #52]	; (80011c0 <LoopForever+0xe>)
  movs r3, #0
 800118a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800118c:	e002      	b.n	8001194 <LoopCopyDataInit>

0800118e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800118e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001190:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001192:	3304      	adds	r3, #4

08001194 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001194:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001196:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001198:	d3f9      	bcc.n	800118e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800119a:	4a0a      	ldr	r2, [pc, #40]	; (80011c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800119c:	4c0a      	ldr	r4, [pc, #40]	; (80011c8 <LoopForever+0x16>)
  movs r3, #0
 800119e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011a0:	e001      	b.n	80011a6 <LoopFillZerobss>

080011a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011a4:	3204      	adds	r2, #4

080011a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011a8:	d3fb      	bcc.n	80011a2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80011aa:	f003 fb6d 	bl	8004888 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80011ae:	f7ff fcbf 	bl	8000b30 <main>

080011b2 <LoopForever>:

LoopForever:
  b LoopForever
 80011b2:	e7fe      	b.n	80011b2 <LoopForever>
  ldr   r0, =_estack
 80011b4:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80011b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011bc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80011c0:	080054c8 	.word	0x080054c8
  ldr r2, =_sbss
 80011c4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80011c8:	20000238 	.word	0x20000238

080011cc <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011cc:	e7fe      	b.n	80011cc <ADC1_COMP_IRQHandler>
	...

080011d0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011d6:	1dfb      	adds	r3, r7, #7
 80011d8:	2200      	movs	r2, #0
 80011da:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011dc:	4b0b      	ldr	r3, [pc, #44]	; (800120c <HAL_Init+0x3c>)
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	4b0a      	ldr	r3, [pc, #40]	; (800120c <HAL_Init+0x3c>)
 80011e2:	2180      	movs	r1, #128	; 0x80
 80011e4:	0049      	lsls	r1, r1, #1
 80011e6:	430a      	orrs	r2, r1
 80011e8:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011ea:	2000      	movs	r0, #0
 80011ec:	f000 f810 	bl	8001210 <HAL_InitTick>
 80011f0:	1e03      	subs	r3, r0, #0
 80011f2:	d003      	beq.n	80011fc <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80011f4:	1dfb      	adds	r3, r7, #7
 80011f6:	2201      	movs	r2, #1
 80011f8:	701a      	strb	r2, [r3, #0]
 80011fa:	e001      	b.n	8001200 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80011fc:	f7ff feaa 	bl	8000f54 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001200:	1dfb      	adds	r3, r7, #7
 8001202:	781b      	ldrb	r3, [r3, #0]
}
 8001204:	0018      	movs	r0, r3
 8001206:	46bd      	mov	sp, r7
 8001208:	b002      	add	sp, #8
 800120a:	bd80      	pop	{r7, pc}
 800120c:	40022000 	.word	0x40022000

08001210 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001210:	b590      	push	{r4, r7, lr}
 8001212:	b085      	sub	sp, #20
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001218:	230f      	movs	r3, #15
 800121a:	18fb      	adds	r3, r7, r3
 800121c:	2200      	movs	r2, #0
 800121e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001220:	4b1d      	ldr	r3, [pc, #116]	; (8001298 <HAL_InitTick+0x88>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d02b      	beq.n	8001280 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001228:	4b1c      	ldr	r3, [pc, #112]	; (800129c <HAL_InitTick+0x8c>)
 800122a:	681c      	ldr	r4, [r3, #0]
 800122c:	4b1a      	ldr	r3, [pc, #104]	; (8001298 <HAL_InitTick+0x88>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	0019      	movs	r1, r3
 8001232:	23fa      	movs	r3, #250	; 0xfa
 8001234:	0098      	lsls	r0, r3, #2
 8001236:	f7fe ff77 	bl	8000128 <__udivsi3>
 800123a:	0003      	movs	r3, r0
 800123c:	0019      	movs	r1, r3
 800123e:	0020      	movs	r0, r4
 8001240:	f7fe ff72 	bl	8000128 <__udivsi3>
 8001244:	0003      	movs	r3, r0
 8001246:	0018      	movs	r0, r3
 8001248:	f000 f953 	bl	80014f2 <HAL_SYSTICK_Config>
 800124c:	1e03      	subs	r3, r0, #0
 800124e:	d112      	bne.n	8001276 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2b03      	cmp	r3, #3
 8001254:	d80a      	bhi.n	800126c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001256:	6879      	ldr	r1, [r7, #4]
 8001258:	2301      	movs	r3, #1
 800125a:	425b      	negs	r3, r3
 800125c:	2200      	movs	r2, #0
 800125e:	0018      	movs	r0, r3
 8001260:	f000 f922 	bl	80014a8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001264:	4b0e      	ldr	r3, [pc, #56]	; (80012a0 <HAL_InitTick+0x90>)
 8001266:	687a      	ldr	r2, [r7, #4]
 8001268:	601a      	str	r2, [r3, #0]
 800126a:	e00d      	b.n	8001288 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800126c:	230f      	movs	r3, #15
 800126e:	18fb      	adds	r3, r7, r3
 8001270:	2201      	movs	r2, #1
 8001272:	701a      	strb	r2, [r3, #0]
 8001274:	e008      	b.n	8001288 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001276:	230f      	movs	r3, #15
 8001278:	18fb      	adds	r3, r7, r3
 800127a:	2201      	movs	r2, #1
 800127c:	701a      	strb	r2, [r3, #0]
 800127e:	e003      	b.n	8001288 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001280:	230f      	movs	r3, #15
 8001282:	18fb      	adds	r3, r7, r3
 8001284:	2201      	movs	r2, #1
 8001286:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001288:	230f      	movs	r3, #15
 800128a:	18fb      	adds	r3, r7, r3
 800128c:	781b      	ldrb	r3, [r3, #0]
}
 800128e:	0018      	movs	r0, r3
 8001290:	46bd      	mov	sp, r7
 8001292:	b005      	add	sp, #20
 8001294:	bd90      	pop	{r4, r7, pc}
 8001296:	46c0      	nop			; (mov r8, r8)
 8001298:	20000008 	.word	0x20000008
 800129c:	20000000 	.word	0x20000000
 80012a0:	20000004 	.word	0x20000004

080012a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80012a8:	4b05      	ldr	r3, [pc, #20]	; (80012c0 <HAL_IncTick+0x1c>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	001a      	movs	r2, r3
 80012ae:	4b05      	ldr	r3, [pc, #20]	; (80012c4 <HAL_IncTick+0x20>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	18d2      	adds	r2, r2, r3
 80012b4:	4b03      	ldr	r3, [pc, #12]	; (80012c4 <HAL_IncTick+0x20>)
 80012b6:	601a      	str	r2, [r3, #0]
}
 80012b8:	46c0      	nop			; (mov r8, r8)
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	46c0      	nop			; (mov r8, r8)
 80012c0:	20000008 	.word	0x20000008
 80012c4:	20000224 	.word	0x20000224

080012c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  return uwTick;
 80012cc:	4b02      	ldr	r3, [pc, #8]	; (80012d8 <HAL_GetTick+0x10>)
 80012ce:	681b      	ldr	r3, [r3, #0]
}
 80012d0:	0018      	movs	r0, r3
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	46c0      	nop			; (mov r8, r8)
 80012d8:	20000224 	.word	0x20000224

080012dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012e4:	f7ff fff0 	bl	80012c8 <HAL_GetTick>
 80012e8:	0003      	movs	r3, r0
 80012ea:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	3301      	adds	r3, #1
 80012f4:	d005      	beq.n	8001302 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012f6:	4b0a      	ldr	r3, [pc, #40]	; (8001320 <HAL_Delay+0x44>)
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	001a      	movs	r2, r3
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	189b      	adds	r3, r3, r2
 8001300:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001302:	46c0      	nop			; (mov r8, r8)
 8001304:	f7ff ffe0 	bl	80012c8 <HAL_GetTick>
 8001308:	0002      	movs	r2, r0
 800130a:	68bb      	ldr	r3, [r7, #8]
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	68fa      	ldr	r2, [r7, #12]
 8001310:	429a      	cmp	r2, r3
 8001312:	d8f7      	bhi.n	8001304 <HAL_Delay+0x28>
  {
  }
}
 8001314:	46c0      	nop			; (mov r8, r8)
 8001316:	46c0      	nop			; (mov r8, r8)
 8001318:	46bd      	mov	sp, r7
 800131a:	b004      	add	sp, #16
 800131c:	bd80      	pop	{r7, pc}
 800131e:	46c0      	nop			; (mov r8, r8)
 8001320:	20000008 	.word	0x20000008

08001324 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 800132c:	4b06      	ldr	r3, [pc, #24]	; (8001348 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a06      	ldr	r2, [pc, #24]	; (800134c <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8001332:	4013      	ands	r3, r2
 8001334:	0019      	movs	r1, r3
 8001336:	4b04      	ldr	r3, [pc, #16]	; (8001348 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001338:	687a      	ldr	r2, [r7, #4]
 800133a:	430a      	orrs	r2, r1
 800133c:	601a      	str	r2, [r3, #0]
}
 800133e:	46c0      	nop			; (mov r8, r8)
 8001340:	46bd      	mov	sp, r7
 8001342:	b002      	add	sp, #8
 8001344:	bd80      	pop	{r7, pc}
 8001346:	46c0      	nop			; (mov r8, r8)
 8001348:	40010000 	.word	0x40010000
 800134c:	fffff9ff 	.word	0xfffff9ff

08001350 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	0002      	movs	r2, r0
 8001358:	1dfb      	adds	r3, r7, #7
 800135a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800135c:	1dfb      	adds	r3, r7, #7
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	2b7f      	cmp	r3, #127	; 0x7f
 8001362:	d809      	bhi.n	8001378 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001364:	1dfb      	adds	r3, r7, #7
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	001a      	movs	r2, r3
 800136a:	231f      	movs	r3, #31
 800136c:	401a      	ands	r2, r3
 800136e:	4b04      	ldr	r3, [pc, #16]	; (8001380 <__NVIC_EnableIRQ+0x30>)
 8001370:	2101      	movs	r1, #1
 8001372:	4091      	lsls	r1, r2
 8001374:	000a      	movs	r2, r1
 8001376:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001378:	46c0      	nop			; (mov r8, r8)
 800137a:	46bd      	mov	sp, r7
 800137c:	b002      	add	sp, #8
 800137e:	bd80      	pop	{r7, pc}
 8001380:	e000e100 	.word	0xe000e100

08001384 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001384:	b590      	push	{r4, r7, lr}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	0002      	movs	r2, r0
 800138c:	6039      	str	r1, [r7, #0]
 800138e:	1dfb      	adds	r3, r7, #7
 8001390:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001392:	1dfb      	adds	r3, r7, #7
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	2b7f      	cmp	r3, #127	; 0x7f
 8001398:	d828      	bhi.n	80013ec <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800139a:	4a2f      	ldr	r2, [pc, #188]	; (8001458 <__NVIC_SetPriority+0xd4>)
 800139c:	1dfb      	adds	r3, r7, #7
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	b25b      	sxtb	r3, r3
 80013a2:	089b      	lsrs	r3, r3, #2
 80013a4:	33c0      	adds	r3, #192	; 0xc0
 80013a6:	009b      	lsls	r3, r3, #2
 80013a8:	589b      	ldr	r3, [r3, r2]
 80013aa:	1dfa      	adds	r2, r7, #7
 80013ac:	7812      	ldrb	r2, [r2, #0]
 80013ae:	0011      	movs	r1, r2
 80013b0:	2203      	movs	r2, #3
 80013b2:	400a      	ands	r2, r1
 80013b4:	00d2      	lsls	r2, r2, #3
 80013b6:	21ff      	movs	r1, #255	; 0xff
 80013b8:	4091      	lsls	r1, r2
 80013ba:	000a      	movs	r2, r1
 80013bc:	43d2      	mvns	r2, r2
 80013be:	401a      	ands	r2, r3
 80013c0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	019b      	lsls	r3, r3, #6
 80013c6:	22ff      	movs	r2, #255	; 0xff
 80013c8:	401a      	ands	r2, r3
 80013ca:	1dfb      	adds	r3, r7, #7
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	0018      	movs	r0, r3
 80013d0:	2303      	movs	r3, #3
 80013d2:	4003      	ands	r3, r0
 80013d4:	00db      	lsls	r3, r3, #3
 80013d6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013d8:	481f      	ldr	r0, [pc, #124]	; (8001458 <__NVIC_SetPriority+0xd4>)
 80013da:	1dfb      	adds	r3, r7, #7
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	b25b      	sxtb	r3, r3
 80013e0:	089b      	lsrs	r3, r3, #2
 80013e2:	430a      	orrs	r2, r1
 80013e4:	33c0      	adds	r3, #192	; 0xc0
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80013ea:	e031      	b.n	8001450 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013ec:	4a1b      	ldr	r2, [pc, #108]	; (800145c <__NVIC_SetPriority+0xd8>)
 80013ee:	1dfb      	adds	r3, r7, #7
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	0019      	movs	r1, r3
 80013f4:	230f      	movs	r3, #15
 80013f6:	400b      	ands	r3, r1
 80013f8:	3b08      	subs	r3, #8
 80013fa:	089b      	lsrs	r3, r3, #2
 80013fc:	3306      	adds	r3, #6
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	18d3      	adds	r3, r2, r3
 8001402:	3304      	adds	r3, #4
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	1dfa      	adds	r2, r7, #7
 8001408:	7812      	ldrb	r2, [r2, #0]
 800140a:	0011      	movs	r1, r2
 800140c:	2203      	movs	r2, #3
 800140e:	400a      	ands	r2, r1
 8001410:	00d2      	lsls	r2, r2, #3
 8001412:	21ff      	movs	r1, #255	; 0xff
 8001414:	4091      	lsls	r1, r2
 8001416:	000a      	movs	r2, r1
 8001418:	43d2      	mvns	r2, r2
 800141a:	401a      	ands	r2, r3
 800141c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	019b      	lsls	r3, r3, #6
 8001422:	22ff      	movs	r2, #255	; 0xff
 8001424:	401a      	ands	r2, r3
 8001426:	1dfb      	adds	r3, r7, #7
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	0018      	movs	r0, r3
 800142c:	2303      	movs	r3, #3
 800142e:	4003      	ands	r3, r0
 8001430:	00db      	lsls	r3, r3, #3
 8001432:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001434:	4809      	ldr	r0, [pc, #36]	; (800145c <__NVIC_SetPriority+0xd8>)
 8001436:	1dfb      	adds	r3, r7, #7
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	001c      	movs	r4, r3
 800143c:	230f      	movs	r3, #15
 800143e:	4023      	ands	r3, r4
 8001440:	3b08      	subs	r3, #8
 8001442:	089b      	lsrs	r3, r3, #2
 8001444:	430a      	orrs	r2, r1
 8001446:	3306      	adds	r3, #6
 8001448:	009b      	lsls	r3, r3, #2
 800144a:	18c3      	adds	r3, r0, r3
 800144c:	3304      	adds	r3, #4
 800144e:	601a      	str	r2, [r3, #0]
}
 8001450:	46c0      	nop			; (mov r8, r8)
 8001452:	46bd      	mov	sp, r7
 8001454:	b003      	add	sp, #12
 8001456:	bd90      	pop	{r4, r7, pc}
 8001458:	e000e100 	.word	0xe000e100
 800145c:	e000ed00 	.word	0xe000ed00

08001460 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	1e5a      	subs	r2, r3, #1
 800146c:	2380      	movs	r3, #128	; 0x80
 800146e:	045b      	lsls	r3, r3, #17
 8001470:	429a      	cmp	r2, r3
 8001472:	d301      	bcc.n	8001478 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001474:	2301      	movs	r3, #1
 8001476:	e010      	b.n	800149a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001478:	4b0a      	ldr	r3, [pc, #40]	; (80014a4 <SysTick_Config+0x44>)
 800147a:	687a      	ldr	r2, [r7, #4]
 800147c:	3a01      	subs	r2, #1
 800147e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001480:	2301      	movs	r3, #1
 8001482:	425b      	negs	r3, r3
 8001484:	2103      	movs	r1, #3
 8001486:	0018      	movs	r0, r3
 8001488:	f7ff ff7c 	bl	8001384 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800148c:	4b05      	ldr	r3, [pc, #20]	; (80014a4 <SysTick_Config+0x44>)
 800148e:	2200      	movs	r2, #0
 8001490:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001492:	4b04      	ldr	r3, [pc, #16]	; (80014a4 <SysTick_Config+0x44>)
 8001494:	2207      	movs	r2, #7
 8001496:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001498:	2300      	movs	r3, #0
}
 800149a:	0018      	movs	r0, r3
 800149c:	46bd      	mov	sp, r7
 800149e:	b002      	add	sp, #8
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	46c0      	nop			; (mov r8, r8)
 80014a4:	e000e010 	.word	0xe000e010

080014a8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	60b9      	str	r1, [r7, #8]
 80014b0:	607a      	str	r2, [r7, #4]
 80014b2:	210f      	movs	r1, #15
 80014b4:	187b      	adds	r3, r7, r1
 80014b6:	1c02      	adds	r2, r0, #0
 80014b8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80014ba:	68ba      	ldr	r2, [r7, #8]
 80014bc:	187b      	adds	r3, r7, r1
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	b25b      	sxtb	r3, r3
 80014c2:	0011      	movs	r1, r2
 80014c4:	0018      	movs	r0, r3
 80014c6:	f7ff ff5d 	bl	8001384 <__NVIC_SetPriority>
}
 80014ca:	46c0      	nop			; (mov r8, r8)
 80014cc:	46bd      	mov	sp, r7
 80014ce:	b004      	add	sp, #16
 80014d0:	bd80      	pop	{r7, pc}

080014d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014d2:	b580      	push	{r7, lr}
 80014d4:	b082      	sub	sp, #8
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	0002      	movs	r2, r0
 80014da:	1dfb      	adds	r3, r7, #7
 80014dc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014de:	1dfb      	adds	r3, r7, #7
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	b25b      	sxtb	r3, r3
 80014e4:	0018      	movs	r0, r3
 80014e6:	f7ff ff33 	bl	8001350 <__NVIC_EnableIRQ>
}
 80014ea:	46c0      	nop			; (mov r8, r8)
 80014ec:	46bd      	mov	sp, r7
 80014ee:	b002      	add	sp, #8
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014f2:	b580      	push	{r7, lr}
 80014f4:	b082      	sub	sp, #8
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	0018      	movs	r0, r3
 80014fe:	f7ff ffaf 	bl	8001460 <SysTick_Config>
 8001502:	0003      	movs	r3, r0
}
 8001504:	0018      	movs	r0, r3
 8001506:	46bd      	mov	sp, r7
 8001508:	b002      	add	sp, #8
 800150a:	bd80      	pop	{r7, pc}

0800150c <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d101      	bne.n	800151e <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	e050      	b.n	80015c0 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2225      	movs	r2, #37	; 0x25
 8001522:	5c9b      	ldrb	r3, [r3, r2]
 8001524:	b2db      	uxtb	r3, r3
 8001526:	2b02      	cmp	r3, #2
 8001528:	d008      	beq.n	800153c <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2204      	movs	r2, #4
 800152e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2224      	movs	r2, #36	; 0x24
 8001534:	2100      	movs	r1, #0
 8001536:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001538:	2301      	movs	r3, #1
 800153a:	e041      	b.n	80015c0 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	210e      	movs	r1, #14
 8001548:	438a      	bics	r2, r1
 800154a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001556:	491c      	ldr	r1, [pc, #112]	; (80015c8 <HAL_DMA_Abort+0xbc>)
 8001558:	400a      	ands	r2, r1
 800155a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	2101      	movs	r1, #1
 8001568:	438a      	bics	r2, r1
 800156a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 800156c:	4b17      	ldr	r3, [pc, #92]	; (80015cc <HAL_DMA_Abort+0xc0>)
 800156e:	6859      	ldr	r1, [r3, #4]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001574:	221c      	movs	r2, #28
 8001576:	4013      	ands	r3, r2
 8001578:	2201      	movs	r2, #1
 800157a:	409a      	lsls	r2, r3
 800157c:	4b13      	ldr	r3, [pc, #76]	; (80015cc <HAL_DMA_Abort+0xc0>)
 800157e:	430a      	orrs	r2, r1
 8001580:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001586:	687a      	ldr	r2, [r7, #4]
 8001588:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800158a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001590:	2b00      	cmp	r3, #0
 8001592:	d00c      	beq.n	80015ae <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800159e:	490a      	ldr	r1, [pc, #40]	; (80015c8 <HAL_DMA_Abort+0xbc>)
 80015a0:	400a      	ands	r2, r1
 80015a2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015a8:	687a      	ldr	r2, [r7, #4]
 80015aa:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80015ac:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2225      	movs	r2, #37	; 0x25
 80015b2:	2101      	movs	r1, #1
 80015b4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2224      	movs	r2, #36	; 0x24
 80015ba:	2100      	movs	r1, #0
 80015bc:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 80015be:	2300      	movs	r3, #0
}
 80015c0:	0018      	movs	r0, r3
 80015c2:	46bd      	mov	sp, r7
 80015c4:	b002      	add	sp, #8
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	fffffeff 	.word	0xfffffeff
 80015cc:	40020000 	.word	0x40020000

080015d0 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015d8:	210f      	movs	r1, #15
 80015da:	187b      	adds	r3, r7, r1
 80015dc:	2200      	movs	r2, #0
 80015de:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2225      	movs	r2, #37	; 0x25
 80015e4:	5c9b      	ldrb	r3, [r3, r2]
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	2b02      	cmp	r3, #2
 80015ea:	d006      	beq.n	80015fa <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2204      	movs	r2, #4
 80015f0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80015f2:	187b      	adds	r3, r7, r1
 80015f4:	2201      	movs	r2, #1
 80015f6:	701a      	strb	r2, [r3, #0]
 80015f8:	e049      	b.n	800168e <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	210e      	movs	r1, #14
 8001606:	438a      	bics	r2, r1
 8001608:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	2101      	movs	r1, #1
 8001616:	438a      	bics	r2, r1
 8001618:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001624:	491d      	ldr	r1, [pc, #116]	; (800169c <HAL_DMA_Abort_IT+0xcc>)
 8001626:	400a      	ands	r2, r1
 8001628:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 800162a:	4b1d      	ldr	r3, [pc, #116]	; (80016a0 <HAL_DMA_Abort_IT+0xd0>)
 800162c:	6859      	ldr	r1, [r3, #4]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001632:	221c      	movs	r2, #28
 8001634:	4013      	ands	r3, r2
 8001636:	2201      	movs	r2, #1
 8001638:	409a      	lsls	r2, r3
 800163a:	4b19      	ldr	r3, [pc, #100]	; (80016a0 <HAL_DMA_Abort_IT+0xd0>)
 800163c:	430a      	orrs	r2, r1
 800163e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001644:	687a      	ldr	r2, [r7, #4]
 8001646:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001648:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800164e:	2b00      	cmp	r3, #0
 8001650:	d00c      	beq.n	800166c <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800165c:	490f      	ldr	r1, [pc, #60]	; (800169c <HAL_DMA_Abort_IT+0xcc>)
 800165e:	400a      	ands	r2, r1
 8001660:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001666:	687a      	ldr	r2, [r7, #4]
 8001668:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800166a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2225      	movs	r2, #37	; 0x25
 8001670:	2101      	movs	r1, #1
 8001672:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2224      	movs	r2, #36	; 0x24
 8001678:	2100      	movs	r1, #0
 800167a:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001680:	2b00      	cmp	r3, #0
 8001682:	d004      	beq.n	800168e <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001688:	687a      	ldr	r2, [r7, #4]
 800168a:	0010      	movs	r0, r2
 800168c:	4798      	blx	r3
    }
  }
  return status;
 800168e:	230f      	movs	r3, #15
 8001690:	18fb      	adds	r3, r7, r3
 8001692:	781b      	ldrb	r3, [r3, #0]
}
 8001694:	0018      	movs	r0, r3
 8001696:	46bd      	mov	sp, r7
 8001698:	b004      	add	sp, #16
 800169a:	bd80      	pop	{r7, pc}
 800169c:	fffffeff 	.word	0xfffffeff
 80016a0:	40020000 	.word	0x40020000

080016a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b086      	sub	sp, #24
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
 80016ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016ae:	2300      	movs	r3, #0
 80016b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016b2:	e147      	b.n	8001944 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	2101      	movs	r1, #1
 80016ba:	697a      	ldr	r2, [r7, #20]
 80016bc:	4091      	lsls	r1, r2
 80016be:	000a      	movs	r2, r1
 80016c0:	4013      	ands	r3, r2
 80016c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d100      	bne.n	80016cc <HAL_GPIO_Init+0x28>
 80016ca:	e138      	b.n	800193e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	2203      	movs	r2, #3
 80016d2:	4013      	ands	r3, r2
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d005      	beq.n	80016e4 <HAL_GPIO_Init+0x40>
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	2203      	movs	r2, #3
 80016de:	4013      	ands	r3, r2
 80016e0:	2b02      	cmp	r3, #2
 80016e2:	d130      	bne.n	8001746 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	005b      	lsls	r3, r3, #1
 80016ee:	2203      	movs	r2, #3
 80016f0:	409a      	lsls	r2, r3
 80016f2:	0013      	movs	r3, r2
 80016f4:	43da      	mvns	r2, r3
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	4013      	ands	r3, r2
 80016fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	68da      	ldr	r2, [r3, #12]
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	005b      	lsls	r3, r3, #1
 8001704:	409a      	lsls	r2, r3
 8001706:	0013      	movs	r3, r2
 8001708:	693a      	ldr	r2, [r7, #16]
 800170a:	4313      	orrs	r3, r2
 800170c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	693a      	ldr	r2, [r7, #16]
 8001712:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800171a:	2201      	movs	r2, #1
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	409a      	lsls	r2, r3
 8001720:	0013      	movs	r3, r2
 8001722:	43da      	mvns	r2, r3
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	4013      	ands	r3, r2
 8001728:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	091b      	lsrs	r3, r3, #4
 8001730:	2201      	movs	r2, #1
 8001732:	401a      	ands	r2, r3
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	409a      	lsls	r2, r3
 8001738:	0013      	movs	r3, r2
 800173a:	693a      	ldr	r2, [r7, #16]
 800173c:	4313      	orrs	r3, r2
 800173e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	693a      	ldr	r2, [r7, #16]
 8001744:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	2203      	movs	r2, #3
 800174c:	4013      	ands	r3, r2
 800174e:	2b03      	cmp	r3, #3
 8001750:	d017      	beq.n	8001782 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	68db      	ldr	r3, [r3, #12]
 8001756:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	005b      	lsls	r3, r3, #1
 800175c:	2203      	movs	r2, #3
 800175e:	409a      	lsls	r2, r3
 8001760:	0013      	movs	r3, r2
 8001762:	43da      	mvns	r2, r3
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	4013      	ands	r3, r2
 8001768:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	689a      	ldr	r2, [r3, #8]
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	005b      	lsls	r3, r3, #1
 8001772:	409a      	lsls	r2, r3
 8001774:	0013      	movs	r3, r2
 8001776:	693a      	ldr	r2, [r7, #16]
 8001778:	4313      	orrs	r3, r2
 800177a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	693a      	ldr	r2, [r7, #16]
 8001780:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	2203      	movs	r2, #3
 8001788:	4013      	ands	r3, r2
 800178a:	2b02      	cmp	r3, #2
 800178c:	d123      	bne.n	80017d6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	08da      	lsrs	r2, r3, #3
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	3208      	adds	r2, #8
 8001796:	0092      	lsls	r2, r2, #2
 8001798:	58d3      	ldr	r3, [r2, r3]
 800179a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	2207      	movs	r2, #7
 80017a0:	4013      	ands	r3, r2
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	220f      	movs	r2, #15
 80017a6:	409a      	lsls	r2, r3
 80017a8:	0013      	movs	r3, r2
 80017aa:	43da      	mvns	r2, r3
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	4013      	ands	r3, r2
 80017b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	691a      	ldr	r2, [r3, #16]
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	2107      	movs	r1, #7
 80017ba:	400b      	ands	r3, r1
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	409a      	lsls	r2, r3
 80017c0:	0013      	movs	r3, r2
 80017c2:	693a      	ldr	r2, [r7, #16]
 80017c4:	4313      	orrs	r3, r2
 80017c6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	08da      	lsrs	r2, r3, #3
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	3208      	adds	r2, #8
 80017d0:	0092      	lsls	r2, r2, #2
 80017d2:	6939      	ldr	r1, [r7, #16]
 80017d4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	005b      	lsls	r3, r3, #1
 80017e0:	2203      	movs	r2, #3
 80017e2:	409a      	lsls	r2, r3
 80017e4:	0013      	movs	r3, r2
 80017e6:	43da      	mvns	r2, r3
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	4013      	ands	r3, r2
 80017ec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	2203      	movs	r2, #3
 80017f4:	401a      	ands	r2, r3
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	005b      	lsls	r3, r3, #1
 80017fa:	409a      	lsls	r2, r3
 80017fc:	0013      	movs	r3, r2
 80017fe:	693a      	ldr	r2, [r7, #16]
 8001800:	4313      	orrs	r3, r2
 8001802:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	693a      	ldr	r2, [r7, #16]
 8001808:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	685a      	ldr	r2, [r3, #4]
 800180e:	23c0      	movs	r3, #192	; 0xc0
 8001810:	029b      	lsls	r3, r3, #10
 8001812:	4013      	ands	r3, r2
 8001814:	d100      	bne.n	8001818 <HAL_GPIO_Init+0x174>
 8001816:	e092      	b.n	800193e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001818:	4a50      	ldr	r2, [pc, #320]	; (800195c <HAL_GPIO_Init+0x2b8>)
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	089b      	lsrs	r3, r3, #2
 800181e:	3318      	adds	r3, #24
 8001820:	009b      	lsls	r3, r3, #2
 8001822:	589b      	ldr	r3, [r3, r2]
 8001824:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	2203      	movs	r2, #3
 800182a:	4013      	ands	r3, r2
 800182c:	00db      	lsls	r3, r3, #3
 800182e:	220f      	movs	r2, #15
 8001830:	409a      	lsls	r2, r3
 8001832:	0013      	movs	r3, r2
 8001834:	43da      	mvns	r2, r3
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	4013      	ands	r3, r2
 800183a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800183c:	687a      	ldr	r2, [r7, #4]
 800183e:	23a0      	movs	r3, #160	; 0xa0
 8001840:	05db      	lsls	r3, r3, #23
 8001842:	429a      	cmp	r2, r3
 8001844:	d013      	beq.n	800186e <HAL_GPIO_Init+0x1ca>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4a45      	ldr	r2, [pc, #276]	; (8001960 <HAL_GPIO_Init+0x2bc>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d00d      	beq.n	800186a <HAL_GPIO_Init+0x1c6>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4a44      	ldr	r2, [pc, #272]	; (8001964 <HAL_GPIO_Init+0x2c0>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d007      	beq.n	8001866 <HAL_GPIO_Init+0x1c2>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4a43      	ldr	r2, [pc, #268]	; (8001968 <HAL_GPIO_Init+0x2c4>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d101      	bne.n	8001862 <HAL_GPIO_Init+0x1be>
 800185e:	2303      	movs	r3, #3
 8001860:	e006      	b.n	8001870 <HAL_GPIO_Init+0x1cc>
 8001862:	2305      	movs	r3, #5
 8001864:	e004      	b.n	8001870 <HAL_GPIO_Init+0x1cc>
 8001866:	2302      	movs	r3, #2
 8001868:	e002      	b.n	8001870 <HAL_GPIO_Init+0x1cc>
 800186a:	2301      	movs	r3, #1
 800186c:	e000      	b.n	8001870 <HAL_GPIO_Init+0x1cc>
 800186e:	2300      	movs	r3, #0
 8001870:	697a      	ldr	r2, [r7, #20]
 8001872:	2103      	movs	r1, #3
 8001874:	400a      	ands	r2, r1
 8001876:	00d2      	lsls	r2, r2, #3
 8001878:	4093      	lsls	r3, r2
 800187a:	693a      	ldr	r2, [r7, #16]
 800187c:	4313      	orrs	r3, r2
 800187e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001880:	4936      	ldr	r1, [pc, #216]	; (800195c <HAL_GPIO_Init+0x2b8>)
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	089b      	lsrs	r3, r3, #2
 8001886:	3318      	adds	r3, #24
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	693a      	ldr	r2, [r7, #16]
 800188c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800188e:	4b33      	ldr	r3, [pc, #204]	; (800195c <HAL_GPIO_Init+0x2b8>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	43da      	mvns	r2, r3
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	4013      	ands	r3, r2
 800189c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	685a      	ldr	r2, [r3, #4]
 80018a2:	2380      	movs	r3, #128	; 0x80
 80018a4:	035b      	lsls	r3, r3, #13
 80018a6:	4013      	ands	r3, r2
 80018a8:	d003      	beq.n	80018b2 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80018aa:	693a      	ldr	r2, [r7, #16]
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	4313      	orrs	r3, r2
 80018b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80018b2:	4b2a      	ldr	r3, [pc, #168]	; (800195c <HAL_GPIO_Init+0x2b8>)
 80018b4:	693a      	ldr	r2, [r7, #16]
 80018b6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80018b8:	4b28      	ldr	r3, [pc, #160]	; (800195c <HAL_GPIO_Init+0x2b8>)
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	43da      	mvns	r2, r3
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	4013      	ands	r3, r2
 80018c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	685a      	ldr	r2, [r3, #4]
 80018cc:	2380      	movs	r3, #128	; 0x80
 80018ce:	039b      	lsls	r3, r3, #14
 80018d0:	4013      	ands	r3, r2
 80018d2:	d003      	beq.n	80018dc <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80018d4:	693a      	ldr	r2, [r7, #16]
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	4313      	orrs	r3, r2
 80018da:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80018dc:	4b1f      	ldr	r3, [pc, #124]	; (800195c <HAL_GPIO_Init+0x2b8>)
 80018de:	693a      	ldr	r2, [r7, #16]
 80018e0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80018e2:	4a1e      	ldr	r2, [pc, #120]	; (800195c <HAL_GPIO_Init+0x2b8>)
 80018e4:	2384      	movs	r3, #132	; 0x84
 80018e6:	58d3      	ldr	r3, [r2, r3]
 80018e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	43da      	mvns	r2, r3
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	4013      	ands	r3, r2
 80018f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	685a      	ldr	r2, [r3, #4]
 80018f8:	2380      	movs	r3, #128	; 0x80
 80018fa:	029b      	lsls	r3, r3, #10
 80018fc:	4013      	ands	r3, r2
 80018fe:	d003      	beq.n	8001908 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001900:	693a      	ldr	r2, [r7, #16]
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	4313      	orrs	r3, r2
 8001906:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001908:	4914      	ldr	r1, [pc, #80]	; (800195c <HAL_GPIO_Init+0x2b8>)
 800190a:	2284      	movs	r2, #132	; 0x84
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001910:	4a12      	ldr	r2, [pc, #72]	; (800195c <HAL_GPIO_Init+0x2b8>)
 8001912:	2380      	movs	r3, #128	; 0x80
 8001914:	58d3      	ldr	r3, [r2, r3]
 8001916:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	43da      	mvns	r2, r3
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	4013      	ands	r3, r2
 8001920:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	685a      	ldr	r2, [r3, #4]
 8001926:	2380      	movs	r3, #128	; 0x80
 8001928:	025b      	lsls	r3, r3, #9
 800192a:	4013      	ands	r3, r2
 800192c:	d003      	beq.n	8001936 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800192e:	693a      	ldr	r2, [r7, #16]
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	4313      	orrs	r3, r2
 8001934:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001936:	4909      	ldr	r1, [pc, #36]	; (800195c <HAL_GPIO_Init+0x2b8>)
 8001938:	2280      	movs	r2, #128	; 0x80
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	3301      	adds	r3, #1
 8001942:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	40da      	lsrs	r2, r3
 800194c:	1e13      	subs	r3, r2, #0
 800194e:	d000      	beq.n	8001952 <HAL_GPIO_Init+0x2ae>
 8001950:	e6b0      	b.n	80016b4 <HAL_GPIO_Init+0x10>
  }
}
 8001952:	46c0      	nop			; (mov r8, r8)
 8001954:	46c0      	nop			; (mov r8, r8)
 8001956:	46bd      	mov	sp, r7
 8001958:	b006      	add	sp, #24
 800195a:	bd80      	pop	{r7, pc}
 800195c:	40021800 	.word	0x40021800
 8001960:	50000400 	.word	0x50000400
 8001964:	50000800 	.word	0x50000800
 8001968:	50000c00 	.word	0x50000c00

0800196c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
 8001974:	0008      	movs	r0, r1
 8001976:	0011      	movs	r1, r2
 8001978:	1cbb      	adds	r3, r7, #2
 800197a:	1c02      	adds	r2, r0, #0
 800197c:	801a      	strh	r2, [r3, #0]
 800197e:	1c7b      	adds	r3, r7, #1
 8001980:	1c0a      	adds	r2, r1, #0
 8001982:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001984:	1c7b      	adds	r3, r7, #1
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d004      	beq.n	8001996 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800198c:	1cbb      	adds	r3, r7, #2
 800198e:	881a      	ldrh	r2, [r3, #0]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001994:	e003      	b.n	800199e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001996:	1cbb      	adds	r3, r7, #2
 8001998:	881a      	ldrh	r2, [r3, #0]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800199e:	46c0      	nop			; (mov r8, r8)
 80019a0:	46bd      	mov	sp, r7
 80019a2:	b002      	add	sp, #8
 80019a4:	bd80      	pop	{r7, pc}

080019a6 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80019a6:	b580      	push	{r7, lr}
 80019a8:	b084      	sub	sp, #16
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
 80019ae:	000a      	movs	r2, r1
 80019b0:	1cbb      	adds	r3, r7, #2
 80019b2:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	695b      	ldr	r3, [r3, #20]
 80019b8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80019ba:	1cbb      	adds	r3, r7, #2
 80019bc:	881b      	ldrh	r3, [r3, #0]
 80019be:	68fa      	ldr	r2, [r7, #12]
 80019c0:	4013      	ands	r3, r2
 80019c2:	041a      	lsls	r2, r3, #16
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	43db      	mvns	r3, r3
 80019c8:	1cb9      	adds	r1, r7, #2
 80019ca:	8809      	ldrh	r1, [r1, #0]
 80019cc:	400b      	ands	r3, r1
 80019ce:	431a      	orrs	r2, r3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	619a      	str	r2, [r3, #24]
}
 80019d4:	46c0      	nop			; (mov r8, r8)
 80019d6:	46bd      	mov	sp, r7
 80019d8:	b004      	add	sp, #16
 80019da:	bd80      	pop	{r7, pc}

080019dc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80019e4:	4b19      	ldr	r3, [pc, #100]	; (8001a4c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a19      	ldr	r2, [pc, #100]	; (8001a50 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80019ea:	4013      	ands	r3, r2
 80019ec:	0019      	movs	r1, r3
 80019ee:	4b17      	ldr	r3, [pc, #92]	; (8001a4c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80019f0:	687a      	ldr	r2, [r7, #4]
 80019f2:	430a      	orrs	r2, r1
 80019f4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80019f6:	687a      	ldr	r2, [r7, #4]
 80019f8:	2380      	movs	r3, #128	; 0x80
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d11f      	bne.n	8001a40 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001a00:	4b14      	ldr	r3, [pc, #80]	; (8001a54 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	0013      	movs	r3, r2
 8001a06:	005b      	lsls	r3, r3, #1
 8001a08:	189b      	adds	r3, r3, r2
 8001a0a:	005b      	lsls	r3, r3, #1
 8001a0c:	4912      	ldr	r1, [pc, #72]	; (8001a58 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001a0e:	0018      	movs	r0, r3
 8001a10:	f7fe fb8a 	bl	8000128 <__udivsi3>
 8001a14:	0003      	movs	r3, r0
 8001a16:	3301      	adds	r3, #1
 8001a18:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a1a:	e008      	b.n	8001a2e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d003      	beq.n	8001a2a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	3b01      	subs	r3, #1
 8001a26:	60fb      	str	r3, [r7, #12]
 8001a28:	e001      	b.n	8001a2e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	e009      	b.n	8001a42 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a2e:	4b07      	ldr	r3, [pc, #28]	; (8001a4c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001a30:	695a      	ldr	r2, [r3, #20]
 8001a32:	2380      	movs	r3, #128	; 0x80
 8001a34:	00db      	lsls	r3, r3, #3
 8001a36:	401a      	ands	r2, r3
 8001a38:	2380      	movs	r3, #128	; 0x80
 8001a3a:	00db      	lsls	r3, r3, #3
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d0ed      	beq.n	8001a1c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001a40:	2300      	movs	r3, #0
}
 8001a42:	0018      	movs	r0, r3
 8001a44:	46bd      	mov	sp, r7
 8001a46:	b004      	add	sp, #16
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	46c0      	nop			; (mov r8, r8)
 8001a4c:	40007000 	.word	0x40007000
 8001a50:	fffff9ff 	.word	0xfffff9ff
 8001a54:	20000000 	.word	0x20000000
 8001a58:	000f4240 	.word	0x000f4240

08001a5c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001a60:	4b03      	ldr	r3, [pc, #12]	; (8001a70 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001a62:	689a      	ldr	r2, [r3, #8]
 8001a64:	23e0      	movs	r3, #224	; 0xe0
 8001a66:	01db      	lsls	r3, r3, #7
 8001a68:	4013      	ands	r3, r2
}
 8001a6a:	0018      	movs	r0, r3
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	40021000 	.word	0x40021000

08001a74 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b088      	sub	sp, #32
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d101      	bne.n	8001a86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e2fe      	b.n	8002084 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	d100      	bne.n	8001a92 <HAL_RCC_OscConfig+0x1e>
 8001a90:	e07c      	b.n	8001b8c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a92:	4bc3      	ldr	r3, [pc, #780]	; (8001da0 <HAL_RCC_OscConfig+0x32c>)
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	2238      	movs	r2, #56	; 0x38
 8001a98:	4013      	ands	r3, r2
 8001a9a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a9c:	4bc0      	ldr	r3, [pc, #768]	; (8001da0 <HAL_RCC_OscConfig+0x32c>)
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	2203      	movs	r2, #3
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001aa6:	69bb      	ldr	r3, [r7, #24]
 8001aa8:	2b10      	cmp	r3, #16
 8001aaa:	d102      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x3e>
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	2b03      	cmp	r3, #3
 8001ab0:	d002      	beq.n	8001ab8 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001ab2:	69bb      	ldr	r3, [r7, #24]
 8001ab4:	2b08      	cmp	r3, #8
 8001ab6:	d10b      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ab8:	4bb9      	ldr	r3, [pc, #740]	; (8001da0 <HAL_RCC_OscConfig+0x32c>)
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	2380      	movs	r3, #128	; 0x80
 8001abe:	029b      	lsls	r3, r3, #10
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	d062      	beq.n	8001b8a <HAL_RCC_OscConfig+0x116>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d15e      	bne.n	8001b8a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	e2d9      	b.n	8002084 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	685a      	ldr	r2, [r3, #4]
 8001ad4:	2380      	movs	r3, #128	; 0x80
 8001ad6:	025b      	lsls	r3, r3, #9
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d107      	bne.n	8001aec <HAL_RCC_OscConfig+0x78>
 8001adc:	4bb0      	ldr	r3, [pc, #704]	; (8001da0 <HAL_RCC_OscConfig+0x32c>)
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	4baf      	ldr	r3, [pc, #700]	; (8001da0 <HAL_RCC_OscConfig+0x32c>)
 8001ae2:	2180      	movs	r1, #128	; 0x80
 8001ae4:	0249      	lsls	r1, r1, #9
 8001ae6:	430a      	orrs	r2, r1
 8001ae8:	601a      	str	r2, [r3, #0]
 8001aea:	e020      	b.n	8001b2e <HAL_RCC_OscConfig+0xba>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	685a      	ldr	r2, [r3, #4]
 8001af0:	23a0      	movs	r3, #160	; 0xa0
 8001af2:	02db      	lsls	r3, r3, #11
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d10e      	bne.n	8001b16 <HAL_RCC_OscConfig+0xa2>
 8001af8:	4ba9      	ldr	r3, [pc, #676]	; (8001da0 <HAL_RCC_OscConfig+0x32c>)
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	4ba8      	ldr	r3, [pc, #672]	; (8001da0 <HAL_RCC_OscConfig+0x32c>)
 8001afe:	2180      	movs	r1, #128	; 0x80
 8001b00:	02c9      	lsls	r1, r1, #11
 8001b02:	430a      	orrs	r2, r1
 8001b04:	601a      	str	r2, [r3, #0]
 8001b06:	4ba6      	ldr	r3, [pc, #664]	; (8001da0 <HAL_RCC_OscConfig+0x32c>)
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	4ba5      	ldr	r3, [pc, #660]	; (8001da0 <HAL_RCC_OscConfig+0x32c>)
 8001b0c:	2180      	movs	r1, #128	; 0x80
 8001b0e:	0249      	lsls	r1, r1, #9
 8001b10:	430a      	orrs	r2, r1
 8001b12:	601a      	str	r2, [r3, #0]
 8001b14:	e00b      	b.n	8001b2e <HAL_RCC_OscConfig+0xba>
 8001b16:	4ba2      	ldr	r3, [pc, #648]	; (8001da0 <HAL_RCC_OscConfig+0x32c>)
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	4ba1      	ldr	r3, [pc, #644]	; (8001da0 <HAL_RCC_OscConfig+0x32c>)
 8001b1c:	49a1      	ldr	r1, [pc, #644]	; (8001da4 <HAL_RCC_OscConfig+0x330>)
 8001b1e:	400a      	ands	r2, r1
 8001b20:	601a      	str	r2, [r3, #0]
 8001b22:	4b9f      	ldr	r3, [pc, #636]	; (8001da0 <HAL_RCC_OscConfig+0x32c>)
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	4b9e      	ldr	r3, [pc, #632]	; (8001da0 <HAL_RCC_OscConfig+0x32c>)
 8001b28:	499f      	ldr	r1, [pc, #636]	; (8001da8 <HAL_RCC_OscConfig+0x334>)
 8001b2a:	400a      	ands	r2, r1
 8001b2c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d014      	beq.n	8001b60 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b36:	f7ff fbc7 	bl	80012c8 <HAL_GetTick>
 8001b3a:	0003      	movs	r3, r0
 8001b3c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b3e:	e008      	b.n	8001b52 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b40:	f7ff fbc2 	bl	80012c8 <HAL_GetTick>
 8001b44:	0002      	movs	r2, r0
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	2b64      	cmp	r3, #100	; 0x64
 8001b4c:	d901      	bls.n	8001b52 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	e298      	b.n	8002084 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b52:	4b93      	ldr	r3, [pc, #588]	; (8001da0 <HAL_RCC_OscConfig+0x32c>)
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	2380      	movs	r3, #128	; 0x80
 8001b58:	029b      	lsls	r3, r3, #10
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	d0f0      	beq.n	8001b40 <HAL_RCC_OscConfig+0xcc>
 8001b5e:	e015      	b.n	8001b8c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b60:	f7ff fbb2 	bl	80012c8 <HAL_GetTick>
 8001b64:	0003      	movs	r3, r0
 8001b66:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b68:	e008      	b.n	8001b7c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b6a:	f7ff fbad 	bl	80012c8 <HAL_GetTick>
 8001b6e:	0002      	movs	r2, r0
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	2b64      	cmp	r3, #100	; 0x64
 8001b76:	d901      	bls.n	8001b7c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001b78:	2303      	movs	r3, #3
 8001b7a:	e283      	b.n	8002084 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b7c:	4b88      	ldr	r3, [pc, #544]	; (8001da0 <HAL_RCC_OscConfig+0x32c>)
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	2380      	movs	r3, #128	; 0x80
 8001b82:	029b      	lsls	r3, r3, #10
 8001b84:	4013      	ands	r3, r2
 8001b86:	d1f0      	bne.n	8001b6a <HAL_RCC_OscConfig+0xf6>
 8001b88:	e000      	b.n	8001b8c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b8a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	2202      	movs	r2, #2
 8001b92:	4013      	ands	r3, r2
 8001b94:	d100      	bne.n	8001b98 <HAL_RCC_OscConfig+0x124>
 8001b96:	e099      	b.n	8001ccc <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b98:	4b81      	ldr	r3, [pc, #516]	; (8001da0 <HAL_RCC_OscConfig+0x32c>)
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	2238      	movs	r2, #56	; 0x38
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ba2:	4b7f      	ldr	r3, [pc, #508]	; (8001da0 <HAL_RCC_OscConfig+0x32c>)
 8001ba4:	68db      	ldr	r3, [r3, #12]
 8001ba6:	2203      	movs	r2, #3
 8001ba8:	4013      	ands	r3, r2
 8001baa:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001bac:	69bb      	ldr	r3, [r7, #24]
 8001bae:	2b10      	cmp	r3, #16
 8001bb0:	d102      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x144>
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	2b02      	cmp	r3, #2
 8001bb6:	d002      	beq.n	8001bbe <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001bb8:	69bb      	ldr	r3, [r7, #24]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d135      	bne.n	8001c2a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001bbe:	4b78      	ldr	r3, [pc, #480]	; (8001da0 <HAL_RCC_OscConfig+0x32c>)
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	2380      	movs	r3, #128	; 0x80
 8001bc4:	00db      	lsls	r3, r3, #3
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	d005      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x162>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	68db      	ldr	r3, [r3, #12]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d101      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e256      	b.n	8002084 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bd6:	4b72      	ldr	r3, [pc, #456]	; (8001da0 <HAL_RCC_OscConfig+0x32c>)
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	4a74      	ldr	r2, [pc, #464]	; (8001dac <HAL_RCC_OscConfig+0x338>)
 8001bdc:	4013      	ands	r3, r2
 8001bde:	0019      	movs	r1, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	695b      	ldr	r3, [r3, #20]
 8001be4:	021a      	lsls	r2, r3, #8
 8001be6:	4b6e      	ldr	r3, [pc, #440]	; (8001da0 <HAL_RCC_OscConfig+0x32c>)
 8001be8:	430a      	orrs	r2, r1
 8001bea:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bec:	69bb      	ldr	r3, [r7, #24]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d112      	bne.n	8001c18 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001bf2:	4b6b      	ldr	r3, [pc, #428]	; (8001da0 <HAL_RCC_OscConfig+0x32c>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a6e      	ldr	r2, [pc, #440]	; (8001db0 <HAL_RCC_OscConfig+0x33c>)
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	0019      	movs	r1, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	691a      	ldr	r2, [r3, #16]
 8001c00:	4b67      	ldr	r3, [pc, #412]	; (8001da0 <HAL_RCC_OscConfig+0x32c>)
 8001c02:	430a      	orrs	r2, r1
 8001c04:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001c06:	4b66      	ldr	r3, [pc, #408]	; (8001da0 <HAL_RCC_OscConfig+0x32c>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	0adb      	lsrs	r3, r3, #11
 8001c0c:	2207      	movs	r2, #7
 8001c0e:	4013      	ands	r3, r2
 8001c10:	4a68      	ldr	r2, [pc, #416]	; (8001db4 <HAL_RCC_OscConfig+0x340>)
 8001c12:	40da      	lsrs	r2, r3
 8001c14:	4b68      	ldr	r3, [pc, #416]	; (8001db8 <HAL_RCC_OscConfig+0x344>)
 8001c16:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001c18:	4b68      	ldr	r3, [pc, #416]	; (8001dbc <HAL_RCC_OscConfig+0x348>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	0018      	movs	r0, r3
 8001c1e:	f7ff faf7 	bl	8001210 <HAL_InitTick>
 8001c22:	1e03      	subs	r3, r0, #0
 8001c24:	d051      	beq.n	8001cca <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e22c      	b.n	8002084 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	68db      	ldr	r3, [r3, #12]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d030      	beq.n	8001c94 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001c32:	4b5b      	ldr	r3, [pc, #364]	; (8001da0 <HAL_RCC_OscConfig+0x32c>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a5e      	ldr	r2, [pc, #376]	; (8001db0 <HAL_RCC_OscConfig+0x33c>)
 8001c38:	4013      	ands	r3, r2
 8001c3a:	0019      	movs	r1, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	691a      	ldr	r2, [r3, #16]
 8001c40:	4b57      	ldr	r3, [pc, #348]	; (8001da0 <HAL_RCC_OscConfig+0x32c>)
 8001c42:	430a      	orrs	r2, r1
 8001c44:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001c46:	4b56      	ldr	r3, [pc, #344]	; (8001da0 <HAL_RCC_OscConfig+0x32c>)
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	4b55      	ldr	r3, [pc, #340]	; (8001da0 <HAL_RCC_OscConfig+0x32c>)
 8001c4c:	2180      	movs	r1, #128	; 0x80
 8001c4e:	0049      	lsls	r1, r1, #1
 8001c50:	430a      	orrs	r2, r1
 8001c52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c54:	f7ff fb38 	bl	80012c8 <HAL_GetTick>
 8001c58:	0003      	movs	r3, r0
 8001c5a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c5c:	e008      	b.n	8001c70 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c5e:	f7ff fb33 	bl	80012c8 <HAL_GetTick>
 8001c62:	0002      	movs	r2, r0
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	2b02      	cmp	r3, #2
 8001c6a:	d901      	bls.n	8001c70 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	e209      	b.n	8002084 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c70:	4b4b      	ldr	r3, [pc, #300]	; (8001da0 <HAL_RCC_OscConfig+0x32c>)
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	2380      	movs	r3, #128	; 0x80
 8001c76:	00db      	lsls	r3, r3, #3
 8001c78:	4013      	ands	r3, r2
 8001c7a:	d0f0      	beq.n	8001c5e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c7c:	4b48      	ldr	r3, [pc, #288]	; (8001da0 <HAL_RCC_OscConfig+0x32c>)
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	4a4a      	ldr	r2, [pc, #296]	; (8001dac <HAL_RCC_OscConfig+0x338>)
 8001c82:	4013      	ands	r3, r2
 8001c84:	0019      	movs	r1, r3
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	695b      	ldr	r3, [r3, #20]
 8001c8a:	021a      	lsls	r2, r3, #8
 8001c8c:	4b44      	ldr	r3, [pc, #272]	; (8001da0 <HAL_RCC_OscConfig+0x32c>)
 8001c8e:	430a      	orrs	r2, r1
 8001c90:	605a      	str	r2, [r3, #4]
 8001c92:	e01b      	b.n	8001ccc <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001c94:	4b42      	ldr	r3, [pc, #264]	; (8001da0 <HAL_RCC_OscConfig+0x32c>)
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	4b41      	ldr	r3, [pc, #260]	; (8001da0 <HAL_RCC_OscConfig+0x32c>)
 8001c9a:	4949      	ldr	r1, [pc, #292]	; (8001dc0 <HAL_RCC_OscConfig+0x34c>)
 8001c9c:	400a      	ands	r2, r1
 8001c9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca0:	f7ff fb12 	bl	80012c8 <HAL_GetTick>
 8001ca4:	0003      	movs	r3, r0
 8001ca6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ca8:	e008      	b.n	8001cbc <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001caa:	f7ff fb0d 	bl	80012c8 <HAL_GetTick>
 8001cae:	0002      	movs	r2, r0
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	1ad3      	subs	r3, r2, r3
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	d901      	bls.n	8001cbc <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001cb8:	2303      	movs	r3, #3
 8001cba:	e1e3      	b.n	8002084 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001cbc:	4b38      	ldr	r3, [pc, #224]	; (8001da0 <HAL_RCC_OscConfig+0x32c>)
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	2380      	movs	r3, #128	; 0x80
 8001cc2:	00db      	lsls	r3, r3, #3
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	d1f0      	bne.n	8001caa <HAL_RCC_OscConfig+0x236>
 8001cc8:	e000      	b.n	8001ccc <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001cca:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	2208      	movs	r2, #8
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	d047      	beq.n	8001d66 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001cd6:	4b32      	ldr	r3, [pc, #200]	; (8001da0 <HAL_RCC_OscConfig+0x32c>)
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	2238      	movs	r2, #56	; 0x38
 8001cdc:	4013      	ands	r3, r2
 8001cde:	2b18      	cmp	r3, #24
 8001ce0:	d10a      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001ce2:	4b2f      	ldr	r3, [pc, #188]	; (8001da0 <HAL_RCC_OscConfig+0x32c>)
 8001ce4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ce6:	2202      	movs	r2, #2
 8001ce8:	4013      	ands	r3, r2
 8001cea:	d03c      	beq.n	8001d66 <HAL_RCC_OscConfig+0x2f2>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	699b      	ldr	r3, [r3, #24]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d138      	bne.n	8001d66 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e1c5      	b.n	8002084 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	699b      	ldr	r3, [r3, #24]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d019      	beq.n	8001d34 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001d00:	4b27      	ldr	r3, [pc, #156]	; (8001da0 <HAL_RCC_OscConfig+0x32c>)
 8001d02:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001d04:	4b26      	ldr	r3, [pc, #152]	; (8001da0 <HAL_RCC_OscConfig+0x32c>)
 8001d06:	2101      	movs	r1, #1
 8001d08:	430a      	orrs	r2, r1
 8001d0a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d0c:	f7ff fadc 	bl	80012c8 <HAL_GetTick>
 8001d10:	0003      	movs	r3, r0
 8001d12:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d14:	e008      	b.n	8001d28 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d16:	f7ff fad7 	bl	80012c8 <HAL_GetTick>
 8001d1a:	0002      	movs	r2, r0
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	d901      	bls.n	8001d28 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001d24:	2303      	movs	r3, #3
 8001d26:	e1ad      	b.n	8002084 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d28:	4b1d      	ldr	r3, [pc, #116]	; (8001da0 <HAL_RCC_OscConfig+0x32c>)
 8001d2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d2c:	2202      	movs	r2, #2
 8001d2e:	4013      	ands	r3, r2
 8001d30:	d0f1      	beq.n	8001d16 <HAL_RCC_OscConfig+0x2a2>
 8001d32:	e018      	b.n	8001d66 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001d34:	4b1a      	ldr	r3, [pc, #104]	; (8001da0 <HAL_RCC_OscConfig+0x32c>)
 8001d36:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001d38:	4b19      	ldr	r3, [pc, #100]	; (8001da0 <HAL_RCC_OscConfig+0x32c>)
 8001d3a:	2101      	movs	r1, #1
 8001d3c:	438a      	bics	r2, r1
 8001d3e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d40:	f7ff fac2 	bl	80012c8 <HAL_GetTick>
 8001d44:	0003      	movs	r3, r0
 8001d46:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d48:	e008      	b.n	8001d5c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d4a:	f7ff fabd 	bl	80012c8 <HAL_GetTick>
 8001d4e:	0002      	movs	r2, r0
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	1ad3      	subs	r3, r2, r3
 8001d54:	2b02      	cmp	r3, #2
 8001d56:	d901      	bls.n	8001d5c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001d58:	2303      	movs	r3, #3
 8001d5a:	e193      	b.n	8002084 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d5c:	4b10      	ldr	r3, [pc, #64]	; (8001da0 <HAL_RCC_OscConfig+0x32c>)
 8001d5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d60:	2202      	movs	r2, #2
 8001d62:	4013      	ands	r3, r2
 8001d64:	d1f1      	bne.n	8001d4a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	2204      	movs	r2, #4
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	d100      	bne.n	8001d72 <HAL_RCC_OscConfig+0x2fe>
 8001d70:	e0c6      	b.n	8001f00 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d72:	231f      	movs	r3, #31
 8001d74:	18fb      	adds	r3, r7, r3
 8001d76:	2200      	movs	r2, #0
 8001d78:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001d7a:	4b09      	ldr	r3, [pc, #36]	; (8001da0 <HAL_RCC_OscConfig+0x32c>)
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	2238      	movs	r2, #56	; 0x38
 8001d80:	4013      	ands	r3, r2
 8001d82:	2b20      	cmp	r3, #32
 8001d84:	d11e      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001d86:	4b06      	ldr	r3, [pc, #24]	; (8001da0 <HAL_RCC_OscConfig+0x32c>)
 8001d88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d8a:	2202      	movs	r2, #2
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	d100      	bne.n	8001d92 <HAL_RCC_OscConfig+0x31e>
 8001d90:	e0b6      	b.n	8001f00 <HAL_RCC_OscConfig+0x48c>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d000      	beq.n	8001d9c <HAL_RCC_OscConfig+0x328>
 8001d9a:	e0b1      	b.n	8001f00 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e171      	b.n	8002084 <HAL_RCC_OscConfig+0x610>
 8001da0:	40021000 	.word	0x40021000
 8001da4:	fffeffff 	.word	0xfffeffff
 8001da8:	fffbffff 	.word	0xfffbffff
 8001dac:	ffff80ff 	.word	0xffff80ff
 8001db0:	ffffc7ff 	.word	0xffffc7ff
 8001db4:	00f42400 	.word	0x00f42400
 8001db8:	20000000 	.word	0x20000000
 8001dbc:	20000004 	.word	0x20000004
 8001dc0:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001dc4:	4bb1      	ldr	r3, [pc, #708]	; (800208c <HAL_RCC_OscConfig+0x618>)
 8001dc6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001dc8:	2380      	movs	r3, #128	; 0x80
 8001dca:	055b      	lsls	r3, r3, #21
 8001dcc:	4013      	ands	r3, r2
 8001dce:	d101      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x360>
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e000      	b.n	8001dd6 <HAL_RCC_OscConfig+0x362>
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d011      	beq.n	8001dfe <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001dda:	4bac      	ldr	r3, [pc, #688]	; (800208c <HAL_RCC_OscConfig+0x618>)
 8001ddc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001dde:	4bab      	ldr	r3, [pc, #684]	; (800208c <HAL_RCC_OscConfig+0x618>)
 8001de0:	2180      	movs	r1, #128	; 0x80
 8001de2:	0549      	lsls	r1, r1, #21
 8001de4:	430a      	orrs	r2, r1
 8001de6:	63da      	str	r2, [r3, #60]	; 0x3c
 8001de8:	4ba8      	ldr	r3, [pc, #672]	; (800208c <HAL_RCC_OscConfig+0x618>)
 8001dea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001dec:	2380      	movs	r3, #128	; 0x80
 8001dee:	055b      	lsls	r3, r3, #21
 8001df0:	4013      	ands	r3, r2
 8001df2:	60fb      	str	r3, [r7, #12]
 8001df4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001df6:	231f      	movs	r3, #31
 8001df8:	18fb      	adds	r3, r7, r3
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dfe:	4ba4      	ldr	r3, [pc, #656]	; (8002090 <HAL_RCC_OscConfig+0x61c>)
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	2380      	movs	r3, #128	; 0x80
 8001e04:	005b      	lsls	r3, r3, #1
 8001e06:	4013      	ands	r3, r2
 8001e08:	d11a      	bne.n	8001e40 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e0a:	4ba1      	ldr	r3, [pc, #644]	; (8002090 <HAL_RCC_OscConfig+0x61c>)
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	4ba0      	ldr	r3, [pc, #640]	; (8002090 <HAL_RCC_OscConfig+0x61c>)
 8001e10:	2180      	movs	r1, #128	; 0x80
 8001e12:	0049      	lsls	r1, r1, #1
 8001e14:	430a      	orrs	r2, r1
 8001e16:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001e18:	f7ff fa56 	bl	80012c8 <HAL_GetTick>
 8001e1c:	0003      	movs	r3, r0
 8001e1e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e20:	e008      	b.n	8001e34 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e22:	f7ff fa51 	bl	80012c8 <HAL_GetTick>
 8001e26:	0002      	movs	r2, r0
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	2b02      	cmp	r3, #2
 8001e2e:	d901      	bls.n	8001e34 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001e30:	2303      	movs	r3, #3
 8001e32:	e127      	b.n	8002084 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e34:	4b96      	ldr	r3, [pc, #600]	; (8002090 <HAL_RCC_OscConfig+0x61c>)
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	2380      	movs	r3, #128	; 0x80
 8001e3a:	005b      	lsls	r3, r3, #1
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	d0f0      	beq.n	8001e22 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d106      	bne.n	8001e56 <HAL_RCC_OscConfig+0x3e2>
 8001e48:	4b90      	ldr	r3, [pc, #576]	; (800208c <HAL_RCC_OscConfig+0x618>)
 8001e4a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001e4c:	4b8f      	ldr	r3, [pc, #572]	; (800208c <HAL_RCC_OscConfig+0x618>)
 8001e4e:	2101      	movs	r1, #1
 8001e50:	430a      	orrs	r2, r1
 8001e52:	65da      	str	r2, [r3, #92]	; 0x5c
 8001e54:	e01c      	b.n	8001e90 <HAL_RCC_OscConfig+0x41c>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	2b05      	cmp	r3, #5
 8001e5c:	d10c      	bne.n	8001e78 <HAL_RCC_OscConfig+0x404>
 8001e5e:	4b8b      	ldr	r3, [pc, #556]	; (800208c <HAL_RCC_OscConfig+0x618>)
 8001e60:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001e62:	4b8a      	ldr	r3, [pc, #552]	; (800208c <HAL_RCC_OscConfig+0x618>)
 8001e64:	2104      	movs	r1, #4
 8001e66:	430a      	orrs	r2, r1
 8001e68:	65da      	str	r2, [r3, #92]	; 0x5c
 8001e6a:	4b88      	ldr	r3, [pc, #544]	; (800208c <HAL_RCC_OscConfig+0x618>)
 8001e6c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001e6e:	4b87      	ldr	r3, [pc, #540]	; (800208c <HAL_RCC_OscConfig+0x618>)
 8001e70:	2101      	movs	r1, #1
 8001e72:	430a      	orrs	r2, r1
 8001e74:	65da      	str	r2, [r3, #92]	; 0x5c
 8001e76:	e00b      	b.n	8001e90 <HAL_RCC_OscConfig+0x41c>
 8001e78:	4b84      	ldr	r3, [pc, #528]	; (800208c <HAL_RCC_OscConfig+0x618>)
 8001e7a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001e7c:	4b83      	ldr	r3, [pc, #524]	; (800208c <HAL_RCC_OscConfig+0x618>)
 8001e7e:	2101      	movs	r1, #1
 8001e80:	438a      	bics	r2, r1
 8001e82:	65da      	str	r2, [r3, #92]	; 0x5c
 8001e84:	4b81      	ldr	r3, [pc, #516]	; (800208c <HAL_RCC_OscConfig+0x618>)
 8001e86:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001e88:	4b80      	ldr	r3, [pc, #512]	; (800208c <HAL_RCC_OscConfig+0x618>)
 8001e8a:	2104      	movs	r1, #4
 8001e8c:	438a      	bics	r2, r1
 8001e8e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d014      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e98:	f7ff fa16 	bl	80012c8 <HAL_GetTick>
 8001e9c:	0003      	movs	r3, r0
 8001e9e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ea0:	e009      	b.n	8001eb6 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ea2:	f7ff fa11 	bl	80012c8 <HAL_GetTick>
 8001ea6:	0002      	movs	r2, r0
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	1ad3      	subs	r3, r2, r3
 8001eac:	4a79      	ldr	r2, [pc, #484]	; (8002094 <HAL_RCC_OscConfig+0x620>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d901      	bls.n	8001eb6 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e0e6      	b.n	8002084 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001eb6:	4b75      	ldr	r3, [pc, #468]	; (800208c <HAL_RCC_OscConfig+0x618>)
 8001eb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eba:	2202      	movs	r2, #2
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	d0f0      	beq.n	8001ea2 <HAL_RCC_OscConfig+0x42e>
 8001ec0:	e013      	b.n	8001eea <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ec2:	f7ff fa01 	bl	80012c8 <HAL_GetTick>
 8001ec6:	0003      	movs	r3, r0
 8001ec8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001eca:	e009      	b.n	8001ee0 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ecc:	f7ff f9fc 	bl	80012c8 <HAL_GetTick>
 8001ed0:	0002      	movs	r2, r0
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	4a6f      	ldr	r2, [pc, #444]	; (8002094 <HAL_RCC_OscConfig+0x620>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d901      	bls.n	8001ee0 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001edc:	2303      	movs	r3, #3
 8001ede:	e0d1      	b.n	8002084 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ee0:	4b6a      	ldr	r3, [pc, #424]	; (800208c <HAL_RCC_OscConfig+0x618>)
 8001ee2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ee4:	2202      	movs	r2, #2
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	d1f0      	bne.n	8001ecc <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001eea:	231f      	movs	r3, #31
 8001eec:	18fb      	adds	r3, r7, r3
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d105      	bne.n	8001f00 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001ef4:	4b65      	ldr	r3, [pc, #404]	; (800208c <HAL_RCC_OscConfig+0x618>)
 8001ef6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001ef8:	4b64      	ldr	r3, [pc, #400]	; (800208c <HAL_RCC_OscConfig+0x618>)
 8001efa:	4967      	ldr	r1, [pc, #412]	; (8002098 <HAL_RCC_OscConfig+0x624>)
 8001efc:	400a      	ands	r2, r1
 8001efe:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	69db      	ldr	r3, [r3, #28]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d100      	bne.n	8001f0a <HAL_RCC_OscConfig+0x496>
 8001f08:	e0bb      	b.n	8002082 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f0a:	4b60      	ldr	r3, [pc, #384]	; (800208c <HAL_RCC_OscConfig+0x618>)
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	2238      	movs	r2, #56	; 0x38
 8001f10:	4013      	ands	r3, r2
 8001f12:	2b10      	cmp	r3, #16
 8001f14:	d100      	bne.n	8001f18 <HAL_RCC_OscConfig+0x4a4>
 8001f16:	e07b      	b.n	8002010 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	69db      	ldr	r3, [r3, #28]
 8001f1c:	2b02      	cmp	r3, #2
 8001f1e:	d156      	bne.n	8001fce <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f20:	4b5a      	ldr	r3, [pc, #360]	; (800208c <HAL_RCC_OscConfig+0x618>)
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	4b59      	ldr	r3, [pc, #356]	; (800208c <HAL_RCC_OscConfig+0x618>)
 8001f26:	495d      	ldr	r1, [pc, #372]	; (800209c <HAL_RCC_OscConfig+0x628>)
 8001f28:	400a      	ands	r2, r1
 8001f2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f2c:	f7ff f9cc 	bl	80012c8 <HAL_GetTick>
 8001f30:	0003      	movs	r3, r0
 8001f32:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f34:	e008      	b.n	8001f48 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f36:	f7ff f9c7 	bl	80012c8 <HAL_GetTick>
 8001f3a:	0002      	movs	r2, r0
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	1ad3      	subs	r3, r2, r3
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d901      	bls.n	8001f48 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001f44:	2303      	movs	r3, #3
 8001f46:	e09d      	b.n	8002084 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f48:	4b50      	ldr	r3, [pc, #320]	; (800208c <HAL_RCC_OscConfig+0x618>)
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	2380      	movs	r3, #128	; 0x80
 8001f4e:	049b      	lsls	r3, r3, #18
 8001f50:	4013      	ands	r3, r2
 8001f52:	d1f0      	bne.n	8001f36 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f54:	4b4d      	ldr	r3, [pc, #308]	; (800208c <HAL_RCC_OscConfig+0x618>)
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	4a51      	ldr	r2, [pc, #324]	; (80020a0 <HAL_RCC_OscConfig+0x62c>)
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	0019      	movs	r1, r3
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6a1a      	ldr	r2, [r3, #32]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f66:	431a      	orrs	r2, r3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f6c:	021b      	lsls	r3, r3, #8
 8001f6e:	431a      	orrs	r2, r3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f74:	431a      	orrs	r2, r3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7a:	431a      	orrs	r2, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f80:	431a      	orrs	r2, r3
 8001f82:	4b42      	ldr	r3, [pc, #264]	; (800208c <HAL_RCC_OscConfig+0x618>)
 8001f84:	430a      	orrs	r2, r1
 8001f86:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f88:	4b40      	ldr	r3, [pc, #256]	; (800208c <HAL_RCC_OscConfig+0x618>)
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	4b3f      	ldr	r3, [pc, #252]	; (800208c <HAL_RCC_OscConfig+0x618>)
 8001f8e:	2180      	movs	r1, #128	; 0x80
 8001f90:	0449      	lsls	r1, r1, #17
 8001f92:	430a      	orrs	r2, r1
 8001f94:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001f96:	4b3d      	ldr	r3, [pc, #244]	; (800208c <HAL_RCC_OscConfig+0x618>)
 8001f98:	68da      	ldr	r2, [r3, #12]
 8001f9a:	4b3c      	ldr	r3, [pc, #240]	; (800208c <HAL_RCC_OscConfig+0x618>)
 8001f9c:	2180      	movs	r1, #128	; 0x80
 8001f9e:	0549      	lsls	r1, r1, #21
 8001fa0:	430a      	orrs	r2, r1
 8001fa2:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fa4:	f7ff f990 	bl	80012c8 <HAL_GetTick>
 8001fa8:	0003      	movs	r3, r0
 8001faa:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fac:	e008      	b.n	8001fc0 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fae:	f7ff f98b 	bl	80012c8 <HAL_GetTick>
 8001fb2:	0002      	movs	r2, r0
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	2b02      	cmp	r3, #2
 8001fba:	d901      	bls.n	8001fc0 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	e061      	b.n	8002084 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fc0:	4b32      	ldr	r3, [pc, #200]	; (800208c <HAL_RCC_OscConfig+0x618>)
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	2380      	movs	r3, #128	; 0x80
 8001fc6:	049b      	lsls	r3, r3, #18
 8001fc8:	4013      	ands	r3, r2
 8001fca:	d0f0      	beq.n	8001fae <HAL_RCC_OscConfig+0x53a>
 8001fcc:	e059      	b.n	8002082 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fce:	4b2f      	ldr	r3, [pc, #188]	; (800208c <HAL_RCC_OscConfig+0x618>)
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	4b2e      	ldr	r3, [pc, #184]	; (800208c <HAL_RCC_OscConfig+0x618>)
 8001fd4:	4931      	ldr	r1, [pc, #196]	; (800209c <HAL_RCC_OscConfig+0x628>)
 8001fd6:	400a      	ands	r2, r1
 8001fd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fda:	f7ff f975 	bl	80012c8 <HAL_GetTick>
 8001fde:	0003      	movs	r3, r0
 8001fe0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fe2:	e008      	b.n	8001ff6 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fe4:	f7ff f970 	bl	80012c8 <HAL_GetTick>
 8001fe8:	0002      	movs	r2, r0
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	2b02      	cmp	r3, #2
 8001ff0:	d901      	bls.n	8001ff6 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	e046      	b.n	8002084 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ff6:	4b25      	ldr	r3, [pc, #148]	; (800208c <HAL_RCC_OscConfig+0x618>)
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	2380      	movs	r3, #128	; 0x80
 8001ffc:	049b      	lsls	r3, r3, #18
 8001ffe:	4013      	ands	r3, r2
 8002000:	d1f0      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8002002:	4b22      	ldr	r3, [pc, #136]	; (800208c <HAL_RCC_OscConfig+0x618>)
 8002004:	68da      	ldr	r2, [r3, #12]
 8002006:	4b21      	ldr	r3, [pc, #132]	; (800208c <HAL_RCC_OscConfig+0x618>)
 8002008:	4926      	ldr	r1, [pc, #152]	; (80020a4 <HAL_RCC_OscConfig+0x630>)
 800200a:	400a      	ands	r2, r1
 800200c:	60da      	str	r2, [r3, #12]
 800200e:	e038      	b.n	8002082 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	69db      	ldr	r3, [r3, #28]
 8002014:	2b01      	cmp	r3, #1
 8002016:	d101      	bne.n	800201c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	e033      	b.n	8002084 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800201c:	4b1b      	ldr	r3, [pc, #108]	; (800208c <HAL_RCC_OscConfig+0x618>)
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	2203      	movs	r2, #3
 8002026:	401a      	ands	r2, r3
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6a1b      	ldr	r3, [r3, #32]
 800202c:	429a      	cmp	r2, r3
 800202e:	d126      	bne.n	800207e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	2270      	movs	r2, #112	; 0x70
 8002034:	401a      	ands	r2, r3
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800203a:	429a      	cmp	r2, r3
 800203c:	d11f      	bne.n	800207e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800203e:	697a      	ldr	r2, [r7, #20]
 8002040:	23fe      	movs	r3, #254	; 0xfe
 8002042:	01db      	lsls	r3, r3, #7
 8002044:	401a      	ands	r2, r3
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800204a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800204c:	429a      	cmp	r2, r3
 800204e:	d116      	bne.n	800207e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002050:	697a      	ldr	r2, [r7, #20]
 8002052:	23f8      	movs	r3, #248	; 0xf8
 8002054:	039b      	lsls	r3, r3, #14
 8002056:	401a      	ands	r2, r3
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800205c:	429a      	cmp	r2, r3
 800205e:	d10e      	bne.n	800207e <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002060:	697a      	ldr	r2, [r7, #20]
 8002062:	23e0      	movs	r3, #224	; 0xe0
 8002064:	051b      	lsls	r3, r3, #20
 8002066:	401a      	ands	r2, r3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800206c:	429a      	cmp	r2, r3
 800206e:	d106      	bne.n	800207e <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	0f5b      	lsrs	r3, r3, #29
 8002074:	075a      	lsls	r2, r3, #29
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800207a:	429a      	cmp	r2, r3
 800207c:	d001      	beq.n	8002082 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e000      	b.n	8002084 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8002082:	2300      	movs	r3, #0
}
 8002084:	0018      	movs	r0, r3
 8002086:	46bd      	mov	sp, r7
 8002088:	b008      	add	sp, #32
 800208a:	bd80      	pop	{r7, pc}
 800208c:	40021000 	.word	0x40021000
 8002090:	40007000 	.word	0x40007000
 8002094:	00001388 	.word	0x00001388
 8002098:	efffffff 	.word	0xefffffff
 800209c:	feffffff 	.word	0xfeffffff
 80020a0:	11c1808c 	.word	0x11c1808c
 80020a4:	eefefffc 	.word	0xeefefffc

080020a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b084      	sub	sp, #16
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d101      	bne.n	80020bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e0e9      	b.n	8002290 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020bc:	4b76      	ldr	r3, [pc, #472]	; (8002298 <HAL_RCC_ClockConfig+0x1f0>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	2207      	movs	r2, #7
 80020c2:	4013      	ands	r3, r2
 80020c4:	683a      	ldr	r2, [r7, #0]
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d91e      	bls.n	8002108 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ca:	4b73      	ldr	r3, [pc, #460]	; (8002298 <HAL_RCC_ClockConfig+0x1f0>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	2207      	movs	r2, #7
 80020d0:	4393      	bics	r3, r2
 80020d2:	0019      	movs	r1, r3
 80020d4:	4b70      	ldr	r3, [pc, #448]	; (8002298 <HAL_RCC_ClockConfig+0x1f0>)
 80020d6:	683a      	ldr	r2, [r7, #0]
 80020d8:	430a      	orrs	r2, r1
 80020da:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80020dc:	f7ff f8f4 	bl	80012c8 <HAL_GetTick>
 80020e0:	0003      	movs	r3, r0
 80020e2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80020e4:	e009      	b.n	80020fa <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020e6:	f7ff f8ef 	bl	80012c8 <HAL_GetTick>
 80020ea:	0002      	movs	r2, r0
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	1ad3      	subs	r3, r2, r3
 80020f0:	4a6a      	ldr	r2, [pc, #424]	; (800229c <HAL_RCC_ClockConfig+0x1f4>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d901      	bls.n	80020fa <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80020f6:	2303      	movs	r3, #3
 80020f8:	e0ca      	b.n	8002290 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80020fa:	4b67      	ldr	r3, [pc, #412]	; (8002298 <HAL_RCC_ClockConfig+0x1f0>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	2207      	movs	r2, #7
 8002100:	4013      	ands	r3, r2
 8002102:	683a      	ldr	r2, [r7, #0]
 8002104:	429a      	cmp	r2, r3
 8002106:	d1ee      	bne.n	80020e6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	2202      	movs	r2, #2
 800210e:	4013      	ands	r3, r2
 8002110:	d015      	beq.n	800213e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	2204      	movs	r2, #4
 8002118:	4013      	ands	r3, r2
 800211a:	d006      	beq.n	800212a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800211c:	4b60      	ldr	r3, [pc, #384]	; (80022a0 <HAL_RCC_ClockConfig+0x1f8>)
 800211e:	689a      	ldr	r2, [r3, #8]
 8002120:	4b5f      	ldr	r3, [pc, #380]	; (80022a0 <HAL_RCC_ClockConfig+0x1f8>)
 8002122:	21e0      	movs	r1, #224	; 0xe0
 8002124:	01c9      	lsls	r1, r1, #7
 8002126:	430a      	orrs	r2, r1
 8002128:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800212a:	4b5d      	ldr	r3, [pc, #372]	; (80022a0 <HAL_RCC_ClockConfig+0x1f8>)
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	4a5d      	ldr	r2, [pc, #372]	; (80022a4 <HAL_RCC_ClockConfig+0x1fc>)
 8002130:	4013      	ands	r3, r2
 8002132:	0019      	movs	r1, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	689a      	ldr	r2, [r3, #8]
 8002138:	4b59      	ldr	r3, [pc, #356]	; (80022a0 <HAL_RCC_ClockConfig+0x1f8>)
 800213a:	430a      	orrs	r2, r1
 800213c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	2201      	movs	r2, #1
 8002144:	4013      	ands	r3, r2
 8002146:	d057      	beq.n	80021f8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	2b01      	cmp	r3, #1
 800214e:	d107      	bne.n	8002160 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002150:	4b53      	ldr	r3, [pc, #332]	; (80022a0 <HAL_RCC_ClockConfig+0x1f8>)
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	2380      	movs	r3, #128	; 0x80
 8002156:	029b      	lsls	r3, r3, #10
 8002158:	4013      	ands	r3, r2
 800215a:	d12b      	bne.n	80021b4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	e097      	b.n	8002290 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	2b02      	cmp	r3, #2
 8002166:	d107      	bne.n	8002178 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002168:	4b4d      	ldr	r3, [pc, #308]	; (80022a0 <HAL_RCC_ClockConfig+0x1f8>)
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	2380      	movs	r3, #128	; 0x80
 800216e:	049b      	lsls	r3, r3, #18
 8002170:	4013      	ands	r3, r2
 8002172:	d11f      	bne.n	80021b4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e08b      	b.n	8002290 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d107      	bne.n	8002190 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002180:	4b47      	ldr	r3, [pc, #284]	; (80022a0 <HAL_RCC_ClockConfig+0x1f8>)
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	2380      	movs	r3, #128	; 0x80
 8002186:	00db      	lsls	r3, r3, #3
 8002188:	4013      	ands	r3, r2
 800218a:	d113      	bne.n	80021b4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e07f      	b.n	8002290 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	2b03      	cmp	r3, #3
 8002196:	d106      	bne.n	80021a6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002198:	4b41      	ldr	r3, [pc, #260]	; (80022a0 <HAL_RCC_ClockConfig+0x1f8>)
 800219a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800219c:	2202      	movs	r2, #2
 800219e:	4013      	ands	r3, r2
 80021a0:	d108      	bne.n	80021b4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e074      	b.n	8002290 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021a6:	4b3e      	ldr	r3, [pc, #248]	; (80022a0 <HAL_RCC_ClockConfig+0x1f8>)
 80021a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021aa:	2202      	movs	r2, #2
 80021ac:	4013      	ands	r3, r2
 80021ae:	d101      	bne.n	80021b4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e06d      	b.n	8002290 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80021b4:	4b3a      	ldr	r3, [pc, #232]	; (80022a0 <HAL_RCC_ClockConfig+0x1f8>)
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	2207      	movs	r2, #7
 80021ba:	4393      	bics	r3, r2
 80021bc:	0019      	movs	r1, r3
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	685a      	ldr	r2, [r3, #4]
 80021c2:	4b37      	ldr	r3, [pc, #220]	; (80022a0 <HAL_RCC_ClockConfig+0x1f8>)
 80021c4:	430a      	orrs	r2, r1
 80021c6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021c8:	f7ff f87e 	bl	80012c8 <HAL_GetTick>
 80021cc:	0003      	movs	r3, r0
 80021ce:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021d0:	e009      	b.n	80021e6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021d2:	f7ff f879 	bl	80012c8 <HAL_GetTick>
 80021d6:	0002      	movs	r2, r0
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	4a2f      	ldr	r2, [pc, #188]	; (800229c <HAL_RCC_ClockConfig+0x1f4>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d901      	bls.n	80021e6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	e054      	b.n	8002290 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021e6:	4b2e      	ldr	r3, [pc, #184]	; (80022a0 <HAL_RCC_ClockConfig+0x1f8>)
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	2238      	movs	r2, #56	; 0x38
 80021ec:	401a      	ands	r2, r3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	00db      	lsls	r3, r3, #3
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d1ec      	bne.n	80021d2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021f8:	4b27      	ldr	r3, [pc, #156]	; (8002298 <HAL_RCC_ClockConfig+0x1f0>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	2207      	movs	r2, #7
 80021fe:	4013      	ands	r3, r2
 8002200:	683a      	ldr	r2, [r7, #0]
 8002202:	429a      	cmp	r2, r3
 8002204:	d21e      	bcs.n	8002244 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002206:	4b24      	ldr	r3, [pc, #144]	; (8002298 <HAL_RCC_ClockConfig+0x1f0>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	2207      	movs	r2, #7
 800220c:	4393      	bics	r3, r2
 800220e:	0019      	movs	r1, r3
 8002210:	4b21      	ldr	r3, [pc, #132]	; (8002298 <HAL_RCC_ClockConfig+0x1f0>)
 8002212:	683a      	ldr	r2, [r7, #0]
 8002214:	430a      	orrs	r2, r1
 8002216:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002218:	f7ff f856 	bl	80012c8 <HAL_GetTick>
 800221c:	0003      	movs	r3, r0
 800221e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002220:	e009      	b.n	8002236 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002222:	f7ff f851 	bl	80012c8 <HAL_GetTick>
 8002226:	0002      	movs	r2, r0
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	4a1b      	ldr	r2, [pc, #108]	; (800229c <HAL_RCC_ClockConfig+0x1f4>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d901      	bls.n	8002236 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002232:	2303      	movs	r3, #3
 8002234:	e02c      	b.n	8002290 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002236:	4b18      	ldr	r3, [pc, #96]	; (8002298 <HAL_RCC_ClockConfig+0x1f0>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	2207      	movs	r2, #7
 800223c:	4013      	ands	r3, r2
 800223e:	683a      	ldr	r2, [r7, #0]
 8002240:	429a      	cmp	r2, r3
 8002242:	d1ee      	bne.n	8002222 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	2204      	movs	r2, #4
 800224a:	4013      	ands	r3, r2
 800224c:	d009      	beq.n	8002262 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800224e:	4b14      	ldr	r3, [pc, #80]	; (80022a0 <HAL_RCC_ClockConfig+0x1f8>)
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	4a15      	ldr	r2, [pc, #84]	; (80022a8 <HAL_RCC_ClockConfig+0x200>)
 8002254:	4013      	ands	r3, r2
 8002256:	0019      	movs	r1, r3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	68da      	ldr	r2, [r3, #12]
 800225c:	4b10      	ldr	r3, [pc, #64]	; (80022a0 <HAL_RCC_ClockConfig+0x1f8>)
 800225e:	430a      	orrs	r2, r1
 8002260:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002262:	f000 f829 	bl	80022b8 <HAL_RCC_GetSysClockFreq>
 8002266:	0001      	movs	r1, r0
 8002268:	4b0d      	ldr	r3, [pc, #52]	; (80022a0 <HAL_RCC_ClockConfig+0x1f8>)
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	0a1b      	lsrs	r3, r3, #8
 800226e:	220f      	movs	r2, #15
 8002270:	401a      	ands	r2, r3
 8002272:	4b0e      	ldr	r3, [pc, #56]	; (80022ac <HAL_RCC_ClockConfig+0x204>)
 8002274:	0092      	lsls	r2, r2, #2
 8002276:	58d3      	ldr	r3, [r2, r3]
 8002278:	221f      	movs	r2, #31
 800227a:	4013      	ands	r3, r2
 800227c:	000a      	movs	r2, r1
 800227e:	40da      	lsrs	r2, r3
 8002280:	4b0b      	ldr	r3, [pc, #44]	; (80022b0 <HAL_RCC_ClockConfig+0x208>)
 8002282:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002284:	4b0b      	ldr	r3, [pc, #44]	; (80022b4 <HAL_RCC_ClockConfig+0x20c>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	0018      	movs	r0, r3
 800228a:	f7fe ffc1 	bl	8001210 <HAL_InitTick>
 800228e:	0003      	movs	r3, r0
}
 8002290:	0018      	movs	r0, r3
 8002292:	46bd      	mov	sp, r7
 8002294:	b004      	add	sp, #16
 8002296:	bd80      	pop	{r7, pc}
 8002298:	40022000 	.word	0x40022000
 800229c:	00001388 	.word	0x00001388
 80022a0:	40021000 	.word	0x40021000
 80022a4:	fffff0ff 	.word	0xfffff0ff
 80022a8:	ffff8fff 	.word	0xffff8fff
 80022ac:	080053fc 	.word	0x080053fc
 80022b0:	20000000 	.word	0x20000000
 80022b4:	20000004 	.word	0x20000004

080022b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b086      	sub	sp, #24
 80022bc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022be:	4b3c      	ldr	r3, [pc, #240]	; (80023b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	2238      	movs	r2, #56	; 0x38
 80022c4:	4013      	ands	r3, r2
 80022c6:	d10f      	bne.n	80022e8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80022c8:	4b39      	ldr	r3, [pc, #228]	; (80023b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	0adb      	lsrs	r3, r3, #11
 80022ce:	2207      	movs	r2, #7
 80022d0:	4013      	ands	r3, r2
 80022d2:	2201      	movs	r2, #1
 80022d4:	409a      	lsls	r2, r3
 80022d6:	0013      	movs	r3, r2
 80022d8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80022da:	6839      	ldr	r1, [r7, #0]
 80022dc:	4835      	ldr	r0, [pc, #212]	; (80023b4 <HAL_RCC_GetSysClockFreq+0xfc>)
 80022de:	f7fd ff23 	bl	8000128 <__udivsi3>
 80022e2:	0003      	movs	r3, r0
 80022e4:	613b      	str	r3, [r7, #16]
 80022e6:	e05d      	b.n	80023a4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80022e8:	4b31      	ldr	r3, [pc, #196]	; (80023b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	2238      	movs	r2, #56	; 0x38
 80022ee:	4013      	ands	r3, r2
 80022f0:	2b08      	cmp	r3, #8
 80022f2:	d102      	bne.n	80022fa <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80022f4:	4b30      	ldr	r3, [pc, #192]	; (80023b8 <HAL_RCC_GetSysClockFreq+0x100>)
 80022f6:	613b      	str	r3, [r7, #16]
 80022f8:	e054      	b.n	80023a4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022fa:	4b2d      	ldr	r3, [pc, #180]	; (80023b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	2238      	movs	r2, #56	; 0x38
 8002300:	4013      	ands	r3, r2
 8002302:	2b10      	cmp	r3, #16
 8002304:	d138      	bne.n	8002378 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002306:	4b2a      	ldr	r3, [pc, #168]	; (80023b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002308:	68db      	ldr	r3, [r3, #12]
 800230a:	2203      	movs	r2, #3
 800230c:	4013      	ands	r3, r2
 800230e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002310:	4b27      	ldr	r3, [pc, #156]	; (80023b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	091b      	lsrs	r3, r3, #4
 8002316:	2207      	movs	r2, #7
 8002318:	4013      	ands	r3, r2
 800231a:	3301      	adds	r3, #1
 800231c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2b03      	cmp	r3, #3
 8002322:	d10d      	bne.n	8002340 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002324:	68b9      	ldr	r1, [r7, #8]
 8002326:	4824      	ldr	r0, [pc, #144]	; (80023b8 <HAL_RCC_GetSysClockFreq+0x100>)
 8002328:	f7fd fefe 	bl	8000128 <__udivsi3>
 800232c:	0003      	movs	r3, r0
 800232e:	0019      	movs	r1, r3
 8002330:	4b1f      	ldr	r3, [pc, #124]	; (80023b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	0a1b      	lsrs	r3, r3, #8
 8002336:	227f      	movs	r2, #127	; 0x7f
 8002338:	4013      	ands	r3, r2
 800233a:	434b      	muls	r3, r1
 800233c:	617b      	str	r3, [r7, #20]
        break;
 800233e:	e00d      	b.n	800235c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002340:	68b9      	ldr	r1, [r7, #8]
 8002342:	481c      	ldr	r0, [pc, #112]	; (80023b4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002344:	f7fd fef0 	bl	8000128 <__udivsi3>
 8002348:	0003      	movs	r3, r0
 800234a:	0019      	movs	r1, r3
 800234c:	4b18      	ldr	r3, [pc, #96]	; (80023b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	0a1b      	lsrs	r3, r3, #8
 8002352:	227f      	movs	r2, #127	; 0x7f
 8002354:	4013      	ands	r3, r2
 8002356:	434b      	muls	r3, r1
 8002358:	617b      	str	r3, [r7, #20]
        break;
 800235a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800235c:	4b14      	ldr	r3, [pc, #80]	; (80023b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	0f5b      	lsrs	r3, r3, #29
 8002362:	2207      	movs	r2, #7
 8002364:	4013      	ands	r3, r2
 8002366:	3301      	adds	r3, #1
 8002368:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800236a:	6879      	ldr	r1, [r7, #4]
 800236c:	6978      	ldr	r0, [r7, #20]
 800236e:	f7fd fedb 	bl	8000128 <__udivsi3>
 8002372:	0003      	movs	r3, r0
 8002374:	613b      	str	r3, [r7, #16]
 8002376:	e015      	b.n	80023a4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002378:	4b0d      	ldr	r3, [pc, #52]	; (80023b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	2238      	movs	r2, #56	; 0x38
 800237e:	4013      	ands	r3, r2
 8002380:	2b20      	cmp	r3, #32
 8002382:	d103      	bne.n	800238c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002384:	2380      	movs	r3, #128	; 0x80
 8002386:	021b      	lsls	r3, r3, #8
 8002388:	613b      	str	r3, [r7, #16]
 800238a:	e00b      	b.n	80023a4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800238c:	4b08      	ldr	r3, [pc, #32]	; (80023b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	2238      	movs	r2, #56	; 0x38
 8002392:	4013      	ands	r3, r2
 8002394:	2b18      	cmp	r3, #24
 8002396:	d103      	bne.n	80023a0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002398:	23fa      	movs	r3, #250	; 0xfa
 800239a:	01db      	lsls	r3, r3, #7
 800239c:	613b      	str	r3, [r7, #16]
 800239e:	e001      	b.n	80023a4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80023a0:	2300      	movs	r3, #0
 80023a2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80023a4:	693b      	ldr	r3, [r7, #16]
}
 80023a6:	0018      	movs	r0, r3
 80023a8:	46bd      	mov	sp, r7
 80023aa:	b006      	add	sp, #24
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	46c0      	nop			; (mov r8, r8)
 80023b0:	40021000 	.word	0x40021000
 80023b4:	00f42400 	.word	0x00f42400
 80023b8:	007a1200 	.word	0x007a1200

080023bc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023c0:	4b02      	ldr	r3, [pc, #8]	; (80023cc <HAL_RCC_GetHCLKFreq+0x10>)
 80023c2:	681b      	ldr	r3, [r3, #0]
}
 80023c4:	0018      	movs	r0, r3
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	46c0      	nop			; (mov r8, r8)
 80023cc:	20000000 	.word	0x20000000

080023d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023d0:	b5b0      	push	{r4, r5, r7, lr}
 80023d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80023d4:	f7ff fff2 	bl	80023bc <HAL_RCC_GetHCLKFreq>
 80023d8:	0004      	movs	r4, r0
 80023da:	f7ff fb3f 	bl	8001a5c <LL_RCC_GetAPB1Prescaler>
 80023de:	0003      	movs	r3, r0
 80023e0:	0b1a      	lsrs	r2, r3, #12
 80023e2:	4b05      	ldr	r3, [pc, #20]	; (80023f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80023e4:	0092      	lsls	r2, r2, #2
 80023e6:	58d3      	ldr	r3, [r2, r3]
 80023e8:	221f      	movs	r2, #31
 80023ea:	4013      	ands	r3, r2
 80023ec:	40dc      	lsrs	r4, r3
 80023ee:	0023      	movs	r3, r4
}
 80023f0:	0018      	movs	r0, r3
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bdb0      	pop	{r4, r5, r7, pc}
 80023f6:	46c0      	nop			; (mov r8, r8)
 80023f8:	0800543c 	.word	0x0800543c

080023fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b086      	sub	sp, #24
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002404:	2313      	movs	r3, #19
 8002406:	18fb      	adds	r3, r7, r3
 8002408:	2200      	movs	r2, #0
 800240a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800240c:	2312      	movs	r3, #18
 800240e:	18fb      	adds	r3, r7, r3
 8002410:	2200      	movs	r2, #0
 8002412:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	2380      	movs	r3, #128	; 0x80
 800241a:	029b      	lsls	r3, r3, #10
 800241c:	4013      	ands	r3, r2
 800241e:	d100      	bne.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002420:	e0a3      	b.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002422:	2011      	movs	r0, #17
 8002424:	183b      	adds	r3, r7, r0
 8002426:	2200      	movs	r2, #0
 8002428:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800242a:	4bc3      	ldr	r3, [pc, #780]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800242c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800242e:	2380      	movs	r3, #128	; 0x80
 8002430:	055b      	lsls	r3, r3, #21
 8002432:	4013      	ands	r3, r2
 8002434:	d110      	bne.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002436:	4bc0      	ldr	r3, [pc, #768]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002438:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800243a:	4bbf      	ldr	r3, [pc, #764]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800243c:	2180      	movs	r1, #128	; 0x80
 800243e:	0549      	lsls	r1, r1, #21
 8002440:	430a      	orrs	r2, r1
 8002442:	63da      	str	r2, [r3, #60]	; 0x3c
 8002444:	4bbc      	ldr	r3, [pc, #752]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002446:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002448:	2380      	movs	r3, #128	; 0x80
 800244a:	055b      	lsls	r3, r3, #21
 800244c:	4013      	ands	r3, r2
 800244e:	60bb      	str	r3, [r7, #8]
 8002450:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002452:	183b      	adds	r3, r7, r0
 8002454:	2201      	movs	r2, #1
 8002456:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002458:	4bb8      	ldr	r3, [pc, #736]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	4bb7      	ldr	r3, [pc, #732]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800245e:	2180      	movs	r1, #128	; 0x80
 8002460:	0049      	lsls	r1, r1, #1
 8002462:	430a      	orrs	r2, r1
 8002464:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002466:	f7fe ff2f 	bl	80012c8 <HAL_GetTick>
 800246a:	0003      	movs	r3, r0
 800246c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800246e:	e00b      	b.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002470:	f7fe ff2a 	bl	80012c8 <HAL_GetTick>
 8002474:	0002      	movs	r2, r0
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	2b02      	cmp	r3, #2
 800247c:	d904      	bls.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800247e:	2313      	movs	r3, #19
 8002480:	18fb      	adds	r3, r7, r3
 8002482:	2203      	movs	r2, #3
 8002484:	701a      	strb	r2, [r3, #0]
        break;
 8002486:	e005      	b.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002488:	4bac      	ldr	r3, [pc, #688]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	2380      	movs	r3, #128	; 0x80
 800248e:	005b      	lsls	r3, r3, #1
 8002490:	4013      	ands	r3, r2
 8002492:	d0ed      	beq.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002494:	2313      	movs	r3, #19
 8002496:	18fb      	adds	r3, r7, r3
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d154      	bne.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800249e:	4ba6      	ldr	r3, [pc, #664]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024a0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80024a2:	23c0      	movs	r3, #192	; 0xc0
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	4013      	ands	r3, r2
 80024a8:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d019      	beq.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b4:	697a      	ldr	r2, [r7, #20]
 80024b6:	429a      	cmp	r2, r3
 80024b8:	d014      	beq.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80024ba:	4b9f      	ldr	r3, [pc, #636]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024be:	4aa0      	ldr	r2, [pc, #640]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80024c0:	4013      	ands	r3, r2
 80024c2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80024c4:	4b9c      	ldr	r3, [pc, #624]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024c6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80024c8:	4b9b      	ldr	r3, [pc, #620]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024ca:	2180      	movs	r1, #128	; 0x80
 80024cc:	0249      	lsls	r1, r1, #9
 80024ce:	430a      	orrs	r2, r1
 80024d0:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80024d2:	4b99      	ldr	r3, [pc, #612]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024d4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80024d6:	4b98      	ldr	r3, [pc, #608]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024d8:	499a      	ldr	r1, [pc, #616]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 80024da:	400a      	ands	r2, r1
 80024dc:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80024de:	4b96      	ldr	r3, [pc, #600]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024e0:	697a      	ldr	r2, [r7, #20]
 80024e2:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	2201      	movs	r2, #1
 80024e8:	4013      	ands	r3, r2
 80024ea:	d016      	beq.n	800251a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ec:	f7fe feec 	bl	80012c8 <HAL_GetTick>
 80024f0:	0003      	movs	r3, r0
 80024f2:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024f4:	e00c      	b.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024f6:	f7fe fee7 	bl	80012c8 <HAL_GetTick>
 80024fa:	0002      	movs	r2, r0
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	4a91      	ldr	r2, [pc, #580]	; (8002748 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d904      	bls.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002506:	2313      	movs	r3, #19
 8002508:	18fb      	adds	r3, r7, r3
 800250a:	2203      	movs	r2, #3
 800250c:	701a      	strb	r2, [r3, #0]
            break;
 800250e:	e004      	b.n	800251a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002510:	4b89      	ldr	r3, [pc, #548]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002512:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002514:	2202      	movs	r2, #2
 8002516:	4013      	ands	r3, r2
 8002518:	d0ed      	beq.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800251a:	2313      	movs	r3, #19
 800251c:	18fb      	adds	r3, r7, r3
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d10a      	bne.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002524:	4b84      	ldr	r3, [pc, #528]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002526:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002528:	4a85      	ldr	r2, [pc, #532]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800252a:	4013      	ands	r3, r2
 800252c:	0019      	movs	r1, r3
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002532:	4b81      	ldr	r3, [pc, #516]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002534:	430a      	orrs	r2, r1
 8002536:	65da      	str	r2, [r3, #92]	; 0x5c
 8002538:	e00c      	b.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800253a:	2312      	movs	r3, #18
 800253c:	18fb      	adds	r3, r7, r3
 800253e:	2213      	movs	r2, #19
 8002540:	18ba      	adds	r2, r7, r2
 8002542:	7812      	ldrb	r2, [r2, #0]
 8002544:	701a      	strb	r2, [r3, #0]
 8002546:	e005      	b.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002548:	2312      	movs	r3, #18
 800254a:	18fb      	adds	r3, r7, r3
 800254c:	2213      	movs	r2, #19
 800254e:	18ba      	adds	r2, r7, r2
 8002550:	7812      	ldrb	r2, [r2, #0]
 8002552:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002554:	2311      	movs	r3, #17
 8002556:	18fb      	adds	r3, r7, r3
 8002558:	781b      	ldrb	r3, [r3, #0]
 800255a:	2b01      	cmp	r3, #1
 800255c:	d105      	bne.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800255e:	4b76      	ldr	r3, [pc, #472]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002560:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002562:	4b75      	ldr	r3, [pc, #468]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002564:	4979      	ldr	r1, [pc, #484]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8002566:	400a      	ands	r2, r1
 8002568:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	2201      	movs	r2, #1
 8002570:	4013      	ands	r3, r2
 8002572:	d009      	beq.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002574:	4b70      	ldr	r3, [pc, #448]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002576:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002578:	2203      	movs	r2, #3
 800257a:	4393      	bics	r3, r2
 800257c:	0019      	movs	r1, r3
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	685a      	ldr	r2, [r3, #4]
 8002582:	4b6d      	ldr	r3, [pc, #436]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002584:	430a      	orrs	r2, r1
 8002586:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	2202      	movs	r2, #2
 800258e:	4013      	ands	r3, r2
 8002590:	d009      	beq.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002592:	4b69      	ldr	r3, [pc, #420]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002596:	220c      	movs	r2, #12
 8002598:	4393      	bics	r3, r2
 800259a:	0019      	movs	r1, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	689a      	ldr	r2, [r3, #8]
 80025a0:	4b65      	ldr	r3, [pc, #404]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80025a2:	430a      	orrs	r2, r1
 80025a4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	2210      	movs	r2, #16
 80025ac:	4013      	ands	r3, r2
 80025ae:	d009      	beq.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80025b0:	4b61      	ldr	r3, [pc, #388]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80025b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025b4:	4a66      	ldr	r2, [pc, #408]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 80025b6:	4013      	ands	r3, r2
 80025b8:	0019      	movs	r1, r3
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	68da      	ldr	r2, [r3, #12]
 80025be:	4b5e      	ldr	r3, [pc, #376]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80025c0:	430a      	orrs	r2, r1
 80025c2:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	2380      	movs	r3, #128	; 0x80
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	4013      	ands	r3, r2
 80025ce:	d009      	beq.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80025d0:	4b59      	ldr	r3, [pc, #356]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80025d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025d4:	4a5f      	ldr	r2, [pc, #380]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80025d6:	4013      	ands	r3, r2
 80025d8:	0019      	movs	r1, r3
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	699a      	ldr	r2, [r3, #24]
 80025de:	4b56      	ldr	r3, [pc, #344]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80025e0:	430a      	orrs	r2, r1
 80025e2:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	2380      	movs	r3, #128	; 0x80
 80025ea:	00db      	lsls	r3, r3, #3
 80025ec:	4013      	ands	r3, r2
 80025ee:	d009      	beq.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80025f0:	4b51      	ldr	r3, [pc, #324]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80025f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025f4:	4a58      	ldr	r2, [pc, #352]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80025f6:	4013      	ands	r3, r2
 80025f8:	0019      	movs	r1, r3
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	69da      	ldr	r2, [r3, #28]
 80025fe:	4b4e      	ldr	r3, [pc, #312]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002600:	430a      	orrs	r2, r1
 8002602:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	2220      	movs	r2, #32
 800260a:	4013      	ands	r3, r2
 800260c:	d009      	beq.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800260e:	4b4a      	ldr	r3, [pc, #296]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002610:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002612:	4a52      	ldr	r2, [pc, #328]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8002614:	4013      	ands	r3, r2
 8002616:	0019      	movs	r1, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	691a      	ldr	r2, [r3, #16]
 800261c:	4b46      	ldr	r3, [pc, #280]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800261e:	430a      	orrs	r2, r1
 8002620:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	2380      	movs	r3, #128	; 0x80
 8002628:	01db      	lsls	r3, r3, #7
 800262a:	4013      	ands	r3, r2
 800262c:	d015      	beq.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800262e:	4b42      	ldr	r3, [pc, #264]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002630:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	0899      	lsrs	r1, r3, #2
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6a1a      	ldr	r2, [r3, #32]
 800263a:	4b3f      	ldr	r3, [pc, #252]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800263c:	430a      	orrs	r2, r1
 800263e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6a1a      	ldr	r2, [r3, #32]
 8002644:	2380      	movs	r3, #128	; 0x80
 8002646:	05db      	lsls	r3, r3, #23
 8002648:	429a      	cmp	r2, r3
 800264a:	d106      	bne.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800264c:	4b3a      	ldr	r3, [pc, #232]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800264e:	68da      	ldr	r2, [r3, #12]
 8002650:	4b39      	ldr	r3, [pc, #228]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002652:	2180      	movs	r1, #128	; 0x80
 8002654:	0249      	lsls	r1, r1, #9
 8002656:	430a      	orrs	r2, r1
 8002658:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	2380      	movs	r3, #128	; 0x80
 8002660:	031b      	lsls	r3, r3, #12
 8002662:	4013      	ands	r3, r2
 8002664:	d009      	beq.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002666:	4b34      	ldr	r3, [pc, #208]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002668:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800266a:	2240      	movs	r2, #64	; 0x40
 800266c:	4393      	bics	r3, r2
 800266e:	0019      	movs	r1, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002674:	4b30      	ldr	r3, [pc, #192]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002676:	430a      	orrs	r2, r1
 8002678:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	2380      	movs	r3, #128	; 0x80
 8002680:	039b      	lsls	r3, r3, #14
 8002682:	4013      	ands	r3, r2
 8002684:	d016      	beq.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002686:	4b2c      	ldr	r3, [pc, #176]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002688:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800268a:	4a35      	ldr	r2, [pc, #212]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800268c:	4013      	ands	r3, r2
 800268e:	0019      	movs	r1, r3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002694:	4b28      	ldr	r3, [pc, #160]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002696:	430a      	orrs	r2, r1
 8002698:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800269e:	2380      	movs	r3, #128	; 0x80
 80026a0:	03db      	lsls	r3, r3, #15
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d106      	bne.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80026a6:	4b24      	ldr	r3, [pc, #144]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80026a8:	68da      	ldr	r2, [r3, #12]
 80026aa:	4b23      	ldr	r3, [pc, #140]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80026ac:	2180      	movs	r1, #128	; 0x80
 80026ae:	0449      	lsls	r1, r1, #17
 80026b0:	430a      	orrs	r2, r1
 80026b2:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	2380      	movs	r3, #128	; 0x80
 80026ba:	03db      	lsls	r3, r3, #15
 80026bc:	4013      	ands	r3, r2
 80026be:	d016      	beq.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80026c0:	4b1d      	ldr	r3, [pc, #116]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80026c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026c4:	4a27      	ldr	r2, [pc, #156]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 80026c6:	4013      	ands	r3, r2
 80026c8:	0019      	movs	r1, r3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026ce:	4b1a      	ldr	r3, [pc, #104]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80026d0:	430a      	orrs	r2, r1
 80026d2:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026d8:	2380      	movs	r3, #128	; 0x80
 80026da:	045b      	lsls	r3, r3, #17
 80026dc:	429a      	cmp	r2, r3
 80026de:	d106      	bne.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80026e0:	4b15      	ldr	r3, [pc, #84]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80026e2:	68da      	ldr	r2, [r3, #12]
 80026e4:	4b14      	ldr	r3, [pc, #80]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80026e6:	2180      	movs	r1, #128	; 0x80
 80026e8:	0449      	lsls	r1, r1, #17
 80026ea:	430a      	orrs	r2, r1
 80026ec:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	2380      	movs	r3, #128	; 0x80
 80026f4:	011b      	lsls	r3, r3, #4
 80026f6:	4013      	ands	r3, r2
 80026f8:	d016      	beq.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80026fa:	4b0f      	ldr	r3, [pc, #60]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80026fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026fe:	4a1a      	ldr	r2, [pc, #104]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8002700:	4013      	ands	r3, r2
 8002702:	0019      	movs	r1, r3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	695a      	ldr	r2, [r3, #20]
 8002708:	4b0b      	ldr	r3, [pc, #44]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800270a:	430a      	orrs	r2, r1
 800270c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	695a      	ldr	r2, [r3, #20]
 8002712:	2380      	movs	r3, #128	; 0x80
 8002714:	01db      	lsls	r3, r3, #7
 8002716:	429a      	cmp	r2, r3
 8002718:	d106      	bne.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800271a:	4b07      	ldr	r3, [pc, #28]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800271c:	68da      	ldr	r2, [r3, #12]
 800271e:	4b06      	ldr	r3, [pc, #24]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002720:	2180      	movs	r1, #128	; 0x80
 8002722:	0249      	lsls	r1, r1, #9
 8002724:	430a      	orrs	r2, r1
 8002726:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002728:	2312      	movs	r3, #18
 800272a:	18fb      	adds	r3, r7, r3
 800272c:	781b      	ldrb	r3, [r3, #0]
}
 800272e:	0018      	movs	r0, r3
 8002730:	46bd      	mov	sp, r7
 8002732:	b006      	add	sp, #24
 8002734:	bd80      	pop	{r7, pc}
 8002736:	46c0      	nop			; (mov r8, r8)
 8002738:	40021000 	.word	0x40021000
 800273c:	40007000 	.word	0x40007000
 8002740:	fffffcff 	.word	0xfffffcff
 8002744:	fffeffff 	.word	0xfffeffff
 8002748:	00001388 	.word	0x00001388
 800274c:	efffffff 	.word	0xefffffff
 8002750:	fffff3ff 	.word	0xfffff3ff
 8002754:	fff3ffff 	.word	0xfff3ffff
 8002758:	ffcfffff 	.word	0xffcfffff
 800275c:	ffffcfff 	.word	0xffffcfff
 8002760:	ffbfffff 	.word	0xffbfffff
 8002764:	feffffff 	.word	0xfeffffff
 8002768:	ffff3fff 	.word	0xffff3fff

0800276c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d101      	bne.n	800277e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e046      	b.n	800280c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2284      	movs	r2, #132	; 0x84
 8002782:	589b      	ldr	r3, [r3, r2]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d107      	bne.n	8002798 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2280      	movs	r2, #128	; 0x80
 800278c:	2100      	movs	r1, #0
 800278e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	0018      	movs	r0, r3
 8002794:	f7fe fc06 	bl	8000fa4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2284      	movs	r2, #132	; 0x84
 800279c:	2124      	movs	r1, #36	; 0x24
 800279e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	2101      	movs	r1, #1
 80027ac:	438a      	bics	r2, r1
 80027ae:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	0018      	movs	r0, r3
 80027b4:	f000 fc7c 	bl	80030b0 <UART_SetConfig>
 80027b8:	0003      	movs	r3, r0
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d101      	bne.n	80027c2 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e024      	b.n	800280c <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d003      	beq.n	80027d2 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	0018      	movs	r0, r3
 80027ce:	f000 ff2d 	bl	800362c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	685a      	ldr	r2, [r3, #4]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	490d      	ldr	r1, [pc, #52]	; (8002814 <HAL_UART_Init+0xa8>)
 80027de:	400a      	ands	r2, r1
 80027e0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	689a      	ldr	r2, [r3, #8]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	212a      	movs	r1, #42	; 0x2a
 80027ee:	438a      	bics	r2, r1
 80027f0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	2101      	movs	r1, #1
 80027fe:	430a      	orrs	r2, r1
 8002800:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	0018      	movs	r0, r3
 8002806:	f000 ffc5 	bl	8003794 <UART_CheckIdleState>
 800280a:	0003      	movs	r3, r0
}
 800280c:	0018      	movs	r0, r3
 800280e:	46bd      	mov	sp, r7
 8002810:	b002      	add	sp, #8
 8002812:	bd80      	pop	{r7, pc}
 8002814:	ffffb7ff 	.word	0xffffb7ff

08002818 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b08a      	sub	sp, #40	; 0x28
 800281c:	af02      	add	r7, sp, #8
 800281e:	60f8      	str	r0, [r7, #12]
 8002820:	60b9      	str	r1, [r7, #8]
 8002822:	603b      	str	r3, [r7, #0]
 8002824:	1dbb      	adds	r3, r7, #6
 8002826:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2284      	movs	r2, #132	; 0x84
 800282c:	589b      	ldr	r3, [r3, r2]
 800282e:	2b20      	cmp	r3, #32
 8002830:	d000      	beq.n	8002834 <HAL_UART_Transmit+0x1c>
 8002832:	e097      	b.n	8002964 <HAL_UART_Transmit+0x14c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d003      	beq.n	8002842 <HAL_UART_Transmit+0x2a>
 800283a:	1dbb      	adds	r3, r7, #6
 800283c:	881b      	ldrh	r3, [r3, #0]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d101      	bne.n	8002846 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e08f      	b.n	8002966 <HAL_UART_Transmit+0x14e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	689a      	ldr	r2, [r3, #8]
 800284a:	2380      	movs	r3, #128	; 0x80
 800284c:	015b      	lsls	r3, r3, #5
 800284e:	429a      	cmp	r2, r3
 8002850:	d109      	bne.n	8002866 <HAL_UART_Transmit+0x4e>
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	691b      	ldr	r3, [r3, #16]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d105      	bne.n	8002866 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	2201      	movs	r2, #1
 800285e:	4013      	ands	r3, r2
 8002860:	d001      	beq.n	8002866 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e07f      	b.n	8002966 <HAL_UART_Transmit+0x14e>
      }
    }

    __HAL_LOCK(huart);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2280      	movs	r2, #128	; 0x80
 800286a:	5c9b      	ldrb	r3, [r3, r2]
 800286c:	2b01      	cmp	r3, #1
 800286e:	d101      	bne.n	8002874 <HAL_UART_Transmit+0x5c>
 8002870:	2302      	movs	r3, #2
 8002872:	e078      	b.n	8002966 <HAL_UART_Transmit+0x14e>
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2280      	movs	r2, #128	; 0x80
 8002878:	2101      	movs	r1, #1
 800287a:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	228c      	movs	r2, #140	; 0x8c
 8002880:	2100      	movs	r1, #0
 8002882:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2284      	movs	r2, #132	; 0x84
 8002888:	2121      	movs	r1, #33	; 0x21
 800288a:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800288c:	f7fe fd1c 	bl	80012c8 <HAL_GetTick>
 8002890:	0003      	movs	r3, r0
 8002892:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	1dba      	adds	r2, r7, #6
 8002898:	2154      	movs	r1, #84	; 0x54
 800289a:	8812      	ldrh	r2, [r2, #0]
 800289c:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	1dba      	adds	r2, r7, #6
 80028a2:	2156      	movs	r1, #86	; 0x56
 80028a4:	8812      	ldrh	r2, [r2, #0]
 80028a6:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	689a      	ldr	r2, [r3, #8]
 80028ac:	2380      	movs	r3, #128	; 0x80
 80028ae:	015b      	lsls	r3, r3, #5
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d108      	bne.n	80028c6 <HAL_UART_Transmit+0xae>
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	691b      	ldr	r3, [r3, #16]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d104      	bne.n	80028c6 <HAL_UART_Transmit+0xae>
    {
      pdata8bits  = NULL;
 80028bc:	2300      	movs	r3, #0
 80028be:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	61bb      	str	r3, [r7, #24]
 80028c4:	e003      	b.n	80028ce <HAL_UART_Transmit+0xb6>
    }
    else
    {
      pdata8bits  = pData;
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80028ca:	2300      	movs	r3, #0
 80028cc:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2280      	movs	r2, #128	; 0x80
 80028d2:	2100      	movs	r1, #0
 80028d4:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 80028d6:	e02c      	b.n	8002932 <HAL_UART_Transmit+0x11a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80028d8:	697a      	ldr	r2, [r7, #20]
 80028da:	68f8      	ldr	r0, [r7, #12]
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	9300      	str	r3, [sp, #0]
 80028e0:	0013      	movs	r3, r2
 80028e2:	2200      	movs	r2, #0
 80028e4:	2180      	movs	r1, #128	; 0x80
 80028e6:	f000 ff9f 	bl	8003828 <UART_WaitOnFlagUntilTimeout>
 80028ea:	1e03      	subs	r3, r0, #0
 80028ec:	d001      	beq.n	80028f2 <HAL_UART_Transmit+0xda>
      {
        return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e039      	b.n	8002966 <HAL_UART_Transmit+0x14e>
      }
      if (pdata8bits == NULL)
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d10b      	bne.n	8002910 <HAL_UART_Transmit+0xf8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80028f8:	69bb      	ldr	r3, [r7, #24]
 80028fa:	881b      	ldrh	r3, [r3, #0]
 80028fc:	001a      	movs	r2, r3
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	05d2      	lsls	r2, r2, #23
 8002904:	0dd2      	lsrs	r2, r2, #23
 8002906:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002908:	69bb      	ldr	r3, [r7, #24]
 800290a:	3302      	adds	r3, #2
 800290c:	61bb      	str	r3, [r7, #24]
 800290e:	e007      	b.n	8002920 <HAL_UART_Transmit+0x108>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	781a      	ldrb	r2, [r3, #0]
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	3301      	adds	r3, #1
 800291e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2256      	movs	r2, #86	; 0x56
 8002924:	5a9b      	ldrh	r3, [r3, r2]
 8002926:	b29b      	uxth	r3, r3
 8002928:	3b01      	subs	r3, #1
 800292a:	b299      	uxth	r1, r3
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2256      	movs	r2, #86	; 0x56
 8002930:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2256      	movs	r2, #86	; 0x56
 8002936:	5a9b      	ldrh	r3, [r3, r2]
 8002938:	b29b      	uxth	r3, r3
 800293a:	2b00      	cmp	r3, #0
 800293c:	d1cc      	bne.n	80028d8 <HAL_UART_Transmit+0xc0>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800293e:	697a      	ldr	r2, [r7, #20]
 8002940:	68f8      	ldr	r0, [r7, #12]
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	9300      	str	r3, [sp, #0]
 8002946:	0013      	movs	r3, r2
 8002948:	2200      	movs	r2, #0
 800294a:	2140      	movs	r1, #64	; 0x40
 800294c:	f000 ff6c 	bl	8003828 <UART_WaitOnFlagUntilTimeout>
 8002950:	1e03      	subs	r3, r0, #0
 8002952:	d001      	beq.n	8002958 <HAL_UART_Transmit+0x140>
    {
      return HAL_TIMEOUT;
 8002954:	2303      	movs	r3, #3
 8002956:	e006      	b.n	8002966 <HAL_UART_Transmit+0x14e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2284      	movs	r2, #132	; 0x84
 800295c:	2120      	movs	r1, #32
 800295e:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8002960:	2300      	movs	r3, #0
 8002962:	e000      	b.n	8002966 <HAL_UART_Transmit+0x14e>
  }
  else
  {
    return HAL_BUSY;
 8002964:	2302      	movs	r3, #2
  }
}
 8002966:	0018      	movs	r0, r3
 8002968:	46bd      	mov	sp, r7
 800296a:	b008      	add	sp, #32
 800296c:	bd80      	pop	{r7, pc}
	...

08002970 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b088      	sub	sp, #32
 8002974:	af00      	add	r7, sp, #0
 8002976:	60f8      	str	r0, [r7, #12]
 8002978:	60b9      	str	r1, [r7, #8]
 800297a:	1dbb      	adds	r3, r7, #6
 800297c:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2288      	movs	r2, #136	; 0x88
 8002982:	589b      	ldr	r3, [r3, r2]
 8002984:	2b20      	cmp	r3, #32
 8002986:	d155      	bne.n	8002a34 <HAL_UART_Receive_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d003      	beq.n	8002996 <HAL_UART_Receive_IT+0x26>
 800298e:	1dbb      	adds	r3, r7, #6
 8002990:	881b      	ldrh	r3, [r3, #0]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d101      	bne.n	800299a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e04d      	b.n	8002a36 <HAL_UART_Receive_IT+0xc6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	689a      	ldr	r2, [r3, #8]
 800299e:	2380      	movs	r3, #128	; 0x80
 80029a0:	015b      	lsls	r3, r3, #5
 80029a2:	429a      	cmp	r2, r3
 80029a4:	d109      	bne.n	80029ba <HAL_UART_Receive_IT+0x4a>
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	691b      	ldr	r3, [r3, #16]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d105      	bne.n	80029ba <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	2201      	movs	r2, #1
 80029b2:	4013      	ands	r3, r2
 80029b4:	d001      	beq.n	80029ba <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e03d      	b.n	8002a36 <HAL_UART_Receive_IT+0xc6>
      }
    }

    __HAL_LOCK(huart);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2280      	movs	r2, #128	; 0x80
 80029be:	5c9b      	ldrb	r3, [r3, r2]
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d101      	bne.n	80029c8 <HAL_UART_Receive_IT+0x58>
 80029c4:	2302      	movs	r3, #2
 80029c6:	e036      	b.n	8002a36 <HAL_UART_Receive_IT+0xc6>
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2280      	movs	r2, #128	; 0x80
 80029cc:	2101      	movs	r1, #1
 80029ce:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2200      	movs	r2, #0
 80029d4:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a19      	ldr	r2, [pc, #100]	; (8002a40 <HAL_UART_Receive_IT+0xd0>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d020      	beq.n	8002a22 <HAL_UART_Receive_IT+0xb2>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	685a      	ldr	r2, [r3, #4]
 80029e6:	2380      	movs	r3, #128	; 0x80
 80029e8:	041b      	lsls	r3, r3, #16
 80029ea:	4013      	ands	r3, r2
 80029ec:	d019      	beq.n	8002a22 <HAL_UART_Receive_IT+0xb2>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029ee:	f3ef 8310 	mrs	r3, PRIMASK
 80029f2:	613b      	str	r3, [r7, #16]
  return(result);
 80029f4:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80029f6:	61fb      	str	r3, [r7, #28]
 80029f8:	2301      	movs	r3, #1
 80029fa:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	f383 8810 	msr	PRIMASK, r3
}
 8002a02:	46c0      	nop			; (mov r8, r8)
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	2180      	movs	r1, #128	; 0x80
 8002a10:	04c9      	lsls	r1, r1, #19
 8002a12:	430a      	orrs	r2, r1
 8002a14:	601a      	str	r2, [r3, #0]
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a1a:	69bb      	ldr	r3, [r7, #24]
 8002a1c:	f383 8810 	msr	PRIMASK, r3
}
 8002a20:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002a22:	1dbb      	adds	r3, r7, #6
 8002a24:	881a      	ldrh	r2, [r3, #0]
 8002a26:	68b9      	ldr	r1, [r7, #8]
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	0018      	movs	r0, r3
 8002a2c:	f000 ffc4 	bl	80039b8 <UART_Start_Receive_IT>
 8002a30:	0003      	movs	r3, r0
 8002a32:	e000      	b.n	8002a36 <HAL_UART_Receive_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8002a34:	2302      	movs	r3, #2
  }
}
 8002a36:	0018      	movs	r0, r3
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	b008      	add	sp, #32
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	46c0      	nop			; (mov r8, r8)
 8002a40:	40008000 	.word	0x40008000

08002a44 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002a44:	b5b0      	push	{r4, r5, r7, lr}
 8002a46:	b0aa      	sub	sp, #168	; 0xa8
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	69db      	ldr	r3, [r3, #28]
 8002a52:	22a4      	movs	r2, #164	; 0xa4
 8002a54:	18b9      	adds	r1, r7, r2
 8002a56:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	20a0      	movs	r0, #160	; 0xa0
 8002a60:	1839      	adds	r1, r7, r0
 8002a62:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	249c      	movs	r4, #156	; 0x9c
 8002a6c:	1939      	adds	r1, r7, r4
 8002a6e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002a70:	0011      	movs	r1, r2
 8002a72:	18bb      	adds	r3, r7, r2
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4aa0      	ldr	r2, [pc, #640]	; (8002cf8 <HAL_UART_IRQHandler+0x2b4>)
 8002a78:	4013      	ands	r3, r2
 8002a7a:	2298      	movs	r2, #152	; 0x98
 8002a7c:	18bd      	adds	r5, r7, r2
 8002a7e:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8002a80:	18bb      	adds	r3, r7, r2
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d11a      	bne.n	8002abe <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002a88:	187b      	adds	r3, r7, r1
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	2220      	movs	r2, #32
 8002a8e:	4013      	ands	r3, r2
 8002a90:	d015      	beq.n	8002abe <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002a92:	183b      	adds	r3, r7, r0
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	2220      	movs	r2, #32
 8002a98:	4013      	ands	r3, r2
 8002a9a:	d105      	bne.n	8002aa8 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002a9c:	193b      	adds	r3, r7, r4
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	2380      	movs	r3, #128	; 0x80
 8002aa2:	055b      	lsls	r3, r3, #21
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	d00a      	beq.n	8002abe <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d100      	bne.n	8002ab2 <HAL_UART_IRQHandler+0x6e>
 8002ab0:	e2cf      	b.n	8003052 <HAL_UART_IRQHandler+0x60e>
      {
        huart->RxISR(huart);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	0010      	movs	r0, r2
 8002aba:	4798      	blx	r3
      }
      return;
 8002abc:	e2c9      	b.n	8003052 <HAL_UART_IRQHandler+0x60e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002abe:	2398      	movs	r3, #152	; 0x98
 8002ac0:	18fb      	adds	r3, r7, r3
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d100      	bne.n	8002aca <HAL_UART_IRQHandler+0x86>
 8002ac8:	e11e      	b.n	8002d08 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002aca:	239c      	movs	r3, #156	; 0x9c
 8002acc:	18fb      	adds	r3, r7, r3
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a8a      	ldr	r2, [pc, #552]	; (8002cfc <HAL_UART_IRQHandler+0x2b8>)
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	d106      	bne.n	8002ae4 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002ad6:	23a0      	movs	r3, #160	; 0xa0
 8002ad8:	18fb      	adds	r3, r7, r3
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a88      	ldr	r2, [pc, #544]	; (8002d00 <HAL_UART_IRQHandler+0x2bc>)
 8002ade:	4013      	ands	r3, r2
 8002ae0:	d100      	bne.n	8002ae4 <HAL_UART_IRQHandler+0xa0>
 8002ae2:	e111      	b.n	8002d08 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002ae4:	23a4      	movs	r3, #164	; 0xa4
 8002ae6:	18fb      	adds	r3, r7, r3
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	2201      	movs	r2, #1
 8002aec:	4013      	ands	r3, r2
 8002aee:	d012      	beq.n	8002b16 <HAL_UART_IRQHandler+0xd2>
 8002af0:	23a0      	movs	r3, #160	; 0xa0
 8002af2:	18fb      	adds	r3, r7, r3
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	2380      	movs	r3, #128	; 0x80
 8002af8:	005b      	lsls	r3, r3, #1
 8002afa:	4013      	ands	r3, r2
 8002afc:	d00b      	beq.n	8002b16 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	2201      	movs	r2, #1
 8002b04:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	228c      	movs	r2, #140	; 0x8c
 8002b0a:	589b      	ldr	r3, [r3, r2]
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	431a      	orrs	r2, r3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	218c      	movs	r1, #140	; 0x8c
 8002b14:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002b16:	23a4      	movs	r3, #164	; 0xa4
 8002b18:	18fb      	adds	r3, r7, r3
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	2202      	movs	r2, #2
 8002b1e:	4013      	ands	r3, r2
 8002b20:	d011      	beq.n	8002b46 <HAL_UART_IRQHandler+0x102>
 8002b22:	239c      	movs	r3, #156	; 0x9c
 8002b24:	18fb      	adds	r3, r7, r3
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	2201      	movs	r2, #1
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	d00b      	beq.n	8002b46 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	2202      	movs	r2, #2
 8002b34:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	228c      	movs	r2, #140	; 0x8c
 8002b3a:	589b      	ldr	r3, [r3, r2]
 8002b3c:	2204      	movs	r2, #4
 8002b3e:	431a      	orrs	r2, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	218c      	movs	r1, #140	; 0x8c
 8002b44:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002b46:	23a4      	movs	r3, #164	; 0xa4
 8002b48:	18fb      	adds	r3, r7, r3
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	2204      	movs	r2, #4
 8002b4e:	4013      	ands	r3, r2
 8002b50:	d011      	beq.n	8002b76 <HAL_UART_IRQHandler+0x132>
 8002b52:	239c      	movs	r3, #156	; 0x9c
 8002b54:	18fb      	adds	r3, r7, r3
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	2201      	movs	r2, #1
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	d00b      	beq.n	8002b76 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	2204      	movs	r2, #4
 8002b64:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	228c      	movs	r2, #140	; 0x8c
 8002b6a:	589b      	ldr	r3, [r3, r2]
 8002b6c:	2202      	movs	r2, #2
 8002b6e:	431a      	orrs	r2, r3
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	218c      	movs	r1, #140	; 0x8c
 8002b74:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002b76:	23a4      	movs	r3, #164	; 0xa4
 8002b78:	18fb      	adds	r3, r7, r3
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	2208      	movs	r2, #8
 8002b7e:	4013      	ands	r3, r2
 8002b80:	d017      	beq.n	8002bb2 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002b82:	23a0      	movs	r3, #160	; 0xa0
 8002b84:	18fb      	adds	r3, r7, r3
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	2220      	movs	r2, #32
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	d105      	bne.n	8002b9a <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8002b8e:	239c      	movs	r3, #156	; 0x9c
 8002b90:	18fb      	adds	r3, r7, r3
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a59      	ldr	r2, [pc, #356]	; (8002cfc <HAL_UART_IRQHandler+0x2b8>)
 8002b96:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002b98:	d00b      	beq.n	8002bb2 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	2208      	movs	r2, #8
 8002ba0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	228c      	movs	r2, #140	; 0x8c
 8002ba6:	589b      	ldr	r3, [r3, r2]
 8002ba8:	2208      	movs	r2, #8
 8002baa:	431a      	orrs	r2, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	218c      	movs	r1, #140	; 0x8c
 8002bb0:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002bb2:	23a4      	movs	r3, #164	; 0xa4
 8002bb4:	18fb      	adds	r3, r7, r3
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	2380      	movs	r3, #128	; 0x80
 8002bba:	011b      	lsls	r3, r3, #4
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	d013      	beq.n	8002be8 <HAL_UART_IRQHandler+0x1a4>
 8002bc0:	23a0      	movs	r3, #160	; 0xa0
 8002bc2:	18fb      	adds	r3, r7, r3
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	2380      	movs	r3, #128	; 0x80
 8002bc8:	04db      	lsls	r3, r3, #19
 8002bca:	4013      	ands	r3, r2
 8002bcc:	d00c      	beq.n	8002be8 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	2280      	movs	r2, #128	; 0x80
 8002bd4:	0112      	lsls	r2, r2, #4
 8002bd6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	228c      	movs	r2, #140	; 0x8c
 8002bdc:	589b      	ldr	r3, [r3, r2]
 8002bde:	2220      	movs	r2, #32
 8002be0:	431a      	orrs	r2, r3
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	218c      	movs	r1, #140	; 0x8c
 8002be6:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	228c      	movs	r2, #140	; 0x8c
 8002bec:	589b      	ldr	r3, [r3, r2]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d100      	bne.n	8002bf4 <HAL_UART_IRQHandler+0x1b0>
 8002bf2:	e230      	b.n	8003056 <HAL_UART_IRQHandler+0x612>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002bf4:	23a4      	movs	r3, #164	; 0xa4
 8002bf6:	18fb      	adds	r3, r7, r3
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	2220      	movs	r2, #32
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	d015      	beq.n	8002c2c <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002c00:	23a0      	movs	r3, #160	; 0xa0
 8002c02:	18fb      	adds	r3, r7, r3
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	2220      	movs	r2, #32
 8002c08:	4013      	ands	r3, r2
 8002c0a:	d106      	bne.n	8002c1a <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002c0c:	239c      	movs	r3, #156	; 0x9c
 8002c0e:	18fb      	adds	r3, r7, r3
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	2380      	movs	r3, #128	; 0x80
 8002c14:	055b      	lsls	r3, r3, #21
 8002c16:	4013      	ands	r3, r2
 8002c18:	d008      	beq.n	8002c2c <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d004      	beq.n	8002c2c <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	0010      	movs	r0, r2
 8002c2a:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	228c      	movs	r2, #140	; 0x8c
 8002c30:	589b      	ldr	r3, [r3, r2]
 8002c32:	2194      	movs	r1, #148	; 0x94
 8002c34:	187a      	adds	r2, r7, r1
 8002c36:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	2240      	movs	r2, #64	; 0x40
 8002c40:	4013      	ands	r3, r2
 8002c42:	2b40      	cmp	r3, #64	; 0x40
 8002c44:	d004      	beq.n	8002c50 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002c46:	187b      	adds	r3, r7, r1
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	2228      	movs	r2, #40	; 0x28
 8002c4c:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002c4e:	d047      	beq.n	8002ce0 <HAL_UART_IRQHandler+0x29c>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	0018      	movs	r0, r3
 8002c54:	f000 ffdc 	bl	8003c10 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	2240      	movs	r2, #64	; 0x40
 8002c60:	4013      	ands	r3, r2
 8002c62:	2b40      	cmp	r3, #64	; 0x40
 8002c64:	d137      	bne.n	8002cd6 <HAL_UART_IRQHandler+0x292>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c66:	f3ef 8310 	mrs	r3, PRIMASK
 8002c6a:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8002c6c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c6e:	2090      	movs	r0, #144	; 0x90
 8002c70:	183a      	adds	r2, r7, r0
 8002c72:	6013      	str	r3, [r2, #0]
 8002c74:	2301      	movs	r3, #1
 8002c76:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002c7a:	f383 8810 	msr	PRIMASK, r3
}
 8002c7e:	46c0      	nop			; (mov r8, r8)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	689a      	ldr	r2, [r3, #8]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	2140      	movs	r1, #64	; 0x40
 8002c8c:	438a      	bics	r2, r1
 8002c8e:	609a      	str	r2, [r3, #8]
 8002c90:	183b      	adds	r3, r7, r0
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c96:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c98:	f383 8810 	msr	PRIMASK, r3
}
 8002c9c:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d012      	beq.n	8002ccc <HAL_UART_IRQHandler+0x288>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002caa:	4a16      	ldr	r2, [pc, #88]	; (8002d04 <HAL_UART_IRQHandler+0x2c0>)
 8002cac:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002cb2:	0018      	movs	r0, r3
 8002cb4:	f7fe fc8c 	bl	80015d0 <HAL_DMA_Abort_IT>
 8002cb8:	1e03      	subs	r3, r0, #0
 8002cba:	d01a      	beq.n	8002cf2 <HAL_UART_IRQHandler+0x2ae>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002cc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002cc6:	0018      	movs	r0, r3
 8002cc8:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cca:	e012      	b.n	8002cf2 <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	0018      	movs	r0, r3
 8002cd0:	f000 f9da 	bl	8003088 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cd4:	e00d      	b.n	8002cf2 <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	0018      	movs	r0, r3
 8002cda:	f000 f9d5 	bl	8003088 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cde:	e008      	b.n	8002cf2 <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	0018      	movs	r0, r3
 8002ce4:	f000 f9d0 	bl	8003088 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	228c      	movs	r2, #140	; 0x8c
 8002cec:	2100      	movs	r1, #0
 8002cee:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8002cf0:	e1b1      	b.n	8003056 <HAL_UART_IRQHandler+0x612>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cf2:	46c0      	nop			; (mov r8, r8)
    return;
 8002cf4:	e1af      	b.n	8003056 <HAL_UART_IRQHandler+0x612>
 8002cf6:	46c0      	nop			; (mov r8, r8)
 8002cf8:	0000080f 	.word	0x0000080f
 8002cfc:	10000001 	.word	0x10000001
 8002d00:	04000120 	.word	0x04000120
 8002d04:	08003cdd 	.word	0x08003cdd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d000      	beq.n	8002d12 <HAL_UART_IRQHandler+0x2ce>
 8002d10:	e135      	b.n	8002f7e <HAL_UART_IRQHandler+0x53a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002d12:	23a4      	movs	r3, #164	; 0xa4
 8002d14:	18fb      	adds	r3, r7, r3
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	2210      	movs	r2, #16
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	d100      	bne.n	8002d20 <HAL_UART_IRQHandler+0x2dc>
 8002d1e:	e12e      	b.n	8002f7e <HAL_UART_IRQHandler+0x53a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002d20:	23a0      	movs	r3, #160	; 0xa0
 8002d22:	18fb      	adds	r3, r7, r3
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	2210      	movs	r2, #16
 8002d28:	4013      	ands	r3, r2
 8002d2a:	d100      	bne.n	8002d2e <HAL_UART_IRQHandler+0x2ea>
 8002d2c:	e127      	b.n	8002f7e <HAL_UART_IRQHandler+0x53a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	2210      	movs	r2, #16
 8002d34:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	2240      	movs	r2, #64	; 0x40
 8002d3e:	4013      	ands	r3, r2
 8002d40:	2b40      	cmp	r3, #64	; 0x40
 8002d42:	d000      	beq.n	8002d46 <HAL_UART_IRQHandler+0x302>
 8002d44:	e09e      	b.n	8002e84 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	685a      	ldr	r2, [r3, #4]
 8002d4e:	217e      	movs	r1, #126	; 0x7e
 8002d50:	187b      	adds	r3, r7, r1
 8002d52:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8002d54:	187b      	adds	r3, r7, r1
 8002d56:	881b      	ldrh	r3, [r3, #0]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d100      	bne.n	8002d5e <HAL_UART_IRQHandler+0x31a>
 8002d5c:	e17d      	b.n	800305a <HAL_UART_IRQHandler+0x616>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	225c      	movs	r2, #92	; 0x5c
 8002d62:	5a9b      	ldrh	r3, [r3, r2]
 8002d64:	187a      	adds	r2, r7, r1
 8002d66:	8812      	ldrh	r2, [r2, #0]
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d300      	bcc.n	8002d6e <HAL_UART_IRQHandler+0x32a>
 8002d6c:	e175      	b.n	800305a <HAL_UART_IRQHandler+0x616>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	187a      	adds	r2, r7, r1
 8002d72:	215e      	movs	r1, #94	; 0x5e
 8002d74:	8812      	ldrh	r2, [r2, #0]
 8002d76:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2220      	movs	r2, #32
 8002d82:	4013      	ands	r3, r2
 8002d84:	d16f      	bne.n	8002e66 <HAL_UART_IRQHandler+0x422>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d86:	f3ef 8310 	mrs	r3, PRIMASK
 8002d8a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8002d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002d8e:	67bb      	str	r3, [r7, #120]	; 0x78
 8002d90:	2301      	movs	r3, #1
 8002d92:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d96:	f383 8810 	msr	PRIMASK, r3
}
 8002d9a:	46c0      	nop			; (mov r8, r8)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	49b1      	ldr	r1, [pc, #708]	; (800306c <HAL_UART_IRQHandler+0x628>)
 8002da8:	400a      	ands	r2, r1
 8002daa:	601a      	str	r2, [r3, #0]
 8002dac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002dae:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002db2:	f383 8810 	msr	PRIMASK, r3
}
 8002db6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002db8:	f3ef 8310 	mrs	r3, PRIMASK
 8002dbc:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8002dbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dc0:	677b      	str	r3, [r7, #116]	; 0x74
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dc8:	f383 8810 	msr	PRIMASK, r3
}
 8002dcc:	46c0      	nop			; (mov r8, r8)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	689a      	ldr	r2, [r3, #8]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	2101      	movs	r1, #1
 8002dda:	438a      	bics	r2, r1
 8002ddc:	609a      	str	r2, [r3, #8]
 8002dde:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002de0:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002de2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002de4:	f383 8810 	msr	PRIMASK, r3
}
 8002de8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002dea:	f3ef 8310 	mrs	r3, PRIMASK
 8002dee:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8002df0:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002df2:	673b      	str	r3, [r7, #112]	; 0x70
 8002df4:	2301      	movs	r3, #1
 8002df6:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002df8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dfa:	f383 8810 	msr	PRIMASK, r3
}
 8002dfe:	46c0      	nop			; (mov r8, r8)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	689a      	ldr	r2, [r3, #8]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	2140      	movs	r1, #64	; 0x40
 8002e0c:	438a      	bics	r2, r1
 8002e0e:	609a      	str	r2, [r3, #8]
 8002e10:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e12:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e16:	f383 8810 	msr	PRIMASK, r3
}
 8002e1a:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2288      	movs	r2, #136	; 0x88
 8002e20:	2120      	movs	r1, #32
 8002e22:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2200      	movs	r2, #0
 8002e28:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e2a:	f3ef 8310 	mrs	r3, PRIMASK
 8002e2e:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8002e30:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e32:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002e34:	2301      	movs	r3, #1
 8002e36:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e38:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e3a:	f383 8810 	msr	PRIMASK, r3
}
 8002e3e:	46c0      	nop			; (mov r8, r8)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	2110      	movs	r1, #16
 8002e4c:	438a      	bics	r2, r1
 8002e4e:	601a      	str	r2, [r3, #0]
 8002e50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e52:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e56:	f383 8810 	msr	PRIMASK, r3
}
 8002e5a:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e60:	0018      	movs	r0, r3
 8002e62:	f7fe fb53 	bl	800150c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	225c      	movs	r2, #92	; 0x5c
 8002e6a:	5a9a      	ldrh	r2, [r3, r2]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	215e      	movs	r1, #94	; 0x5e
 8002e70:	5a5b      	ldrh	r3, [r3, r1]
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	b29a      	uxth	r2, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	0011      	movs	r1, r2
 8002e7c:	0018      	movs	r0, r3
 8002e7e:	f000 f90b 	bl	8003098 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002e82:	e0ea      	b.n	800305a <HAL_UART_IRQHandler+0x616>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	225c      	movs	r2, #92	; 0x5c
 8002e88:	5a99      	ldrh	r1, [r3, r2]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	225e      	movs	r2, #94	; 0x5e
 8002e8e:	5a9b      	ldrh	r3, [r3, r2]
 8002e90:	b29a      	uxth	r2, r3
 8002e92:	208e      	movs	r0, #142	; 0x8e
 8002e94:	183b      	adds	r3, r7, r0
 8002e96:	1a8a      	subs	r2, r1, r2
 8002e98:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	225e      	movs	r2, #94	; 0x5e
 8002e9e:	5a9b      	ldrh	r3, [r3, r2]
 8002ea0:	b29b      	uxth	r3, r3
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d100      	bne.n	8002ea8 <HAL_UART_IRQHandler+0x464>
 8002ea6:	e0da      	b.n	800305e <HAL_UART_IRQHandler+0x61a>
          && (nb_rx_data > 0U))
 8002ea8:	183b      	adds	r3, r7, r0
 8002eaa:	881b      	ldrh	r3, [r3, #0]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d100      	bne.n	8002eb2 <HAL_UART_IRQHandler+0x46e>
 8002eb0:	e0d5      	b.n	800305e <HAL_UART_IRQHandler+0x61a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002eb2:	f3ef 8310 	mrs	r3, PRIMASK
 8002eb6:	60fb      	str	r3, [r7, #12]
  return(result);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002eba:	2488      	movs	r4, #136	; 0x88
 8002ebc:	193a      	adds	r2, r7, r4
 8002ebe:	6013      	str	r3, [r2, #0]
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	f383 8810 	msr	PRIMASK, r3
}
 8002eca:	46c0      	nop			; (mov r8, r8)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4966      	ldr	r1, [pc, #408]	; (8003070 <HAL_UART_IRQHandler+0x62c>)
 8002ed8:	400a      	ands	r2, r1
 8002eda:	601a      	str	r2, [r3, #0]
 8002edc:	193b      	adds	r3, r7, r4
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	f383 8810 	msr	PRIMASK, r3
}
 8002ee8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002eea:	f3ef 8310 	mrs	r3, PRIMASK
 8002eee:	61bb      	str	r3, [r7, #24]
  return(result);
 8002ef0:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002ef2:	2484      	movs	r4, #132	; 0x84
 8002ef4:	193a      	adds	r2, r7, r4
 8002ef6:	6013      	str	r3, [r2, #0]
 8002ef8:	2301      	movs	r3, #1
 8002efa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	f383 8810 	msr	PRIMASK, r3
}
 8002f02:	46c0      	nop			; (mov r8, r8)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	689a      	ldr	r2, [r3, #8]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4959      	ldr	r1, [pc, #356]	; (8003074 <HAL_UART_IRQHandler+0x630>)
 8002f10:	400a      	ands	r2, r1
 8002f12:	609a      	str	r2, [r3, #8]
 8002f14:	193b      	adds	r3, r7, r4
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f1a:	6a3b      	ldr	r3, [r7, #32]
 8002f1c:	f383 8810 	msr	PRIMASK, r3
}
 8002f20:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2288      	movs	r2, #136	; 0x88
 8002f26:	2120      	movs	r1, #32
 8002f28:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2200      	movs	r2, #0
 8002f34:	671a      	str	r2, [r3, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f36:	f3ef 8310 	mrs	r3, PRIMASK
 8002f3a:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f3e:	2480      	movs	r4, #128	; 0x80
 8002f40:	193a      	adds	r2, r7, r4
 8002f42:	6013      	str	r3, [r2, #0]
 8002f44:	2301      	movs	r3, #1
 8002f46:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f4a:	f383 8810 	msr	PRIMASK, r3
}
 8002f4e:	46c0      	nop			; (mov r8, r8)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	2110      	movs	r1, #16
 8002f5c:	438a      	bics	r2, r1
 8002f5e:	601a      	str	r2, [r3, #0]
 8002f60:	193b      	adds	r3, r7, r4
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f68:	f383 8810 	msr	PRIMASK, r3
}
 8002f6c:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002f6e:	183b      	adds	r3, r7, r0
 8002f70:	881a      	ldrh	r2, [r3, #0]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	0011      	movs	r1, r2
 8002f76:	0018      	movs	r0, r3
 8002f78:	f000 f88e 	bl	8003098 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002f7c:	e06f      	b.n	800305e <HAL_UART_IRQHandler+0x61a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002f7e:	23a4      	movs	r3, #164	; 0xa4
 8002f80:	18fb      	adds	r3, r7, r3
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	2380      	movs	r3, #128	; 0x80
 8002f86:	035b      	lsls	r3, r3, #13
 8002f88:	4013      	ands	r3, r2
 8002f8a:	d010      	beq.n	8002fae <HAL_UART_IRQHandler+0x56a>
 8002f8c:	239c      	movs	r3, #156	; 0x9c
 8002f8e:	18fb      	adds	r3, r7, r3
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	2380      	movs	r3, #128	; 0x80
 8002f94:	03db      	lsls	r3, r3, #15
 8002f96:	4013      	ands	r3, r2
 8002f98:	d009      	beq.n	8002fae <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	2280      	movs	r2, #128	; 0x80
 8002fa0:	0352      	lsls	r2, r2, #13
 8002fa2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	0018      	movs	r0, r3
 8002fa8:	f001 fb2c 	bl	8004604 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002fac:	e05a      	b.n	8003064 <HAL_UART_IRQHandler+0x620>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002fae:	23a4      	movs	r3, #164	; 0xa4
 8002fb0:	18fb      	adds	r3, r7, r3
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	2280      	movs	r2, #128	; 0x80
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	d016      	beq.n	8002fe8 <HAL_UART_IRQHandler+0x5a4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8002fba:	23a0      	movs	r3, #160	; 0xa0
 8002fbc:	18fb      	adds	r3, r7, r3
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	2280      	movs	r2, #128	; 0x80
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	d106      	bne.n	8002fd4 <HAL_UART_IRQHandler+0x590>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002fc6:	239c      	movs	r3, #156	; 0x9c
 8002fc8:	18fb      	adds	r3, r7, r3
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	2380      	movs	r3, #128	; 0x80
 8002fce:	041b      	lsls	r3, r3, #16
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	d009      	beq.n	8002fe8 <HAL_UART_IRQHandler+0x5a4>
  {
    if (huart->TxISR != NULL)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d042      	beq.n	8003062 <HAL_UART_IRQHandler+0x61e>
    {
      huart->TxISR(huart);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fe0:	687a      	ldr	r2, [r7, #4]
 8002fe2:	0010      	movs	r0, r2
 8002fe4:	4798      	blx	r3
    }
    return;
 8002fe6:	e03c      	b.n	8003062 <HAL_UART_IRQHandler+0x61e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002fe8:	23a4      	movs	r3, #164	; 0xa4
 8002fea:	18fb      	adds	r3, r7, r3
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	2240      	movs	r2, #64	; 0x40
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	d00a      	beq.n	800300a <HAL_UART_IRQHandler+0x5c6>
 8002ff4:	23a0      	movs	r3, #160	; 0xa0
 8002ff6:	18fb      	adds	r3, r7, r3
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	2240      	movs	r2, #64	; 0x40
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	d004      	beq.n	800300a <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	0018      	movs	r0, r3
 8003004:	f000 fe81 	bl	8003d0a <UART_EndTransmit_IT>
    return;
 8003008:	e02c      	b.n	8003064 <HAL_UART_IRQHandler+0x620>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800300a:	23a4      	movs	r3, #164	; 0xa4
 800300c:	18fb      	adds	r3, r7, r3
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	2380      	movs	r3, #128	; 0x80
 8003012:	041b      	lsls	r3, r3, #16
 8003014:	4013      	ands	r3, r2
 8003016:	d00b      	beq.n	8003030 <HAL_UART_IRQHandler+0x5ec>
 8003018:	23a0      	movs	r3, #160	; 0xa0
 800301a:	18fb      	adds	r3, r7, r3
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	2380      	movs	r3, #128	; 0x80
 8003020:	05db      	lsls	r3, r3, #23
 8003022:	4013      	ands	r3, r2
 8003024:	d004      	beq.n	8003030 <HAL_UART_IRQHandler+0x5ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	0018      	movs	r0, r3
 800302a:	f001 fafb 	bl	8004624 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800302e:	e019      	b.n	8003064 <HAL_UART_IRQHandler+0x620>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003030:	23a4      	movs	r3, #164	; 0xa4
 8003032:	18fb      	adds	r3, r7, r3
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	2380      	movs	r3, #128	; 0x80
 8003038:	045b      	lsls	r3, r3, #17
 800303a:	4013      	ands	r3, r2
 800303c:	d012      	beq.n	8003064 <HAL_UART_IRQHandler+0x620>
 800303e:	23a0      	movs	r3, #160	; 0xa0
 8003040:	18fb      	adds	r3, r7, r3
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	2b00      	cmp	r3, #0
 8003046:	da0d      	bge.n	8003064 <HAL_UART_IRQHandler+0x620>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	0018      	movs	r0, r3
 800304c:	f001 fae2 	bl	8004614 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003050:	e008      	b.n	8003064 <HAL_UART_IRQHandler+0x620>
      return;
 8003052:	46c0      	nop			; (mov r8, r8)
 8003054:	e006      	b.n	8003064 <HAL_UART_IRQHandler+0x620>
    return;
 8003056:	46c0      	nop			; (mov r8, r8)
 8003058:	e004      	b.n	8003064 <HAL_UART_IRQHandler+0x620>
      return;
 800305a:	46c0      	nop			; (mov r8, r8)
 800305c:	e002      	b.n	8003064 <HAL_UART_IRQHandler+0x620>
      return;
 800305e:	46c0      	nop			; (mov r8, r8)
 8003060:	e000      	b.n	8003064 <HAL_UART_IRQHandler+0x620>
    return;
 8003062:	46c0      	nop			; (mov r8, r8)
  }
}
 8003064:	46bd      	mov	sp, r7
 8003066:	b02a      	add	sp, #168	; 0xa8
 8003068:	bdb0      	pop	{r4, r5, r7, pc}
 800306a:	46c0      	nop			; (mov r8, r8)
 800306c:	fffffeff 	.word	0xfffffeff
 8003070:	fffffedf 	.word	0xfffffedf
 8003074:	effffffe 	.word	0xeffffffe

08003078 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b082      	sub	sp, #8
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003080:	46c0      	nop			; (mov r8, r8)
 8003082:	46bd      	mov	sp, r7
 8003084:	b002      	add	sp, #8
 8003086:	bd80      	pop	{r7, pc}

08003088 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b082      	sub	sp, #8
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003090:	46c0      	nop			; (mov r8, r8)
 8003092:	46bd      	mov	sp, r7
 8003094:	b002      	add	sp, #8
 8003096:	bd80      	pop	{r7, pc}

08003098 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b082      	sub	sp, #8
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	000a      	movs	r2, r1
 80030a2:	1cbb      	adds	r3, r7, #2
 80030a4:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80030a6:	46c0      	nop			; (mov r8, r8)
 80030a8:	46bd      	mov	sp, r7
 80030aa:	b002      	add	sp, #8
 80030ac:	bd80      	pop	{r7, pc}
	...

080030b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030b0:	b5b0      	push	{r4, r5, r7, lr}
 80030b2:	b090      	sub	sp, #64	; 0x40
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80030b8:	231a      	movs	r3, #26
 80030ba:	2220      	movs	r2, #32
 80030bc:	189b      	adds	r3, r3, r2
 80030be:	19db      	adds	r3, r3, r7
 80030c0:	2200      	movs	r2, #0
 80030c2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80030c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c6:	689a      	ldr	r2, [r3, #8]
 80030c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ca:	691b      	ldr	r3, [r3, #16]
 80030cc:	431a      	orrs	r2, r3
 80030ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d0:	695b      	ldr	r3, [r3, #20]
 80030d2:	431a      	orrs	r2, r3
 80030d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d6:	69db      	ldr	r3, [r3, #28]
 80030d8:	4313      	orrs	r3, r2
 80030da:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80030dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4aaf      	ldr	r2, [pc, #700]	; (80033a0 <UART_SetConfig+0x2f0>)
 80030e4:	4013      	ands	r3, r2
 80030e6:	0019      	movs	r1, r3
 80030e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030ee:	430b      	orrs	r3, r1
 80030f0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	4aaa      	ldr	r2, [pc, #680]	; (80033a4 <UART_SetConfig+0x2f4>)
 80030fa:	4013      	ands	r3, r2
 80030fc:	0018      	movs	r0, r3
 80030fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003100:	68d9      	ldr	r1, [r3, #12]
 8003102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	0003      	movs	r3, r0
 8003108:	430b      	orrs	r3, r1
 800310a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800310c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310e:	699b      	ldr	r3, [r3, #24]
 8003110:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4aa4      	ldr	r2, [pc, #656]	; (80033a8 <UART_SetConfig+0x2f8>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d004      	beq.n	8003126 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800311c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800311e:	6a1b      	ldr	r3, [r3, #32]
 8003120:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003122:	4313      	orrs	r3, r2
 8003124:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	4a9f      	ldr	r2, [pc, #636]	; (80033ac <UART_SetConfig+0x2fc>)
 800312e:	4013      	ands	r3, r2
 8003130:	0019      	movs	r1, r3
 8003132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003138:	430b      	orrs	r3, r1
 800313a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800313c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003142:	220f      	movs	r2, #15
 8003144:	4393      	bics	r3, r2
 8003146:	0018      	movs	r0, r3
 8003148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800314c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	0003      	movs	r3, r0
 8003152:	430b      	orrs	r3, r1
 8003154:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a95      	ldr	r2, [pc, #596]	; (80033b0 <UART_SetConfig+0x300>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d131      	bne.n	80031c4 <UART_SetConfig+0x114>
 8003160:	4b94      	ldr	r3, [pc, #592]	; (80033b4 <UART_SetConfig+0x304>)
 8003162:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003164:	2203      	movs	r2, #3
 8003166:	4013      	ands	r3, r2
 8003168:	2b03      	cmp	r3, #3
 800316a:	d01d      	beq.n	80031a8 <UART_SetConfig+0xf8>
 800316c:	d823      	bhi.n	80031b6 <UART_SetConfig+0x106>
 800316e:	2b02      	cmp	r3, #2
 8003170:	d00c      	beq.n	800318c <UART_SetConfig+0xdc>
 8003172:	d820      	bhi.n	80031b6 <UART_SetConfig+0x106>
 8003174:	2b00      	cmp	r3, #0
 8003176:	d002      	beq.n	800317e <UART_SetConfig+0xce>
 8003178:	2b01      	cmp	r3, #1
 800317a:	d00e      	beq.n	800319a <UART_SetConfig+0xea>
 800317c:	e01b      	b.n	80031b6 <UART_SetConfig+0x106>
 800317e:	231b      	movs	r3, #27
 8003180:	2220      	movs	r2, #32
 8003182:	189b      	adds	r3, r3, r2
 8003184:	19db      	adds	r3, r3, r7
 8003186:	2200      	movs	r2, #0
 8003188:	701a      	strb	r2, [r3, #0]
 800318a:	e0b4      	b.n	80032f6 <UART_SetConfig+0x246>
 800318c:	231b      	movs	r3, #27
 800318e:	2220      	movs	r2, #32
 8003190:	189b      	adds	r3, r3, r2
 8003192:	19db      	adds	r3, r3, r7
 8003194:	2202      	movs	r2, #2
 8003196:	701a      	strb	r2, [r3, #0]
 8003198:	e0ad      	b.n	80032f6 <UART_SetConfig+0x246>
 800319a:	231b      	movs	r3, #27
 800319c:	2220      	movs	r2, #32
 800319e:	189b      	adds	r3, r3, r2
 80031a0:	19db      	adds	r3, r3, r7
 80031a2:	2204      	movs	r2, #4
 80031a4:	701a      	strb	r2, [r3, #0]
 80031a6:	e0a6      	b.n	80032f6 <UART_SetConfig+0x246>
 80031a8:	231b      	movs	r3, #27
 80031aa:	2220      	movs	r2, #32
 80031ac:	189b      	adds	r3, r3, r2
 80031ae:	19db      	adds	r3, r3, r7
 80031b0:	2208      	movs	r2, #8
 80031b2:	701a      	strb	r2, [r3, #0]
 80031b4:	e09f      	b.n	80032f6 <UART_SetConfig+0x246>
 80031b6:	231b      	movs	r3, #27
 80031b8:	2220      	movs	r2, #32
 80031ba:	189b      	adds	r3, r3, r2
 80031bc:	19db      	adds	r3, r3, r7
 80031be:	2210      	movs	r2, #16
 80031c0:	701a      	strb	r2, [r3, #0]
 80031c2:	e098      	b.n	80032f6 <UART_SetConfig+0x246>
 80031c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a7b      	ldr	r2, [pc, #492]	; (80033b8 <UART_SetConfig+0x308>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d131      	bne.n	8003232 <UART_SetConfig+0x182>
 80031ce:	4b79      	ldr	r3, [pc, #484]	; (80033b4 <UART_SetConfig+0x304>)
 80031d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031d2:	220c      	movs	r2, #12
 80031d4:	4013      	ands	r3, r2
 80031d6:	2b0c      	cmp	r3, #12
 80031d8:	d01d      	beq.n	8003216 <UART_SetConfig+0x166>
 80031da:	d823      	bhi.n	8003224 <UART_SetConfig+0x174>
 80031dc:	2b08      	cmp	r3, #8
 80031de:	d00c      	beq.n	80031fa <UART_SetConfig+0x14a>
 80031e0:	d820      	bhi.n	8003224 <UART_SetConfig+0x174>
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d002      	beq.n	80031ec <UART_SetConfig+0x13c>
 80031e6:	2b04      	cmp	r3, #4
 80031e8:	d00e      	beq.n	8003208 <UART_SetConfig+0x158>
 80031ea:	e01b      	b.n	8003224 <UART_SetConfig+0x174>
 80031ec:	231b      	movs	r3, #27
 80031ee:	2220      	movs	r2, #32
 80031f0:	189b      	adds	r3, r3, r2
 80031f2:	19db      	adds	r3, r3, r7
 80031f4:	2200      	movs	r2, #0
 80031f6:	701a      	strb	r2, [r3, #0]
 80031f8:	e07d      	b.n	80032f6 <UART_SetConfig+0x246>
 80031fa:	231b      	movs	r3, #27
 80031fc:	2220      	movs	r2, #32
 80031fe:	189b      	adds	r3, r3, r2
 8003200:	19db      	adds	r3, r3, r7
 8003202:	2202      	movs	r2, #2
 8003204:	701a      	strb	r2, [r3, #0]
 8003206:	e076      	b.n	80032f6 <UART_SetConfig+0x246>
 8003208:	231b      	movs	r3, #27
 800320a:	2220      	movs	r2, #32
 800320c:	189b      	adds	r3, r3, r2
 800320e:	19db      	adds	r3, r3, r7
 8003210:	2204      	movs	r2, #4
 8003212:	701a      	strb	r2, [r3, #0]
 8003214:	e06f      	b.n	80032f6 <UART_SetConfig+0x246>
 8003216:	231b      	movs	r3, #27
 8003218:	2220      	movs	r2, #32
 800321a:	189b      	adds	r3, r3, r2
 800321c:	19db      	adds	r3, r3, r7
 800321e:	2208      	movs	r2, #8
 8003220:	701a      	strb	r2, [r3, #0]
 8003222:	e068      	b.n	80032f6 <UART_SetConfig+0x246>
 8003224:	231b      	movs	r3, #27
 8003226:	2220      	movs	r2, #32
 8003228:	189b      	adds	r3, r3, r2
 800322a:	19db      	adds	r3, r3, r7
 800322c:	2210      	movs	r2, #16
 800322e:	701a      	strb	r2, [r3, #0]
 8003230:	e061      	b.n	80032f6 <UART_SetConfig+0x246>
 8003232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a61      	ldr	r2, [pc, #388]	; (80033bc <UART_SetConfig+0x30c>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d106      	bne.n	800324a <UART_SetConfig+0x19a>
 800323c:	231b      	movs	r3, #27
 800323e:	2220      	movs	r2, #32
 8003240:	189b      	adds	r3, r3, r2
 8003242:	19db      	adds	r3, r3, r7
 8003244:	2200      	movs	r2, #0
 8003246:	701a      	strb	r2, [r3, #0]
 8003248:	e055      	b.n	80032f6 <UART_SetConfig+0x246>
 800324a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a5c      	ldr	r2, [pc, #368]	; (80033c0 <UART_SetConfig+0x310>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d106      	bne.n	8003262 <UART_SetConfig+0x1b2>
 8003254:	231b      	movs	r3, #27
 8003256:	2220      	movs	r2, #32
 8003258:	189b      	adds	r3, r3, r2
 800325a:	19db      	adds	r3, r3, r7
 800325c:	2200      	movs	r2, #0
 800325e:	701a      	strb	r2, [r3, #0]
 8003260:	e049      	b.n	80032f6 <UART_SetConfig+0x246>
 8003262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a50      	ldr	r2, [pc, #320]	; (80033a8 <UART_SetConfig+0x2f8>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d13e      	bne.n	80032ea <UART_SetConfig+0x23a>
 800326c:	4b51      	ldr	r3, [pc, #324]	; (80033b4 <UART_SetConfig+0x304>)
 800326e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003270:	23c0      	movs	r3, #192	; 0xc0
 8003272:	011b      	lsls	r3, r3, #4
 8003274:	4013      	ands	r3, r2
 8003276:	22c0      	movs	r2, #192	; 0xc0
 8003278:	0112      	lsls	r2, r2, #4
 800327a:	4293      	cmp	r3, r2
 800327c:	d027      	beq.n	80032ce <UART_SetConfig+0x21e>
 800327e:	22c0      	movs	r2, #192	; 0xc0
 8003280:	0112      	lsls	r2, r2, #4
 8003282:	4293      	cmp	r3, r2
 8003284:	d82a      	bhi.n	80032dc <UART_SetConfig+0x22c>
 8003286:	2280      	movs	r2, #128	; 0x80
 8003288:	0112      	lsls	r2, r2, #4
 800328a:	4293      	cmp	r3, r2
 800328c:	d011      	beq.n	80032b2 <UART_SetConfig+0x202>
 800328e:	2280      	movs	r2, #128	; 0x80
 8003290:	0112      	lsls	r2, r2, #4
 8003292:	4293      	cmp	r3, r2
 8003294:	d822      	bhi.n	80032dc <UART_SetConfig+0x22c>
 8003296:	2b00      	cmp	r3, #0
 8003298:	d004      	beq.n	80032a4 <UART_SetConfig+0x1f4>
 800329a:	2280      	movs	r2, #128	; 0x80
 800329c:	00d2      	lsls	r2, r2, #3
 800329e:	4293      	cmp	r3, r2
 80032a0:	d00e      	beq.n	80032c0 <UART_SetConfig+0x210>
 80032a2:	e01b      	b.n	80032dc <UART_SetConfig+0x22c>
 80032a4:	231b      	movs	r3, #27
 80032a6:	2220      	movs	r2, #32
 80032a8:	189b      	adds	r3, r3, r2
 80032aa:	19db      	adds	r3, r3, r7
 80032ac:	2200      	movs	r2, #0
 80032ae:	701a      	strb	r2, [r3, #0]
 80032b0:	e021      	b.n	80032f6 <UART_SetConfig+0x246>
 80032b2:	231b      	movs	r3, #27
 80032b4:	2220      	movs	r2, #32
 80032b6:	189b      	adds	r3, r3, r2
 80032b8:	19db      	adds	r3, r3, r7
 80032ba:	2202      	movs	r2, #2
 80032bc:	701a      	strb	r2, [r3, #0]
 80032be:	e01a      	b.n	80032f6 <UART_SetConfig+0x246>
 80032c0:	231b      	movs	r3, #27
 80032c2:	2220      	movs	r2, #32
 80032c4:	189b      	adds	r3, r3, r2
 80032c6:	19db      	adds	r3, r3, r7
 80032c8:	2204      	movs	r2, #4
 80032ca:	701a      	strb	r2, [r3, #0]
 80032cc:	e013      	b.n	80032f6 <UART_SetConfig+0x246>
 80032ce:	231b      	movs	r3, #27
 80032d0:	2220      	movs	r2, #32
 80032d2:	189b      	adds	r3, r3, r2
 80032d4:	19db      	adds	r3, r3, r7
 80032d6:	2208      	movs	r2, #8
 80032d8:	701a      	strb	r2, [r3, #0]
 80032da:	e00c      	b.n	80032f6 <UART_SetConfig+0x246>
 80032dc:	231b      	movs	r3, #27
 80032de:	2220      	movs	r2, #32
 80032e0:	189b      	adds	r3, r3, r2
 80032e2:	19db      	adds	r3, r3, r7
 80032e4:	2210      	movs	r2, #16
 80032e6:	701a      	strb	r2, [r3, #0]
 80032e8:	e005      	b.n	80032f6 <UART_SetConfig+0x246>
 80032ea:	231b      	movs	r3, #27
 80032ec:	2220      	movs	r2, #32
 80032ee:	189b      	adds	r3, r3, r2
 80032f0:	19db      	adds	r3, r3, r7
 80032f2:	2210      	movs	r2, #16
 80032f4:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80032f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a2b      	ldr	r2, [pc, #172]	; (80033a8 <UART_SetConfig+0x2f8>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d000      	beq.n	8003302 <UART_SetConfig+0x252>
 8003300:	e0a9      	b.n	8003456 <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003302:	231b      	movs	r3, #27
 8003304:	2220      	movs	r2, #32
 8003306:	189b      	adds	r3, r3, r2
 8003308:	19db      	adds	r3, r3, r7
 800330a:	781b      	ldrb	r3, [r3, #0]
 800330c:	2b08      	cmp	r3, #8
 800330e:	d015      	beq.n	800333c <UART_SetConfig+0x28c>
 8003310:	dc18      	bgt.n	8003344 <UART_SetConfig+0x294>
 8003312:	2b04      	cmp	r3, #4
 8003314:	d00d      	beq.n	8003332 <UART_SetConfig+0x282>
 8003316:	dc15      	bgt.n	8003344 <UART_SetConfig+0x294>
 8003318:	2b00      	cmp	r3, #0
 800331a:	d002      	beq.n	8003322 <UART_SetConfig+0x272>
 800331c:	2b02      	cmp	r3, #2
 800331e:	d005      	beq.n	800332c <UART_SetConfig+0x27c>
 8003320:	e010      	b.n	8003344 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003322:	f7ff f855 	bl	80023d0 <HAL_RCC_GetPCLK1Freq>
 8003326:	0003      	movs	r3, r0
 8003328:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800332a:	e014      	b.n	8003356 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800332c:	4b25      	ldr	r3, [pc, #148]	; (80033c4 <UART_SetConfig+0x314>)
 800332e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003330:	e011      	b.n	8003356 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003332:	f7fe ffc1 	bl	80022b8 <HAL_RCC_GetSysClockFreq>
 8003336:	0003      	movs	r3, r0
 8003338:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800333a:	e00c      	b.n	8003356 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800333c:	2380      	movs	r3, #128	; 0x80
 800333e:	021b      	lsls	r3, r3, #8
 8003340:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003342:	e008      	b.n	8003356 <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 8003344:	2300      	movs	r3, #0
 8003346:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003348:	231a      	movs	r3, #26
 800334a:	2220      	movs	r2, #32
 800334c:	189b      	adds	r3, r3, r2
 800334e:	19db      	adds	r3, r3, r7
 8003350:	2201      	movs	r2, #1
 8003352:	701a      	strb	r2, [r3, #0]
        break;
 8003354:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003356:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003358:	2b00      	cmp	r3, #0
 800335a:	d100      	bne.n	800335e <UART_SetConfig+0x2ae>
 800335c:	e14b      	b.n	80035f6 <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800335e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003360:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003362:	4b19      	ldr	r3, [pc, #100]	; (80033c8 <UART_SetConfig+0x318>)
 8003364:	0052      	lsls	r2, r2, #1
 8003366:	5ad3      	ldrh	r3, [r2, r3]
 8003368:	0019      	movs	r1, r3
 800336a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800336c:	f7fc fedc 	bl	8000128 <__udivsi3>
 8003370:	0003      	movs	r3, r0
 8003372:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003376:	685a      	ldr	r2, [r3, #4]
 8003378:	0013      	movs	r3, r2
 800337a:	005b      	lsls	r3, r3, #1
 800337c:	189b      	adds	r3, r3, r2
 800337e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003380:	429a      	cmp	r2, r3
 8003382:	d305      	bcc.n	8003390 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800338a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800338c:	429a      	cmp	r2, r3
 800338e:	d91d      	bls.n	80033cc <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8003390:	231a      	movs	r3, #26
 8003392:	2220      	movs	r2, #32
 8003394:	189b      	adds	r3, r3, r2
 8003396:	19db      	adds	r3, r3, r7
 8003398:	2201      	movs	r2, #1
 800339a:	701a      	strb	r2, [r3, #0]
 800339c:	e12b      	b.n	80035f6 <UART_SetConfig+0x546>
 800339e:	46c0      	nop			; (mov r8, r8)
 80033a0:	cfff69f3 	.word	0xcfff69f3
 80033a4:	ffffcfff 	.word	0xffffcfff
 80033a8:	40008000 	.word	0x40008000
 80033ac:	11fff4ff 	.word	0x11fff4ff
 80033b0:	40013800 	.word	0x40013800
 80033b4:	40021000 	.word	0x40021000
 80033b8:	40004400 	.word	0x40004400
 80033bc:	40004800 	.word	0x40004800
 80033c0:	40004c00 	.word	0x40004c00
 80033c4:	00f42400 	.word	0x00f42400
 80033c8:	0800545c 	.word	0x0800545c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80033cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033ce:	61bb      	str	r3, [r7, #24]
 80033d0:	2300      	movs	r3, #0
 80033d2:	61fb      	str	r3, [r7, #28]
 80033d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80033d8:	4b92      	ldr	r3, [pc, #584]	; (8003624 <UART_SetConfig+0x574>)
 80033da:	0052      	lsls	r2, r2, #1
 80033dc:	5ad3      	ldrh	r3, [r2, r3]
 80033de:	613b      	str	r3, [r7, #16]
 80033e0:	2300      	movs	r3, #0
 80033e2:	617b      	str	r3, [r7, #20]
 80033e4:	693a      	ldr	r2, [r7, #16]
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	69b8      	ldr	r0, [r7, #24]
 80033ea:	69f9      	ldr	r1, [r7, #28]
 80033ec:	f7fd f812 	bl	8000414 <__aeabi_uldivmod>
 80033f0:	0002      	movs	r2, r0
 80033f2:	000b      	movs	r3, r1
 80033f4:	0e11      	lsrs	r1, r2, #24
 80033f6:	021d      	lsls	r5, r3, #8
 80033f8:	430d      	orrs	r5, r1
 80033fa:	0214      	lsls	r4, r2, #8
 80033fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	085b      	lsrs	r3, r3, #1
 8003402:	60bb      	str	r3, [r7, #8]
 8003404:	2300      	movs	r3, #0
 8003406:	60fb      	str	r3, [r7, #12]
 8003408:	68b8      	ldr	r0, [r7, #8]
 800340a:	68f9      	ldr	r1, [r7, #12]
 800340c:	1900      	adds	r0, r0, r4
 800340e:	4169      	adcs	r1, r5
 8003410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	603b      	str	r3, [r7, #0]
 8003416:	2300      	movs	r3, #0
 8003418:	607b      	str	r3, [r7, #4]
 800341a:	683a      	ldr	r2, [r7, #0]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	f7fc fff9 	bl	8000414 <__aeabi_uldivmod>
 8003422:	0002      	movs	r2, r0
 8003424:	000b      	movs	r3, r1
 8003426:	0013      	movs	r3, r2
 8003428:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800342a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800342c:	23c0      	movs	r3, #192	; 0xc0
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	429a      	cmp	r2, r3
 8003432:	d309      	bcc.n	8003448 <UART_SetConfig+0x398>
 8003434:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003436:	2380      	movs	r3, #128	; 0x80
 8003438:	035b      	lsls	r3, r3, #13
 800343a:	429a      	cmp	r2, r3
 800343c:	d204      	bcs.n	8003448 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 800343e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003444:	60da      	str	r2, [r3, #12]
 8003446:	e0d6      	b.n	80035f6 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8003448:	231a      	movs	r3, #26
 800344a:	2220      	movs	r2, #32
 800344c:	189b      	adds	r3, r3, r2
 800344e:	19db      	adds	r3, r3, r7
 8003450:	2201      	movs	r2, #1
 8003452:	701a      	strb	r2, [r3, #0]
 8003454:	e0cf      	b.n	80035f6 <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003458:	69da      	ldr	r2, [r3, #28]
 800345a:	2380      	movs	r3, #128	; 0x80
 800345c:	021b      	lsls	r3, r3, #8
 800345e:	429a      	cmp	r2, r3
 8003460:	d000      	beq.n	8003464 <UART_SetConfig+0x3b4>
 8003462:	e070      	b.n	8003546 <UART_SetConfig+0x496>
  {
    switch (clocksource)
 8003464:	231b      	movs	r3, #27
 8003466:	2220      	movs	r2, #32
 8003468:	189b      	adds	r3, r3, r2
 800346a:	19db      	adds	r3, r3, r7
 800346c:	781b      	ldrb	r3, [r3, #0]
 800346e:	2b08      	cmp	r3, #8
 8003470:	d015      	beq.n	800349e <UART_SetConfig+0x3ee>
 8003472:	dc18      	bgt.n	80034a6 <UART_SetConfig+0x3f6>
 8003474:	2b04      	cmp	r3, #4
 8003476:	d00d      	beq.n	8003494 <UART_SetConfig+0x3e4>
 8003478:	dc15      	bgt.n	80034a6 <UART_SetConfig+0x3f6>
 800347a:	2b00      	cmp	r3, #0
 800347c:	d002      	beq.n	8003484 <UART_SetConfig+0x3d4>
 800347e:	2b02      	cmp	r3, #2
 8003480:	d005      	beq.n	800348e <UART_SetConfig+0x3de>
 8003482:	e010      	b.n	80034a6 <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003484:	f7fe ffa4 	bl	80023d0 <HAL_RCC_GetPCLK1Freq>
 8003488:	0003      	movs	r3, r0
 800348a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800348c:	e014      	b.n	80034b8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800348e:	4b66      	ldr	r3, [pc, #408]	; (8003628 <UART_SetConfig+0x578>)
 8003490:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003492:	e011      	b.n	80034b8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003494:	f7fe ff10 	bl	80022b8 <HAL_RCC_GetSysClockFreq>
 8003498:	0003      	movs	r3, r0
 800349a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800349c:	e00c      	b.n	80034b8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800349e:	2380      	movs	r3, #128	; 0x80
 80034a0:	021b      	lsls	r3, r3, #8
 80034a2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80034a4:	e008      	b.n	80034b8 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80034a6:	2300      	movs	r3, #0
 80034a8:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80034aa:	231a      	movs	r3, #26
 80034ac:	2220      	movs	r2, #32
 80034ae:	189b      	adds	r3, r3, r2
 80034b0:	19db      	adds	r3, r3, r7
 80034b2:	2201      	movs	r2, #1
 80034b4:	701a      	strb	r2, [r3, #0]
        break;
 80034b6:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80034b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d100      	bne.n	80034c0 <UART_SetConfig+0x410>
 80034be:	e09a      	b.n	80035f6 <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80034c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80034c4:	4b57      	ldr	r3, [pc, #348]	; (8003624 <UART_SetConfig+0x574>)
 80034c6:	0052      	lsls	r2, r2, #1
 80034c8:	5ad3      	ldrh	r3, [r2, r3]
 80034ca:	0019      	movs	r1, r3
 80034cc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80034ce:	f7fc fe2b 	bl	8000128 <__udivsi3>
 80034d2:	0003      	movs	r3, r0
 80034d4:	005a      	lsls	r2, r3, #1
 80034d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	085b      	lsrs	r3, r3, #1
 80034dc:	18d2      	adds	r2, r2, r3
 80034de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	0019      	movs	r1, r3
 80034e4:	0010      	movs	r0, r2
 80034e6:	f7fc fe1f 	bl	8000128 <__udivsi3>
 80034ea:	0003      	movs	r3, r0
 80034ec:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034f0:	2b0f      	cmp	r3, #15
 80034f2:	d921      	bls.n	8003538 <UART_SetConfig+0x488>
 80034f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034f6:	2380      	movs	r3, #128	; 0x80
 80034f8:	025b      	lsls	r3, r3, #9
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d21c      	bcs.n	8003538 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80034fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003500:	b29a      	uxth	r2, r3
 8003502:	200e      	movs	r0, #14
 8003504:	2420      	movs	r4, #32
 8003506:	1903      	adds	r3, r0, r4
 8003508:	19db      	adds	r3, r3, r7
 800350a:	210f      	movs	r1, #15
 800350c:	438a      	bics	r2, r1
 800350e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003512:	085b      	lsrs	r3, r3, #1
 8003514:	b29b      	uxth	r3, r3
 8003516:	2207      	movs	r2, #7
 8003518:	4013      	ands	r3, r2
 800351a:	b299      	uxth	r1, r3
 800351c:	1903      	adds	r3, r0, r4
 800351e:	19db      	adds	r3, r3, r7
 8003520:	1902      	adds	r2, r0, r4
 8003522:	19d2      	adds	r2, r2, r7
 8003524:	8812      	ldrh	r2, [r2, #0]
 8003526:	430a      	orrs	r2, r1
 8003528:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800352a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	1902      	adds	r2, r0, r4
 8003530:	19d2      	adds	r2, r2, r7
 8003532:	8812      	ldrh	r2, [r2, #0]
 8003534:	60da      	str	r2, [r3, #12]
 8003536:	e05e      	b.n	80035f6 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8003538:	231a      	movs	r3, #26
 800353a:	2220      	movs	r2, #32
 800353c:	189b      	adds	r3, r3, r2
 800353e:	19db      	adds	r3, r3, r7
 8003540:	2201      	movs	r2, #1
 8003542:	701a      	strb	r2, [r3, #0]
 8003544:	e057      	b.n	80035f6 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003546:	231b      	movs	r3, #27
 8003548:	2220      	movs	r2, #32
 800354a:	189b      	adds	r3, r3, r2
 800354c:	19db      	adds	r3, r3, r7
 800354e:	781b      	ldrb	r3, [r3, #0]
 8003550:	2b08      	cmp	r3, #8
 8003552:	d015      	beq.n	8003580 <UART_SetConfig+0x4d0>
 8003554:	dc18      	bgt.n	8003588 <UART_SetConfig+0x4d8>
 8003556:	2b04      	cmp	r3, #4
 8003558:	d00d      	beq.n	8003576 <UART_SetConfig+0x4c6>
 800355a:	dc15      	bgt.n	8003588 <UART_SetConfig+0x4d8>
 800355c:	2b00      	cmp	r3, #0
 800355e:	d002      	beq.n	8003566 <UART_SetConfig+0x4b6>
 8003560:	2b02      	cmp	r3, #2
 8003562:	d005      	beq.n	8003570 <UART_SetConfig+0x4c0>
 8003564:	e010      	b.n	8003588 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003566:	f7fe ff33 	bl	80023d0 <HAL_RCC_GetPCLK1Freq>
 800356a:	0003      	movs	r3, r0
 800356c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800356e:	e014      	b.n	800359a <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003570:	4b2d      	ldr	r3, [pc, #180]	; (8003628 <UART_SetConfig+0x578>)
 8003572:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003574:	e011      	b.n	800359a <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003576:	f7fe fe9f 	bl	80022b8 <HAL_RCC_GetSysClockFreq>
 800357a:	0003      	movs	r3, r0
 800357c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800357e:	e00c      	b.n	800359a <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003580:	2380      	movs	r3, #128	; 0x80
 8003582:	021b      	lsls	r3, r3, #8
 8003584:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003586:	e008      	b.n	800359a <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8003588:	2300      	movs	r3, #0
 800358a:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800358c:	231a      	movs	r3, #26
 800358e:	2220      	movs	r2, #32
 8003590:	189b      	adds	r3, r3, r2
 8003592:	19db      	adds	r3, r3, r7
 8003594:	2201      	movs	r2, #1
 8003596:	701a      	strb	r2, [r3, #0]
        break;
 8003598:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800359a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800359c:	2b00      	cmp	r3, #0
 800359e:	d02a      	beq.n	80035f6 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80035a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035a4:	4b1f      	ldr	r3, [pc, #124]	; (8003624 <UART_SetConfig+0x574>)
 80035a6:	0052      	lsls	r2, r2, #1
 80035a8:	5ad3      	ldrh	r3, [r2, r3]
 80035aa:	0019      	movs	r1, r3
 80035ac:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80035ae:	f7fc fdbb 	bl	8000128 <__udivsi3>
 80035b2:	0003      	movs	r3, r0
 80035b4:	001a      	movs	r2, r3
 80035b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	085b      	lsrs	r3, r3, #1
 80035bc:	18d2      	adds	r2, r2, r3
 80035be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	0019      	movs	r1, r3
 80035c4:	0010      	movs	r0, r2
 80035c6:	f7fc fdaf 	bl	8000128 <__udivsi3>
 80035ca:	0003      	movs	r3, r0
 80035cc:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035d0:	2b0f      	cmp	r3, #15
 80035d2:	d90a      	bls.n	80035ea <UART_SetConfig+0x53a>
 80035d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035d6:	2380      	movs	r3, #128	; 0x80
 80035d8:	025b      	lsls	r3, r3, #9
 80035da:	429a      	cmp	r2, r3
 80035dc:	d205      	bcs.n	80035ea <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80035de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035e0:	b29a      	uxth	r2, r3
 80035e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	60da      	str	r2, [r3, #12]
 80035e8:	e005      	b.n	80035f6 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80035ea:	231a      	movs	r3, #26
 80035ec:	2220      	movs	r2, #32
 80035ee:	189b      	adds	r3, r3, r2
 80035f0:	19db      	adds	r3, r3, r7
 80035f2:	2201      	movs	r2, #1
 80035f4:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80035f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f8:	226a      	movs	r2, #106	; 0x6a
 80035fa:	2101      	movs	r1, #1
 80035fc:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80035fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003600:	2268      	movs	r2, #104	; 0x68
 8003602:	2101      	movs	r1, #1
 8003604:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003608:	2200      	movs	r2, #0
 800360a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800360c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360e:	2200      	movs	r2, #0
 8003610:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003612:	231a      	movs	r3, #26
 8003614:	2220      	movs	r2, #32
 8003616:	189b      	adds	r3, r3, r2
 8003618:	19db      	adds	r3, r3, r7
 800361a:	781b      	ldrb	r3, [r3, #0]
}
 800361c:	0018      	movs	r0, r3
 800361e:	46bd      	mov	sp, r7
 8003620:	b010      	add	sp, #64	; 0x40
 8003622:	bdb0      	pop	{r4, r5, r7, pc}
 8003624:	0800545c 	.word	0x0800545c
 8003628:	00f42400 	.word	0x00f42400

0800362c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b082      	sub	sp, #8
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003638:	2201      	movs	r2, #1
 800363a:	4013      	ands	r3, r2
 800363c:	d00b      	beq.n	8003656 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	4a4a      	ldr	r2, [pc, #296]	; (8003770 <UART_AdvFeatureConfig+0x144>)
 8003646:	4013      	ands	r3, r2
 8003648:	0019      	movs	r1, r3
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	430a      	orrs	r2, r1
 8003654:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800365a:	2202      	movs	r2, #2
 800365c:	4013      	ands	r3, r2
 800365e:	d00b      	beq.n	8003678 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	4a43      	ldr	r2, [pc, #268]	; (8003774 <UART_AdvFeatureConfig+0x148>)
 8003668:	4013      	ands	r3, r2
 800366a:	0019      	movs	r1, r3
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	430a      	orrs	r2, r1
 8003676:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800367c:	2204      	movs	r2, #4
 800367e:	4013      	ands	r3, r2
 8003680:	d00b      	beq.n	800369a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	4a3b      	ldr	r2, [pc, #236]	; (8003778 <UART_AdvFeatureConfig+0x14c>)
 800368a:	4013      	ands	r3, r2
 800368c:	0019      	movs	r1, r3
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	430a      	orrs	r2, r1
 8003698:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800369e:	2208      	movs	r2, #8
 80036a0:	4013      	ands	r3, r2
 80036a2:	d00b      	beq.n	80036bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	4a34      	ldr	r2, [pc, #208]	; (800377c <UART_AdvFeatureConfig+0x150>)
 80036ac:	4013      	ands	r3, r2
 80036ae:	0019      	movs	r1, r3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	430a      	orrs	r2, r1
 80036ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036c0:	2210      	movs	r2, #16
 80036c2:	4013      	ands	r3, r2
 80036c4:	d00b      	beq.n	80036de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	4a2c      	ldr	r2, [pc, #176]	; (8003780 <UART_AdvFeatureConfig+0x154>)
 80036ce:	4013      	ands	r3, r2
 80036d0:	0019      	movs	r1, r3
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	430a      	orrs	r2, r1
 80036dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e2:	2220      	movs	r2, #32
 80036e4:	4013      	ands	r3, r2
 80036e6:	d00b      	beq.n	8003700 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	4a25      	ldr	r2, [pc, #148]	; (8003784 <UART_AdvFeatureConfig+0x158>)
 80036f0:	4013      	ands	r3, r2
 80036f2:	0019      	movs	r1, r3
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	430a      	orrs	r2, r1
 80036fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003704:	2240      	movs	r2, #64	; 0x40
 8003706:	4013      	ands	r3, r2
 8003708:	d01d      	beq.n	8003746 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	4a1d      	ldr	r2, [pc, #116]	; (8003788 <UART_AdvFeatureConfig+0x15c>)
 8003712:	4013      	ands	r3, r2
 8003714:	0019      	movs	r1, r3
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	430a      	orrs	r2, r1
 8003720:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003726:	2380      	movs	r3, #128	; 0x80
 8003728:	035b      	lsls	r3, r3, #13
 800372a:	429a      	cmp	r2, r3
 800372c:	d10b      	bne.n	8003746 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	4a15      	ldr	r2, [pc, #84]	; (800378c <UART_AdvFeatureConfig+0x160>)
 8003736:	4013      	ands	r3, r2
 8003738:	0019      	movs	r1, r3
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	430a      	orrs	r2, r1
 8003744:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800374a:	2280      	movs	r2, #128	; 0x80
 800374c:	4013      	ands	r3, r2
 800374e:	d00b      	beq.n	8003768 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	4a0e      	ldr	r2, [pc, #56]	; (8003790 <UART_AdvFeatureConfig+0x164>)
 8003758:	4013      	ands	r3, r2
 800375a:	0019      	movs	r1, r3
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	430a      	orrs	r2, r1
 8003766:	605a      	str	r2, [r3, #4]
  }
}
 8003768:	46c0      	nop			; (mov r8, r8)
 800376a:	46bd      	mov	sp, r7
 800376c:	b002      	add	sp, #8
 800376e:	bd80      	pop	{r7, pc}
 8003770:	fffdffff 	.word	0xfffdffff
 8003774:	fffeffff 	.word	0xfffeffff
 8003778:	fffbffff 	.word	0xfffbffff
 800377c:	ffff7fff 	.word	0xffff7fff
 8003780:	ffffefff 	.word	0xffffefff
 8003784:	ffffdfff 	.word	0xffffdfff
 8003788:	ffefffff 	.word	0xffefffff
 800378c:	ff9fffff 	.word	0xff9fffff
 8003790:	fff7ffff 	.word	0xfff7ffff

08003794 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b086      	sub	sp, #24
 8003798:	af02      	add	r7, sp, #8
 800379a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	228c      	movs	r2, #140	; 0x8c
 80037a0:	2100      	movs	r1, #0
 80037a2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80037a4:	f7fd fd90 	bl	80012c8 <HAL_GetTick>
 80037a8:	0003      	movs	r3, r0
 80037aa:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	2208      	movs	r2, #8
 80037b4:	4013      	ands	r3, r2
 80037b6:	2b08      	cmp	r3, #8
 80037b8:	d10c      	bne.n	80037d4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2280      	movs	r2, #128	; 0x80
 80037be:	0391      	lsls	r1, r2, #14
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	4a18      	ldr	r2, [pc, #96]	; (8003824 <UART_CheckIdleState+0x90>)
 80037c4:	9200      	str	r2, [sp, #0]
 80037c6:	2200      	movs	r2, #0
 80037c8:	f000 f82e 	bl	8003828 <UART_WaitOnFlagUntilTimeout>
 80037cc:	1e03      	subs	r3, r0, #0
 80037ce:	d001      	beq.n	80037d4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037d0:	2303      	movs	r3, #3
 80037d2:	e023      	b.n	800381c <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	2204      	movs	r2, #4
 80037dc:	4013      	ands	r3, r2
 80037de:	2b04      	cmp	r3, #4
 80037e0:	d10c      	bne.n	80037fc <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2280      	movs	r2, #128	; 0x80
 80037e6:	03d1      	lsls	r1, r2, #15
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	4a0e      	ldr	r2, [pc, #56]	; (8003824 <UART_CheckIdleState+0x90>)
 80037ec:	9200      	str	r2, [sp, #0]
 80037ee:	2200      	movs	r2, #0
 80037f0:	f000 f81a 	bl	8003828 <UART_WaitOnFlagUntilTimeout>
 80037f4:	1e03      	subs	r3, r0, #0
 80037f6:	d001      	beq.n	80037fc <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037f8:	2303      	movs	r3, #3
 80037fa:	e00f      	b.n	800381c <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2284      	movs	r2, #132	; 0x84
 8003800:	2120      	movs	r1, #32
 8003802:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2288      	movs	r2, #136	; 0x88
 8003808:	2120      	movs	r1, #32
 800380a:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2200      	movs	r2, #0
 8003810:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2280      	movs	r2, #128	; 0x80
 8003816:	2100      	movs	r1, #0
 8003818:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800381a:	2300      	movs	r3, #0
}
 800381c:	0018      	movs	r0, r3
 800381e:	46bd      	mov	sp, r7
 8003820:	b004      	add	sp, #16
 8003822:	bd80      	pop	{r7, pc}
 8003824:	01ffffff 	.word	0x01ffffff

08003828 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b094      	sub	sp, #80	; 0x50
 800382c:	af00      	add	r7, sp, #0
 800382e:	60f8      	str	r0, [r7, #12]
 8003830:	60b9      	str	r1, [r7, #8]
 8003832:	603b      	str	r3, [r7, #0]
 8003834:	1dfb      	adds	r3, r7, #7
 8003836:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003838:	e0a7      	b.n	800398a <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800383a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800383c:	3301      	adds	r3, #1
 800383e:	d100      	bne.n	8003842 <UART_WaitOnFlagUntilTimeout+0x1a>
 8003840:	e0a3      	b.n	800398a <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003842:	f7fd fd41 	bl	80012c8 <HAL_GetTick>
 8003846:	0002      	movs	r2, r0
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	1ad3      	subs	r3, r2, r3
 800384c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800384e:	429a      	cmp	r2, r3
 8003850:	d302      	bcc.n	8003858 <UART_WaitOnFlagUntilTimeout+0x30>
 8003852:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003854:	2b00      	cmp	r3, #0
 8003856:	d13f      	bne.n	80038d8 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003858:	f3ef 8310 	mrs	r3, PRIMASK
 800385c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800385e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003860:	647b      	str	r3, [r7, #68]	; 0x44
 8003862:	2301      	movs	r3, #1
 8003864:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003868:	f383 8810 	msr	PRIMASK, r3
}
 800386c:	46c0      	nop			; (mov r8, r8)
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	494e      	ldr	r1, [pc, #312]	; (80039b4 <UART_WaitOnFlagUntilTimeout+0x18c>)
 800387a:	400a      	ands	r2, r1
 800387c:	601a      	str	r2, [r3, #0]
 800387e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003880:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003884:	f383 8810 	msr	PRIMASK, r3
}
 8003888:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800388a:	f3ef 8310 	mrs	r3, PRIMASK
 800388e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003890:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003892:	643b      	str	r3, [r7, #64]	; 0x40
 8003894:	2301      	movs	r3, #1
 8003896:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800389a:	f383 8810 	msr	PRIMASK, r3
}
 800389e:	46c0      	nop			; (mov r8, r8)
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	689a      	ldr	r2, [r3, #8]
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	2101      	movs	r1, #1
 80038ac:	438a      	bics	r2, r1
 80038ae:	609a      	str	r2, [r3, #8]
 80038b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038b6:	f383 8810 	msr	PRIMASK, r3
}
 80038ba:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2284      	movs	r2, #132	; 0x84
 80038c0:	2120      	movs	r1, #32
 80038c2:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2288      	movs	r2, #136	; 0x88
 80038c8:	2120      	movs	r1, #32
 80038ca:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2280      	movs	r2, #128	; 0x80
 80038d0:	2100      	movs	r1, #0
 80038d2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80038d4:	2303      	movs	r3, #3
 80038d6:	e069      	b.n	80039ac <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	2204      	movs	r2, #4
 80038e0:	4013      	ands	r3, r2
 80038e2:	d052      	beq.n	800398a <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	69da      	ldr	r2, [r3, #28]
 80038ea:	2380      	movs	r3, #128	; 0x80
 80038ec:	011b      	lsls	r3, r3, #4
 80038ee:	401a      	ands	r2, r3
 80038f0:	2380      	movs	r3, #128	; 0x80
 80038f2:	011b      	lsls	r3, r3, #4
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d148      	bne.n	800398a <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	2280      	movs	r2, #128	; 0x80
 80038fe:	0112      	lsls	r2, r2, #4
 8003900:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003902:	f3ef 8310 	mrs	r3, PRIMASK
 8003906:	613b      	str	r3, [r7, #16]
  return(result);
 8003908:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800390a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800390c:	2301      	movs	r3, #1
 800390e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	f383 8810 	msr	PRIMASK, r3
}
 8003916:	46c0      	nop			; (mov r8, r8)
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4924      	ldr	r1, [pc, #144]	; (80039b4 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003924:	400a      	ands	r2, r1
 8003926:	601a      	str	r2, [r3, #0]
 8003928:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800392a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800392c:	69bb      	ldr	r3, [r7, #24]
 800392e:	f383 8810 	msr	PRIMASK, r3
}
 8003932:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003934:	f3ef 8310 	mrs	r3, PRIMASK
 8003938:	61fb      	str	r3, [r7, #28]
  return(result);
 800393a:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800393c:	64bb      	str	r3, [r7, #72]	; 0x48
 800393e:	2301      	movs	r3, #1
 8003940:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003942:	6a3b      	ldr	r3, [r7, #32]
 8003944:	f383 8810 	msr	PRIMASK, r3
}
 8003948:	46c0      	nop			; (mov r8, r8)
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	689a      	ldr	r2, [r3, #8]
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	2101      	movs	r1, #1
 8003956:	438a      	bics	r2, r1
 8003958:	609a      	str	r2, [r3, #8]
 800395a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800395c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800395e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003960:	f383 8810 	msr	PRIMASK, r3
}
 8003964:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2284      	movs	r2, #132	; 0x84
 800396a:	2120      	movs	r1, #32
 800396c:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2288      	movs	r2, #136	; 0x88
 8003972:	2120      	movs	r1, #32
 8003974:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	228c      	movs	r2, #140	; 0x8c
 800397a:	2120      	movs	r1, #32
 800397c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2280      	movs	r2, #128	; 0x80
 8003982:	2100      	movs	r1, #0
 8003984:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003986:	2303      	movs	r3, #3
 8003988:	e010      	b.n	80039ac <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	69db      	ldr	r3, [r3, #28]
 8003990:	68ba      	ldr	r2, [r7, #8]
 8003992:	4013      	ands	r3, r2
 8003994:	68ba      	ldr	r2, [r7, #8]
 8003996:	1ad3      	subs	r3, r2, r3
 8003998:	425a      	negs	r2, r3
 800399a:	4153      	adcs	r3, r2
 800399c:	b2db      	uxtb	r3, r3
 800399e:	001a      	movs	r2, r3
 80039a0:	1dfb      	adds	r3, r7, #7
 80039a2:	781b      	ldrb	r3, [r3, #0]
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d100      	bne.n	80039aa <UART_WaitOnFlagUntilTimeout+0x182>
 80039a8:	e747      	b.n	800383a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80039aa:	2300      	movs	r3, #0
}
 80039ac:	0018      	movs	r0, r3
 80039ae:	46bd      	mov	sp, r7
 80039b0:	b014      	add	sp, #80	; 0x50
 80039b2:	bd80      	pop	{r7, pc}
 80039b4:	fffffe5f 	.word	0xfffffe5f

080039b8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b098      	sub	sp, #96	; 0x60
 80039bc:	af00      	add	r7, sp, #0
 80039be:	60f8      	str	r0, [r7, #12]
 80039c0:	60b9      	str	r1, [r7, #8]
 80039c2:	1dbb      	adds	r3, r7, #6
 80039c4:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	68ba      	ldr	r2, [r7, #8]
 80039ca:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	1dba      	adds	r2, r7, #6
 80039d0:	215c      	movs	r1, #92	; 0x5c
 80039d2:	8812      	ldrh	r2, [r2, #0]
 80039d4:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	1dba      	adds	r2, r7, #6
 80039da:	215e      	movs	r1, #94	; 0x5e
 80039dc:	8812      	ldrh	r2, [r2, #0]
 80039de:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2200      	movs	r2, #0
 80039e4:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	689a      	ldr	r2, [r3, #8]
 80039ea:	2380      	movs	r3, #128	; 0x80
 80039ec:	015b      	lsls	r3, r3, #5
 80039ee:	429a      	cmp	r2, r3
 80039f0:	d10d      	bne.n	8003a0e <UART_Start_Receive_IT+0x56>
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	691b      	ldr	r3, [r3, #16]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d104      	bne.n	8003a04 <UART_Start_Receive_IT+0x4c>
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2260      	movs	r2, #96	; 0x60
 80039fe:	497f      	ldr	r1, [pc, #508]	; (8003bfc <UART_Start_Receive_IT+0x244>)
 8003a00:	5299      	strh	r1, [r3, r2]
 8003a02:	e02e      	b.n	8003a62 <UART_Start_Receive_IT+0xaa>
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2260      	movs	r2, #96	; 0x60
 8003a08:	21ff      	movs	r1, #255	; 0xff
 8003a0a:	5299      	strh	r1, [r3, r2]
 8003a0c:	e029      	b.n	8003a62 <UART_Start_Receive_IT+0xaa>
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d10d      	bne.n	8003a32 <UART_Start_Receive_IT+0x7a>
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	691b      	ldr	r3, [r3, #16]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d104      	bne.n	8003a28 <UART_Start_Receive_IT+0x70>
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2260      	movs	r2, #96	; 0x60
 8003a22:	21ff      	movs	r1, #255	; 0xff
 8003a24:	5299      	strh	r1, [r3, r2]
 8003a26:	e01c      	b.n	8003a62 <UART_Start_Receive_IT+0xaa>
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2260      	movs	r2, #96	; 0x60
 8003a2c:	217f      	movs	r1, #127	; 0x7f
 8003a2e:	5299      	strh	r1, [r3, r2]
 8003a30:	e017      	b.n	8003a62 <UART_Start_Receive_IT+0xaa>
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	689a      	ldr	r2, [r3, #8]
 8003a36:	2380      	movs	r3, #128	; 0x80
 8003a38:	055b      	lsls	r3, r3, #21
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d10d      	bne.n	8003a5a <UART_Start_Receive_IT+0xa2>
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	691b      	ldr	r3, [r3, #16]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d104      	bne.n	8003a50 <UART_Start_Receive_IT+0x98>
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2260      	movs	r2, #96	; 0x60
 8003a4a:	217f      	movs	r1, #127	; 0x7f
 8003a4c:	5299      	strh	r1, [r3, r2]
 8003a4e:	e008      	b.n	8003a62 <UART_Start_Receive_IT+0xaa>
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2260      	movs	r2, #96	; 0x60
 8003a54:	213f      	movs	r1, #63	; 0x3f
 8003a56:	5299      	strh	r1, [r3, r2]
 8003a58:	e003      	b.n	8003a62 <UART_Start_Receive_IT+0xaa>
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2260      	movs	r2, #96	; 0x60
 8003a5e:	2100      	movs	r1, #0
 8003a60:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	228c      	movs	r2, #140	; 0x8c
 8003a66:	2100      	movs	r1, #0
 8003a68:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2288      	movs	r2, #136	; 0x88
 8003a6e:	2122      	movs	r1, #34	; 0x22
 8003a70:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a72:	f3ef 8310 	mrs	r3, PRIMASK
 8003a76:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 8003a78:	6c3b      	ldr	r3, [r7, #64]	; 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a7a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a82:	f383 8810 	msr	PRIMASK, r3
}
 8003a86:	46c0      	nop			; (mov r8, r8)
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	689a      	ldr	r2, [r3, #8]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	2101      	movs	r1, #1
 8003a94:	430a      	orrs	r2, r1
 8003a96:	609a      	str	r2, [r3, #8]
 8003a98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a9a:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a9e:	f383 8810 	msr	PRIMASK, r3
}
 8003aa2:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003aa8:	2380      	movs	r3, #128	; 0x80
 8003aaa:	059b      	lsls	r3, r3, #22
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d154      	bne.n	8003b5a <UART_Start_Receive_IT+0x1a2>
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2268      	movs	r2, #104	; 0x68
 8003ab4:	5a9b      	ldrh	r3, [r3, r2]
 8003ab6:	1dba      	adds	r2, r7, #6
 8003ab8:	8812      	ldrh	r2, [r2, #0]
 8003aba:	429a      	cmp	r2, r3
 8003abc:	d34d      	bcc.n	8003b5a <UART_Start_Receive_IT+0x1a2>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	689a      	ldr	r2, [r3, #8]
 8003ac2:	2380      	movs	r3, #128	; 0x80
 8003ac4:	015b      	lsls	r3, r3, #5
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d107      	bne.n	8003ada <UART_Start_Receive_IT+0x122>
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	691b      	ldr	r3, [r3, #16]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d103      	bne.n	8003ada <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	4a4a      	ldr	r2, [pc, #296]	; (8003c00 <UART_Start_Receive_IT+0x248>)
 8003ad6:	671a      	str	r2, [r3, #112]	; 0x70
 8003ad8:	e002      	b.n	8003ae0 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	4a49      	ldr	r2, [pc, #292]	; (8003c04 <UART_Start_Receive_IT+0x24c>)
 8003ade:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2280      	movs	r2, #128	; 0x80
 8003ae4:	2100      	movs	r1, #0
 8003ae6:	5499      	strb	r1, [r3, r2]

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	691b      	ldr	r3, [r3, #16]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d019      	beq.n	8003b24 <UART_Start_Receive_IT+0x16c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003af0:	f3ef 8310 	mrs	r3, PRIMASK
 8003af4:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003af6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003af8:	65bb      	str	r3, [r7, #88]	; 0x58
 8003afa:	2301      	movs	r3, #1
 8003afc:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b00:	f383 8810 	msr	PRIMASK, r3
}
 8003b04:	46c0      	nop			; (mov r8, r8)
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	2180      	movs	r1, #128	; 0x80
 8003b12:	0049      	lsls	r1, r1, #1
 8003b14:	430a      	orrs	r2, r1
 8003b16:	601a      	str	r2, [r3, #0]
 8003b18:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b1e:	f383 8810 	msr	PRIMASK, r3
}
 8003b22:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b24:	f3ef 8310 	mrs	r3, PRIMASK
 8003b28:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003b2c:	657b      	str	r3, [r7, #84]	; 0x54
 8003b2e:	2301      	movs	r3, #1
 8003b30:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b34:	f383 8810 	msr	PRIMASK, r3
}
 8003b38:	46c0      	nop			; (mov r8, r8)
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	689a      	ldr	r2, [r3, #8]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	2180      	movs	r1, #128	; 0x80
 8003b46:	0549      	lsls	r1, r1, #21
 8003b48:	430a      	orrs	r2, r1
 8003b4a:	609a      	str	r2, [r3, #8]
 8003b4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b4e:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b52:	f383 8810 	msr	PRIMASK, r3
}
 8003b56:	46c0      	nop			; (mov r8, r8)
 8003b58:	e04b      	b.n	8003bf2 <UART_Start_Receive_IT+0x23a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	689a      	ldr	r2, [r3, #8]
 8003b5e:	2380      	movs	r3, #128	; 0x80
 8003b60:	015b      	lsls	r3, r3, #5
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d107      	bne.n	8003b76 <UART_Start_Receive_IT+0x1be>
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	691b      	ldr	r3, [r3, #16]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d103      	bne.n	8003b76 <UART_Start_Receive_IT+0x1be>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	4a25      	ldr	r2, [pc, #148]	; (8003c08 <UART_Start_Receive_IT+0x250>)
 8003b72:	671a      	str	r2, [r3, #112]	; 0x70
 8003b74:	e002      	b.n	8003b7c <UART_Start_Receive_IT+0x1c4>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	4a24      	ldr	r2, [pc, #144]	; (8003c0c <UART_Start_Receive_IT+0x254>)
 8003b7a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2280      	movs	r2, #128	; 0x80
 8003b80:	2100      	movs	r1, #0
 8003b82:	5499      	strb	r1, [r3, r2]

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	691b      	ldr	r3, [r3, #16]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d019      	beq.n	8003bc0 <UART_Start_Receive_IT+0x208>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b8c:	f3ef 8310 	mrs	r3, PRIMASK
 8003b90:	61fb      	str	r3, [r7, #28]
  return(result);
 8003b92:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8003b94:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b96:	2301      	movs	r3, #1
 8003b98:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b9a:	6a3b      	ldr	r3, [r7, #32]
 8003b9c:	f383 8810 	msr	PRIMASK, r3
}
 8003ba0:	46c0      	nop			; (mov r8, r8)
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	2190      	movs	r1, #144	; 0x90
 8003bae:	0049      	lsls	r1, r1, #1
 8003bb0:	430a      	orrs	r2, r1
 8003bb2:	601a      	str	r2, [r3, #0]
 8003bb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bb6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bba:	f383 8810 	msr	PRIMASK, r3
}
 8003bbe:	e018      	b.n	8003bf2 <UART_Start_Receive_IT+0x23a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bc0:	f3ef 8310 	mrs	r3, PRIMASK
 8003bc4:	613b      	str	r3, [r7, #16]
  return(result);
 8003bc6:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8003bc8:	653b      	str	r3, [r7, #80]	; 0x50
 8003bca:	2301      	movs	r3, #1
 8003bcc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	f383 8810 	msr	PRIMASK, r3
}
 8003bd4:	46c0      	nop			; (mov r8, r8)
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	2120      	movs	r1, #32
 8003be2:	430a      	orrs	r2, r1
 8003be4:	601a      	str	r2, [r3, #0]
 8003be6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003be8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bea:	69bb      	ldr	r3, [r7, #24]
 8003bec:	f383 8810 	msr	PRIMASK, r3
}
 8003bf0:	46c0      	nop			; (mov r8, r8)
    }
  }
  return HAL_OK;
 8003bf2:	2300      	movs	r3, #0
}
 8003bf4:	0018      	movs	r0, r3
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	b018      	add	sp, #96	; 0x60
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	000001ff 	.word	0x000001ff
 8003c00:	08004321 	.word	0x08004321
 8003c04:	0800403d 	.word	0x0800403d
 8003c08:	08003ed1 	.word	0x08003ed1
 8003c0c:	08003d65 	.word	0x08003d65

08003c10 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b08e      	sub	sp, #56	; 0x38
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c18:	f3ef 8310 	mrs	r3, PRIMASK
 8003c1c:	617b      	str	r3, [r7, #20]
  return(result);
 8003c1e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003c20:	637b      	str	r3, [r7, #52]	; 0x34
 8003c22:	2301      	movs	r3, #1
 8003c24:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c26:	69bb      	ldr	r3, [r7, #24]
 8003c28:	f383 8810 	msr	PRIMASK, r3
}
 8003c2c:	46c0      	nop			; (mov r8, r8)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4926      	ldr	r1, [pc, #152]	; (8003cd4 <UART_EndRxTransfer+0xc4>)
 8003c3a:	400a      	ands	r2, r1
 8003c3c:	601a      	str	r2, [r3, #0]
 8003c3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c40:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c42:	69fb      	ldr	r3, [r7, #28]
 8003c44:	f383 8810 	msr	PRIMASK, r3
}
 8003c48:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c4a:	f3ef 8310 	mrs	r3, PRIMASK
 8003c4e:	623b      	str	r3, [r7, #32]
  return(result);
 8003c50:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003c52:	633b      	str	r3, [r7, #48]	; 0x30
 8003c54:	2301      	movs	r3, #1
 8003c56:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c5a:	f383 8810 	msr	PRIMASK, r3
}
 8003c5e:	46c0      	nop			; (mov r8, r8)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	689a      	ldr	r2, [r3, #8]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	491b      	ldr	r1, [pc, #108]	; (8003cd8 <UART_EndRxTransfer+0xc8>)
 8003c6c:	400a      	ands	r2, r1
 8003c6e:	609a      	str	r2, [r3, #8]
 8003c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c72:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c76:	f383 8810 	msr	PRIMASK, r3
}
 8003c7a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d118      	bne.n	8003cb6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c84:	f3ef 8310 	mrs	r3, PRIMASK
 8003c88:	60bb      	str	r3, [r7, #8]
  return(result);
 8003c8a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c8e:	2301      	movs	r3, #1
 8003c90:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	f383 8810 	msr	PRIMASK, r3
}
 8003c98:	46c0      	nop			; (mov r8, r8)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	2110      	movs	r1, #16
 8003ca6:	438a      	bics	r2, r1
 8003ca8:	601a      	str	r2, [r3, #0]
 8003caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	f383 8810 	msr	PRIMASK, r3
}
 8003cb4:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2288      	movs	r2, #136	; 0x88
 8003cba:	2120      	movs	r1, #32
 8003cbc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	671a      	str	r2, [r3, #112]	; 0x70
}
 8003cca:	46c0      	nop			; (mov r8, r8)
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	b00e      	add	sp, #56	; 0x38
 8003cd0:	bd80      	pop	{r7, pc}
 8003cd2:	46c0      	nop			; (mov r8, r8)
 8003cd4:	fffffedf 	.word	0xfffffedf
 8003cd8:	effffffe 	.word	0xeffffffe

08003cdc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b084      	sub	sp, #16
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ce8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	225e      	movs	r2, #94	; 0x5e
 8003cee:	2100      	movs	r1, #0
 8003cf0:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2256      	movs	r2, #86	; 0x56
 8003cf6:	2100      	movs	r1, #0
 8003cf8:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	0018      	movs	r0, r3
 8003cfe:	f7ff f9c3 	bl	8003088 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d02:	46c0      	nop			; (mov r8, r8)
 8003d04:	46bd      	mov	sp, r7
 8003d06:	b004      	add	sp, #16
 8003d08:	bd80      	pop	{r7, pc}

08003d0a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003d0a:	b580      	push	{r7, lr}
 8003d0c:	b086      	sub	sp, #24
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d12:	f3ef 8310 	mrs	r3, PRIMASK
 8003d16:	60bb      	str	r3, [r7, #8]
  return(result);
 8003d18:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003d1a:	617b      	str	r3, [r7, #20]
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	f383 8810 	msr	PRIMASK, r3
}
 8003d26:	46c0      	nop			; (mov r8, r8)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	2140      	movs	r1, #64	; 0x40
 8003d34:	438a      	bics	r2, r1
 8003d36:	601a      	str	r2, [r3, #0]
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	f383 8810 	msr	PRIMASK, r3
}
 8003d42:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2284      	movs	r2, #132	; 0x84
 8003d48:	2120      	movs	r1, #32
 8003d4a:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	0018      	movs	r0, r3
 8003d56:	f7ff f98f 	bl	8003078 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d5a:	46c0      	nop			; (mov r8, r8)
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	b006      	add	sp, #24
 8003d60:	bd80      	pop	{r7, pc}
	...

08003d64 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b090      	sub	sp, #64	; 0x40
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003d6c:	203e      	movs	r0, #62	; 0x3e
 8003d6e:	183b      	adds	r3, r7, r0
 8003d70:	687a      	ldr	r2, [r7, #4]
 8003d72:	2160      	movs	r1, #96	; 0x60
 8003d74:	5a52      	ldrh	r2, [r2, r1]
 8003d76:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2288      	movs	r2, #136	; 0x88
 8003d7c:	589b      	ldr	r3, [r3, r2]
 8003d7e:	2b22      	cmp	r3, #34	; 0x22
 8003d80:	d000      	beq.n	8003d84 <UART_RxISR_8BIT+0x20>
 8003d82:	e097      	b.n	8003eb4 <UART_RxISR_8BIT+0x150>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d8a:	213c      	movs	r1, #60	; 0x3c
 8003d8c:	187b      	adds	r3, r7, r1
 8003d8e:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003d90:	187b      	adds	r3, r7, r1
 8003d92:	881b      	ldrh	r3, [r3, #0]
 8003d94:	b2da      	uxtb	r2, r3
 8003d96:	183b      	adds	r3, r7, r0
 8003d98:	881b      	ldrh	r3, [r3, #0]
 8003d9a:	b2d9      	uxtb	r1, r3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003da0:	400a      	ands	r2, r1
 8003da2:	b2d2      	uxtb	r2, r2
 8003da4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003daa:	1c5a      	adds	r2, r3, #1
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	225e      	movs	r2, #94	; 0x5e
 8003db4:	5a9b      	ldrh	r3, [r3, r2]
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	3b01      	subs	r3, #1
 8003dba:	b299      	uxth	r1, r3
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	225e      	movs	r2, #94	; 0x5e
 8003dc0:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	225e      	movs	r2, #94	; 0x5e
 8003dc6:	5a9b      	ldrh	r3, [r3, r2]
 8003dc8:	b29b      	uxth	r3, r3
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d000      	beq.n	8003dd0 <UART_RxISR_8BIT+0x6c>
 8003dce:	e079      	b.n	8003ec4 <UART_RxISR_8BIT+0x160>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003dd0:	f3ef 8310 	mrs	r3, PRIMASK
 8003dd4:	61bb      	str	r3, [r7, #24]
  return(result);
 8003dd6:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003dd8:	63bb      	str	r3, [r7, #56]	; 0x38
 8003dda:	2301      	movs	r3, #1
 8003ddc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dde:	69fb      	ldr	r3, [r7, #28]
 8003de0:	f383 8810 	msr	PRIMASK, r3
}
 8003de4:	46c0      	nop			; (mov r8, r8)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4936      	ldr	r1, [pc, #216]	; (8003ecc <UART_RxISR_8BIT+0x168>)
 8003df2:	400a      	ands	r2, r1
 8003df4:	601a      	str	r2, [r3, #0]
 8003df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003df8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dfa:	6a3b      	ldr	r3, [r7, #32]
 8003dfc:	f383 8810 	msr	PRIMASK, r3
}
 8003e00:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e02:	f3ef 8310 	mrs	r3, PRIMASK
 8003e06:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e0a:	637b      	str	r3, [r7, #52]	; 0x34
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e12:	f383 8810 	msr	PRIMASK, r3
}
 8003e16:	46c0      	nop			; (mov r8, r8)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	689a      	ldr	r2, [r3, #8]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	2101      	movs	r1, #1
 8003e24:	438a      	bics	r2, r1
 8003e26:	609a      	str	r2, [r3, #8]
 8003e28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e2e:	f383 8810 	msr	PRIMASK, r3
}
 8003e32:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2288      	movs	r2, #136	; 0x88
 8003e38:	2120      	movs	r1, #32
 8003e3a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d12f      	bne.n	8003eaa <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e50:	f3ef 8310 	mrs	r3, PRIMASK
 8003e54:	60fb      	str	r3, [r7, #12]
  return(result);
 8003e56:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e58:	633b      	str	r3, [r7, #48]	; 0x30
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	f383 8810 	msr	PRIMASK, r3
}
 8003e64:	46c0      	nop			; (mov r8, r8)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	2110      	movs	r1, #16
 8003e72:	438a      	bics	r2, r1
 8003e74:	601a      	str	r2, [r3, #0]
 8003e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e78:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	f383 8810 	msr	PRIMASK, r3
}
 8003e80:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	69db      	ldr	r3, [r3, #28]
 8003e88:	2210      	movs	r2, #16
 8003e8a:	4013      	ands	r3, r2
 8003e8c:	2b10      	cmp	r3, #16
 8003e8e:	d103      	bne.n	8003e98 <UART_RxISR_8BIT+0x134>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	2210      	movs	r2, #16
 8003e96:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	225c      	movs	r2, #92	; 0x5c
 8003e9c:	5a9a      	ldrh	r2, [r3, r2]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	0011      	movs	r1, r2
 8003ea2:	0018      	movs	r0, r3
 8003ea4:	f7ff f8f8 	bl	8003098 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003ea8:	e00c      	b.n	8003ec4 <UART_RxISR_8BIT+0x160>
        HAL_UART_RxCpltCallback(huart);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	0018      	movs	r0, r3
 8003eae:	f7fd f811 	bl	8000ed4 <HAL_UART_RxCpltCallback>
}
 8003eb2:	e007      	b.n	8003ec4 <UART_RxISR_8BIT+0x160>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	699a      	ldr	r2, [r3, #24]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	2108      	movs	r1, #8
 8003ec0:	430a      	orrs	r2, r1
 8003ec2:	619a      	str	r2, [r3, #24]
}
 8003ec4:	46c0      	nop			; (mov r8, r8)
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	b010      	add	sp, #64	; 0x40
 8003eca:	bd80      	pop	{r7, pc}
 8003ecc:	fffffedf 	.word	0xfffffedf

08003ed0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b090      	sub	sp, #64	; 0x40
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003ed8:	203e      	movs	r0, #62	; 0x3e
 8003eda:	183b      	adds	r3, r7, r0
 8003edc:	687a      	ldr	r2, [r7, #4]
 8003ede:	2160      	movs	r1, #96	; 0x60
 8003ee0:	5a52      	ldrh	r2, [r2, r1]
 8003ee2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2288      	movs	r2, #136	; 0x88
 8003ee8:	589b      	ldr	r3, [r3, r2]
 8003eea:	2b22      	cmp	r3, #34	; 0x22
 8003eec:	d000      	beq.n	8003ef0 <UART_RxISR_16BIT+0x20>
 8003eee:	e097      	b.n	8004020 <UART_RxISR_16BIT+0x150>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ef6:	213c      	movs	r1, #60	; 0x3c
 8003ef8:	187b      	adds	r3, r7, r1
 8003efa:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f00:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 8003f02:	187b      	adds	r3, r7, r1
 8003f04:	183a      	adds	r2, r7, r0
 8003f06:	881b      	ldrh	r3, [r3, #0]
 8003f08:	8812      	ldrh	r2, [r2, #0]
 8003f0a:	4013      	ands	r3, r2
 8003f0c:	b29a      	uxth	r2, r3
 8003f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f10:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f16:	1c9a      	adds	r2, r3, #2
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	225e      	movs	r2, #94	; 0x5e
 8003f20:	5a9b      	ldrh	r3, [r3, r2]
 8003f22:	b29b      	uxth	r3, r3
 8003f24:	3b01      	subs	r3, #1
 8003f26:	b299      	uxth	r1, r3
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	225e      	movs	r2, #94	; 0x5e
 8003f2c:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	225e      	movs	r2, #94	; 0x5e
 8003f32:	5a9b      	ldrh	r3, [r3, r2]
 8003f34:	b29b      	uxth	r3, r3
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d000      	beq.n	8003f3c <UART_RxISR_16BIT+0x6c>
 8003f3a:	e079      	b.n	8004030 <UART_RxISR_16BIT+0x160>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f3c:	f3ef 8310 	mrs	r3, PRIMASK
 8003f40:	617b      	str	r3, [r7, #20]
  return(result);
 8003f42:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003f44:	637b      	str	r3, [r7, #52]	; 0x34
 8003f46:	2301      	movs	r3, #1
 8003f48:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f4a:	69bb      	ldr	r3, [r7, #24]
 8003f4c:	f383 8810 	msr	PRIMASK, r3
}
 8003f50:	46c0      	nop			; (mov r8, r8)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	681a      	ldr	r2, [r3, #0]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4936      	ldr	r1, [pc, #216]	; (8004038 <UART_RxISR_16BIT+0x168>)
 8003f5e:	400a      	ands	r2, r1
 8003f60:	601a      	str	r2, [r3, #0]
 8003f62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f64:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f66:	69fb      	ldr	r3, [r7, #28]
 8003f68:	f383 8810 	msr	PRIMASK, r3
}
 8003f6c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f6e:	f3ef 8310 	mrs	r3, PRIMASK
 8003f72:	623b      	str	r3, [r7, #32]
  return(result);
 8003f74:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f76:	633b      	str	r3, [r7, #48]	; 0x30
 8003f78:	2301      	movs	r3, #1
 8003f7a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f7e:	f383 8810 	msr	PRIMASK, r3
}
 8003f82:	46c0      	nop			; (mov r8, r8)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	689a      	ldr	r2, [r3, #8]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	2101      	movs	r1, #1
 8003f90:	438a      	bics	r2, r1
 8003f92:	609a      	str	r2, [r3, #8]
 8003f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f96:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f9a:	f383 8810 	msr	PRIMASK, r3
}
 8003f9e:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2288      	movs	r2, #136	; 0x88
 8003fa4:	2120      	movs	r1, #32
 8003fa6:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2200      	movs	r2, #0
 8003fac:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d12f      	bne.n	8004016 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fbc:	f3ef 8310 	mrs	r3, PRIMASK
 8003fc0:	60bb      	str	r3, [r7, #8]
  return(result);
 8003fc2:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	f383 8810 	msr	PRIMASK, r3
}
 8003fd0:	46c0      	nop			; (mov r8, r8)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	2110      	movs	r1, #16
 8003fde:	438a      	bics	r2, r1
 8003fe0:	601a      	str	r2, [r3, #0]
 8003fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fe4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	f383 8810 	msr	PRIMASK, r3
}
 8003fec:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	69db      	ldr	r3, [r3, #28]
 8003ff4:	2210      	movs	r2, #16
 8003ff6:	4013      	ands	r3, r2
 8003ff8:	2b10      	cmp	r3, #16
 8003ffa:	d103      	bne.n	8004004 <UART_RxISR_16BIT+0x134>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	2210      	movs	r2, #16
 8004002:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	225c      	movs	r2, #92	; 0x5c
 8004008:	5a9a      	ldrh	r2, [r3, r2]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	0011      	movs	r1, r2
 800400e:	0018      	movs	r0, r3
 8004010:	f7ff f842 	bl	8003098 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004014:	e00c      	b.n	8004030 <UART_RxISR_16BIT+0x160>
        HAL_UART_RxCpltCallback(huart);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	0018      	movs	r0, r3
 800401a:	f7fc ff5b 	bl	8000ed4 <HAL_UART_RxCpltCallback>
}
 800401e:	e007      	b.n	8004030 <UART_RxISR_16BIT+0x160>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	699a      	ldr	r2, [r3, #24]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	2108      	movs	r1, #8
 800402c:	430a      	orrs	r2, r1
 800402e:	619a      	str	r2, [r3, #24]
}
 8004030:	46c0      	nop			; (mov r8, r8)
 8004032:	46bd      	mov	sp, r7
 8004034:	b010      	add	sp, #64	; 0x40
 8004036:	bd80      	pop	{r7, pc}
 8004038:	fffffedf 	.word	0xfffffedf

0800403c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b09c      	sub	sp, #112	; 0x70
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8004044:	236a      	movs	r3, #106	; 0x6a
 8004046:	18fb      	adds	r3, r7, r3
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	2160      	movs	r1, #96	; 0x60
 800404c:	5a52      	ldrh	r2, [r2, r1]
 800404e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	69db      	ldr	r3, [r3, #28]
 8004056:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	663b      	str	r3, [r7, #96]	; 0x60

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2288      	movs	r2, #136	; 0x88
 800406c:	589b      	ldr	r3, [r3, r2]
 800406e:	2b22      	cmp	r3, #34	; 0x22
 8004070:	d000      	beq.n	8004074 <UART_RxISR_8BIT_FIFOEN+0x38>
 8004072:	e141      	b.n	80042f8 <UART_RxISR_8BIT_FIFOEN+0x2bc>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8004074:	235e      	movs	r3, #94	; 0x5e
 8004076:	18fb      	adds	r3, r7, r3
 8004078:	687a      	ldr	r2, [r7, #4]
 800407a:	2168      	movs	r1, #104	; 0x68
 800407c:	5a52      	ldrh	r2, [r2, r1]
 800407e:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004080:	e0e8      	b.n	8004254 <UART_RxISR_8BIT_FIFOEN+0x218>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004088:	215c      	movs	r1, #92	; 0x5c
 800408a:	187b      	adds	r3, r7, r1
 800408c:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800408e:	187b      	adds	r3, r7, r1
 8004090:	881b      	ldrh	r3, [r3, #0]
 8004092:	b2da      	uxtb	r2, r3
 8004094:	236a      	movs	r3, #106	; 0x6a
 8004096:	18fb      	adds	r3, r7, r3
 8004098:	881b      	ldrh	r3, [r3, #0]
 800409a:	b2d9      	uxtb	r1, r3
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040a0:	400a      	ands	r2, r1
 80040a2:	b2d2      	uxtb	r2, r2
 80040a4:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040aa:	1c5a      	adds	r2, r3, #1
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	225e      	movs	r2, #94	; 0x5e
 80040b4:	5a9b      	ldrh	r3, [r3, r2]
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	3b01      	subs	r3, #1
 80040ba:	b299      	uxth	r1, r3
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	225e      	movs	r2, #94	; 0x5e
 80040c0:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	69db      	ldr	r3, [r3, #28]
 80040c8:	66fb      	str	r3, [r7, #108]	; 0x6c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80040ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040cc:	2207      	movs	r2, #7
 80040ce:	4013      	ands	r3, r2
 80040d0:	d049      	beq.n	8004166 <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80040d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040d4:	2201      	movs	r2, #1
 80040d6:	4013      	ands	r3, r2
 80040d8:	d010      	beq.n	80040fc <UART_RxISR_8BIT_FIFOEN+0xc0>
 80040da:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80040dc:	2380      	movs	r3, #128	; 0x80
 80040de:	005b      	lsls	r3, r3, #1
 80040e0:	4013      	ands	r3, r2
 80040e2:	d00b      	beq.n	80040fc <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	2201      	movs	r2, #1
 80040ea:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	228c      	movs	r2, #140	; 0x8c
 80040f0:	589b      	ldr	r3, [r3, r2]
 80040f2:	2201      	movs	r2, #1
 80040f4:	431a      	orrs	r2, r3
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	218c      	movs	r1, #140	; 0x8c
 80040fa:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80040fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040fe:	2202      	movs	r2, #2
 8004100:	4013      	ands	r3, r2
 8004102:	d00f      	beq.n	8004124 <UART_RxISR_8BIT_FIFOEN+0xe8>
 8004104:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004106:	2201      	movs	r2, #1
 8004108:	4013      	ands	r3, r2
 800410a:	d00b      	beq.n	8004124 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	2202      	movs	r2, #2
 8004112:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	228c      	movs	r2, #140	; 0x8c
 8004118:	589b      	ldr	r3, [r3, r2]
 800411a:	2204      	movs	r2, #4
 800411c:	431a      	orrs	r2, r3
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	218c      	movs	r1, #140	; 0x8c
 8004122:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004124:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004126:	2204      	movs	r2, #4
 8004128:	4013      	ands	r3, r2
 800412a:	d00f      	beq.n	800414c <UART_RxISR_8BIT_FIFOEN+0x110>
 800412c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800412e:	2201      	movs	r2, #1
 8004130:	4013      	ands	r3, r2
 8004132:	d00b      	beq.n	800414c <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	2204      	movs	r2, #4
 800413a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	228c      	movs	r2, #140	; 0x8c
 8004140:	589b      	ldr	r3, [r3, r2]
 8004142:	2202      	movs	r2, #2
 8004144:	431a      	orrs	r2, r3
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	218c      	movs	r1, #140	; 0x8c
 800414a:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	228c      	movs	r2, #140	; 0x8c
 8004150:	589b      	ldr	r3, [r3, r2]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d007      	beq.n	8004166 <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	0018      	movs	r0, r3
 800415a:	f7fe ff95 	bl	8003088 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	228c      	movs	r2, #140	; 0x8c
 8004162:	2100      	movs	r1, #0
 8004164:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	225e      	movs	r2, #94	; 0x5e
 800416a:	5a9b      	ldrh	r3, [r3, r2]
 800416c:	b29b      	uxth	r3, r3
 800416e:	2b00      	cmp	r3, #0
 8004170:	d170      	bne.n	8004254 <UART_RxISR_8BIT_FIFOEN+0x218>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004172:	f3ef 8310 	mrs	r3, PRIMASK
 8004176:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8004178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800417a:	65bb      	str	r3, [r7, #88]	; 0x58
 800417c:	2301      	movs	r3, #1
 800417e:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004182:	f383 8810 	msr	PRIMASK, r3
}
 8004186:	46c0      	nop			; (mov r8, r8)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	495f      	ldr	r1, [pc, #380]	; (8004310 <UART_RxISR_8BIT_FIFOEN+0x2d4>)
 8004194:	400a      	ands	r2, r1
 8004196:	601a      	str	r2, [r3, #0]
 8004198:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800419a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800419c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800419e:	f383 8810 	msr	PRIMASK, r3
}
 80041a2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041a4:	f3ef 8310 	mrs	r3, PRIMASK
 80041a8:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 80041aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80041ac:	657b      	str	r3, [r7, #84]	; 0x54
 80041ae:	2301      	movs	r3, #1
 80041b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041b4:	f383 8810 	msr	PRIMASK, r3
}
 80041b8:	46c0      	nop			; (mov r8, r8)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	689a      	ldr	r2, [r3, #8]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4953      	ldr	r1, [pc, #332]	; (8004314 <UART_RxISR_8BIT_FIFOEN+0x2d8>)
 80041c6:	400a      	ands	r2, r1
 80041c8:	609a      	str	r2, [r3, #8]
 80041ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041cc:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041d0:	f383 8810 	msr	PRIMASK, r3
}
 80041d4:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2288      	movs	r2, #136	; 0x88
 80041da:	2120      	movs	r1, #32
 80041dc:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2200      	movs	r2, #0
 80041e2:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d12f      	bne.n	800424c <UART_RxISR_8BIT_FIFOEN+0x210>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2200      	movs	r2, #0
 80041f0:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041f2:	f3ef 8310 	mrs	r3, PRIMASK
 80041f6:	623b      	str	r3, [r7, #32]
  return(result);
 80041f8:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041fa:	653b      	str	r3, [r7, #80]	; 0x50
 80041fc:	2301      	movs	r3, #1
 80041fe:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004202:	f383 8810 	msr	PRIMASK, r3
}
 8004206:	46c0      	nop			; (mov r8, r8)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	2110      	movs	r1, #16
 8004214:	438a      	bics	r2, r1
 8004216:	601a      	str	r2, [r3, #0]
 8004218:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800421a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800421c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800421e:	f383 8810 	msr	PRIMASK, r3
}
 8004222:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	69db      	ldr	r3, [r3, #28]
 800422a:	2210      	movs	r2, #16
 800422c:	4013      	ands	r3, r2
 800422e:	2b10      	cmp	r3, #16
 8004230:	d103      	bne.n	800423a <UART_RxISR_8BIT_FIFOEN+0x1fe>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	2210      	movs	r2, #16
 8004238:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	225c      	movs	r2, #92	; 0x5c
 800423e:	5a9a      	ldrh	r2, [r3, r2]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	0011      	movs	r1, r2
 8004244:	0018      	movs	r0, r3
 8004246:	f7fe ff27 	bl	8003098 <HAL_UARTEx_RxEventCallback>
 800424a:	e003      	b.n	8004254 <UART_RxISR_8BIT_FIFOEN+0x218>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	0018      	movs	r0, r3
 8004250:	f7fc fe40 	bl	8000ed4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004254:	235e      	movs	r3, #94	; 0x5e
 8004256:	18fb      	adds	r3, r7, r3
 8004258:	881b      	ldrh	r3, [r3, #0]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d004      	beq.n	8004268 <UART_RxISR_8BIT_FIFOEN+0x22c>
 800425e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004260:	2220      	movs	r2, #32
 8004262:	4013      	ands	r3, r2
 8004264:	d000      	beq.n	8004268 <UART_RxISR_8BIT_FIFOEN+0x22c>
 8004266:	e70c      	b.n	8004082 <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8004268:	204e      	movs	r0, #78	; 0x4e
 800426a:	183b      	adds	r3, r7, r0
 800426c:	687a      	ldr	r2, [r7, #4]
 800426e:	215e      	movs	r1, #94	; 0x5e
 8004270:	5a52      	ldrh	r2, [r2, r1]
 8004272:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004274:	0001      	movs	r1, r0
 8004276:	187b      	adds	r3, r7, r1
 8004278:	881b      	ldrh	r3, [r3, #0]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d044      	beq.n	8004308 <UART_RxISR_8BIT_FIFOEN+0x2cc>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2268      	movs	r2, #104	; 0x68
 8004282:	5a9b      	ldrh	r3, [r3, r2]
 8004284:	187a      	adds	r2, r7, r1
 8004286:	8812      	ldrh	r2, [r2, #0]
 8004288:	429a      	cmp	r2, r3
 800428a:	d23d      	bcs.n	8004308 <UART_RxISR_8BIT_FIFOEN+0x2cc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800428c:	f3ef 8310 	mrs	r3, PRIMASK
 8004290:	60bb      	str	r3, [r7, #8]
  return(result);
 8004292:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004294:	64bb      	str	r3, [r7, #72]	; 0x48
 8004296:	2301      	movs	r3, #1
 8004298:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	f383 8810 	msr	PRIMASK, r3
}
 80042a0:	46c0      	nop			; (mov r8, r8)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	689a      	ldr	r2, [r3, #8]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	491a      	ldr	r1, [pc, #104]	; (8004318 <UART_RxISR_8BIT_FIFOEN+0x2dc>)
 80042ae:	400a      	ands	r2, r1
 80042b0:	609a      	str	r2, [r3, #8]
 80042b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042b4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	f383 8810 	msr	PRIMASK, r3
}
 80042bc:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	4a16      	ldr	r2, [pc, #88]	; (800431c <UART_RxISR_8BIT_FIFOEN+0x2e0>)
 80042c2:	671a      	str	r2, [r3, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042c4:	f3ef 8310 	mrs	r3, PRIMASK
 80042c8:	617b      	str	r3, [r7, #20]
  return(result);
 80042ca:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80042cc:	647b      	str	r3, [r7, #68]	; 0x44
 80042ce:	2301      	movs	r3, #1
 80042d0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042d2:	69bb      	ldr	r3, [r7, #24]
 80042d4:	f383 8810 	msr	PRIMASK, r3
}
 80042d8:	46c0      	nop			; (mov r8, r8)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	2120      	movs	r1, #32
 80042e6:	430a      	orrs	r2, r1
 80042e8:	601a      	str	r2, [r3, #0]
 80042ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042ec:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042ee:	69fb      	ldr	r3, [r7, #28]
 80042f0:	f383 8810 	msr	PRIMASK, r3
}
 80042f4:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80042f6:	e007      	b.n	8004308 <UART_RxISR_8BIT_FIFOEN+0x2cc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	699a      	ldr	r2, [r3, #24]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	2108      	movs	r1, #8
 8004304:	430a      	orrs	r2, r1
 8004306:	619a      	str	r2, [r3, #24]
}
 8004308:	46c0      	nop			; (mov r8, r8)
 800430a:	46bd      	mov	sp, r7
 800430c:	b01c      	add	sp, #112	; 0x70
 800430e:	bd80      	pop	{r7, pc}
 8004310:	fffffeff 	.word	0xfffffeff
 8004314:	effffffe 	.word	0xeffffffe
 8004318:	efffffff 	.word	0xefffffff
 800431c:	08003d65 	.word	0x08003d65

08004320 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b09e      	sub	sp, #120	; 0x78
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8004328:	2372      	movs	r3, #114	; 0x72
 800432a:	18fb      	adds	r3, r7, r3
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	2160      	movs	r1, #96	; 0x60
 8004330:	5a52      	ldrh	r2, [r2, r1]
 8004332:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	69db      	ldr	r3, [r3, #28]
 800433a:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2288      	movs	r2, #136	; 0x88
 8004350:	589b      	ldr	r3, [r3, r2]
 8004352:	2b22      	cmp	r3, #34	; 0x22
 8004354:	d000      	beq.n	8004358 <UART_RxISR_16BIT_FIFOEN+0x38>
 8004356:	e141      	b.n	80045dc <UART_RxISR_16BIT_FIFOEN+0x2bc>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8004358:	2366      	movs	r3, #102	; 0x66
 800435a:	18fb      	adds	r3, r7, r3
 800435c:	687a      	ldr	r2, [r7, #4]
 800435e:	2168      	movs	r1, #104	; 0x68
 8004360:	5a52      	ldrh	r2, [r2, r1]
 8004362:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004364:	e0e8      	b.n	8004538 <UART_RxISR_16BIT_FIFOEN+0x218>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800436c:	2164      	movs	r1, #100	; 0x64
 800436e:	187b      	adds	r3, r7, r1
 8004370:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004376:	663b      	str	r3, [r7, #96]	; 0x60
      *tmp = (uint16_t)(uhdata & uhMask);
 8004378:	187b      	adds	r3, r7, r1
 800437a:	2272      	movs	r2, #114	; 0x72
 800437c:	18ba      	adds	r2, r7, r2
 800437e:	881b      	ldrh	r3, [r3, #0]
 8004380:	8812      	ldrh	r2, [r2, #0]
 8004382:	4013      	ands	r3, r2
 8004384:	b29a      	uxth	r2, r3
 8004386:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004388:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800438e:	1c9a      	adds	r2, r3, #2
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	225e      	movs	r2, #94	; 0x5e
 8004398:	5a9b      	ldrh	r3, [r3, r2]
 800439a:	b29b      	uxth	r3, r3
 800439c:	3b01      	subs	r3, #1
 800439e:	b299      	uxth	r1, r3
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	225e      	movs	r2, #94	; 0x5e
 80043a4:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	69db      	ldr	r3, [r3, #28]
 80043ac:	677b      	str	r3, [r7, #116]	; 0x74

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80043ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043b0:	2207      	movs	r2, #7
 80043b2:	4013      	ands	r3, r2
 80043b4:	d049      	beq.n	800444a <UART_RxISR_16BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80043b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043b8:	2201      	movs	r2, #1
 80043ba:	4013      	ands	r3, r2
 80043bc:	d010      	beq.n	80043e0 <UART_RxISR_16BIT_FIFOEN+0xc0>
 80043be:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80043c0:	2380      	movs	r3, #128	; 0x80
 80043c2:	005b      	lsls	r3, r3, #1
 80043c4:	4013      	ands	r3, r2
 80043c6:	d00b      	beq.n	80043e0 <UART_RxISR_16BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	2201      	movs	r2, #1
 80043ce:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	228c      	movs	r2, #140	; 0x8c
 80043d4:	589b      	ldr	r3, [r3, r2]
 80043d6:	2201      	movs	r2, #1
 80043d8:	431a      	orrs	r2, r3
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	218c      	movs	r1, #140	; 0x8c
 80043de:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80043e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043e2:	2202      	movs	r2, #2
 80043e4:	4013      	ands	r3, r2
 80043e6:	d00f      	beq.n	8004408 <UART_RxISR_16BIT_FIFOEN+0xe8>
 80043e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80043ea:	2201      	movs	r2, #1
 80043ec:	4013      	ands	r3, r2
 80043ee:	d00b      	beq.n	8004408 <UART_RxISR_16BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	2202      	movs	r2, #2
 80043f6:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	228c      	movs	r2, #140	; 0x8c
 80043fc:	589b      	ldr	r3, [r3, r2]
 80043fe:	2204      	movs	r2, #4
 8004400:	431a      	orrs	r2, r3
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	218c      	movs	r1, #140	; 0x8c
 8004406:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004408:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800440a:	2204      	movs	r2, #4
 800440c:	4013      	ands	r3, r2
 800440e:	d00f      	beq.n	8004430 <UART_RxISR_16BIT_FIFOEN+0x110>
 8004410:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004412:	2201      	movs	r2, #1
 8004414:	4013      	ands	r3, r2
 8004416:	d00b      	beq.n	8004430 <UART_RxISR_16BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	2204      	movs	r2, #4
 800441e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	228c      	movs	r2, #140	; 0x8c
 8004424:	589b      	ldr	r3, [r3, r2]
 8004426:	2202      	movs	r2, #2
 8004428:	431a      	orrs	r2, r3
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	218c      	movs	r1, #140	; 0x8c
 800442e:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	228c      	movs	r2, #140	; 0x8c
 8004434:	589b      	ldr	r3, [r3, r2]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d007      	beq.n	800444a <UART_RxISR_16BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	0018      	movs	r0, r3
 800443e:	f7fe fe23 	bl	8003088 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	228c      	movs	r2, #140	; 0x8c
 8004446:	2100      	movs	r1, #0
 8004448:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	225e      	movs	r2, #94	; 0x5e
 800444e:	5a9b      	ldrh	r3, [r3, r2]
 8004450:	b29b      	uxth	r3, r3
 8004452:	2b00      	cmp	r3, #0
 8004454:	d170      	bne.n	8004538 <UART_RxISR_16BIT_FIFOEN+0x218>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004456:	f3ef 8310 	mrs	r3, PRIMASK
 800445a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800445c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800445e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004460:	2301      	movs	r3, #1
 8004462:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004464:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004466:	f383 8810 	msr	PRIMASK, r3
}
 800446a:	46c0      	nop			; (mov r8, r8)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	495f      	ldr	r1, [pc, #380]	; (80045f4 <UART_RxISR_16BIT_FIFOEN+0x2d4>)
 8004478:	400a      	ands	r2, r1
 800447a:	601a      	str	r2, [r3, #0]
 800447c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800447e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004482:	f383 8810 	msr	PRIMASK, r3
}
 8004486:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004488:	f3ef 8310 	mrs	r3, PRIMASK
 800448c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800448e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004490:	65bb      	str	r3, [r7, #88]	; 0x58
 8004492:	2301      	movs	r3, #1
 8004494:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004496:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004498:	f383 8810 	msr	PRIMASK, r3
}
 800449c:	46c0      	nop			; (mov r8, r8)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	689a      	ldr	r2, [r3, #8]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4953      	ldr	r1, [pc, #332]	; (80045f8 <UART_RxISR_16BIT_FIFOEN+0x2d8>)
 80044aa:	400a      	ands	r2, r1
 80044ac:	609a      	str	r2, [r3, #8]
 80044ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80044b0:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044b4:	f383 8810 	msr	PRIMASK, r3
}
 80044b8:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2288      	movs	r2, #136	; 0x88
 80044be:	2120      	movs	r1, #32
 80044c0:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2200      	movs	r2, #0
 80044c6:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d12f      	bne.n	8004530 <UART_RxISR_16BIT_FIFOEN+0x210>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044d6:	f3ef 8310 	mrs	r3, PRIMASK
 80044da:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80044dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044de:	657b      	str	r3, [r7, #84]	; 0x54
 80044e0:	2301      	movs	r3, #1
 80044e2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044e6:	f383 8810 	msr	PRIMASK, r3
}
 80044ea:	46c0      	nop			; (mov r8, r8)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	681a      	ldr	r2, [r3, #0]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	2110      	movs	r1, #16
 80044f8:	438a      	bics	r2, r1
 80044fa:	601a      	str	r2, [r3, #0]
 80044fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004502:	f383 8810 	msr	PRIMASK, r3
}
 8004506:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	69db      	ldr	r3, [r3, #28]
 800450e:	2210      	movs	r2, #16
 8004510:	4013      	ands	r3, r2
 8004512:	2b10      	cmp	r3, #16
 8004514:	d103      	bne.n	800451e <UART_RxISR_16BIT_FIFOEN+0x1fe>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	2210      	movs	r2, #16
 800451c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	225c      	movs	r2, #92	; 0x5c
 8004522:	5a9a      	ldrh	r2, [r3, r2]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	0011      	movs	r1, r2
 8004528:	0018      	movs	r0, r3
 800452a:	f7fe fdb5 	bl	8003098 <HAL_UARTEx_RxEventCallback>
 800452e:	e003      	b.n	8004538 <UART_RxISR_16BIT_FIFOEN+0x218>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	0018      	movs	r0, r3
 8004534:	f7fc fcce 	bl	8000ed4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004538:	2366      	movs	r3, #102	; 0x66
 800453a:	18fb      	adds	r3, r7, r3
 800453c:	881b      	ldrh	r3, [r3, #0]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d004      	beq.n	800454c <UART_RxISR_16BIT_FIFOEN+0x22c>
 8004542:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004544:	2220      	movs	r2, #32
 8004546:	4013      	ands	r3, r2
 8004548:	d000      	beq.n	800454c <UART_RxISR_16BIT_FIFOEN+0x22c>
 800454a:	e70c      	b.n	8004366 <UART_RxISR_16BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800454c:	2052      	movs	r0, #82	; 0x52
 800454e:	183b      	adds	r3, r7, r0
 8004550:	687a      	ldr	r2, [r7, #4]
 8004552:	215e      	movs	r1, #94	; 0x5e
 8004554:	5a52      	ldrh	r2, [r2, r1]
 8004556:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004558:	0001      	movs	r1, r0
 800455a:	187b      	adds	r3, r7, r1
 800455c:	881b      	ldrh	r3, [r3, #0]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d044      	beq.n	80045ec <UART_RxISR_16BIT_FIFOEN+0x2cc>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2268      	movs	r2, #104	; 0x68
 8004566:	5a9b      	ldrh	r3, [r3, r2]
 8004568:	187a      	adds	r2, r7, r1
 800456a:	8812      	ldrh	r2, [r2, #0]
 800456c:	429a      	cmp	r2, r3
 800456e:	d23d      	bcs.n	80045ec <UART_RxISR_16BIT_FIFOEN+0x2cc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004570:	f3ef 8310 	mrs	r3, PRIMASK
 8004574:	60fb      	str	r3, [r7, #12]
  return(result);
 8004576:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004578:	64fb      	str	r3, [r7, #76]	; 0x4c
 800457a:	2301      	movs	r3, #1
 800457c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	f383 8810 	msr	PRIMASK, r3
}
 8004584:	46c0      	nop			; (mov r8, r8)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	689a      	ldr	r2, [r3, #8]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	491a      	ldr	r1, [pc, #104]	; (80045fc <UART_RxISR_16BIT_FIFOEN+0x2dc>)
 8004592:	400a      	ands	r2, r1
 8004594:	609a      	str	r2, [r3, #8]
 8004596:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004598:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	f383 8810 	msr	PRIMASK, r3
}
 80045a0:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	4a16      	ldr	r2, [pc, #88]	; (8004600 <UART_RxISR_16BIT_FIFOEN+0x2e0>)
 80045a6:	671a      	str	r2, [r3, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045a8:	f3ef 8310 	mrs	r3, PRIMASK
 80045ac:	61bb      	str	r3, [r7, #24]
  return(result);
 80045ae:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80045b0:	64bb      	str	r3, [r7, #72]	; 0x48
 80045b2:	2301      	movs	r3, #1
 80045b4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045b6:	69fb      	ldr	r3, [r7, #28]
 80045b8:	f383 8810 	msr	PRIMASK, r3
}
 80045bc:	46c0      	nop			; (mov r8, r8)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	2120      	movs	r1, #32
 80045ca:	430a      	orrs	r2, r1
 80045cc:	601a      	str	r2, [r3, #0]
 80045ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045d0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045d2:	6a3b      	ldr	r3, [r7, #32]
 80045d4:	f383 8810 	msr	PRIMASK, r3
}
 80045d8:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80045da:	e007      	b.n	80045ec <UART_RxISR_16BIT_FIFOEN+0x2cc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	699a      	ldr	r2, [r3, #24]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	2108      	movs	r1, #8
 80045e8:	430a      	orrs	r2, r1
 80045ea:	619a      	str	r2, [r3, #24]
}
 80045ec:	46c0      	nop			; (mov r8, r8)
 80045ee:	46bd      	mov	sp, r7
 80045f0:	b01e      	add	sp, #120	; 0x78
 80045f2:	bd80      	pop	{r7, pc}
 80045f4:	fffffeff 	.word	0xfffffeff
 80045f8:	effffffe 	.word	0xeffffffe
 80045fc:	efffffff 	.word	0xefffffff
 8004600:	08003ed1 	.word	0x08003ed1

08004604 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b082      	sub	sp, #8
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800460c:	46c0      	nop			; (mov r8, r8)
 800460e:	46bd      	mov	sp, r7
 8004610:	b002      	add	sp, #8
 8004612:	bd80      	pop	{r7, pc}

08004614 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b082      	sub	sp, #8
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800461c:	46c0      	nop			; (mov r8, r8)
 800461e:	46bd      	mov	sp, r7
 8004620:	b002      	add	sp, #8
 8004622:	bd80      	pop	{r7, pc}

08004624 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b082      	sub	sp, #8
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800462c:	46c0      	nop			; (mov r8, r8)
 800462e:	46bd      	mov	sp, r7
 8004630:	b002      	add	sp, #8
 8004632:	bd80      	pop	{r7, pc}

08004634 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b084      	sub	sp, #16
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2280      	movs	r2, #128	; 0x80
 8004640:	5c9b      	ldrb	r3, [r3, r2]
 8004642:	2b01      	cmp	r3, #1
 8004644:	d101      	bne.n	800464a <HAL_UARTEx_DisableFifoMode+0x16>
 8004646:	2302      	movs	r3, #2
 8004648:	e027      	b.n	800469a <HAL_UARTEx_DisableFifoMode+0x66>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2280      	movs	r2, #128	; 0x80
 800464e:	2101      	movs	r1, #1
 8004650:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2284      	movs	r2, #132	; 0x84
 8004656:	2124      	movs	r1, #36	; 0x24
 8004658:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	681a      	ldr	r2, [r3, #0]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	2101      	movs	r1, #1
 800466e:	438a      	bics	r2, r1
 8004670:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	4a0b      	ldr	r2, [pc, #44]	; (80046a4 <HAL_UARTEx_DisableFifoMode+0x70>)
 8004676:	4013      	ands	r3, r2
 8004678:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2200      	movs	r2, #0
 800467e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	68fa      	ldr	r2, [r7, #12]
 8004686:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2284      	movs	r2, #132	; 0x84
 800468c:	2120      	movs	r1, #32
 800468e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2280      	movs	r2, #128	; 0x80
 8004694:	2100      	movs	r1, #0
 8004696:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004698:	2300      	movs	r3, #0
}
 800469a:	0018      	movs	r0, r3
 800469c:	46bd      	mov	sp, r7
 800469e:	b004      	add	sp, #16
 80046a0:	bd80      	pop	{r7, pc}
 80046a2:	46c0      	nop			; (mov r8, r8)
 80046a4:	dfffffff 	.word	0xdfffffff

080046a8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b084      	sub	sp, #16
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
 80046b0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2280      	movs	r2, #128	; 0x80
 80046b6:	5c9b      	ldrb	r3, [r3, r2]
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d101      	bne.n	80046c0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80046bc:	2302      	movs	r3, #2
 80046be:	e02e      	b.n	800471e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2280      	movs	r2, #128	; 0x80
 80046c4:	2101      	movs	r1, #1
 80046c6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2284      	movs	r2, #132	; 0x84
 80046cc:	2124      	movs	r1, #36	; 0x24
 80046ce:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	681a      	ldr	r2, [r3, #0]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	2101      	movs	r1, #1
 80046e4:	438a      	bics	r2, r1
 80046e6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	00db      	lsls	r3, r3, #3
 80046f0:	08d9      	lsrs	r1, r3, #3
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	683a      	ldr	r2, [r7, #0]
 80046f8:	430a      	orrs	r2, r1
 80046fa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	0018      	movs	r0, r3
 8004700:	f000 f854 	bl	80047ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	68fa      	ldr	r2, [r7, #12]
 800470a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2284      	movs	r2, #132	; 0x84
 8004710:	2120      	movs	r1, #32
 8004712:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2280      	movs	r2, #128	; 0x80
 8004718:	2100      	movs	r1, #0
 800471a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800471c:	2300      	movs	r3, #0
}
 800471e:	0018      	movs	r0, r3
 8004720:	46bd      	mov	sp, r7
 8004722:	b004      	add	sp, #16
 8004724:	bd80      	pop	{r7, pc}
	...

08004728 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b084      	sub	sp, #16
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
 8004730:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2280      	movs	r2, #128	; 0x80
 8004736:	5c9b      	ldrb	r3, [r3, r2]
 8004738:	2b01      	cmp	r3, #1
 800473a:	d101      	bne.n	8004740 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800473c:	2302      	movs	r3, #2
 800473e:	e02f      	b.n	80047a0 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2280      	movs	r2, #128	; 0x80
 8004744:	2101      	movs	r1, #1
 8004746:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2284      	movs	r2, #132	; 0x84
 800474c:	2124      	movs	r1, #36	; 0x24
 800474e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	2101      	movs	r1, #1
 8004764:	438a      	bics	r2, r1
 8004766:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	4a0e      	ldr	r2, [pc, #56]	; (80047a8 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8004770:	4013      	ands	r3, r2
 8004772:	0019      	movs	r1, r3
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	683a      	ldr	r2, [r7, #0]
 800477a:	430a      	orrs	r2, r1
 800477c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	0018      	movs	r0, r3
 8004782:	f000 f813 	bl	80047ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	68fa      	ldr	r2, [r7, #12]
 800478c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2284      	movs	r2, #132	; 0x84
 8004792:	2120      	movs	r1, #32
 8004794:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2280      	movs	r2, #128	; 0x80
 800479a:	2100      	movs	r1, #0
 800479c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800479e:	2300      	movs	r3, #0
}
 80047a0:	0018      	movs	r0, r3
 80047a2:	46bd      	mov	sp, r7
 80047a4:	b004      	add	sp, #16
 80047a6:	bd80      	pop	{r7, pc}
 80047a8:	f1ffffff 	.word	0xf1ffffff

080047ac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80047ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047ae:	b085      	sub	sp, #20
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d108      	bne.n	80047ce <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	226a      	movs	r2, #106	; 0x6a
 80047c0:	2101      	movs	r1, #1
 80047c2:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2268      	movs	r2, #104	; 0x68
 80047c8:	2101      	movs	r1, #1
 80047ca:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80047cc:	e043      	b.n	8004856 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80047ce:	260f      	movs	r6, #15
 80047d0:	19bb      	adds	r3, r7, r6
 80047d2:	2208      	movs	r2, #8
 80047d4:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80047d6:	200e      	movs	r0, #14
 80047d8:	183b      	adds	r3, r7, r0
 80047da:	2208      	movs	r2, #8
 80047dc:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	0e5b      	lsrs	r3, r3, #25
 80047e6:	b2da      	uxtb	r2, r3
 80047e8:	240d      	movs	r4, #13
 80047ea:	193b      	adds	r3, r7, r4
 80047ec:	2107      	movs	r1, #7
 80047ee:	400a      	ands	r2, r1
 80047f0:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	0f5b      	lsrs	r3, r3, #29
 80047fa:	b2da      	uxtb	r2, r3
 80047fc:	250c      	movs	r5, #12
 80047fe:	197b      	adds	r3, r7, r5
 8004800:	2107      	movs	r1, #7
 8004802:	400a      	ands	r2, r1
 8004804:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004806:	183b      	adds	r3, r7, r0
 8004808:	781b      	ldrb	r3, [r3, #0]
 800480a:	197a      	adds	r2, r7, r5
 800480c:	7812      	ldrb	r2, [r2, #0]
 800480e:	4914      	ldr	r1, [pc, #80]	; (8004860 <UARTEx_SetNbDataToProcess+0xb4>)
 8004810:	5c8a      	ldrb	r2, [r1, r2]
 8004812:	435a      	muls	r2, r3
 8004814:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8004816:	197b      	adds	r3, r7, r5
 8004818:	781b      	ldrb	r3, [r3, #0]
 800481a:	4a12      	ldr	r2, [pc, #72]	; (8004864 <UARTEx_SetNbDataToProcess+0xb8>)
 800481c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800481e:	0019      	movs	r1, r3
 8004820:	f7fb fd0c 	bl	800023c <__divsi3>
 8004824:	0003      	movs	r3, r0
 8004826:	b299      	uxth	r1, r3
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	226a      	movs	r2, #106	; 0x6a
 800482c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800482e:	19bb      	adds	r3, r7, r6
 8004830:	781b      	ldrb	r3, [r3, #0]
 8004832:	193a      	adds	r2, r7, r4
 8004834:	7812      	ldrb	r2, [r2, #0]
 8004836:	490a      	ldr	r1, [pc, #40]	; (8004860 <UARTEx_SetNbDataToProcess+0xb4>)
 8004838:	5c8a      	ldrb	r2, [r1, r2]
 800483a:	435a      	muls	r2, r3
 800483c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800483e:	193b      	adds	r3, r7, r4
 8004840:	781b      	ldrb	r3, [r3, #0]
 8004842:	4a08      	ldr	r2, [pc, #32]	; (8004864 <UARTEx_SetNbDataToProcess+0xb8>)
 8004844:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004846:	0019      	movs	r1, r3
 8004848:	f7fb fcf8 	bl	800023c <__divsi3>
 800484c:	0003      	movs	r3, r0
 800484e:	b299      	uxth	r1, r3
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2268      	movs	r2, #104	; 0x68
 8004854:	5299      	strh	r1, [r3, r2]
}
 8004856:	46c0      	nop			; (mov r8, r8)
 8004858:	46bd      	mov	sp, r7
 800485a:	b005      	add	sp, #20
 800485c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800485e:	46c0      	nop			; (mov r8, r8)
 8004860:	08005474 	.word	0x08005474
 8004864:	0800547c 	.word	0x0800547c

08004868 <calloc>:
 8004868:	b510      	push	{r4, lr}
 800486a:	4b03      	ldr	r3, [pc, #12]	; (8004878 <calloc+0x10>)
 800486c:	000a      	movs	r2, r1
 800486e:	0001      	movs	r1, r0
 8004870:	6818      	ldr	r0, [r3, #0]
 8004872:	f000 f848 	bl	8004906 <_calloc_r>
 8004876:	bd10      	pop	{r4, pc}
 8004878:	2000000c 	.word	0x2000000c

0800487c <__errno>:
 800487c:	4b01      	ldr	r3, [pc, #4]	; (8004884 <__errno+0x8>)
 800487e:	6818      	ldr	r0, [r3, #0]
 8004880:	4770      	bx	lr
 8004882:	46c0      	nop			; (mov r8, r8)
 8004884:	2000000c 	.word	0x2000000c

08004888 <__libc_init_array>:
 8004888:	b570      	push	{r4, r5, r6, lr}
 800488a:	2600      	movs	r6, #0
 800488c:	4d0c      	ldr	r5, [pc, #48]	; (80048c0 <__libc_init_array+0x38>)
 800488e:	4c0d      	ldr	r4, [pc, #52]	; (80048c4 <__libc_init_array+0x3c>)
 8004890:	1b64      	subs	r4, r4, r5
 8004892:	10a4      	asrs	r4, r4, #2
 8004894:	42a6      	cmp	r6, r4
 8004896:	d109      	bne.n	80048ac <__libc_init_array+0x24>
 8004898:	2600      	movs	r6, #0
 800489a:	f000 fcd7 	bl	800524c <_init>
 800489e:	4d0a      	ldr	r5, [pc, #40]	; (80048c8 <__libc_init_array+0x40>)
 80048a0:	4c0a      	ldr	r4, [pc, #40]	; (80048cc <__libc_init_array+0x44>)
 80048a2:	1b64      	subs	r4, r4, r5
 80048a4:	10a4      	asrs	r4, r4, #2
 80048a6:	42a6      	cmp	r6, r4
 80048a8:	d105      	bne.n	80048b6 <__libc_init_array+0x2e>
 80048aa:	bd70      	pop	{r4, r5, r6, pc}
 80048ac:	00b3      	lsls	r3, r6, #2
 80048ae:	58eb      	ldr	r3, [r5, r3]
 80048b0:	4798      	blx	r3
 80048b2:	3601      	adds	r6, #1
 80048b4:	e7ee      	b.n	8004894 <__libc_init_array+0xc>
 80048b6:	00b3      	lsls	r3, r6, #2
 80048b8:	58eb      	ldr	r3, [r5, r3]
 80048ba:	4798      	blx	r3
 80048bc:	3601      	adds	r6, #1
 80048be:	e7f2      	b.n	80048a6 <__libc_init_array+0x1e>
 80048c0:	080054c0 	.word	0x080054c0
 80048c4:	080054c0 	.word	0x080054c0
 80048c8:	080054c0 	.word	0x080054c0
 80048cc:	080054c4 	.word	0x080054c4

080048d0 <free>:
 80048d0:	b510      	push	{r4, lr}
 80048d2:	4b03      	ldr	r3, [pc, #12]	; (80048e0 <free+0x10>)
 80048d4:	0001      	movs	r1, r0
 80048d6:	6818      	ldr	r0, [r3, #0]
 80048d8:	f000 f842 	bl	8004960 <_free_r>
 80048dc:	bd10      	pop	{r4, pc}
 80048de:	46c0      	nop			; (mov r8, r8)
 80048e0:	2000000c 	.word	0x2000000c

080048e4 <memcpy>:
 80048e4:	2300      	movs	r3, #0
 80048e6:	b510      	push	{r4, lr}
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d100      	bne.n	80048ee <memcpy+0xa>
 80048ec:	bd10      	pop	{r4, pc}
 80048ee:	5ccc      	ldrb	r4, [r1, r3]
 80048f0:	54c4      	strb	r4, [r0, r3]
 80048f2:	3301      	adds	r3, #1
 80048f4:	e7f8      	b.n	80048e8 <memcpy+0x4>

080048f6 <memset>:
 80048f6:	0003      	movs	r3, r0
 80048f8:	1882      	adds	r2, r0, r2
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d100      	bne.n	8004900 <memset+0xa>
 80048fe:	4770      	bx	lr
 8004900:	7019      	strb	r1, [r3, #0]
 8004902:	3301      	adds	r3, #1
 8004904:	e7f9      	b.n	80048fa <memset+0x4>

08004906 <_calloc_r>:
 8004906:	b570      	push	{r4, r5, r6, lr}
 8004908:	0c13      	lsrs	r3, r2, #16
 800490a:	0c0d      	lsrs	r5, r1, #16
 800490c:	d11e      	bne.n	800494c <_calloc_r+0x46>
 800490e:	2b00      	cmp	r3, #0
 8004910:	d10c      	bne.n	800492c <_calloc_r+0x26>
 8004912:	b289      	uxth	r1, r1
 8004914:	b294      	uxth	r4, r2
 8004916:	434c      	muls	r4, r1
 8004918:	0021      	movs	r1, r4
 800491a:	f000 f88d 	bl	8004a38 <_malloc_r>
 800491e:	1e05      	subs	r5, r0, #0
 8004920:	d01b      	beq.n	800495a <_calloc_r+0x54>
 8004922:	0022      	movs	r2, r4
 8004924:	2100      	movs	r1, #0
 8004926:	f7ff ffe6 	bl	80048f6 <memset>
 800492a:	e016      	b.n	800495a <_calloc_r+0x54>
 800492c:	1c1d      	adds	r5, r3, #0
 800492e:	1c0b      	adds	r3, r1, #0
 8004930:	b292      	uxth	r2, r2
 8004932:	b289      	uxth	r1, r1
 8004934:	b29c      	uxth	r4, r3
 8004936:	4351      	muls	r1, r2
 8004938:	b2ab      	uxth	r3, r5
 800493a:	4363      	muls	r3, r4
 800493c:	0c0c      	lsrs	r4, r1, #16
 800493e:	191c      	adds	r4, r3, r4
 8004940:	0c22      	lsrs	r2, r4, #16
 8004942:	d107      	bne.n	8004954 <_calloc_r+0x4e>
 8004944:	0424      	lsls	r4, r4, #16
 8004946:	b289      	uxth	r1, r1
 8004948:	430c      	orrs	r4, r1
 800494a:	e7e5      	b.n	8004918 <_calloc_r+0x12>
 800494c:	2b00      	cmp	r3, #0
 800494e:	d101      	bne.n	8004954 <_calloc_r+0x4e>
 8004950:	1c13      	adds	r3, r2, #0
 8004952:	e7ed      	b.n	8004930 <_calloc_r+0x2a>
 8004954:	230c      	movs	r3, #12
 8004956:	2500      	movs	r5, #0
 8004958:	6003      	str	r3, [r0, #0]
 800495a:	0028      	movs	r0, r5
 800495c:	bd70      	pop	{r4, r5, r6, pc}
	...

08004960 <_free_r>:
 8004960:	b570      	push	{r4, r5, r6, lr}
 8004962:	0005      	movs	r5, r0
 8004964:	2900      	cmp	r1, #0
 8004966:	d010      	beq.n	800498a <_free_r+0x2a>
 8004968:	1f0c      	subs	r4, r1, #4
 800496a:	6823      	ldr	r3, [r4, #0]
 800496c:	2b00      	cmp	r3, #0
 800496e:	da00      	bge.n	8004972 <_free_r+0x12>
 8004970:	18e4      	adds	r4, r4, r3
 8004972:	0028      	movs	r0, r5
 8004974:	f000 f91e 	bl	8004bb4 <__malloc_lock>
 8004978:	4a1d      	ldr	r2, [pc, #116]	; (80049f0 <_free_r+0x90>)
 800497a:	6813      	ldr	r3, [r2, #0]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d105      	bne.n	800498c <_free_r+0x2c>
 8004980:	6063      	str	r3, [r4, #4]
 8004982:	6014      	str	r4, [r2, #0]
 8004984:	0028      	movs	r0, r5
 8004986:	f000 f91d 	bl	8004bc4 <__malloc_unlock>
 800498a:	bd70      	pop	{r4, r5, r6, pc}
 800498c:	42a3      	cmp	r3, r4
 800498e:	d908      	bls.n	80049a2 <_free_r+0x42>
 8004990:	6821      	ldr	r1, [r4, #0]
 8004992:	1860      	adds	r0, r4, r1
 8004994:	4283      	cmp	r3, r0
 8004996:	d1f3      	bne.n	8004980 <_free_r+0x20>
 8004998:	6818      	ldr	r0, [r3, #0]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	1841      	adds	r1, r0, r1
 800499e:	6021      	str	r1, [r4, #0]
 80049a0:	e7ee      	b.n	8004980 <_free_r+0x20>
 80049a2:	001a      	movs	r2, r3
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d001      	beq.n	80049ae <_free_r+0x4e>
 80049aa:	42a3      	cmp	r3, r4
 80049ac:	d9f9      	bls.n	80049a2 <_free_r+0x42>
 80049ae:	6811      	ldr	r1, [r2, #0]
 80049b0:	1850      	adds	r0, r2, r1
 80049b2:	42a0      	cmp	r0, r4
 80049b4:	d10b      	bne.n	80049ce <_free_r+0x6e>
 80049b6:	6820      	ldr	r0, [r4, #0]
 80049b8:	1809      	adds	r1, r1, r0
 80049ba:	1850      	adds	r0, r2, r1
 80049bc:	6011      	str	r1, [r2, #0]
 80049be:	4283      	cmp	r3, r0
 80049c0:	d1e0      	bne.n	8004984 <_free_r+0x24>
 80049c2:	6818      	ldr	r0, [r3, #0]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	1841      	adds	r1, r0, r1
 80049c8:	6011      	str	r1, [r2, #0]
 80049ca:	6053      	str	r3, [r2, #4]
 80049cc:	e7da      	b.n	8004984 <_free_r+0x24>
 80049ce:	42a0      	cmp	r0, r4
 80049d0:	d902      	bls.n	80049d8 <_free_r+0x78>
 80049d2:	230c      	movs	r3, #12
 80049d4:	602b      	str	r3, [r5, #0]
 80049d6:	e7d5      	b.n	8004984 <_free_r+0x24>
 80049d8:	6821      	ldr	r1, [r4, #0]
 80049da:	1860      	adds	r0, r4, r1
 80049dc:	4283      	cmp	r3, r0
 80049de:	d103      	bne.n	80049e8 <_free_r+0x88>
 80049e0:	6818      	ldr	r0, [r3, #0]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	1841      	adds	r1, r0, r1
 80049e6:	6021      	str	r1, [r4, #0]
 80049e8:	6063      	str	r3, [r4, #4]
 80049ea:	6054      	str	r4, [r2, #4]
 80049ec:	e7ca      	b.n	8004984 <_free_r+0x24>
 80049ee:	46c0      	nop			; (mov r8, r8)
 80049f0:	20000228 	.word	0x20000228

080049f4 <sbrk_aligned>:
 80049f4:	b570      	push	{r4, r5, r6, lr}
 80049f6:	4e0f      	ldr	r6, [pc, #60]	; (8004a34 <sbrk_aligned+0x40>)
 80049f8:	000d      	movs	r5, r1
 80049fa:	6831      	ldr	r1, [r6, #0]
 80049fc:	0004      	movs	r4, r0
 80049fe:	2900      	cmp	r1, #0
 8004a00:	d102      	bne.n	8004a08 <sbrk_aligned+0x14>
 8004a02:	f000 f88f 	bl	8004b24 <_sbrk_r>
 8004a06:	6030      	str	r0, [r6, #0]
 8004a08:	0029      	movs	r1, r5
 8004a0a:	0020      	movs	r0, r4
 8004a0c:	f000 f88a 	bl	8004b24 <_sbrk_r>
 8004a10:	1c43      	adds	r3, r0, #1
 8004a12:	d00a      	beq.n	8004a2a <sbrk_aligned+0x36>
 8004a14:	2303      	movs	r3, #3
 8004a16:	1cc5      	adds	r5, r0, #3
 8004a18:	439d      	bics	r5, r3
 8004a1a:	42a8      	cmp	r0, r5
 8004a1c:	d007      	beq.n	8004a2e <sbrk_aligned+0x3a>
 8004a1e:	1a29      	subs	r1, r5, r0
 8004a20:	0020      	movs	r0, r4
 8004a22:	f000 f87f 	bl	8004b24 <_sbrk_r>
 8004a26:	1c43      	adds	r3, r0, #1
 8004a28:	d101      	bne.n	8004a2e <sbrk_aligned+0x3a>
 8004a2a:	2501      	movs	r5, #1
 8004a2c:	426d      	negs	r5, r5
 8004a2e:	0028      	movs	r0, r5
 8004a30:	bd70      	pop	{r4, r5, r6, pc}
 8004a32:	46c0      	nop			; (mov r8, r8)
 8004a34:	2000022c 	.word	0x2000022c

08004a38 <_malloc_r>:
 8004a38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004a3a:	2203      	movs	r2, #3
 8004a3c:	1ccb      	adds	r3, r1, #3
 8004a3e:	4393      	bics	r3, r2
 8004a40:	3308      	adds	r3, #8
 8004a42:	0006      	movs	r6, r0
 8004a44:	001f      	movs	r7, r3
 8004a46:	2b0c      	cmp	r3, #12
 8004a48:	d232      	bcs.n	8004ab0 <_malloc_r+0x78>
 8004a4a:	270c      	movs	r7, #12
 8004a4c:	42b9      	cmp	r1, r7
 8004a4e:	d831      	bhi.n	8004ab4 <_malloc_r+0x7c>
 8004a50:	0030      	movs	r0, r6
 8004a52:	f000 f8af 	bl	8004bb4 <__malloc_lock>
 8004a56:	4d32      	ldr	r5, [pc, #200]	; (8004b20 <_malloc_r+0xe8>)
 8004a58:	682b      	ldr	r3, [r5, #0]
 8004a5a:	001c      	movs	r4, r3
 8004a5c:	2c00      	cmp	r4, #0
 8004a5e:	d12e      	bne.n	8004abe <_malloc_r+0x86>
 8004a60:	0039      	movs	r1, r7
 8004a62:	0030      	movs	r0, r6
 8004a64:	f7ff ffc6 	bl	80049f4 <sbrk_aligned>
 8004a68:	0004      	movs	r4, r0
 8004a6a:	1c43      	adds	r3, r0, #1
 8004a6c:	d11e      	bne.n	8004aac <_malloc_r+0x74>
 8004a6e:	682c      	ldr	r4, [r5, #0]
 8004a70:	0025      	movs	r5, r4
 8004a72:	2d00      	cmp	r5, #0
 8004a74:	d14a      	bne.n	8004b0c <_malloc_r+0xd4>
 8004a76:	6823      	ldr	r3, [r4, #0]
 8004a78:	0029      	movs	r1, r5
 8004a7a:	18e3      	adds	r3, r4, r3
 8004a7c:	0030      	movs	r0, r6
 8004a7e:	9301      	str	r3, [sp, #4]
 8004a80:	f000 f850 	bl	8004b24 <_sbrk_r>
 8004a84:	9b01      	ldr	r3, [sp, #4]
 8004a86:	4283      	cmp	r3, r0
 8004a88:	d143      	bne.n	8004b12 <_malloc_r+0xda>
 8004a8a:	6823      	ldr	r3, [r4, #0]
 8004a8c:	3703      	adds	r7, #3
 8004a8e:	1aff      	subs	r7, r7, r3
 8004a90:	2303      	movs	r3, #3
 8004a92:	439f      	bics	r7, r3
 8004a94:	3708      	adds	r7, #8
 8004a96:	2f0c      	cmp	r7, #12
 8004a98:	d200      	bcs.n	8004a9c <_malloc_r+0x64>
 8004a9a:	270c      	movs	r7, #12
 8004a9c:	0039      	movs	r1, r7
 8004a9e:	0030      	movs	r0, r6
 8004aa0:	f7ff ffa8 	bl	80049f4 <sbrk_aligned>
 8004aa4:	1c43      	adds	r3, r0, #1
 8004aa6:	d034      	beq.n	8004b12 <_malloc_r+0xda>
 8004aa8:	6823      	ldr	r3, [r4, #0]
 8004aaa:	19df      	adds	r7, r3, r7
 8004aac:	6027      	str	r7, [r4, #0]
 8004aae:	e013      	b.n	8004ad8 <_malloc_r+0xa0>
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	dacb      	bge.n	8004a4c <_malloc_r+0x14>
 8004ab4:	230c      	movs	r3, #12
 8004ab6:	2500      	movs	r5, #0
 8004ab8:	6033      	str	r3, [r6, #0]
 8004aba:	0028      	movs	r0, r5
 8004abc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004abe:	6822      	ldr	r2, [r4, #0]
 8004ac0:	1bd1      	subs	r1, r2, r7
 8004ac2:	d420      	bmi.n	8004b06 <_malloc_r+0xce>
 8004ac4:	290b      	cmp	r1, #11
 8004ac6:	d917      	bls.n	8004af8 <_malloc_r+0xc0>
 8004ac8:	19e2      	adds	r2, r4, r7
 8004aca:	6027      	str	r7, [r4, #0]
 8004acc:	42a3      	cmp	r3, r4
 8004ace:	d111      	bne.n	8004af4 <_malloc_r+0xbc>
 8004ad0:	602a      	str	r2, [r5, #0]
 8004ad2:	6863      	ldr	r3, [r4, #4]
 8004ad4:	6011      	str	r1, [r2, #0]
 8004ad6:	6053      	str	r3, [r2, #4]
 8004ad8:	0030      	movs	r0, r6
 8004ada:	0025      	movs	r5, r4
 8004adc:	f000 f872 	bl	8004bc4 <__malloc_unlock>
 8004ae0:	2207      	movs	r2, #7
 8004ae2:	350b      	adds	r5, #11
 8004ae4:	1d23      	adds	r3, r4, #4
 8004ae6:	4395      	bics	r5, r2
 8004ae8:	1aea      	subs	r2, r5, r3
 8004aea:	429d      	cmp	r5, r3
 8004aec:	d0e5      	beq.n	8004aba <_malloc_r+0x82>
 8004aee:	1b5b      	subs	r3, r3, r5
 8004af0:	50a3      	str	r3, [r4, r2]
 8004af2:	e7e2      	b.n	8004aba <_malloc_r+0x82>
 8004af4:	605a      	str	r2, [r3, #4]
 8004af6:	e7ec      	b.n	8004ad2 <_malloc_r+0x9a>
 8004af8:	6862      	ldr	r2, [r4, #4]
 8004afa:	42a3      	cmp	r3, r4
 8004afc:	d101      	bne.n	8004b02 <_malloc_r+0xca>
 8004afe:	602a      	str	r2, [r5, #0]
 8004b00:	e7ea      	b.n	8004ad8 <_malloc_r+0xa0>
 8004b02:	605a      	str	r2, [r3, #4]
 8004b04:	e7e8      	b.n	8004ad8 <_malloc_r+0xa0>
 8004b06:	0023      	movs	r3, r4
 8004b08:	6864      	ldr	r4, [r4, #4]
 8004b0a:	e7a7      	b.n	8004a5c <_malloc_r+0x24>
 8004b0c:	002c      	movs	r4, r5
 8004b0e:	686d      	ldr	r5, [r5, #4]
 8004b10:	e7af      	b.n	8004a72 <_malloc_r+0x3a>
 8004b12:	230c      	movs	r3, #12
 8004b14:	0030      	movs	r0, r6
 8004b16:	6033      	str	r3, [r6, #0]
 8004b18:	f000 f854 	bl	8004bc4 <__malloc_unlock>
 8004b1c:	e7cd      	b.n	8004aba <_malloc_r+0x82>
 8004b1e:	46c0      	nop			; (mov r8, r8)
 8004b20:	20000228 	.word	0x20000228

08004b24 <_sbrk_r>:
 8004b24:	2300      	movs	r3, #0
 8004b26:	b570      	push	{r4, r5, r6, lr}
 8004b28:	4d06      	ldr	r5, [pc, #24]	; (8004b44 <_sbrk_r+0x20>)
 8004b2a:	0004      	movs	r4, r0
 8004b2c:	0008      	movs	r0, r1
 8004b2e:	602b      	str	r3, [r5, #0]
 8004b30:	f7fc fae8 	bl	8001104 <_sbrk>
 8004b34:	1c43      	adds	r3, r0, #1
 8004b36:	d103      	bne.n	8004b40 <_sbrk_r+0x1c>
 8004b38:	682b      	ldr	r3, [r5, #0]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d000      	beq.n	8004b40 <_sbrk_r+0x1c>
 8004b3e:	6023      	str	r3, [r4, #0]
 8004b40:	bd70      	pop	{r4, r5, r6, pc}
 8004b42:	46c0      	nop			; (mov r8, r8)
 8004b44:	20000230 	.word	0x20000230

08004b48 <siprintf>:
 8004b48:	b40e      	push	{r1, r2, r3}
 8004b4a:	b500      	push	{lr}
 8004b4c:	490b      	ldr	r1, [pc, #44]	; (8004b7c <siprintf+0x34>)
 8004b4e:	b09c      	sub	sp, #112	; 0x70
 8004b50:	ab1d      	add	r3, sp, #116	; 0x74
 8004b52:	9002      	str	r0, [sp, #8]
 8004b54:	9006      	str	r0, [sp, #24]
 8004b56:	9107      	str	r1, [sp, #28]
 8004b58:	9104      	str	r1, [sp, #16]
 8004b5a:	4809      	ldr	r0, [pc, #36]	; (8004b80 <siprintf+0x38>)
 8004b5c:	4909      	ldr	r1, [pc, #36]	; (8004b84 <siprintf+0x3c>)
 8004b5e:	cb04      	ldmia	r3!, {r2}
 8004b60:	9105      	str	r1, [sp, #20]
 8004b62:	6800      	ldr	r0, [r0, #0]
 8004b64:	a902      	add	r1, sp, #8
 8004b66:	9301      	str	r3, [sp, #4]
 8004b68:	f000 f896 	bl	8004c98 <_svfiprintf_r>
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	9a02      	ldr	r2, [sp, #8]
 8004b70:	7013      	strb	r3, [r2, #0]
 8004b72:	b01c      	add	sp, #112	; 0x70
 8004b74:	bc08      	pop	{r3}
 8004b76:	b003      	add	sp, #12
 8004b78:	4718      	bx	r3
 8004b7a:	46c0      	nop			; (mov r8, r8)
 8004b7c:	7fffffff 	.word	0x7fffffff
 8004b80:	2000000c 	.word	0x2000000c
 8004b84:	ffff0208 	.word	0xffff0208

08004b88 <strstr>:
 8004b88:	780a      	ldrb	r2, [r1, #0]
 8004b8a:	b530      	push	{r4, r5, lr}
 8004b8c:	2a00      	cmp	r2, #0
 8004b8e:	d10c      	bne.n	8004baa <strstr+0x22>
 8004b90:	bd30      	pop	{r4, r5, pc}
 8004b92:	429a      	cmp	r2, r3
 8004b94:	d108      	bne.n	8004ba8 <strstr+0x20>
 8004b96:	2301      	movs	r3, #1
 8004b98:	5ccc      	ldrb	r4, [r1, r3]
 8004b9a:	2c00      	cmp	r4, #0
 8004b9c:	d0f8      	beq.n	8004b90 <strstr+0x8>
 8004b9e:	5cc5      	ldrb	r5, [r0, r3]
 8004ba0:	42a5      	cmp	r5, r4
 8004ba2:	d101      	bne.n	8004ba8 <strstr+0x20>
 8004ba4:	3301      	adds	r3, #1
 8004ba6:	e7f7      	b.n	8004b98 <strstr+0x10>
 8004ba8:	3001      	adds	r0, #1
 8004baa:	7803      	ldrb	r3, [r0, #0]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d1f0      	bne.n	8004b92 <strstr+0xa>
 8004bb0:	0018      	movs	r0, r3
 8004bb2:	e7ed      	b.n	8004b90 <strstr+0x8>

08004bb4 <__malloc_lock>:
 8004bb4:	b510      	push	{r4, lr}
 8004bb6:	4802      	ldr	r0, [pc, #8]	; (8004bc0 <__malloc_lock+0xc>)
 8004bb8:	f000 faf0 	bl	800519c <__retarget_lock_acquire_recursive>
 8004bbc:	bd10      	pop	{r4, pc}
 8004bbe:	46c0      	nop			; (mov r8, r8)
 8004bc0:	20000234 	.word	0x20000234

08004bc4 <__malloc_unlock>:
 8004bc4:	b510      	push	{r4, lr}
 8004bc6:	4802      	ldr	r0, [pc, #8]	; (8004bd0 <__malloc_unlock+0xc>)
 8004bc8:	f000 fae9 	bl	800519e <__retarget_lock_release_recursive>
 8004bcc:	bd10      	pop	{r4, pc}
 8004bce:	46c0      	nop			; (mov r8, r8)
 8004bd0:	20000234 	.word	0x20000234

08004bd4 <__ssputs_r>:
 8004bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004bd6:	688e      	ldr	r6, [r1, #8]
 8004bd8:	b085      	sub	sp, #20
 8004bda:	0007      	movs	r7, r0
 8004bdc:	000c      	movs	r4, r1
 8004bde:	9203      	str	r2, [sp, #12]
 8004be0:	9301      	str	r3, [sp, #4]
 8004be2:	429e      	cmp	r6, r3
 8004be4:	d83c      	bhi.n	8004c60 <__ssputs_r+0x8c>
 8004be6:	2390      	movs	r3, #144	; 0x90
 8004be8:	898a      	ldrh	r2, [r1, #12]
 8004bea:	00db      	lsls	r3, r3, #3
 8004bec:	421a      	tst	r2, r3
 8004bee:	d034      	beq.n	8004c5a <__ssputs_r+0x86>
 8004bf0:	6909      	ldr	r1, [r1, #16]
 8004bf2:	6823      	ldr	r3, [r4, #0]
 8004bf4:	6960      	ldr	r0, [r4, #20]
 8004bf6:	1a5b      	subs	r3, r3, r1
 8004bf8:	9302      	str	r3, [sp, #8]
 8004bfa:	2303      	movs	r3, #3
 8004bfc:	4343      	muls	r3, r0
 8004bfe:	0fdd      	lsrs	r5, r3, #31
 8004c00:	18ed      	adds	r5, r5, r3
 8004c02:	9b01      	ldr	r3, [sp, #4]
 8004c04:	9802      	ldr	r0, [sp, #8]
 8004c06:	3301      	adds	r3, #1
 8004c08:	181b      	adds	r3, r3, r0
 8004c0a:	106d      	asrs	r5, r5, #1
 8004c0c:	42ab      	cmp	r3, r5
 8004c0e:	d900      	bls.n	8004c12 <__ssputs_r+0x3e>
 8004c10:	001d      	movs	r5, r3
 8004c12:	0553      	lsls	r3, r2, #21
 8004c14:	d532      	bpl.n	8004c7c <__ssputs_r+0xa8>
 8004c16:	0029      	movs	r1, r5
 8004c18:	0038      	movs	r0, r7
 8004c1a:	f7ff ff0d 	bl	8004a38 <_malloc_r>
 8004c1e:	1e06      	subs	r6, r0, #0
 8004c20:	d109      	bne.n	8004c36 <__ssputs_r+0x62>
 8004c22:	230c      	movs	r3, #12
 8004c24:	603b      	str	r3, [r7, #0]
 8004c26:	2340      	movs	r3, #64	; 0x40
 8004c28:	2001      	movs	r0, #1
 8004c2a:	89a2      	ldrh	r2, [r4, #12]
 8004c2c:	4240      	negs	r0, r0
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	81a3      	strh	r3, [r4, #12]
 8004c32:	b005      	add	sp, #20
 8004c34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c36:	9a02      	ldr	r2, [sp, #8]
 8004c38:	6921      	ldr	r1, [r4, #16]
 8004c3a:	f7ff fe53 	bl	80048e4 <memcpy>
 8004c3e:	89a3      	ldrh	r3, [r4, #12]
 8004c40:	4a14      	ldr	r2, [pc, #80]	; (8004c94 <__ssputs_r+0xc0>)
 8004c42:	401a      	ands	r2, r3
 8004c44:	2380      	movs	r3, #128	; 0x80
 8004c46:	4313      	orrs	r3, r2
 8004c48:	81a3      	strh	r3, [r4, #12]
 8004c4a:	9b02      	ldr	r3, [sp, #8]
 8004c4c:	6126      	str	r6, [r4, #16]
 8004c4e:	18f6      	adds	r6, r6, r3
 8004c50:	6026      	str	r6, [r4, #0]
 8004c52:	6165      	str	r5, [r4, #20]
 8004c54:	9e01      	ldr	r6, [sp, #4]
 8004c56:	1aed      	subs	r5, r5, r3
 8004c58:	60a5      	str	r5, [r4, #8]
 8004c5a:	9b01      	ldr	r3, [sp, #4]
 8004c5c:	429e      	cmp	r6, r3
 8004c5e:	d900      	bls.n	8004c62 <__ssputs_r+0x8e>
 8004c60:	9e01      	ldr	r6, [sp, #4]
 8004c62:	0032      	movs	r2, r6
 8004c64:	9903      	ldr	r1, [sp, #12]
 8004c66:	6820      	ldr	r0, [r4, #0]
 8004c68:	f000 faa5 	bl	80051b6 <memmove>
 8004c6c:	68a3      	ldr	r3, [r4, #8]
 8004c6e:	2000      	movs	r0, #0
 8004c70:	1b9b      	subs	r3, r3, r6
 8004c72:	60a3      	str	r3, [r4, #8]
 8004c74:	6823      	ldr	r3, [r4, #0]
 8004c76:	199e      	adds	r6, r3, r6
 8004c78:	6026      	str	r6, [r4, #0]
 8004c7a:	e7da      	b.n	8004c32 <__ssputs_r+0x5e>
 8004c7c:	002a      	movs	r2, r5
 8004c7e:	0038      	movs	r0, r7
 8004c80:	f000 faac 	bl	80051dc <_realloc_r>
 8004c84:	1e06      	subs	r6, r0, #0
 8004c86:	d1e0      	bne.n	8004c4a <__ssputs_r+0x76>
 8004c88:	0038      	movs	r0, r7
 8004c8a:	6921      	ldr	r1, [r4, #16]
 8004c8c:	f7ff fe68 	bl	8004960 <_free_r>
 8004c90:	e7c7      	b.n	8004c22 <__ssputs_r+0x4e>
 8004c92:	46c0      	nop			; (mov r8, r8)
 8004c94:	fffffb7f 	.word	0xfffffb7f

08004c98 <_svfiprintf_r>:
 8004c98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c9a:	b0a1      	sub	sp, #132	; 0x84
 8004c9c:	9003      	str	r0, [sp, #12]
 8004c9e:	001d      	movs	r5, r3
 8004ca0:	898b      	ldrh	r3, [r1, #12]
 8004ca2:	000f      	movs	r7, r1
 8004ca4:	0016      	movs	r6, r2
 8004ca6:	061b      	lsls	r3, r3, #24
 8004ca8:	d511      	bpl.n	8004cce <_svfiprintf_r+0x36>
 8004caa:	690b      	ldr	r3, [r1, #16]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d10e      	bne.n	8004cce <_svfiprintf_r+0x36>
 8004cb0:	2140      	movs	r1, #64	; 0x40
 8004cb2:	f7ff fec1 	bl	8004a38 <_malloc_r>
 8004cb6:	6038      	str	r0, [r7, #0]
 8004cb8:	6138      	str	r0, [r7, #16]
 8004cba:	2800      	cmp	r0, #0
 8004cbc:	d105      	bne.n	8004cca <_svfiprintf_r+0x32>
 8004cbe:	230c      	movs	r3, #12
 8004cc0:	9a03      	ldr	r2, [sp, #12]
 8004cc2:	3801      	subs	r0, #1
 8004cc4:	6013      	str	r3, [r2, #0]
 8004cc6:	b021      	add	sp, #132	; 0x84
 8004cc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004cca:	2340      	movs	r3, #64	; 0x40
 8004ccc:	617b      	str	r3, [r7, #20]
 8004cce:	2300      	movs	r3, #0
 8004cd0:	ac08      	add	r4, sp, #32
 8004cd2:	6163      	str	r3, [r4, #20]
 8004cd4:	3320      	adds	r3, #32
 8004cd6:	7663      	strb	r3, [r4, #25]
 8004cd8:	3310      	adds	r3, #16
 8004cda:	76a3      	strb	r3, [r4, #26]
 8004cdc:	9507      	str	r5, [sp, #28]
 8004cde:	0035      	movs	r5, r6
 8004ce0:	782b      	ldrb	r3, [r5, #0]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d001      	beq.n	8004cea <_svfiprintf_r+0x52>
 8004ce6:	2b25      	cmp	r3, #37	; 0x25
 8004ce8:	d147      	bne.n	8004d7a <_svfiprintf_r+0xe2>
 8004cea:	1bab      	subs	r3, r5, r6
 8004cec:	9305      	str	r3, [sp, #20]
 8004cee:	42b5      	cmp	r5, r6
 8004cf0:	d00c      	beq.n	8004d0c <_svfiprintf_r+0x74>
 8004cf2:	0032      	movs	r2, r6
 8004cf4:	0039      	movs	r1, r7
 8004cf6:	9803      	ldr	r0, [sp, #12]
 8004cf8:	f7ff ff6c 	bl	8004bd4 <__ssputs_r>
 8004cfc:	1c43      	adds	r3, r0, #1
 8004cfe:	d100      	bne.n	8004d02 <_svfiprintf_r+0x6a>
 8004d00:	e0ae      	b.n	8004e60 <_svfiprintf_r+0x1c8>
 8004d02:	6962      	ldr	r2, [r4, #20]
 8004d04:	9b05      	ldr	r3, [sp, #20]
 8004d06:	4694      	mov	ip, r2
 8004d08:	4463      	add	r3, ip
 8004d0a:	6163      	str	r3, [r4, #20]
 8004d0c:	782b      	ldrb	r3, [r5, #0]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d100      	bne.n	8004d14 <_svfiprintf_r+0x7c>
 8004d12:	e0a5      	b.n	8004e60 <_svfiprintf_r+0x1c8>
 8004d14:	2201      	movs	r2, #1
 8004d16:	2300      	movs	r3, #0
 8004d18:	4252      	negs	r2, r2
 8004d1a:	6062      	str	r2, [r4, #4]
 8004d1c:	a904      	add	r1, sp, #16
 8004d1e:	3254      	adds	r2, #84	; 0x54
 8004d20:	1852      	adds	r2, r2, r1
 8004d22:	1c6e      	adds	r6, r5, #1
 8004d24:	6023      	str	r3, [r4, #0]
 8004d26:	60e3      	str	r3, [r4, #12]
 8004d28:	60a3      	str	r3, [r4, #8]
 8004d2a:	7013      	strb	r3, [r2, #0]
 8004d2c:	65a3      	str	r3, [r4, #88]	; 0x58
 8004d2e:	2205      	movs	r2, #5
 8004d30:	7831      	ldrb	r1, [r6, #0]
 8004d32:	4854      	ldr	r0, [pc, #336]	; (8004e84 <_svfiprintf_r+0x1ec>)
 8004d34:	f000 fa34 	bl	80051a0 <memchr>
 8004d38:	1c75      	adds	r5, r6, #1
 8004d3a:	2800      	cmp	r0, #0
 8004d3c:	d11f      	bne.n	8004d7e <_svfiprintf_r+0xe6>
 8004d3e:	6822      	ldr	r2, [r4, #0]
 8004d40:	06d3      	lsls	r3, r2, #27
 8004d42:	d504      	bpl.n	8004d4e <_svfiprintf_r+0xb6>
 8004d44:	2353      	movs	r3, #83	; 0x53
 8004d46:	a904      	add	r1, sp, #16
 8004d48:	185b      	adds	r3, r3, r1
 8004d4a:	2120      	movs	r1, #32
 8004d4c:	7019      	strb	r1, [r3, #0]
 8004d4e:	0713      	lsls	r3, r2, #28
 8004d50:	d504      	bpl.n	8004d5c <_svfiprintf_r+0xc4>
 8004d52:	2353      	movs	r3, #83	; 0x53
 8004d54:	a904      	add	r1, sp, #16
 8004d56:	185b      	adds	r3, r3, r1
 8004d58:	212b      	movs	r1, #43	; 0x2b
 8004d5a:	7019      	strb	r1, [r3, #0]
 8004d5c:	7833      	ldrb	r3, [r6, #0]
 8004d5e:	2b2a      	cmp	r3, #42	; 0x2a
 8004d60:	d016      	beq.n	8004d90 <_svfiprintf_r+0xf8>
 8004d62:	0035      	movs	r5, r6
 8004d64:	2100      	movs	r1, #0
 8004d66:	200a      	movs	r0, #10
 8004d68:	68e3      	ldr	r3, [r4, #12]
 8004d6a:	782a      	ldrb	r2, [r5, #0]
 8004d6c:	1c6e      	adds	r6, r5, #1
 8004d6e:	3a30      	subs	r2, #48	; 0x30
 8004d70:	2a09      	cmp	r2, #9
 8004d72:	d94e      	bls.n	8004e12 <_svfiprintf_r+0x17a>
 8004d74:	2900      	cmp	r1, #0
 8004d76:	d111      	bne.n	8004d9c <_svfiprintf_r+0x104>
 8004d78:	e017      	b.n	8004daa <_svfiprintf_r+0x112>
 8004d7a:	3501      	adds	r5, #1
 8004d7c:	e7b0      	b.n	8004ce0 <_svfiprintf_r+0x48>
 8004d7e:	4b41      	ldr	r3, [pc, #260]	; (8004e84 <_svfiprintf_r+0x1ec>)
 8004d80:	6822      	ldr	r2, [r4, #0]
 8004d82:	1ac0      	subs	r0, r0, r3
 8004d84:	2301      	movs	r3, #1
 8004d86:	4083      	lsls	r3, r0
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	002e      	movs	r6, r5
 8004d8c:	6023      	str	r3, [r4, #0]
 8004d8e:	e7ce      	b.n	8004d2e <_svfiprintf_r+0x96>
 8004d90:	9b07      	ldr	r3, [sp, #28]
 8004d92:	1d19      	adds	r1, r3, #4
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	9107      	str	r1, [sp, #28]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	db01      	blt.n	8004da0 <_svfiprintf_r+0x108>
 8004d9c:	930b      	str	r3, [sp, #44]	; 0x2c
 8004d9e:	e004      	b.n	8004daa <_svfiprintf_r+0x112>
 8004da0:	425b      	negs	r3, r3
 8004da2:	60e3      	str	r3, [r4, #12]
 8004da4:	2302      	movs	r3, #2
 8004da6:	4313      	orrs	r3, r2
 8004da8:	6023      	str	r3, [r4, #0]
 8004daa:	782b      	ldrb	r3, [r5, #0]
 8004dac:	2b2e      	cmp	r3, #46	; 0x2e
 8004dae:	d10a      	bne.n	8004dc6 <_svfiprintf_r+0x12e>
 8004db0:	786b      	ldrb	r3, [r5, #1]
 8004db2:	2b2a      	cmp	r3, #42	; 0x2a
 8004db4:	d135      	bne.n	8004e22 <_svfiprintf_r+0x18a>
 8004db6:	9b07      	ldr	r3, [sp, #28]
 8004db8:	3502      	adds	r5, #2
 8004dba:	1d1a      	adds	r2, r3, #4
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	9207      	str	r2, [sp, #28]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	db2b      	blt.n	8004e1c <_svfiprintf_r+0x184>
 8004dc4:	9309      	str	r3, [sp, #36]	; 0x24
 8004dc6:	4e30      	ldr	r6, [pc, #192]	; (8004e88 <_svfiprintf_r+0x1f0>)
 8004dc8:	2203      	movs	r2, #3
 8004dca:	0030      	movs	r0, r6
 8004dcc:	7829      	ldrb	r1, [r5, #0]
 8004dce:	f000 f9e7 	bl	80051a0 <memchr>
 8004dd2:	2800      	cmp	r0, #0
 8004dd4:	d006      	beq.n	8004de4 <_svfiprintf_r+0x14c>
 8004dd6:	2340      	movs	r3, #64	; 0x40
 8004dd8:	1b80      	subs	r0, r0, r6
 8004dda:	4083      	lsls	r3, r0
 8004ddc:	6822      	ldr	r2, [r4, #0]
 8004dde:	3501      	adds	r5, #1
 8004de0:	4313      	orrs	r3, r2
 8004de2:	6023      	str	r3, [r4, #0]
 8004de4:	7829      	ldrb	r1, [r5, #0]
 8004de6:	2206      	movs	r2, #6
 8004de8:	4828      	ldr	r0, [pc, #160]	; (8004e8c <_svfiprintf_r+0x1f4>)
 8004dea:	1c6e      	adds	r6, r5, #1
 8004dec:	7621      	strb	r1, [r4, #24]
 8004dee:	f000 f9d7 	bl	80051a0 <memchr>
 8004df2:	2800      	cmp	r0, #0
 8004df4:	d03c      	beq.n	8004e70 <_svfiprintf_r+0x1d8>
 8004df6:	4b26      	ldr	r3, [pc, #152]	; (8004e90 <_svfiprintf_r+0x1f8>)
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d125      	bne.n	8004e48 <_svfiprintf_r+0x1b0>
 8004dfc:	2207      	movs	r2, #7
 8004dfe:	9b07      	ldr	r3, [sp, #28]
 8004e00:	3307      	adds	r3, #7
 8004e02:	4393      	bics	r3, r2
 8004e04:	3308      	adds	r3, #8
 8004e06:	9307      	str	r3, [sp, #28]
 8004e08:	6963      	ldr	r3, [r4, #20]
 8004e0a:	9a04      	ldr	r2, [sp, #16]
 8004e0c:	189b      	adds	r3, r3, r2
 8004e0e:	6163      	str	r3, [r4, #20]
 8004e10:	e765      	b.n	8004cde <_svfiprintf_r+0x46>
 8004e12:	4343      	muls	r3, r0
 8004e14:	0035      	movs	r5, r6
 8004e16:	2101      	movs	r1, #1
 8004e18:	189b      	adds	r3, r3, r2
 8004e1a:	e7a6      	b.n	8004d6a <_svfiprintf_r+0xd2>
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	425b      	negs	r3, r3
 8004e20:	e7d0      	b.n	8004dc4 <_svfiprintf_r+0x12c>
 8004e22:	2300      	movs	r3, #0
 8004e24:	200a      	movs	r0, #10
 8004e26:	001a      	movs	r2, r3
 8004e28:	3501      	adds	r5, #1
 8004e2a:	6063      	str	r3, [r4, #4]
 8004e2c:	7829      	ldrb	r1, [r5, #0]
 8004e2e:	1c6e      	adds	r6, r5, #1
 8004e30:	3930      	subs	r1, #48	; 0x30
 8004e32:	2909      	cmp	r1, #9
 8004e34:	d903      	bls.n	8004e3e <_svfiprintf_r+0x1a6>
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d0c5      	beq.n	8004dc6 <_svfiprintf_r+0x12e>
 8004e3a:	9209      	str	r2, [sp, #36]	; 0x24
 8004e3c:	e7c3      	b.n	8004dc6 <_svfiprintf_r+0x12e>
 8004e3e:	4342      	muls	r2, r0
 8004e40:	0035      	movs	r5, r6
 8004e42:	2301      	movs	r3, #1
 8004e44:	1852      	adds	r2, r2, r1
 8004e46:	e7f1      	b.n	8004e2c <_svfiprintf_r+0x194>
 8004e48:	ab07      	add	r3, sp, #28
 8004e4a:	9300      	str	r3, [sp, #0]
 8004e4c:	003a      	movs	r2, r7
 8004e4e:	0021      	movs	r1, r4
 8004e50:	4b10      	ldr	r3, [pc, #64]	; (8004e94 <_svfiprintf_r+0x1fc>)
 8004e52:	9803      	ldr	r0, [sp, #12]
 8004e54:	e000      	b.n	8004e58 <_svfiprintf_r+0x1c0>
 8004e56:	bf00      	nop
 8004e58:	9004      	str	r0, [sp, #16]
 8004e5a:	9b04      	ldr	r3, [sp, #16]
 8004e5c:	3301      	adds	r3, #1
 8004e5e:	d1d3      	bne.n	8004e08 <_svfiprintf_r+0x170>
 8004e60:	89bb      	ldrh	r3, [r7, #12]
 8004e62:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004e64:	065b      	lsls	r3, r3, #25
 8004e66:	d400      	bmi.n	8004e6a <_svfiprintf_r+0x1d2>
 8004e68:	e72d      	b.n	8004cc6 <_svfiprintf_r+0x2e>
 8004e6a:	2001      	movs	r0, #1
 8004e6c:	4240      	negs	r0, r0
 8004e6e:	e72a      	b.n	8004cc6 <_svfiprintf_r+0x2e>
 8004e70:	ab07      	add	r3, sp, #28
 8004e72:	9300      	str	r3, [sp, #0]
 8004e74:	003a      	movs	r2, r7
 8004e76:	0021      	movs	r1, r4
 8004e78:	4b06      	ldr	r3, [pc, #24]	; (8004e94 <_svfiprintf_r+0x1fc>)
 8004e7a:	9803      	ldr	r0, [sp, #12]
 8004e7c:	f000 f87c 	bl	8004f78 <_printf_i>
 8004e80:	e7ea      	b.n	8004e58 <_svfiprintf_r+0x1c0>
 8004e82:	46c0      	nop			; (mov r8, r8)
 8004e84:	08005484 	.word	0x08005484
 8004e88:	0800548a 	.word	0x0800548a
 8004e8c:	0800548e 	.word	0x0800548e
 8004e90:	00000000 	.word	0x00000000
 8004e94:	08004bd5 	.word	0x08004bd5

08004e98 <_printf_common>:
 8004e98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004e9a:	0015      	movs	r5, r2
 8004e9c:	9301      	str	r3, [sp, #4]
 8004e9e:	688a      	ldr	r2, [r1, #8]
 8004ea0:	690b      	ldr	r3, [r1, #16]
 8004ea2:	000c      	movs	r4, r1
 8004ea4:	9000      	str	r0, [sp, #0]
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	da00      	bge.n	8004eac <_printf_common+0x14>
 8004eaa:	0013      	movs	r3, r2
 8004eac:	0022      	movs	r2, r4
 8004eae:	602b      	str	r3, [r5, #0]
 8004eb0:	3243      	adds	r2, #67	; 0x43
 8004eb2:	7812      	ldrb	r2, [r2, #0]
 8004eb4:	2a00      	cmp	r2, #0
 8004eb6:	d001      	beq.n	8004ebc <_printf_common+0x24>
 8004eb8:	3301      	adds	r3, #1
 8004eba:	602b      	str	r3, [r5, #0]
 8004ebc:	6823      	ldr	r3, [r4, #0]
 8004ebe:	069b      	lsls	r3, r3, #26
 8004ec0:	d502      	bpl.n	8004ec8 <_printf_common+0x30>
 8004ec2:	682b      	ldr	r3, [r5, #0]
 8004ec4:	3302      	adds	r3, #2
 8004ec6:	602b      	str	r3, [r5, #0]
 8004ec8:	6822      	ldr	r2, [r4, #0]
 8004eca:	2306      	movs	r3, #6
 8004ecc:	0017      	movs	r7, r2
 8004ece:	401f      	ands	r7, r3
 8004ed0:	421a      	tst	r2, r3
 8004ed2:	d027      	beq.n	8004f24 <_printf_common+0x8c>
 8004ed4:	0023      	movs	r3, r4
 8004ed6:	3343      	adds	r3, #67	; 0x43
 8004ed8:	781b      	ldrb	r3, [r3, #0]
 8004eda:	1e5a      	subs	r2, r3, #1
 8004edc:	4193      	sbcs	r3, r2
 8004ede:	6822      	ldr	r2, [r4, #0]
 8004ee0:	0692      	lsls	r2, r2, #26
 8004ee2:	d430      	bmi.n	8004f46 <_printf_common+0xae>
 8004ee4:	0022      	movs	r2, r4
 8004ee6:	9901      	ldr	r1, [sp, #4]
 8004ee8:	9800      	ldr	r0, [sp, #0]
 8004eea:	9e08      	ldr	r6, [sp, #32]
 8004eec:	3243      	adds	r2, #67	; 0x43
 8004eee:	47b0      	blx	r6
 8004ef0:	1c43      	adds	r3, r0, #1
 8004ef2:	d025      	beq.n	8004f40 <_printf_common+0xa8>
 8004ef4:	2306      	movs	r3, #6
 8004ef6:	6820      	ldr	r0, [r4, #0]
 8004ef8:	682a      	ldr	r2, [r5, #0]
 8004efa:	68e1      	ldr	r1, [r4, #12]
 8004efc:	2500      	movs	r5, #0
 8004efe:	4003      	ands	r3, r0
 8004f00:	2b04      	cmp	r3, #4
 8004f02:	d103      	bne.n	8004f0c <_printf_common+0x74>
 8004f04:	1a8d      	subs	r5, r1, r2
 8004f06:	43eb      	mvns	r3, r5
 8004f08:	17db      	asrs	r3, r3, #31
 8004f0a:	401d      	ands	r5, r3
 8004f0c:	68a3      	ldr	r3, [r4, #8]
 8004f0e:	6922      	ldr	r2, [r4, #16]
 8004f10:	4293      	cmp	r3, r2
 8004f12:	dd01      	ble.n	8004f18 <_printf_common+0x80>
 8004f14:	1a9b      	subs	r3, r3, r2
 8004f16:	18ed      	adds	r5, r5, r3
 8004f18:	2700      	movs	r7, #0
 8004f1a:	42bd      	cmp	r5, r7
 8004f1c:	d120      	bne.n	8004f60 <_printf_common+0xc8>
 8004f1e:	2000      	movs	r0, #0
 8004f20:	e010      	b.n	8004f44 <_printf_common+0xac>
 8004f22:	3701      	adds	r7, #1
 8004f24:	68e3      	ldr	r3, [r4, #12]
 8004f26:	682a      	ldr	r2, [r5, #0]
 8004f28:	1a9b      	subs	r3, r3, r2
 8004f2a:	42bb      	cmp	r3, r7
 8004f2c:	ddd2      	ble.n	8004ed4 <_printf_common+0x3c>
 8004f2e:	0022      	movs	r2, r4
 8004f30:	2301      	movs	r3, #1
 8004f32:	9901      	ldr	r1, [sp, #4]
 8004f34:	9800      	ldr	r0, [sp, #0]
 8004f36:	9e08      	ldr	r6, [sp, #32]
 8004f38:	3219      	adds	r2, #25
 8004f3a:	47b0      	blx	r6
 8004f3c:	1c43      	adds	r3, r0, #1
 8004f3e:	d1f0      	bne.n	8004f22 <_printf_common+0x8a>
 8004f40:	2001      	movs	r0, #1
 8004f42:	4240      	negs	r0, r0
 8004f44:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004f46:	2030      	movs	r0, #48	; 0x30
 8004f48:	18e1      	adds	r1, r4, r3
 8004f4a:	3143      	adds	r1, #67	; 0x43
 8004f4c:	7008      	strb	r0, [r1, #0]
 8004f4e:	0021      	movs	r1, r4
 8004f50:	1c5a      	adds	r2, r3, #1
 8004f52:	3145      	adds	r1, #69	; 0x45
 8004f54:	7809      	ldrb	r1, [r1, #0]
 8004f56:	18a2      	adds	r2, r4, r2
 8004f58:	3243      	adds	r2, #67	; 0x43
 8004f5a:	3302      	adds	r3, #2
 8004f5c:	7011      	strb	r1, [r2, #0]
 8004f5e:	e7c1      	b.n	8004ee4 <_printf_common+0x4c>
 8004f60:	0022      	movs	r2, r4
 8004f62:	2301      	movs	r3, #1
 8004f64:	9901      	ldr	r1, [sp, #4]
 8004f66:	9800      	ldr	r0, [sp, #0]
 8004f68:	9e08      	ldr	r6, [sp, #32]
 8004f6a:	321a      	adds	r2, #26
 8004f6c:	47b0      	blx	r6
 8004f6e:	1c43      	adds	r3, r0, #1
 8004f70:	d0e6      	beq.n	8004f40 <_printf_common+0xa8>
 8004f72:	3701      	adds	r7, #1
 8004f74:	e7d1      	b.n	8004f1a <_printf_common+0x82>
	...

08004f78 <_printf_i>:
 8004f78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f7a:	b08b      	sub	sp, #44	; 0x2c
 8004f7c:	9206      	str	r2, [sp, #24]
 8004f7e:	000a      	movs	r2, r1
 8004f80:	3243      	adds	r2, #67	; 0x43
 8004f82:	9307      	str	r3, [sp, #28]
 8004f84:	9005      	str	r0, [sp, #20]
 8004f86:	9204      	str	r2, [sp, #16]
 8004f88:	7e0a      	ldrb	r2, [r1, #24]
 8004f8a:	000c      	movs	r4, r1
 8004f8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004f8e:	2a78      	cmp	r2, #120	; 0x78
 8004f90:	d807      	bhi.n	8004fa2 <_printf_i+0x2a>
 8004f92:	2a62      	cmp	r2, #98	; 0x62
 8004f94:	d809      	bhi.n	8004faa <_printf_i+0x32>
 8004f96:	2a00      	cmp	r2, #0
 8004f98:	d100      	bne.n	8004f9c <_printf_i+0x24>
 8004f9a:	e0c1      	b.n	8005120 <_printf_i+0x1a8>
 8004f9c:	2a58      	cmp	r2, #88	; 0x58
 8004f9e:	d100      	bne.n	8004fa2 <_printf_i+0x2a>
 8004fa0:	e08c      	b.n	80050bc <_printf_i+0x144>
 8004fa2:	0026      	movs	r6, r4
 8004fa4:	3642      	adds	r6, #66	; 0x42
 8004fa6:	7032      	strb	r2, [r6, #0]
 8004fa8:	e022      	b.n	8004ff0 <_printf_i+0x78>
 8004faa:	0010      	movs	r0, r2
 8004fac:	3863      	subs	r0, #99	; 0x63
 8004fae:	2815      	cmp	r0, #21
 8004fb0:	d8f7      	bhi.n	8004fa2 <_printf_i+0x2a>
 8004fb2:	f7fb f8af 	bl	8000114 <__gnu_thumb1_case_shi>
 8004fb6:	0016      	.short	0x0016
 8004fb8:	fff6001f 	.word	0xfff6001f
 8004fbc:	fff6fff6 	.word	0xfff6fff6
 8004fc0:	001ffff6 	.word	0x001ffff6
 8004fc4:	fff6fff6 	.word	0xfff6fff6
 8004fc8:	fff6fff6 	.word	0xfff6fff6
 8004fcc:	003600a8 	.word	0x003600a8
 8004fd0:	fff6009a 	.word	0xfff6009a
 8004fd4:	00b9fff6 	.word	0x00b9fff6
 8004fd8:	0036fff6 	.word	0x0036fff6
 8004fdc:	fff6fff6 	.word	0xfff6fff6
 8004fe0:	009e      	.short	0x009e
 8004fe2:	0026      	movs	r6, r4
 8004fe4:	681a      	ldr	r2, [r3, #0]
 8004fe6:	3642      	adds	r6, #66	; 0x42
 8004fe8:	1d11      	adds	r1, r2, #4
 8004fea:	6019      	str	r1, [r3, #0]
 8004fec:	6813      	ldr	r3, [r2, #0]
 8004fee:	7033      	strb	r3, [r6, #0]
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	e0a7      	b.n	8005144 <_printf_i+0x1cc>
 8004ff4:	6808      	ldr	r0, [r1, #0]
 8004ff6:	6819      	ldr	r1, [r3, #0]
 8004ff8:	1d0a      	adds	r2, r1, #4
 8004ffa:	0605      	lsls	r5, r0, #24
 8004ffc:	d50b      	bpl.n	8005016 <_printf_i+0x9e>
 8004ffe:	680d      	ldr	r5, [r1, #0]
 8005000:	601a      	str	r2, [r3, #0]
 8005002:	2d00      	cmp	r5, #0
 8005004:	da03      	bge.n	800500e <_printf_i+0x96>
 8005006:	232d      	movs	r3, #45	; 0x2d
 8005008:	9a04      	ldr	r2, [sp, #16]
 800500a:	426d      	negs	r5, r5
 800500c:	7013      	strb	r3, [r2, #0]
 800500e:	4b61      	ldr	r3, [pc, #388]	; (8005194 <_printf_i+0x21c>)
 8005010:	270a      	movs	r7, #10
 8005012:	9303      	str	r3, [sp, #12]
 8005014:	e01b      	b.n	800504e <_printf_i+0xd6>
 8005016:	680d      	ldr	r5, [r1, #0]
 8005018:	601a      	str	r2, [r3, #0]
 800501a:	0641      	lsls	r1, r0, #25
 800501c:	d5f1      	bpl.n	8005002 <_printf_i+0x8a>
 800501e:	b22d      	sxth	r5, r5
 8005020:	e7ef      	b.n	8005002 <_printf_i+0x8a>
 8005022:	680d      	ldr	r5, [r1, #0]
 8005024:	6819      	ldr	r1, [r3, #0]
 8005026:	1d08      	adds	r0, r1, #4
 8005028:	6018      	str	r0, [r3, #0]
 800502a:	062e      	lsls	r6, r5, #24
 800502c:	d501      	bpl.n	8005032 <_printf_i+0xba>
 800502e:	680d      	ldr	r5, [r1, #0]
 8005030:	e003      	b.n	800503a <_printf_i+0xc2>
 8005032:	066d      	lsls	r5, r5, #25
 8005034:	d5fb      	bpl.n	800502e <_printf_i+0xb6>
 8005036:	680d      	ldr	r5, [r1, #0]
 8005038:	b2ad      	uxth	r5, r5
 800503a:	4b56      	ldr	r3, [pc, #344]	; (8005194 <_printf_i+0x21c>)
 800503c:	2708      	movs	r7, #8
 800503e:	9303      	str	r3, [sp, #12]
 8005040:	2a6f      	cmp	r2, #111	; 0x6f
 8005042:	d000      	beq.n	8005046 <_printf_i+0xce>
 8005044:	3702      	adds	r7, #2
 8005046:	0023      	movs	r3, r4
 8005048:	2200      	movs	r2, #0
 800504a:	3343      	adds	r3, #67	; 0x43
 800504c:	701a      	strb	r2, [r3, #0]
 800504e:	6863      	ldr	r3, [r4, #4]
 8005050:	60a3      	str	r3, [r4, #8]
 8005052:	2b00      	cmp	r3, #0
 8005054:	db03      	blt.n	800505e <_printf_i+0xe6>
 8005056:	2204      	movs	r2, #4
 8005058:	6821      	ldr	r1, [r4, #0]
 800505a:	4391      	bics	r1, r2
 800505c:	6021      	str	r1, [r4, #0]
 800505e:	2d00      	cmp	r5, #0
 8005060:	d102      	bne.n	8005068 <_printf_i+0xf0>
 8005062:	9e04      	ldr	r6, [sp, #16]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d00c      	beq.n	8005082 <_printf_i+0x10a>
 8005068:	9e04      	ldr	r6, [sp, #16]
 800506a:	0028      	movs	r0, r5
 800506c:	0039      	movs	r1, r7
 800506e:	f7fb f8e1 	bl	8000234 <__aeabi_uidivmod>
 8005072:	9b03      	ldr	r3, [sp, #12]
 8005074:	3e01      	subs	r6, #1
 8005076:	5c5b      	ldrb	r3, [r3, r1]
 8005078:	7033      	strb	r3, [r6, #0]
 800507a:	002b      	movs	r3, r5
 800507c:	0005      	movs	r5, r0
 800507e:	429f      	cmp	r7, r3
 8005080:	d9f3      	bls.n	800506a <_printf_i+0xf2>
 8005082:	2f08      	cmp	r7, #8
 8005084:	d109      	bne.n	800509a <_printf_i+0x122>
 8005086:	6823      	ldr	r3, [r4, #0]
 8005088:	07db      	lsls	r3, r3, #31
 800508a:	d506      	bpl.n	800509a <_printf_i+0x122>
 800508c:	6863      	ldr	r3, [r4, #4]
 800508e:	6922      	ldr	r2, [r4, #16]
 8005090:	4293      	cmp	r3, r2
 8005092:	dc02      	bgt.n	800509a <_printf_i+0x122>
 8005094:	2330      	movs	r3, #48	; 0x30
 8005096:	3e01      	subs	r6, #1
 8005098:	7033      	strb	r3, [r6, #0]
 800509a:	9b04      	ldr	r3, [sp, #16]
 800509c:	1b9b      	subs	r3, r3, r6
 800509e:	6123      	str	r3, [r4, #16]
 80050a0:	9b07      	ldr	r3, [sp, #28]
 80050a2:	0021      	movs	r1, r4
 80050a4:	9300      	str	r3, [sp, #0]
 80050a6:	9805      	ldr	r0, [sp, #20]
 80050a8:	9b06      	ldr	r3, [sp, #24]
 80050aa:	aa09      	add	r2, sp, #36	; 0x24
 80050ac:	f7ff fef4 	bl	8004e98 <_printf_common>
 80050b0:	1c43      	adds	r3, r0, #1
 80050b2:	d14c      	bne.n	800514e <_printf_i+0x1d6>
 80050b4:	2001      	movs	r0, #1
 80050b6:	4240      	negs	r0, r0
 80050b8:	b00b      	add	sp, #44	; 0x2c
 80050ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050bc:	3145      	adds	r1, #69	; 0x45
 80050be:	700a      	strb	r2, [r1, #0]
 80050c0:	4a34      	ldr	r2, [pc, #208]	; (8005194 <_printf_i+0x21c>)
 80050c2:	9203      	str	r2, [sp, #12]
 80050c4:	681a      	ldr	r2, [r3, #0]
 80050c6:	6821      	ldr	r1, [r4, #0]
 80050c8:	ca20      	ldmia	r2!, {r5}
 80050ca:	601a      	str	r2, [r3, #0]
 80050cc:	0608      	lsls	r0, r1, #24
 80050ce:	d516      	bpl.n	80050fe <_printf_i+0x186>
 80050d0:	07cb      	lsls	r3, r1, #31
 80050d2:	d502      	bpl.n	80050da <_printf_i+0x162>
 80050d4:	2320      	movs	r3, #32
 80050d6:	4319      	orrs	r1, r3
 80050d8:	6021      	str	r1, [r4, #0]
 80050da:	2710      	movs	r7, #16
 80050dc:	2d00      	cmp	r5, #0
 80050de:	d1b2      	bne.n	8005046 <_printf_i+0xce>
 80050e0:	2320      	movs	r3, #32
 80050e2:	6822      	ldr	r2, [r4, #0]
 80050e4:	439a      	bics	r2, r3
 80050e6:	6022      	str	r2, [r4, #0]
 80050e8:	e7ad      	b.n	8005046 <_printf_i+0xce>
 80050ea:	2220      	movs	r2, #32
 80050ec:	6809      	ldr	r1, [r1, #0]
 80050ee:	430a      	orrs	r2, r1
 80050f0:	6022      	str	r2, [r4, #0]
 80050f2:	0022      	movs	r2, r4
 80050f4:	2178      	movs	r1, #120	; 0x78
 80050f6:	3245      	adds	r2, #69	; 0x45
 80050f8:	7011      	strb	r1, [r2, #0]
 80050fa:	4a27      	ldr	r2, [pc, #156]	; (8005198 <_printf_i+0x220>)
 80050fc:	e7e1      	b.n	80050c2 <_printf_i+0x14a>
 80050fe:	0648      	lsls	r0, r1, #25
 8005100:	d5e6      	bpl.n	80050d0 <_printf_i+0x158>
 8005102:	b2ad      	uxth	r5, r5
 8005104:	e7e4      	b.n	80050d0 <_printf_i+0x158>
 8005106:	681a      	ldr	r2, [r3, #0]
 8005108:	680d      	ldr	r5, [r1, #0]
 800510a:	1d10      	adds	r0, r2, #4
 800510c:	6949      	ldr	r1, [r1, #20]
 800510e:	6018      	str	r0, [r3, #0]
 8005110:	6813      	ldr	r3, [r2, #0]
 8005112:	062e      	lsls	r6, r5, #24
 8005114:	d501      	bpl.n	800511a <_printf_i+0x1a2>
 8005116:	6019      	str	r1, [r3, #0]
 8005118:	e002      	b.n	8005120 <_printf_i+0x1a8>
 800511a:	066d      	lsls	r5, r5, #25
 800511c:	d5fb      	bpl.n	8005116 <_printf_i+0x19e>
 800511e:	8019      	strh	r1, [r3, #0]
 8005120:	2300      	movs	r3, #0
 8005122:	9e04      	ldr	r6, [sp, #16]
 8005124:	6123      	str	r3, [r4, #16]
 8005126:	e7bb      	b.n	80050a0 <_printf_i+0x128>
 8005128:	681a      	ldr	r2, [r3, #0]
 800512a:	1d11      	adds	r1, r2, #4
 800512c:	6019      	str	r1, [r3, #0]
 800512e:	6816      	ldr	r6, [r2, #0]
 8005130:	2100      	movs	r1, #0
 8005132:	0030      	movs	r0, r6
 8005134:	6862      	ldr	r2, [r4, #4]
 8005136:	f000 f833 	bl	80051a0 <memchr>
 800513a:	2800      	cmp	r0, #0
 800513c:	d001      	beq.n	8005142 <_printf_i+0x1ca>
 800513e:	1b80      	subs	r0, r0, r6
 8005140:	6060      	str	r0, [r4, #4]
 8005142:	6863      	ldr	r3, [r4, #4]
 8005144:	6123      	str	r3, [r4, #16]
 8005146:	2300      	movs	r3, #0
 8005148:	9a04      	ldr	r2, [sp, #16]
 800514a:	7013      	strb	r3, [r2, #0]
 800514c:	e7a8      	b.n	80050a0 <_printf_i+0x128>
 800514e:	6923      	ldr	r3, [r4, #16]
 8005150:	0032      	movs	r2, r6
 8005152:	9906      	ldr	r1, [sp, #24]
 8005154:	9805      	ldr	r0, [sp, #20]
 8005156:	9d07      	ldr	r5, [sp, #28]
 8005158:	47a8      	blx	r5
 800515a:	1c43      	adds	r3, r0, #1
 800515c:	d0aa      	beq.n	80050b4 <_printf_i+0x13c>
 800515e:	6823      	ldr	r3, [r4, #0]
 8005160:	079b      	lsls	r3, r3, #30
 8005162:	d415      	bmi.n	8005190 <_printf_i+0x218>
 8005164:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005166:	68e0      	ldr	r0, [r4, #12]
 8005168:	4298      	cmp	r0, r3
 800516a:	daa5      	bge.n	80050b8 <_printf_i+0x140>
 800516c:	0018      	movs	r0, r3
 800516e:	e7a3      	b.n	80050b8 <_printf_i+0x140>
 8005170:	0022      	movs	r2, r4
 8005172:	2301      	movs	r3, #1
 8005174:	9906      	ldr	r1, [sp, #24]
 8005176:	9805      	ldr	r0, [sp, #20]
 8005178:	9e07      	ldr	r6, [sp, #28]
 800517a:	3219      	adds	r2, #25
 800517c:	47b0      	blx	r6
 800517e:	1c43      	adds	r3, r0, #1
 8005180:	d098      	beq.n	80050b4 <_printf_i+0x13c>
 8005182:	3501      	adds	r5, #1
 8005184:	68e3      	ldr	r3, [r4, #12]
 8005186:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005188:	1a9b      	subs	r3, r3, r2
 800518a:	42ab      	cmp	r3, r5
 800518c:	dcf0      	bgt.n	8005170 <_printf_i+0x1f8>
 800518e:	e7e9      	b.n	8005164 <_printf_i+0x1ec>
 8005190:	2500      	movs	r5, #0
 8005192:	e7f7      	b.n	8005184 <_printf_i+0x20c>
 8005194:	08005495 	.word	0x08005495
 8005198:	080054a6 	.word	0x080054a6

0800519c <__retarget_lock_acquire_recursive>:
 800519c:	4770      	bx	lr

0800519e <__retarget_lock_release_recursive>:
 800519e:	4770      	bx	lr

080051a0 <memchr>:
 80051a0:	b2c9      	uxtb	r1, r1
 80051a2:	1882      	adds	r2, r0, r2
 80051a4:	4290      	cmp	r0, r2
 80051a6:	d101      	bne.n	80051ac <memchr+0xc>
 80051a8:	2000      	movs	r0, #0
 80051aa:	4770      	bx	lr
 80051ac:	7803      	ldrb	r3, [r0, #0]
 80051ae:	428b      	cmp	r3, r1
 80051b0:	d0fb      	beq.n	80051aa <memchr+0xa>
 80051b2:	3001      	adds	r0, #1
 80051b4:	e7f6      	b.n	80051a4 <memchr+0x4>

080051b6 <memmove>:
 80051b6:	b510      	push	{r4, lr}
 80051b8:	4288      	cmp	r0, r1
 80051ba:	d902      	bls.n	80051c2 <memmove+0xc>
 80051bc:	188b      	adds	r3, r1, r2
 80051be:	4298      	cmp	r0, r3
 80051c0:	d303      	bcc.n	80051ca <memmove+0x14>
 80051c2:	2300      	movs	r3, #0
 80051c4:	e007      	b.n	80051d6 <memmove+0x20>
 80051c6:	5c8b      	ldrb	r3, [r1, r2]
 80051c8:	5483      	strb	r3, [r0, r2]
 80051ca:	3a01      	subs	r2, #1
 80051cc:	d2fb      	bcs.n	80051c6 <memmove+0x10>
 80051ce:	bd10      	pop	{r4, pc}
 80051d0:	5ccc      	ldrb	r4, [r1, r3]
 80051d2:	54c4      	strb	r4, [r0, r3]
 80051d4:	3301      	adds	r3, #1
 80051d6:	429a      	cmp	r2, r3
 80051d8:	d1fa      	bne.n	80051d0 <memmove+0x1a>
 80051da:	e7f8      	b.n	80051ce <memmove+0x18>

080051dc <_realloc_r>:
 80051dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80051de:	0007      	movs	r7, r0
 80051e0:	000e      	movs	r6, r1
 80051e2:	0014      	movs	r4, r2
 80051e4:	2900      	cmp	r1, #0
 80051e6:	d105      	bne.n	80051f4 <_realloc_r+0x18>
 80051e8:	0011      	movs	r1, r2
 80051ea:	f7ff fc25 	bl	8004a38 <_malloc_r>
 80051ee:	0005      	movs	r5, r0
 80051f0:	0028      	movs	r0, r5
 80051f2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80051f4:	2a00      	cmp	r2, #0
 80051f6:	d103      	bne.n	8005200 <_realloc_r+0x24>
 80051f8:	f7ff fbb2 	bl	8004960 <_free_r>
 80051fc:	0025      	movs	r5, r4
 80051fe:	e7f7      	b.n	80051f0 <_realloc_r+0x14>
 8005200:	f000 f81b 	bl	800523a <_malloc_usable_size_r>
 8005204:	9001      	str	r0, [sp, #4]
 8005206:	4284      	cmp	r4, r0
 8005208:	d803      	bhi.n	8005212 <_realloc_r+0x36>
 800520a:	0035      	movs	r5, r6
 800520c:	0843      	lsrs	r3, r0, #1
 800520e:	42a3      	cmp	r3, r4
 8005210:	d3ee      	bcc.n	80051f0 <_realloc_r+0x14>
 8005212:	0021      	movs	r1, r4
 8005214:	0038      	movs	r0, r7
 8005216:	f7ff fc0f 	bl	8004a38 <_malloc_r>
 800521a:	1e05      	subs	r5, r0, #0
 800521c:	d0e8      	beq.n	80051f0 <_realloc_r+0x14>
 800521e:	9b01      	ldr	r3, [sp, #4]
 8005220:	0022      	movs	r2, r4
 8005222:	429c      	cmp	r4, r3
 8005224:	d900      	bls.n	8005228 <_realloc_r+0x4c>
 8005226:	001a      	movs	r2, r3
 8005228:	0031      	movs	r1, r6
 800522a:	0028      	movs	r0, r5
 800522c:	f7ff fb5a 	bl	80048e4 <memcpy>
 8005230:	0031      	movs	r1, r6
 8005232:	0038      	movs	r0, r7
 8005234:	f7ff fb94 	bl	8004960 <_free_r>
 8005238:	e7da      	b.n	80051f0 <_realloc_r+0x14>

0800523a <_malloc_usable_size_r>:
 800523a:	1f0b      	subs	r3, r1, #4
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	1f18      	subs	r0, r3, #4
 8005240:	2b00      	cmp	r3, #0
 8005242:	da01      	bge.n	8005248 <_malloc_usable_size_r+0xe>
 8005244:	580b      	ldr	r3, [r1, r0]
 8005246:	18c0      	adds	r0, r0, r3
 8005248:	4770      	bx	lr
	...

0800524c <_init>:
 800524c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800524e:	46c0      	nop			; (mov r8, r8)
 8005250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005252:	bc08      	pop	{r3}
 8005254:	469e      	mov	lr, r3
 8005256:	4770      	bx	lr

08005258 <_fini>:
 8005258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800525a:	46c0      	nop			; (mov r8, r8)
 800525c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800525e:	bc08      	pop	{r3}
 8005260:	469e      	mov	lr, r3
 8005262:	4770      	bx	lr
