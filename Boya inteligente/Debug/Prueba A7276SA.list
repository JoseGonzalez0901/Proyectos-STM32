
Prueba A7276SA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b3dc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000698  0800b570  0800b570  0001b570  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bc08  0800bc08  00020200  2**0
                  CONTENTS
  4 .ARM          00000000  0800bc08  0800bc08  00020200  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800bc08  0800bc08  00020200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bc08  0800bc08  0001bc08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bc0c  0800bc0c  0001bc0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  0800bc10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000518  20000200  0800be10  00020200  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000718  0800be10  00020718  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020230  2**0
                  CONTENTS, READONLY
 13 .debug_info   000169e4  00000000  00000000  00020273  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003113  00000000  00000000  00036c57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001378  00000000  00000000  00039d70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ecb1  00000000  00000000  0003b0e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a90f  00000000  00000000  00059d99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000affdc  00000000  00000000  000746a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00000f2a  00000000  00000000  00124684  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000670c  00000000  00000000  001255b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  0012bcbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000200 	.word	0x20000200
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b554 	.word	0x0800b554

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000204 	.word	0x20000204
 80001cc:	0800b554 	.word	0x0800b554

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_d2lz>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4604      	mov	r4, r0
 8000c90:	460d      	mov	r5, r1
 8000c92:	f7ff ff23 	bl	8000adc <__aeabi_dcmplt>
 8000c96:	b928      	cbnz	r0, 8000ca4 <__aeabi_d2lz+0x1c>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	4629      	mov	r1, r5
 8000c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca0:	f000 b80a 	b.w	8000cb8 <__aeabi_d2ulz>
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000caa:	f000 f805 	bl	8000cb8 <__aeabi_d2ulz>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	bd38      	pop	{r3, r4, r5, pc}
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2ulz>:
 8000cb8:	b5d0      	push	{r4, r6, r7, lr}
 8000cba:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <__aeabi_d2ulz+0x34>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	460f      	mov	r7, r1
 8000cc2:	f7ff fc99 	bl	80005f8 <__aeabi_dmul>
 8000cc6:	f7ff ff6f 	bl	8000ba8 <__aeabi_d2uiz>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	f7ff fc1a 	bl	8000504 <__aeabi_ui2d>
 8000cd0:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <__aeabi_d2ulz+0x38>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f7ff fc90 	bl	80005f8 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4630      	mov	r0, r6
 8000cde:	4639      	mov	r1, r7
 8000ce0:	f7ff fad2 	bl	8000288 <__aeabi_dsub>
 8000ce4:	f7ff ff60 	bl	8000ba8 <__aeabi_d2uiz>
 8000ce8:	4621      	mov	r1, r4
 8000cea:	bdd0      	pop	{r4, r6, r7, pc}
 8000cec:	3df00000 	.word	0x3df00000
 8000cf0:	41f00000 	.word	0x41f00000

08000cf4 <Timers_Init>:

extern TIM_HandleTypeDef htim17;
extern bandera Flag;
static unsigned int Count_Gps=0,Count_Medidas=0,Count_Medidas2=0,Count_Medidas3=0,Count_Medidas4=0,GPS_timeout=0,MQTT_timeout=0;
void Timers_Init()
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0

	  HAL_TIM_Base_Start_IT(&htim17);
 8000cf8:	4802      	ldr	r0, [pc, #8]	; (8000d04 <Timers_Init+0x10>)
 8000cfa:	f004 fbd9 	bl	80054b0 <HAL_TIM_Base_Start_IT>

}
 8000cfe:	bf00      	nop
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	20000454 	.word	0x20000454

08000d08 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
if(Flag.mqtt_command)
 8000d10:	4b4f      	ldr	r3, [pc, #316]	; (8000e50 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8000d12:	785b      	ldrb	r3, [r3, #1]
 8000d14:	f003 0301 	and.w	r3, r3, #1
 8000d18:	b2db      	uxtb	r3, r3
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d00e      	beq.n	8000d3c <HAL_TIM_PeriodElapsedCallback+0x34>
{
	MQTT_timeout++;
 8000d1e:	4b4d      	ldr	r3, [pc, #308]	; (8000e54 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	3301      	adds	r3, #1
 8000d24:	4a4b      	ldr	r2, [pc, #300]	; (8000e54 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000d26:	6013      	str	r3, [r2, #0]
	if(MQTT_timeout>10)
 8000d28:	4b4a      	ldr	r3, [pc, #296]	; (8000e54 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	2b0a      	cmp	r3, #10
 8000d2e:	d908      	bls.n	8000d42 <HAL_TIM_PeriodElapsedCallback+0x3a>
	{
		Flag.mqtt_command=0;
 8000d30:	4a47      	ldr	r2, [pc, #284]	; (8000e50 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8000d32:	7853      	ldrb	r3, [r2, #1]
 8000d34:	f36f 0300 	bfc	r3, #0, #1
 8000d38:	7053      	strb	r3, [r2, #1]
 8000d3a:	e002      	b.n	8000d42 <HAL_TIM_PeriodElapsedCallback+0x3a>
	}
}
else
{
	MQTT_timeout=0;
 8000d3c:	4b45      	ldr	r3, [pc, #276]	; (8000e54 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	601a      	str	r2, [r3, #0]
}
///////////////////////////////////////////
if(Flag.gps_command)
 8000d42:	4b43      	ldr	r3, [pc, #268]	; (8000e50 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000d4a:	b2db      	uxtb	r3, r3
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d00e      	beq.n	8000d6e <HAL_TIM_PeriodElapsedCallback+0x66>
{
	GPS_timeout++;
 8000d50:	4b41      	ldr	r3, [pc, #260]	; (8000e58 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	3301      	adds	r3, #1
 8000d56:	4a40      	ldr	r2, [pc, #256]	; (8000e58 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8000d58:	6013      	str	r3, [r2, #0]
	if(GPS_timeout>10)
 8000d5a:	4b3f      	ldr	r3, [pc, #252]	; (8000e58 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	2b0a      	cmp	r3, #10
 8000d60:	d908      	bls.n	8000d74 <HAL_TIM_PeriodElapsedCallback+0x6c>
	{
		Flag.gps_command=0;
 8000d62:	4a3b      	ldr	r2, [pc, #236]	; (8000e50 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8000d64:	7813      	ldrb	r3, [r2, #0]
 8000d66:	f36f 13c7 	bfc	r3, #7, #1
 8000d6a:	7013      	strb	r3, [r2, #0]
 8000d6c:	e002      	b.n	8000d74 <HAL_TIM_PeriodElapsedCallback+0x6c>
	}
}
else
{
	GPS_timeout=0;
 8000d6e:	4b3a      	ldr	r3, [pc, #232]	; (8000e58 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]
}
///////////////////////////////////
if(Count_Medidas<5)
 8000d74:	4b39      	ldr	r3, [pc, #228]	; (8000e5c <HAL_TIM_PeriodElapsedCallback+0x154>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	2b04      	cmp	r3, #4
 8000d7a:	d805      	bhi.n	8000d88 <HAL_TIM_PeriodElapsedCallback+0x80>
{
	Count_Medidas++;
 8000d7c:	4b37      	ldr	r3, [pc, #220]	; (8000e5c <HAL_TIM_PeriodElapsedCallback+0x154>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	3301      	adds	r3, #1
 8000d82:	4a36      	ldr	r2, [pc, #216]	; (8000e5c <HAL_TIM_PeriodElapsedCallback+0x154>)
 8000d84:	6013      	str	r3, [r2, #0]
 8000d86:	e007      	b.n	8000d98 <HAL_TIM_PeriodElapsedCallback+0x90>
}
else
{
	Count_Medidas=0;
 8000d88:	4b34      	ldr	r3, [pc, #208]	; (8000e5c <HAL_TIM_PeriodElapsedCallback+0x154>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	601a      	str	r2, [r3, #0]
	Flag.Send_Medidas=1;
 8000d8e:	4a30      	ldr	r2, [pc, #192]	; (8000e50 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8000d90:	7853      	ldrb	r3, [r2, #1]
 8000d92:	f043 0304 	orr.w	r3, r3, #4
 8000d96:	7053      	strb	r3, [r2, #1]
}

////////////////////////////////////////
if(Count_Medidas2<5)
 8000d98:	4b31      	ldr	r3, [pc, #196]	; (8000e60 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	2b04      	cmp	r3, #4
 8000d9e:	d805      	bhi.n	8000dac <HAL_TIM_PeriodElapsedCallback+0xa4>
{
	Count_Medidas2++;
 8000da0:	4b2f      	ldr	r3, [pc, #188]	; (8000e60 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	3301      	adds	r3, #1
 8000da6:	4a2e      	ldr	r2, [pc, #184]	; (8000e60 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8000da8:	6013      	str	r3, [r2, #0]
 8000daa:	e007      	b.n	8000dbc <HAL_TIM_PeriodElapsedCallback+0xb4>
}
else
{
	Count_Medidas2=0;
 8000dac:	4b2c      	ldr	r3, [pc, #176]	; (8000e60 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	601a      	str	r2, [r3, #0]
	Flag.Send_Medidas2=1;
 8000db2:	4a27      	ldr	r2, [pc, #156]	; (8000e50 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8000db4:	7853      	ldrb	r3, [r2, #1]
 8000db6:	f043 0308 	orr.w	r3, r3, #8
 8000dba:	7053      	strb	r3, [r2, #1]
}
///////////////////////////////////////
if(Count_Medidas3<5)
 8000dbc:	4b29      	ldr	r3, [pc, #164]	; (8000e64 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	2b04      	cmp	r3, #4
 8000dc2:	d805      	bhi.n	8000dd0 <HAL_TIM_PeriodElapsedCallback+0xc8>
{
	Count_Medidas3++;
 8000dc4:	4b27      	ldr	r3, [pc, #156]	; (8000e64 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	3301      	adds	r3, #1
 8000dca:	4a26      	ldr	r2, [pc, #152]	; (8000e64 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8000dcc:	6013      	str	r3, [r2, #0]
 8000dce:	e007      	b.n	8000de0 <HAL_TIM_PeriodElapsedCallback+0xd8>
}
else
{
	Count_Medidas3=0;
 8000dd0:	4b24      	ldr	r3, [pc, #144]	; (8000e64 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	601a      	str	r2, [r3, #0]
	Flag.Send_Medidas3=1;
 8000dd6:	4a1e      	ldr	r2, [pc, #120]	; (8000e50 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8000dd8:	7853      	ldrb	r3, [r2, #1]
 8000dda:	f043 0310 	orr.w	r3, r3, #16
 8000dde:	7053      	strb	r3, [r2, #1]
}
////////////////////////////////////////
if(Count_Medidas4<5)
 8000de0:	4b21      	ldr	r3, [pc, #132]	; (8000e68 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	2b04      	cmp	r3, #4
 8000de6:	d805      	bhi.n	8000df4 <HAL_TIM_PeriodElapsedCallback+0xec>
{
	Count_Medidas4++;
 8000de8:	4b1f      	ldr	r3, [pc, #124]	; (8000e68 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	3301      	adds	r3, #1
 8000dee:	4a1e      	ldr	r2, [pc, #120]	; (8000e68 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8000df0:	6013      	str	r3, [r2, #0]
 8000df2:	e007      	b.n	8000e04 <HAL_TIM_PeriodElapsedCallback+0xfc>
}
else
{
	Count_Medidas4=0;
 8000df4:	4b1c      	ldr	r3, [pc, #112]	; (8000e68 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	601a      	str	r2, [r3, #0]
	Flag.Send_Medidas4=1;
 8000dfa:	4a15      	ldr	r2, [pc, #84]	; (8000e50 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8000dfc:	7853      	ldrb	r3, [r2, #1]
 8000dfe:	f043 0320 	orr.w	r3, r3, #32
 8000e02:	7053      	strb	r3, [r2, #1]
}
/////////////////////////////////////////
if(Count_Gps<2)
 8000e04:	4b19      	ldr	r3, [pc, #100]	; (8000e6c <HAL_TIM_PeriodElapsedCallback+0x164>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	2b01      	cmp	r3, #1
 8000e0a:	d805      	bhi.n	8000e18 <HAL_TIM_PeriodElapsedCallback+0x110>
{
	Count_Gps++;
 8000e0c:	4b17      	ldr	r3, [pc, #92]	; (8000e6c <HAL_TIM_PeriodElapsedCallback+0x164>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	3301      	adds	r3, #1
 8000e12:	4a16      	ldr	r2, [pc, #88]	; (8000e6c <HAL_TIM_PeriodElapsedCallback+0x164>)
 8000e14:	6013      	str	r3, [r2, #0]
	if(!Flag.gps_command&&Flag.gps)
	{
		Flag.Send_GPS=1;
	}
}
}
 8000e16:	e015      	b.n	8000e44 <HAL_TIM_PeriodElapsedCallback+0x13c>
	Count_Gps=0;
 8000e18:	4b14      	ldr	r3, [pc, #80]	; (8000e6c <HAL_TIM_PeriodElapsedCallback+0x164>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	601a      	str	r2, [r3, #0]
	if(!Flag.gps_command&&Flag.gps)
 8000e1e:	4b0c      	ldr	r3, [pc, #48]	; (8000e50 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000e26:	b2db      	uxtb	r3, r3
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d10b      	bne.n	8000e44 <HAL_TIM_PeriodElapsedCallback+0x13c>
 8000e2c:	4b08      	ldr	r3, [pc, #32]	; (8000e50 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	f003 0308 	and.w	r3, r3, #8
 8000e34:	b2db      	uxtb	r3, r3
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d004      	beq.n	8000e44 <HAL_TIM_PeriodElapsedCallback+0x13c>
		Flag.Send_GPS=1;
 8000e3a:	4a05      	ldr	r2, [pc, #20]	; (8000e50 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8000e3c:	7853      	ldrb	r3, [r2, #1]
 8000e3e:	f043 0302 	orr.w	r3, r3, #2
 8000e42:	7053      	strb	r3, [r2, #1]
}
 8000e44:	bf00      	nop
 8000e46:	370c      	adds	r7, #12
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr
 8000e50:	200005b0 	.word	0x200005b0
 8000e54:	20000234 	.word	0x20000234
 8000e58:	20000230 	.word	0x20000230
 8000e5c:	20000220 	.word	0x20000220
 8000e60:	20000224 	.word	0x20000224
 8000e64:	20000228 	.word	0x20000228
 8000e68:	2000022c 	.word	0x2000022c
 8000e6c:	2000021c 	.word	0x2000021c

08000e70 <FUNC_RESET>:
char Gps_Info[150];
#define time 10


unsigned int FUNC_RESET()
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
	Flag.MQTT_Start=0;
 8000e74:	4a25      	ldr	r2, [pc, #148]	; (8000f0c <FUNC_RESET+0x9c>)
 8000e76:	7813      	ldrb	r3, [r2, #0]
 8000e78:	f36f 0382 	bfc	r3, #2, #1
 8000e7c:	7013      	strb	r3, [r2, #0]
	Flag.Radio_on=0;
 8000e7e:	4a23      	ldr	r2, [pc, #140]	; (8000f0c <FUNC_RESET+0x9c>)
 8000e80:	7813      	ldrb	r3, [r2, #0]
 8000e82:	f36f 1304 	bfc	r3, #4, #1
 8000e86:	7013      	strb	r3, [r2, #0]
	Flag.Sbscripcion_terminada=0;
 8000e88:	4a20      	ldr	r2, [pc, #128]	; (8000f0c <FUNC_RESET+0x9c>)
 8000e8a:	7813      	ldrb	r3, [r2, #0]
 8000e8c:	f36f 1386 	bfc	r3, #6, #1
 8000e90:	7013      	strb	r3, [r2, #0]
	Flag.Send_GPS=0;
 8000e92:	4a1e      	ldr	r2, [pc, #120]	; (8000f0c <FUNC_RESET+0x9c>)
 8000e94:	7853      	ldrb	r3, [r2, #1]
 8000e96:	f36f 0341 	bfc	r3, #1, #1
 8000e9a:	7053      	strb	r3, [r2, #1]
	Flag.Send_Medidas=0;
 8000e9c:	4a1b      	ldr	r2, [pc, #108]	; (8000f0c <FUNC_RESET+0x9c>)
 8000e9e:	7853      	ldrb	r3, [r2, #1]
 8000ea0:	f36f 0382 	bfc	r3, #2, #1
 8000ea4:	7053      	strb	r3, [r2, #1]
	Flag.Send_Medidas2=0;
 8000ea6:	4a19      	ldr	r2, [pc, #100]	; (8000f0c <FUNC_RESET+0x9c>)
 8000ea8:	7853      	ldrb	r3, [r2, #1]
 8000eaa:	f36f 03c3 	bfc	r3, #3, #1
 8000eae:	7053      	strb	r3, [r2, #1]
	Flag.Send_Medidas3=0;
 8000eb0:	4a16      	ldr	r2, [pc, #88]	; (8000f0c <FUNC_RESET+0x9c>)
 8000eb2:	7853      	ldrb	r3, [r2, #1]
 8000eb4:	f36f 1304 	bfc	r3, #4, #1
 8000eb8:	7053      	strb	r3, [r2, #1]
	Flag.Send_Medidas4=0;
 8000eba:	4a14      	ldr	r2, [pc, #80]	; (8000f0c <FUNC_RESET+0x9c>)
 8000ebc:	7853      	ldrb	r3, [r2, #1]
 8000ebe:	f36f 1345 	bfc	r3, #5, #1
 8000ec2:	7053      	strb	r3, [r2, #1]
	Flag.Subscripcion=0;
 8000ec4:	4a11      	ldr	r2, [pc, #68]	; (8000f0c <FUNC_RESET+0x9c>)
 8000ec6:	7813      	ldrb	r3, [r2, #0]
 8000ec8:	f36f 0300 	bfc	r3, #0, #1
 8000ecc:	7013      	strb	r3, [r2, #0]
	Flag.Subscripcion_sucess=0;
 8000ece:	4a0f      	ldr	r2, [pc, #60]	; (8000f0c <FUNC_RESET+0x9c>)
 8000ed0:	7813      	ldrb	r3, [r2, #0]
 8000ed2:	f36f 1345 	bfc	r3, #5, #1
 8000ed6:	7013      	strb	r3, [r2, #0]
	Flag.gps=0;
 8000ed8:	4a0c      	ldr	r2, [pc, #48]	; (8000f0c <FUNC_RESET+0x9c>)
 8000eda:	7813      	ldrb	r3, [r2, #0]
 8000edc:	f36f 03c3 	bfc	r3, #3, #1
 8000ee0:	7013      	strb	r3, [r2, #0]
	Flag.gps_command=0;
 8000ee2:	4a0a      	ldr	r2, [pc, #40]	; (8000f0c <FUNC_RESET+0x9c>)
 8000ee4:	7813      	ldrb	r3, [r2, #0]
 8000ee6:	f36f 13c7 	bfc	r3, #7, #1
 8000eea:	7013      	strb	r3, [r2, #0]
	Flag.mqtt_command=0;
 8000eec:	4a07      	ldr	r2, [pc, #28]	; (8000f0c <FUNC_RESET+0x9c>)
 8000eee:	7853      	ldrb	r3, [r2, #1]
 8000ef0:	f36f 0300 	bfc	r3, #0, #1
 8000ef4:	7053      	strb	r3, [r2, #1]
	Flag.servidor=0;
 8000ef6:	4a05      	ldr	r2, [pc, #20]	; (8000f0c <FUNC_RESET+0x9c>)
 8000ef8:	7813      	ldrb	r3, [r2, #0]
 8000efa:	f36f 0341 	bfc	r3, #1, #1
 8000efe:	7013      	strb	r3, [r2, #0]
	Transmit(Reset);
 8000f00:	4803      	ldr	r0, [pc, #12]	; (8000f10 <FUNC_RESET+0xa0>)
 8000f02:	f000 fa93 	bl	800142c <Transmit>
	return 0;
 8000f06:	2300      	movs	r3, #0
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	200005b0 	.word	0x200005b0
 8000f10:	0800b570 	.word	0x0800b570

08000f14 <Decoder>:
int Decoder(char *string)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
	if(strstr(string,"PB DONE"))//Tarjeta iniciada y chip correcto
 8000f1c:	4951      	ldr	r1, [pc, #324]	; (8001064 <Decoder+0x150>)
 8000f1e:	6878      	ldr	r0, [r7, #4]
 8000f20:	f006 ff91 	bl	8007e46 <strstr>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d006      	beq.n	8000f38 <Decoder+0x24>
	{
		Flag.Radio_on=1;//Indicacion que el radio esta encendido correctamente
 8000f2a:	4a4f      	ldr	r2, [pc, #316]	; (8001068 <Decoder+0x154>)
 8000f2c:	7813      	ldrb	r3, [r2, #0]
 8000f2e:	f043 0310 	orr.w	r3, r3, #16
 8000f32:	7013      	strb	r3, [r2, #0]
		return 0;
 8000f34:	2300      	movs	r3, #0
 8000f36:	e091      	b.n	800105c <Decoder+0x148>
	}

	if(strstr(string,"+CMQTTCONNECT: 0,0"))//conectado al servidor
 8000f38:	494c      	ldr	r1, [pc, #304]	; (800106c <Decoder+0x158>)
 8000f3a:	6878      	ldr	r0, [r7, #4]
 8000f3c:	f006 ff83 	bl	8007e46 <strstr>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d00b      	beq.n	8000f5e <Decoder+0x4a>
	{
		Flag.servidor=1;//Indicador de que el radio esta conectado al servidor
 8000f46:	4a48      	ldr	r2, [pc, #288]	; (8001068 <Decoder+0x154>)
 8000f48:	7813      	ldrb	r3, [r2, #0]
 8000f4a:	f043 0302 	orr.w	r3, r3, #2
 8000f4e:	7013      	strb	r3, [r2, #0]
		Flag.mqtt_command=0;//Liberando el uso del MQTT
 8000f50:	4a45      	ldr	r2, [pc, #276]	; (8001068 <Decoder+0x154>)
 8000f52:	7853      	ldrb	r3, [r2, #1]
 8000f54:	f36f 0300 	bfc	r3, #0, #1
 8000f58:	7053      	strb	r3, [r2, #1]
		return 0;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	e07e      	b.n	800105c <Decoder+0x148>
	}

	if(strstr(string,"+CMQTTSTART: 0"))//Mensaje que indica si el MQTT esta encendido
 8000f5e:	4944      	ldr	r1, [pc, #272]	; (8001070 <Decoder+0x15c>)
 8000f60:	6878      	ldr	r0, [r7, #4]
 8000f62:	f006 ff70 	bl	8007e46 <strstr>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d00b      	beq.n	8000f84 <Decoder+0x70>
	{
		Flag.MQTT_Start=1;//Indicacion de que el MQTT esta encendido
 8000f6c:	4a3e      	ldr	r2, [pc, #248]	; (8001068 <Decoder+0x154>)
 8000f6e:	7813      	ldrb	r3, [r2, #0]
 8000f70:	f043 0304 	orr.w	r3, r3, #4
 8000f74:	7013      	strb	r3, [r2, #0]
		Flag.mqtt_command=0;//Liberando el uso del MQTT
 8000f76:	4a3c      	ldr	r2, [pc, #240]	; (8001068 <Decoder+0x154>)
 8000f78:	7853      	ldrb	r3, [r2, #1]
 8000f7a:	f36f 0300 	bfc	r3, #0, #1
 8000f7e:	7053      	strb	r3, [r2, #1]
		return 0;
 8000f80:	2300      	movs	r3, #0
 8000f82:	e06b      	b.n	800105c <Decoder+0x148>
	}

	if(strstr(string,"+CMQTTSUB: 0,0"))//subscripcion exitosa
 8000f84:	493b      	ldr	r1, [pc, #236]	; (8001074 <Decoder+0x160>)
 8000f86:	6878      	ldr	r0, [r7, #4]
 8000f88:	f006 ff5d 	bl	8007e46 <strstr>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d00b      	beq.n	8000faa <Decoder+0x96>
	{
	Flag.Subscripcion_sucess=1;//Indicacion de que se suscribio de manera exitosa
 8000f92:	4a35      	ldr	r2, [pc, #212]	; (8001068 <Decoder+0x154>)
 8000f94:	7813      	ldrb	r3, [r2, #0]
 8000f96:	f043 0320 	orr.w	r3, r3, #32
 8000f9a:	7013      	strb	r3, [r2, #0]
	Flag.mqtt_command=0;//Liberando el uso del MQTT
 8000f9c:	4a32      	ldr	r2, [pc, #200]	; (8001068 <Decoder+0x154>)
 8000f9e:	7853      	ldrb	r3, [r2, #1]
 8000fa0:	f36f 0300 	bfc	r3, #0, #1
 8000fa4:	7053      	strb	r3, [r2, #1]
	return 0;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	e058      	b.n	800105c <Decoder+0x148>
	}
   if (strstr (string, "+CMQTTPUB: 0,0")) //Publicacion exitosa
 8000faa:	4933      	ldr	r1, [pc, #204]	; (8001078 <Decoder+0x164>)
 8000fac:	6878      	ldr	r0, [r7, #4]
 8000fae:	f006 ff4a 	bl	8007e46 <strstr>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d006      	beq.n	8000fc6 <Decoder+0xb2>
	{

	  Flag.mqtt_command = 0;
 8000fb8:	4a2b      	ldr	r2, [pc, #172]	; (8001068 <Decoder+0x154>)
 8000fba:	7853      	ldrb	r3, [r2, #1]
 8000fbc:	f36f 0300 	bfc	r3, #0, #1
 8000fc0:	7053      	strb	r3, [r2, #1]
	  return 0;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	e04a      	b.n	800105c <Decoder+0x148>
	}
   if (strstr (string, "ERROR")) //Publicacion exitosa
 8000fc6:	492d      	ldr	r1, [pc, #180]	; (800107c <Decoder+0x168>)
 8000fc8:	6878      	ldr	r0, [r7, #4]
 8000fca:	f006 ff3c 	bl	8007e46 <strstr>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d006      	beq.n	8000fe2 <Decoder+0xce>
	{

	  Flag.Reset_Tarjeta=1;
 8000fd4:	4a24      	ldr	r2, [pc, #144]	; (8001068 <Decoder+0x154>)
 8000fd6:	7853      	ldrb	r3, [r2, #1]
 8000fd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fdc:	7053      	strb	r3, [r2, #1]
	  return 0;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	e03c      	b.n	800105c <Decoder+0x148>
	}
   if (strstr (string, "+CMQTTPUB: 0,11")) //Publicacion exitosa
 8000fe2:	4927      	ldr	r1, [pc, #156]	; (8001080 <Decoder+0x16c>)
 8000fe4:	6878      	ldr	r0, [r7, #4]
 8000fe6:	f006 ff2e 	bl	8007e46 <strstr>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d006      	beq.n	8000ffe <Decoder+0xea>
	{

	  Flag.Reset_Tarjeta=1;
 8000ff0:	4a1d      	ldr	r2, [pc, #116]	; (8001068 <Decoder+0x154>)
 8000ff2:	7853      	ldrb	r3, [r2, #1]
 8000ff4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ff8:	7053      	strb	r3, [r2, #1]
	  return 0;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	e02e      	b.n	800105c <Decoder+0x148>
	}
   if (strstr (string, "+CMQTTPUB=0,1,60")) //Publicacion exitosa
 8000ffe:	4921      	ldr	r1, [pc, #132]	; (8001084 <Decoder+0x170>)
 8001000:	6878      	ldr	r0, [r7, #4]
 8001002:	f006 ff20 	bl	8007e46 <strstr>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d006      	beq.n	800101a <Decoder+0x106>
	{

	   Flag.mqtt_command = 0;
 800100c:	4a16      	ldr	r2, [pc, #88]	; (8001068 <Decoder+0x154>)
 800100e:	7853      	ldrb	r3, [r2, #1]
 8001010:	f36f 0300 	bfc	r3, #0, #1
 8001014:	7053      	strb	r3, [r2, #1]
	  return 0;
 8001016:	2300      	movs	r3, #0
 8001018:	e020      	b.n	800105c <Decoder+0x148>
	}

	if(strstr(string,"+CGNSSPWR: READY!"))//Mensaje que indica el encendido del GPS
 800101a:	491b      	ldr	r1, [pc, #108]	; (8001088 <Decoder+0x174>)
 800101c:	6878      	ldr	r0, [r7, #4]
 800101e:	f006 ff12 	bl	8007e46 <strstr>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d006      	beq.n	8001036 <Decoder+0x122>
	{
		Flag.gps=1;//Indicacion de que el GPS esta listo para usarse
 8001028:	4a0f      	ldr	r2, [pc, #60]	; (8001068 <Decoder+0x154>)
 800102a:	7813      	ldrb	r3, [r2, #0]
 800102c:	f043 0308 	orr.w	r3, r3, #8
 8001030:	7013      	strb	r3, [r2, #0]
		return 0;
 8001032:	2300      	movs	r3, #0
 8001034:	e012      	b.n	800105c <Decoder+0x148>
	}
	if(strstr(string,"+CGNSSINFO:"))//respuesta del gps
 8001036:	4915      	ldr	r1, [pc, #84]	; (800108c <Decoder+0x178>)
 8001038:	6878      	ldr	r0, [r7, #4]
 800103a:	f006 ff04 	bl	8007e46 <strstr>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d00a      	beq.n	800105a <Decoder+0x146>
	{
	strcpy(Gps_Info,string);
 8001044:	6879      	ldr	r1, [r7, #4]
 8001046:	4812      	ldr	r0, [pc, #72]	; (8001090 <Decoder+0x17c>)
 8001048:	f006 ff9b 	bl	8007f82 <strcpy>

	Flag.gps_command=0;
 800104c:	4a06      	ldr	r2, [pc, #24]	; (8001068 <Decoder+0x154>)
 800104e:	7813      	ldrb	r3, [r2, #0]
 8001050:	f36f 13c7 	bfc	r3, #7, #1
 8001054:	7013      	strb	r3, [r2, #0]
	return 0;
 8001056:	2300      	movs	r3, #0
 8001058:	e000      	b.n	800105c <Decoder+0x148>
	}
	return 0;
 800105a:	2300      	movs	r3, #0
}
 800105c:	4618      	mov	r0, r3
 800105e:	3708      	adds	r7, #8
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	0800b57c 	.word	0x0800b57c
 8001068:	200005b0 	.word	0x200005b0
 800106c:	0800b584 	.word	0x0800b584
 8001070:	0800b598 	.word	0x0800b598
 8001074:	0800b5a8 	.word	0x0800b5a8
 8001078:	0800b5b8 	.word	0x0800b5b8
 800107c:	0800b5c8 	.word	0x0800b5c8
 8001080:	0800b5d0 	.word	0x0800b5d0
 8001084:	0800b5e0 	.word	0x0800b5e0
 8001088:	0800b5f4 	.word	0x0800b5f4
 800108c:	0800b608 	.word	0x0800b608
 8001090:	20000238 	.word	0x20000238

08001094 <FUNC_SEND_GPS>:

unsigned int FUNC_SEND_GPS()
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
	FUNC_SEND_MQTT(Gps_Info,"mapps34");
 8001098:	4903      	ldr	r1, [pc, #12]	; (80010a8 <FUNC_SEND_GPS+0x14>)
 800109a:	4804      	ldr	r0, [pc, #16]	; (80010ac <FUNC_SEND_GPS+0x18>)
 800109c:	f000 f87e 	bl	800119c <FUNC_SEND_MQTT>
	return 0;
 80010a0:	2300      	movs	r3, #0
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	0800b614 	.word	0x0800b614
 80010ac:	20000238 	.word	0x20000238

080010b0 <FUNC_MQTT_CONNECT_SERVER>:

unsigned int FUNC_MQTT_CONNECT_SERVER(char *cliente)
{
 80010b0:	b590      	push	{r4, r7, lr}
 80010b2:	b089      	sub	sp, #36	; 0x24
 80010b4:	af04      	add	r7, sp, #16
 80010b6:	6078      	str	r0, [r7, #4]
	int tam=0;
 80010b8:	2300      	movs	r3, #0
 80010ba:	60fb      	str	r3, [r7, #12]
	char *x="\0";
 80010bc:	4b2c      	ldr	r3, [pc, #176]	; (8001170 <FUNC_MQTT_CONNECT_SERVER+0xc0>)
 80010be:	60bb      	str	r3, [r7, #8]



			tam=strlen(cliente)+strlen(Nombre_del_cliente)+strlen(String_final);
 80010c0:	6878      	ldr	r0, [r7, #4]
 80010c2:	f7ff f8d5 	bl	8000270 <strlen>
 80010c6:	4603      	mov	r3, r0
 80010c8:	3311      	adds	r3, #17
 80010ca:	60fb      	str	r3, [r7, #12]
			x=calloc(tam,sizeof(char));
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	2101      	movs	r1, #1
 80010d0:	4618      	mov	r0, r3
 80010d2:	f005 fe3b 	bl	8006d4c <calloc>
 80010d6:	4603      	mov	r3, r0
 80010d8:	60bb      	str	r3, [r7, #8]
			sprintf(x,"%s\"%s\",%c%s",Nombre_del_cliente,cliente,Conf_SSL,String_final);
 80010da:	4b26      	ldr	r3, [pc, #152]	; (8001174 <FUNC_MQTT_CONNECT_SERVER+0xc4>)
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	461a      	mov	r2, r3
 80010e0:	4b25      	ldr	r3, [pc, #148]	; (8001178 <FUNC_MQTT_CONNECT_SERVER+0xc8>)
 80010e2:	9301      	str	r3, [sp, #4]
 80010e4:	9200      	str	r2, [sp, #0]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4a24      	ldr	r2, [pc, #144]	; (800117c <FUNC_MQTT_CONNECT_SERVER+0xcc>)
 80010ea:	4925      	ldr	r1, [pc, #148]	; (8001180 <FUNC_MQTT_CONNECT_SERVER+0xd0>)
 80010ec:	68b8      	ldr	r0, [r7, #8]
 80010ee:	f006 fe3f 	bl	8007d70 <siprintf>
			Transmit(x);
 80010f2:	68b8      	ldr	r0, [r7, #8]
 80010f4:	f000 f99a 	bl	800142c <Transmit>
			free(x);
 80010f8:	68b8      	ldr	r0, [r7, #8]
 80010fa:	f005 fe4d 	bl	8006d98 <free>
			HAL_Delay(time);
 80010fe:	200a      	movs	r0, #10
 8001100:	f001 f948 	bl	8002394 <HAL_Delay>
			tam=strlen(Conectar_al_Broker)+strlen(Conf_broker_add)+strlen(Conf_port)+strlen(keepalive_time)+strlen(clean_session)+strlen(String_final);
 8001104:	481f      	ldr	r0, [pc, #124]	; (8001184 <FUNC_MQTT_CONNECT_SERVER+0xd4>)
 8001106:	f7ff f8b3 	bl	8000270 <strlen>
 800110a:	4604      	mov	r4, r0
 800110c:	481e      	ldr	r0, [pc, #120]	; (8001188 <FUNC_MQTT_CONNECT_SERVER+0xd8>)
 800110e:	f7ff f8af 	bl	8000270 <strlen>
 8001112:	4603      	mov	r3, r0
 8001114:	441c      	add	r4, r3
 8001116:	481d      	ldr	r0, [pc, #116]	; (800118c <FUNC_MQTT_CONNECT_SERVER+0xdc>)
 8001118:	f7ff f8aa 	bl	8000270 <strlen>
 800111c:	4603      	mov	r3, r0
 800111e:	441c      	add	r4, r3
 8001120:	481b      	ldr	r0, [pc, #108]	; (8001190 <FUNC_MQTT_CONNECT_SERVER+0xe0>)
 8001122:	f7ff f8a5 	bl	8000270 <strlen>
 8001126:	4603      	mov	r3, r0
 8001128:	4423      	add	r3, r4
 800112a:	3314      	adds	r3, #20
 800112c:	60fb      	str	r3, [r7, #12]
			x=calloc(tam,sizeof(char));
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	2101      	movs	r1, #1
 8001132:	4618      	mov	r0, r3
 8001134:	f005 fe0a 	bl	8006d4c <calloc>
 8001138:	4603      	mov	r3, r0
 800113a:	60bb      	str	r3, [r7, #8]
			sprintf(x,"%s\"%s:%s\"%s%s%s",Conectar_al_Broker,Conf_broker_add,Conf_port,keepalive_time,clean_session,String_final);
 800113c:	4b0e      	ldr	r3, [pc, #56]	; (8001178 <FUNC_MQTT_CONNECT_SERVER+0xc8>)
 800113e:	9303      	str	r3, [sp, #12]
 8001140:	4b13      	ldr	r3, [pc, #76]	; (8001190 <FUNC_MQTT_CONNECT_SERVER+0xe0>)
 8001142:	9302      	str	r3, [sp, #8]
 8001144:	4b11      	ldr	r3, [pc, #68]	; (800118c <FUNC_MQTT_CONNECT_SERVER+0xdc>)
 8001146:	9301      	str	r3, [sp, #4]
 8001148:	4b0f      	ldr	r3, [pc, #60]	; (8001188 <FUNC_MQTT_CONNECT_SERVER+0xd8>)
 800114a:	9300      	str	r3, [sp, #0]
 800114c:	4b0d      	ldr	r3, [pc, #52]	; (8001184 <FUNC_MQTT_CONNECT_SERVER+0xd4>)
 800114e:	4a11      	ldr	r2, [pc, #68]	; (8001194 <FUNC_MQTT_CONNECT_SERVER+0xe4>)
 8001150:	4911      	ldr	r1, [pc, #68]	; (8001198 <FUNC_MQTT_CONNECT_SERVER+0xe8>)
 8001152:	68b8      	ldr	r0, [r7, #8]
 8001154:	f006 fe0c 	bl	8007d70 <siprintf>
			Transmit(x);
 8001158:	68b8      	ldr	r0, [r7, #8]
 800115a:	f000 f967 	bl	800142c <Transmit>
			free(x);
 800115e:	68b8      	ldr	r0, [r7, #8]
 8001160:	f005 fe1a 	bl	8006d98 <free>

	return 0;
 8001164:	2300      	movs	r3, #0
}
 8001166:	4618      	mov	r0, r3
 8001168:	3714      	adds	r7, #20
 800116a:	46bd      	mov	sp, r7
 800116c:	bd90      	pop	{r4, r7, pc}
 800116e:	bf00      	nop
 8001170:	0800b61c 	.word	0x0800b61c
 8001174:	2000002b 	.word	0x2000002b
 8001178:	0800b63c 	.word	0x0800b63c
 800117c:	0800b620 	.word	0x0800b620
 8001180:	0800b630 	.word	0x0800b630
 8001184:	20000000 	.word	0x20000000
 8001188:	2000001c 	.word	0x2000001c
 800118c:	20000024 	.word	0x20000024
 8001190:	20000028 	.word	0x20000028
 8001194:	0800b640 	.word	0x0800b640
 8001198:	0800b654 	.word	0x0800b654

0800119c <FUNC_SEND_MQTT>:
unsigned int FUNC_SEND_MQTT(char *mensaje,char *topico)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b086      	sub	sp, #24
 80011a0:	af02      	add	r7, sp, #8
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	6039      	str	r1, [r7, #0]
		int tam=0;
 80011a6:	2300      	movs	r3, #0
 80011a8:	60fb      	str	r3, [r7, #12]
		char *x="\0";
 80011aa:	4b46      	ldr	r3, [pc, #280]	; (80012c4 <FUNC_SEND_MQTT+0x128>)
 80011ac:	60bb      	str	r3, [r7, #8]
		//Enviando tama;o del topico
		tam=strlen(AT_Topico)+strlen(String_final)+1+strlen(topico);
 80011ae:	6838      	ldr	r0, [r7, #0]
 80011b0:	f7ff f85e 	bl	8000270 <strlen>
 80011b4:	4603      	mov	r3, r0
 80011b6:	3313      	adds	r3, #19
 80011b8:	60fb      	str	r3, [r7, #12]
		x=calloc(tam,sizeof(char));
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	2101      	movs	r1, #1
 80011be:	4618      	mov	r0, r3
 80011c0:	f005 fdc4 	bl	8006d4c <calloc>
 80011c4:	4603      	mov	r3, r0
 80011c6:	60bb      	str	r3, [r7, #8]
		sprintf(x,"%s%d%s",AT_Topico,strlen(topico),String_final);
 80011c8:	6838      	ldr	r0, [r7, #0]
 80011ca:	f7ff f851 	bl	8000270 <strlen>
 80011ce:	4603      	mov	r3, r0
 80011d0:	4a3d      	ldr	r2, [pc, #244]	; (80012c8 <FUNC_SEND_MQTT+0x12c>)
 80011d2:	9200      	str	r2, [sp, #0]
 80011d4:	4a3d      	ldr	r2, [pc, #244]	; (80012cc <FUNC_SEND_MQTT+0x130>)
 80011d6:	493e      	ldr	r1, [pc, #248]	; (80012d0 <FUNC_SEND_MQTT+0x134>)
 80011d8:	68b8      	ldr	r0, [r7, #8]
 80011da:	f006 fdc9 	bl	8007d70 <siprintf>
		Transmit(x);
 80011de:	68b8      	ldr	r0, [r7, #8]
 80011e0:	f000 f924 	bl	800142c <Transmit>
		free(x);
 80011e4:	68b8      	ldr	r0, [r7, #8]
 80011e6:	f005 fdd7 	bl	8006d98 <free>
		HAL_Delay(700);
 80011ea:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 80011ee:	f001 f8d1 	bl	8002394 <HAL_Delay>

		//Enviando Nombre del topico
		tam=strlen(topico)+strlen(String_final);
 80011f2:	6838      	ldr	r0, [r7, #0]
 80011f4:	f7ff f83c 	bl	8000270 <strlen>
 80011f8:	4603      	mov	r3, r0
 80011fa:	3302      	adds	r3, #2
 80011fc:	60fb      	str	r3, [r7, #12]
		x=calloc(tam,sizeof(char));
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	2101      	movs	r1, #1
 8001202:	4618      	mov	r0, r3
 8001204:	f005 fda2 	bl	8006d4c <calloc>
 8001208:	4603      	mov	r3, r0
 800120a:	60bb      	str	r3, [r7, #8]
		sprintf(x,"%s%s",topico,String_final);
 800120c:	4b2e      	ldr	r3, [pc, #184]	; (80012c8 <FUNC_SEND_MQTT+0x12c>)
 800120e:	683a      	ldr	r2, [r7, #0]
 8001210:	4930      	ldr	r1, [pc, #192]	; (80012d4 <FUNC_SEND_MQTT+0x138>)
 8001212:	68b8      	ldr	r0, [r7, #8]
 8001214:	f006 fdac 	bl	8007d70 <siprintf>
		Transmit(x);
 8001218:	68b8      	ldr	r0, [r7, #8]
 800121a:	f000 f907 	bl	800142c <Transmit>
		free(x);
 800121e:	68b8      	ldr	r0, [r7, #8]
 8001220:	f005 fdba 	bl	8006d98 <free>
		HAL_Delay(700);
 8001224:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8001228:	f001 f8b4 	bl	8002394 <HAL_Delay>

		//cargando mensaje
		tam=strlen(Cargar_mensaje)+strlen(String_final)+1+strlen(mensaje);
 800122c:	6878      	ldr	r0, [r7, #4]
 800122e:	f7ff f81f 	bl	8000270 <strlen>
 8001232:	4603      	mov	r3, r0
 8001234:	3315      	adds	r3, #21
 8001236:	60fb      	str	r3, [r7, #12]
		x=calloc(tam,sizeof(char));
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	2101      	movs	r1, #1
 800123c:	4618      	mov	r0, r3
 800123e:	f005 fd85 	bl	8006d4c <calloc>
 8001242:	4603      	mov	r3, r0
 8001244:	60bb      	str	r3, [r7, #8]
		sprintf(x,"%s%d%s",Cargar_mensaje,strlen(mensaje),String_final);
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f7ff f812 	bl	8000270 <strlen>
 800124c:	4603      	mov	r3, r0
 800124e:	4a1e      	ldr	r2, [pc, #120]	; (80012c8 <FUNC_SEND_MQTT+0x12c>)
 8001250:	9200      	str	r2, [sp, #0]
 8001252:	4a21      	ldr	r2, [pc, #132]	; (80012d8 <FUNC_SEND_MQTT+0x13c>)
 8001254:	491e      	ldr	r1, [pc, #120]	; (80012d0 <FUNC_SEND_MQTT+0x134>)
 8001256:	68b8      	ldr	r0, [r7, #8]
 8001258:	f006 fd8a 	bl	8007d70 <siprintf>
		Transmit(x);
 800125c:	68b8      	ldr	r0, [r7, #8]
 800125e:	f000 f8e5 	bl	800142c <Transmit>
		free(x);
 8001262:	68b8      	ldr	r0, [r7, #8]
 8001264:	f005 fd98 	bl	8006d98 <free>
		HAL_Delay(700);
 8001268:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 800126c:	f001 f892 	bl	8002394 <HAL_Delay>

		//Enviando mensaje
		tam=strlen(mensaje)+strlen(String_final);
 8001270:	6878      	ldr	r0, [r7, #4]
 8001272:	f7fe fffd 	bl	8000270 <strlen>
 8001276:	4603      	mov	r3, r0
 8001278:	3302      	adds	r3, #2
 800127a:	60fb      	str	r3, [r7, #12]
		x=calloc(tam,sizeof(char));
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	2101      	movs	r1, #1
 8001280:	4618      	mov	r0, r3
 8001282:	f005 fd63 	bl	8006d4c <calloc>
 8001286:	4603      	mov	r3, r0
 8001288:	60bb      	str	r3, [r7, #8]
		sprintf(x,"%s%s",mensaje,String_final);
 800128a:	4b0f      	ldr	r3, [pc, #60]	; (80012c8 <FUNC_SEND_MQTT+0x12c>)
 800128c:	687a      	ldr	r2, [r7, #4]
 800128e:	4911      	ldr	r1, [pc, #68]	; (80012d4 <FUNC_SEND_MQTT+0x138>)
 8001290:	68b8      	ldr	r0, [r7, #8]
 8001292:	f006 fd6d 	bl	8007d70 <siprintf>
		Transmit(x);
 8001296:	68b8      	ldr	r0, [r7, #8]
 8001298:	f000 f8c8 	bl	800142c <Transmit>
		free(x);
 800129c:	68b8      	ldr	r0, [r7, #8]
 800129e:	f005 fd7b 	bl	8006d98 <free>
		HAL_Delay(700);
 80012a2:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 80012a6:	f001 f875 	bl	8002394 <HAL_Delay>
		//Publicar
		Transmit(Publicar);
 80012aa:	480c      	ldr	r0, [pc, #48]	; (80012dc <FUNC_SEND_MQTT+0x140>)
 80012ac:	f000 f8be 	bl	800142c <Transmit>
		HAL_Delay(700);
 80012b0:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 80012b4:	f001 f86e 	bl	8002394 <HAL_Delay>


return 0;
 80012b8:	2300      	movs	r3, #0
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3710      	adds	r7, #16
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	0800b61c 	.word	0x0800b61c
 80012c8:	0800b63c 	.word	0x0800b63c
 80012cc:	0800b664 	.word	0x0800b664
 80012d0:	0800b678 	.word	0x0800b678
 80012d4:	0800b680 	.word	0x0800b680
 80012d8:	0800b688 	.word	0x0800b688
 80012dc:	0800b69c 	.word	0x0800b69c

080012e0 <FUNC_Subscribirse_MQTT>:
unsigned int FUNC_Subscribirse_MQTT(char *topico)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b088      	sub	sp, #32
 80012e4:	af02      	add	r7, sp, #8
 80012e6:	6078      	str	r0, [r7, #4]

	int tam=0;
 80012e8:	2300      	movs	r3, #0
 80012ea:	617b      	str	r3, [r7, #20]
	char *x="\0";
 80012ec:	4b26      	ldr	r3, [pc, #152]	; (8001388 <FUNC_Subscribirse_MQTT+0xa8>)
 80012ee:	613b      	str	r3, [r7, #16]
	size_t tmp = 0;
 80012f0:	2300      	movs	r3, #0
 80012f2:	60fb      	str	r3, [r7, #12]
	//Enviando comando At para la subscripcion
	tam= strlen(AT_Subscribirse)+strlen(String_final)+strlen(topico)+2;
 80012f4:	6878      	ldr	r0, [r7, #4]
 80012f6:	f7fe ffbb 	bl	8000270 <strlen>
 80012fa:	4603      	mov	r3, r0
 80012fc:	3312      	adds	r3, #18
 80012fe:	617b      	str	r3, [r7, #20]
	x=calloc(tam,sizeof(char));
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	2101      	movs	r1, #1
 8001304:	4618      	mov	r0, r3
 8001306:	f005 fd21 	bl	8006d4c <calloc>
 800130a:	4603      	mov	r3, r0
 800130c:	613b      	str	r3, [r7, #16]
	tmp = strlen(topico);
 800130e:	6878      	ldr	r0, [r7, #4]
 8001310:	f7fe ffae 	bl	8000270 <strlen>
 8001314:	60f8      	str	r0, [r7, #12]
	sprintf(x,"%s%d,1%s",AT_Subscribirse,(unsigned int)tmp,String_final);
 8001316:	4b1d      	ldr	r3, [pc, #116]	; (800138c <FUNC_Subscribirse_MQTT+0xac>)
 8001318:	9300      	str	r3, [sp, #0]
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	4a1c      	ldr	r2, [pc, #112]	; (8001390 <FUNC_Subscribirse_MQTT+0xb0>)
 800131e:	491d      	ldr	r1, [pc, #116]	; (8001394 <FUNC_Subscribirse_MQTT+0xb4>)
 8001320:	6938      	ldr	r0, [r7, #16]
 8001322:	f006 fd25 	bl	8007d70 <siprintf>
	Transmit(x);
 8001326:	6938      	ldr	r0, [r7, #16]
 8001328:	f000 f880 	bl	800142c <Transmit>
	free(x);
 800132c:	6938      	ldr	r0, [r7, #16]
 800132e:	f005 fd33 	bl	8006d98 <free>
	HAL_Delay(250);
 8001332:	20fa      	movs	r0, #250	; 0xfa
 8001334:	f001 f82e 	bl	8002394 <HAL_Delay>
	//Enviando topico
	tam=strlen(topico)+strlen(String_final);
 8001338:	6878      	ldr	r0, [r7, #4]
 800133a:	f7fe ff99 	bl	8000270 <strlen>
 800133e:	4603      	mov	r3, r0
 8001340:	3302      	adds	r3, #2
 8001342:	617b      	str	r3, [r7, #20]
	x=calloc(tam,sizeof(char));
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	2101      	movs	r1, #1
 8001348:	4618      	mov	r0, r3
 800134a:	f005 fcff 	bl	8006d4c <calloc>
 800134e:	4603      	mov	r3, r0
 8001350:	613b      	str	r3, [r7, #16]
	sprintf(x,"%s%s",topico,String_final);
 8001352:	4b0e      	ldr	r3, [pc, #56]	; (800138c <FUNC_Subscribirse_MQTT+0xac>)
 8001354:	687a      	ldr	r2, [r7, #4]
 8001356:	4910      	ldr	r1, [pc, #64]	; (8001398 <FUNC_Subscribirse_MQTT+0xb8>)
 8001358:	6938      	ldr	r0, [r7, #16]
 800135a:	f006 fd09 	bl	8007d70 <siprintf>
	Transmit(x);
 800135e:	6938      	ldr	r0, [r7, #16]
 8001360:	f000 f864 	bl	800142c <Transmit>
	free(x);
 8001364:	6938      	ldr	r0, [r7, #16]
 8001366:	f005 fd17 	bl	8006d98 <free>
	HAL_Delay(250);
 800136a:	20fa      	movs	r0, #250	; 0xfa
 800136c:	f001 f812 	bl	8002394 <HAL_Delay>
	//Comando para Subscribirse
	Transmit(Subscribirse);
 8001370:	480a      	ldr	r0, [pc, #40]	; (800139c <FUNC_Subscribirse_MQTT+0xbc>)
 8001372:	f000 f85b 	bl	800142c <Transmit>
	HAL_Delay(250);
 8001376:	20fa      	movs	r0, #250	; 0xfa
 8001378:	f001 f80c 	bl	8002394 <HAL_Delay>



return 0;
 800137c:	2300      	movs	r3, #0
}
 800137e:	4618      	mov	r0, r3
 8001380:	3718      	adds	r7, #24
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	0800b61c 	.word	0x0800b61c
 800138c:	0800b63c 	.word	0x0800b63c
 8001390:	0800b6b4 	.word	0x0800b6b4
 8001394:	0800b6c4 	.word	0x0800b6c4
 8001398:	0800b680 	.word	0x0800b680
 800139c:	0800b6d0 	.word	0x0800b6d0

080013a0 <Uart_init>:
#include "UART.h"
char buff[BUFF_SIZE];
uint8_t Rx;
extern UART_HandleTypeDef huart3;
void Uart_init()
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart3, &Rx,1);
 80013a4:	2201      	movs	r2, #1
 80013a6:	4903      	ldr	r1, [pc, #12]	; (80013b4 <Uart_init+0x14>)
 80013a8:	4803      	ldr	r0, [pc, #12]	; (80013b8 <Uart_init+0x18>)
 80013aa:	f004 fb81 	bl	8005ab0 <HAL_UART_Receive_IT>
}
 80013ae:	bf00      	nop
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	20000366 	.word	0x20000366
 80013b8:	20000528 	.word	0x20000528

080013bc <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
	static int i=0;
		 if(Rx=='\n')
 80013c4:	4b15      	ldr	r3, [pc, #84]	; (800141c <HAL_UART_RxCpltCallback+0x60>)
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	2b0a      	cmp	r3, #10
 80013ca:	d10b      	bne.n	80013e4 <HAL_UART_RxCpltCallback+0x28>
		 {

			 buff[i]='\0';
 80013cc:	4b14      	ldr	r3, [pc, #80]	; (8001420 <HAL_UART_RxCpltCallback+0x64>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a14      	ldr	r2, [pc, #80]	; (8001424 <HAL_UART_RxCpltCallback+0x68>)
 80013d2:	2100      	movs	r1, #0
 80013d4:	54d1      	strb	r1, [r2, r3]
			 Decoder(buff);
 80013d6:	4813      	ldr	r0, [pc, #76]	; (8001424 <HAL_UART_RxCpltCallback+0x68>)
 80013d8:	f7ff fd9c 	bl	8000f14 <Decoder>
			 i=0;
 80013dc:	4b10      	ldr	r3, [pc, #64]	; (8001420 <HAL_UART_RxCpltCallback+0x64>)
 80013de:	2200      	movs	r2, #0
 80013e0:	601a      	str	r2, [r3, #0]
 80013e2:	e012      	b.n	800140a <HAL_UART_RxCpltCallback+0x4e>
		 }
		 else if(i<100)
 80013e4:	4b0e      	ldr	r3, [pc, #56]	; (8001420 <HAL_UART_RxCpltCallback+0x64>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	2b63      	cmp	r3, #99	; 0x63
 80013ea:	dc0b      	bgt.n	8001404 <HAL_UART_RxCpltCallback+0x48>
		 {
			 buff[i]=Rx;
 80013ec:	4b0c      	ldr	r3, [pc, #48]	; (8001420 <HAL_UART_RxCpltCallback+0x64>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a0a      	ldr	r2, [pc, #40]	; (800141c <HAL_UART_RxCpltCallback+0x60>)
 80013f2:	7811      	ldrb	r1, [r2, #0]
 80013f4:	4a0b      	ldr	r2, [pc, #44]	; (8001424 <HAL_UART_RxCpltCallback+0x68>)
 80013f6:	54d1      	strb	r1, [r2, r3]
			 i++;
 80013f8:	4b09      	ldr	r3, [pc, #36]	; (8001420 <HAL_UART_RxCpltCallback+0x64>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	3301      	adds	r3, #1
 80013fe:	4a08      	ldr	r2, [pc, #32]	; (8001420 <HAL_UART_RxCpltCallback+0x64>)
 8001400:	6013      	str	r3, [r2, #0]
 8001402:	e002      	b.n	800140a <HAL_UART_RxCpltCallback+0x4e>
		 }
		 else
		 {
			 i=0;
 8001404:	4b06      	ldr	r3, [pc, #24]	; (8001420 <HAL_UART_RxCpltCallback+0x64>)
 8001406:	2200      	movs	r2, #0
 8001408:	601a      	str	r2, [r3, #0]
		 }

		HAL_UART_Receive_IT(&huart3,&Rx,1);
 800140a:	2201      	movs	r2, #1
 800140c:	4903      	ldr	r1, [pc, #12]	; (800141c <HAL_UART_RxCpltCallback+0x60>)
 800140e:	4806      	ldr	r0, [pc, #24]	; (8001428 <HAL_UART_RxCpltCallback+0x6c>)
 8001410:	f004 fb4e 	bl	8005ab0 <HAL_UART_Receive_IT>

}
 8001414:	bf00      	nop
 8001416:	3708      	adds	r7, #8
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	20000366 	.word	0x20000366
 8001420:	20000368 	.word	0x20000368
 8001424:	200002d0 	.word	0x200002d0
 8001428:	20000528 	.word	0x20000528

0800142c <Transmit>:
void Transmit(char *pData)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3,(uint8_t*)pData,strlen(pData),HAL_MAX_DELAY);
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	f7fe ff1b 	bl	8000270 <strlen>
 800143a:	4603      	mov	r3, r0
 800143c:	b29a      	uxth	r2, r3
 800143e:	f04f 33ff 	mov.w	r3, #4294967295
 8001442:	6879      	ldr	r1, [r7, #4]
 8001444:	4803      	ldr	r0, [pc, #12]	; (8001454 <Transmit+0x28>)
 8001446:	f004 faa9 	bl	800599c <HAL_UART_Transmit>
}
 800144a:	bf00      	nop
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	20000528 	.word	0x20000528

08001458 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b08c      	sub	sp, #48	; 0x30
 800145c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800145e:	f000 ff33 	bl	80022c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001462:	f000 fa09 	bl	8001878 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001466:	f000 fbc1 	bl	8001bec <MX_GPIO_Init>
  MX_DMA_Init();
 800146a:	f000 fba1 	bl	8001bb0 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800146e:	f000 fb3f 	bl	8001af0 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001472:	f000 fb6d 	bl	8001b50 <MX_USART3_UART_Init>
  MX_TIM17_Init();
 8001476:	f000 fb13 	bl	8001aa0 <MX_TIM17_Init>
  MX_ADC1_Init();
 800147a:	f000 fa5d 	bl	8001938 <MX_ADC1_Init>
  MX_I2C1_Init();
 800147e:	f000 facf 	bl	8001a20 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1,MEDIDAS,3);
 8001482:	2203      	movs	r2, #3
 8001484:	49aa      	ldr	r1, [pc, #680]	; (8001730 <main+0x2d8>)
 8001486:	48ab      	ldr	r0, [pc, #684]	; (8001734 <main+0x2dc>)
 8001488:	f001 f94c 	bl	8002724 <HAL_ADC_Start_DMA>
  Uart_init();
 800148c:	f7ff ff88 	bl	80013a0 <Uart_init>
  Timers_Init();
 8001490:	f7ff fc30 	bl	8000cf4 <Timers_Init>
  Transmit("AT+CRESET\r\n");
 8001494:	48a8      	ldr	r0, [pc, #672]	; (8001738 <main+0x2e0>)
 8001496:	f7ff ffc9 	bl	800142c <Transmit>
  HAL_Delay(5000);
 800149a:	f241 3088 	movw	r0, #5000	; 0x1388
 800149e:	f000 ff79 	bl	8002394 <HAL_Delay>
//
//	  bmp280_read_float(&bmp280, &temperature, &pressure, &humidity);



	  if(Flag.Reset_Tarjeta)
 80014a2:	4ba6      	ldr	r3, [pc, #664]	; (800173c <main+0x2e4>)
 80014a4:	785b      	ldrb	r3, [r3, #1]
 80014a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014aa:	b2db      	uxtb	r3, r3
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d006      	beq.n	80014be <main+0x66>
	  {
		  Flag.Reset_Tarjeta=0;
 80014b0:	4aa2      	ldr	r2, [pc, #648]	; (800173c <main+0x2e4>)
 80014b2:	7853      	ldrb	r3, [r2, #1]
 80014b4:	f36f 1386 	bfc	r3, #6, #1
 80014b8:	7053      	strb	r3, [r2, #1]
		  FUNC_RESET();
 80014ba:	f7ff fcd9 	bl	8000e70 <FUNC_RESET>
	  }

	  if(Flag.Radio_on)//Indicacion de que el radio debe inicializarse
 80014be:	4b9f      	ldr	r3, [pc, #636]	; (800173c <main+0x2e4>)
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	f003 0310 	and.w	r3, r3, #16
 80014c6:	b2db      	uxtb	r3, r3
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	f000 80aa 	beq.w	8001622 <main+0x1ca>
	  	  {
	  		  if(!Flag.MQTT_Start&&!Flag.mqtt_command)//Esperar que el mqtt se encienda o se libere el uso del mqtt
 80014ce:	4b9b      	ldr	r3, [pc, #620]	; (800173c <main+0x2e4>)
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	f003 0304 	and.w	r3, r3, #4
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d10e      	bne.n	80014fa <main+0xa2>
 80014dc:	4b97      	ldr	r3, [pc, #604]	; (800173c <main+0x2e4>)
 80014de:	785b      	ldrb	r3, [r3, #1]
 80014e0:	f003 0301 	and.w	r3, r3, #1
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d107      	bne.n	80014fa <main+0xa2>
	  		  {
	  			Transmit(Iniciar_MQTT);//Iniciar MQTT
 80014ea:	4895      	ldr	r0, [pc, #596]	; (8001740 <main+0x2e8>)
 80014ec:	f7ff ff9e 	bl	800142c <Transmit>
	  			Flag.mqtt_command=1;//Ocupando el uso del MQTT
 80014f0:	4a92      	ldr	r2, [pc, #584]	; (800173c <main+0x2e4>)
 80014f2:	7853      	ldrb	r3, [r2, #1]
 80014f4:	f043 0301 	orr.w	r3, r3, #1
 80014f8:	7053      	strb	r3, [r2, #1]
	  		  }
	  		 if(!Flag.gps&&!Flag.gps_command)//Esperar que el GPS se encienda o se libere el uso del GPS
 80014fa:	4b90      	ldr	r3, [pc, #576]	; (800173c <main+0x2e4>)
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	f003 0308 	and.w	r3, r3, #8
 8001502:	b2db      	uxtb	r3, r3
 8001504:	2b00      	cmp	r3, #0
 8001506:	d10e      	bne.n	8001526 <main+0xce>
 8001508:	4b8c      	ldr	r3, [pc, #560]	; (800173c <main+0x2e4>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001510:	b2db      	uxtb	r3, r3
 8001512:	2b00      	cmp	r3, #0
 8001514:	d107      	bne.n	8001526 <main+0xce>
	  		  {
	  		    Transmit(AT_GPS_ON);//Encender GPS
 8001516:	488b      	ldr	r0, [pc, #556]	; (8001744 <main+0x2ec>)
 8001518:	f7ff ff88 	bl	800142c <Transmit>
	  		    Flag.gps_command=1;//Ocupando el GPS
 800151c:	4a87      	ldr	r2, [pc, #540]	; (800173c <main+0x2e4>)
 800151e:	7813      	ldrb	r3, [r2, #0]
 8001520:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001524:	7013      	strb	r3, [r2, #0]
	  		  }
	  		  if(Flag.gps&&!Flag.gps_command)
 8001526:	4b85      	ldr	r3, [pc, #532]	; (800173c <main+0x2e4>)
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	f003 0308 	and.w	r3, r3, #8
 800152e:	b2db      	uxtb	r3, r3
 8001530:	2b00      	cmp	r3, #0
 8001532:	d00e      	beq.n	8001552 <main+0xfa>
 8001534:	4b81      	ldr	r3, [pc, #516]	; (800173c <main+0x2e4>)
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800153c:	b2db      	uxtb	r3, r3
 800153e:	2b00      	cmp	r3, #0
 8001540:	d107      	bne.n	8001552 <main+0xfa>
	  		  {
	  			Transmit(AT_GPS_HOT);//Habilitando el uso del GPS
 8001542:	4881      	ldr	r0, [pc, #516]	; (8001748 <main+0x2f0>)
 8001544:	f7ff ff72 	bl	800142c <Transmit>
	  			Flag.gps_command=1;//Ocupando el GPS
 8001548:	4a7c      	ldr	r2, [pc, #496]	; (800173c <main+0x2e4>)
 800154a:	7813      	ldrb	r3, [r2, #0]
 800154c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001550:	7013      	strb	r3, [r2, #0]
	  		  }
	  		  if(Flag.MQTT_Start&&!Flag.mqtt_command&&!Flag.servidor)//Esperar a que ese activo el MQTT y este libre el uso del MQTT , para lograr conectarse al servidor
 8001552:	4b7a      	ldr	r3, [pc, #488]	; (800173c <main+0x2e4>)
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	f003 0304 	and.w	r3, r3, #4
 800155a:	b2db      	uxtb	r3, r3
 800155c:	2b00      	cmp	r3, #0
 800155e:	d015      	beq.n	800158c <main+0x134>
 8001560:	4b76      	ldr	r3, [pc, #472]	; (800173c <main+0x2e4>)
 8001562:	785b      	ldrb	r3, [r3, #1]
 8001564:	f003 0301 	and.w	r3, r3, #1
 8001568:	b2db      	uxtb	r3, r3
 800156a:	2b00      	cmp	r3, #0
 800156c:	d10e      	bne.n	800158c <main+0x134>
 800156e:	4b73      	ldr	r3, [pc, #460]	; (800173c <main+0x2e4>)
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	f003 0302 	and.w	r3, r3, #2
 8001576:	b2db      	uxtb	r3, r3
 8001578:	2b00      	cmp	r3, #0
 800157a:	d107      	bne.n	800158c <main+0x134>
	  		  {
	  			FUNC_MQTT_CONNECT_SERVER("JORGE0901");//Conectarse al servidor MQTT
 800157c:	4873      	ldr	r0, [pc, #460]	; (800174c <main+0x2f4>)
 800157e:	f7ff fd97 	bl	80010b0 <FUNC_MQTT_CONNECT_SERVER>
	  			Flag.mqtt_command=1;//Ocupando el MQTT
 8001582:	4a6e      	ldr	r2, [pc, #440]	; (800173c <main+0x2e4>)
 8001584:	7853      	ldrb	r3, [r2, #1]
 8001586:	f043 0301 	orr.w	r3, r3, #1
 800158a:	7053      	strb	r3, [r2, #1]
	  		  }
	  			if(Flag.MQTT_Start&&Flag.gps&&Flag.servidor)//Indicacion de que el equipo esta inicializado
 800158c:	4b6b      	ldr	r3, [pc, #428]	; (800173c <main+0x2e4>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	f003 0304 	and.w	r3, r3, #4
 8001594:	b2db      	uxtb	r3, r3
 8001596:	2b00      	cmp	r3, #0
 8001598:	d043      	beq.n	8001622 <main+0x1ca>
 800159a:	4b68      	ldr	r3, [pc, #416]	; (800173c <main+0x2e4>)
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	f003 0308 	and.w	r3, r3, #8
 80015a2:	b2db      	uxtb	r3, r3
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d03c      	beq.n	8001622 <main+0x1ca>
 80015a8:	4b64      	ldr	r3, [pc, #400]	; (800173c <main+0x2e4>)
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	f003 0302 	and.w	r3, r3, #2
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d035      	beq.n	8001622 <main+0x1ca>
	  		  {
	  			Flag.Radio_on=0;//Indicacion de que el equipo ya termino la inicializacion
 80015b6:	4a61      	ldr	r2, [pc, #388]	; (800173c <main+0x2e4>)
 80015b8:	7813      	ldrb	r3, [r2, #0]
 80015ba:	f36f 1304 	bfc	r3, #4, #1
 80015be:	7013      	strb	r3, [r2, #0]
	  			Flag.gps_command=0;//Liberando GPS
 80015c0:	4a5e      	ldr	r2, [pc, #376]	; (800173c <main+0x2e4>)
 80015c2:	7813      	ldrb	r3, [r2, #0]
 80015c4:	f36f 13c7 	bfc	r3, #7, #1
 80015c8:	7013      	strb	r3, [r2, #0]
	  			Flag.mqtt_command=0;//Liberando MQTT
 80015ca:	4a5c      	ldr	r2, [pc, #368]	; (800173c <main+0x2e4>)
 80015cc:	7853      	ldrb	r3, [r2, #1]
 80015ce:	f36f 0300 	bfc	r3, #0, #1
 80015d2:	7053      	strb	r3, [r2, #1]
		  	  	if(Flag.servidor&&!Flag.Subscripcion)//Inicio de suscripciones
 80015d4:	4b59      	ldr	r3, [pc, #356]	; (800173c <main+0x2e4>)
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	f003 0302 	and.w	r3, r3, #2
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d01b      	beq.n	800161a <main+0x1c2>
 80015e2:	4b56      	ldr	r3, [pc, #344]	; (800173c <main+0x2e4>)
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	f003 0301 	and.w	r3, r3, #1
 80015ea:	b2db      	uxtb	r3, r3
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d114      	bne.n	800161a <main+0x1c2>
		  	  	{
		  			Flag.Subscripcion_sucess=0;//Incicando que puede enviar una subscripcion
 80015f0:	4a52      	ldr	r2, [pc, #328]	; (800173c <main+0x2e4>)
 80015f2:	7813      	ldrb	r3, [r2, #0]
 80015f4:	f36f 1345 	bfc	r3, #5, #1
 80015f8:	7013      	strb	r3, [r2, #0]
		  			FUNC_Subscribirse_MQTT("EJEMPLOJORGE");//Topico al que se desea subscribirse
 80015fa:	4855      	ldr	r0, [pc, #340]	; (8001750 <main+0x2f8>)
 80015fc:	f7ff fe70 	bl	80012e0 <FUNC_Subscribirse_MQTT>
		  			while(!Flag.Subscripcion_sucess);//Esperando la respuesta
 8001600:	bf00      	nop
 8001602:	4b4e      	ldr	r3, [pc, #312]	; (800173c <main+0x2e4>)
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	f003 0320 	and.w	r3, r3, #32
 800160a:	b2db      	uxtb	r3, r3
 800160c:	2b00      	cmp	r3, #0
 800160e:	d0f8      	beq.n	8001602 <main+0x1aa>

		  			Flag.Subscripcion=1;//Subscripciones terminadas
 8001610:	4a4a      	ldr	r2, [pc, #296]	; (800173c <main+0x2e4>)
 8001612:	7813      	ldrb	r3, [r2, #0]
 8001614:	f043 0301 	orr.w	r3, r3, #1
 8001618:	7013      	strb	r3, [r2, #0]

		  	  	}
	  			FUNC_SEND_MQTT("Ready","Prueba_Server");
 800161a:	494e      	ldr	r1, [pc, #312]	; (8001754 <main+0x2fc>)
 800161c:	484e      	ldr	r0, [pc, #312]	; (8001758 <main+0x300>)
 800161e:	f7ff fdbd 	bl	800119c <FUNC_SEND_MQTT>
	  		  }
	  	  }


	  	  	if(!Flag.Radio_on&&Flag.servidor)
 8001622:	4b46      	ldr	r3, [pc, #280]	; (800173c <main+0x2e4>)
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	f003 0310 	and.w	r3, r3, #16
 800162a:	b2db      	uxtb	r3, r3
 800162c:	2b00      	cmp	r3, #0
 800162e:	f47f af38 	bne.w	80014a2 <main+0x4a>
 8001632:	4b42      	ldr	r3, [pc, #264]	; (800173c <main+0x2e4>)
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	f003 0302 	and.w	r3, r3, #2
 800163a:	b2db      	uxtb	r3, r3
 800163c:	2b00      	cmp	r3, #0
 800163e:	f43f af30 	beq.w	80014a2 <main+0x4a>
	  	  	{
	  		  	if(Flag.Send_GPS&&!Flag.mqtt_command)
 8001642:	4b3e      	ldr	r3, [pc, #248]	; (800173c <main+0x2e4>)
 8001644:	785b      	ldrb	r3, [r3, #1]
 8001646:	f003 0302 	and.w	r3, r3, #2
 800164a:	b2db      	uxtb	r3, r3
 800164c:	2b00      	cmp	r3, #0
 800164e:	d02f      	beq.n	80016b0 <main+0x258>
 8001650:	4b3a      	ldr	r3, [pc, #232]	; (800173c <main+0x2e4>)
 8001652:	785b      	ldrb	r3, [r3, #1]
 8001654:	f003 0301 	and.w	r3, r3, #1
 8001658:	b2db      	uxtb	r3, r3
 800165a:	2b00      	cmp	r3, #0
 800165c:	d128      	bne.n	80016b0 <main+0x258>
	  		  	{

	  		  		if(!Flag.gps_command)
 800165e:	4b37      	ldr	r3, [pc, #220]	; (800173c <main+0x2e4>)
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001666:	b2db      	uxtb	r3, r3
 8001668:	2b00      	cmp	r3, #0
 800166a:	d121      	bne.n	80016b0 <main+0x258>
	  		  		{
	  		  		HAL_Delay(100);
 800166c:	2064      	movs	r0, #100	; 0x64
 800166e:	f000 fe91 	bl	8002394 <HAL_Delay>
	  		  		Transmit(AT_GPS_INFO);
 8001672:	483a      	ldr	r0, [pc, #232]	; (800175c <main+0x304>)
 8001674:	f7ff feda 	bl	800142c <Transmit>
	  		  		Flag.gps_command=1;
 8001678:	4a30      	ldr	r2, [pc, #192]	; (800173c <main+0x2e4>)
 800167a:	7813      	ldrb	r3, [r2, #0]
 800167c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001680:	7013      	strb	r3, [r2, #0]
	  		  		Flag.mqtt_command=1;
 8001682:	4a2e      	ldr	r2, [pc, #184]	; (800173c <main+0x2e4>)
 8001684:	7853      	ldrb	r3, [r2, #1]
 8001686:	f043 0301 	orr.w	r3, r3, #1
 800168a:	7053      	strb	r3, [r2, #1]
	  		  		while(!Flag.gps_command);
 800168c:	bf00      	nop
 800168e:	4b2b      	ldr	r3, [pc, #172]	; (800173c <main+0x2e4>)
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001696:	b2db      	uxtb	r3, r3
 8001698:	2b00      	cmp	r3, #0
 800169a:	d0f8      	beq.n	800168e <main+0x236>
	  		  		HAL_Delay(200);
 800169c:	20c8      	movs	r0, #200	; 0xc8
 800169e:	f000 fe79 	bl	8002394 <HAL_Delay>
	  		  		FUNC_SEND_GPS();
 80016a2:	f7ff fcf7 	bl	8001094 <FUNC_SEND_GPS>
	  		  		Flag.Send_GPS=0;
 80016a6:	4a25      	ldr	r2, [pc, #148]	; (800173c <main+0x2e4>)
 80016a8:	7853      	ldrb	r3, [r2, #1]
 80016aa:	f36f 0341 	bfc	r3, #1, #1
 80016ae:	7053      	strb	r3, [r2, #1]
	  		  		}
	  		  	}


			  if(Flag.Send_Medidas&&!Flag.mqtt_command)
 80016b0:	4b22      	ldr	r3, [pc, #136]	; (800173c <main+0x2e4>)
 80016b2:	785b      	ldrb	r3, [r3, #1]
 80016b4:	f003 0304 	and.w	r3, r3, #4
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d028      	beq.n	8001710 <main+0x2b8>
 80016be:	4b1f      	ldr	r3, [pc, #124]	; (800173c <main+0x2e4>)
 80016c0:	785b      	ldrb	r3, [r3, #1]
 80016c2:	f003 0301 	and.w	r3, r3, #1
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d121      	bne.n	8001710 <main+0x2b8>
				 {
				  HAL_GPIO_TogglePin(led_data_GPIO_Port, led_data_Pin);
 80016cc:	2108      	movs	r1, #8
 80016ce:	4824      	ldr	r0, [pc, #144]	; (8001760 <main+0x308>)
 80016d0:	f002 f950 	bl	8003974 <HAL_GPIO_TogglePin>
				  char Presion[10]="\0";
 80016d4:	2300      	movs	r3, #0
 80016d6:	627b      	str	r3, [r7, #36]	; 0x24
 80016d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	809a      	strh	r2, [r3, #4]
				  sprintf(Presion,"%.5f",pressure);
 80016e2:	4b20      	ldr	r3, [pc, #128]	; (8001764 <main+0x30c>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4618      	mov	r0, r3
 80016e8:	f7fe ff2e 	bl	8000548 <__aeabi_f2d>
 80016ec:	4602      	mov	r2, r0
 80016ee:	460b      	mov	r3, r1
 80016f0:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80016f4:	491c      	ldr	r1, [pc, #112]	; (8001768 <main+0x310>)
 80016f6:	f006 fb3b 	bl	8007d70 <siprintf>
				  FUNC_SEND_MQTT(Presion,"waveSizejo");
 80016fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016fe:	491b      	ldr	r1, [pc, #108]	; (800176c <main+0x314>)
 8001700:	4618      	mov	r0, r3
 8001702:	f7ff fd4b 	bl	800119c <FUNC_SEND_MQTT>
				  Flag.Send_Medidas=0;
 8001706:	4a0d      	ldr	r2, [pc, #52]	; (800173c <main+0x2e4>)
 8001708:	7853      	ldrb	r3, [r2, #1]
 800170a:	f36f 0382 	bfc	r3, #2, #1
 800170e:	7053      	strb	r3, [r2, #1]
				 }
	  		  if(Flag.Send_Medidas2&&!Flag.mqtt_command)
 8001710:	4b0a      	ldr	r3, [pc, #40]	; (800173c <main+0x2e4>)
 8001712:	785b      	ldrb	r3, [r3, #1]
 8001714:	f003 0308 	and.w	r3, r3, #8
 8001718:	b2db      	uxtb	r3, r3
 800171a:	2b00      	cmp	r3, #0
 800171c:	d046      	beq.n	80017ac <main+0x354>
 800171e:	4b07      	ldr	r3, [pc, #28]	; (800173c <main+0x2e4>)
 8001720:	785b      	ldrb	r3, [r3, #1]
 8001722:	f003 0301 	and.w	r3, r3, #1
 8001726:	b2db      	uxtb	r3, r3
 8001728:	2b00      	cmp	r3, #0
 800172a:	d13f      	bne.n	80017ac <main+0x354>
 800172c:	e020      	b.n	8001770 <main+0x318>
 800172e:	bf00      	nop
 8001730:	200005b4 	.word	0x200005b4
 8001734:	2000036c 	.word	0x2000036c
 8001738:	0800b6e0 	.word	0x0800b6e0
 800173c:	200005b0 	.word	0x200005b0
 8001740:	0800b6ec 	.word	0x0800b6ec
 8001744:	0800b6fc 	.word	0x0800b6fc
 8001748:	0800b710 	.word	0x0800b710
 800174c:	0800b720 	.word	0x0800b720
 8001750:	0800b72c 	.word	0x0800b72c
 8001754:	0800b73c 	.word	0x0800b73c
 8001758:	0800b74c 	.word	0x0800b74c
 800175c:	0800b754 	.word	0x0800b754
 8001760:	48000400 	.word	0x48000400
 8001764:	200005c0 	.word	0x200005c0
 8001768:	0800b764 	.word	0x0800b764
 800176c:	0800b76c 	.word	0x0800b76c
	  		  	 {
	  			  HAL_GPIO_TogglePin(led_data_GPIO_Port, led_data_Pin);
 8001770:	2108      	movs	r1, #8
 8001772:	483a      	ldr	r0, [pc, #232]	; (800185c <main+0x404>)
 8001774:	f002 f8fe 	bl	8003974 <HAL_GPIO_TogglePin>
	  		  	  char WIND[10]="\0";
 8001778:	2300      	movs	r3, #0
 800177a:	61bb      	str	r3, [r7, #24]
 800177c:	f107 031c 	add.w	r3, r7, #28
 8001780:	2200      	movs	r2, #0
 8001782:	601a      	str	r2, [r3, #0]
 8001784:	809a      	strh	r2, [r3, #4]
	  		  	  sprintf(WIND,"%li",MEDIDAS[0]);
 8001786:	4b36      	ldr	r3, [pc, #216]	; (8001860 <main+0x408>)
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	f107 0318 	add.w	r3, r7, #24
 800178e:	4935      	ldr	r1, [pc, #212]	; (8001864 <main+0x40c>)
 8001790:	4618      	mov	r0, r3
 8001792:	f006 faed 	bl	8007d70 <siprintf>
	  		  	  FUNC_SEND_MQTT(WIND,"windSpeedjo");
 8001796:	f107 0318 	add.w	r3, r7, #24
 800179a:	4933      	ldr	r1, [pc, #204]	; (8001868 <main+0x410>)
 800179c:	4618      	mov	r0, r3
 800179e:	f7ff fcfd 	bl	800119c <FUNC_SEND_MQTT>
	  		  	  Flag.Send_Medidas2=0;
 80017a2:	4a32      	ldr	r2, [pc, #200]	; (800186c <main+0x414>)
 80017a4:	7853      	ldrb	r3, [r2, #1]
 80017a6:	f36f 03c3 	bfc	r3, #3, #1
 80017aa:	7053      	strb	r3, [r2, #1]
	  		  	 }
	  		if(Flag.Send_Medidas3&&!Flag.mqtt_command)
 80017ac:	4b2f      	ldr	r3, [pc, #188]	; (800186c <main+0x414>)
 80017ae:	785b      	ldrb	r3, [r3, #1]
 80017b0:	f003 0310 	and.w	r3, r3, #16
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d024      	beq.n	8001804 <main+0x3ac>
 80017ba:	4b2c      	ldr	r3, [pc, #176]	; (800186c <main+0x414>)
 80017bc:	785b      	ldrb	r3, [r3, #1]
 80017be:	f003 0301 	and.w	r3, r3, #1
 80017c2:	b2db      	uxtb	r3, r3
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d11d      	bne.n	8001804 <main+0x3ac>
	  			  {
	  			HAL_GPIO_TogglePin(led_data_GPIO_Port, led_data_Pin);
 80017c8:	2108      	movs	r1, #8
 80017ca:	4824      	ldr	r0, [pc, #144]	; (800185c <main+0x404>)
 80017cc:	f002 f8d2 	bl	8003974 <HAL_GPIO_TogglePin>
  		  			char Turbidez[10]="\0";
 80017d0:	2300      	movs	r3, #0
 80017d2:	60fb      	str	r3, [r7, #12]
 80017d4:	f107 0310 	add.w	r3, r7, #16
 80017d8:	2200      	movs	r2, #0
 80017da:	601a      	str	r2, [r3, #0]
 80017dc:	809a      	strh	r2, [r3, #4]
  		  			sprintf(Turbidez,"%li",MEDIDAS[1]);
 80017de:	4b20      	ldr	r3, [pc, #128]	; (8001860 <main+0x408>)
 80017e0:	685a      	ldr	r2, [r3, #4]
 80017e2:	f107 030c 	add.w	r3, r7, #12
 80017e6:	491f      	ldr	r1, [pc, #124]	; (8001864 <main+0x40c>)
 80017e8:	4618      	mov	r0, r3
 80017ea:	f006 fac1 	bl	8007d70 <siprintf>
	  			  	FUNC_SEND_MQTT(Turbidez,"turbidityjo");
 80017ee:	f107 030c 	add.w	r3, r7, #12
 80017f2:	491f      	ldr	r1, [pc, #124]	; (8001870 <main+0x418>)
 80017f4:	4618      	mov	r0, r3
 80017f6:	f7ff fcd1 	bl	800119c <FUNC_SEND_MQTT>
	  			  	Flag.Send_Medidas3=0;
 80017fa:	4a1c      	ldr	r2, [pc, #112]	; (800186c <main+0x414>)
 80017fc:	7853      	ldrb	r3, [r2, #1]
 80017fe:	f36f 1304 	bfc	r3, #4, #1
 8001802:	7053      	strb	r3, [r2, #1]
	  			  }
	  		if(Flag.Send_Medidas4&&!Flag.mqtt_command)
 8001804:	4b19      	ldr	r3, [pc, #100]	; (800186c <main+0x414>)
 8001806:	785b      	ldrb	r3, [r3, #1]
 8001808:	f003 0320 	and.w	r3, r3, #32
 800180c:	b2db      	uxtb	r3, r3
 800180e:	2b00      	cmp	r3, #0
 8001810:	f43f ae47 	beq.w	80014a2 <main+0x4a>
 8001814:	4b15      	ldr	r3, [pc, #84]	; (800186c <main+0x414>)
 8001816:	785b      	ldrb	r3, [r3, #1]
 8001818:	f003 0301 	and.w	r3, r3, #1
 800181c:	b2db      	uxtb	r3, r3
 800181e:	2b00      	cmp	r3, #0
 8001820:	f47f ae3f 	bne.w	80014a2 <main+0x4a>
	  			  {
	  			HAL_GPIO_TogglePin(led_data_GPIO_Port, led_data_Pin);
 8001824:	2108      	movs	r1, #8
 8001826:	480d      	ldr	r0, [pc, #52]	; (800185c <main+0x404>)
 8001828:	f002 f8a4 	bl	8003974 <HAL_GPIO_TogglePin>
  		  			char Temp[10]="\0";
 800182c:	2300      	movs	r3, #0
 800182e:	603b      	str	r3, [r7, #0]
 8001830:	1d3b      	adds	r3, r7, #4
 8001832:	2200      	movs	r2, #0
 8001834:	601a      	str	r2, [r3, #0]
 8001836:	809a      	strh	r2, [r3, #4]
  		  			sprintf(Temp,"%li",MEDIDAS[2]);
 8001838:	4b09      	ldr	r3, [pc, #36]	; (8001860 <main+0x408>)
 800183a:	689a      	ldr	r2, [r3, #8]
 800183c:	463b      	mov	r3, r7
 800183e:	4909      	ldr	r1, [pc, #36]	; (8001864 <main+0x40c>)
 8001840:	4618      	mov	r0, r3
 8001842:	f006 fa95 	bl	8007d70 <siprintf>
	  			  	FUNC_SEND_MQTT(Temp,"temperaturejo");
 8001846:	463b      	mov	r3, r7
 8001848:	490a      	ldr	r1, [pc, #40]	; (8001874 <main+0x41c>)
 800184a:	4618      	mov	r0, r3
 800184c:	f7ff fca6 	bl	800119c <FUNC_SEND_MQTT>
	  			  	Flag.Send_Medidas4=0;
 8001850:	4a06      	ldr	r2, [pc, #24]	; (800186c <main+0x414>)
 8001852:	7853      	ldrb	r3, [r2, #1]
 8001854:	f36f 1345 	bfc	r3, #5, #1
 8001858:	7053      	strb	r3, [r2, #1]
	  if(Flag.Reset_Tarjeta)
 800185a:	e622      	b.n	80014a2 <main+0x4a>
 800185c:	48000400 	.word	0x48000400
 8001860:	200005b4 	.word	0x200005b4
 8001864:	0800b778 	.word	0x0800b778
 8001868:	0800b77c 	.word	0x0800b77c
 800186c:	200005b0 	.word	0x200005b0
 8001870:	0800b788 	.word	0x0800b788
 8001874:	0800b794 	.word	0x0800b794

08001878 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b09c      	sub	sp, #112	; 0x70
 800187c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800187e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001882:	2228      	movs	r2, #40	; 0x28
 8001884:	2100      	movs	r1, #0
 8001886:	4618      	mov	r0, r3
 8001888:	f006 fad5 	bl	8007e36 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800188c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]
 8001894:	605a      	str	r2, [r3, #4]
 8001896:	609a      	str	r2, [r3, #8]
 8001898:	60da      	str	r2, [r3, #12]
 800189a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800189c:	463b      	mov	r3, r7
 800189e:	2234      	movs	r2, #52	; 0x34
 80018a0:	2100      	movs	r1, #0
 80018a2:	4618      	mov	r0, r3
 80018a4:	f006 fac7 	bl	8007e36 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018a8:	2302      	movs	r3, #2
 80018aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018ac:	2301      	movs	r3, #1
 80018ae:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018b0:	2310      	movs	r3, #16
 80018b2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018b4:	2302      	movs	r3, #2
 80018b6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80018b8:	2300      	movs	r3, #0
 80018ba:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80018bc:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80018c0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018c2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80018c6:	4618      	mov	r0, r3
 80018c8:	f002 f994 	bl	8003bf4 <HAL_RCC_OscConfig>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80018d2:	f000 fa1b 	bl	8001d0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018d6:	230f      	movs	r3, #15
 80018d8:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018da:	2302      	movs	r3, #2
 80018dc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018de:	2300      	movs	r3, #0
 80018e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80018e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018e8:	2300      	movs	r3, #0
 80018ea:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80018ec:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80018f0:	2102      	movs	r1, #2
 80018f2:	4618      	mov	r0, r3
 80018f4:	f003 f9bc 	bl	8004c70 <HAL_RCC_ClockConfig>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80018fe:	f000 fa05 	bl	8001d0c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 8001902:	4b0c      	ldr	r3, [pc, #48]	; (8001934 <SystemClock_Config+0xbc>)
 8001904:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_TIM17|RCC_PERIPHCLK_ADC1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001906:	2300      	movs	r3, #0
 8001908:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800190a:	2300      	movs	r3, #0
 800190c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Tim17ClockSelection = RCC_TIM17CLK_HCLK;
 800190e:	2300      	movs	r3, #0
 8001910:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.Adc1ClockSelection = RCC_ADC1PLLCLK_DIV1;
 8001912:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001916:	61bb      	str	r3, [r7, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001918:	463b      	mov	r3, r7
 800191a:	4618      	mov	r0, r3
 800191c:	f003 fbde 	bl	80050dc <HAL_RCCEx_PeriphCLKConfig>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8001926:	f000 f9f1 	bl	8001d0c <Error_Handler>
  }
}
 800192a:	bf00      	nop
 800192c:	3770      	adds	r7, #112	; 0x70
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	001000a1 	.word	0x001000a1

08001938 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b086      	sub	sp, #24
 800193c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800193e:	463b      	mov	r3, r7
 8001940:	2200      	movs	r2, #0
 8001942:	601a      	str	r2, [r3, #0]
 8001944:	605a      	str	r2, [r3, #4]
 8001946:	609a      	str	r2, [r3, #8]
 8001948:	60da      	str	r2, [r3, #12]
 800194a:	611a      	str	r2, [r3, #16]
 800194c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800194e:	4b33      	ldr	r3, [pc, #204]	; (8001a1c <MX_ADC1_Init+0xe4>)
 8001950:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001954:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001956:	4b31      	ldr	r3, [pc, #196]	; (8001a1c <MX_ADC1_Init+0xe4>)
 8001958:	2200      	movs	r2, #0
 800195a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800195c:	4b2f      	ldr	r3, [pc, #188]	; (8001a1c <MX_ADC1_Init+0xe4>)
 800195e:	2200      	movs	r2, #0
 8001960:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001962:	4b2e      	ldr	r3, [pc, #184]	; (8001a1c <MX_ADC1_Init+0xe4>)
 8001964:	2201      	movs	r2, #1
 8001966:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001968:	4b2c      	ldr	r3, [pc, #176]	; (8001a1c <MX_ADC1_Init+0xe4>)
 800196a:	2201      	movs	r2, #1
 800196c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800196e:	4b2b      	ldr	r3, [pc, #172]	; (8001a1c <MX_ADC1_Init+0xe4>)
 8001970:	2200      	movs	r2, #0
 8001972:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001976:	4b29      	ldr	r3, [pc, #164]	; (8001a1c <MX_ADC1_Init+0xe4>)
 8001978:	2200      	movs	r2, #0
 800197a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800197c:	4b27      	ldr	r3, [pc, #156]	; (8001a1c <MX_ADC1_Init+0xe4>)
 800197e:	2201      	movs	r2, #1
 8001980:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001982:	4b26      	ldr	r3, [pc, #152]	; (8001a1c <MX_ADC1_Init+0xe4>)
 8001984:	2200      	movs	r2, #0
 8001986:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8001988:	4b24      	ldr	r3, [pc, #144]	; (8001a1c <MX_ADC1_Init+0xe4>)
 800198a:	2203      	movs	r2, #3
 800198c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800198e:	4b23      	ldr	r3, [pc, #140]	; (8001a1c <MX_ADC1_Init+0xe4>)
 8001990:	2201      	movs	r2, #1
 8001992:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001996:	4b21      	ldr	r3, [pc, #132]	; (8001a1c <MX_ADC1_Init+0xe4>)
 8001998:	2204      	movs	r2, #4
 800199a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800199c:	4b1f      	ldr	r3, [pc, #124]	; (8001a1c <MX_ADC1_Init+0xe4>)
 800199e:	2200      	movs	r2, #0
 80019a0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80019a2:	4b1e      	ldr	r3, [pc, #120]	; (8001a1c <MX_ADC1_Init+0xe4>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80019a8:	481c      	ldr	r0, [pc, #112]	; (8001a1c <MX_ADC1_Init+0xe4>)
 80019aa:	f000 fd35 	bl	8002418 <HAL_ADC_Init>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d001      	beq.n	80019b8 <MX_ADC1_Init+0x80>
  {
    Error_Handler();
 80019b4:	f000 f9aa 	bl	8001d0c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80019b8:	2301      	movs	r3, #1
 80019ba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80019bc:	2301      	movs	r3, #1
 80019be:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80019c0:	2300      	movs	r3, #0
 80019c2:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 80019c4:	2307      	movs	r3, #7
 80019c6:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80019c8:	2300      	movs	r3, #0
 80019ca:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80019cc:	2300      	movs	r3, #0
 80019ce:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019d0:	463b      	mov	r3, r7
 80019d2:	4619      	mov	r1, r3
 80019d4:	4811      	ldr	r0, [pc, #68]	; (8001a1c <MX_ADC1_Init+0xe4>)
 80019d6:	f000 ff41 	bl	800285c <HAL_ADC_ConfigChannel>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d001      	beq.n	80019e4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80019e0:	f000 f994 	bl	8001d0c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80019e4:	2302      	movs	r3, #2
 80019e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019e8:	463b      	mov	r3, r7
 80019ea:	4619      	mov	r1, r3
 80019ec:	480b      	ldr	r0, [pc, #44]	; (8001a1c <MX_ADC1_Init+0xe4>)
 80019ee:	f000 ff35 	bl	800285c <HAL_ADC_ConfigChannel>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d001      	beq.n	80019fc <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 80019f8:	f000 f988 	bl	8001d0c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80019fc:	2303      	movs	r3, #3
 80019fe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a00:	463b      	mov	r3, r7
 8001a02:	4619      	mov	r1, r3
 8001a04:	4805      	ldr	r0, [pc, #20]	; (8001a1c <MX_ADC1_Init+0xe4>)
 8001a06:	f000 ff29 	bl	800285c <HAL_ADC_ConfigChannel>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8001a10:	f000 f97c 	bl	8001d0c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001a14:	bf00      	nop
 8001a16:	3718      	adds	r7, #24
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	2000036c 	.word	0x2000036c

08001a20 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a24:	4b1b      	ldr	r3, [pc, #108]	; (8001a94 <MX_I2C1_Init+0x74>)
 8001a26:	4a1c      	ldr	r2, [pc, #112]	; (8001a98 <MX_I2C1_Init+0x78>)
 8001a28:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8001a2a:	4b1a      	ldr	r3, [pc, #104]	; (8001a94 <MX_I2C1_Init+0x74>)
 8001a2c:	4a1b      	ldr	r2, [pc, #108]	; (8001a9c <MX_I2C1_Init+0x7c>)
 8001a2e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001a30:	4b18      	ldr	r3, [pc, #96]	; (8001a94 <MX_I2C1_Init+0x74>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a36:	4b17      	ldr	r3, [pc, #92]	; (8001a94 <MX_I2C1_Init+0x74>)
 8001a38:	2201      	movs	r2, #1
 8001a3a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a3c:	4b15      	ldr	r3, [pc, #84]	; (8001a94 <MX_I2C1_Init+0x74>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001a42:	4b14      	ldr	r3, [pc, #80]	; (8001a94 <MX_I2C1_Init+0x74>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001a48:	4b12      	ldr	r3, [pc, #72]	; (8001a94 <MX_I2C1_Init+0x74>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a4e:	4b11      	ldr	r3, [pc, #68]	; (8001a94 <MX_I2C1_Init+0x74>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a54:	4b0f      	ldr	r3, [pc, #60]	; (8001a94 <MX_I2C1_Init+0x74>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a5a:	480e      	ldr	r0, [pc, #56]	; (8001a94 <MX_I2C1_Init+0x74>)
 8001a5c:	f001 ffa4 	bl	80039a8 <HAL_I2C_Init>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d001      	beq.n	8001a6a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001a66:	f000 f951 	bl	8001d0c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001a6a:	2100      	movs	r1, #0
 8001a6c:	4809      	ldr	r0, [pc, #36]	; (8001a94 <MX_I2C1_Init+0x74>)
 8001a6e:	f002 f82a 	bl	8003ac6 <HAL_I2CEx_ConfigAnalogFilter>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001a78:	f000 f948 	bl	8001d0c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001a7c:	2100      	movs	r1, #0
 8001a7e:	4805      	ldr	r0, [pc, #20]	; (8001a94 <MX_I2C1_Init+0x74>)
 8001a80:	f002 f86c 	bl	8003b5c <HAL_I2CEx_ConfigDigitalFilter>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001a8a:	f000 f93f 	bl	8001d0c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a8e:	bf00      	nop
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	20000400 	.word	0x20000400
 8001a98:	40005400 	.word	0x40005400
 8001a9c:	2000090e 	.word	0x2000090e

08001aa0 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001aa4:	4b10      	ldr	r3, [pc, #64]	; (8001ae8 <MX_TIM17_Init+0x48>)
 8001aa6:	4a11      	ldr	r2, [pc, #68]	; (8001aec <MX_TIM17_Init+0x4c>)
 8001aa8:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 6400;
 8001aaa:	4b0f      	ldr	r3, [pc, #60]	; (8001ae8 <MX_TIM17_Init+0x48>)
 8001aac:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8001ab0:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ab2:	4b0d      	ldr	r3, [pc, #52]	; (8001ae8 <MX_TIM17_Init+0x48>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 10000;
 8001ab8:	4b0b      	ldr	r3, [pc, #44]	; (8001ae8 <MX_TIM17_Init+0x48>)
 8001aba:	f242 7210 	movw	r2, #10000	; 0x2710
 8001abe:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ac0:	4b09      	ldr	r3, [pc, #36]	; (8001ae8 <MX_TIM17_Init+0x48>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001ac6:	4b08      	ldr	r3, [pc, #32]	; (8001ae8 <MX_TIM17_Init+0x48>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001acc:	4b06      	ldr	r3, [pc, #24]	; (8001ae8 <MX_TIM17_Init+0x48>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001ad2:	4805      	ldr	r0, [pc, #20]	; (8001ae8 <MX_TIM17_Init+0x48>)
 8001ad4:	f003 fc94 	bl	8005400 <HAL_TIM_Base_Init>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d001      	beq.n	8001ae2 <MX_TIM17_Init+0x42>
  {
    Error_Handler();
 8001ade:	f000 f915 	bl	8001d0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8001ae2:	bf00      	nop
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	20000454 	.word	0x20000454
 8001aec:	40014800 	.word	0x40014800

08001af0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001af4:	4b14      	ldr	r3, [pc, #80]	; (8001b48 <MX_USART1_UART_Init+0x58>)
 8001af6:	4a15      	ldr	r2, [pc, #84]	; (8001b4c <MX_USART1_UART_Init+0x5c>)
 8001af8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001afa:	4b13      	ldr	r3, [pc, #76]	; (8001b48 <MX_USART1_UART_Init+0x58>)
 8001afc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001b00:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b02:	4b11      	ldr	r3, [pc, #68]	; (8001b48 <MX_USART1_UART_Init+0x58>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b08:	4b0f      	ldr	r3, [pc, #60]	; (8001b48 <MX_USART1_UART_Init+0x58>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b0e:	4b0e      	ldr	r3, [pc, #56]	; (8001b48 <MX_USART1_UART_Init+0x58>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b14:	4b0c      	ldr	r3, [pc, #48]	; (8001b48 <MX_USART1_UART_Init+0x58>)
 8001b16:	220c      	movs	r2, #12
 8001b18:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b1a:	4b0b      	ldr	r3, [pc, #44]	; (8001b48 <MX_USART1_UART_Init+0x58>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b20:	4b09      	ldr	r3, [pc, #36]	; (8001b48 <MX_USART1_UART_Init+0x58>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b26:	4b08      	ldr	r3, [pc, #32]	; (8001b48 <MX_USART1_UART_Init+0x58>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b2c:	4b06      	ldr	r3, [pc, #24]	; (8001b48 <MX_USART1_UART_Init+0x58>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b32:	4805      	ldr	r0, [pc, #20]	; (8001b48 <MX_USART1_UART_Init+0x58>)
 8001b34:	f003 fee4 	bl	8005900 <HAL_UART_Init>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001b3e:	f000 f8e5 	bl	8001d0c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001b42:	bf00      	nop
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	200004a0 	.word	0x200004a0
 8001b4c:	40013800 	.word	0x40013800

08001b50 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001b54:	4b14      	ldr	r3, [pc, #80]	; (8001ba8 <MX_USART3_UART_Init+0x58>)
 8001b56:	4a15      	ldr	r2, [pc, #84]	; (8001bac <MX_USART3_UART_Init+0x5c>)
 8001b58:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001b5a:	4b13      	ldr	r3, [pc, #76]	; (8001ba8 <MX_USART3_UART_Init+0x58>)
 8001b5c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001b60:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001b62:	4b11      	ldr	r3, [pc, #68]	; (8001ba8 <MX_USART3_UART_Init+0x58>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001b68:	4b0f      	ldr	r3, [pc, #60]	; (8001ba8 <MX_USART3_UART_Init+0x58>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001b6e:	4b0e      	ldr	r3, [pc, #56]	; (8001ba8 <MX_USART3_UART_Init+0x58>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001b74:	4b0c      	ldr	r3, [pc, #48]	; (8001ba8 <MX_USART3_UART_Init+0x58>)
 8001b76:	220c      	movs	r2, #12
 8001b78:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b7a:	4b0b      	ldr	r3, [pc, #44]	; (8001ba8 <MX_USART3_UART_Init+0x58>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b80:	4b09      	ldr	r3, [pc, #36]	; (8001ba8 <MX_USART3_UART_Init+0x58>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b86:	4b08      	ldr	r3, [pc, #32]	; (8001ba8 <MX_USART3_UART_Init+0x58>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b8c:	4b06      	ldr	r3, [pc, #24]	; (8001ba8 <MX_USART3_UART_Init+0x58>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001b92:	4805      	ldr	r0, [pc, #20]	; (8001ba8 <MX_USART3_UART_Init+0x58>)
 8001b94:	f003 feb4 	bl	8005900 <HAL_UART_Init>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001b9e:	f000 f8b5 	bl	8001d0c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001ba2:	bf00      	nop
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	20000528 	.word	0x20000528
 8001bac:	40004800 	.word	0x40004800

08001bb0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001bb6:	4b0c      	ldr	r3, [pc, #48]	; (8001be8 <MX_DMA_Init+0x38>)
 8001bb8:	695b      	ldr	r3, [r3, #20]
 8001bba:	4a0b      	ldr	r2, [pc, #44]	; (8001be8 <MX_DMA_Init+0x38>)
 8001bbc:	f043 0301 	orr.w	r3, r3, #1
 8001bc0:	6153      	str	r3, [r2, #20]
 8001bc2:	4b09      	ldr	r3, [pc, #36]	; (8001be8 <MX_DMA_Init+0x38>)
 8001bc4:	695b      	ldr	r3, [r3, #20]
 8001bc6:	f003 0301 	and.w	r3, r3, #1
 8001bca:	607b      	str	r3, [r7, #4]
 8001bcc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001bce:	2200      	movs	r2, #0
 8001bd0:	2100      	movs	r1, #0
 8001bd2:	200b      	movs	r0, #11
 8001bd4:	f001 faff 	bl	80031d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001bd8:	200b      	movs	r0, #11
 8001bda:	f001 fb18 	bl	800320e <HAL_NVIC_EnableIRQ>

}
 8001bde:	bf00      	nop
 8001be0:	3708      	adds	r7, #8
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	40021000 	.word	0x40021000

08001bec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b08a      	sub	sp, #40	; 0x28
 8001bf0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf2:	f107 0314 	add.w	r3, r7, #20
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	601a      	str	r2, [r3, #0]
 8001bfa:	605a      	str	r2, [r3, #4]
 8001bfc:	609a      	str	r2, [r3, #8]
 8001bfe:	60da      	str	r2, [r3, #12]
 8001c00:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c02:	4b3f      	ldr	r3, [pc, #252]	; (8001d00 <MX_GPIO_Init+0x114>)
 8001c04:	695b      	ldr	r3, [r3, #20]
 8001c06:	4a3e      	ldr	r2, [pc, #248]	; (8001d00 <MX_GPIO_Init+0x114>)
 8001c08:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001c0c:	6153      	str	r3, [r2, #20]
 8001c0e:	4b3c      	ldr	r3, [pc, #240]	; (8001d00 <MX_GPIO_Init+0x114>)
 8001c10:	695b      	ldr	r3, [r3, #20]
 8001c12:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c16:	613b      	str	r3, [r7, #16]
 8001c18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c1a:	4b39      	ldr	r3, [pc, #228]	; (8001d00 <MX_GPIO_Init+0x114>)
 8001c1c:	695b      	ldr	r3, [r3, #20]
 8001c1e:	4a38      	ldr	r2, [pc, #224]	; (8001d00 <MX_GPIO_Init+0x114>)
 8001c20:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c24:	6153      	str	r3, [r2, #20]
 8001c26:	4b36      	ldr	r3, [pc, #216]	; (8001d00 <MX_GPIO_Init+0x114>)
 8001c28:	695b      	ldr	r3, [r3, #20]
 8001c2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c2e:	60fb      	str	r3, [r7, #12]
 8001c30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c32:	4b33      	ldr	r3, [pc, #204]	; (8001d00 <MX_GPIO_Init+0x114>)
 8001c34:	695b      	ldr	r3, [r3, #20]
 8001c36:	4a32      	ldr	r2, [pc, #200]	; (8001d00 <MX_GPIO_Init+0x114>)
 8001c38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c3c:	6153      	str	r3, [r2, #20]
 8001c3e:	4b30      	ldr	r3, [pc, #192]	; (8001d00 <MX_GPIO_Init+0x114>)
 8001c40:	695b      	ldr	r3, [r3, #20]
 8001c42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c46:	60bb      	str	r3, [r7, #8]
 8001c48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c4a:	4b2d      	ldr	r3, [pc, #180]	; (8001d00 <MX_GPIO_Init+0x114>)
 8001c4c:	695b      	ldr	r3, [r3, #20]
 8001c4e:	4a2c      	ldr	r2, [pc, #176]	; (8001d00 <MX_GPIO_Init+0x114>)
 8001c50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c54:	6153      	str	r3, [r2, #20]
 8001c56:	4b2a      	ldr	r3, [pc, #168]	; (8001d00 <MX_GPIO_Init+0x114>)
 8001c58:	695b      	ldr	r3, [r3, #20]
 8001c5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c5e:	607b      	str	r3, [r7, #4]
 8001c60:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|led_data_Pin|Reset_Pin, GPIO_PIN_RESET);
 8001c62:	2200      	movs	r2, #0
 8001c64:	f242 0128 	movw	r1, #8232	; 0x2028
 8001c68:	4826      	ldr	r0, [pc, #152]	; (8001d04 <MX_GPIO_Init+0x118>)
 8001c6a:	f001 fe6b 	bl	8003944 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(POWER_GPIO_Port, POWER_Pin, GPIO_PIN_RESET);
 8001c6e:	2200      	movs	r2, #0
 8001c70:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c78:	f001 fe64 	bl	8003944 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001c7c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001c82:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001c86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001c8c:	f107 0314 	add.w	r3, r7, #20
 8001c90:	4619      	mov	r1, r3
 8001c92:	481d      	ldr	r0, [pc, #116]	; (8001d08 <MX_GPIO_Init+0x11c>)
 8001c94:	f001 fce4 	bl	8003660 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001c98:	230c      	movs	r3, #12
 8001c9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c9c:	2302      	movs	r3, #2
 8001c9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ca8:	2307      	movs	r3, #7
 8001caa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cac:	f107 0314 	add.w	r3, r7, #20
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cb6:	f001 fcd3 	bl	8003660 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin led_data_Pin Reset_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|led_data_Pin|Reset_Pin;
 8001cba:	f242 0328 	movw	r3, #8232	; 0x2028
 8001cbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ccc:	f107 0314 	add.w	r3, r7, #20
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	480c      	ldr	r0, [pc, #48]	; (8001d04 <MX_GPIO_Init+0x118>)
 8001cd4:	f001 fcc4 	bl	8003660 <HAL_GPIO_Init>

  /*Configure GPIO pin : POWER_Pin */
  GPIO_InitStruct.Pin = POWER_Pin;
 8001cd8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cdc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(POWER_GPIO_Port, &GPIO_InitStruct);
 8001cea:	f107 0314 	add.w	r3, r7, #20
 8001cee:	4619      	mov	r1, r3
 8001cf0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cf4:	f001 fcb4 	bl	8003660 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001cf8:	bf00      	nop
 8001cfa:	3728      	adds	r7, #40	; 0x28
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	40021000 	.word	0x40021000
 8001d04:	48000400 	.word	0x48000400
 8001d08:	48000800 	.word	0x48000800

08001d0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d10:	b672      	cpsid	i
}
 8001d12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d14:	e7fe      	b.n	8001d14 <Error_Handler+0x8>
	...

08001d18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d1e:	4b0f      	ldr	r3, [pc, #60]	; (8001d5c <HAL_MspInit+0x44>)
 8001d20:	699b      	ldr	r3, [r3, #24]
 8001d22:	4a0e      	ldr	r2, [pc, #56]	; (8001d5c <HAL_MspInit+0x44>)
 8001d24:	f043 0301 	orr.w	r3, r3, #1
 8001d28:	6193      	str	r3, [r2, #24]
 8001d2a:	4b0c      	ldr	r3, [pc, #48]	; (8001d5c <HAL_MspInit+0x44>)
 8001d2c:	699b      	ldr	r3, [r3, #24]
 8001d2e:	f003 0301 	and.w	r3, r3, #1
 8001d32:	607b      	str	r3, [r7, #4]
 8001d34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d36:	4b09      	ldr	r3, [pc, #36]	; (8001d5c <HAL_MspInit+0x44>)
 8001d38:	69db      	ldr	r3, [r3, #28]
 8001d3a:	4a08      	ldr	r2, [pc, #32]	; (8001d5c <HAL_MspInit+0x44>)
 8001d3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d40:	61d3      	str	r3, [r2, #28]
 8001d42:	4b06      	ldr	r3, [pc, #24]	; (8001d5c <HAL_MspInit+0x44>)
 8001d44:	69db      	ldr	r3, [r3, #28]
 8001d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d4a:	603b      	str	r3, [r7, #0]
 8001d4c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001d4e:	2007      	movs	r0, #7
 8001d50:	f001 fa36 	bl	80031c0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d54:	bf00      	nop
 8001d56:	3708      	adds	r7, #8
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	40021000 	.word	0x40021000

08001d60 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b08a      	sub	sp, #40	; 0x28
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d68:	f107 0314 	add.w	r3, r7, #20
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	601a      	str	r2, [r3, #0]
 8001d70:	605a      	str	r2, [r3, #4]
 8001d72:	609a      	str	r2, [r3, #8]
 8001d74:	60da      	str	r2, [r3, #12]
 8001d76:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d80:	d164      	bne.n	8001e4c <HAL_ADC_MspInit+0xec>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001d82:	4b34      	ldr	r3, [pc, #208]	; (8001e54 <HAL_ADC_MspInit+0xf4>)
 8001d84:	695b      	ldr	r3, [r3, #20]
 8001d86:	4a33      	ldr	r2, [pc, #204]	; (8001e54 <HAL_ADC_MspInit+0xf4>)
 8001d88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d8c:	6153      	str	r3, [r2, #20]
 8001d8e:	4b31      	ldr	r3, [pc, #196]	; (8001e54 <HAL_ADC_MspInit+0xf4>)
 8001d90:	695b      	ldr	r3, [r3, #20]
 8001d92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d96:	613b      	str	r3, [r7, #16]
 8001d98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d9a:	4b2e      	ldr	r3, [pc, #184]	; (8001e54 <HAL_ADC_MspInit+0xf4>)
 8001d9c:	695b      	ldr	r3, [r3, #20]
 8001d9e:	4a2d      	ldr	r2, [pc, #180]	; (8001e54 <HAL_ADC_MspInit+0xf4>)
 8001da0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001da4:	6153      	str	r3, [r2, #20]
 8001da6:	4b2b      	ldr	r3, [pc, #172]	; (8001e54 <HAL_ADC_MspInit+0xf4>)
 8001da8:	695b      	ldr	r3, [r3, #20]
 8001daa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001dae:	60fb      	str	r3, [r7, #12]
 8001db0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001db2:	4b28      	ldr	r3, [pc, #160]	; (8001e54 <HAL_ADC_MspInit+0xf4>)
 8001db4:	695b      	ldr	r3, [r3, #20]
 8001db6:	4a27      	ldr	r2, [pc, #156]	; (8001e54 <HAL_ADC_MspInit+0xf4>)
 8001db8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dbc:	6153      	str	r3, [r2, #20]
 8001dbe:	4b25      	ldr	r3, [pc, #148]	; (8001e54 <HAL_ADC_MspInit+0xf4>)
 8001dc0:	695b      	ldr	r3, [r3, #20]
 8001dc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dc6:	60bb      	str	r3, [r7, #8]
 8001dc8:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> ADC1_IN6
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PA4     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dd6:	f107 0314 	add.w	r3, r7, #20
 8001dda:	4619      	mov	r1, r3
 8001ddc:	481e      	ldr	r0, [pc, #120]	; (8001e58 <HAL_ADC_MspInit+0xf8>)
 8001dde:	f001 fc3f 	bl	8003660 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 8001de2:	2313      	movs	r3, #19
 8001de4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001de6:	2303      	movs	r3, #3
 8001de8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dea:	2300      	movs	r3, #0
 8001dec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dee:	f107 0314 	add.w	r3, r7, #20
 8001df2:	4619      	mov	r1, r3
 8001df4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001df8:	f001 fc32 	bl	8003660 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001dfc:	4b17      	ldr	r3, [pc, #92]	; (8001e5c <HAL_ADC_MspInit+0xfc>)
 8001dfe:	4a18      	ldr	r2, [pc, #96]	; (8001e60 <HAL_ADC_MspInit+0x100>)
 8001e00:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e02:	4b16      	ldr	r3, [pc, #88]	; (8001e5c <HAL_ADC_MspInit+0xfc>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e08:	4b14      	ldr	r3, [pc, #80]	; (8001e5c <HAL_ADC_MspInit+0xfc>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001e0e:	4b13      	ldr	r3, [pc, #76]	; (8001e5c <HAL_ADC_MspInit+0xfc>)
 8001e10:	2280      	movs	r2, #128	; 0x80
 8001e12:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001e14:	4b11      	ldr	r3, [pc, #68]	; (8001e5c <HAL_ADC_MspInit+0xfc>)
 8001e16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e1a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001e1c:	4b0f      	ldr	r3, [pc, #60]	; (8001e5c <HAL_ADC_MspInit+0xfc>)
 8001e1e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e22:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001e24:	4b0d      	ldr	r3, [pc, #52]	; (8001e5c <HAL_ADC_MspInit+0xfc>)
 8001e26:	2220      	movs	r2, #32
 8001e28:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001e2a:	4b0c      	ldr	r3, [pc, #48]	; (8001e5c <HAL_ADC_MspInit+0xfc>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001e30:	480a      	ldr	r0, [pc, #40]	; (8001e5c <HAL_ADC_MspInit+0xfc>)
 8001e32:	f001 fa06 	bl	8003242 <HAL_DMA_Init>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d001      	beq.n	8001e40 <HAL_ADC_MspInit+0xe0>
    {
      Error_Handler();
 8001e3c:	f7ff ff66 	bl	8001d0c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	4a06      	ldr	r2, [pc, #24]	; (8001e5c <HAL_ADC_MspInit+0xfc>)
 8001e44:	639a      	str	r2, [r3, #56]	; 0x38
 8001e46:	4a05      	ldr	r2, [pc, #20]	; (8001e5c <HAL_ADC_MspInit+0xfc>)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001e4c:	bf00      	nop
 8001e4e:	3728      	adds	r7, #40	; 0x28
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	40021000 	.word	0x40021000
 8001e58:	48000800 	.word	0x48000800
 8001e5c:	200003bc 	.word	0x200003bc
 8001e60:	40020008 	.word	0x40020008

08001e64 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b08a      	sub	sp, #40	; 0x28
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e6c:	f107 0314 	add.w	r3, r7, #20
 8001e70:	2200      	movs	r2, #0
 8001e72:	601a      	str	r2, [r3, #0]
 8001e74:	605a      	str	r2, [r3, #4]
 8001e76:	609a      	str	r2, [r3, #8]
 8001e78:	60da      	str	r2, [r3, #12]
 8001e7a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a17      	ldr	r2, [pc, #92]	; (8001ee0 <HAL_I2C_MspInit+0x7c>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d128      	bne.n	8001ed8 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e86:	4b17      	ldr	r3, [pc, #92]	; (8001ee4 <HAL_I2C_MspInit+0x80>)
 8001e88:	695b      	ldr	r3, [r3, #20]
 8001e8a:	4a16      	ldr	r2, [pc, #88]	; (8001ee4 <HAL_I2C_MspInit+0x80>)
 8001e8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e90:	6153      	str	r3, [r2, #20]
 8001e92:	4b14      	ldr	r3, [pc, #80]	; (8001ee4 <HAL_I2C_MspInit+0x80>)
 8001e94:	695b      	ldr	r3, [r3, #20]
 8001e96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e9a:	613b      	str	r3, [r7, #16]
 8001e9c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001e9e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ea2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ea4:	2312      	movs	r3, #18
 8001ea6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001eac:	2303      	movs	r3, #3
 8001eae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001eb0:	2304      	movs	r3, #4
 8001eb2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eb4:	f107 0314 	add.w	r3, r7, #20
 8001eb8:	4619      	mov	r1, r3
 8001eba:	480b      	ldr	r0, [pc, #44]	; (8001ee8 <HAL_I2C_MspInit+0x84>)
 8001ebc:	f001 fbd0 	bl	8003660 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ec0:	4b08      	ldr	r3, [pc, #32]	; (8001ee4 <HAL_I2C_MspInit+0x80>)
 8001ec2:	69db      	ldr	r3, [r3, #28]
 8001ec4:	4a07      	ldr	r2, [pc, #28]	; (8001ee4 <HAL_I2C_MspInit+0x80>)
 8001ec6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001eca:	61d3      	str	r3, [r2, #28]
 8001ecc:	4b05      	ldr	r3, [pc, #20]	; (8001ee4 <HAL_I2C_MspInit+0x80>)
 8001ece:	69db      	ldr	r3, [r3, #28]
 8001ed0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ed4:	60fb      	str	r3, [r7, #12]
 8001ed6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001ed8:	bf00      	nop
 8001eda:	3728      	adds	r7, #40	; 0x28
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	40005400 	.word	0x40005400
 8001ee4:	40021000 	.word	0x40021000
 8001ee8:	48000400 	.word	0x48000400

08001eec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b084      	sub	sp, #16
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a0d      	ldr	r2, [pc, #52]	; (8001f30 <HAL_TIM_Base_MspInit+0x44>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d113      	bne.n	8001f26 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001efe:	4b0d      	ldr	r3, [pc, #52]	; (8001f34 <HAL_TIM_Base_MspInit+0x48>)
 8001f00:	699b      	ldr	r3, [r3, #24]
 8001f02:	4a0c      	ldr	r2, [pc, #48]	; (8001f34 <HAL_TIM_Base_MspInit+0x48>)
 8001f04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f08:	6193      	str	r3, [r2, #24]
 8001f0a:	4b0a      	ldr	r3, [pc, #40]	; (8001f34 <HAL_TIM_Base_MspInit+0x48>)
 8001f0c:	699b      	ldr	r3, [r3, #24]
 8001f0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f12:	60fb      	str	r3, [r7, #12]
 8001f14:	68fb      	ldr	r3, [r7, #12]
    /* TIM17 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8001f16:	2200      	movs	r2, #0
 8001f18:	2100      	movs	r1, #0
 8001f1a:	201a      	movs	r0, #26
 8001f1c:	f001 f95b 	bl	80031d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8001f20:	201a      	movs	r0, #26
 8001f22:	f001 f974 	bl	800320e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8001f26:	bf00      	nop
 8001f28:	3710      	adds	r7, #16
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	40014800 	.word	0x40014800
 8001f34:	40021000 	.word	0x40021000

08001f38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b08c      	sub	sp, #48	; 0x30
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f40:	f107 031c 	add.w	r3, r7, #28
 8001f44:	2200      	movs	r2, #0
 8001f46:	601a      	str	r2, [r3, #0]
 8001f48:	605a      	str	r2, [r3, #4]
 8001f4a:	609a      	str	r2, [r3, #8]
 8001f4c:	60da      	str	r2, [r3, #12]
 8001f4e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a32      	ldr	r2, [pc, #200]	; (8002020 <HAL_UART_MspInit+0xe8>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d128      	bne.n	8001fac <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f5a:	4b32      	ldr	r3, [pc, #200]	; (8002024 <HAL_UART_MspInit+0xec>)
 8001f5c:	699b      	ldr	r3, [r3, #24]
 8001f5e:	4a31      	ldr	r2, [pc, #196]	; (8002024 <HAL_UART_MspInit+0xec>)
 8001f60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f64:	6193      	str	r3, [r2, #24]
 8001f66:	4b2f      	ldr	r3, [pc, #188]	; (8002024 <HAL_UART_MspInit+0xec>)
 8001f68:	699b      	ldr	r3, [r3, #24]
 8001f6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f6e:	61bb      	str	r3, [r7, #24]
 8001f70:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f72:	4b2c      	ldr	r3, [pc, #176]	; (8002024 <HAL_UART_MspInit+0xec>)
 8001f74:	695b      	ldr	r3, [r3, #20]
 8001f76:	4a2b      	ldr	r2, [pc, #172]	; (8002024 <HAL_UART_MspInit+0xec>)
 8001f78:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001f7c:	6153      	str	r3, [r2, #20]
 8001f7e:	4b29      	ldr	r3, [pc, #164]	; (8002024 <HAL_UART_MspInit+0xec>)
 8001f80:	695b      	ldr	r3, [r3, #20]
 8001f82:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f86:	617b      	str	r3, [r7, #20]
 8001f88:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001f8a:	2330      	movs	r3, #48	; 0x30
 8001f8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f8e:	2302      	movs	r3, #2
 8001f90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f92:	2300      	movs	r3, #0
 8001f94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f96:	2303      	movs	r3, #3
 8001f98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001f9a:	2307      	movs	r3, #7
 8001f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f9e:	f107 031c 	add.w	r3, r7, #28
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	4820      	ldr	r0, [pc, #128]	; (8002028 <HAL_UART_MspInit+0xf0>)
 8001fa6:	f001 fb5b 	bl	8003660 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001faa:	e035      	b.n	8002018 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART3)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a1e      	ldr	r2, [pc, #120]	; (800202c <HAL_UART_MspInit+0xf4>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d130      	bne.n	8002018 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001fb6:	4b1b      	ldr	r3, [pc, #108]	; (8002024 <HAL_UART_MspInit+0xec>)
 8001fb8:	69db      	ldr	r3, [r3, #28]
 8001fba:	4a1a      	ldr	r2, [pc, #104]	; (8002024 <HAL_UART_MspInit+0xec>)
 8001fbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fc0:	61d3      	str	r3, [r2, #28]
 8001fc2:	4b18      	ldr	r3, [pc, #96]	; (8002024 <HAL_UART_MspInit+0xec>)
 8001fc4:	69db      	ldr	r3, [r3, #28]
 8001fc6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fca:	613b      	str	r3, [r7, #16]
 8001fcc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fce:	4b15      	ldr	r3, [pc, #84]	; (8002024 <HAL_UART_MspInit+0xec>)
 8001fd0:	695b      	ldr	r3, [r3, #20]
 8001fd2:	4a14      	ldr	r2, [pc, #80]	; (8002024 <HAL_UART_MspInit+0xec>)
 8001fd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fd8:	6153      	str	r3, [r2, #20]
 8001fda:	4b12      	ldr	r3, [pc, #72]	; (8002024 <HAL_UART_MspInit+0xec>)
 8001fdc:	695b      	ldr	r3, [r3, #20]
 8001fde:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fe2:	60fb      	str	r3, [r7, #12]
 8001fe4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001fe6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001fea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fec:	2302      	movs	r3, #2
 8001fee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001ff8:	2307      	movs	r3, #7
 8001ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ffc:	f107 031c 	add.w	r3, r7, #28
 8002000:	4619      	mov	r1, r3
 8002002:	480b      	ldr	r0, [pc, #44]	; (8002030 <HAL_UART_MspInit+0xf8>)
 8002004:	f001 fb2c 	bl	8003660 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002008:	2200      	movs	r2, #0
 800200a:	2100      	movs	r1, #0
 800200c:	2027      	movs	r0, #39	; 0x27
 800200e:	f001 f8e2 	bl	80031d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002012:	2027      	movs	r0, #39	; 0x27
 8002014:	f001 f8fb 	bl	800320e <HAL_NVIC_EnableIRQ>
}
 8002018:	bf00      	nop
 800201a:	3730      	adds	r7, #48	; 0x30
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	40013800 	.word	0x40013800
 8002024:	40021000 	.word	0x40021000
 8002028:	48000800 	.word	0x48000800
 800202c:	40004800 	.word	0x40004800
 8002030:	48000400 	.word	0x48000400

08002034 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002038:	e7fe      	b.n	8002038 <NMI_Handler+0x4>

0800203a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800203a:	b480      	push	{r7}
 800203c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800203e:	e7fe      	b.n	800203e <HardFault_Handler+0x4>

08002040 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002044:	e7fe      	b.n	8002044 <MemManage_Handler+0x4>

08002046 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002046:	b480      	push	{r7}
 8002048:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800204a:	e7fe      	b.n	800204a <BusFault_Handler+0x4>

0800204c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002050:	e7fe      	b.n	8002050 <UsageFault_Handler+0x4>

08002052 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002052:	b480      	push	{r7}
 8002054:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002056:	bf00      	nop
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr

08002060 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002064:	bf00      	nop
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr

0800206e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800206e:	b480      	push	{r7}
 8002070:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002072:	bf00      	nop
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr

0800207c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002080:	f000 f968 	bl	8002354 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002084:	bf00      	nop
 8002086:	bd80      	pop	{r7, pc}

08002088 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800208c:	4802      	ldr	r0, [pc, #8]	; (8002098 <DMA1_Channel1_IRQHandler+0x10>)
 800208e:	f001 f9f5 	bl	800347c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002092:	bf00      	nop
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	200003bc 	.word	0x200003bc

0800209c <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger, commutation and TIM17 interrupts.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 80020a0:	4802      	ldr	r0, [pc, #8]	; (80020ac <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 80020a2:	f003 fa59 	bl	8005558 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 80020a6:	bf00      	nop
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	20000454 	.word	0x20000454

080020b0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80020b4:	4802      	ldr	r0, [pc, #8]	; (80020c0 <USART3_IRQHandler+0x10>)
 80020b6:	f003 fd3f 	bl	8005b38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80020ba:	bf00      	nop
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	20000528 	.word	0x20000528

080020c4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
  return 1;
 80020c8:	2301      	movs	r3, #1
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr

080020d4 <_kill>:

int _kill(int pid, int sig)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80020de:	f005 ff23 	bl	8007f28 <__errno>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2216      	movs	r2, #22
 80020e6:	601a      	str	r2, [r3, #0]
  return -1;
 80020e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3708      	adds	r7, #8
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}

080020f4 <_exit>:

void _exit (int status)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80020fc:	f04f 31ff 	mov.w	r1, #4294967295
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	f7ff ffe7 	bl	80020d4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002106:	e7fe      	b.n	8002106 <_exit+0x12>

08002108 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b086      	sub	sp, #24
 800210c:	af00      	add	r7, sp, #0
 800210e:	60f8      	str	r0, [r7, #12]
 8002110:	60b9      	str	r1, [r7, #8]
 8002112:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002114:	2300      	movs	r3, #0
 8002116:	617b      	str	r3, [r7, #20]
 8002118:	e00a      	b.n	8002130 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800211a:	f3af 8000 	nop.w
 800211e:	4601      	mov	r1, r0
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	1c5a      	adds	r2, r3, #1
 8002124:	60ba      	str	r2, [r7, #8]
 8002126:	b2ca      	uxtb	r2, r1
 8002128:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	3301      	adds	r3, #1
 800212e:	617b      	str	r3, [r7, #20]
 8002130:	697a      	ldr	r2, [r7, #20]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	429a      	cmp	r2, r3
 8002136:	dbf0      	blt.n	800211a <_read+0x12>
  }

  return len;
 8002138:	687b      	ldr	r3, [r7, #4]
}
 800213a:	4618      	mov	r0, r3
 800213c:	3718      	adds	r7, #24
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}

08002142 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002142:	b580      	push	{r7, lr}
 8002144:	b086      	sub	sp, #24
 8002146:	af00      	add	r7, sp, #0
 8002148:	60f8      	str	r0, [r7, #12]
 800214a:	60b9      	str	r1, [r7, #8]
 800214c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800214e:	2300      	movs	r3, #0
 8002150:	617b      	str	r3, [r7, #20]
 8002152:	e009      	b.n	8002168 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	1c5a      	adds	r2, r3, #1
 8002158:	60ba      	str	r2, [r7, #8]
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	4618      	mov	r0, r3
 800215e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	3301      	adds	r3, #1
 8002166:	617b      	str	r3, [r7, #20]
 8002168:	697a      	ldr	r2, [r7, #20]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	429a      	cmp	r2, r3
 800216e:	dbf1      	blt.n	8002154 <_write+0x12>
  }
  return len;
 8002170:	687b      	ldr	r3, [r7, #4]
}
 8002172:	4618      	mov	r0, r3
 8002174:	3718      	adds	r7, #24
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}

0800217a <_close>:

int _close(int file)
{
 800217a:	b480      	push	{r7}
 800217c:	b083      	sub	sp, #12
 800217e:	af00      	add	r7, sp, #0
 8002180:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002182:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002186:	4618      	mov	r0, r3
 8002188:	370c      	adds	r7, #12
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr

08002192 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002192:	b480      	push	{r7}
 8002194:	b083      	sub	sp, #12
 8002196:	af00      	add	r7, sp, #0
 8002198:	6078      	str	r0, [r7, #4]
 800219a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021a2:	605a      	str	r2, [r3, #4]
  return 0;
 80021a4:	2300      	movs	r3, #0
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	370c      	adds	r7, #12
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr

080021b2 <_isatty>:

int _isatty(int file)
{
 80021b2:	b480      	push	{r7}
 80021b4:	b083      	sub	sp, #12
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80021ba:	2301      	movs	r3, #1
}
 80021bc:	4618      	mov	r0, r3
 80021be:	370c      	adds	r7, #12
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr

080021c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b085      	sub	sp, #20
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	60f8      	str	r0, [r7, #12]
 80021d0:	60b9      	str	r1, [r7, #8]
 80021d2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80021d4:	2300      	movs	r3, #0
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3714      	adds	r7, #20
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr
	...

080021e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b086      	sub	sp, #24
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021ec:	4a14      	ldr	r2, [pc, #80]	; (8002240 <_sbrk+0x5c>)
 80021ee:	4b15      	ldr	r3, [pc, #84]	; (8002244 <_sbrk+0x60>)
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021f8:	4b13      	ldr	r3, [pc, #76]	; (8002248 <_sbrk+0x64>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d102      	bne.n	8002206 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002200:	4b11      	ldr	r3, [pc, #68]	; (8002248 <_sbrk+0x64>)
 8002202:	4a12      	ldr	r2, [pc, #72]	; (800224c <_sbrk+0x68>)
 8002204:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002206:	4b10      	ldr	r3, [pc, #64]	; (8002248 <_sbrk+0x64>)
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4413      	add	r3, r2
 800220e:	693a      	ldr	r2, [r7, #16]
 8002210:	429a      	cmp	r2, r3
 8002212:	d207      	bcs.n	8002224 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002214:	f005 fe88 	bl	8007f28 <__errno>
 8002218:	4603      	mov	r3, r0
 800221a:	220c      	movs	r2, #12
 800221c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800221e:	f04f 33ff 	mov.w	r3, #4294967295
 8002222:	e009      	b.n	8002238 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002224:	4b08      	ldr	r3, [pc, #32]	; (8002248 <_sbrk+0x64>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800222a:	4b07      	ldr	r3, [pc, #28]	; (8002248 <_sbrk+0x64>)
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4413      	add	r3, r2
 8002232:	4a05      	ldr	r2, [pc, #20]	; (8002248 <_sbrk+0x64>)
 8002234:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002236:	68fb      	ldr	r3, [r7, #12]
}
 8002238:	4618      	mov	r0, r3
 800223a:	3718      	adds	r7, #24
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	20004000 	.word	0x20004000
 8002244:	00000400 	.word	0x00000400
 8002248:	200005c4 	.word	0x200005c4
 800224c:	20000718 	.word	0x20000718

08002250 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002254:	4b06      	ldr	r3, [pc, #24]	; (8002270 <SystemInit+0x20>)
 8002256:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800225a:	4a05      	ldr	r2, [pc, #20]	; (8002270 <SystemInit+0x20>)
 800225c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002260:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002264:	bf00      	nop
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	e000ed00 	.word	0xe000ed00

08002274 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002274:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022ac <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002278:	f7ff ffea 	bl	8002250 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800227c:	480c      	ldr	r0, [pc, #48]	; (80022b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800227e:	490d      	ldr	r1, [pc, #52]	; (80022b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002280:	4a0d      	ldr	r2, [pc, #52]	; (80022b8 <LoopForever+0xe>)
  movs r3, #0
 8002282:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002284:	e002      	b.n	800228c <LoopCopyDataInit>

08002286 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002286:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002288:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800228a:	3304      	adds	r3, #4

0800228c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800228c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800228e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002290:	d3f9      	bcc.n	8002286 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002292:	4a0a      	ldr	r2, [pc, #40]	; (80022bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8002294:	4c0a      	ldr	r4, [pc, #40]	; (80022c0 <LoopForever+0x16>)
  movs r3, #0
 8002296:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002298:	e001      	b.n	800229e <LoopFillZerobss>

0800229a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800229a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800229c:	3204      	adds	r2, #4

0800229e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800229e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022a0:	d3fb      	bcc.n	800229a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80022a2:	f005 fe47 	bl	8007f34 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80022a6:	f7ff f8d7 	bl	8001458 <main>

080022aa <LoopForever>:

LoopForever:
    b LoopForever
 80022aa:	e7fe      	b.n	80022aa <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80022ac:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80022b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022b4:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 80022b8:	0800bc10 	.word	0x0800bc10
  ldr r2, =_sbss
 80022bc:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 80022c0:	20000718 	.word	0x20000718

080022c4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80022c4:	e7fe      	b.n	80022c4 <ADC1_IRQHandler>
	...

080022c8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022cc:	4b08      	ldr	r3, [pc, #32]	; (80022f0 <HAL_Init+0x28>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a07      	ldr	r2, [pc, #28]	; (80022f0 <HAL_Init+0x28>)
 80022d2:	f043 0310 	orr.w	r3, r3, #16
 80022d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022d8:	2003      	movs	r0, #3
 80022da:	f000 ff71 	bl	80031c0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022de:	2000      	movs	r0, #0
 80022e0:	f000 f808 	bl	80022f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022e4:	f7ff fd18 	bl	8001d18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022e8:	2300      	movs	r3, #0
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	40022000 	.word	0x40022000

080022f4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022fc:	4b12      	ldr	r3, [pc, #72]	; (8002348 <HAL_InitTick+0x54>)
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	4b12      	ldr	r3, [pc, #72]	; (800234c <HAL_InitTick+0x58>)
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	4619      	mov	r1, r3
 8002306:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800230a:	fbb3 f3f1 	udiv	r3, r3, r1
 800230e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002312:	4618      	mov	r0, r3
 8002314:	f000 ff89 	bl	800322a <HAL_SYSTICK_Config>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d001      	beq.n	8002322 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e00e      	b.n	8002340 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2b0f      	cmp	r3, #15
 8002326:	d80a      	bhi.n	800233e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002328:	2200      	movs	r2, #0
 800232a:	6879      	ldr	r1, [r7, #4]
 800232c:	f04f 30ff 	mov.w	r0, #4294967295
 8002330:	f000 ff51 	bl	80031d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002334:	4a06      	ldr	r2, [pc, #24]	; (8002350 <HAL_InitTick+0x5c>)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800233a:	2300      	movs	r3, #0
 800233c:	e000      	b.n	8002340 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
}
 8002340:	4618      	mov	r0, r3
 8002342:	3708      	adds	r7, #8
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}
 8002348:	2000002c 	.word	0x2000002c
 800234c:	20000034 	.word	0x20000034
 8002350:	20000030 	.word	0x20000030

08002354 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002354:	b480      	push	{r7}
 8002356:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002358:	4b06      	ldr	r3, [pc, #24]	; (8002374 <HAL_IncTick+0x20>)
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	461a      	mov	r2, r3
 800235e:	4b06      	ldr	r3, [pc, #24]	; (8002378 <HAL_IncTick+0x24>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4413      	add	r3, r2
 8002364:	4a04      	ldr	r2, [pc, #16]	; (8002378 <HAL_IncTick+0x24>)
 8002366:	6013      	str	r3, [r2, #0]
}
 8002368:	bf00      	nop
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr
 8002372:	bf00      	nop
 8002374:	20000034 	.word	0x20000034
 8002378:	200005c8 	.word	0x200005c8

0800237c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800237c:	b480      	push	{r7}
 800237e:	af00      	add	r7, sp, #0
  return uwTick;  
 8002380:	4b03      	ldr	r3, [pc, #12]	; (8002390 <HAL_GetTick+0x14>)
 8002382:	681b      	ldr	r3, [r3, #0]
}
 8002384:	4618      	mov	r0, r3
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop
 8002390:	200005c8 	.word	0x200005c8

08002394 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b084      	sub	sp, #16
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800239c:	f7ff ffee 	bl	800237c <HAL_GetTick>
 80023a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023ac:	d005      	beq.n	80023ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023ae:	4b0a      	ldr	r3, [pc, #40]	; (80023d8 <HAL_Delay+0x44>)
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	461a      	mov	r2, r3
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	4413      	add	r3, r2
 80023b8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80023ba:	bf00      	nop
 80023bc:	f7ff ffde 	bl	800237c <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	68fa      	ldr	r2, [r7, #12]
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d8f7      	bhi.n	80023bc <HAL_Delay+0x28>
  {
  }
}
 80023cc:	bf00      	nop
 80023ce:	bf00      	nop
 80023d0:	3710      	adds	r7, #16
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	20000034 	.word	0x20000034

080023dc <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80023e4:	bf00      	nop
 80023e6:	370c      	adds	r7, #12
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr

080023f0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80023f8:	bf00      	nop
 80023fa:	370c      	adds	r7, #12
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr

08002404 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800240c:	bf00      	nop
 800240e:	370c      	adds	r7, #12
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr

08002418 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b09a      	sub	sp, #104	; 0x68
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002420:	2300      	movs	r3, #0
 8002422:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8002426:	2300      	movs	r3, #0
 8002428:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 800242a:	2300      	movs	r3, #0
 800242c:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d101      	bne.n	8002438 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e169      	b.n	800270c <HAL_ADC_Init+0x2f4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	691b      	ldr	r3, [r3, #16]
 800243c:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002442:	f003 0310 	and.w	r3, r3, #16
 8002446:	2b00      	cmp	r3, #0
 8002448:	d176      	bne.n	8002538 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244e:	2b00      	cmp	r3, #0
 8002450:	d152      	bne.n	80024f8 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2200      	movs	r2, #0
 8002456:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2200      	movs	r2, #0
 800245c:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2200      	movs	r2, #0
 8002462:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2200      	movs	r2, #0
 8002468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	f7ff fc77 	bl	8001d60 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800247c:	2b00      	cmp	r3, #0
 800247e:	d13b      	bne.n	80024f8 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	f000 fd67 	bl	8002f54 <ADC_Disable>
 8002486:	4603      	mov	r3, r0
 8002488:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002490:	f003 0310 	and.w	r3, r3, #16
 8002494:	2b00      	cmp	r3, #0
 8002496:	d12f      	bne.n	80024f8 <HAL_ADC_Init+0xe0>
 8002498:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800249c:	2b00      	cmp	r3, #0
 800249e:	d12b      	bne.n	80024f8 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80024a8:	f023 0302 	bic.w	r3, r3, #2
 80024ac:	f043 0202 	orr.w	r2, r3, #2
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	689a      	ldr	r2, [r3, #8]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80024c2:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	689a      	ldr	r2, [r3, #8]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80024d2:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80024d4:	4b8f      	ldr	r3, [pc, #572]	; (8002714 <HAL_ADC_Init+0x2fc>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a8f      	ldr	r2, [pc, #572]	; (8002718 <HAL_ADC_Init+0x300>)
 80024da:	fba2 2303 	umull	r2, r3, r2, r3
 80024de:	0c9a      	lsrs	r2, r3, #18
 80024e0:	4613      	mov	r3, r2
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	4413      	add	r3, r2
 80024e6:	005b      	lsls	r3, r3, #1
 80024e8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80024ea:	e002      	b.n	80024f2 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	3b01      	subs	r3, #1
 80024f0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d1f9      	bne.n	80024ec <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d007      	beq.n	8002516 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002510:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002514:	d110      	bne.n	8002538 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251a:	f023 0312 	bic.w	r3, r3, #18
 800251e:	f043 0210 	orr.w	r2, r3, #16
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800252a:	f043 0201 	orr.w	r2, r3, #1
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253c:	f003 0310 	and.w	r3, r3, #16
 8002540:	2b00      	cmp	r3, #0
 8002542:	f040 80d6 	bne.w	80026f2 <HAL_ADC_Init+0x2da>
 8002546:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800254a:	2b00      	cmp	r3, #0
 800254c:	f040 80d1 	bne.w	80026f2 <HAL_ADC_Init+0x2da>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800255a:	2b00      	cmp	r3, #0
 800255c:	f040 80c9 	bne.w	80026f2 <HAL_ADC_Init+0x2da>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002564:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002568:	f043 0202 	orr.w	r2, r3, #2
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002570:	4b6a      	ldr	r3, [pc, #424]	; (800271c <HAL_ADC_Init+0x304>)
 8002572:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002574:	2300      	movs	r3, #0
 8002576:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	f003 0303 	and.w	r3, r3, #3
 8002582:	2b01      	cmp	r3, #1
 8002584:	d108      	bne.n	8002598 <HAL_ADC_Init+0x180>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0301 	and.w	r3, r3, #1
 8002590:	2b01      	cmp	r3, #1
 8002592:	d101      	bne.n	8002598 <HAL_ADC_Init+0x180>
 8002594:	2301      	movs	r3, #1
 8002596:	e000      	b.n	800259a <HAL_ADC_Init+0x182>
 8002598:	2300      	movs	r3, #0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d11c      	bne.n	80025d8 <HAL_ADC_Init+0x1c0>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800259e:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d010      	beq.n	80025c6 <HAL_ADC_Init+0x1ae>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	f003 0303 	and.w	r3, r3, #3
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d107      	bne.n	80025c0 <HAL_ADC_Init+0x1a8>
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 0301 	and.w	r3, r3, #1
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d101      	bne.n	80025c0 <HAL_ADC_Init+0x1a8>
 80025bc:	2301      	movs	r3, #1
 80025be:	e000      	b.n	80025c2 <HAL_ADC_Init+0x1aa>
 80025c0:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d108      	bne.n	80025d8 <HAL_ADC_Init+0x1c0>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80025c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	431a      	orrs	r2, r3
 80025d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025d6:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	7e5b      	ldrb	r3, [r3, #25]
 80025dc:	035b      	lsls	r3, r3, #13
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80025e2:	2a01      	cmp	r2, #1
 80025e4:	d002      	beq.n	80025ec <HAL_ADC_Init+0x1d4>
 80025e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80025ea:	e000      	b.n	80025ee <HAL_ADC_Init+0x1d6>
 80025ec:	2200      	movs	r2, #0
 80025ee:	431a      	orrs	r2, r3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	431a      	orrs	r2, r3
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80025fe:	4313      	orrs	r3, r2
 8002600:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002608:	2b01      	cmp	r3, #1
 800260a:	d11b      	bne.n	8002644 <HAL_ADC_Init+0x22c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	7e5b      	ldrb	r3, [r3, #25]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d109      	bne.n	8002628 <HAL_ADC_Init+0x210>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002618:	3b01      	subs	r3, #1
 800261a:	045a      	lsls	r2, r3, #17
 800261c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800261e:	4313      	orrs	r3, r2
 8002620:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002624:	663b      	str	r3, [r7, #96]	; 0x60
 8002626:	e00d      	b.n	8002644 <HAL_ADC_Init+0x22c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262c:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002630:	f043 0220 	orr.w	r2, r3, #32
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800263c:	f043 0201 	orr.w	r2, r3, #1
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002648:	2b01      	cmp	r3, #1
 800264a:	d007      	beq.n	800265c <HAL_ADC_Init+0x244>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002654:	4313      	orrs	r3, r2
 8002656:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002658:	4313      	orrs	r3, r2
 800265a:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	f003 030c 	and.w	r3, r3, #12
 8002666:	2b00      	cmp	r3, #0
 8002668:	d114      	bne.n	8002694 <HAL_ADC_Init+0x27c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	6812      	ldr	r2, [r2, #0]
 8002674:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002678:	f023 0302 	bic.w	r3, r3, #2
 800267c:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	7e1b      	ldrb	r3, [r3, #24]
 8002682:	039a      	lsls	r2, r3, #14
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800268a:	005b      	lsls	r3, r3, #1
 800268c:	4313      	orrs	r3, r2
 800268e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002690:	4313      	orrs	r3, r2
 8002692:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	68da      	ldr	r2, [r3, #12]
 800269a:	4b21      	ldr	r3, [pc, #132]	; (8002720 <HAL_ADC_Init+0x308>)
 800269c:	4013      	ands	r3, r2
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	6812      	ldr	r2, [r2, #0]
 80026a2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80026a4:	430b      	orrs	r3, r1
 80026a6:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	691b      	ldr	r3, [r3, #16]
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d10c      	bne.n	80026ca <HAL_ADC_Init+0x2b2>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b6:	f023 010f 	bic.w	r1, r3, #15
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	69db      	ldr	r3, [r3, #28]
 80026be:	1e5a      	subs	r2, r3, #1
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	430a      	orrs	r2, r1
 80026c6:	631a      	str	r2, [r3, #48]	; 0x30
 80026c8:	e007      	b.n	80026da <HAL_ADC_Init+0x2c2>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f022 020f 	bic.w	r2, r2, #15
 80026d8:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2200      	movs	r2, #0
 80026de:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e4:	f023 0303 	bic.w	r3, r3, #3
 80026e8:	f043 0201 	orr.w	r2, r3, #1
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	641a      	str	r2, [r3, #64]	; 0x40
 80026f0:	e00a      	b.n	8002708 <HAL_ADC_Init+0x2f0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f6:	f023 0312 	bic.w	r3, r3, #18
 80026fa:	f043 0210 	orr.w	r2, r3, #16
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8002702:	2301      	movs	r3, #1
 8002704:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8002708:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800270c:	4618      	mov	r0, r3
 800270e:	3768      	adds	r7, #104	; 0x68
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}
 8002714:	2000002c 	.word	0x2000002c
 8002718:	431bde83 	.word	0x431bde83
 800271c:	50000300 	.word	0x50000300
 8002720:	fff0c007 	.word	0xfff0c007

08002724 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b086      	sub	sp, #24
 8002728:	af00      	add	r7, sp, #0
 800272a:	60f8      	str	r0, [r7, #12]
 800272c:	60b9      	str	r1, [r7, #8]
 800272e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002730:	2300      	movs	r3, #0
 8002732:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	f003 0304 	and.w	r3, r3, #4
 800273e:	2b00      	cmp	r3, #0
 8002740:	d17e      	bne.n	8002840 <HAL_ADC_Start_DMA+0x11c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002748:	2b01      	cmp	r3, #1
 800274a:	d101      	bne.n	8002750 <HAL_ADC_Start_DMA+0x2c>
 800274c:	2302      	movs	r3, #2
 800274e:	e07a      	b.n	8002846 <HAL_ADC_Start_DMA+0x122>
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2201      	movs	r2, #1
 8002754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002758:	68f8      	ldr	r0, [r7, #12]
 800275a:	f000 fb97 	bl	8002e8c <ADC_Enable>
 800275e:	4603      	mov	r3, r0
 8002760:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002762:	7dfb      	ldrb	r3, [r7, #23]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d166      	bne.n	8002836 <HAL_ADC_Start_DMA+0x112>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002770:	f023 0301 	bic.w	r3, r3, #1
 8002774:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	641a      	str	r2, [r3, #64]	; 0x40
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002780:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	68db      	ldr	r3, [r3, #12]
 800278e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d007      	beq.n	80027a6 <HAL_ADC_Start_DMA+0x82>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800279e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	641a      	str	r2, [r3, #64]	; 0x40
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027b2:	d106      	bne.n	80027c2 <HAL_ADC_Start_DMA+0x9e>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b8:	f023 0206 	bic.w	r2, r3, #6
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	645a      	str	r2, [r3, #68]	; 0x44
 80027c0:	e002      	b.n	80027c8 <HAL_ADC_Start_DMA+0xa4>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2200      	movs	r2, #0
 80027c6:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2200      	movs	r2, #0
 80027cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027d4:	4a1e      	ldr	r2, [pc, #120]	; (8002850 <HAL_ADC_Start_DMA+0x12c>)
 80027d6:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027dc:	4a1d      	ldr	r2, [pc, #116]	; (8002854 <HAL_ADC_Start_DMA+0x130>)
 80027de:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027e4:	4a1c      	ldr	r2, [pc, #112]	; (8002858 <HAL_ADC_Start_DMA+0x134>)
 80027e6:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	221c      	movs	r2, #28
 80027ee:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	685a      	ldr	r2, [r3, #4]
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f042 0210 	orr.w	r2, r2, #16
 80027fe:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	68da      	ldr	r2, [r3, #12]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f042 0201 	orr.w	r2, r2, #1
 800280e:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	3340      	adds	r3, #64	; 0x40
 800281a:	4619      	mov	r1, r3
 800281c:	68ba      	ldr	r2, [r7, #8]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	f000 fd56 	bl	80032d0 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	689a      	ldr	r2, [r3, #8]
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f042 0204 	orr.w	r2, r2, #4
 8002832:	609a      	str	r2, [r3, #8]
 8002834:	e006      	b.n	8002844 <HAL_ADC_Start_DMA+0x120>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2200      	movs	r2, #0
 800283a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800283e:	e001      	b.n	8002844 <HAL_ADC_Start_DMA+0x120>
      __HAL_UNLOCK(hadc);
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002840:	2302      	movs	r3, #2
 8002842:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002844:	7dfb      	ldrb	r3, [r7, #23]
}
 8002846:	4618      	mov	r0, r3
 8002848:	3718      	adds	r7, #24
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	08002dc1 	.word	0x08002dc1
 8002854:	08002e3b 	.word	0x08002e3b
 8002858:	08002e57 	.word	0x08002e57

0800285c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800285c:	b480      	push	{r7}
 800285e:	b09b      	sub	sp, #108	; 0x6c
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
 8002864:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002866:	2300      	movs	r3, #0
 8002868:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 800286c:	2300      	movs	r3, #0
 800286e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002876:	2b01      	cmp	r3, #1
 8002878:	d101      	bne.n	800287e <HAL_ADC_ConfigChannel+0x22>
 800287a:	2302      	movs	r3, #2
 800287c:	e295      	b.n	8002daa <HAL_ADC_ConfigChannel+0x54e>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2201      	movs	r2, #1
 8002882:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	f003 0304 	and.w	r3, r3, #4
 8002890:	2b00      	cmp	r3, #0
 8002892:	f040 8279 	bne.w	8002d88 <HAL_ADC_ConfigChannel+0x52c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	2b04      	cmp	r3, #4
 800289c:	d81c      	bhi.n	80028d8 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	685a      	ldr	r2, [r3, #4]
 80028a8:	4613      	mov	r3, r2
 80028aa:	005b      	lsls	r3, r3, #1
 80028ac:	4413      	add	r3, r2
 80028ae:	005b      	lsls	r3, r3, #1
 80028b0:	461a      	mov	r2, r3
 80028b2:	231f      	movs	r3, #31
 80028b4:	4093      	lsls	r3, r2
 80028b6:	43db      	mvns	r3, r3
 80028b8:	4019      	ands	r1, r3
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	6818      	ldr	r0, [r3, #0]
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	685a      	ldr	r2, [r3, #4]
 80028c2:	4613      	mov	r3, r2
 80028c4:	005b      	lsls	r3, r3, #1
 80028c6:	4413      	add	r3, r2
 80028c8:	005b      	lsls	r3, r3, #1
 80028ca:	fa00 f203 	lsl.w	r2, r0, r3
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	430a      	orrs	r2, r1
 80028d4:	631a      	str	r2, [r3, #48]	; 0x30
 80028d6:	e063      	b.n	80029a0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	2b09      	cmp	r3, #9
 80028de:	d81e      	bhi.n	800291e <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	685a      	ldr	r2, [r3, #4]
 80028ea:	4613      	mov	r3, r2
 80028ec:	005b      	lsls	r3, r3, #1
 80028ee:	4413      	add	r3, r2
 80028f0:	005b      	lsls	r3, r3, #1
 80028f2:	3b1e      	subs	r3, #30
 80028f4:	221f      	movs	r2, #31
 80028f6:	fa02 f303 	lsl.w	r3, r2, r3
 80028fa:	43db      	mvns	r3, r3
 80028fc:	4019      	ands	r1, r3
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	6818      	ldr	r0, [r3, #0]
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	685a      	ldr	r2, [r3, #4]
 8002906:	4613      	mov	r3, r2
 8002908:	005b      	lsls	r3, r3, #1
 800290a:	4413      	add	r3, r2
 800290c:	005b      	lsls	r3, r3, #1
 800290e:	3b1e      	subs	r3, #30
 8002910:	fa00 f203 	lsl.w	r2, r0, r3
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	430a      	orrs	r2, r1
 800291a:	635a      	str	r2, [r3, #52]	; 0x34
 800291c:	e040      	b.n	80029a0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	2b0e      	cmp	r3, #14
 8002924:	d81e      	bhi.n	8002964 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	685a      	ldr	r2, [r3, #4]
 8002930:	4613      	mov	r3, r2
 8002932:	005b      	lsls	r3, r3, #1
 8002934:	4413      	add	r3, r2
 8002936:	005b      	lsls	r3, r3, #1
 8002938:	3b3c      	subs	r3, #60	; 0x3c
 800293a:	221f      	movs	r2, #31
 800293c:	fa02 f303 	lsl.w	r3, r2, r3
 8002940:	43db      	mvns	r3, r3
 8002942:	4019      	ands	r1, r3
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	6818      	ldr	r0, [r3, #0]
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	685a      	ldr	r2, [r3, #4]
 800294c:	4613      	mov	r3, r2
 800294e:	005b      	lsls	r3, r3, #1
 8002950:	4413      	add	r3, r2
 8002952:	005b      	lsls	r3, r3, #1
 8002954:	3b3c      	subs	r3, #60	; 0x3c
 8002956:	fa00 f203 	lsl.w	r2, r0, r3
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	430a      	orrs	r2, r1
 8002960:	639a      	str	r2, [r3, #56]	; 0x38
 8002962:	e01d      	b.n	80029a0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	685a      	ldr	r2, [r3, #4]
 800296e:	4613      	mov	r3, r2
 8002970:	005b      	lsls	r3, r3, #1
 8002972:	4413      	add	r3, r2
 8002974:	005b      	lsls	r3, r3, #1
 8002976:	3b5a      	subs	r3, #90	; 0x5a
 8002978:	221f      	movs	r2, #31
 800297a:	fa02 f303 	lsl.w	r3, r2, r3
 800297e:	43db      	mvns	r3, r3
 8002980:	4019      	ands	r1, r3
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	6818      	ldr	r0, [r3, #0]
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	685a      	ldr	r2, [r3, #4]
 800298a:	4613      	mov	r3, r2
 800298c:	005b      	lsls	r3, r3, #1
 800298e:	4413      	add	r3, r2
 8002990:	005b      	lsls	r3, r3, #1
 8002992:	3b5a      	subs	r3, #90	; 0x5a
 8002994:	fa00 f203 	lsl.w	r2, r0, r3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	430a      	orrs	r2, r1
 800299e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	f003 030c 	and.w	r3, r3, #12
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	f040 80e5 	bne.w	8002b7a <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	2b09      	cmp	r3, #9
 80029b6:	d91c      	bls.n	80029f2 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	6999      	ldr	r1, [r3, #24]
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	4613      	mov	r3, r2
 80029c4:	005b      	lsls	r3, r3, #1
 80029c6:	4413      	add	r3, r2
 80029c8:	3b1e      	subs	r3, #30
 80029ca:	2207      	movs	r2, #7
 80029cc:	fa02 f303 	lsl.w	r3, r2, r3
 80029d0:	43db      	mvns	r3, r3
 80029d2:	4019      	ands	r1, r3
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	6898      	ldr	r0, [r3, #8]
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	4613      	mov	r3, r2
 80029de:	005b      	lsls	r3, r3, #1
 80029e0:	4413      	add	r3, r2
 80029e2:	3b1e      	subs	r3, #30
 80029e4:	fa00 f203 	lsl.w	r2, r0, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	430a      	orrs	r2, r1
 80029ee:	619a      	str	r2, [r3, #24]
 80029f0:	e019      	b.n	8002a26 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	6959      	ldr	r1, [r3, #20]
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	4613      	mov	r3, r2
 80029fe:	005b      	lsls	r3, r3, #1
 8002a00:	4413      	add	r3, r2
 8002a02:	2207      	movs	r2, #7
 8002a04:	fa02 f303 	lsl.w	r3, r2, r3
 8002a08:	43db      	mvns	r3, r3
 8002a0a:	4019      	ands	r1, r3
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	6898      	ldr	r0, [r3, #8]
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	4613      	mov	r3, r2
 8002a16:	005b      	lsls	r3, r3, #1
 8002a18:	4413      	add	r3, r2
 8002a1a:	fa00 f203 	lsl.w	r2, r0, r3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	430a      	orrs	r2, r1
 8002a24:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	695a      	ldr	r2, [r3, #20]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	08db      	lsrs	r3, r3, #3
 8002a32:	f003 0303 	and.w	r3, r3, #3
 8002a36:	005b      	lsls	r3, r3, #1
 8002a38:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3c:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	691b      	ldr	r3, [r3, #16]
 8002a42:	3b01      	subs	r3, #1
 8002a44:	2b03      	cmp	r3, #3
 8002a46:	d84f      	bhi.n	8002ae8 <HAL_ADC_ConfigChannel+0x28c>
 8002a48:	a201      	add	r2, pc, #4	; (adr r2, 8002a50 <HAL_ADC_ConfigChannel+0x1f4>)
 8002a4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a4e:	bf00      	nop
 8002a50:	08002a61 	.word	0x08002a61
 8002a54:	08002a83 	.word	0x08002a83
 8002a58:	08002aa5 	.word	0x08002aa5
 8002a5c:	08002ac7 	.word	0x08002ac7
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002a66:	4b97      	ldr	r3, [pc, #604]	; (8002cc4 <HAL_ADC_ConfigChannel+0x468>)
 8002a68:	4013      	ands	r3, r2
 8002a6a:	683a      	ldr	r2, [r7, #0]
 8002a6c:	6812      	ldr	r2, [r2, #0]
 8002a6e:	0691      	lsls	r1, r2, #26
 8002a70:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002a72:	430a      	orrs	r2, r1
 8002a74:	431a      	orrs	r2, r3
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002a7e:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002a80:	e07b      	b.n	8002b7a <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002a88:	4b8e      	ldr	r3, [pc, #568]	; (8002cc4 <HAL_ADC_ConfigChannel+0x468>)
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	683a      	ldr	r2, [r7, #0]
 8002a8e:	6812      	ldr	r2, [r2, #0]
 8002a90:	0691      	lsls	r1, r2, #26
 8002a92:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002a94:	430a      	orrs	r2, r1
 8002a96:	431a      	orrs	r2, r3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002aa0:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002aa2:	e06a      	b.n	8002b7a <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002aaa:	4b86      	ldr	r3, [pc, #536]	; (8002cc4 <HAL_ADC_ConfigChannel+0x468>)
 8002aac:	4013      	ands	r3, r2
 8002aae:	683a      	ldr	r2, [r7, #0]
 8002ab0:	6812      	ldr	r2, [r2, #0]
 8002ab2:	0691      	lsls	r1, r2, #26
 8002ab4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002ab6:	430a      	orrs	r2, r1
 8002ab8:	431a      	orrs	r2, r3
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002ac2:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002ac4:	e059      	b.n	8002b7a <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002acc:	4b7d      	ldr	r3, [pc, #500]	; (8002cc4 <HAL_ADC_ConfigChannel+0x468>)
 8002ace:	4013      	ands	r3, r2
 8002ad0:	683a      	ldr	r2, [r7, #0]
 8002ad2:	6812      	ldr	r2, [r2, #0]
 8002ad4:	0691      	lsls	r1, r2, #26
 8002ad6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002ad8:	430a      	orrs	r2, r1
 8002ada:	431a      	orrs	r2, r3
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002ae4:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002ae6:	e048      	b.n	8002b7a <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002aee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	069b      	lsls	r3, r3, #26
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d107      	bne.n	8002b0c <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002b0a:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b12:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	069b      	lsls	r3, r3, #26
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d107      	bne.n	8002b30 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002b2e:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b36:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	069b      	lsls	r3, r3, #26
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d107      	bne.n	8002b54 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002b52:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b5a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	069b      	lsls	r3, r3, #26
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d107      	bne.n	8002b78 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002b76:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8002b78:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	f003 0303 	and.w	r3, r3, #3
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d108      	bne.n	8002b9a <HAL_ADC_ConfigChannel+0x33e>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0301 	and.w	r3, r3, #1
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d101      	bne.n	8002b9a <HAL_ADC_ConfigChannel+0x33e>
 8002b96:	2301      	movs	r3, #1
 8002b98:	e000      	b.n	8002b9c <HAL_ADC_ConfigChannel+0x340>
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	f040 80fe 	bne.w	8002d9e <HAL_ADC_ConfigChannel+0x542>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	68db      	ldr	r3, [r3, #12]
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d00f      	beq.n	8002bca <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbc:	43da      	mvns	r2, r3
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	400a      	ands	r2, r1
 8002bc4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002bc8:	e049      	b.n	8002c5e <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	409a      	lsls	r2, r3
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	430a      	orrs	r2, r1
 8002be0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	2b09      	cmp	r3, #9
 8002bea:	d91c      	bls.n	8002c26 <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	6999      	ldr	r1, [r3, #24]
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	4613      	mov	r3, r2
 8002bf8:	005b      	lsls	r3, r3, #1
 8002bfa:	4413      	add	r3, r2
 8002bfc:	3b1b      	subs	r3, #27
 8002bfe:	2207      	movs	r2, #7
 8002c00:	fa02 f303 	lsl.w	r3, r2, r3
 8002c04:	43db      	mvns	r3, r3
 8002c06:	4019      	ands	r1, r3
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	6898      	ldr	r0, [r3, #8]
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	4613      	mov	r3, r2
 8002c12:	005b      	lsls	r3, r3, #1
 8002c14:	4413      	add	r3, r2
 8002c16:	3b1b      	subs	r3, #27
 8002c18:	fa00 f203 	lsl.w	r2, r0, r3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	430a      	orrs	r2, r1
 8002c22:	619a      	str	r2, [r3, #24]
 8002c24:	e01b      	b.n	8002c5e <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	6959      	ldr	r1, [r3, #20]
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	1c5a      	adds	r2, r3, #1
 8002c32:	4613      	mov	r3, r2
 8002c34:	005b      	lsls	r3, r3, #1
 8002c36:	4413      	add	r3, r2
 8002c38:	2207      	movs	r2, #7
 8002c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3e:	43db      	mvns	r3, r3
 8002c40:	4019      	ands	r1, r3
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	6898      	ldr	r0, [r3, #8]
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	1c5a      	adds	r2, r3, #1
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	005b      	lsls	r3, r3, #1
 8002c50:	4413      	add	r3, r2
 8002c52:	fa00 f203 	lsl.w	r2, r0, r3
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	430a      	orrs	r2, r1
 8002c5c:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c5e:	4b1a      	ldr	r3, [pc, #104]	; (8002cc8 <HAL_ADC_ConfigChannel+0x46c>)
 8002c60:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	2b10      	cmp	r3, #16
 8002c68:	d105      	bne.n	8002c76 <HAL_ADC_ConfigChannel+0x41a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002c6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d014      	beq.n	8002ca0 <HAL_ADC_ConfigChannel+0x444>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002c7a:	2b11      	cmp	r3, #17
 8002c7c:	d105      	bne.n	8002c8a <HAL_ADC_ConfigChannel+0x42e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002c7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d00a      	beq.n	8002ca0 <HAL_ADC_ConfigChannel+0x444>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002c8e:	2b12      	cmp	r3, #18
 8002c90:	f040 8085 	bne.w	8002d9e <HAL_ADC_ConfigChannel+0x542>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002c94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d17e      	bne.n	8002d9e <HAL_ADC_ConfigChannel+0x542>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	f003 0303 	and.w	r3, r3, #3
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d10c      	bne.n	8002ccc <HAL_ADC_ConfigChannel+0x470>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0301 	and.w	r3, r3, #1
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d105      	bne.n	8002ccc <HAL_ADC_ConfigChannel+0x470>
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e004      	b.n	8002cce <HAL_ADC_ConfigChannel+0x472>
 8002cc4:	83fff000 	.word	0x83fff000
 8002cc8:	50000300 	.word	0x50000300
 8002ccc:	2300      	movs	r3, #0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d150      	bne.n	8002d74 <HAL_ADC_ConfigChannel+0x518>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002cd2:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d010      	beq.n	8002cfa <HAL_ADC_ConfigChannel+0x49e>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	f003 0303 	and.w	r3, r3, #3
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d107      	bne.n	8002cf4 <HAL_ADC_ConfigChannel+0x498>
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0301 	and.w	r3, r3, #1
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d101      	bne.n	8002cf4 <HAL_ADC_ConfigChannel+0x498>
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e000      	b.n	8002cf6 <HAL_ADC_ConfigChannel+0x49a>
 8002cf4:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d13c      	bne.n	8002d74 <HAL_ADC_ConfigChannel+0x518>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	2b10      	cmp	r3, #16
 8002d00:	d11d      	bne.n	8002d3e <HAL_ADC_ConfigChannel+0x4e2>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d0a:	d118      	bne.n	8002d3e <HAL_ADC_ConfigChannel+0x4e2>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002d0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002d14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d16:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002d18:	4b27      	ldr	r3, [pc, #156]	; (8002db8 <HAL_ADC_ConfigChannel+0x55c>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a27      	ldr	r2, [pc, #156]	; (8002dbc <HAL_ADC_ConfigChannel+0x560>)
 8002d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d22:	0c9a      	lsrs	r2, r3, #18
 8002d24:	4613      	mov	r3, r2
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	4413      	add	r3, r2
 8002d2a:	005b      	lsls	r3, r3, #1
 8002d2c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002d2e:	e002      	b.n	8002d36 <HAL_ADC_ConfigChannel+0x4da>
          {
            wait_loop_index--;
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	3b01      	subs	r3, #1
 8002d34:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d1f9      	bne.n	8002d30 <HAL_ADC_ConfigChannel+0x4d4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002d3c:	e02e      	b.n	8002d9c <HAL_ADC_ConfigChannel+0x540>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	2b11      	cmp	r3, #17
 8002d44:	d10b      	bne.n	8002d5e <HAL_ADC_ConfigChannel+0x502>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d4e:	d106      	bne.n	8002d5e <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002d50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8002d58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d5a:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002d5c:	e01e      	b.n	8002d9c <HAL_ADC_ConfigChannel+0x540>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	2b12      	cmp	r3, #18
 8002d64:	d11a      	bne.n	8002d9c <HAL_ADC_ConfigChannel+0x540>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002d66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002d6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d70:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002d72:	e013      	b.n	8002d9c <HAL_ADC_ConfigChannel+0x540>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d78:	f043 0220 	orr.w	r2, r3, #32
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002d86:	e00a      	b.n	8002d9e <HAL_ADC_ConfigChannel+0x542>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8c:	f043 0220 	orr.w	r2, r3, #32
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002d9a:	e000      	b.n	8002d9e <HAL_ADC_ConfigChannel+0x542>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002d9c:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2200      	movs	r2, #0
 8002da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002da6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	376c      	adds	r7, #108	; 0x6c
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr
 8002db6:	bf00      	nop
 8002db8:	2000002c 	.word	0x2000002c
 8002dbc:	431bde83 	.word	0x431bde83

08002dc0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b084      	sub	sp, #16
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dcc:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d126      	bne.n	8002e28 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dde:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d115      	bne.n	8002e20 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d111      	bne.n	8002e20 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e00:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d105      	bne.n	8002e20 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e18:	f043 0201 	orr.w	r2, r3, #1
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002e20:	68f8      	ldr	r0, [r7, #12]
 8002e22:	f7ff fadb 	bl	80023dc <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002e26:	e004      	b.n	8002e32 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	4798      	blx	r3
}
 8002e32:	bf00      	nop
 8002e34:	3710      	adds	r7, #16
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}

08002e3a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002e3a:	b580      	push	{r7, lr}
 8002e3c:	b084      	sub	sp, #16
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e46:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002e48:	68f8      	ldr	r0, [r7, #12]
 8002e4a:	f7ff fad1 	bl	80023f0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8002e4e:	bf00      	nop
 8002e50:	3710      	adds	r7, #16
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}

08002e56 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002e56:	b580      	push	{r7, lr}
 8002e58:	b084      	sub	sp, #16
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e62:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e68:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e74:	f043 0204 	orr.w	r2, r3, #4
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002e7c:	68f8      	ldr	r0, [r7, #12]
 8002e7e:	f7ff fac1 	bl	8002404 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002e82:	bf00      	nop
 8002e84:	3710      	adds	r7, #16
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
	...

08002e8c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b084      	sub	sp, #16
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e94:	2300      	movs	r3, #0
 8002e96:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	f003 0303 	and.w	r3, r3, #3
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d108      	bne.n	8002eb8 <ADC_Enable+0x2c>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 0301 	and.w	r3, r3, #1
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d101      	bne.n	8002eb8 <ADC_Enable+0x2c>
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e000      	b.n	8002eba <ADC_Enable+0x2e>
 8002eb8:	2300      	movs	r3, #0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d143      	bne.n	8002f46 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	689a      	ldr	r2, [r3, #8]
 8002ec4:	4b22      	ldr	r3, [pc, #136]	; (8002f50 <ADC_Enable+0xc4>)
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d00d      	beq.n	8002ee8 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed0:	f043 0210 	orr.w	r2, r3, #16
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002edc:	f043 0201 	orr.w	r2, r3, #1
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e02f      	b.n	8002f48 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	689a      	ldr	r2, [r3, #8]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f042 0201 	orr.w	r2, r2, #1
 8002ef6:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002ef8:	f7ff fa40 	bl	800237c <HAL_GetTick>
 8002efc:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002efe:	e01b      	b.n	8002f38 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002f00:	f7ff fa3c 	bl	800237c <HAL_GetTick>
 8002f04:	4602      	mov	r2, r0
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	1ad3      	subs	r3, r2, r3
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	d914      	bls.n	8002f38 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 0301 	and.w	r3, r3, #1
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d00d      	beq.n	8002f38 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f20:	f043 0210 	orr.w	r2, r3, #16
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f2c:	f043 0201 	orr.w	r2, r3, #1
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e007      	b.n	8002f48 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0301 	and.w	r3, r3, #1
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d1dc      	bne.n	8002f00 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002f46:	2300      	movs	r3, #0
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3710      	adds	r7, #16
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	8000003f 	.word	0x8000003f

08002f54 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b084      	sub	sp, #16
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	f003 0303 	and.w	r3, r3, #3
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d108      	bne.n	8002f80 <ADC_Disable+0x2c>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0301 	and.w	r3, r3, #1
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d101      	bne.n	8002f80 <ADC_Disable+0x2c>
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e000      	b.n	8002f82 <ADC_Disable+0x2e>
 8002f80:	2300      	movs	r3, #0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d047      	beq.n	8003016 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	f003 030d 	and.w	r3, r3, #13
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d10f      	bne.n	8002fb4 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	689a      	ldr	r2, [r3, #8]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f042 0202 	orr.w	r2, r2, #2
 8002fa2:	609a      	str	r2, [r3, #8]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	2203      	movs	r2, #3
 8002faa:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002fac:	f7ff f9e6 	bl	800237c <HAL_GetTick>
 8002fb0:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002fb2:	e029      	b.n	8003008 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb8:	f043 0210 	orr.w	r2, r3, #16
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fc4:	f043 0201 	orr.w	r2, r3, #1
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e023      	b.n	8003018 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002fd0:	f7ff f9d4 	bl	800237c <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	d914      	bls.n	8003008 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	f003 0301 	and.w	r3, r3, #1
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d10d      	bne.n	8003008 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff0:	f043 0210 	orr.w	r2, r3, #16
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ffc:	f043 0201 	orr.w	r2, r3, #1
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e007      	b.n	8003018 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	f003 0301 	and.w	r3, r3, #1
 8003012:	2b01      	cmp	r3, #1
 8003014:	d0dc      	beq.n	8002fd0 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003016:	2300      	movs	r3, #0
}
 8003018:	4618      	mov	r0, r3
 800301a:	3710      	adds	r7, #16
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}

08003020 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003020:	b480      	push	{r7}
 8003022:	b085      	sub	sp, #20
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f003 0307 	and.w	r3, r3, #7
 800302e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003030:	4b0c      	ldr	r3, [pc, #48]	; (8003064 <__NVIC_SetPriorityGrouping+0x44>)
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003036:	68ba      	ldr	r2, [r7, #8]
 8003038:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800303c:	4013      	ands	r3, r2
 800303e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003048:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800304c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003050:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003052:	4a04      	ldr	r2, [pc, #16]	; (8003064 <__NVIC_SetPriorityGrouping+0x44>)
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	60d3      	str	r3, [r2, #12]
}
 8003058:	bf00      	nop
 800305a:	3714      	adds	r7, #20
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr
 8003064:	e000ed00 	.word	0xe000ed00

08003068 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003068:	b480      	push	{r7}
 800306a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800306c:	4b04      	ldr	r3, [pc, #16]	; (8003080 <__NVIC_GetPriorityGrouping+0x18>)
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	0a1b      	lsrs	r3, r3, #8
 8003072:	f003 0307 	and.w	r3, r3, #7
}
 8003076:	4618      	mov	r0, r3
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr
 8003080:	e000ed00 	.word	0xe000ed00

08003084 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003084:	b480      	push	{r7}
 8003086:	b083      	sub	sp, #12
 8003088:	af00      	add	r7, sp, #0
 800308a:	4603      	mov	r3, r0
 800308c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800308e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003092:	2b00      	cmp	r3, #0
 8003094:	db0b      	blt.n	80030ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003096:	79fb      	ldrb	r3, [r7, #7]
 8003098:	f003 021f 	and.w	r2, r3, #31
 800309c:	4907      	ldr	r1, [pc, #28]	; (80030bc <__NVIC_EnableIRQ+0x38>)
 800309e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030a2:	095b      	lsrs	r3, r3, #5
 80030a4:	2001      	movs	r0, #1
 80030a6:	fa00 f202 	lsl.w	r2, r0, r2
 80030aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80030ae:	bf00      	nop
 80030b0:	370c      	adds	r7, #12
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr
 80030ba:	bf00      	nop
 80030bc:	e000e100 	.word	0xe000e100

080030c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	4603      	mov	r3, r0
 80030c8:	6039      	str	r1, [r7, #0]
 80030ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	db0a      	blt.n	80030ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	b2da      	uxtb	r2, r3
 80030d8:	490c      	ldr	r1, [pc, #48]	; (800310c <__NVIC_SetPriority+0x4c>)
 80030da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030de:	0112      	lsls	r2, r2, #4
 80030e0:	b2d2      	uxtb	r2, r2
 80030e2:	440b      	add	r3, r1
 80030e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030e8:	e00a      	b.n	8003100 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	b2da      	uxtb	r2, r3
 80030ee:	4908      	ldr	r1, [pc, #32]	; (8003110 <__NVIC_SetPriority+0x50>)
 80030f0:	79fb      	ldrb	r3, [r7, #7]
 80030f2:	f003 030f 	and.w	r3, r3, #15
 80030f6:	3b04      	subs	r3, #4
 80030f8:	0112      	lsls	r2, r2, #4
 80030fa:	b2d2      	uxtb	r2, r2
 80030fc:	440b      	add	r3, r1
 80030fe:	761a      	strb	r2, [r3, #24]
}
 8003100:	bf00      	nop
 8003102:	370c      	adds	r7, #12
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr
 800310c:	e000e100 	.word	0xe000e100
 8003110:	e000ed00 	.word	0xe000ed00

08003114 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003114:	b480      	push	{r7}
 8003116:	b089      	sub	sp, #36	; 0x24
 8003118:	af00      	add	r7, sp, #0
 800311a:	60f8      	str	r0, [r7, #12]
 800311c:	60b9      	str	r1, [r7, #8]
 800311e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	f003 0307 	and.w	r3, r3, #7
 8003126:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	f1c3 0307 	rsb	r3, r3, #7
 800312e:	2b04      	cmp	r3, #4
 8003130:	bf28      	it	cs
 8003132:	2304      	movcs	r3, #4
 8003134:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	3304      	adds	r3, #4
 800313a:	2b06      	cmp	r3, #6
 800313c:	d902      	bls.n	8003144 <NVIC_EncodePriority+0x30>
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	3b03      	subs	r3, #3
 8003142:	e000      	b.n	8003146 <NVIC_EncodePriority+0x32>
 8003144:	2300      	movs	r3, #0
 8003146:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003148:	f04f 32ff 	mov.w	r2, #4294967295
 800314c:	69bb      	ldr	r3, [r7, #24]
 800314e:	fa02 f303 	lsl.w	r3, r2, r3
 8003152:	43da      	mvns	r2, r3
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	401a      	ands	r2, r3
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800315c:	f04f 31ff 	mov.w	r1, #4294967295
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	fa01 f303 	lsl.w	r3, r1, r3
 8003166:	43d9      	mvns	r1, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800316c:	4313      	orrs	r3, r2
         );
}
 800316e:	4618      	mov	r0, r3
 8003170:	3724      	adds	r7, #36	; 0x24
 8003172:	46bd      	mov	sp, r7
 8003174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003178:	4770      	bx	lr
	...

0800317c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b082      	sub	sp, #8
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	3b01      	subs	r3, #1
 8003188:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800318c:	d301      	bcc.n	8003192 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800318e:	2301      	movs	r3, #1
 8003190:	e00f      	b.n	80031b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003192:	4a0a      	ldr	r2, [pc, #40]	; (80031bc <SysTick_Config+0x40>)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	3b01      	subs	r3, #1
 8003198:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800319a:	210f      	movs	r1, #15
 800319c:	f04f 30ff 	mov.w	r0, #4294967295
 80031a0:	f7ff ff8e 	bl	80030c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031a4:	4b05      	ldr	r3, [pc, #20]	; (80031bc <SysTick_Config+0x40>)
 80031a6:	2200      	movs	r2, #0
 80031a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031aa:	4b04      	ldr	r3, [pc, #16]	; (80031bc <SysTick_Config+0x40>)
 80031ac:	2207      	movs	r2, #7
 80031ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031b0:	2300      	movs	r3, #0
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3708      	adds	r7, #8
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	e000e010 	.word	0xe000e010

080031c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b082      	sub	sp, #8
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	f7ff ff29 	bl	8003020 <__NVIC_SetPriorityGrouping>
}
 80031ce:	bf00      	nop
 80031d0:	3708      	adds	r7, #8
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}

080031d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031d6:	b580      	push	{r7, lr}
 80031d8:	b086      	sub	sp, #24
 80031da:	af00      	add	r7, sp, #0
 80031dc:	4603      	mov	r3, r0
 80031de:	60b9      	str	r1, [r7, #8]
 80031e0:	607a      	str	r2, [r7, #4]
 80031e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80031e4:	2300      	movs	r3, #0
 80031e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031e8:	f7ff ff3e 	bl	8003068 <__NVIC_GetPriorityGrouping>
 80031ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	68b9      	ldr	r1, [r7, #8]
 80031f2:	6978      	ldr	r0, [r7, #20]
 80031f4:	f7ff ff8e 	bl	8003114 <NVIC_EncodePriority>
 80031f8:	4602      	mov	r2, r0
 80031fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031fe:	4611      	mov	r1, r2
 8003200:	4618      	mov	r0, r3
 8003202:	f7ff ff5d 	bl	80030c0 <__NVIC_SetPriority>
}
 8003206:	bf00      	nop
 8003208:	3718      	adds	r7, #24
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}

0800320e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800320e:	b580      	push	{r7, lr}
 8003210:	b082      	sub	sp, #8
 8003212:	af00      	add	r7, sp, #0
 8003214:	4603      	mov	r3, r0
 8003216:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003218:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800321c:	4618      	mov	r0, r3
 800321e:	f7ff ff31 	bl	8003084 <__NVIC_EnableIRQ>
}
 8003222:	bf00      	nop
 8003224:	3708      	adds	r7, #8
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}

0800322a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800322a:	b580      	push	{r7, lr}
 800322c:	b082      	sub	sp, #8
 800322e:	af00      	add	r7, sp, #0
 8003230:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f7ff ffa2 	bl	800317c <SysTick_Config>
 8003238:	4603      	mov	r3, r0
}
 800323a:	4618      	mov	r0, r3
 800323c:	3708      	adds	r7, #8
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}

08003242 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8003242:	b580      	push	{r7, lr}
 8003244:	b084      	sub	sp, #16
 8003246:	af00      	add	r7, sp, #0
 8003248:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800324a:	2300      	movs	r3, #0
 800324c:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d101      	bne.n	8003258 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e037      	b.n	80032c8 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2202      	movs	r2, #2
 800325c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800326e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003272:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800327c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	68db      	ldr	r3, [r3, #12]
 8003282:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003288:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	695b      	ldr	r3, [r3, #20]
 800328e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003294:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	69db      	ldr	r3, [r3, #28]
 800329a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800329c:	68fa      	ldr	r2, [r7, #12]
 800329e:	4313      	orrs	r3, r2
 80032a0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	68fa      	ldr	r2, [r7, #12]
 80032a8:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f000 f9b8 	bl	8003620 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2201      	movs	r2, #1
 80032ba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2200      	movs	r2, #0
 80032c2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80032c6:	2300      	movs	r3, #0
}  
 80032c8:	4618      	mov	r0, r3
 80032ca:	3710      	adds	r7, #16
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}

080032d0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b086      	sub	sp, #24
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	60f8      	str	r0, [r7, #12]
 80032d8:	60b9      	str	r1, [r7, #8]
 80032da:	607a      	str	r2, [r7, #4]
 80032dc:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80032de:	2300      	movs	r3, #0
 80032e0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d101      	bne.n	80032f0 <HAL_DMA_Start_IT+0x20>
 80032ec:	2302      	movs	r3, #2
 80032ee:	e04a      	b.n	8003386 <HAL_DMA_Start_IT+0xb6>
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2201      	movs	r2, #1
 80032f4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d13a      	bne.n	8003378 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2202      	movs	r2, #2
 8003306:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2200      	movs	r2, #0
 800330e:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f022 0201 	bic.w	r2, r2, #1
 800331e:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	68b9      	ldr	r1, [r7, #8]
 8003326:	68f8      	ldr	r0, [r7, #12]
 8003328:	f000 f94b 	bl	80035c2 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003330:	2b00      	cmp	r3, #0
 8003332:	d008      	beq.n	8003346 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f042 020e 	orr.w	r2, r2, #14
 8003342:	601a      	str	r2, [r3, #0]
 8003344:	e00f      	b.n	8003366 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f042 020a 	orr.w	r2, r2, #10
 8003354:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f022 0204 	bic.w	r2, r2, #4
 8003364:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f042 0201 	orr.w	r2, r2, #1
 8003374:	601a      	str	r2, [r3, #0]
 8003376:	e005      	b.n	8003384 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2200      	movs	r2, #0
 800337c:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8003380:	2302      	movs	r3, #2
 8003382:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8003384:	7dfb      	ldrb	r3, [r7, #23]
} 
 8003386:	4618      	mov	r0, r3
 8003388:	3718      	adds	r7, #24
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}

0800338e <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800338e:	b480      	push	{r7}
 8003390:	b083      	sub	sp, #12
 8003392:	af00      	add	r7, sp, #0
 8003394:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800339c:	2b02      	cmp	r3, #2
 800339e:	d008      	beq.n	80033b2 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2204      	movs	r2, #4
 80033a4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2200      	movs	r2, #0
 80033aa:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e020      	b.n	80033f4 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f022 020e 	bic.w	r2, r2, #14
 80033c0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f022 0201 	bic.w	r2, r2, #1
 80033d0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033da:	2101      	movs	r1, #1
 80033dc:	fa01 f202 	lsl.w	r2, r1, r2
 80033e0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2201      	movs	r2, #1
 80033e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2200      	movs	r2, #0
 80033ee:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80033f2:	2300      	movs	r3, #0
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	370c      	adds	r7, #12
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr

08003400 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003400:	b580      	push	{r7, lr}
 8003402:	b084      	sub	sp, #16
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003408:	2300      	movs	r3, #0
 800340a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003412:	2b02      	cmp	r3, #2
 8003414:	d005      	beq.n	8003422 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2204      	movs	r2, #4
 800341a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	73fb      	strb	r3, [r7, #15]
 8003420:	e027      	b.n	8003472 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f022 020e 	bic.w	r2, r2, #14
 8003430:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f022 0201 	bic.w	r2, r2, #1
 8003440:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800344a:	2101      	movs	r1, #1
 800344c:	fa01 f202 	lsl.w	r2, r1, r2
 8003450:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2201      	movs	r2, #1
 8003456:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003466:	2b00      	cmp	r3, #0
 8003468:	d003      	beq.n	8003472 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	4798      	blx	r3
    } 
  }
  return status;
 8003472:	7bfb      	ldrb	r3, [r7, #15]
}
 8003474:	4618      	mov	r0, r3
 8003476:	3710      	adds	r7, #16
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}

0800347c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003498:	2204      	movs	r2, #4
 800349a:	409a      	lsls	r2, r3
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	4013      	ands	r3, r2
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d024      	beq.n	80034ee <HAL_DMA_IRQHandler+0x72>
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	f003 0304 	and.w	r3, r3, #4
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d01f      	beq.n	80034ee <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0320 	and.w	r3, r3, #32
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d107      	bne.n	80034cc <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f022 0204 	bic.w	r2, r2, #4
 80034ca:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034d4:	2104      	movs	r1, #4
 80034d6:	fa01 f202 	lsl.w	r2, r1, r2
 80034da:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d06a      	beq.n	80035ba <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80034ec:	e065      	b.n	80035ba <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f2:	2202      	movs	r2, #2
 80034f4:	409a      	lsls	r2, r3
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	4013      	ands	r3, r2
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d02c      	beq.n	8003558 <HAL_DMA_IRQHandler+0xdc>
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	f003 0302 	and.w	r3, r3, #2
 8003504:	2b00      	cmp	r3, #0
 8003506:	d027      	beq.n	8003558 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0320 	and.w	r3, r3, #32
 8003512:	2b00      	cmp	r3, #0
 8003514:	d10b      	bne.n	800352e <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f022 020a 	bic.w	r2, r2, #10
 8003524:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2201      	movs	r2, #1
 800352a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003536:	2102      	movs	r1, #2
 8003538:	fa01 f202 	lsl.w	r2, r1, r2
 800353c:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2200      	movs	r2, #0
 8003542:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800354a:	2b00      	cmp	r3, #0
 800354c:	d035      	beq.n	80035ba <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8003556:	e030      	b.n	80035ba <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355c:	2208      	movs	r2, #8
 800355e:	409a      	lsls	r2, r3
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	4013      	ands	r3, r2
 8003564:	2b00      	cmp	r3, #0
 8003566:	d028      	beq.n	80035ba <HAL_DMA_IRQHandler+0x13e>
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	f003 0308 	and.w	r3, r3, #8
 800356e:	2b00      	cmp	r3, #0
 8003570:	d023      	beq.n	80035ba <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f022 020e 	bic.w	r2, r2, #14
 8003580:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800358a:	2101      	movs	r1, #1
 800358c:	fa01 f202 	lsl.w	r2, r1, r2
 8003590:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2201      	movs	r2, #1
 8003596:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2201      	movs	r2, #1
 800359c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2200      	movs	r2, #0
 80035a4:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d004      	beq.n	80035ba <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	4798      	blx	r3
    }
  }
}  
 80035b8:	e7ff      	b.n	80035ba <HAL_DMA_IRQHandler+0x13e>
 80035ba:	bf00      	nop
 80035bc:	3710      	adds	r7, #16
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}

080035c2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80035c2:	b480      	push	{r7}
 80035c4:	b085      	sub	sp, #20
 80035c6:	af00      	add	r7, sp, #0
 80035c8:	60f8      	str	r0, [r7, #12]
 80035ca:	60b9      	str	r1, [r7, #8]
 80035cc:	607a      	str	r2, [r7, #4]
 80035ce:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035d8:	2101      	movs	r1, #1
 80035da:	fa01 f202 	lsl.w	r2, r1, r2
 80035de:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	683a      	ldr	r2, [r7, #0]
 80035e6:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	2b10      	cmp	r3, #16
 80035ee:	d108      	bne.n	8003602 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	687a      	ldr	r2, [r7, #4]
 80035f6:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	68ba      	ldr	r2, [r7, #8]
 80035fe:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003600:	e007      	b.n	8003612 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	68ba      	ldr	r2, [r7, #8]
 8003608:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	687a      	ldr	r2, [r7, #4]
 8003610:	60da      	str	r2, [r3, #12]
}
 8003612:	bf00      	nop
 8003614:	3714      	adds	r7, #20
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr
	...

08003620 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003620:	b480      	push	{r7}
 8003622:	b083      	sub	sp, #12
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	461a      	mov	r2, r3
 800362e:	4b09      	ldr	r3, [pc, #36]	; (8003654 <DMA_CalcBaseAndBitshift+0x34>)
 8003630:	4413      	add	r3, r2
 8003632:	4a09      	ldr	r2, [pc, #36]	; (8003658 <DMA_CalcBaseAndBitshift+0x38>)
 8003634:	fba2 2303 	umull	r2, r3, r2, r3
 8003638:	091b      	lsrs	r3, r3, #4
 800363a:	009a      	lsls	r2, r3, #2
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	4a06      	ldr	r2, [pc, #24]	; (800365c <DMA_CalcBaseAndBitshift+0x3c>)
 8003644:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8003646:	bf00      	nop
 8003648:	370c      	adds	r7, #12
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr
 8003652:	bf00      	nop
 8003654:	bffdfff8 	.word	0xbffdfff8
 8003658:	cccccccd 	.word	0xcccccccd
 800365c:	40020000 	.word	0x40020000

08003660 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003660:	b480      	push	{r7}
 8003662:	b087      	sub	sp, #28
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800366a:	2300      	movs	r3, #0
 800366c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800366e:	e14e      	b.n	800390e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	2101      	movs	r1, #1
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	fa01 f303 	lsl.w	r3, r1, r3
 800367c:	4013      	ands	r3, r2
 800367e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2b00      	cmp	r3, #0
 8003684:	f000 8140 	beq.w	8003908 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	f003 0303 	and.w	r3, r3, #3
 8003690:	2b01      	cmp	r3, #1
 8003692:	d005      	beq.n	80036a0 <HAL_GPIO_Init+0x40>
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	f003 0303 	and.w	r3, r3, #3
 800369c:	2b02      	cmp	r3, #2
 800369e:	d130      	bne.n	8003702 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	005b      	lsls	r3, r3, #1
 80036aa:	2203      	movs	r2, #3
 80036ac:	fa02 f303 	lsl.w	r3, r2, r3
 80036b0:	43db      	mvns	r3, r3
 80036b2:	693a      	ldr	r2, [r7, #16]
 80036b4:	4013      	ands	r3, r2
 80036b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	68da      	ldr	r2, [r3, #12]
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	005b      	lsls	r3, r3, #1
 80036c0:	fa02 f303 	lsl.w	r3, r2, r3
 80036c4:	693a      	ldr	r2, [r7, #16]
 80036c6:	4313      	orrs	r3, r2
 80036c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	693a      	ldr	r2, [r7, #16]
 80036ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80036d6:	2201      	movs	r2, #1
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	fa02 f303 	lsl.w	r3, r2, r3
 80036de:	43db      	mvns	r3, r3
 80036e0:	693a      	ldr	r2, [r7, #16]
 80036e2:	4013      	ands	r3, r2
 80036e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	091b      	lsrs	r3, r3, #4
 80036ec:	f003 0201 	and.w	r2, r3, #1
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	fa02 f303 	lsl.w	r3, r2, r3
 80036f6:	693a      	ldr	r2, [r7, #16]
 80036f8:	4313      	orrs	r3, r2
 80036fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	693a      	ldr	r2, [r7, #16]
 8003700:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	f003 0303 	and.w	r3, r3, #3
 800370a:	2b03      	cmp	r3, #3
 800370c:	d017      	beq.n	800373e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	68db      	ldr	r3, [r3, #12]
 8003712:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	005b      	lsls	r3, r3, #1
 8003718:	2203      	movs	r2, #3
 800371a:	fa02 f303 	lsl.w	r3, r2, r3
 800371e:	43db      	mvns	r3, r3
 8003720:	693a      	ldr	r2, [r7, #16]
 8003722:	4013      	ands	r3, r2
 8003724:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	689a      	ldr	r2, [r3, #8]
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	005b      	lsls	r3, r3, #1
 800372e:	fa02 f303 	lsl.w	r3, r2, r3
 8003732:	693a      	ldr	r2, [r7, #16]
 8003734:	4313      	orrs	r3, r2
 8003736:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	693a      	ldr	r2, [r7, #16]
 800373c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	f003 0303 	and.w	r3, r3, #3
 8003746:	2b02      	cmp	r3, #2
 8003748:	d123      	bne.n	8003792 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	08da      	lsrs	r2, r3, #3
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	3208      	adds	r2, #8
 8003752:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003756:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	f003 0307 	and.w	r3, r3, #7
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	220f      	movs	r2, #15
 8003762:	fa02 f303 	lsl.w	r3, r2, r3
 8003766:	43db      	mvns	r3, r3
 8003768:	693a      	ldr	r2, [r7, #16]
 800376a:	4013      	ands	r3, r2
 800376c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	691a      	ldr	r2, [r3, #16]
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	f003 0307 	and.w	r3, r3, #7
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	fa02 f303 	lsl.w	r3, r2, r3
 800377e:	693a      	ldr	r2, [r7, #16]
 8003780:	4313      	orrs	r3, r2
 8003782:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	08da      	lsrs	r2, r3, #3
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	3208      	adds	r2, #8
 800378c:	6939      	ldr	r1, [r7, #16]
 800378e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	005b      	lsls	r3, r3, #1
 800379c:	2203      	movs	r2, #3
 800379e:	fa02 f303 	lsl.w	r3, r2, r3
 80037a2:	43db      	mvns	r3, r3
 80037a4:	693a      	ldr	r2, [r7, #16]
 80037a6:	4013      	ands	r3, r2
 80037a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	f003 0203 	and.w	r2, r3, #3
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	005b      	lsls	r3, r3, #1
 80037b6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ba:	693a      	ldr	r2, [r7, #16]
 80037bc:	4313      	orrs	r3, r2
 80037be:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	693a      	ldr	r2, [r7, #16]
 80037c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	f000 809a 	beq.w	8003908 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037d4:	4b55      	ldr	r3, [pc, #340]	; (800392c <HAL_GPIO_Init+0x2cc>)
 80037d6:	699b      	ldr	r3, [r3, #24]
 80037d8:	4a54      	ldr	r2, [pc, #336]	; (800392c <HAL_GPIO_Init+0x2cc>)
 80037da:	f043 0301 	orr.w	r3, r3, #1
 80037de:	6193      	str	r3, [r2, #24]
 80037e0:	4b52      	ldr	r3, [pc, #328]	; (800392c <HAL_GPIO_Init+0x2cc>)
 80037e2:	699b      	ldr	r3, [r3, #24]
 80037e4:	f003 0301 	and.w	r3, r3, #1
 80037e8:	60bb      	str	r3, [r7, #8]
 80037ea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80037ec:	4a50      	ldr	r2, [pc, #320]	; (8003930 <HAL_GPIO_Init+0x2d0>)
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	089b      	lsrs	r3, r3, #2
 80037f2:	3302      	adds	r3, #2
 80037f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	f003 0303 	and.w	r3, r3, #3
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	220f      	movs	r2, #15
 8003804:	fa02 f303 	lsl.w	r3, r2, r3
 8003808:	43db      	mvns	r3, r3
 800380a:	693a      	ldr	r2, [r7, #16]
 800380c:	4013      	ands	r3, r2
 800380e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003816:	d013      	beq.n	8003840 <HAL_GPIO_Init+0x1e0>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	4a46      	ldr	r2, [pc, #280]	; (8003934 <HAL_GPIO_Init+0x2d4>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d00d      	beq.n	800383c <HAL_GPIO_Init+0x1dc>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	4a45      	ldr	r2, [pc, #276]	; (8003938 <HAL_GPIO_Init+0x2d8>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d007      	beq.n	8003838 <HAL_GPIO_Init+0x1d8>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	4a44      	ldr	r2, [pc, #272]	; (800393c <HAL_GPIO_Init+0x2dc>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d101      	bne.n	8003834 <HAL_GPIO_Init+0x1d4>
 8003830:	2303      	movs	r3, #3
 8003832:	e006      	b.n	8003842 <HAL_GPIO_Init+0x1e2>
 8003834:	2305      	movs	r3, #5
 8003836:	e004      	b.n	8003842 <HAL_GPIO_Init+0x1e2>
 8003838:	2302      	movs	r3, #2
 800383a:	e002      	b.n	8003842 <HAL_GPIO_Init+0x1e2>
 800383c:	2301      	movs	r3, #1
 800383e:	e000      	b.n	8003842 <HAL_GPIO_Init+0x1e2>
 8003840:	2300      	movs	r3, #0
 8003842:	697a      	ldr	r2, [r7, #20]
 8003844:	f002 0203 	and.w	r2, r2, #3
 8003848:	0092      	lsls	r2, r2, #2
 800384a:	4093      	lsls	r3, r2
 800384c:	693a      	ldr	r2, [r7, #16]
 800384e:	4313      	orrs	r3, r2
 8003850:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003852:	4937      	ldr	r1, [pc, #220]	; (8003930 <HAL_GPIO_Init+0x2d0>)
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	089b      	lsrs	r3, r3, #2
 8003858:	3302      	adds	r3, #2
 800385a:	693a      	ldr	r2, [r7, #16]
 800385c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003860:	4b37      	ldr	r3, [pc, #220]	; (8003940 <HAL_GPIO_Init+0x2e0>)
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	43db      	mvns	r3, r3
 800386a:	693a      	ldr	r2, [r7, #16]
 800386c:	4013      	ands	r3, r2
 800386e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003878:	2b00      	cmp	r3, #0
 800387a:	d003      	beq.n	8003884 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 800387c:	693a      	ldr	r2, [r7, #16]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	4313      	orrs	r3, r2
 8003882:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003884:	4a2e      	ldr	r2, [pc, #184]	; (8003940 <HAL_GPIO_Init+0x2e0>)
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800388a:	4b2d      	ldr	r3, [pc, #180]	; (8003940 <HAL_GPIO_Init+0x2e0>)
 800388c:	68db      	ldr	r3, [r3, #12]
 800388e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	43db      	mvns	r3, r3
 8003894:	693a      	ldr	r2, [r7, #16]
 8003896:	4013      	ands	r3, r2
 8003898:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d003      	beq.n	80038ae <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80038a6:	693a      	ldr	r2, [r7, #16]
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	4313      	orrs	r3, r2
 80038ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80038ae:	4a24      	ldr	r2, [pc, #144]	; (8003940 <HAL_GPIO_Init+0x2e0>)
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80038b4:	4b22      	ldr	r3, [pc, #136]	; (8003940 <HAL_GPIO_Init+0x2e0>)
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	43db      	mvns	r3, r3
 80038be:	693a      	ldr	r2, [r7, #16]
 80038c0:	4013      	ands	r3, r2
 80038c2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d003      	beq.n	80038d8 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80038d0:	693a      	ldr	r2, [r7, #16]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	4313      	orrs	r3, r2
 80038d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80038d8:	4a19      	ldr	r2, [pc, #100]	; (8003940 <HAL_GPIO_Init+0x2e0>)
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80038de:	4b18      	ldr	r3, [pc, #96]	; (8003940 <HAL_GPIO_Init+0x2e0>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	43db      	mvns	r3, r3
 80038e8:	693a      	ldr	r2, [r7, #16]
 80038ea:	4013      	ands	r3, r2
 80038ec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d003      	beq.n	8003902 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80038fa:	693a      	ldr	r2, [r7, #16]
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	4313      	orrs	r3, r2
 8003900:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003902:	4a0f      	ldr	r2, [pc, #60]	; (8003940 <HAL_GPIO_Init+0x2e0>)
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	3301      	adds	r3, #1
 800390c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	fa22 f303 	lsr.w	r3, r2, r3
 8003918:	2b00      	cmp	r3, #0
 800391a:	f47f aea9 	bne.w	8003670 <HAL_GPIO_Init+0x10>
  }
}
 800391e:	bf00      	nop
 8003920:	bf00      	nop
 8003922:	371c      	adds	r7, #28
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr
 800392c:	40021000 	.word	0x40021000
 8003930:	40010000 	.word	0x40010000
 8003934:	48000400 	.word	0x48000400
 8003938:	48000800 	.word	0x48000800
 800393c:	48000c00 	.word	0x48000c00
 8003940:	40010400 	.word	0x40010400

08003944 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003944:	b480      	push	{r7}
 8003946:	b083      	sub	sp, #12
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
 800394c:	460b      	mov	r3, r1
 800394e:	807b      	strh	r3, [r7, #2]
 8003950:	4613      	mov	r3, r2
 8003952:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003954:	787b      	ldrb	r3, [r7, #1]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d003      	beq.n	8003962 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800395a:	887a      	ldrh	r2, [r7, #2]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003960:	e002      	b.n	8003968 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003962:	887a      	ldrh	r2, [r7, #2]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003968:	bf00      	nop
 800396a:	370c      	adds	r7, #12
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr

08003974 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003974:	b480      	push	{r7}
 8003976:	b085      	sub	sp, #20
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
 800397c:	460b      	mov	r3, r1
 800397e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	695b      	ldr	r3, [r3, #20]
 8003984:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003986:	887a      	ldrh	r2, [r7, #2]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	4013      	ands	r3, r2
 800398c:	041a      	lsls	r2, r3, #16
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	43d9      	mvns	r1, r3
 8003992:	887b      	ldrh	r3, [r7, #2]
 8003994:	400b      	ands	r3, r1
 8003996:	431a      	orrs	r2, r3
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	619a      	str	r2, [r3, #24]
}
 800399c:	bf00      	nop
 800399e:	3714      	adds	r7, #20
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr

080039a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b082      	sub	sp, #8
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d101      	bne.n	80039ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e081      	b.n	8003abe <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d106      	bne.n	80039d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2200      	movs	r2, #0
 80039ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f7fe fa48 	bl	8001e64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2224      	movs	r2, #36	; 0x24
 80039d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f022 0201 	bic.w	r2, r2, #1
 80039ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	685a      	ldr	r2, [r3, #4]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80039f8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	689a      	ldr	r2, [r3, #8]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a08:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	68db      	ldr	r3, [r3, #12]
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d107      	bne.n	8003a22 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	689a      	ldr	r2, [r3, #8]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a1e:	609a      	str	r2, [r3, #8]
 8003a20:	e006      	b.n	8003a30 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	689a      	ldr	r2, [r3, #8]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003a2e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	68db      	ldr	r3, [r3, #12]
 8003a34:	2b02      	cmp	r3, #2
 8003a36:	d104      	bne.n	8003a42 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a40:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	687a      	ldr	r2, [r7, #4]
 8003a4a:	6812      	ldr	r2, [r2, #0]
 8003a4c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003a50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a54:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	68da      	ldr	r2, [r3, #12]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a64:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	691a      	ldr	r2, [r3, #16]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	695b      	ldr	r3, [r3, #20]
 8003a6e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	699b      	ldr	r3, [r3, #24]
 8003a76:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	430a      	orrs	r2, r1
 8003a7e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	69d9      	ldr	r1, [r3, #28]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6a1a      	ldr	r2, [r3, #32]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	430a      	orrs	r2, r1
 8003a8e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f042 0201 	orr.w	r2, r2, #1
 8003a9e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2220      	movs	r2, #32
 8003aaa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003abc:	2300      	movs	r3, #0
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3708      	adds	r7, #8
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}

08003ac6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003ac6:	b480      	push	{r7}
 8003ac8:	b083      	sub	sp, #12
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	6078      	str	r0, [r7, #4]
 8003ace:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	2b20      	cmp	r3, #32
 8003ada:	d138      	bne.n	8003b4e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d101      	bne.n	8003aea <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003ae6:	2302      	movs	r3, #2
 8003ae8:	e032      	b.n	8003b50 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2201      	movs	r2, #1
 8003aee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2224      	movs	r2, #36	; 0x24
 8003af6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f022 0201 	bic.w	r2, r2, #1
 8003b08:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003b18:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	6819      	ldr	r1, [r3, #0]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	683a      	ldr	r2, [r7, #0]
 8003b26:	430a      	orrs	r2, r1
 8003b28:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f042 0201 	orr.w	r2, r2, #1
 8003b38:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2220      	movs	r2, #32
 8003b3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	e000      	b.n	8003b50 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003b4e:	2302      	movs	r3, #2
  }
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	370c      	adds	r7, #12
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr

08003b5c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b085      	sub	sp, #20
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	2b20      	cmp	r3, #32
 8003b70:	d139      	bne.n	8003be6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d101      	bne.n	8003b80 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003b7c:	2302      	movs	r3, #2
 8003b7e:	e033      	b.n	8003be8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2201      	movs	r2, #1
 8003b84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2224      	movs	r2, #36	; 0x24
 8003b8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f022 0201 	bic.w	r2, r2, #1
 8003b9e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003bae:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	021b      	lsls	r3, r3, #8
 8003bb4:	68fa      	ldr	r2, [r7, #12]
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	68fa      	ldr	r2, [r7, #12]
 8003bc0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f042 0201 	orr.w	r2, r2, #1
 8003bd0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2220      	movs	r2, #32
 8003bd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003be2:	2300      	movs	r3, #0
 8003be4:	e000      	b.n	8003be8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003be6:	2302      	movs	r3, #2
  }
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	3714      	adds	r7, #20
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr

08003bf4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c00:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003c04:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c0a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d102      	bne.n	8003c1a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	f001 b823 	b.w	8004c60 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c1e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0301 	and.w	r3, r3, #1
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	f000 817d 	beq.w	8003f2a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003c30:	4bbc      	ldr	r3, [pc, #752]	; (8003f24 <HAL_RCC_OscConfig+0x330>)
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	f003 030c 	and.w	r3, r3, #12
 8003c38:	2b04      	cmp	r3, #4
 8003c3a:	d00c      	beq.n	8003c56 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003c3c:	4bb9      	ldr	r3, [pc, #740]	; (8003f24 <HAL_RCC_OscConfig+0x330>)
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	f003 030c 	and.w	r3, r3, #12
 8003c44:	2b08      	cmp	r3, #8
 8003c46:	d15c      	bne.n	8003d02 <HAL_RCC_OscConfig+0x10e>
 8003c48:	4bb6      	ldr	r3, [pc, #728]	; (8003f24 <HAL_RCC_OscConfig+0x330>)
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c54:	d155      	bne.n	8003d02 <HAL_RCC_OscConfig+0x10e>
 8003c56:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c5a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c5e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8003c62:	fa93 f3a3 	rbit	r3, r3
 8003c66:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003c6a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c6e:	fab3 f383 	clz	r3, r3
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	095b      	lsrs	r3, r3, #5
 8003c76:	b2db      	uxtb	r3, r3
 8003c78:	f043 0301 	orr.w	r3, r3, #1
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d102      	bne.n	8003c88 <HAL_RCC_OscConfig+0x94>
 8003c82:	4ba8      	ldr	r3, [pc, #672]	; (8003f24 <HAL_RCC_OscConfig+0x330>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	e015      	b.n	8003cb4 <HAL_RCC_OscConfig+0xc0>
 8003c88:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c8c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c90:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8003c94:	fa93 f3a3 	rbit	r3, r3
 8003c98:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003c9c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ca0:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003ca4:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8003ca8:	fa93 f3a3 	rbit	r3, r3
 8003cac:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8003cb0:	4b9c      	ldr	r3, [pc, #624]	; (8003f24 <HAL_RCC_OscConfig+0x330>)
 8003cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003cb8:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8003cbc:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003cc0:	fa92 f2a2 	rbit	r2, r2
 8003cc4:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8003cc8:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8003ccc:	fab2 f282 	clz	r2, r2
 8003cd0:	b2d2      	uxtb	r2, r2
 8003cd2:	f042 0220 	orr.w	r2, r2, #32
 8003cd6:	b2d2      	uxtb	r2, r2
 8003cd8:	f002 021f 	and.w	r2, r2, #31
 8003cdc:	2101      	movs	r1, #1
 8003cde:	fa01 f202 	lsl.w	r2, r1, r2
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	f000 811f 	beq.w	8003f28 <HAL_RCC_OscConfig+0x334>
 8003cea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	f040 8116 	bne.w	8003f28 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	f000 bfaf 	b.w	8004c60 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d06:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d12:	d106      	bne.n	8003d22 <HAL_RCC_OscConfig+0x12e>
 8003d14:	4b83      	ldr	r3, [pc, #524]	; (8003f24 <HAL_RCC_OscConfig+0x330>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a82      	ldr	r2, [pc, #520]	; (8003f24 <HAL_RCC_OscConfig+0x330>)
 8003d1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d1e:	6013      	str	r3, [r2, #0]
 8003d20:	e036      	b.n	8003d90 <HAL_RCC_OscConfig+0x19c>
 8003d22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d26:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d10c      	bne.n	8003d4c <HAL_RCC_OscConfig+0x158>
 8003d32:	4b7c      	ldr	r3, [pc, #496]	; (8003f24 <HAL_RCC_OscConfig+0x330>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a7b      	ldr	r2, [pc, #492]	; (8003f24 <HAL_RCC_OscConfig+0x330>)
 8003d38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d3c:	6013      	str	r3, [r2, #0]
 8003d3e:	4b79      	ldr	r3, [pc, #484]	; (8003f24 <HAL_RCC_OscConfig+0x330>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a78      	ldr	r2, [pc, #480]	; (8003f24 <HAL_RCC_OscConfig+0x330>)
 8003d44:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d48:	6013      	str	r3, [r2, #0]
 8003d4a:	e021      	b.n	8003d90 <HAL_RCC_OscConfig+0x19c>
 8003d4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d50:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d5c:	d10c      	bne.n	8003d78 <HAL_RCC_OscConfig+0x184>
 8003d5e:	4b71      	ldr	r3, [pc, #452]	; (8003f24 <HAL_RCC_OscConfig+0x330>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a70      	ldr	r2, [pc, #448]	; (8003f24 <HAL_RCC_OscConfig+0x330>)
 8003d64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d68:	6013      	str	r3, [r2, #0]
 8003d6a:	4b6e      	ldr	r3, [pc, #440]	; (8003f24 <HAL_RCC_OscConfig+0x330>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a6d      	ldr	r2, [pc, #436]	; (8003f24 <HAL_RCC_OscConfig+0x330>)
 8003d70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d74:	6013      	str	r3, [r2, #0]
 8003d76:	e00b      	b.n	8003d90 <HAL_RCC_OscConfig+0x19c>
 8003d78:	4b6a      	ldr	r3, [pc, #424]	; (8003f24 <HAL_RCC_OscConfig+0x330>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a69      	ldr	r2, [pc, #420]	; (8003f24 <HAL_RCC_OscConfig+0x330>)
 8003d7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d82:	6013      	str	r3, [r2, #0]
 8003d84:	4b67      	ldr	r3, [pc, #412]	; (8003f24 <HAL_RCC_OscConfig+0x330>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a66      	ldr	r2, [pc, #408]	; (8003f24 <HAL_RCC_OscConfig+0x330>)
 8003d8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d8e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003d90:	4b64      	ldr	r3, [pc, #400]	; (8003f24 <HAL_RCC_OscConfig+0x330>)
 8003d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d94:	f023 020f 	bic.w	r2, r3, #15
 8003d98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d9c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	495f      	ldr	r1, [pc, #380]	; (8003f24 <HAL_RCC_OscConfig+0x330>)
 8003da6:	4313      	orrs	r3, r2
 8003da8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003daa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d059      	beq.n	8003e6e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dba:	f7fe fadf 	bl	800237c <HAL_GetTick>
 8003dbe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dc2:	e00a      	b.n	8003dda <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003dc4:	f7fe fada 	bl	800237c <HAL_GetTick>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003dce:	1ad3      	subs	r3, r2, r3
 8003dd0:	2b64      	cmp	r3, #100	; 0x64
 8003dd2:	d902      	bls.n	8003dda <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8003dd4:	2303      	movs	r3, #3
 8003dd6:	f000 bf43 	b.w	8004c60 <HAL_RCC_OscConfig+0x106c>
 8003dda:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003dde:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003de2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8003de6:	fa93 f3a3 	rbit	r3, r3
 8003dea:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8003dee:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003df2:	fab3 f383 	clz	r3, r3
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	095b      	lsrs	r3, r3, #5
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	f043 0301 	orr.w	r3, r3, #1
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d102      	bne.n	8003e0c <HAL_RCC_OscConfig+0x218>
 8003e06:	4b47      	ldr	r3, [pc, #284]	; (8003f24 <HAL_RCC_OscConfig+0x330>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	e015      	b.n	8003e38 <HAL_RCC_OscConfig+0x244>
 8003e0c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003e10:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e14:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8003e18:	fa93 f3a3 	rbit	r3, r3
 8003e1c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003e20:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003e24:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003e28:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8003e2c:	fa93 f3a3 	rbit	r3, r3
 8003e30:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8003e34:	4b3b      	ldr	r3, [pc, #236]	; (8003f24 <HAL_RCC_OscConfig+0x330>)
 8003e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e38:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003e3c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8003e40:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003e44:	fa92 f2a2 	rbit	r2, r2
 8003e48:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8003e4c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8003e50:	fab2 f282 	clz	r2, r2
 8003e54:	b2d2      	uxtb	r2, r2
 8003e56:	f042 0220 	orr.w	r2, r2, #32
 8003e5a:	b2d2      	uxtb	r2, r2
 8003e5c:	f002 021f 	and.w	r2, r2, #31
 8003e60:	2101      	movs	r1, #1
 8003e62:	fa01 f202 	lsl.w	r2, r1, r2
 8003e66:	4013      	ands	r3, r2
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d0ab      	beq.n	8003dc4 <HAL_RCC_OscConfig+0x1d0>
 8003e6c:	e05d      	b.n	8003f2a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e6e:	f7fe fa85 	bl	800237c <HAL_GetTick>
 8003e72:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e76:	e00a      	b.n	8003e8e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e78:	f7fe fa80 	bl	800237c <HAL_GetTick>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003e82:	1ad3      	subs	r3, r2, r3
 8003e84:	2b64      	cmp	r3, #100	; 0x64
 8003e86:	d902      	bls.n	8003e8e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8003e88:	2303      	movs	r3, #3
 8003e8a:	f000 bee9 	b.w	8004c60 <HAL_RCC_OscConfig+0x106c>
 8003e8e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003e92:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e96:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8003e9a:	fa93 f3a3 	rbit	r3, r3
 8003e9e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8003ea2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ea6:	fab3 f383 	clz	r3, r3
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	095b      	lsrs	r3, r3, #5
 8003eae:	b2db      	uxtb	r3, r3
 8003eb0:	f043 0301 	orr.w	r3, r3, #1
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d102      	bne.n	8003ec0 <HAL_RCC_OscConfig+0x2cc>
 8003eba:	4b1a      	ldr	r3, [pc, #104]	; (8003f24 <HAL_RCC_OscConfig+0x330>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	e015      	b.n	8003eec <HAL_RCC_OscConfig+0x2f8>
 8003ec0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ec4:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ec8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003ecc:	fa93 f3a3 	rbit	r3, r3
 8003ed0:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003ed4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ed8:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003edc:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003ee0:	fa93 f3a3 	rbit	r3, r3
 8003ee4:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8003ee8:	4b0e      	ldr	r3, [pc, #56]	; (8003f24 <HAL_RCC_OscConfig+0x330>)
 8003eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eec:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003ef0:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8003ef4:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003ef8:	fa92 f2a2 	rbit	r2, r2
 8003efc:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8003f00:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8003f04:	fab2 f282 	clz	r2, r2
 8003f08:	b2d2      	uxtb	r2, r2
 8003f0a:	f042 0220 	orr.w	r2, r2, #32
 8003f0e:	b2d2      	uxtb	r2, r2
 8003f10:	f002 021f 	and.w	r2, r2, #31
 8003f14:	2101      	movs	r1, #1
 8003f16:	fa01 f202 	lsl.w	r2, r1, r2
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d1ab      	bne.n	8003e78 <HAL_RCC_OscConfig+0x284>
 8003f20:	e003      	b.n	8003f2a <HAL_RCC_OscConfig+0x336>
 8003f22:	bf00      	nop
 8003f24:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f2e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 0302 	and.w	r3, r3, #2
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	f000 817d 	beq.w	800423a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003f40:	4ba6      	ldr	r3, [pc, #664]	; (80041dc <HAL_RCC_OscConfig+0x5e8>)
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	f003 030c 	and.w	r3, r3, #12
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d00b      	beq.n	8003f64 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003f4c:	4ba3      	ldr	r3, [pc, #652]	; (80041dc <HAL_RCC_OscConfig+0x5e8>)
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	f003 030c 	and.w	r3, r3, #12
 8003f54:	2b08      	cmp	r3, #8
 8003f56:	d172      	bne.n	800403e <HAL_RCC_OscConfig+0x44a>
 8003f58:	4ba0      	ldr	r3, [pc, #640]	; (80041dc <HAL_RCC_OscConfig+0x5e8>)
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d16c      	bne.n	800403e <HAL_RCC_OscConfig+0x44a>
 8003f64:	2302      	movs	r3, #2
 8003f66:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f6a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003f6e:	fa93 f3a3 	rbit	r3, r3
 8003f72:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8003f76:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f7a:	fab3 f383 	clz	r3, r3
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	095b      	lsrs	r3, r3, #5
 8003f82:	b2db      	uxtb	r3, r3
 8003f84:	f043 0301 	orr.w	r3, r3, #1
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	2b01      	cmp	r3, #1
 8003f8c:	d102      	bne.n	8003f94 <HAL_RCC_OscConfig+0x3a0>
 8003f8e:	4b93      	ldr	r3, [pc, #588]	; (80041dc <HAL_RCC_OscConfig+0x5e8>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	e013      	b.n	8003fbc <HAL_RCC_OscConfig+0x3c8>
 8003f94:	2302      	movs	r3, #2
 8003f96:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f9a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003f9e:	fa93 f3a3 	rbit	r3, r3
 8003fa2:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003fa6:	2302      	movs	r3, #2
 8003fa8:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003fac:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003fb0:	fa93 f3a3 	rbit	r3, r3
 8003fb4:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003fb8:	4b88      	ldr	r3, [pc, #544]	; (80041dc <HAL_RCC_OscConfig+0x5e8>)
 8003fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fbc:	2202      	movs	r2, #2
 8003fbe:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8003fc2:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003fc6:	fa92 f2a2 	rbit	r2, r2
 8003fca:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8003fce:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003fd2:	fab2 f282 	clz	r2, r2
 8003fd6:	b2d2      	uxtb	r2, r2
 8003fd8:	f042 0220 	orr.w	r2, r2, #32
 8003fdc:	b2d2      	uxtb	r2, r2
 8003fde:	f002 021f 	and.w	r2, r2, #31
 8003fe2:	2101      	movs	r1, #1
 8003fe4:	fa01 f202 	lsl.w	r2, r1, r2
 8003fe8:	4013      	ands	r3, r2
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d00a      	beq.n	8004004 <HAL_RCC_OscConfig+0x410>
 8003fee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ff2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	691b      	ldr	r3, [r3, #16]
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d002      	beq.n	8004004 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	f000 be2e 	b.w	8004c60 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004004:	4b75      	ldr	r3, [pc, #468]	; (80041dc <HAL_RCC_OscConfig+0x5e8>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800400c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004010:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	695b      	ldr	r3, [r3, #20]
 8004018:	21f8      	movs	r1, #248	; 0xf8
 800401a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800401e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8004022:	fa91 f1a1 	rbit	r1, r1
 8004026:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800402a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800402e:	fab1 f181 	clz	r1, r1
 8004032:	b2c9      	uxtb	r1, r1
 8004034:	408b      	lsls	r3, r1
 8004036:	4969      	ldr	r1, [pc, #420]	; (80041dc <HAL_RCC_OscConfig+0x5e8>)
 8004038:	4313      	orrs	r3, r2
 800403a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800403c:	e0fd      	b.n	800423a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800403e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004042:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	691b      	ldr	r3, [r3, #16]
 800404a:	2b00      	cmp	r3, #0
 800404c:	f000 8088 	beq.w	8004160 <HAL_RCC_OscConfig+0x56c>
 8004050:	2301      	movs	r3, #1
 8004052:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004056:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800405a:	fa93 f3a3 	rbit	r3, r3
 800405e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8004062:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004066:	fab3 f383 	clz	r3, r3
 800406a:	b2db      	uxtb	r3, r3
 800406c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004070:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004074:	009b      	lsls	r3, r3, #2
 8004076:	461a      	mov	r2, r3
 8004078:	2301      	movs	r3, #1
 800407a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800407c:	f7fe f97e 	bl	800237c <HAL_GetTick>
 8004080:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004084:	e00a      	b.n	800409c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004086:	f7fe f979 	bl	800237c <HAL_GetTick>
 800408a:	4602      	mov	r2, r0
 800408c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004090:	1ad3      	subs	r3, r2, r3
 8004092:	2b02      	cmp	r3, #2
 8004094:	d902      	bls.n	800409c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8004096:	2303      	movs	r3, #3
 8004098:	f000 bde2 	b.w	8004c60 <HAL_RCC_OscConfig+0x106c>
 800409c:	2302      	movs	r3, #2
 800409e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040a2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80040a6:	fa93 f3a3 	rbit	r3, r3
 80040aa:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80040ae:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040b2:	fab3 f383 	clz	r3, r3
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	095b      	lsrs	r3, r3, #5
 80040ba:	b2db      	uxtb	r3, r3
 80040bc:	f043 0301 	orr.w	r3, r3, #1
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	d102      	bne.n	80040cc <HAL_RCC_OscConfig+0x4d8>
 80040c6:	4b45      	ldr	r3, [pc, #276]	; (80041dc <HAL_RCC_OscConfig+0x5e8>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	e013      	b.n	80040f4 <HAL_RCC_OscConfig+0x500>
 80040cc:	2302      	movs	r3, #2
 80040ce:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040d2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80040d6:	fa93 f3a3 	rbit	r3, r3
 80040da:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80040de:	2302      	movs	r3, #2
 80040e0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80040e4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80040e8:	fa93 f3a3 	rbit	r3, r3
 80040ec:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80040f0:	4b3a      	ldr	r3, [pc, #232]	; (80041dc <HAL_RCC_OscConfig+0x5e8>)
 80040f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f4:	2202      	movs	r2, #2
 80040f6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80040fa:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80040fe:	fa92 f2a2 	rbit	r2, r2
 8004102:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8004106:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800410a:	fab2 f282 	clz	r2, r2
 800410e:	b2d2      	uxtb	r2, r2
 8004110:	f042 0220 	orr.w	r2, r2, #32
 8004114:	b2d2      	uxtb	r2, r2
 8004116:	f002 021f 	and.w	r2, r2, #31
 800411a:	2101      	movs	r1, #1
 800411c:	fa01 f202 	lsl.w	r2, r1, r2
 8004120:	4013      	ands	r3, r2
 8004122:	2b00      	cmp	r3, #0
 8004124:	d0af      	beq.n	8004086 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004126:	4b2d      	ldr	r3, [pc, #180]	; (80041dc <HAL_RCC_OscConfig+0x5e8>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800412e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004132:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	695b      	ldr	r3, [r3, #20]
 800413a:	21f8      	movs	r1, #248	; 0xf8
 800413c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004140:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004144:	fa91 f1a1 	rbit	r1, r1
 8004148:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800414c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8004150:	fab1 f181 	clz	r1, r1
 8004154:	b2c9      	uxtb	r1, r1
 8004156:	408b      	lsls	r3, r1
 8004158:	4920      	ldr	r1, [pc, #128]	; (80041dc <HAL_RCC_OscConfig+0x5e8>)
 800415a:	4313      	orrs	r3, r2
 800415c:	600b      	str	r3, [r1, #0]
 800415e:	e06c      	b.n	800423a <HAL_RCC_OscConfig+0x646>
 8004160:	2301      	movs	r3, #1
 8004162:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004166:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800416a:	fa93 f3a3 	rbit	r3, r3
 800416e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8004172:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004176:	fab3 f383 	clz	r3, r3
 800417a:	b2db      	uxtb	r3, r3
 800417c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004180:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004184:	009b      	lsls	r3, r3, #2
 8004186:	461a      	mov	r2, r3
 8004188:	2300      	movs	r3, #0
 800418a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800418c:	f7fe f8f6 	bl	800237c <HAL_GetTick>
 8004190:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004194:	e00a      	b.n	80041ac <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004196:	f7fe f8f1 	bl	800237c <HAL_GetTick>
 800419a:	4602      	mov	r2, r0
 800419c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80041a0:	1ad3      	subs	r3, r2, r3
 80041a2:	2b02      	cmp	r3, #2
 80041a4:	d902      	bls.n	80041ac <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80041a6:	2303      	movs	r3, #3
 80041a8:	f000 bd5a 	b.w	8004c60 <HAL_RCC_OscConfig+0x106c>
 80041ac:	2302      	movs	r3, #2
 80041ae:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041b2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80041b6:	fa93 f3a3 	rbit	r3, r3
 80041ba:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80041be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041c2:	fab3 f383 	clz	r3, r3
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	095b      	lsrs	r3, r3, #5
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	f043 0301 	orr.w	r3, r3, #1
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d104      	bne.n	80041e0 <HAL_RCC_OscConfig+0x5ec>
 80041d6:	4b01      	ldr	r3, [pc, #4]	; (80041dc <HAL_RCC_OscConfig+0x5e8>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	e015      	b.n	8004208 <HAL_RCC_OscConfig+0x614>
 80041dc:	40021000 	.word	0x40021000
 80041e0:	2302      	movs	r3, #2
 80041e2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041e6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80041ea:	fa93 f3a3 	rbit	r3, r3
 80041ee:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80041f2:	2302      	movs	r3, #2
 80041f4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80041f8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80041fc:	fa93 f3a3 	rbit	r3, r3
 8004200:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004204:	4bc8      	ldr	r3, [pc, #800]	; (8004528 <HAL_RCC_OscConfig+0x934>)
 8004206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004208:	2202      	movs	r2, #2
 800420a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800420e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8004212:	fa92 f2a2 	rbit	r2, r2
 8004216:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800421a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800421e:	fab2 f282 	clz	r2, r2
 8004222:	b2d2      	uxtb	r2, r2
 8004224:	f042 0220 	orr.w	r2, r2, #32
 8004228:	b2d2      	uxtb	r2, r2
 800422a:	f002 021f 	and.w	r2, r2, #31
 800422e:	2101      	movs	r1, #1
 8004230:	fa01 f202 	lsl.w	r2, r1, r2
 8004234:	4013      	ands	r3, r2
 8004236:	2b00      	cmp	r3, #0
 8004238:	d1ad      	bne.n	8004196 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800423a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800423e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 0308 	and.w	r3, r3, #8
 800424a:	2b00      	cmp	r3, #0
 800424c:	f000 8110 	beq.w	8004470 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004250:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004254:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	699b      	ldr	r3, [r3, #24]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d079      	beq.n	8004354 <HAL_RCC_OscConfig+0x760>
 8004260:	2301      	movs	r3, #1
 8004262:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004266:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800426a:	fa93 f3a3 	rbit	r3, r3
 800426e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8004272:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004276:	fab3 f383 	clz	r3, r3
 800427a:	b2db      	uxtb	r3, r3
 800427c:	461a      	mov	r2, r3
 800427e:	4bab      	ldr	r3, [pc, #684]	; (800452c <HAL_RCC_OscConfig+0x938>)
 8004280:	4413      	add	r3, r2
 8004282:	009b      	lsls	r3, r3, #2
 8004284:	461a      	mov	r2, r3
 8004286:	2301      	movs	r3, #1
 8004288:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800428a:	f7fe f877 	bl	800237c <HAL_GetTick>
 800428e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004292:	e00a      	b.n	80042aa <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004294:	f7fe f872 	bl	800237c <HAL_GetTick>
 8004298:	4602      	mov	r2, r0
 800429a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800429e:	1ad3      	subs	r3, r2, r3
 80042a0:	2b02      	cmp	r3, #2
 80042a2:	d902      	bls.n	80042aa <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80042a4:	2303      	movs	r3, #3
 80042a6:	f000 bcdb 	b.w	8004c60 <HAL_RCC_OscConfig+0x106c>
 80042aa:	2302      	movs	r3, #2
 80042ac:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042b0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80042b4:	fa93 f3a3 	rbit	r3, r3
 80042b8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80042bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042c0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80042c4:	2202      	movs	r2, #2
 80042c6:	601a      	str	r2, [r3, #0]
 80042c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042cc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	fa93 f2a3 	rbit	r2, r3
 80042d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80042de:	601a      	str	r2, [r3, #0]
 80042e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80042e8:	2202      	movs	r2, #2
 80042ea:	601a      	str	r2, [r3, #0]
 80042ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	fa93 f2a3 	rbit	r2, r3
 80042fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042fe:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004302:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004304:	4b88      	ldr	r3, [pc, #544]	; (8004528 <HAL_RCC_OscConfig+0x934>)
 8004306:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004308:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800430c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004310:	2102      	movs	r1, #2
 8004312:	6019      	str	r1, [r3, #0]
 8004314:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004318:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	fa93 f1a3 	rbit	r1, r3
 8004322:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004326:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800432a:	6019      	str	r1, [r3, #0]
  return result;
 800432c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004330:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	fab3 f383 	clz	r3, r3
 800433a:	b2db      	uxtb	r3, r3
 800433c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004340:	b2db      	uxtb	r3, r3
 8004342:	f003 031f 	and.w	r3, r3, #31
 8004346:	2101      	movs	r1, #1
 8004348:	fa01 f303 	lsl.w	r3, r1, r3
 800434c:	4013      	ands	r3, r2
 800434e:	2b00      	cmp	r3, #0
 8004350:	d0a0      	beq.n	8004294 <HAL_RCC_OscConfig+0x6a0>
 8004352:	e08d      	b.n	8004470 <HAL_RCC_OscConfig+0x87c>
 8004354:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004358:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800435c:	2201      	movs	r2, #1
 800435e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004360:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004364:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	fa93 f2a3 	rbit	r2, r3
 800436e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004372:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004376:	601a      	str	r2, [r3, #0]
  return result;
 8004378:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800437c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004380:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004382:	fab3 f383 	clz	r3, r3
 8004386:	b2db      	uxtb	r3, r3
 8004388:	461a      	mov	r2, r3
 800438a:	4b68      	ldr	r3, [pc, #416]	; (800452c <HAL_RCC_OscConfig+0x938>)
 800438c:	4413      	add	r3, r2
 800438e:	009b      	lsls	r3, r3, #2
 8004390:	461a      	mov	r2, r3
 8004392:	2300      	movs	r3, #0
 8004394:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004396:	f7fd fff1 	bl	800237c <HAL_GetTick>
 800439a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800439e:	e00a      	b.n	80043b6 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043a0:	f7fd ffec 	bl	800237c <HAL_GetTick>
 80043a4:	4602      	mov	r2, r0
 80043a6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80043aa:	1ad3      	subs	r3, r2, r3
 80043ac:	2b02      	cmp	r3, #2
 80043ae:	d902      	bls.n	80043b6 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80043b0:	2303      	movs	r3, #3
 80043b2:	f000 bc55 	b.w	8004c60 <HAL_RCC_OscConfig+0x106c>
 80043b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043ba:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80043be:	2202      	movs	r2, #2
 80043c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043c6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	fa93 f2a3 	rbit	r2, r3
 80043d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043d4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80043d8:	601a      	str	r2, [r3, #0]
 80043da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043de:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80043e2:	2202      	movs	r2, #2
 80043e4:	601a      	str	r2, [r3, #0]
 80043e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043ea:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	fa93 f2a3 	rbit	r2, r3
 80043f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80043fc:	601a      	str	r2, [r3, #0]
 80043fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004402:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004406:	2202      	movs	r2, #2
 8004408:	601a      	str	r2, [r3, #0]
 800440a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800440e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	fa93 f2a3 	rbit	r2, r3
 8004418:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800441c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004420:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004422:	4b41      	ldr	r3, [pc, #260]	; (8004528 <HAL_RCC_OscConfig+0x934>)
 8004424:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004426:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800442a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800442e:	2102      	movs	r1, #2
 8004430:	6019      	str	r1, [r3, #0]
 8004432:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004436:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	fa93 f1a3 	rbit	r1, r3
 8004440:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004444:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004448:	6019      	str	r1, [r3, #0]
  return result;
 800444a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800444e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	fab3 f383 	clz	r3, r3
 8004458:	b2db      	uxtb	r3, r3
 800445a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800445e:	b2db      	uxtb	r3, r3
 8004460:	f003 031f 	and.w	r3, r3, #31
 8004464:	2101      	movs	r1, #1
 8004466:	fa01 f303 	lsl.w	r3, r1, r3
 800446a:	4013      	ands	r3, r2
 800446c:	2b00      	cmp	r3, #0
 800446e:	d197      	bne.n	80043a0 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004470:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004474:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 0304 	and.w	r3, r3, #4
 8004480:	2b00      	cmp	r3, #0
 8004482:	f000 81a1 	beq.w	80047c8 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004486:	2300      	movs	r3, #0
 8004488:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800448c:	4b26      	ldr	r3, [pc, #152]	; (8004528 <HAL_RCC_OscConfig+0x934>)
 800448e:	69db      	ldr	r3, [r3, #28]
 8004490:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004494:	2b00      	cmp	r3, #0
 8004496:	d116      	bne.n	80044c6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004498:	4b23      	ldr	r3, [pc, #140]	; (8004528 <HAL_RCC_OscConfig+0x934>)
 800449a:	69db      	ldr	r3, [r3, #28]
 800449c:	4a22      	ldr	r2, [pc, #136]	; (8004528 <HAL_RCC_OscConfig+0x934>)
 800449e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044a2:	61d3      	str	r3, [r2, #28]
 80044a4:	4b20      	ldr	r3, [pc, #128]	; (8004528 <HAL_RCC_OscConfig+0x934>)
 80044a6:	69db      	ldr	r3, [r3, #28]
 80044a8:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80044ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044b0:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80044b4:	601a      	str	r2, [r3, #0]
 80044b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044ba:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80044be:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80044c0:	2301      	movs	r3, #1
 80044c2:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044c6:	4b1a      	ldr	r3, [pc, #104]	; (8004530 <HAL_RCC_OscConfig+0x93c>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d11a      	bne.n	8004508 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044d2:	4b17      	ldr	r3, [pc, #92]	; (8004530 <HAL_RCC_OscConfig+0x93c>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a16      	ldr	r2, [pc, #88]	; (8004530 <HAL_RCC_OscConfig+0x93c>)
 80044d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044dc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044de:	f7fd ff4d 	bl	800237c <HAL_GetTick>
 80044e2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044e6:	e009      	b.n	80044fc <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044e8:	f7fd ff48 	bl	800237c <HAL_GetTick>
 80044ec:	4602      	mov	r2, r0
 80044ee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80044f2:	1ad3      	subs	r3, r2, r3
 80044f4:	2b64      	cmp	r3, #100	; 0x64
 80044f6:	d901      	bls.n	80044fc <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80044f8:	2303      	movs	r3, #3
 80044fa:	e3b1      	b.n	8004c60 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044fc:	4b0c      	ldr	r3, [pc, #48]	; (8004530 <HAL_RCC_OscConfig+0x93c>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004504:	2b00      	cmp	r3, #0
 8004506:	d0ef      	beq.n	80044e8 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004508:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800450c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	2b01      	cmp	r3, #1
 8004516:	d10d      	bne.n	8004534 <HAL_RCC_OscConfig+0x940>
 8004518:	4b03      	ldr	r3, [pc, #12]	; (8004528 <HAL_RCC_OscConfig+0x934>)
 800451a:	6a1b      	ldr	r3, [r3, #32]
 800451c:	4a02      	ldr	r2, [pc, #8]	; (8004528 <HAL_RCC_OscConfig+0x934>)
 800451e:	f043 0301 	orr.w	r3, r3, #1
 8004522:	6213      	str	r3, [r2, #32]
 8004524:	e03c      	b.n	80045a0 <HAL_RCC_OscConfig+0x9ac>
 8004526:	bf00      	nop
 8004528:	40021000 	.word	0x40021000
 800452c:	10908120 	.word	0x10908120
 8004530:	40007000 	.word	0x40007000
 8004534:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004538:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d10c      	bne.n	800455e <HAL_RCC_OscConfig+0x96a>
 8004544:	4bc1      	ldr	r3, [pc, #772]	; (800484c <HAL_RCC_OscConfig+0xc58>)
 8004546:	6a1b      	ldr	r3, [r3, #32]
 8004548:	4ac0      	ldr	r2, [pc, #768]	; (800484c <HAL_RCC_OscConfig+0xc58>)
 800454a:	f023 0301 	bic.w	r3, r3, #1
 800454e:	6213      	str	r3, [r2, #32]
 8004550:	4bbe      	ldr	r3, [pc, #760]	; (800484c <HAL_RCC_OscConfig+0xc58>)
 8004552:	6a1b      	ldr	r3, [r3, #32]
 8004554:	4abd      	ldr	r2, [pc, #756]	; (800484c <HAL_RCC_OscConfig+0xc58>)
 8004556:	f023 0304 	bic.w	r3, r3, #4
 800455a:	6213      	str	r3, [r2, #32]
 800455c:	e020      	b.n	80045a0 <HAL_RCC_OscConfig+0x9ac>
 800455e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004562:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	68db      	ldr	r3, [r3, #12]
 800456a:	2b05      	cmp	r3, #5
 800456c:	d10c      	bne.n	8004588 <HAL_RCC_OscConfig+0x994>
 800456e:	4bb7      	ldr	r3, [pc, #732]	; (800484c <HAL_RCC_OscConfig+0xc58>)
 8004570:	6a1b      	ldr	r3, [r3, #32]
 8004572:	4ab6      	ldr	r2, [pc, #728]	; (800484c <HAL_RCC_OscConfig+0xc58>)
 8004574:	f043 0304 	orr.w	r3, r3, #4
 8004578:	6213      	str	r3, [r2, #32]
 800457a:	4bb4      	ldr	r3, [pc, #720]	; (800484c <HAL_RCC_OscConfig+0xc58>)
 800457c:	6a1b      	ldr	r3, [r3, #32]
 800457e:	4ab3      	ldr	r2, [pc, #716]	; (800484c <HAL_RCC_OscConfig+0xc58>)
 8004580:	f043 0301 	orr.w	r3, r3, #1
 8004584:	6213      	str	r3, [r2, #32]
 8004586:	e00b      	b.n	80045a0 <HAL_RCC_OscConfig+0x9ac>
 8004588:	4bb0      	ldr	r3, [pc, #704]	; (800484c <HAL_RCC_OscConfig+0xc58>)
 800458a:	6a1b      	ldr	r3, [r3, #32]
 800458c:	4aaf      	ldr	r2, [pc, #700]	; (800484c <HAL_RCC_OscConfig+0xc58>)
 800458e:	f023 0301 	bic.w	r3, r3, #1
 8004592:	6213      	str	r3, [r2, #32]
 8004594:	4bad      	ldr	r3, [pc, #692]	; (800484c <HAL_RCC_OscConfig+0xc58>)
 8004596:	6a1b      	ldr	r3, [r3, #32]
 8004598:	4aac      	ldr	r2, [pc, #688]	; (800484c <HAL_RCC_OscConfig+0xc58>)
 800459a:	f023 0304 	bic.w	r3, r3, #4
 800459e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80045a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045a4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	68db      	ldr	r3, [r3, #12]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	f000 8081 	beq.w	80046b4 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045b2:	f7fd fee3 	bl	800237c <HAL_GetTick>
 80045b6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045ba:	e00b      	b.n	80045d4 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045bc:	f7fd fede 	bl	800237c <HAL_GetTick>
 80045c0:	4602      	mov	r2, r0
 80045c2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80045c6:	1ad3      	subs	r3, r2, r3
 80045c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d901      	bls.n	80045d4 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80045d0:	2303      	movs	r3, #3
 80045d2:	e345      	b.n	8004c60 <HAL_RCC_OscConfig+0x106c>
 80045d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045d8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80045dc:	2202      	movs	r2, #2
 80045de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045e4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	fa93 f2a3 	rbit	r2, r3
 80045ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045f2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80045f6:	601a      	str	r2, [r3, #0]
 80045f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045fc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004600:	2202      	movs	r2, #2
 8004602:	601a      	str	r2, [r3, #0]
 8004604:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004608:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	fa93 f2a3 	rbit	r2, r3
 8004612:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004616:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800461a:	601a      	str	r2, [r3, #0]
  return result;
 800461c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004620:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004624:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004626:	fab3 f383 	clz	r3, r3
 800462a:	b2db      	uxtb	r3, r3
 800462c:	095b      	lsrs	r3, r3, #5
 800462e:	b2db      	uxtb	r3, r3
 8004630:	f043 0302 	orr.w	r3, r3, #2
 8004634:	b2db      	uxtb	r3, r3
 8004636:	2b02      	cmp	r3, #2
 8004638:	d102      	bne.n	8004640 <HAL_RCC_OscConfig+0xa4c>
 800463a:	4b84      	ldr	r3, [pc, #528]	; (800484c <HAL_RCC_OscConfig+0xc58>)
 800463c:	6a1b      	ldr	r3, [r3, #32]
 800463e:	e013      	b.n	8004668 <HAL_RCC_OscConfig+0xa74>
 8004640:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004644:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004648:	2202      	movs	r2, #2
 800464a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800464c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004650:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	fa93 f2a3 	rbit	r2, r3
 800465a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800465e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8004662:	601a      	str	r2, [r3, #0]
 8004664:	4b79      	ldr	r3, [pc, #484]	; (800484c <HAL_RCC_OscConfig+0xc58>)
 8004666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004668:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800466c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8004670:	2102      	movs	r1, #2
 8004672:	6011      	str	r1, [r2, #0]
 8004674:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004678:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800467c:	6812      	ldr	r2, [r2, #0]
 800467e:	fa92 f1a2 	rbit	r1, r2
 8004682:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004686:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800468a:	6011      	str	r1, [r2, #0]
  return result;
 800468c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004690:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004694:	6812      	ldr	r2, [r2, #0]
 8004696:	fab2 f282 	clz	r2, r2
 800469a:	b2d2      	uxtb	r2, r2
 800469c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80046a0:	b2d2      	uxtb	r2, r2
 80046a2:	f002 021f 	and.w	r2, r2, #31
 80046a6:	2101      	movs	r1, #1
 80046a8:	fa01 f202 	lsl.w	r2, r1, r2
 80046ac:	4013      	ands	r3, r2
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d084      	beq.n	80045bc <HAL_RCC_OscConfig+0x9c8>
 80046b2:	e07f      	b.n	80047b4 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046b4:	f7fd fe62 	bl	800237c <HAL_GetTick>
 80046b8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046bc:	e00b      	b.n	80046d6 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046be:	f7fd fe5d 	bl	800237c <HAL_GetTick>
 80046c2:	4602      	mov	r2, r0
 80046c4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80046c8:	1ad3      	subs	r3, r2, r3
 80046ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d901      	bls.n	80046d6 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80046d2:	2303      	movs	r3, #3
 80046d4:	e2c4      	b.n	8004c60 <HAL_RCC_OscConfig+0x106c>
 80046d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046da:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80046de:	2202      	movs	r2, #2
 80046e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046e6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	fa93 f2a3 	rbit	r2, r3
 80046f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046f4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80046f8:	601a      	str	r2, [r3, #0]
 80046fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046fe:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004702:	2202      	movs	r2, #2
 8004704:	601a      	str	r2, [r3, #0]
 8004706:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800470a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	fa93 f2a3 	rbit	r2, r3
 8004714:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004718:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800471c:	601a      	str	r2, [r3, #0]
  return result;
 800471e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004722:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004726:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004728:	fab3 f383 	clz	r3, r3
 800472c:	b2db      	uxtb	r3, r3
 800472e:	095b      	lsrs	r3, r3, #5
 8004730:	b2db      	uxtb	r3, r3
 8004732:	f043 0302 	orr.w	r3, r3, #2
 8004736:	b2db      	uxtb	r3, r3
 8004738:	2b02      	cmp	r3, #2
 800473a:	d102      	bne.n	8004742 <HAL_RCC_OscConfig+0xb4e>
 800473c:	4b43      	ldr	r3, [pc, #268]	; (800484c <HAL_RCC_OscConfig+0xc58>)
 800473e:	6a1b      	ldr	r3, [r3, #32]
 8004740:	e013      	b.n	800476a <HAL_RCC_OscConfig+0xb76>
 8004742:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004746:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800474a:	2202      	movs	r2, #2
 800474c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800474e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004752:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	fa93 f2a3 	rbit	r2, r3
 800475c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004760:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004764:	601a      	str	r2, [r3, #0]
 8004766:	4b39      	ldr	r3, [pc, #228]	; (800484c <HAL_RCC_OscConfig+0xc58>)
 8004768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800476a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800476e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8004772:	2102      	movs	r1, #2
 8004774:	6011      	str	r1, [r2, #0]
 8004776:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800477a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800477e:	6812      	ldr	r2, [r2, #0]
 8004780:	fa92 f1a2 	rbit	r1, r2
 8004784:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004788:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800478c:	6011      	str	r1, [r2, #0]
  return result;
 800478e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004792:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004796:	6812      	ldr	r2, [r2, #0]
 8004798:	fab2 f282 	clz	r2, r2
 800479c:	b2d2      	uxtb	r2, r2
 800479e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80047a2:	b2d2      	uxtb	r2, r2
 80047a4:	f002 021f 	and.w	r2, r2, #31
 80047a8:	2101      	movs	r1, #1
 80047aa:	fa01 f202 	lsl.w	r2, r1, r2
 80047ae:	4013      	ands	r3, r2
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d184      	bne.n	80046be <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80047b4:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d105      	bne.n	80047c8 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047bc:	4b23      	ldr	r3, [pc, #140]	; (800484c <HAL_RCC_OscConfig+0xc58>)
 80047be:	69db      	ldr	r3, [r3, #28]
 80047c0:	4a22      	ldr	r2, [pc, #136]	; (800484c <HAL_RCC_OscConfig+0xc58>)
 80047c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047c6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047cc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	69db      	ldr	r3, [r3, #28]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	f000 8242 	beq.w	8004c5e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80047da:	4b1c      	ldr	r3, [pc, #112]	; (800484c <HAL_RCC_OscConfig+0xc58>)
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	f003 030c 	and.w	r3, r3, #12
 80047e2:	2b08      	cmp	r3, #8
 80047e4:	f000 8213 	beq.w	8004c0e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047ec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	69db      	ldr	r3, [r3, #28]
 80047f4:	2b02      	cmp	r3, #2
 80047f6:	f040 8162 	bne.w	8004abe <HAL_RCC_OscConfig+0xeca>
 80047fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047fe:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004802:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004806:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004808:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800480c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	fa93 f2a3 	rbit	r2, r3
 8004816:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800481a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800481e:	601a      	str	r2, [r3, #0]
  return result;
 8004820:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004824:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004828:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800482a:	fab3 f383 	clz	r3, r3
 800482e:	b2db      	uxtb	r3, r3
 8004830:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004834:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004838:	009b      	lsls	r3, r3, #2
 800483a:	461a      	mov	r2, r3
 800483c:	2300      	movs	r3, #0
 800483e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004840:	f7fd fd9c 	bl	800237c <HAL_GetTick>
 8004844:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004848:	e00c      	b.n	8004864 <HAL_RCC_OscConfig+0xc70>
 800484a:	bf00      	nop
 800484c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004850:	f7fd fd94 	bl	800237c <HAL_GetTick>
 8004854:	4602      	mov	r2, r0
 8004856:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800485a:	1ad3      	subs	r3, r2, r3
 800485c:	2b02      	cmp	r3, #2
 800485e:	d901      	bls.n	8004864 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8004860:	2303      	movs	r3, #3
 8004862:	e1fd      	b.n	8004c60 <HAL_RCC_OscConfig+0x106c>
 8004864:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004868:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800486c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004870:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004872:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004876:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	fa93 f2a3 	rbit	r2, r3
 8004880:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004884:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004888:	601a      	str	r2, [r3, #0]
  return result;
 800488a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800488e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004892:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004894:	fab3 f383 	clz	r3, r3
 8004898:	b2db      	uxtb	r3, r3
 800489a:	095b      	lsrs	r3, r3, #5
 800489c:	b2db      	uxtb	r3, r3
 800489e:	f043 0301 	orr.w	r3, r3, #1
 80048a2:	b2db      	uxtb	r3, r3
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	d102      	bne.n	80048ae <HAL_RCC_OscConfig+0xcba>
 80048a8:	4bb0      	ldr	r3, [pc, #704]	; (8004b6c <HAL_RCC_OscConfig+0xf78>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	e027      	b.n	80048fe <HAL_RCC_OscConfig+0xd0a>
 80048ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048b2:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80048b6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80048ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048c0:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	fa93 f2a3 	rbit	r2, r3
 80048ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048ce:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80048d2:	601a      	str	r2, [r3, #0]
 80048d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048d8:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80048dc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80048e0:	601a      	str	r2, [r3, #0]
 80048e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048e6:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	fa93 f2a3 	rbit	r2, r3
 80048f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048f4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80048f8:	601a      	str	r2, [r3, #0]
 80048fa:	4b9c      	ldr	r3, [pc, #624]	; (8004b6c <HAL_RCC_OscConfig+0xf78>)
 80048fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048fe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004902:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8004906:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800490a:	6011      	str	r1, [r2, #0]
 800490c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004910:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8004914:	6812      	ldr	r2, [r2, #0]
 8004916:	fa92 f1a2 	rbit	r1, r2
 800491a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800491e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004922:	6011      	str	r1, [r2, #0]
  return result;
 8004924:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004928:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800492c:	6812      	ldr	r2, [r2, #0]
 800492e:	fab2 f282 	clz	r2, r2
 8004932:	b2d2      	uxtb	r2, r2
 8004934:	f042 0220 	orr.w	r2, r2, #32
 8004938:	b2d2      	uxtb	r2, r2
 800493a:	f002 021f 	and.w	r2, r2, #31
 800493e:	2101      	movs	r1, #1
 8004940:	fa01 f202 	lsl.w	r2, r1, r2
 8004944:	4013      	ands	r3, r2
 8004946:	2b00      	cmp	r3, #0
 8004948:	d182      	bne.n	8004850 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800494a:	4b88      	ldr	r3, [pc, #544]	; (8004b6c <HAL_RCC_OscConfig+0xf78>)
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004952:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004956:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800495e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004962:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	6a1b      	ldr	r3, [r3, #32]
 800496a:	430b      	orrs	r3, r1
 800496c:	497f      	ldr	r1, [pc, #508]	; (8004b6c <HAL_RCC_OscConfig+0xf78>)
 800496e:	4313      	orrs	r3, r2
 8004970:	604b      	str	r3, [r1, #4]
 8004972:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004976:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800497a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800497e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004980:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004984:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	fa93 f2a3 	rbit	r2, r3
 800498e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004992:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004996:	601a      	str	r2, [r3, #0]
  return result;
 8004998:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800499c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80049a0:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80049a2:	fab3 f383 	clz	r3, r3
 80049a6:	b2db      	uxtb	r3, r3
 80049a8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80049ac:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80049b0:	009b      	lsls	r3, r3, #2
 80049b2:	461a      	mov	r2, r3
 80049b4:	2301      	movs	r3, #1
 80049b6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049b8:	f7fd fce0 	bl	800237c <HAL_GetTick>
 80049bc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80049c0:	e009      	b.n	80049d6 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049c2:	f7fd fcdb 	bl	800237c <HAL_GetTick>
 80049c6:	4602      	mov	r2, r0
 80049c8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80049cc:	1ad3      	subs	r3, r2, r3
 80049ce:	2b02      	cmp	r3, #2
 80049d0:	d901      	bls.n	80049d6 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80049d2:	2303      	movs	r3, #3
 80049d4:	e144      	b.n	8004c60 <HAL_RCC_OscConfig+0x106c>
 80049d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049da:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80049de:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80049e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049e8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	fa93 f2a3 	rbit	r2, r3
 80049f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049f6:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80049fa:	601a      	str	r2, [r3, #0]
  return result;
 80049fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a00:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004a04:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004a06:	fab3 f383 	clz	r3, r3
 8004a0a:	b2db      	uxtb	r3, r3
 8004a0c:	095b      	lsrs	r3, r3, #5
 8004a0e:	b2db      	uxtb	r3, r3
 8004a10:	f043 0301 	orr.w	r3, r3, #1
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d102      	bne.n	8004a20 <HAL_RCC_OscConfig+0xe2c>
 8004a1a:	4b54      	ldr	r3, [pc, #336]	; (8004b6c <HAL_RCC_OscConfig+0xf78>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	e027      	b.n	8004a70 <HAL_RCC_OscConfig+0xe7c>
 8004a20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a24:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004a28:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004a2c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a32:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	fa93 f2a3 	rbit	r2, r3
 8004a3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a40:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8004a44:	601a      	str	r2, [r3, #0]
 8004a46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a4a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004a4e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004a52:	601a      	str	r2, [r3, #0]
 8004a54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a58:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	fa93 f2a3 	rbit	r2, r3
 8004a62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a66:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8004a6a:	601a      	str	r2, [r3, #0]
 8004a6c:	4b3f      	ldr	r3, [pc, #252]	; (8004b6c <HAL_RCC_OscConfig+0xf78>)
 8004a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a70:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004a74:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8004a78:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004a7c:	6011      	str	r1, [r2, #0]
 8004a7e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004a82:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8004a86:	6812      	ldr	r2, [r2, #0]
 8004a88:	fa92 f1a2 	rbit	r1, r2
 8004a8c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004a90:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004a94:	6011      	str	r1, [r2, #0]
  return result;
 8004a96:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004a9a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004a9e:	6812      	ldr	r2, [r2, #0]
 8004aa0:	fab2 f282 	clz	r2, r2
 8004aa4:	b2d2      	uxtb	r2, r2
 8004aa6:	f042 0220 	orr.w	r2, r2, #32
 8004aaa:	b2d2      	uxtb	r2, r2
 8004aac:	f002 021f 	and.w	r2, r2, #31
 8004ab0:	2101      	movs	r1, #1
 8004ab2:	fa01 f202 	lsl.w	r2, r1, r2
 8004ab6:	4013      	ands	r3, r2
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d082      	beq.n	80049c2 <HAL_RCC_OscConfig+0xdce>
 8004abc:	e0cf      	b.n	8004c5e <HAL_RCC_OscConfig+0x106a>
 8004abe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ac2:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004ac6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004aca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004acc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ad0:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	fa93 f2a3 	rbit	r2, r3
 8004ada:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ade:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004ae2:	601a      	str	r2, [r3, #0]
  return result;
 8004ae4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ae8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004aec:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004aee:	fab3 f383 	clz	r3, r3
 8004af2:	b2db      	uxtb	r3, r3
 8004af4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004af8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004afc:	009b      	lsls	r3, r3, #2
 8004afe:	461a      	mov	r2, r3
 8004b00:	2300      	movs	r3, #0
 8004b02:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b04:	f7fd fc3a 	bl	800237c <HAL_GetTick>
 8004b08:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b0c:	e009      	b.n	8004b22 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b0e:	f7fd fc35 	bl	800237c <HAL_GetTick>
 8004b12:	4602      	mov	r2, r0
 8004b14:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004b18:	1ad3      	subs	r3, r2, r3
 8004b1a:	2b02      	cmp	r3, #2
 8004b1c:	d901      	bls.n	8004b22 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8004b1e:	2303      	movs	r3, #3
 8004b20:	e09e      	b.n	8004c60 <HAL_RCC_OscConfig+0x106c>
 8004b22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b26:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004b2a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004b2e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b34:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	fa93 f2a3 	rbit	r2, r3
 8004b3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b42:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004b46:	601a      	str	r2, [r3, #0]
  return result;
 8004b48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b4c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004b50:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b52:	fab3 f383 	clz	r3, r3
 8004b56:	b2db      	uxtb	r3, r3
 8004b58:	095b      	lsrs	r3, r3, #5
 8004b5a:	b2db      	uxtb	r3, r3
 8004b5c:	f043 0301 	orr.w	r3, r3, #1
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	2b01      	cmp	r3, #1
 8004b64:	d104      	bne.n	8004b70 <HAL_RCC_OscConfig+0xf7c>
 8004b66:	4b01      	ldr	r3, [pc, #4]	; (8004b6c <HAL_RCC_OscConfig+0xf78>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	e029      	b.n	8004bc0 <HAL_RCC_OscConfig+0xfcc>
 8004b6c:	40021000 	.word	0x40021000
 8004b70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b74:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004b78:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004b7c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b82:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	fa93 f2a3 	rbit	r2, r3
 8004b8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b90:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004b94:	601a      	str	r2, [r3, #0]
 8004b96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b9a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004b9e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004ba2:	601a      	str	r2, [r3, #0]
 8004ba4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ba8:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	fa93 f2a3 	rbit	r2, r3
 8004bb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bb6:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8004bba:	601a      	str	r2, [r3, #0]
 8004bbc:	4b2b      	ldr	r3, [pc, #172]	; (8004c6c <HAL_RCC_OscConfig+0x1078>)
 8004bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004bc4:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004bc8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004bcc:	6011      	str	r1, [r2, #0]
 8004bce:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004bd2:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004bd6:	6812      	ldr	r2, [r2, #0]
 8004bd8:	fa92 f1a2 	rbit	r1, r2
 8004bdc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004be0:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004be4:	6011      	str	r1, [r2, #0]
  return result;
 8004be6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004bea:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004bee:	6812      	ldr	r2, [r2, #0]
 8004bf0:	fab2 f282 	clz	r2, r2
 8004bf4:	b2d2      	uxtb	r2, r2
 8004bf6:	f042 0220 	orr.w	r2, r2, #32
 8004bfa:	b2d2      	uxtb	r2, r2
 8004bfc:	f002 021f 	and.w	r2, r2, #31
 8004c00:	2101      	movs	r1, #1
 8004c02:	fa01 f202 	lsl.w	r2, r1, r2
 8004c06:	4013      	ands	r3, r2
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d180      	bne.n	8004b0e <HAL_RCC_OscConfig+0xf1a>
 8004c0c:	e027      	b.n	8004c5e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c12:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	69db      	ldr	r3, [r3, #28]
 8004c1a:	2b01      	cmp	r3, #1
 8004c1c:	d101      	bne.n	8004c22 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e01e      	b.n	8004c60 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004c22:	4b12      	ldr	r3, [pc, #72]	; (8004c6c <HAL_RCC_OscConfig+0x1078>)
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004c2a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004c2e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004c32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c36:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	6a1b      	ldr	r3, [r3, #32]
 8004c3e:	429a      	cmp	r2, r3
 8004c40:	d10b      	bne.n	8004c5a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004c42:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004c46:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004c4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c4e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004c56:	429a      	cmp	r2, r3
 8004c58:	d001      	beq.n	8004c5e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e000      	b.n	8004c60 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8004c5e:	2300      	movs	r3, #0
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}
 8004c6a:	bf00      	nop
 8004c6c:	40021000 	.word	0x40021000

08004c70 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b09e      	sub	sp, #120	; 0x78
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
 8004c78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d101      	bne.n	8004c88 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004c84:	2301      	movs	r3, #1
 8004c86:	e162      	b.n	8004f4e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c88:	4b90      	ldr	r3, [pc, #576]	; (8004ecc <HAL_RCC_ClockConfig+0x25c>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f003 0307 	and.w	r3, r3, #7
 8004c90:	683a      	ldr	r2, [r7, #0]
 8004c92:	429a      	cmp	r2, r3
 8004c94:	d910      	bls.n	8004cb8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c96:	4b8d      	ldr	r3, [pc, #564]	; (8004ecc <HAL_RCC_ClockConfig+0x25c>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f023 0207 	bic.w	r2, r3, #7
 8004c9e:	498b      	ldr	r1, [pc, #556]	; (8004ecc <HAL_RCC_ClockConfig+0x25c>)
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ca6:	4b89      	ldr	r3, [pc, #548]	; (8004ecc <HAL_RCC_ClockConfig+0x25c>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f003 0307 	and.w	r3, r3, #7
 8004cae:	683a      	ldr	r2, [r7, #0]
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	d001      	beq.n	8004cb8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	e14a      	b.n	8004f4e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f003 0302 	and.w	r3, r3, #2
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d008      	beq.n	8004cd6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cc4:	4b82      	ldr	r3, [pc, #520]	; (8004ed0 <HAL_RCC_ClockConfig+0x260>)
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	497f      	ldr	r1, [pc, #508]	; (8004ed0 <HAL_RCC_ClockConfig+0x260>)
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f003 0301 	and.w	r3, r3, #1
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	f000 80dc 	beq.w	8004e9c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d13c      	bne.n	8004d66 <HAL_RCC_ClockConfig+0xf6>
 8004cec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004cf0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cf2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004cf4:	fa93 f3a3 	rbit	r3, r3
 8004cf8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004cfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cfc:	fab3 f383 	clz	r3, r3
 8004d00:	b2db      	uxtb	r3, r3
 8004d02:	095b      	lsrs	r3, r3, #5
 8004d04:	b2db      	uxtb	r3, r3
 8004d06:	f043 0301 	orr.w	r3, r3, #1
 8004d0a:	b2db      	uxtb	r3, r3
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d102      	bne.n	8004d16 <HAL_RCC_ClockConfig+0xa6>
 8004d10:	4b6f      	ldr	r3, [pc, #444]	; (8004ed0 <HAL_RCC_ClockConfig+0x260>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	e00f      	b.n	8004d36 <HAL_RCC_ClockConfig+0xc6>
 8004d16:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004d1a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d1c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004d1e:	fa93 f3a3 	rbit	r3, r3
 8004d22:	667b      	str	r3, [r7, #100]	; 0x64
 8004d24:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004d28:	663b      	str	r3, [r7, #96]	; 0x60
 8004d2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d2c:	fa93 f3a3 	rbit	r3, r3
 8004d30:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d32:	4b67      	ldr	r3, [pc, #412]	; (8004ed0 <HAL_RCC_ClockConfig+0x260>)
 8004d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d36:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004d3a:	65ba      	str	r2, [r7, #88]	; 0x58
 8004d3c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004d3e:	fa92 f2a2 	rbit	r2, r2
 8004d42:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004d44:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004d46:	fab2 f282 	clz	r2, r2
 8004d4a:	b2d2      	uxtb	r2, r2
 8004d4c:	f042 0220 	orr.w	r2, r2, #32
 8004d50:	b2d2      	uxtb	r2, r2
 8004d52:	f002 021f 	and.w	r2, r2, #31
 8004d56:	2101      	movs	r1, #1
 8004d58:	fa01 f202 	lsl.w	r2, r1, r2
 8004d5c:	4013      	ands	r3, r2
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d17b      	bne.n	8004e5a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	e0f3      	b.n	8004f4e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	2b02      	cmp	r3, #2
 8004d6c:	d13c      	bne.n	8004de8 <HAL_RCC_ClockConfig+0x178>
 8004d6e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004d72:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d76:	fa93 f3a3 	rbit	r3, r3
 8004d7a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004d7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d7e:	fab3 f383 	clz	r3, r3
 8004d82:	b2db      	uxtb	r3, r3
 8004d84:	095b      	lsrs	r3, r3, #5
 8004d86:	b2db      	uxtb	r3, r3
 8004d88:	f043 0301 	orr.w	r3, r3, #1
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	2b01      	cmp	r3, #1
 8004d90:	d102      	bne.n	8004d98 <HAL_RCC_ClockConfig+0x128>
 8004d92:	4b4f      	ldr	r3, [pc, #316]	; (8004ed0 <HAL_RCC_ClockConfig+0x260>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	e00f      	b.n	8004db8 <HAL_RCC_ClockConfig+0x148>
 8004d98:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004d9c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004da0:	fa93 f3a3 	rbit	r3, r3
 8004da4:	647b      	str	r3, [r7, #68]	; 0x44
 8004da6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004daa:	643b      	str	r3, [r7, #64]	; 0x40
 8004dac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004dae:	fa93 f3a3 	rbit	r3, r3
 8004db2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004db4:	4b46      	ldr	r3, [pc, #280]	; (8004ed0 <HAL_RCC_ClockConfig+0x260>)
 8004db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004dbc:	63ba      	str	r2, [r7, #56]	; 0x38
 8004dbe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004dc0:	fa92 f2a2 	rbit	r2, r2
 8004dc4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8004dc6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004dc8:	fab2 f282 	clz	r2, r2
 8004dcc:	b2d2      	uxtb	r2, r2
 8004dce:	f042 0220 	orr.w	r2, r2, #32
 8004dd2:	b2d2      	uxtb	r2, r2
 8004dd4:	f002 021f 	and.w	r2, r2, #31
 8004dd8:	2101      	movs	r1, #1
 8004dda:	fa01 f202 	lsl.w	r2, r1, r2
 8004dde:	4013      	ands	r3, r2
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d13a      	bne.n	8004e5a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004de4:	2301      	movs	r3, #1
 8004de6:	e0b2      	b.n	8004f4e <HAL_RCC_ClockConfig+0x2de>
 8004de8:	2302      	movs	r3, #2
 8004dea:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dee:	fa93 f3a3 	rbit	r3, r3
 8004df2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004df6:	fab3 f383 	clz	r3, r3
 8004dfa:	b2db      	uxtb	r3, r3
 8004dfc:	095b      	lsrs	r3, r3, #5
 8004dfe:	b2db      	uxtb	r3, r3
 8004e00:	f043 0301 	orr.w	r3, r3, #1
 8004e04:	b2db      	uxtb	r3, r3
 8004e06:	2b01      	cmp	r3, #1
 8004e08:	d102      	bne.n	8004e10 <HAL_RCC_ClockConfig+0x1a0>
 8004e0a:	4b31      	ldr	r3, [pc, #196]	; (8004ed0 <HAL_RCC_ClockConfig+0x260>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	e00d      	b.n	8004e2c <HAL_RCC_ClockConfig+0x1bc>
 8004e10:	2302      	movs	r3, #2
 8004e12:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e16:	fa93 f3a3 	rbit	r3, r3
 8004e1a:	627b      	str	r3, [r7, #36]	; 0x24
 8004e1c:	2302      	movs	r3, #2
 8004e1e:	623b      	str	r3, [r7, #32]
 8004e20:	6a3b      	ldr	r3, [r7, #32]
 8004e22:	fa93 f3a3 	rbit	r3, r3
 8004e26:	61fb      	str	r3, [r7, #28]
 8004e28:	4b29      	ldr	r3, [pc, #164]	; (8004ed0 <HAL_RCC_ClockConfig+0x260>)
 8004e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e2c:	2202      	movs	r2, #2
 8004e2e:	61ba      	str	r2, [r7, #24]
 8004e30:	69ba      	ldr	r2, [r7, #24]
 8004e32:	fa92 f2a2 	rbit	r2, r2
 8004e36:	617a      	str	r2, [r7, #20]
  return result;
 8004e38:	697a      	ldr	r2, [r7, #20]
 8004e3a:	fab2 f282 	clz	r2, r2
 8004e3e:	b2d2      	uxtb	r2, r2
 8004e40:	f042 0220 	orr.w	r2, r2, #32
 8004e44:	b2d2      	uxtb	r2, r2
 8004e46:	f002 021f 	and.w	r2, r2, #31
 8004e4a:	2101      	movs	r1, #1
 8004e4c:	fa01 f202 	lsl.w	r2, r1, r2
 8004e50:	4013      	ands	r3, r2
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d101      	bne.n	8004e5a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	e079      	b.n	8004f4e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e5a:	4b1d      	ldr	r3, [pc, #116]	; (8004ed0 <HAL_RCC_ClockConfig+0x260>)
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	f023 0203 	bic.w	r2, r3, #3
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	491a      	ldr	r1, [pc, #104]	; (8004ed0 <HAL_RCC_ClockConfig+0x260>)
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e6c:	f7fd fa86 	bl	800237c <HAL_GetTick>
 8004e70:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e72:	e00a      	b.n	8004e8a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e74:	f7fd fa82 	bl	800237c <HAL_GetTick>
 8004e78:	4602      	mov	r2, r0
 8004e7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e7c:	1ad3      	subs	r3, r2, r3
 8004e7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d901      	bls.n	8004e8a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004e86:	2303      	movs	r3, #3
 8004e88:	e061      	b.n	8004f4e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e8a:	4b11      	ldr	r3, [pc, #68]	; (8004ed0 <HAL_RCC_ClockConfig+0x260>)
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	f003 020c 	and.w	r2, r3, #12
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	009b      	lsls	r3, r3, #2
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	d1eb      	bne.n	8004e74 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e9c:	4b0b      	ldr	r3, [pc, #44]	; (8004ecc <HAL_RCC_ClockConfig+0x25c>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f003 0307 	and.w	r3, r3, #7
 8004ea4:	683a      	ldr	r2, [r7, #0]
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	d214      	bcs.n	8004ed4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004eaa:	4b08      	ldr	r3, [pc, #32]	; (8004ecc <HAL_RCC_ClockConfig+0x25c>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f023 0207 	bic.w	r2, r3, #7
 8004eb2:	4906      	ldr	r1, [pc, #24]	; (8004ecc <HAL_RCC_ClockConfig+0x25c>)
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004eba:	4b04      	ldr	r3, [pc, #16]	; (8004ecc <HAL_RCC_ClockConfig+0x25c>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f003 0307 	and.w	r3, r3, #7
 8004ec2:	683a      	ldr	r2, [r7, #0]
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	d005      	beq.n	8004ed4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	e040      	b.n	8004f4e <HAL_RCC_ClockConfig+0x2de>
 8004ecc:	40022000 	.word	0x40022000
 8004ed0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f003 0304 	and.w	r3, r3, #4
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d008      	beq.n	8004ef2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ee0:	4b1d      	ldr	r3, [pc, #116]	; (8004f58 <HAL_RCC_ClockConfig+0x2e8>)
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	68db      	ldr	r3, [r3, #12]
 8004eec:	491a      	ldr	r1, [pc, #104]	; (8004f58 <HAL_RCC_ClockConfig+0x2e8>)
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f003 0308 	and.w	r3, r3, #8
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d009      	beq.n	8004f12 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004efe:	4b16      	ldr	r3, [pc, #88]	; (8004f58 <HAL_RCC_ClockConfig+0x2e8>)
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	691b      	ldr	r3, [r3, #16]
 8004f0a:	00db      	lsls	r3, r3, #3
 8004f0c:	4912      	ldr	r1, [pc, #72]	; (8004f58 <HAL_RCC_ClockConfig+0x2e8>)
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004f12:	f000 f829 	bl	8004f68 <HAL_RCC_GetSysClockFreq>
 8004f16:	4601      	mov	r1, r0
 8004f18:	4b0f      	ldr	r3, [pc, #60]	; (8004f58 <HAL_RCC_ClockConfig+0x2e8>)
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f20:	22f0      	movs	r2, #240	; 0xf0
 8004f22:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f24:	693a      	ldr	r2, [r7, #16]
 8004f26:	fa92 f2a2 	rbit	r2, r2
 8004f2a:	60fa      	str	r2, [r7, #12]
  return result;
 8004f2c:	68fa      	ldr	r2, [r7, #12]
 8004f2e:	fab2 f282 	clz	r2, r2
 8004f32:	b2d2      	uxtb	r2, r2
 8004f34:	40d3      	lsrs	r3, r2
 8004f36:	4a09      	ldr	r2, [pc, #36]	; (8004f5c <HAL_RCC_ClockConfig+0x2ec>)
 8004f38:	5cd3      	ldrb	r3, [r2, r3]
 8004f3a:	fa21 f303 	lsr.w	r3, r1, r3
 8004f3e:	4a08      	ldr	r2, [pc, #32]	; (8004f60 <HAL_RCC_ClockConfig+0x2f0>)
 8004f40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004f42:	4b08      	ldr	r3, [pc, #32]	; (8004f64 <HAL_RCC_ClockConfig+0x2f4>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4618      	mov	r0, r3
 8004f48:	f7fd f9d4 	bl	80022f4 <HAL_InitTick>
  
  return HAL_OK;
 8004f4c:	2300      	movs	r3, #0
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	3778      	adds	r7, #120	; 0x78
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}
 8004f56:	bf00      	nop
 8004f58:	40021000 	.word	0x40021000
 8004f5c:	0800b7a4 	.word	0x0800b7a4
 8004f60:	2000002c 	.word	0x2000002c
 8004f64:	20000030 	.word	0x20000030

08004f68 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b08b      	sub	sp, #44	; 0x2c
 8004f6c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	61fb      	str	r3, [r7, #28]
 8004f72:	2300      	movs	r3, #0
 8004f74:	61bb      	str	r3, [r7, #24]
 8004f76:	2300      	movs	r3, #0
 8004f78:	627b      	str	r3, [r7, #36]	; 0x24
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004f82:	4b29      	ldr	r3, [pc, #164]	; (8005028 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004f88:	69fb      	ldr	r3, [r7, #28]
 8004f8a:	f003 030c 	and.w	r3, r3, #12
 8004f8e:	2b04      	cmp	r3, #4
 8004f90:	d002      	beq.n	8004f98 <HAL_RCC_GetSysClockFreq+0x30>
 8004f92:	2b08      	cmp	r3, #8
 8004f94:	d003      	beq.n	8004f9e <HAL_RCC_GetSysClockFreq+0x36>
 8004f96:	e03c      	b.n	8005012 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004f98:	4b24      	ldr	r3, [pc, #144]	; (800502c <HAL_RCC_GetSysClockFreq+0xc4>)
 8004f9a:	623b      	str	r3, [r7, #32]
      break;
 8004f9c:	e03c      	b.n	8005018 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004f9e:	69fb      	ldr	r3, [r7, #28]
 8004fa0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004fa4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004fa8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004faa:	68ba      	ldr	r2, [r7, #8]
 8004fac:	fa92 f2a2 	rbit	r2, r2
 8004fb0:	607a      	str	r2, [r7, #4]
  return result;
 8004fb2:	687a      	ldr	r2, [r7, #4]
 8004fb4:	fab2 f282 	clz	r2, r2
 8004fb8:	b2d2      	uxtb	r2, r2
 8004fba:	40d3      	lsrs	r3, r2
 8004fbc:	4a1c      	ldr	r2, [pc, #112]	; (8005030 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004fbe:	5cd3      	ldrb	r3, [r2, r3]
 8004fc0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004fc2:	4b19      	ldr	r3, [pc, #100]	; (8005028 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fc6:	f003 030f 	and.w	r3, r3, #15
 8004fca:	220f      	movs	r2, #15
 8004fcc:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fce:	693a      	ldr	r2, [r7, #16]
 8004fd0:	fa92 f2a2 	rbit	r2, r2
 8004fd4:	60fa      	str	r2, [r7, #12]
  return result;
 8004fd6:	68fa      	ldr	r2, [r7, #12]
 8004fd8:	fab2 f282 	clz	r2, r2
 8004fdc:	b2d2      	uxtb	r2, r2
 8004fde:	40d3      	lsrs	r3, r2
 8004fe0:	4a14      	ldr	r2, [pc, #80]	; (8005034 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004fe2:	5cd3      	ldrb	r3, [r2, r3]
 8004fe4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004fe6:	69fb      	ldr	r3, [r7, #28]
 8004fe8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d008      	beq.n	8005002 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004ff0:	4a0e      	ldr	r2, [pc, #56]	; (800502c <HAL_RCC_GetSysClockFreq+0xc4>)
 8004ff2:	69bb      	ldr	r3, [r7, #24]
 8004ff4:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	fb02 f303 	mul.w	r3, r2, r3
 8004ffe:	627b      	str	r3, [r7, #36]	; 0x24
 8005000:	e004      	b.n	800500c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	4a0c      	ldr	r2, [pc, #48]	; (8005038 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005006:	fb02 f303 	mul.w	r3, r2, r3
 800500a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800500c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800500e:	623b      	str	r3, [r7, #32]
      break;
 8005010:	e002      	b.n	8005018 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005012:	4b06      	ldr	r3, [pc, #24]	; (800502c <HAL_RCC_GetSysClockFreq+0xc4>)
 8005014:	623b      	str	r3, [r7, #32]
      break;
 8005016:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005018:	6a3b      	ldr	r3, [r7, #32]
}
 800501a:	4618      	mov	r0, r3
 800501c:	372c      	adds	r7, #44	; 0x2c
 800501e:	46bd      	mov	sp, r7
 8005020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005024:	4770      	bx	lr
 8005026:	bf00      	nop
 8005028:	40021000 	.word	0x40021000
 800502c:	007a1200 	.word	0x007a1200
 8005030:	0800b7bc 	.word	0x0800b7bc
 8005034:	0800b7cc 	.word	0x0800b7cc
 8005038:	003d0900 	.word	0x003d0900

0800503c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800503c:	b480      	push	{r7}
 800503e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005040:	4b03      	ldr	r3, [pc, #12]	; (8005050 <HAL_RCC_GetHCLKFreq+0x14>)
 8005042:	681b      	ldr	r3, [r3, #0]
}
 8005044:	4618      	mov	r0, r3
 8005046:	46bd      	mov	sp, r7
 8005048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504c:	4770      	bx	lr
 800504e:	bf00      	nop
 8005050:	2000002c 	.word	0x2000002c

08005054 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b082      	sub	sp, #8
 8005058:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800505a:	f7ff ffef 	bl	800503c <HAL_RCC_GetHCLKFreq>
 800505e:	4601      	mov	r1, r0
 8005060:	4b0b      	ldr	r3, [pc, #44]	; (8005090 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005068:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800506c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800506e:	687a      	ldr	r2, [r7, #4]
 8005070:	fa92 f2a2 	rbit	r2, r2
 8005074:	603a      	str	r2, [r7, #0]
  return result;
 8005076:	683a      	ldr	r2, [r7, #0]
 8005078:	fab2 f282 	clz	r2, r2
 800507c:	b2d2      	uxtb	r2, r2
 800507e:	40d3      	lsrs	r3, r2
 8005080:	4a04      	ldr	r2, [pc, #16]	; (8005094 <HAL_RCC_GetPCLK1Freq+0x40>)
 8005082:	5cd3      	ldrb	r3, [r2, r3]
 8005084:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8005088:	4618      	mov	r0, r3
 800508a:	3708      	adds	r7, #8
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}
 8005090:	40021000 	.word	0x40021000
 8005094:	0800b7b4 	.word	0x0800b7b4

08005098 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b082      	sub	sp, #8
 800509c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800509e:	f7ff ffcd 	bl	800503c <HAL_RCC_GetHCLKFreq>
 80050a2:	4601      	mov	r1, r0
 80050a4:	4b0b      	ldr	r3, [pc, #44]	; (80050d4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80050ac:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80050b0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050b2:	687a      	ldr	r2, [r7, #4]
 80050b4:	fa92 f2a2 	rbit	r2, r2
 80050b8:	603a      	str	r2, [r7, #0]
  return result;
 80050ba:	683a      	ldr	r2, [r7, #0]
 80050bc:	fab2 f282 	clz	r2, r2
 80050c0:	b2d2      	uxtb	r2, r2
 80050c2:	40d3      	lsrs	r3, r2
 80050c4:	4a04      	ldr	r2, [pc, #16]	; (80050d8 <HAL_RCC_GetPCLK2Freq+0x40>)
 80050c6:	5cd3      	ldrb	r3, [r2, r3]
 80050c8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80050cc:	4618      	mov	r0, r3
 80050ce:	3708      	adds	r7, #8
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}
 80050d4:	40021000 	.word	0x40021000
 80050d8:	0800b7b4 	.word	0x0800b7b4

080050dc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b092      	sub	sp, #72	; 0x48
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80050e4:	2300      	movs	r3, #0
 80050e6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80050e8:	2300      	movs	r3, #0
 80050ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80050ec:	2300      	movs	r3, #0
 80050ee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	f000 80d4 	beq.w	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005100:	4b4e      	ldr	r3, [pc, #312]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005102:	69db      	ldr	r3, [r3, #28]
 8005104:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005108:	2b00      	cmp	r3, #0
 800510a:	d10e      	bne.n	800512a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800510c:	4b4b      	ldr	r3, [pc, #300]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800510e:	69db      	ldr	r3, [r3, #28]
 8005110:	4a4a      	ldr	r2, [pc, #296]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005112:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005116:	61d3      	str	r3, [r2, #28]
 8005118:	4b48      	ldr	r3, [pc, #288]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800511a:	69db      	ldr	r3, [r3, #28]
 800511c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005120:	60bb      	str	r3, [r7, #8]
 8005122:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005124:	2301      	movs	r3, #1
 8005126:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800512a:	4b45      	ldr	r3, [pc, #276]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005132:	2b00      	cmp	r3, #0
 8005134:	d118      	bne.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005136:	4b42      	ldr	r3, [pc, #264]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a41      	ldr	r2, [pc, #260]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800513c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005140:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005142:	f7fd f91b 	bl	800237c <HAL_GetTick>
 8005146:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005148:	e008      	b.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800514a:	f7fd f917 	bl	800237c <HAL_GetTick>
 800514e:	4602      	mov	r2, r0
 8005150:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005152:	1ad3      	subs	r3, r2, r3
 8005154:	2b64      	cmp	r3, #100	; 0x64
 8005156:	d901      	bls.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005158:	2303      	movs	r3, #3
 800515a:	e14b      	b.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800515c:	4b38      	ldr	r3, [pc, #224]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005164:	2b00      	cmp	r3, #0
 8005166:	d0f0      	beq.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005168:	4b34      	ldr	r3, [pc, #208]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800516a:	6a1b      	ldr	r3, [r3, #32]
 800516c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005170:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005172:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005174:	2b00      	cmp	r3, #0
 8005176:	f000 8084 	beq.w	8005282 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005182:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005184:	429a      	cmp	r2, r3
 8005186:	d07c      	beq.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005188:	4b2c      	ldr	r3, [pc, #176]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800518a:	6a1b      	ldr	r3, [r3, #32]
 800518c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005190:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005192:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005196:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800519a:	fa93 f3a3 	rbit	r3, r3
 800519e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80051a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80051a2:	fab3 f383 	clz	r3, r3
 80051a6:	b2db      	uxtb	r3, r3
 80051a8:	461a      	mov	r2, r3
 80051aa:	4b26      	ldr	r3, [pc, #152]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80051ac:	4413      	add	r3, r2
 80051ae:	009b      	lsls	r3, r3, #2
 80051b0:	461a      	mov	r2, r3
 80051b2:	2301      	movs	r3, #1
 80051b4:	6013      	str	r3, [r2, #0]
 80051b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80051ba:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051be:	fa93 f3a3 	rbit	r3, r3
 80051c2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80051c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80051c6:	fab3 f383 	clz	r3, r3
 80051ca:	b2db      	uxtb	r3, r3
 80051cc:	461a      	mov	r2, r3
 80051ce:	4b1d      	ldr	r3, [pc, #116]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80051d0:	4413      	add	r3, r2
 80051d2:	009b      	lsls	r3, r3, #2
 80051d4:	461a      	mov	r2, r3
 80051d6:	2300      	movs	r3, #0
 80051d8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80051da:	4a18      	ldr	r2, [pc, #96]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051de:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80051e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051e2:	f003 0301 	and.w	r3, r3, #1
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d04b      	beq.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051ea:	f7fd f8c7 	bl	800237c <HAL_GetTick>
 80051ee:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051f0:	e00a      	b.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051f2:	f7fd f8c3 	bl	800237c <HAL_GetTick>
 80051f6:	4602      	mov	r2, r0
 80051f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051fa:	1ad3      	subs	r3, r2, r3
 80051fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005200:	4293      	cmp	r3, r2
 8005202:	d901      	bls.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005204:	2303      	movs	r3, #3
 8005206:	e0f5      	b.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8005208:	2302      	movs	r3, #2
 800520a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800520c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800520e:	fa93 f3a3 	rbit	r3, r3
 8005212:	627b      	str	r3, [r7, #36]	; 0x24
 8005214:	2302      	movs	r3, #2
 8005216:	623b      	str	r3, [r7, #32]
 8005218:	6a3b      	ldr	r3, [r7, #32]
 800521a:	fa93 f3a3 	rbit	r3, r3
 800521e:	61fb      	str	r3, [r7, #28]
  return result;
 8005220:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005222:	fab3 f383 	clz	r3, r3
 8005226:	b2db      	uxtb	r3, r3
 8005228:	095b      	lsrs	r3, r3, #5
 800522a:	b2db      	uxtb	r3, r3
 800522c:	f043 0302 	orr.w	r3, r3, #2
 8005230:	b2db      	uxtb	r3, r3
 8005232:	2b02      	cmp	r3, #2
 8005234:	d108      	bne.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8005236:	4b01      	ldr	r3, [pc, #4]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005238:	6a1b      	ldr	r3, [r3, #32]
 800523a:	e00d      	b.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800523c:	40021000 	.word	0x40021000
 8005240:	40007000 	.word	0x40007000
 8005244:	10908100 	.word	0x10908100
 8005248:	2302      	movs	r3, #2
 800524a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800524c:	69bb      	ldr	r3, [r7, #24]
 800524e:	fa93 f3a3 	rbit	r3, r3
 8005252:	617b      	str	r3, [r7, #20]
 8005254:	4b69      	ldr	r3, [pc, #420]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005258:	2202      	movs	r2, #2
 800525a:	613a      	str	r2, [r7, #16]
 800525c:	693a      	ldr	r2, [r7, #16]
 800525e:	fa92 f2a2 	rbit	r2, r2
 8005262:	60fa      	str	r2, [r7, #12]
  return result;
 8005264:	68fa      	ldr	r2, [r7, #12]
 8005266:	fab2 f282 	clz	r2, r2
 800526a:	b2d2      	uxtb	r2, r2
 800526c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005270:	b2d2      	uxtb	r2, r2
 8005272:	f002 021f 	and.w	r2, r2, #31
 8005276:	2101      	movs	r1, #1
 8005278:	fa01 f202 	lsl.w	r2, r1, r2
 800527c:	4013      	ands	r3, r2
 800527e:	2b00      	cmp	r3, #0
 8005280:	d0b7      	beq.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005282:	4b5e      	ldr	r3, [pc, #376]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005284:	6a1b      	ldr	r3, [r3, #32]
 8005286:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	495b      	ldr	r1, [pc, #364]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005290:	4313      	orrs	r3, r2
 8005292:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005294:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005298:	2b01      	cmp	r3, #1
 800529a:	d105      	bne.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800529c:	4b57      	ldr	r3, [pc, #348]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800529e:	69db      	ldr	r3, [r3, #28]
 80052a0:	4a56      	ldr	r2, [pc, #344]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80052a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052a6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f003 0301 	and.w	r3, r3, #1
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d008      	beq.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80052b4:	4b51      	ldr	r3, [pc, #324]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80052b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052b8:	f023 0203 	bic.w	r2, r3, #3
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	494e      	ldr	r1, [pc, #312]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80052c2:	4313      	orrs	r3, r2
 80052c4:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f003 0320 	and.w	r3, r3, #32
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d008      	beq.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80052d2:	4b4a      	ldr	r3, [pc, #296]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80052d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052d6:	f023 0210 	bic.w	r2, r3, #16
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	68db      	ldr	r3, [r3, #12]
 80052de:	4947      	ldr	r1, [pc, #284]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80052e0:	4313      	orrs	r3, r2
 80052e2:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d008      	beq.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80052f0:	4b42      	ldr	r3, [pc, #264]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052fc:	493f      	ldr	r1, [pc, #252]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80052fe:	4313      	orrs	r3, r2
 8005300:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800530a:	2b00      	cmp	r3, #0
 800530c:	d008      	beq.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800530e:	4b3b      	ldr	r3, [pc, #236]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005312:	f023 0220 	bic.w	r2, r3, #32
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	691b      	ldr	r3, [r3, #16]
 800531a:	4938      	ldr	r1, [pc, #224]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800531c:	4313      	orrs	r3, r2
 800531e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005328:	2b00      	cmp	r3, #0
 800532a:	d008      	beq.n	800533e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800532c:	4b33      	ldr	r3, [pc, #204]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800532e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005330:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	695b      	ldr	r3, [r3, #20]
 8005338:	4930      	ldr	r1, [pc, #192]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800533a:	4313      	orrs	r3, r2
 800533c:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005346:	2b00      	cmp	r3, #0
 8005348:	d008      	beq.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800534a:	4b2c      	ldr	r3, [pc, #176]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	69db      	ldr	r3, [r3, #28]
 8005356:	4929      	ldr	r1, [pc, #164]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005358:	4313      	orrs	r3, r2
 800535a:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005364:	2b00      	cmp	r3, #0
 8005366:	d008      	beq.n	800537a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8005368:	4b24      	ldr	r3, [pc, #144]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800536a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800536c:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	699b      	ldr	r3, [r3, #24]
 8005374:	4921      	ldr	r1, [pc, #132]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005376:	4313      	orrs	r3, r2
 8005378:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005382:	2b00      	cmp	r3, #0
 8005384:	d008      	beq.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005386:	4b1d      	ldr	r3, [pc, #116]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800538a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6a1b      	ldr	r3, [r3, #32]
 8005392:	491a      	ldr	r1, [pc, #104]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005394:	4313      	orrs	r3, r2
 8005396:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d008      	beq.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80053a4:	4b15      	ldr	r3, [pc, #84]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80053a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053a8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b0:	4912      	ldr	r1, [pc, #72]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80053b2:	4313      	orrs	r3, r2
 80053b4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d008      	beq.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80053c2:	4b0e      	ldr	r3, [pc, #56]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80053c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053c6:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053ce:	490b      	ldr	r1, [pc, #44]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80053d0:	4313      	orrs	r3, r2
 80053d2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d008      	beq.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80053e0:	4b06      	ldr	r3, [pc, #24]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80053e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053e4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ec:	4903      	ldr	r1, [pc, #12]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80053ee:	4313      	orrs	r3, r2
 80053f0:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80053f2:	2300      	movs	r3, #0
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	3748      	adds	r7, #72	; 0x48
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}
 80053fc:	40021000 	.word	0x40021000

08005400 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b082      	sub	sp, #8
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d101      	bne.n	8005412 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800540e:	2301      	movs	r3, #1
 8005410:	e049      	b.n	80054a6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005418:	b2db      	uxtb	r3, r3
 800541a:	2b00      	cmp	r3, #0
 800541c:	d106      	bne.n	800542c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2200      	movs	r2, #0
 8005422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f7fc fd60 	bl	8001eec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2202      	movs	r2, #2
 8005430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681a      	ldr	r2, [r3, #0]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	3304      	adds	r3, #4
 800543c:	4619      	mov	r1, r3
 800543e:	4610      	mov	r0, r2
 8005440:	f000 f9d2 	bl	80057e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2201      	movs	r2, #1
 8005448:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2201      	movs	r2, #1
 8005450:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2201      	movs	r2, #1
 8005458:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2201      	movs	r2, #1
 8005460:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2201      	movs	r2, #1
 8005468:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2201      	movs	r2, #1
 8005470:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2201      	movs	r2, #1
 8005478:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2201      	movs	r2, #1
 8005480:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2201      	movs	r2, #1
 8005488:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2201      	movs	r2, #1
 8005490:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2201      	movs	r2, #1
 8005498:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2201      	movs	r2, #1
 80054a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80054a4:	2300      	movs	r3, #0
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3708      	adds	r7, #8
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}
	...

080054b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b085      	sub	sp, #20
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054be:	b2db      	uxtb	r3, r3
 80054c0:	2b01      	cmp	r3, #1
 80054c2:	d001      	beq.n	80054c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80054c4:	2301      	movs	r3, #1
 80054c6:	e03b      	b.n	8005540 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2202      	movs	r2, #2
 80054cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	68da      	ldr	r2, [r3, #12]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f042 0201 	orr.w	r2, r2, #1
 80054de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a19      	ldr	r2, [pc, #100]	; (800554c <HAL_TIM_Base_Start_IT+0x9c>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d009      	beq.n	80054fe <HAL_TIM_Base_Start_IT+0x4e>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054f2:	d004      	beq.n	80054fe <HAL_TIM_Base_Start_IT+0x4e>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a15      	ldr	r2, [pc, #84]	; (8005550 <HAL_TIM_Base_Start_IT+0xa0>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d115      	bne.n	800552a <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	689a      	ldr	r2, [r3, #8]
 8005504:	4b13      	ldr	r3, [pc, #76]	; (8005554 <HAL_TIM_Base_Start_IT+0xa4>)
 8005506:	4013      	ands	r3, r2
 8005508:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2b06      	cmp	r3, #6
 800550e:	d015      	beq.n	800553c <HAL_TIM_Base_Start_IT+0x8c>
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005516:	d011      	beq.n	800553c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	681a      	ldr	r2, [r3, #0]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f042 0201 	orr.w	r2, r2, #1
 8005526:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005528:	e008      	b.n	800553c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	681a      	ldr	r2, [r3, #0]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f042 0201 	orr.w	r2, r2, #1
 8005538:	601a      	str	r2, [r3, #0]
 800553a:	e000      	b.n	800553e <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800553c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800553e:	2300      	movs	r3, #0
}
 8005540:	4618      	mov	r0, r3
 8005542:	3714      	adds	r7, #20
 8005544:	46bd      	mov	sp, r7
 8005546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554a:	4770      	bx	lr
 800554c:	40012c00 	.word	0x40012c00
 8005550:	40014000 	.word	0x40014000
 8005554:	00010007 	.word	0x00010007

08005558 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b082      	sub	sp, #8
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	691b      	ldr	r3, [r3, #16]
 8005566:	f003 0302 	and.w	r3, r3, #2
 800556a:	2b02      	cmp	r3, #2
 800556c:	d122      	bne.n	80055b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	68db      	ldr	r3, [r3, #12]
 8005574:	f003 0302 	and.w	r3, r3, #2
 8005578:	2b02      	cmp	r3, #2
 800557a:	d11b      	bne.n	80055b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f06f 0202 	mvn.w	r2, #2
 8005584:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2201      	movs	r2, #1
 800558a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	699b      	ldr	r3, [r3, #24]
 8005592:	f003 0303 	and.w	r3, r3, #3
 8005596:	2b00      	cmp	r3, #0
 8005598:	d003      	beq.n	80055a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f000 f905 	bl	80057aa <HAL_TIM_IC_CaptureCallback>
 80055a0:	e005      	b.n	80055ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f000 f8f7 	bl	8005796 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055a8:	6878      	ldr	r0, [r7, #4]
 80055aa:	f000 f908 	bl	80057be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2200      	movs	r2, #0
 80055b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	691b      	ldr	r3, [r3, #16]
 80055ba:	f003 0304 	and.w	r3, r3, #4
 80055be:	2b04      	cmp	r3, #4
 80055c0:	d122      	bne.n	8005608 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	68db      	ldr	r3, [r3, #12]
 80055c8:	f003 0304 	and.w	r3, r3, #4
 80055cc:	2b04      	cmp	r3, #4
 80055ce:	d11b      	bne.n	8005608 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f06f 0204 	mvn.w	r2, #4
 80055d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2202      	movs	r2, #2
 80055de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	699b      	ldr	r3, [r3, #24]
 80055e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d003      	beq.n	80055f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f000 f8db 	bl	80057aa <HAL_TIM_IC_CaptureCallback>
 80055f4:	e005      	b.n	8005602 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f000 f8cd 	bl	8005796 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055fc:	6878      	ldr	r0, [r7, #4]
 80055fe:	f000 f8de 	bl	80057be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2200      	movs	r2, #0
 8005606:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	691b      	ldr	r3, [r3, #16]
 800560e:	f003 0308 	and.w	r3, r3, #8
 8005612:	2b08      	cmp	r3, #8
 8005614:	d122      	bne.n	800565c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	68db      	ldr	r3, [r3, #12]
 800561c:	f003 0308 	and.w	r3, r3, #8
 8005620:	2b08      	cmp	r3, #8
 8005622:	d11b      	bne.n	800565c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f06f 0208 	mvn.w	r2, #8
 800562c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2204      	movs	r2, #4
 8005632:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	69db      	ldr	r3, [r3, #28]
 800563a:	f003 0303 	and.w	r3, r3, #3
 800563e:	2b00      	cmp	r3, #0
 8005640:	d003      	beq.n	800564a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f000 f8b1 	bl	80057aa <HAL_TIM_IC_CaptureCallback>
 8005648:	e005      	b.n	8005656 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f000 f8a3 	bl	8005796 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005650:	6878      	ldr	r0, [r7, #4]
 8005652:	f000 f8b4 	bl	80057be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2200      	movs	r2, #0
 800565a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	691b      	ldr	r3, [r3, #16]
 8005662:	f003 0310 	and.w	r3, r3, #16
 8005666:	2b10      	cmp	r3, #16
 8005668:	d122      	bne.n	80056b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	68db      	ldr	r3, [r3, #12]
 8005670:	f003 0310 	and.w	r3, r3, #16
 8005674:	2b10      	cmp	r3, #16
 8005676:	d11b      	bne.n	80056b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f06f 0210 	mvn.w	r2, #16
 8005680:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2208      	movs	r2, #8
 8005686:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	69db      	ldr	r3, [r3, #28]
 800568e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005692:	2b00      	cmp	r3, #0
 8005694:	d003      	beq.n	800569e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f000 f887 	bl	80057aa <HAL_TIM_IC_CaptureCallback>
 800569c:	e005      	b.n	80056aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f000 f879 	bl	8005796 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f000 f88a 	bl	80057be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2200      	movs	r2, #0
 80056ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	691b      	ldr	r3, [r3, #16]
 80056b6:	f003 0301 	and.w	r3, r3, #1
 80056ba:	2b01      	cmp	r3, #1
 80056bc:	d10e      	bne.n	80056dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	68db      	ldr	r3, [r3, #12]
 80056c4:	f003 0301 	and.w	r3, r3, #1
 80056c8:	2b01      	cmp	r3, #1
 80056ca:	d107      	bne.n	80056dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f06f 0201 	mvn.w	r2, #1
 80056d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f7fb fb16 	bl	8000d08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	691b      	ldr	r3, [r3, #16]
 80056e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056e6:	2b80      	cmp	r3, #128	; 0x80
 80056e8:	d10e      	bne.n	8005708 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	68db      	ldr	r3, [r3, #12]
 80056f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056f4:	2b80      	cmp	r3, #128	; 0x80
 80056f6:	d107      	bne.n	8005708 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005700:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	f000 f8e8 	bl	80058d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	691b      	ldr	r3, [r3, #16]
 800570e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005712:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005716:	d10e      	bne.n	8005736 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	68db      	ldr	r3, [r3, #12]
 800571e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005722:	2b80      	cmp	r3, #128	; 0x80
 8005724:	d107      	bne.n	8005736 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800572e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	f000 f8db 	bl	80058ec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	691b      	ldr	r3, [r3, #16]
 800573c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005740:	2b40      	cmp	r3, #64	; 0x40
 8005742:	d10e      	bne.n	8005762 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	68db      	ldr	r3, [r3, #12]
 800574a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800574e:	2b40      	cmp	r3, #64	; 0x40
 8005750:	d107      	bne.n	8005762 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800575a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800575c:	6878      	ldr	r0, [r7, #4]
 800575e:	f000 f838 	bl	80057d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	691b      	ldr	r3, [r3, #16]
 8005768:	f003 0320 	and.w	r3, r3, #32
 800576c:	2b20      	cmp	r3, #32
 800576e:	d10e      	bne.n	800578e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	68db      	ldr	r3, [r3, #12]
 8005776:	f003 0320 	and.w	r3, r3, #32
 800577a:	2b20      	cmp	r3, #32
 800577c:	d107      	bne.n	800578e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f06f 0220 	mvn.w	r2, #32
 8005786:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	f000 f89b 	bl	80058c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800578e:	bf00      	nop
 8005790:	3708      	adds	r7, #8
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}

08005796 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005796:	b480      	push	{r7}
 8005798:	b083      	sub	sp, #12
 800579a:	af00      	add	r7, sp, #0
 800579c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800579e:	bf00      	nop
 80057a0:	370c      	adds	r7, #12
 80057a2:	46bd      	mov	sp, r7
 80057a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a8:	4770      	bx	lr

080057aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80057aa:	b480      	push	{r7}
 80057ac:	b083      	sub	sp, #12
 80057ae:	af00      	add	r7, sp, #0
 80057b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80057b2:	bf00      	nop
 80057b4:	370c      	adds	r7, #12
 80057b6:	46bd      	mov	sp, r7
 80057b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057bc:	4770      	bx	lr

080057be <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80057be:	b480      	push	{r7}
 80057c0:	b083      	sub	sp, #12
 80057c2:	af00      	add	r7, sp, #0
 80057c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80057c6:	bf00      	nop
 80057c8:	370c      	adds	r7, #12
 80057ca:	46bd      	mov	sp, r7
 80057cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d0:	4770      	bx	lr

080057d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80057d2:	b480      	push	{r7}
 80057d4:	b083      	sub	sp, #12
 80057d6:	af00      	add	r7, sp, #0
 80057d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80057da:	bf00      	nop
 80057dc:	370c      	adds	r7, #12
 80057de:	46bd      	mov	sp, r7
 80057e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e4:	4770      	bx	lr
	...

080057e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b085      	sub	sp, #20
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
 80057f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	4a2e      	ldr	r2, [pc, #184]	; (80058b4 <TIM_Base_SetConfig+0xcc>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d003      	beq.n	8005808 <TIM_Base_SetConfig+0x20>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005806:	d108      	bne.n	800581a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800580e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	68fa      	ldr	r2, [r7, #12]
 8005816:	4313      	orrs	r3, r2
 8005818:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	4a25      	ldr	r2, [pc, #148]	; (80058b4 <TIM_Base_SetConfig+0xcc>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d00f      	beq.n	8005842 <TIM_Base_SetConfig+0x5a>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005828:	d00b      	beq.n	8005842 <TIM_Base_SetConfig+0x5a>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	4a22      	ldr	r2, [pc, #136]	; (80058b8 <TIM_Base_SetConfig+0xd0>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d007      	beq.n	8005842 <TIM_Base_SetConfig+0x5a>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	4a21      	ldr	r2, [pc, #132]	; (80058bc <TIM_Base_SetConfig+0xd4>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d003      	beq.n	8005842 <TIM_Base_SetConfig+0x5a>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	4a20      	ldr	r2, [pc, #128]	; (80058c0 <TIM_Base_SetConfig+0xd8>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d108      	bne.n	8005854 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005848:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	68db      	ldr	r3, [r3, #12]
 800584e:	68fa      	ldr	r2, [r7, #12]
 8005850:	4313      	orrs	r3, r2
 8005852:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	695b      	ldr	r3, [r3, #20]
 800585e:	4313      	orrs	r3, r2
 8005860:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	68fa      	ldr	r2, [r7, #12]
 8005866:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	689a      	ldr	r2, [r3, #8]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	681a      	ldr	r2, [r3, #0]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	4a0e      	ldr	r2, [pc, #56]	; (80058b4 <TIM_Base_SetConfig+0xcc>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d00b      	beq.n	8005898 <TIM_Base_SetConfig+0xb0>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	4a0d      	ldr	r2, [pc, #52]	; (80058b8 <TIM_Base_SetConfig+0xd0>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d007      	beq.n	8005898 <TIM_Base_SetConfig+0xb0>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	4a0c      	ldr	r2, [pc, #48]	; (80058bc <TIM_Base_SetConfig+0xd4>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d003      	beq.n	8005898 <TIM_Base_SetConfig+0xb0>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	4a0b      	ldr	r2, [pc, #44]	; (80058c0 <TIM_Base_SetConfig+0xd8>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d103      	bne.n	80058a0 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	691a      	ldr	r2, [r3, #16]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2201      	movs	r2, #1
 80058a4:	615a      	str	r2, [r3, #20]
}
 80058a6:	bf00      	nop
 80058a8:	3714      	adds	r7, #20
 80058aa:	46bd      	mov	sp, r7
 80058ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b0:	4770      	bx	lr
 80058b2:	bf00      	nop
 80058b4:	40012c00 	.word	0x40012c00
 80058b8:	40014000 	.word	0x40014000
 80058bc:	40014400 	.word	0x40014400
 80058c0:	40014800 	.word	0x40014800

080058c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80058c4:	b480      	push	{r7}
 80058c6:	b083      	sub	sp, #12
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80058cc:	bf00      	nop
 80058ce:	370c      	adds	r7, #12
 80058d0:	46bd      	mov	sp, r7
 80058d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d6:	4770      	bx	lr

080058d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80058d8:	b480      	push	{r7}
 80058da:	b083      	sub	sp, #12
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80058e0:	bf00      	nop
 80058e2:	370c      	adds	r7, #12
 80058e4:	46bd      	mov	sp, r7
 80058e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ea:	4770      	bx	lr

080058ec <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80058ec:	b480      	push	{r7}
 80058ee:	b083      	sub	sp, #12
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80058f4:	bf00      	nop
 80058f6:	370c      	adds	r7, #12
 80058f8:	46bd      	mov	sp, r7
 80058fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fe:	4770      	bx	lr

08005900 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b082      	sub	sp, #8
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d101      	bne.n	8005912 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800590e:	2301      	movs	r3, #1
 8005910:	e040      	b.n	8005994 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005916:	2b00      	cmp	r3, #0
 8005918:	d106      	bne.n	8005928 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2200      	movs	r2, #0
 800591e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f7fc fb08 	bl	8001f38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2224      	movs	r2, #36	; 0x24
 800592c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	681a      	ldr	r2, [r3, #0]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f022 0201 	bic.w	r2, r2, #1
 800593c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f000 fc00 	bl	8006144 <UART_SetConfig>
 8005944:	4603      	mov	r3, r0
 8005946:	2b01      	cmp	r3, #1
 8005948:	d101      	bne.n	800594e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800594a:	2301      	movs	r3, #1
 800594c:	e022      	b.n	8005994 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005952:	2b00      	cmp	r3, #0
 8005954:	d002      	beq.n	800595c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	f000 fd2a 	bl	80063b0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	685a      	ldr	r2, [r3, #4]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800596a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	689a      	ldr	r2, [r3, #8]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800597a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	681a      	ldr	r2, [r3, #0]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f042 0201 	orr.w	r2, r2, #1
 800598a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f000 fdb1 	bl	80064f4 <UART_CheckIdleState>
 8005992:	4603      	mov	r3, r0
}
 8005994:	4618      	mov	r0, r3
 8005996:	3708      	adds	r7, #8
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}

0800599c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b08a      	sub	sp, #40	; 0x28
 80059a0:	af02      	add	r7, sp, #8
 80059a2:	60f8      	str	r0, [r7, #12]
 80059a4:	60b9      	str	r1, [r7, #8]
 80059a6:	603b      	str	r3, [r7, #0]
 80059a8:	4613      	mov	r3, r2
 80059aa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059b0:	2b20      	cmp	r3, #32
 80059b2:	d178      	bne.n	8005aa6 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d002      	beq.n	80059c0 <HAL_UART_Transmit+0x24>
 80059ba:	88fb      	ldrh	r3, [r7, #6]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d101      	bne.n	80059c4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80059c0:	2301      	movs	r3, #1
 80059c2:	e071      	b.n	8005aa8 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2200      	movs	r2, #0
 80059c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2221      	movs	r2, #33	; 0x21
 80059d0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80059d2:	f7fc fcd3 	bl	800237c <HAL_GetTick>
 80059d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	88fa      	ldrh	r2, [r7, #6]
 80059dc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	88fa      	ldrh	r2, [r7, #6]
 80059e4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	689b      	ldr	r3, [r3, #8]
 80059ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059f0:	d108      	bne.n	8005a04 <HAL_UART_Transmit+0x68>
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	691b      	ldr	r3, [r3, #16]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d104      	bne.n	8005a04 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80059fa:	2300      	movs	r3, #0
 80059fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	61bb      	str	r3, [r7, #24]
 8005a02:	e003      	b.n	8005a0c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005a08:	2300      	movs	r3, #0
 8005a0a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005a0c:	e030      	b.n	8005a70 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	9300      	str	r3, [sp, #0]
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	2200      	movs	r2, #0
 8005a16:	2180      	movs	r1, #128	; 0x80
 8005a18:	68f8      	ldr	r0, [r7, #12]
 8005a1a:	f000 fe13 	bl	8006644 <UART_WaitOnFlagUntilTimeout>
 8005a1e:	4603      	mov	r3, r0
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d004      	beq.n	8005a2e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2220      	movs	r2, #32
 8005a28:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8005a2a:	2303      	movs	r3, #3
 8005a2c:	e03c      	b.n	8005aa8 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8005a2e:	69fb      	ldr	r3, [r7, #28]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d10b      	bne.n	8005a4c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005a34:	69bb      	ldr	r3, [r7, #24]
 8005a36:	881a      	ldrh	r2, [r3, #0]
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a40:	b292      	uxth	r2, r2
 8005a42:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005a44:	69bb      	ldr	r3, [r7, #24]
 8005a46:	3302      	adds	r3, #2
 8005a48:	61bb      	str	r3, [r7, #24]
 8005a4a:	e008      	b.n	8005a5e <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005a4c:	69fb      	ldr	r3, [r7, #28]
 8005a4e:	781a      	ldrb	r2, [r3, #0]
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	b292      	uxth	r2, r2
 8005a56:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005a58:	69fb      	ldr	r3, [r7, #28]
 8005a5a:	3301      	adds	r3, #1
 8005a5c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005a64:	b29b      	uxth	r3, r3
 8005a66:	3b01      	subs	r3, #1
 8005a68:	b29a      	uxth	r2, r3
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005a76:	b29b      	uxth	r3, r3
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d1c8      	bne.n	8005a0e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	9300      	str	r3, [sp, #0]
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	2200      	movs	r2, #0
 8005a84:	2140      	movs	r1, #64	; 0x40
 8005a86:	68f8      	ldr	r0, [r7, #12]
 8005a88:	f000 fddc 	bl	8006644 <UART_WaitOnFlagUntilTimeout>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d004      	beq.n	8005a9c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2220      	movs	r2, #32
 8005a96:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8005a98:	2303      	movs	r3, #3
 8005a9a:	e005      	b.n	8005aa8 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2220      	movs	r2, #32
 8005aa0:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	e000      	b.n	8005aa8 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8005aa6:	2302      	movs	r3, #2
  }
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	3720      	adds	r7, #32
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd80      	pop	{r7, pc}

08005ab0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b08a      	sub	sp, #40	; 0x28
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	60f8      	str	r0, [r7, #12]
 8005ab8:	60b9      	str	r1, [r7, #8]
 8005aba:	4613      	mov	r3, r2
 8005abc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ac4:	2b20      	cmp	r3, #32
 8005ac6:	d132      	bne.n	8005b2e <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d002      	beq.n	8005ad4 <HAL_UART_Receive_IT+0x24>
 8005ace:	88fb      	ldrh	r3, [r7, #6]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d101      	bne.n	8005ad8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	e02b      	b.n	8005b30 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2200      	movs	r2, #0
 8005adc:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d018      	beq.n	8005b1e <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	e853 3f00 	ldrex	r3, [r3]
 8005af8:	613b      	str	r3, [r7, #16]
   return(result);
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005b00:	627b      	str	r3, [r7, #36]	; 0x24
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	461a      	mov	r2, r3
 8005b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b0a:	623b      	str	r3, [r7, #32]
 8005b0c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b0e:	69f9      	ldr	r1, [r7, #28]
 8005b10:	6a3a      	ldr	r2, [r7, #32]
 8005b12:	e841 2300 	strex	r3, r2, [r1]
 8005b16:	61bb      	str	r3, [r7, #24]
   return(result);
 8005b18:	69bb      	ldr	r3, [r7, #24]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d1e6      	bne.n	8005aec <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005b1e:	88fb      	ldrh	r3, [r7, #6]
 8005b20:	461a      	mov	r2, r3
 8005b22:	68b9      	ldr	r1, [r7, #8]
 8005b24:	68f8      	ldr	r0, [r7, #12]
 8005b26:	f000 fdf5 	bl	8006714 <UART_Start_Receive_IT>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	e000      	b.n	8005b30 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8005b2e:	2302      	movs	r3, #2
  }
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	3728      	adds	r7, #40	; 0x28
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}

08005b38 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b0ba      	sub	sp, #232	; 0xe8
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	69db      	ldr	r3, [r3, #28]
 8005b46:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005b5e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005b62:	f640 030f 	movw	r3, #2063	; 0x80f
 8005b66:	4013      	ands	r3, r2
 8005b68:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005b6c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d115      	bne.n	8005ba0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005b74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b78:	f003 0320 	and.w	r3, r3, #32
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d00f      	beq.n	8005ba0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005b80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b84:	f003 0320 	and.w	r3, r3, #32
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d009      	beq.n	8005ba0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	f000 82ab 	beq.w	80060ec <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	4798      	blx	r3
      }
      return;
 8005b9e:	e2a5      	b.n	80060ec <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005ba0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	f000 8117 	beq.w	8005dd8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005baa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005bae:	f003 0301 	and.w	r3, r3, #1
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d106      	bne.n	8005bc4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005bb6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005bba:	4b85      	ldr	r3, [pc, #532]	; (8005dd0 <HAL_UART_IRQHandler+0x298>)
 8005bbc:	4013      	ands	r3, r2
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	f000 810a 	beq.w	8005dd8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005bc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bc8:	f003 0301 	and.w	r3, r3, #1
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d011      	beq.n	8005bf4 <HAL_UART_IRQHandler+0xbc>
 8005bd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d00b      	beq.n	8005bf4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	2201      	movs	r2, #1
 8005be2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005bea:	f043 0201 	orr.w	r2, r3, #1
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005bf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bf8:	f003 0302 	and.w	r3, r3, #2
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d011      	beq.n	8005c24 <HAL_UART_IRQHandler+0xec>
 8005c00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c04:	f003 0301 	and.w	r3, r3, #1
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d00b      	beq.n	8005c24 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	2202      	movs	r2, #2
 8005c12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c1a:	f043 0204 	orr.w	r2, r3, #4
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005c24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c28:	f003 0304 	and.w	r3, r3, #4
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d011      	beq.n	8005c54 <HAL_UART_IRQHandler+0x11c>
 8005c30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c34:	f003 0301 	and.w	r3, r3, #1
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d00b      	beq.n	8005c54 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	2204      	movs	r2, #4
 8005c42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c4a:	f043 0202 	orr.w	r2, r3, #2
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005c54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c58:	f003 0308 	and.w	r3, r3, #8
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d017      	beq.n	8005c90 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005c60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c64:	f003 0320 	and.w	r3, r3, #32
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d105      	bne.n	8005c78 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005c6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c70:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d00b      	beq.n	8005c90 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	2208      	movs	r2, #8
 8005c7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c86:	f043 0208 	orr.w	r2, r3, #8
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005c90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d012      	beq.n	8005cc2 <HAL_UART_IRQHandler+0x18a>
 8005c9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ca0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d00c      	beq.n	8005cc2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005cb0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005cb8:	f043 0220 	orr.w	r2, r3, #32
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	f000 8211 	beq.w	80060f0 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005cce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cd2:	f003 0320 	and.w	r3, r3, #32
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d00d      	beq.n	8005cf6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005cda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cde:	f003 0320 	and.w	r3, r3, #32
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d007      	beq.n	8005cf6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d003      	beq.n	8005cf6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005cfc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	689b      	ldr	r3, [r3, #8]
 8005d06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d0a:	2b40      	cmp	r3, #64	; 0x40
 8005d0c:	d005      	beq.n	8005d1a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005d0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005d12:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d04f      	beq.n	8005dba <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f000 fdc0 	bl	80068a0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	689b      	ldr	r3, [r3, #8]
 8005d26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d2a:	2b40      	cmp	r3, #64	; 0x40
 8005d2c:	d141      	bne.n	8005db2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	3308      	adds	r3, #8
 8005d34:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d38:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005d3c:	e853 3f00 	ldrex	r3, [r3]
 8005d40:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005d44:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005d48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d4c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	3308      	adds	r3, #8
 8005d56:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005d5a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005d5e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d62:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005d66:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005d6a:	e841 2300 	strex	r3, r2, [r1]
 8005d6e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005d72:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d1d9      	bne.n	8005d2e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d013      	beq.n	8005daa <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d86:	4a13      	ldr	r2, [pc, #76]	; (8005dd4 <HAL_UART_IRQHandler+0x29c>)
 8005d88:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d8e:	4618      	mov	r0, r3
 8005d90:	f7fd fb36 	bl	8003400 <HAL_DMA_Abort_IT>
 8005d94:	4603      	mov	r3, r0
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d017      	beq.n	8005dca <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005da0:	687a      	ldr	r2, [r7, #4]
 8005da2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005da4:	4610      	mov	r0, r2
 8005da6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005da8:	e00f      	b.n	8005dca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f000 f9b4 	bl	8006118 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005db0:	e00b      	b.n	8005dca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	f000 f9b0 	bl	8006118 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005db8:	e007      	b.n	8005dca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f000 f9ac 	bl	8006118 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8005dc8:	e192      	b.n	80060f0 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dca:	bf00      	nop
    return;
 8005dcc:	e190      	b.n	80060f0 <HAL_UART_IRQHandler+0x5b8>
 8005dce:	bf00      	nop
 8005dd0:	04000120 	.word	0x04000120
 8005dd4:	08006969 	.word	0x08006969

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	f040 814b 	bne.w	8006078 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005de2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005de6:	f003 0310 	and.w	r3, r3, #16
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	f000 8144 	beq.w	8006078 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005df0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005df4:	f003 0310 	and.w	r3, r3, #16
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	f000 813d 	beq.w	8006078 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	2210      	movs	r2, #16
 8005e04:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	689b      	ldr	r3, [r3, #8]
 8005e0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e10:	2b40      	cmp	r3, #64	; 0x40
 8005e12:	f040 80b5 	bne.w	8005f80 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005e22:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	f000 8164 	beq.w	80060f4 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005e32:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005e36:	429a      	cmp	r2, r3
 8005e38:	f080 815c 	bcs.w	80060f4 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005e42:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e4a:	699b      	ldr	r3, [r3, #24]
 8005e4c:	2b20      	cmp	r3, #32
 8005e4e:	f000 8086 	beq.w	8005f5e <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e5a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005e5e:	e853 3f00 	ldrex	r3, [r3]
 8005e62:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005e66:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e6a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e6e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	461a      	mov	r2, r3
 8005e78:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005e7c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005e80:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e84:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005e88:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005e8c:	e841 2300 	strex	r3, r2, [r1]
 8005e90:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005e94:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d1da      	bne.n	8005e52 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	3308      	adds	r3, #8
 8005ea2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ea4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ea6:	e853 3f00 	ldrex	r3, [r3]
 8005eaa:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005eac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005eae:	f023 0301 	bic.w	r3, r3, #1
 8005eb2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	3308      	adds	r3, #8
 8005ebc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005ec0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005ec4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ec6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005ec8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005ecc:	e841 2300 	strex	r3, r2, [r1]
 8005ed0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005ed2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d1e1      	bne.n	8005e9c <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	3308      	adds	r3, #8
 8005ede:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ee0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ee2:	e853 3f00 	ldrex	r3, [r3]
 8005ee6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005ee8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005eea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005eee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	3308      	adds	r3, #8
 8005ef8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005efc:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005efe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f00:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005f02:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005f04:	e841 2300 	strex	r3, r2, [r1]
 8005f08:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005f0a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d1e3      	bne.n	8005ed8 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2220      	movs	r2, #32
 8005f14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f26:	e853 3f00 	ldrex	r3, [r3]
 8005f2a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005f2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f2e:	f023 0310 	bic.w	r3, r3, #16
 8005f32:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	461a      	mov	r2, r3
 8005f3c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005f40:	65bb      	str	r3, [r7, #88]	; 0x58
 8005f42:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f44:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005f46:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005f48:	e841 2300 	strex	r3, r2, [r1]
 8005f4c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005f4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d1e4      	bne.n	8005f1e <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f58:	4618      	mov	r0, r3
 8005f5a:	f7fd fa18 	bl	800338e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2202      	movs	r2, #2
 8005f62:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005f70:	b29b      	uxth	r3, r3
 8005f72:	1ad3      	subs	r3, r2, r3
 8005f74:	b29b      	uxth	r3, r3
 8005f76:	4619      	mov	r1, r3
 8005f78:	6878      	ldr	r0, [r7, #4]
 8005f7a:	f000 f8d7 	bl	800612c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005f7e:	e0b9      	b.n	80060f4 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005f8c:	b29b      	uxth	r3, r3
 8005f8e:	1ad3      	subs	r3, r2, r3
 8005f90:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005f9a:	b29b      	uxth	r3, r3
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	f000 80ab 	beq.w	80060f8 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8005fa2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	f000 80a6 	beq.w	80060f8 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fb4:	e853 3f00 	ldrex	r3, [r3]
 8005fb8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005fba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fbc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005fc0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	461a      	mov	r2, r3
 8005fca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005fce:	647b      	str	r3, [r7, #68]	; 0x44
 8005fd0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fd2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005fd4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005fd6:	e841 2300 	strex	r3, r2, [r1]
 8005fda:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005fdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d1e4      	bne.n	8005fac <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	3308      	adds	r3, #8
 8005fe8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fec:	e853 3f00 	ldrex	r3, [r3]
 8005ff0:	623b      	str	r3, [r7, #32]
   return(result);
 8005ff2:	6a3b      	ldr	r3, [r7, #32]
 8005ff4:	f023 0301 	bic.w	r3, r3, #1
 8005ff8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	3308      	adds	r3, #8
 8006002:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006006:	633a      	str	r2, [r7, #48]	; 0x30
 8006008:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800600a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800600c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800600e:	e841 2300 	strex	r3, r2, [r1]
 8006012:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006016:	2b00      	cmp	r3, #0
 8006018:	d1e3      	bne.n	8005fe2 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2220      	movs	r2, #32
 800601e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2200      	movs	r2, #0
 8006026:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2200      	movs	r2, #0
 800602c:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	e853 3f00 	ldrex	r3, [r3]
 800603a:	60fb      	str	r3, [r7, #12]
   return(result);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	f023 0310 	bic.w	r3, r3, #16
 8006042:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	461a      	mov	r2, r3
 800604c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006050:	61fb      	str	r3, [r7, #28]
 8006052:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006054:	69b9      	ldr	r1, [r7, #24]
 8006056:	69fa      	ldr	r2, [r7, #28]
 8006058:	e841 2300 	strex	r3, r2, [r1]
 800605c:	617b      	str	r3, [r7, #20]
   return(result);
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d1e4      	bne.n	800602e <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2202      	movs	r2, #2
 8006068:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800606a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800606e:	4619      	mov	r1, r3
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	f000 f85b 	bl	800612c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006076:	e03f      	b.n	80060f8 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006078:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800607c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006080:	2b00      	cmp	r3, #0
 8006082:	d00e      	beq.n	80060a2 <HAL_UART_IRQHandler+0x56a>
 8006084:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006088:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800608c:	2b00      	cmp	r3, #0
 800608e:	d008      	beq.n	80060a2 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006098:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f000 fe4c 	bl	8006d38 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80060a0:	e02d      	b.n	80060fe <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80060a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d00e      	beq.n	80060cc <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80060ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d008      	beq.n	80060cc <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d01c      	beq.n	80060fc <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	4798      	blx	r3
    }
    return;
 80060ca:	e017      	b.n	80060fc <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80060cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d012      	beq.n	80060fe <HAL_UART_IRQHandler+0x5c6>
 80060d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d00c      	beq.n	80060fe <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	f000 fc55 	bl	8006994 <UART_EndTransmit_IT>
    return;
 80060ea:	e008      	b.n	80060fe <HAL_UART_IRQHandler+0x5c6>
      return;
 80060ec:	bf00      	nop
 80060ee:	e006      	b.n	80060fe <HAL_UART_IRQHandler+0x5c6>
    return;
 80060f0:	bf00      	nop
 80060f2:	e004      	b.n	80060fe <HAL_UART_IRQHandler+0x5c6>
      return;
 80060f4:	bf00      	nop
 80060f6:	e002      	b.n	80060fe <HAL_UART_IRQHandler+0x5c6>
      return;
 80060f8:	bf00      	nop
 80060fa:	e000      	b.n	80060fe <HAL_UART_IRQHandler+0x5c6>
    return;
 80060fc:	bf00      	nop
  }

}
 80060fe:	37e8      	adds	r7, #232	; 0xe8
 8006100:	46bd      	mov	sp, r7
 8006102:	bd80      	pop	{r7, pc}

08006104 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006104:	b480      	push	{r7}
 8006106:	b083      	sub	sp, #12
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800610c:	bf00      	nop
 800610e:	370c      	adds	r7, #12
 8006110:	46bd      	mov	sp, r7
 8006112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006116:	4770      	bx	lr

08006118 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006118:	b480      	push	{r7}
 800611a:	b083      	sub	sp, #12
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006120:	bf00      	nop
 8006122:	370c      	adds	r7, #12
 8006124:	46bd      	mov	sp, r7
 8006126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612a:	4770      	bx	lr

0800612c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800612c:	b480      	push	{r7}
 800612e:	b083      	sub	sp, #12
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
 8006134:	460b      	mov	r3, r1
 8006136:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006138:	bf00      	nop
 800613a:	370c      	adds	r7, #12
 800613c:	46bd      	mov	sp, r7
 800613e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006142:	4770      	bx	lr

08006144 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b088      	sub	sp, #32
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800614c:	2300      	movs	r3, #0
 800614e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	689a      	ldr	r2, [r3, #8]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	691b      	ldr	r3, [r3, #16]
 8006158:	431a      	orrs	r2, r3
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	695b      	ldr	r3, [r3, #20]
 800615e:	431a      	orrs	r2, r3
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	69db      	ldr	r3, [r3, #28]
 8006164:	4313      	orrs	r3, r2
 8006166:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	681a      	ldr	r2, [r3, #0]
 800616e:	4b8a      	ldr	r3, [pc, #552]	; (8006398 <UART_SetConfig+0x254>)
 8006170:	4013      	ands	r3, r2
 8006172:	687a      	ldr	r2, [r7, #4]
 8006174:	6812      	ldr	r2, [r2, #0]
 8006176:	6979      	ldr	r1, [r7, #20]
 8006178:	430b      	orrs	r3, r1
 800617a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	68da      	ldr	r2, [r3, #12]
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	430a      	orrs	r2, r1
 8006190:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	699b      	ldr	r3, [r3, #24]
 8006196:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6a1b      	ldr	r3, [r3, #32]
 800619c:	697a      	ldr	r2, [r7, #20]
 800619e:	4313      	orrs	r3, r2
 80061a0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	689b      	ldr	r3, [r3, #8]
 80061a8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	697a      	ldr	r2, [r7, #20]
 80061b2:	430a      	orrs	r2, r1
 80061b4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4a78      	ldr	r2, [pc, #480]	; (800639c <UART_SetConfig+0x258>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d120      	bne.n	8006202 <UART_SetConfig+0xbe>
 80061c0:	4b77      	ldr	r3, [pc, #476]	; (80063a0 <UART_SetConfig+0x25c>)
 80061c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061c4:	f003 0303 	and.w	r3, r3, #3
 80061c8:	2b03      	cmp	r3, #3
 80061ca:	d817      	bhi.n	80061fc <UART_SetConfig+0xb8>
 80061cc:	a201      	add	r2, pc, #4	; (adr r2, 80061d4 <UART_SetConfig+0x90>)
 80061ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061d2:	bf00      	nop
 80061d4:	080061e5 	.word	0x080061e5
 80061d8:	080061f1 	.word	0x080061f1
 80061dc:	080061f7 	.word	0x080061f7
 80061e0:	080061eb 	.word	0x080061eb
 80061e4:	2300      	movs	r3, #0
 80061e6:	77fb      	strb	r3, [r7, #31]
 80061e8:	e01d      	b.n	8006226 <UART_SetConfig+0xe2>
 80061ea:	2302      	movs	r3, #2
 80061ec:	77fb      	strb	r3, [r7, #31]
 80061ee:	e01a      	b.n	8006226 <UART_SetConfig+0xe2>
 80061f0:	2304      	movs	r3, #4
 80061f2:	77fb      	strb	r3, [r7, #31]
 80061f4:	e017      	b.n	8006226 <UART_SetConfig+0xe2>
 80061f6:	2308      	movs	r3, #8
 80061f8:	77fb      	strb	r3, [r7, #31]
 80061fa:	e014      	b.n	8006226 <UART_SetConfig+0xe2>
 80061fc:	2310      	movs	r3, #16
 80061fe:	77fb      	strb	r3, [r7, #31]
 8006200:	e011      	b.n	8006226 <UART_SetConfig+0xe2>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a67      	ldr	r2, [pc, #412]	; (80063a4 <UART_SetConfig+0x260>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d102      	bne.n	8006212 <UART_SetConfig+0xce>
 800620c:	2300      	movs	r3, #0
 800620e:	77fb      	strb	r3, [r7, #31]
 8006210:	e009      	b.n	8006226 <UART_SetConfig+0xe2>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a64      	ldr	r2, [pc, #400]	; (80063a8 <UART_SetConfig+0x264>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d102      	bne.n	8006222 <UART_SetConfig+0xde>
 800621c:	2300      	movs	r3, #0
 800621e:	77fb      	strb	r3, [r7, #31]
 8006220:	e001      	b.n	8006226 <UART_SetConfig+0xe2>
 8006222:	2310      	movs	r3, #16
 8006224:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	69db      	ldr	r3, [r3, #28]
 800622a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800622e:	d15a      	bne.n	80062e6 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8006230:	7ffb      	ldrb	r3, [r7, #31]
 8006232:	2b08      	cmp	r3, #8
 8006234:	d827      	bhi.n	8006286 <UART_SetConfig+0x142>
 8006236:	a201      	add	r2, pc, #4	; (adr r2, 800623c <UART_SetConfig+0xf8>)
 8006238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800623c:	08006261 	.word	0x08006261
 8006240:	08006269 	.word	0x08006269
 8006244:	08006271 	.word	0x08006271
 8006248:	08006287 	.word	0x08006287
 800624c:	08006277 	.word	0x08006277
 8006250:	08006287 	.word	0x08006287
 8006254:	08006287 	.word	0x08006287
 8006258:	08006287 	.word	0x08006287
 800625c:	0800627f 	.word	0x0800627f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006260:	f7fe fef8 	bl	8005054 <HAL_RCC_GetPCLK1Freq>
 8006264:	61b8      	str	r0, [r7, #24]
        break;
 8006266:	e013      	b.n	8006290 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006268:	f7fe ff16 	bl	8005098 <HAL_RCC_GetPCLK2Freq>
 800626c:	61b8      	str	r0, [r7, #24]
        break;
 800626e:	e00f      	b.n	8006290 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006270:	4b4e      	ldr	r3, [pc, #312]	; (80063ac <UART_SetConfig+0x268>)
 8006272:	61bb      	str	r3, [r7, #24]
        break;
 8006274:	e00c      	b.n	8006290 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006276:	f7fe fe77 	bl	8004f68 <HAL_RCC_GetSysClockFreq>
 800627a:	61b8      	str	r0, [r7, #24]
        break;
 800627c:	e008      	b.n	8006290 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800627e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006282:	61bb      	str	r3, [r7, #24]
        break;
 8006284:	e004      	b.n	8006290 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8006286:	2300      	movs	r3, #0
 8006288:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800628a:	2301      	movs	r3, #1
 800628c:	77bb      	strb	r3, [r7, #30]
        break;
 800628e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006290:	69bb      	ldr	r3, [r7, #24]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d074      	beq.n	8006380 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006296:	69bb      	ldr	r3, [r7, #24]
 8006298:	005a      	lsls	r2, r3, #1
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	685b      	ldr	r3, [r3, #4]
 800629e:	085b      	lsrs	r3, r3, #1
 80062a0:	441a      	add	r2, r3
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80062aa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80062ac:	693b      	ldr	r3, [r7, #16]
 80062ae:	2b0f      	cmp	r3, #15
 80062b0:	d916      	bls.n	80062e0 <UART_SetConfig+0x19c>
 80062b2:	693b      	ldr	r3, [r7, #16]
 80062b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062b8:	d212      	bcs.n	80062e0 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80062ba:	693b      	ldr	r3, [r7, #16]
 80062bc:	b29b      	uxth	r3, r3
 80062be:	f023 030f 	bic.w	r3, r3, #15
 80062c2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80062c4:	693b      	ldr	r3, [r7, #16]
 80062c6:	085b      	lsrs	r3, r3, #1
 80062c8:	b29b      	uxth	r3, r3
 80062ca:	f003 0307 	and.w	r3, r3, #7
 80062ce:	b29a      	uxth	r2, r3
 80062d0:	89fb      	ldrh	r3, [r7, #14]
 80062d2:	4313      	orrs	r3, r2
 80062d4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	89fa      	ldrh	r2, [r7, #14]
 80062dc:	60da      	str	r2, [r3, #12]
 80062de:	e04f      	b.n	8006380 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80062e0:	2301      	movs	r3, #1
 80062e2:	77bb      	strb	r3, [r7, #30]
 80062e4:	e04c      	b.n	8006380 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80062e6:	7ffb      	ldrb	r3, [r7, #31]
 80062e8:	2b08      	cmp	r3, #8
 80062ea:	d828      	bhi.n	800633e <UART_SetConfig+0x1fa>
 80062ec:	a201      	add	r2, pc, #4	; (adr r2, 80062f4 <UART_SetConfig+0x1b0>)
 80062ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062f2:	bf00      	nop
 80062f4:	08006319 	.word	0x08006319
 80062f8:	08006321 	.word	0x08006321
 80062fc:	08006329 	.word	0x08006329
 8006300:	0800633f 	.word	0x0800633f
 8006304:	0800632f 	.word	0x0800632f
 8006308:	0800633f 	.word	0x0800633f
 800630c:	0800633f 	.word	0x0800633f
 8006310:	0800633f 	.word	0x0800633f
 8006314:	08006337 	.word	0x08006337
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006318:	f7fe fe9c 	bl	8005054 <HAL_RCC_GetPCLK1Freq>
 800631c:	61b8      	str	r0, [r7, #24]
        break;
 800631e:	e013      	b.n	8006348 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006320:	f7fe feba 	bl	8005098 <HAL_RCC_GetPCLK2Freq>
 8006324:	61b8      	str	r0, [r7, #24]
        break;
 8006326:	e00f      	b.n	8006348 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006328:	4b20      	ldr	r3, [pc, #128]	; (80063ac <UART_SetConfig+0x268>)
 800632a:	61bb      	str	r3, [r7, #24]
        break;
 800632c:	e00c      	b.n	8006348 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800632e:	f7fe fe1b 	bl	8004f68 <HAL_RCC_GetSysClockFreq>
 8006332:	61b8      	str	r0, [r7, #24]
        break;
 8006334:	e008      	b.n	8006348 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006336:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800633a:	61bb      	str	r3, [r7, #24]
        break;
 800633c:	e004      	b.n	8006348 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800633e:	2300      	movs	r3, #0
 8006340:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006342:	2301      	movs	r3, #1
 8006344:	77bb      	strb	r3, [r7, #30]
        break;
 8006346:	bf00      	nop
    }

    if (pclk != 0U)
 8006348:	69bb      	ldr	r3, [r7, #24]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d018      	beq.n	8006380 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	685b      	ldr	r3, [r3, #4]
 8006352:	085a      	lsrs	r2, r3, #1
 8006354:	69bb      	ldr	r3, [r7, #24]
 8006356:	441a      	add	r2, r3
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006360:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006362:	693b      	ldr	r3, [r7, #16]
 8006364:	2b0f      	cmp	r3, #15
 8006366:	d909      	bls.n	800637c <UART_SetConfig+0x238>
 8006368:	693b      	ldr	r3, [r7, #16]
 800636a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800636e:	d205      	bcs.n	800637c <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	b29a      	uxth	r2, r3
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	60da      	str	r2, [r3, #12]
 800637a:	e001      	b.n	8006380 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800637c:	2301      	movs	r3, #1
 800637e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2200      	movs	r2, #0
 8006384:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2200      	movs	r2, #0
 800638a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800638c:	7fbb      	ldrb	r3, [r7, #30]
}
 800638e:	4618      	mov	r0, r3
 8006390:	3720      	adds	r7, #32
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}
 8006396:	bf00      	nop
 8006398:	efff69f3 	.word	0xefff69f3
 800639c:	40013800 	.word	0x40013800
 80063a0:	40021000 	.word	0x40021000
 80063a4:	40004400 	.word	0x40004400
 80063a8:	40004800 	.word	0x40004800
 80063ac:	007a1200 	.word	0x007a1200

080063b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80063b0:	b480      	push	{r7}
 80063b2:	b083      	sub	sp, #12
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063bc:	f003 0301 	and.w	r3, r3, #1
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d00a      	beq.n	80063da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	430a      	orrs	r2, r1
 80063d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063de:	f003 0302 	and.w	r3, r3, #2
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d00a      	beq.n	80063fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	430a      	orrs	r2, r1
 80063fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006400:	f003 0304 	and.w	r3, r3, #4
 8006404:	2b00      	cmp	r3, #0
 8006406:	d00a      	beq.n	800641e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	430a      	orrs	r2, r1
 800641c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006422:	f003 0308 	and.w	r3, r3, #8
 8006426:	2b00      	cmp	r3, #0
 8006428:	d00a      	beq.n	8006440 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	685b      	ldr	r3, [r3, #4]
 8006430:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	430a      	orrs	r2, r1
 800643e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006444:	f003 0310 	and.w	r3, r3, #16
 8006448:	2b00      	cmp	r3, #0
 800644a:	d00a      	beq.n	8006462 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	689b      	ldr	r3, [r3, #8]
 8006452:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	430a      	orrs	r2, r1
 8006460:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006466:	f003 0320 	and.w	r3, r3, #32
 800646a:	2b00      	cmp	r3, #0
 800646c:	d00a      	beq.n	8006484 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	689b      	ldr	r3, [r3, #8]
 8006474:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	430a      	orrs	r2, r1
 8006482:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006488:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800648c:	2b00      	cmp	r3, #0
 800648e:	d01a      	beq.n	80064c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	430a      	orrs	r2, r1
 80064a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80064ae:	d10a      	bne.n	80064c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	685b      	ldr	r3, [r3, #4]
 80064b6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	430a      	orrs	r2, r1
 80064c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d00a      	beq.n	80064e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	685b      	ldr	r3, [r3, #4]
 80064d8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	430a      	orrs	r2, r1
 80064e6:	605a      	str	r2, [r3, #4]
  }
}
 80064e8:	bf00      	nop
 80064ea:	370c      	adds	r7, #12
 80064ec:	46bd      	mov	sp, r7
 80064ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f2:	4770      	bx	lr

080064f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b098      	sub	sp, #96	; 0x60
 80064f8:	af02      	add	r7, sp, #8
 80064fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2200      	movs	r2, #0
 8006500:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006504:	f7fb ff3a 	bl	800237c <HAL_GetTick>
 8006508:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f003 0308 	and.w	r3, r3, #8
 8006514:	2b08      	cmp	r3, #8
 8006516:	d12e      	bne.n	8006576 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006518:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800651c:	9300      	str	r3, [sp, #0]
 800651e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006520:	2200      	movs	r2, #0
 8006522:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f000 f88c 	bl	8006644 <UART_WaitOnFlagUntilTimeout>
 800652c:	4603      	mov	r3, r0
 800652e:	2b00      	cmp	r3, #0
 8006530:	d021      	beq.n	8006576 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800653a:	e853 3f00 	ldrex	r3, [r3]
 800653e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006540:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006542:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006546:	653b      	str	r3, [r7, #80]	; 0x50
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	461a      	mov	r2, r3
 800654e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006550:	647b      	str	r3, [r7, #68]	; 0x44
 8006552:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006554:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006556:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006558:	e841 2300 	strex	r3, r2, [r1]
 800655c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800655e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006560:	2b00      	cmp	r3, #0
 8006562:	d1e6      	bne.n	8006532 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2220      	movs	r2, #32
 8006568:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2200      	movs	r2, #0
 800656e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006572:	2303      	movs	r3, #3
 8006574:	e062      	b.n	800663c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f003 0304 	and.w	r3, r3, #4
 8006580:	2b04      	cmp	r3, #4
 8006582:	d149      	bne.n	8006618 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006584:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006588:	9300      	str	r3, [sp, #0]
 800658a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800658c:	2200      	movs	r2, #0
 800658e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f000 f856 	bl	8006644 <UART_WaitOnFlagUntilTimeout>
 8006598:	4603      	mov	r3, r0
 800659a:	2b00      	cmp	r3, #0
 800659c:	d03c      	beq.n	8006618 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a6:	e853 3f00 	ldrex	r3, [r3]
 80065aa:	623b      	str	r3, [r7, #32]
   return(result);
 80065ac:	6a3b      	ldr	r3, [r7, #32]
 80065ae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80065b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	461a      	mov	r2, r3
 80065ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065bc:	633b      	str	r3, [r7, #48]	; 0x30
 80065be:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065c0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80065c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065c4:	e841 2300 	strex	r3, r2, [r1]
 80065c8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80065ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d1e6      	bne.n	800659e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	3308      	adds	r3, #8
 80065d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	e853 3f00 	ldrex	r3, [r3]
 80065de:	60fb      	str	r3, [r7, #12]
   return(result);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	f023 0301 	bic.w	r3, r3, #1
 80065e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	3308      	adds	r3, #8
 80065ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80065f0:	61fa      	str	r2, [r7, #28]
 80065f2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065f4:	69b9      	ldr	r1, [r7, #24]
 80065f6:	69fa      	ldr	r2, [r7, #28]
 80065f8:	e841 2300 	strex	r3, r2, [r1]
 80065fc:	617b      	str	r3, [r7, #20]
   return(result);
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d1e5      	bne.n	80065d0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2220      	movs	r2, #32
 8006608:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2200      	movs	r2, #0
 8006610:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006614:	2303      	movs	r3, #3
 8006616:	e011      	b.n	800663c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2220      	movs	r2, #32
 800661c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2220      	movs	r2, #32
 8006622:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2200      	movs	r2, #0
 800662a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2200      	movs	r2, #0
 8006630:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2200      	movs	r2, #0
 8006636:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800663a:	2300      	movs	r3, #0
}
 800663c:	4618      	mov	r0, r3
 800663e:	3758      	adds	r7, #88	; 0x58
 8006640:	46bd      	mov	sp, r7
 8006642:	bd80      	pop	{r7, pc}

08006644 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b084      	sub	sp, #16
 8006648:	af00      	add	r7, sp, #0
 800664a:	60f8      	str	r0, [r7, #12]
 800664c:	60b9      	str	r1, [r7, #8]
 800664e:	603b      	str	r3, [r7, #0]
 8006650:	4613      	mov	r3, r2
 8006652:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006654:	e049      	b.n	80066ea <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006656:	69bb      	ldr	r3, [r7, #24]
 8006658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800665c:	d045      	beq.n	80066ea <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800665e:	f7fb fe8d 	bl	800237c <HAL_GetTick>
 8006662:	4602      	mov	r2, r0
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	1ad3      	subs	r3, r2, r3
 8006668:	69ba      	ldr	r2, [r7, #24]
 800666a:	429a      	cmp	r2, r3
 800666c:	d302      	bcc.n	8006674 <UART_WaitOnFlagUntilTimeout+0x30>
 800666e:	69bb      	ldr	r3, [r7, #24]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d101      	bne.n	8006678 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006674:	2303      	movs	r3, #3
 8006676:	e048      	b.n	800670a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f003 0304 	and.w	r3, r3, #4
 8006682:	2b00      	cmp	r3, #0
 8006684:	d031      	beq.n	80066ea <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	69db      	ldr	r3, [r3, #28]
 800668c:	f003 0308 	and.w	r3, r3, #8
 8006690:	2b08      	cmp	r3, #8
 8006692:	d110      	bne.n	80066b6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	2208      	movs	r2, #8
 800669a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800669c:	68f8      	ldr	r0, [r7, #12]
 800669e:	f000 f8ff 	bl	80068a0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	2208      	movs	r2, #8
 80066a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	2200      	movs	r2, #0
 80066ae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 80066b2:	2301      	movs	r3, #1
 80066b4:	e029      	b.n	800670a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	69db      	ldr	r3, [r3, #28]
 80066bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80066c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066c4:	d111      	bne.n	80066ea <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80066ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80066d0:	68f8      	ldr	r0, [r7, #12]
 80066d2:	f000 f8e5 	bl	80068a0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	2220      	movs	r2, #32
 80066da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	2200      	movs	r2, #0
 80066e2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80066e6:	2303      	movs	r3, #3
 80066e8:	e00f      	b.n	800670a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	69da      	ldr	r2, [r3, #28]
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	4013      	ands	r3, r2
 80066f4:	68ba      	ldr	r2, [r7, #8]
 80066f6:	429a      	cmp	r2, r3
 80066f8:	bf0c      	ite	eq
 80066fa:	2301      	moveq	r3, #1
 80066fc:	2300      	movne	r3, #0
 80066fe:	b2db      	uxtb	r3, r3
 8006700:	461a      	mov	r2, r3
 8006702:	79fb      	ldrb	r3, [r7, #7]
 8006704:	429a      	cmp	r2, r3
 8006706:	d0a6      	beq.n	8006656 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006708:	2300      	movs	r3, #0
}
 800670a:	4618      	mov	r0, r3
 800670c:	3710      	adds	r7, #16
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}
	...

08006714 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006714:	b480      	push	{r7}
 8006716:	b097      	sub	sp, #92	; 0x5c
 8006718:	af00      	add	r7, sp, #0
 800671a:	60f8      	str	r0, [r7, #12]
 800671c:	60b9      	str	r1, [r7, #8]
 800671e:	4613      	mov	r3, r2
 8006720:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	68ba      	ldr	r2, [r7, #8]
 8006726:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	88fa      	ldrh	r2, [r7, #6]
 800672c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	88fa      	ldrh	r2, [r7, #6]
 8006734:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	2200      	movs	r2, #0
 800673c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	689b      	ldr	r3, [r3, #8]
 8006742:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006746:	d10e      	bne.n	8006766 <UART_Start_Receive_IT+0x52>
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	691b      	ldr	r3, [r3, #16]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d105      	bne.n	800675c <UART_Start_Receive_IT+0x48>
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006756:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800675a:	e02d      	b.n	80067b8 <UART_Start_Receive_IT+0xa4>
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	22ff      	movs	r2, #255	; 0xff
 8006760:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006764:	e028      	b.n	80067b8 <UART_Start_Receive_IT+0xa4>
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	689b      	ldr	r3, [r3, #8]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d10d      	bne.n	800678a <UART_Start_Receive_IT+0x76>
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	691b      	ldr	r3, [r3, #16]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d104      	bne.n	8006780 <UART_Start_Receive_IT+0x6c>
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	22ff      	movs	r2, #255	; 0xff
 800677a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800677e:	e01b      	b.n	80067b8 <UART_Start_Receive_IT+0xa4>
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	227f      	movs	r2, #127	; 0x7f
 8006784:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006788:	e016      	b.n	80067b8 <UART_Start_Receive_IT+0xa4>
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	689b      	ldr	r3, [r3, #8]
 800678e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006792:	d10d      	bne.n	80067b0 <UART_Start_Receive_IT+0x9c>
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	691b      	ldr	r3, [r3, #16]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d104      	bne.n	80067a6 <UART_Start_Receive_IT+0x92>
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	227f      	movs	r2, #127	; 0x7f
 80067a0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80067a4:	e008      	b.n	80067b8 <UART_Start_Receive_IT+0xa4>
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	223f      	movs	r2, #63	; 0x3f
 80067aa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80067ae:	e003      	b.n	80067b8 <UART_Start_Receive_IT+0xa4>
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	2200      	movs	r2, #0
 80067b4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	2200      	movs	r2, #0
 80067bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	2222      	movs	r2, #34	; 0x22
 80067c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	3308      	adds	r3, #8
 80067ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067d2:	e853 3f00 	ldrex	r3, [r3]
 80067d6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80067d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067da:	f043 0301 	orr.w	r3, r3, #1
 80067de:	657b      	str	r3, [r7, #84]	; 0x54
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	3308      	adds	r3, #8
 80067e6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80067e8:	64ba      	str	r2, [r7, #72]	; 0x48
 80067ea:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ec:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80067ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80067f0:	e841 2300 	strex	r3, r2, [r1]
 80067f4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80067f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d1e5      	bne.n	80067c8 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	689b      	ldr	r3, [r3, #8]
 8006800:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006804:	d107      	bne.n	8006816 <UART_Start_Receive_IT+0x102>
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	691b      	ldr	r3, [r3, #16]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d103      	bne.n	8006816 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	4a21      	ldr	r2, [pc, #132]	; (8006898 <UART_Start_Receive_IT+0x184>)
 8006812:	669a      	str	r2, [r3, #104]	; 0x68
 8006814:	e002      	b.n	800681c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	4a20      	ldr	r2, [pc, #128]	; (800689c <UART_Start_Receive_IT+0x188>)
 800681a:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	691b      	ldr	r3, [r3, #16]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d019      	beq.n	8006858 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800682a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800682c:	e853 3f00 	ldrex	r3, [r3]
 8006830:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006834:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006838:	64fb      	str	r3, [r7, #76]	; 0x4c
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	461a      	mov	r2, r3
 8006840:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006842:	637b      	str	r3, [r7, #52]	; 0x34
 8006844:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006846:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006848:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800684a:	e841 2300 	strex	r3, r2, [r1]
 800684e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006852:	2b00      	cmp	r3, #0
 8006854:	d1e6      	bne.n	8006824 <UART_Start_Receive_IT+0x110>
 8006856:	e018      	b.n	800688a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	e853 3f00 	ldrex	r3, [r3]
 8006864:	613b      	str	r3, [r7, #16]
   return(result);
 8006866:	693b      	ldr	r3, [r7, #16]
 8006868:	f043 0320 	orr.w	r3, r3, #32
 800686c:	653b      	str	r3, [r7, #80]	; 0x50
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	461a      	mov	r2, r3
 8006874:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006876:	623b      	str	r3, [r7, #32]
 8006878:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800687a:	69f9      	ldr	r1, [r7, #28]
 800687c:	6a3a      	ldr	r2, [r7, #32]
 800687e:	e841 2300 	strex	r3, r2, [r1]
 8006882:	61bb      	str	r3, [r7, #24]
   return(result);
 8006884:	69bb      	ldr	r3, [r7, #24]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d1e6      	bne.n	8006858 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800688a:	2300      	movs	r3, #0
}
 800688c:	4618      	mov	r0, r3
 800688e:	375c      	adds	r7, #92	; 0x5c
 8006890:	46bd      	mov	sp, r7
 8006892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006896:	4770      	bx	lr
 8006898:	08006b91 	.word	0x08006b91
 800689c:	080069e9 	.word	0x080069e9

080068a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80068a0:	b480      	push	{r7}
 80068a2:	b095      	sub	sp, #84	; 0x54
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068b0:	e853 3f00 	ldrex	r3, [r3]
 80068b4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80068b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80068bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	461a      	mov	r2, r3
 80068c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068c6:	643b      	str	r3, [r7, #64]	; 0x40
 80068c8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80068cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80068ce:	e841 2300 	strex	r3, r2, [r1]
 80068d2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80068d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d1e6      	bne.n	80068a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	3308      	adds	r3, #8
 80068e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068e2:	6a3b      	ldr	r3, [r7, #32]
 80068e4:	e853 3f00 	ldrex	r3, [r3]
 80068e8:	61fb      	str	r3, [r7, #28]
   return(result);
 80068ea:	69fb      	ldr	r3, [r7, #28]
 80068ec:	f023 0301 	bic.w	r3, r3, #1
 80068f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	3308      	adds	r3, #8
 80068f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80068fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80068fc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006900:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006902:	e841 2300 	strex	r3, r2, [r1]
 8006906:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800690a:	2b00      	cmp	r3, #0
 800690c:	d1e5      	bne.n	80068da <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006912:	2b01      	cmp	r3, #1
 8006914:	d118      	bne.n	8006948 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	e853 3f00 	ldrex	r3, [r3]
 8006922:	60bb      	str	r3, [r7, #8]
   return(result);
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	f023 0310 	bic.w	r3, r3, #16
 800692a:	647b      	str	r3, [r7, #68]	; 0x44
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	461a      	mov	r2, r3
 8006932:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006934:	61bb      	str	r3, [r7, #24]
 8006936:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006938:	6979      	ldr	r1, [r7, #20]
 800693a:	69ba      	ldr	r2, [r7, #24]
 800693c:	e841 2300 	strex	r3, r2, [r1]
 8006940:	613b      	str	r3, [r7, #16]
   return(result);
 8006942:	693b      	ldr	r3, [r7, #16]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d1e6      	bne.n	8006916 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2220      	movs	r2, #32
 800694c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2200      	movs	r2, #0
 8006954:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2200      	movs	r2, #0
 800695a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800695c:	bf00      	nop
 800695e:	3754      	adds	r7, #84	; 0x54
 8006960:	46bd      	mov	sp, r7
 8006962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006966:	4770      	bx	lr

08006968 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b084      	sub	sp, #16
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006974:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	2200      	movs	r2, #0
 800697a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	2200      	movs	r2, #0
 8006982:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006986:	68f8      	ldr	r0, [r7, #12]
 8006988:	f7ff fbc6 	bl	8006118 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800698c:	bf00      	nop
 800698e:	3710      	adds	r7, #16
 8006990:	46bd      	mov	sp, r7
 8006992:	bd80      	pop	{r7, pc}

08006994 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b088      	sub	sp, #32
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	e853 3f00 	ldrex	r3, [r3]
 80069a8:	60bb      	str	r3, [r7, #8]
   return(result);
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069b0:	61fb      	str	r3, [r7, #28]
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	461a      	mov	r2, r3
 80069b8:	69fb      	ldr	r3, [r7, #28]
 80069ba:	61bb      	str	r3, [r7, #24]
 80069bc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069be:	6979      	ldr	r1, [r7, #20]
 80069c0:	69ba      	ldr	r2, [r7, #24]
 80069c2:	e841 2300 	strex	r3, r2, [r1]
 80069c6:	613b      	str	r3, [r7, #16]
   return(result);
 80069c8:	693b      	ldr	r3, [r7, #16]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d1e6      	bne.n	800699c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2220      	movs	r2, #32
 80069d2:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2200      	movs	r2, #0
 80069d8:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f7ff fb92 	bl	8006104 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80069e0:	bf00      	nop
 80069e2:	3720      	adds	r7, #32
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bd80      	pop	{r7, pc}

080069e8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b09c      	sub	sp, #112	; 0x70
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80069f6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a00:	2b22      	cmp	r3, #34	; 0x22
 8006a02:	f040 80b9 	bne.w	8006b78 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006a0c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006a10:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006a14:	b2d9      	uxtb	r1, r3
 8006a16:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8006a1a:	b2da      	uxtb	r2, r3
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a20:	400a      	ands	r2, r1
 8006a22:	b2d2      	uxtb	r2, r2
 8006a24:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a2a:	1c5a      	adds	r2, r3, #1
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006a36:	b29b      	uxth	r3, r3
 8006a38:	3b01      	subs	r3, #1
 8006a3a:	b29a      	uxth	r2, r3
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006a48:	b29b      	uxth	r3, r3
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	f040 809c 	bne.w	8006b88 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a58:	e853 3f00 	ldrex	r3, [r3]
 8006a5c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006a5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a60:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a64:	66bb      	str	r3, [r7, #104]	; 0x68
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	461a      	mov	r2, r3
 8006a6c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006a6e:	65bb      	str	r3, [r7, #88]	; 0x58
 8006a70:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a72:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006a74:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006a76:	e841 2300 	strex	r3, r2, [r1]
 8006a7a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006a7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d1e6      	bne.n	8006a50 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	3308      	adds	r3, #8
 8006a88:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a8c:	e853 3f00 	ldrex	r3, [r3]
 8006a90:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006a92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a94:	f023 0301 	bic.w	r3, r3, #1
 8006a98:	667b      	str	r3, [r7, #100]	; 0x64
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	3308      	adds	r3, #8
 8006aa0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006aa2:	647a      	str	r2, [r7, #68]	; 0x44
 8006aa4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aa6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006aa8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006aaa:	e841 2300 	strex	r3, r2, [r1]
 8006aae:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006ab0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d1e5      	bne.n	8006a82 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2220      	movs	r2, #32
 8006aba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	685b      	ldr	r3, [r3, #4]
 8006ad0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d018      	beq.n	8006b0a <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae0:	e853 3f00 	ldrex	r3, [r3]
 8006ae4:	623b      	str	r3, [r7, #32]
   return(result);
 8006ae6:	6a3b      	ldr	r3, [r7, #32]
 8006ae8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006aec:	663b      	str	r3, [r7, #96]	; 0x60
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	461a      	mov	r2, r3
 8006af4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006af6:	633b      	str	r3, [r7, #48]	; 0x30
 8006af8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006afa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006afc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006afe:	e841 2300 	strex	r3, r2, [r1]
 8006b02:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d1e6      	bne.n	8006ad8 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b0e:	2b01      	cmp	r3, #1
 8006b10:	d12e      	bne.n	8006b70 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2200      	movs	r2, #0
 8006b16:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	e853 3f00 	ldrex	r3, [r3]
 8006b24:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	f023 0310 	bic.w	r3, r3, #16
 8006b2c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	461a      	mov	r2, r3
 8006b34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b36:	61fb      	str	r3, [r7, #28]
 8006b38:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b3a:	69b9      	ldr	r1, [r7, #24]
 8006b3c:	69fa      	ldr	r2, [r7, #28]
 8006b3e:	e841 2300 	strex	r3, r2, [r1]
 8006b42:	617b      	str	r3, [r7, #20]
   return(result);
 8006b44:	697b      	ldr	r3, [r7, #20]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d1e6      	bne.n	8006b18 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	69db      	ldr	r3, [r3, #28]
 8006b50:	f003 0310 	and.w	r3, r3, #16
 8006b54:	2b10      	cmp	r3, #16
 8006b56:	d103      	bne.n	8006b60 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	2210      	movs	r2, #16
 8006b5e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006b66:	4619      	mov	r1, r3
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	f7ff fadf 	bl	800612c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006b6e:	e00b      	b.n	8006b88 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8006b70:	6878      	ldr	r0, [r7, #4]
 8006b72:	f7fa fc23 	bl	80013bc <HAL_UART_RxCpltCallback>
}
 8006b76:	e007      	b.n	8006b88 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	699a      	ldr	r2, [r3, #24]
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f042 0208 	orr.w	r2, r2, #8
 8006b86:	619a      	str	r2, [r3, #24]
}
 8006b88:	bf00      	nop
 8006b8a:	3770      	adds	r7, #112	; 0x70
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bd80      	pop	{r7, pc}

08006b90 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b09c      	sub	sp, #112	; 0x70
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006b9e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ba8:	2b22      	cmp	r3, #34	; 0x22
 8006baa:	f040 80b9 	bne.w	8006d20 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006bb4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bbc:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8006bbe:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8006bc2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8006bc6:	4013      	ands	r3, r2
 8006bc8:	b29a      	uxth	r2, r3
 8006bca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006bcc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bd2:	1c9a      	adds	r2, r3, #2
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006bde:	b29b      	uxth	r3, r3
 8006be0:	3b01      	subs	r3, #1
 8006be2:	b29a      	uxth	r2, r3
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006bf0:	b29b      	uxth	r3, r3
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	f040 809c 	bne.w	8006d30 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c00:	e853 3f00 	ldrex	r3, [r3]
 8006c04:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006c06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c08:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006c0c:	667b      	str	r3, [r7, #100]	; 0x64
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	461a      	mov	r2, r3
 8006c14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c16:	657b      	str	r3, [r7, #84]	; 0x54
 8006c18:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c1a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006c1c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006c1e:	e841 2300 	strex	r3, r2, [r1]
 8006c22:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006c24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d1e6      	bne.n	8006bf8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	3308      	adds	r3, #8
 8006c30:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c34:	e853 3f00 	ldrex	r3, [r3]
 8006c38:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c3c:	f023 0301 	bic.w	r3, r3, #1
 8006c40:	663b      	str	r3, [r7, #96]	; 0x60
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	3308      	adds	r3, #8
 8006c48:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006c4a:	643a      	str	r2, [r7, #64]	; 0x40
 8006c4c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c4e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006c50:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006c52:	e841 2300 	strex	r3, r2, [r1]
 8006c56:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d1e5      	bne.n	8006c2a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2220      	movs	r2, #32
 8006c62:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	685b      	ldr	r3, [r3, #4]
 8006c78:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d018      	beq.n	8006cb2 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c86:	6a3b      	ldr	r3, [r7, #32]
 8006c88:	e853 3f00 	ldrex	r3, [r3]
 8006c8c:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c8e:	69fb      	ldr	r3, [r7, #28]
 8006c90:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006c94:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	461a      	mov	r2, r3
 8006c9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ca0:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ca2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ca4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ca6:	e841 2300 	strex	r3, r2, [r1]
 8006caa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d1e6      	bne.n	8006c80 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cb6:	2b01      	cmp	r3, #1
 8006cb8:	d12e      	bne.n	8006d18 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	e853 3f00 	ldrex	r3, [r3]
 8006ccc:	60bb      	str	r3, [r7, #8]
   return(result);
 8006cce:	68bb      	ldr	r3, [r7, #8]
 8006cd0:	f023 0310 	bic.w	r3, r3, #16
 8006cd4:	65bb      	str	r3, [r7, #88]	; 0x58
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	461a      	mov	r2, r3
 8006cdc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006cde:	61bb      	str	r3, [r7, #24]
 8006ce0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ce2:	6979      	ldr	r1, [r7, #20]
 8006ce4:	69ba      	ldr	r2, [r7, #24]
 8006ce6:	e841 2300 	strex	r3, r2, [r1]
 8006cea:	613b      	str	r3, [r7, #16]
   return(result);
 8006cec:	693b      	ldr	r3, [r7, #16]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d1e6      	bne.n	8006cc0 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	69db      	ldr	r3, [r3, #28]
 8006cf8:	f003 0310 	and.w	r3, r3, #16
 8006cfc:	2b10      	cmp	r3, #16
 8006cfe:	d103      	bne.n	8006d08 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	2210      	movs	r2, #16
 8006d06:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006d0e:	4619      	mov	r1, r3
 8006d10:	6878      	ldr	r0, [r7, #4]
 8006d12:	f7ff fa0b 	bl	800612c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006d16:	e00b      	b.n	8006d30 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f7fa fb4f 	bl	80013bc <HAL_UART_RxCpltCallback>
}
 8006d1e:	e007      	b.n	8006d30 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	699a      	ldr	r2, [r3, #24]
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f042 0208 	orr.w	r2, r2, #8
 8006d2e:	619a      	str	r2, [r3, #24]
}
 8006d30:	bf00      	nop
 8006d32:	3770      	adds	r7, #112	; 0x70
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}

08006d38 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b083      	sub	sp, #12
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006d40:	bf00      	nop
 8006d42:	370c      	adds	r7, #12
 8006d44:	46bd      	mov	sp, r7
 8006d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4a:	4770      	bx	lr

08006d4c <calloc>:
 8006d4c:	4b02      	ldr	r3, [pc, #8]	; (8006d58 <calloc+0xc>)
 8006d4e:	460a      	mov	r2, r1
 8006d50:	4601      	mov	r1, r0
 8006d52:	6818      	ldr	r0, [r3, #0]
 8006d54:	f000 b802 	b.w	8006d5c <_calloc_r>
 8006d58:	20000090 	.word	0x20000090

08006d5c <_calloc_r>:
 8006d5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006d5e:	fba1 2402 	umull	r2, r4, r1, r2
 8006d62:	b94c      	cbnz	r4, 8006d78 <_calloc_r+0x1c>
 8006d64:	4611      	mov	r1, r2
 8006d66:	9201      	str	r2, [sp, #4]
 8006d68:	f000 f83e 	bl	8006de8 <_malloc_r>
 8006d6c:	9a01      	ldr	r2, [sp, #4]
 8006d6e:	4605      	mov	r5, r0
 8006d70:	b930      	cbnz	r0, 8006d80 <_calloc_r+0x24>
 8006d72:	4628      	mov	r0, r5
 8006d74:	b003      	add	sp, #12
 8006d76:	bd30      	pop	{r4, r5, pc}
 8006d78:	220c      	movs	r2, #12
 8006d7a:	6002      	str	r2, [r0, #0]
 8006d7c:	2500      	movs	r5, #0
 8006d7e:	e7f8      	b.n	8006d72 <_calloc_r+0x16>
 8006d80:	4621      	mov	r1, r4
 8006d82:	f001 f858 	bl	8007e36 <memset>
 8006d86:	e7f4      	b.n	8006d72 <_calloc_r+0x16>

08006d88 <malloc>:
 8006d88:	4b02      	ldr	r3, [pc, #8]	; (8006d94 <malloc+0xc>)
 8006d8a:	4601      	mov	r1, r0
 8006d8c:	6818      	ldr	r0, [r3, #0]
 8006d8e:	f000 b82b 	b.w	8006de8 <_malloc_r>
 8006d92:	bf00      	nop
 8006d94:	20000090 	.word	0x20000090

08006d98 <free>:
 8006d98:	4b02      	ldr	r3, [pc, #8]	; (8006da4 <free+0xc>)
 8006d9a:	4601      	mov	r1, r0
 8006d9c:	6818      	ldr	r0, [r3, #0]
 8006d9e:	f001 bf79 	b.w	8008c94 <_free_r>
 8006da2:	bf00      	nop
 8006da4:	20000090 	.word	0x20000090

08006da8 <sbrk_aligned>:
 8006da8:	b570      	push	{r4, r5, r6, lr}
 8006daa:	4e0e      	ldr	r6, [pc, #56]	; (8006de4 <sbrk_aligned+0x3c>)
 8006dac:	460c      	mov	r4, r1
 8006dae:	6831      	ldr	r1, [r6, #0]
 8006db0:	4605      	mov	r5, r0
 8006db2:	b911      	cbnz	r1, 8006dba <sbrk_aligned+0x12>
 8006db4:	f001 f896 	bl	8007ee4 <_sbrk_r>
 8006db8:	6030      	str	r0, [r6, #0]
 8006dba:	4621      	mov	r1, r4
 8006dbc:	4628      	mov	r0, r5
 8006dbe:	f001 f891 	bl	8007ee4 <_sbrk_r>
 8006dc2:	1c43      	adds	r3, r0, #1
 8006dc4:	d00a      	beq.n	8006ddc <sbrk_aligned+0x34>
 8006dc6:	1cc4      	adds	r4, r0, #3
 8006dc8:	f024 0403 	bic.w	r4, r4, #3
 8006dcc:	42a0      	cmp	r0, r4
 8006dce:	d007      	beq.n	8006de0 <sbrk_aligned+0x38>
 8006dd0:	1a21      	subs	r1, r4, r0
 8006dd2:	4628      	mov	r0, r5
 8006dd4:	f001 f886 	bl	8007ee4 <_sbrk_r>
 8006dd8:	3001      	adds	r0, #1
 8006dda:	d101      	bne.n	8006de0 <sbrk_aligned+0x38>
 8006ddc:	f04f 34ff 	mov.w	r4, #4294967295
 8006de0:	4620      	mov	r0, r4
 8006de2:	bd70      	pop	{r4, r5, r6, pc}
 8006de4:	200005d0 	.word	0x200005d0

08006de8 <_malloc_r>:
 8006de8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006dec:	1ccd      	adds	r5, r1, #3
 8006dee:	f025 0503 	bic.w	r5, r5, #3
 8006df2:	3508      	adds	r5, #8
 8006df4:	2d0c      	cmp	r5, #12
 8006df6:	bf38      	it	cc
 8006df8:	250c      	movcc	r5, #12
 8006dfa:	2d00      	cmp	r5, #0
 8006dfc:	4607      	mov	r7, r0
 8006dfe:	db01      	blt.n	8006e04 <_malloc_r+0x1c>
 8006e00:	42a9      	cmp	r1, r5
 8006e02:	d905      	bls.n	8006e10 <_malloc_r+0x28>
 8006e04:	230c      	movs	r3, #12
 8006e06:	603b      	str	r3, [r7, #0]
 8006e08:	2600      	movs	r6, #0
 8006e0a:	4630      	mov	r0, r6
 8006e0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e10:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006ee4 <_malloc_r+0xfc>
 8006e14:	f000 f868 	bl	8006ee8 <__malloc_lock>
 8006e18:	f8d8 3000 	ldr.w	r3, [r8]
 8006e1c:	461c      	mov	r4, r3
 8006e1e:	bb5c      	cbnz	r4, 8006e78 <_malloc_r+0x90>
 8006e20:	4629      	mov	r1, r5
 8006e22:	4638      	mov	r0, r7
 8006e24:	f7ff ffc0 	bl	8006da8 <sbrk_aligned>
 8006e28:	1c43      	adds	r3, r0, #1
 8006e2a:	4604      	mov	r4, r0
 8006e2c:	d155      	bne.n	8006eda <_malloc_r+0xf2>
 8006e2e:	f8d8 4000 	ldr.w	r4, [r8]
 8006e32:	4626      	mov	r6, r4
 8006e34:	2e00      	cmp	r6, #0
 8006e36:	d145      	bne.n	8006ec4 <_malloc_r+0xdc>
 8006e38:	2c00      	cmp	r4, #0
 8006e3a:	d048      	beq.n	8006ece <_malloc_r+0xe6>
 8006e3c:	6823      	ldr	r3, [r4, #0]
 8006e3e:	4631      	mov	r1, r6
 8006e40:	4638      	mov	r0, r7
 8006e42:	eb04 0903 	add.w	r9, r4, r3
 8006e46:	f001 f84d 	bl	8007ee4 <_sbrk_r>
 8006e4a:	4581      	cmp	r9, r0
 8006e4c:	d13f      	bne.n	8006ece <_malloc_r+0xe6>
 8006e4e:	6821      	ldr	r1, [r4, #0]
 8006e50:	1a6d      	subs	r5, r5, r1
 8006e52:	4629      	mov	r1, r5
 8006e54:	4638      	mov	r0, r7
 8006e56:	f7ff ffa7 	bl	8006da8 <sbrk_aligned>
 8006e5a:	3001      	adds	r0, #1
 8006e5c:	d037      	beq.n	8006ece <_malloc_r+0xe6>
 8006e5e:	6823      	ldr	r3, [r4, #0]
 8006e60:	442b      	add	r3, r5
 8006e62:	6023      	str	r3, [r4, #0]
 8006e64:	f8d8 3000 	ldr.w	r3, [r8]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d038      	beq.n	8006ede <_malloc_r+0xf6>
 8006e6c:	685a      	ldr	r2, [r3, #4]
 8006e6e:	42a2      	cmp	r2, r4
 8006e70:	d12b      	bne.n	8006eca <_malloc_r+0xe2>
 8006e72:	2200      	movs	r2, #0
 8006e74:	605a      	str	r2, [r3, #4]
 8006e76:	e00f      	b.n	8006e98 <_malloc_r+0xb0>
 8006e78:	6822      	ldr	r2, [r4, #0]
 8006e7a:	1b52      	subs	r2, r2, r5
 8006e7c:	d41f      	bmi.n	8006ebe <_malloc_r+0xd6>
 8006e7e:	2a0b      	cmp	r2, #11
 8006e80:	d917      	bls.n	8006eb2 <_malloc_r+0xca>
 8006e82:	1961      	adds	r1, r4, r5
 8006e84:	42a3      	cmp	r3, r4
 8006e86:	6025      	str	r5, [r4, #0]
 8006e88:	bf18      	it	ne
 8006e8a:	6059      	strne	r1, [r3, #4]
 8006e8c:	6863      	ldr	r3, [r4, #4]
 8006e8e:	bf08      	it	eq
 8006e90:	f8c8 1000 	streq.w	r1, [r8]
 8006e94:	5162      	str	r2, [r4, r5]
 8006e96:	604b      	str	r3, [r1, #4]
 8006e98:	4638      	mov	r0, r7
 8006e9a:	f104 060b 	add.w	r6, r4, #11
 8006e9e:	f000 f829 	bl	8006ef4 <__malloc_unlock>
 8006ea2:	f026 0607 	bic.w	r6, r6, #7
 8006ea6:	1d23      	adds	r3, r4, #4
 8006ea8:	1af2      	subs	r2, r6, r3
 8006eaa:	d0ae      	beq.n	8006e0a <_malloc_r+0x22>
 8006eac:	1b9b      	subs	r3, r3, r6
 8006eae:	50a3      	str	r3, [r4, r2]
 8006eb0:	e7ab      	b.n	8006e0a <_malloc_r+0x22>
 8006eb2:	42a3      	cmp	r3, r4
 8006eb4:	6862      	ldr	r2, [r4, #4]
 8006eb6:	d1dd      	bne.n	8006e74 <_malloc_r+0x8c>
 8006eb8:	f8c8 2000 	str.w	r2, [r8]
 8006ebc:	e7ec      	b.n	8006e98 <_malloc_r+0xb0>
 8006ebe:	4623      	mov	r3, r4
 8006ec0:	6864      	ldr	r4, [r4, #4]
 8006ec2:	e7ac      	b.n	8006e1e <_malloc_r+0x36>
 8006ec4:	4634      	mov	r4, r6
 8006ec6:	6876      	ldr	r6, [r6, #4]
 8006ec8:	e7b4      	b.n	8006e34 <_malloc_r+0x4c>
 8006eca:	4613      	mov	r3, r2
 8006ecc:	e7cc      	b.n	8006e68 <_malloc_r+0x80>
 8006ece:	230c      	movs	r3, #12
 8006ed0:	603b      	str	r3, [r7, #0]
 8006ed2:	4638      	mov	r0, r7
 8006ed4:	f000 f80e 	bl	8006ef4 <__malloc_unlock>
 8006ed8:	e797      	b.n	8006e0a <_malloc_r+0x22>
 8006eda:	6025      	str	r5, [r4, #0]
 8006edc:	e7dc      	b.n	8006e98 <_malloc_r+0xb0>
 8006ede:	605b      	str	r3, [r3, #4]
 8006ee0:	deff      	udf	#255	; 0xff
 8006ee2:	bf00      	nop
 8006ee4:	200005cc 	.word	0x200005cc

08006ee8 <__malloc_lock>:
 8006ee8:	4801      	ldr	r0, [pc, #4]	; (8006ef0 <__malloc_lock+0x8>)
 8006eea:	f001 b848 	b.w	8007f7e <__retarget_lock_acquire_recursive>
 8006eee:	bf00      	nop
 8006ef0:	20000714 	.word	0x20000714

08006ef4 <__malloc_unlock>:
 8006ef4:	4801      	ldr	r0, [pc, #4]	; (8006efc <__malloc_unlock+0x8>)
 8006ef6:	f001 b843 	b.w	8007f80 <__retarget_lock_release_recursive>
 8006efa:	bf00      	nop
 8006efc:	20000714 	.word	0x20000714

08006f00 <__cvt>:
 8006f00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f04:	ec55 4b10 	vmov	r4, r5, d0
 8006f08:	2d00      	cmp	r5, #0
 8006f0a:	460e      	mov	r6, r1
 8006f0c:	4619      	mov	r1, r3
 8006f0e:	462b      	mov	r3, r5
 8006f10:	bfbb      	ittet	lt
 8006f12:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006f16:	461d      	movlt	r5, r3
 8006f18:	2300      	movge	r3, #0
 8006f1a:	232d      	movlt	r3, #45	; 0x2d
 8006f1c:	700b      	strb	r3, [r1, #0]
 8006f1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006f20:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006f24:	4691      	mov	r9, r2
 8006f26:	f023 0820 	bic.w	r8, r3, #32
 8006f2a:	bfbc      	itt	lt
 8006f2c:	4622      	movlt	r2, r4
 8006f2e:	4614      	movlt	r4, r2
 8006f30:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006f34:	d005      	beq.n	8006f42 <__cvt+0x42>
 8006f36:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006f3a:	d100      	bne.n	8006f3e <__cvt+0x3e>
 8006f3c:	3601      	adds	r6, #1
 8006f3e:	2102      	movs	r1, #2
 8006f40:	e000      	b.n	8006f44 <__cvt+0x44>
 8006f42:	2103      	movs	r1, #3
 8006f44:	ab03      	add	r3, sp, #12
 8006f46:	9301      	str	r3, [sp, #4]
 8006f48:	ab02      	add	r3, sp, #8
 8006f4a:	9300      	str	r3, [sp, #0]
 8006f4c:	ec45 4b10 	vmov	d0, r4, r5
 8006f50:	4653      	mov	r3, sl
 8006f52:	4632      	mov	r2, r6
 8006f54:	f001 f8ac 	bl	80080b0 <_dtoa_r>
 8006f58:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006f5c:	4607      	mov	r7, r0
 8006f5e:	d102      	bne.n	8006f66 <__cvt+0x66>
 8006f60:	f019 0f01 	tst.w	r9, #1
 8006f64:	d022      	beq.n	8006fac <__cvt+0xac>
 8006f66:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006f6a:	eb07 0906 	add.w	r9, r7, r6
 8006f6e:	d110      	bne.n	8006f92 <__cvt+0x92>
 8006f70:	783b      	ldrb	r3, [r7, #0]
 8006f72:	2b30      	cmp	r3, #48	; 0x30
 8006f74:	d10a      	bne.n	8006f8c <__cvt+0x8c>
 8006f76:	2200      	movs	r2, #0
 8006f78:	2300      	movs	r3, #0
 8006f7a:	4620      	mov	r0, r4
 8006f7c:	4629      	mov	r1, r5
 8006f7e:	f7f9 fda3 	bl	8000ac8 <__aeabi_dcmpeq>
 8006f82:	b918      	cbnz	r0, 8006f8c <__cvt+0x8c>
 8006f84:	f1c6 0601 	rsb	r6, r6, #1
 8006f88:	f8ca 6000 	str.w	r6, [sl]
 8006f8c:	f8da 3000 	ldr.w	r3, [sl]
 8006f90:	4499      	add	r9, r3
 8006f92:	2200      	movs	r2, #0
 8006f94:	2300      	movs	r3, #0
 8006f96:	4620      	mov	r0, r4
 8006f98:	4629      	mov	r1, r5
 8006f9a:	f7f9 fd95 	bl	8000ac8 <__aeabi_dcmpeq>
 8006f9e:	b108      	cbz	r0, 8006fa4 <__cvt+0xa4>
 8006fa0:	f8cd 900c 	str.w	r9, [sp, #12]
 8006fa4:	2230      	movs	r2, #48	; 0x30
 8006fa6:	9b03      	ldr	r3, [sp, #12]
 8006fa8:	454b      	cmp	r3, r9
 8006faa:	d307      	bcc.n	8006fbc <__cvt+0xbc>
 8006fac:	9b03      	ldr	r3, [sp, #12]
 8006fae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006fb0:	1bdb      	subs	r3, r3, r7
 8006fb2:	4638      	mov	r0, r7
 8006fb4:	6013      	str	r3, [r2, #0]
 8006fb6:	b004      	add	sp, #16
 8006fb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fbc:	1c59      	adds	r1, r3, #1
 8006fbe:	9103      	str	r1, [sp, #12]
 8006fc0:	701a      	strb	r2, [r3, #0]
 8006fc2:	e7f0      	b.n	8006fa6 <__cvt+0xa6>

08006fc4 <__exponent>:
 8006fc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	2900      	cmp	r1, #0
 8006fca:	bfb8      	it	lt
 8006fcc:	4249      	neglt	r1, r1
 8006fce:	f803 2b02 	strb.w	r2, [r3], #2
 8006fd2:	bfb4      	ite	lt
 8006fd4:	222d      	movlt	r2, #45	; 0x2d
 8006fd6:	222b      	movge	r2, #43	; 0x2b
 8006fd8:	2909      	cmp	r1, #9
 8006fda:	7042      	strb	r2, [r0, #1]
 8006fdc:	dd2a      	ble.n	8007034 <__exponent+0x70>
 8006fde:	f10d 0207 	add.w	r2, sp, #7
 8006fe2:	4617      	mov	r7, r2
 8006fe4:	260a      	movs	r6, #10
 8006fe6:	4694      	mov	ip, r2
 8006fe8:	fb91 f5f6 	sdiv	r5, r1, r6
 8006fec:	fb06 1415 	mls	r4, r6, r5, r1
 8006ff0:	3430      	adds	r4, #48	; 0x30
 8006ff2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8006ff6:	460c      	mov	r4, r1
 8006ff8:	2c63      	cmp	r4, #99	; 0x63
 8006ffa:	f102 32ff 	add.w	r2, r2, #4294967295
 8006ffe:	4629      	mov	r1, r5
 8007000:	dcf1      	bgt.n	8006fe6 <__exponent+0x22>
 8007002:	3130      	adds	r1, #48	; 0x30
 8007004:	f1ac 0402 	sub.w	r4, ip, #2
 8007008:	f802 1c01 	strb.w	r1, [r2, #-1]
 800700c:	1c41      	adds	r1, r0, #1
 800700e:	4622      	mov	r2, r4
 8007010:	42ba      	cmp	r2, r7
 8007012:	d30a      	bcc.n	800702a <__exponent+0x66>
 8007014:	f10d 0209 	add.w	r2, sp, #9
 8007018:	eba2 020c 	sub.w	r2, r2, ip
 800701c:	42bc      	cmp	r4, r7
 800701e:	bf88      	it	hi
 8007020:	2200      	movhi	r2, #0
 8007022:	4413      	add	r3, r2
 8007024:	1a18      	subs	r0, r3, r0
 8007026:	b003      	add	sp, #12
 8007028:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800702a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800702e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8007032:	e7ed      	b.n	8007010 <__exponent+0x4c>
 8007034:	2330      	movs	r3, #48	; 0x30
 8007036:	3130      	adds	r1, #48	; 0x30
 8007038:	7083      	strb	r3, [r0, #2]
 800703a:	70c1      	strb	r1, [r0, #3]
 800703c:	1d03      	adds	r3, r0, #4
 800703e:	e7f1      	b.n	8007024 <__exponent+0x60>

08007040 <_printf_float>:
 8007040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007044:	ed2d 8b02 	vpush	{d8}
 8007048:	b08d      	sub	sp, #52	; 0x34
 800704a:	460c      	mov	r4, r1
 800704c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007050:	4616      	mov	r6, r2
 8007052:	461f      	mov	r7, r3
 8007054:	4605      	mov	r5, r0
 8007056:	f000 ff0d 	bl	8007e74 <_localeconv_r>
 800705a:	f8d0 a000 	ldr.w	sl, [r0]
 800705e:	4650      	mov	r0, sl
 8007060:	f7f9 f906 	bl	8000270 <strlen>
 8007064:	2300      	movs	r3, #0
 8007066:	930a      	str	r3, [sp, #40]	; 0x28
 8007068:	6823      	ldr	r3, [r4, #0]
 800706a:	9305      	str	r3, [sp, #20]
 800706c:	f8d8 3000 	ldr.w	r3, [r8]
 8007070:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007074:	3307      	adds	r3, #7
 8007076:	f023 0307 	bic.w	r3, r3, #7
 800707a:	f103 0208 	add.w	r2, r3, #8
 800707e:	f8c8 2000 	str.w	r2, [r8]
 8007082:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007086:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800708a:	9307      	str	r3, [sp, #28]
 800708c:	f8cd 8018 	str.w	r8, [sp, #24]
 8007090:	ee08 0a10 	vmov	s16, r0
 8007094:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8007098:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800709c:	4b9e      	ldr	r3, [pc, #632]	; (8007318 <_printf_float+0x2d8>)
 800709e:	f04f 32ff 	mov.w	r2, #4294967295
 80070a2:	f7f9 fd43 	bl	8000b2c <__aeabi_dcmpun>
 80070a6:	bb88      	cbnz	r0, 800710c <_printf_float+0xcc>
 80070a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80070ac:	4b9a      	ldr	r3, [pc, #616]	; (8007318 <_printf_float+0x2d8>)
 80070ae:	f04f 32ff 	mov.w	r2, #4294967295
 80070b2:	f7f9 fd1d 	bl	8000af0 <__aeabi_dcmple>
 80070b6:	bb48      	cbnz	r0, 800710c <_printf_float+0xcc>
 80070b8:	2200      	movs	r2, #0
 80070ba:	2300      	movs	r3, #0
 80070bc:	4640      	mov	r0, r8
 80070be:	4649      	mov	r1, r9
 80070c0:	f7f9 fd0c 	bl	8000adc <__aeabi_dcmplt>
 80070c4:	b110      	cbz	r0, 80070cc <_printf_float+0x8c>
 80070c6:	232d      	movs	r3, #45	; 0x2d
 80070c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80070cc:	4a93      	ldr	r2, [pc, #588]	; (800731c <_printf_float+0x2dc>)
 80070ce:	4b94      	ldr	r3, [pc, #592]	; (8007320 <_printf_float+0x2e0>)
 80070d0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80070d4:	bf94      	ite	ls
 80070d6:	4690      	movls	r8, r2
 80070d8:	4698      	movhi	r8, r3
 80070da:	2303      	movs	r3, #3
 80070dc:	6123      	str	r3, [r4, #16]
 80070de:	9b05      	ldr	r3, [sp, #20]
 80070e0:	f023 0304 	bic.w	r3, r3, #4
 80070e4:	6023      	str	r3, [r4, #0]
 80070e6:	f04f 0900 	mov.w	r9, #0
 80070ea:	9700      	str	r7, [sp, #0]
 80070ec:	4633      	mov	r3, r6
 80070ee:	aa0b      	add	r2, sp, #44	; 0x2c
 80070f0:	4621      	mov	r1, r4
 80070f2:	4628      	mov	r0, r5
 80070f4:	f000 f9da 	bl	80074ac <_printf_common>
 80070f8:	3001      	adds	r0, #1
 80070fa:	f040 8090 	bne.w	800721e <_printf_float+0x1de>
 80070fe:	f04f 30ff 	mov.w	r0, #4294967295
 8007102:	b00d      	add	sp, #52	; 0x34
 8007104:	ecbd 8b02 	vpop	{d8}
 8007108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800710c:	4642      	mov	r2, r8
 800710e:	464b      	mov	r3, r9
 8007110:	4640      	mov	r0, r8
 8007112:	4649      	mov	r1, r9
 8007114:	f7f9 fd0a 	bl	8000b2c <__aeabi_dcmpun>
 8007118:	b140      	cbz	r0, 800712c <_printf_float+0xec>
 800711a:	464b      	mov	r3, r9
 800711c:	2b00      	cmp	r3, #0
 800711e:	bfbc      	itt	lt
 8007120:	232d      	movlt	r3, #45	; 0x2d
 8007122:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007126:	4a7f      	ldr	r2, [pc, #508]	; (8007324 <_printf_float+0x2e4>)
 8007128:	4b7f      	ldr	r3, [pc, #508]	; (8007328 <_printf_float+0x2e8>)
 800712a:	e7d1      	b.n	80070d0 <_printf_float+0x90>
 800712c:	6863      	ldr	r3, [r4, #4]
 800712e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007132:	9206      	str	r2, [sp, #24]
 8007134:	1c5a      	adds	r2, r3, #1
 8007136:	d13f      	bne.n	80071b8 <_printf_float+0x178>
 8007138:	2306      	movs	r3, #6
 800713a:	6063      	str	r3, [r4, #4]
 800713c:	9b05      	ldr	r3, [sp, #20]
 800713e:	6861      	ldr	r1, [r4, #4]
 8007140:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007144:	2300      	movs	r3, #0
 8007146:	9303      	str	r3, [sp, #12]
 8007148:	ab0a      	add	r3, sp, #40	; 0x28
 800714a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800714e:	ab09      	add	r3, sp, #36	; 0x24
 8007150:	ec49 8b10 	vmov	d0, r8, r9
 8007154:	9300      	str	r3, [sp, #0]
 8007156:	6022      	str	r2, [r4, #0]
 8007158:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800715c:	4628      	mov	r0, r5
 800715e:	f7ff fecf 	bl	8006f00 <__cvt>
 8007162:	9b06      	ldr	r3, [sp, #24]
 8007164:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007166:	2b47      	cmp	r3, #71	; 0x47
 8007168:	4680      	mov	r8, r0
 800716a:	d108      	bne.n	800717e <_printf_float+0x13e>
 800716c:	1cc8      	adds	r0, r1, #3
 800716e:	db02      	blt.n	8007176 <_printf_float+0x136>
 8007170:	6863      	ldr	r3, [r4, #4]
 8007172:	4299      	cmp	r1, r3
 8007174:	dd41      	ble.n	80071fa <_printf_float+0x1ba>
 8007176:	f1ab 0302 	sub.w	r3, fp, #2
 800717a:	fa5f fb83 	uxtb.w	fp, r3
 800717e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007182:	d820      	bhi.n	80071c6 <_printf_float+0x186>
 8007184:	3901      	subs	r1, #1
 8007186:	465a      	mov	r2, fp
 8007188:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800718c:	9109      	str	r1, [sp, #36]	; 0x24
 800718e:	f7ff ff19 	bl	8006fc4 <__exponent>
 8007192:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007194:	1813      	adds	r3, r2, r0
 8007196:	2a01      	cmp	r2, #1
 8007198:	4681      	mov	r9, r0
 800719a:	6123      	str	r3, [r4, #16]
 800719c:	dc02      	bgt.n	80071a4 <_printf_float+0x164>
 800719e:	6822      	ldr	r2, [r4, #0]
 80071a0:	07d2      	lsls	r2, r2, #31
 80071a2:	d501      	bpl.n	80071a8 <_printf_float+0x168>
 80071a4:	3301      	adds	r3, #1
 80071a6:	6123      	str	r3, [r4, #16]
 80071a8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d09c      	beq.n	80070ea <_printf_float+0xaa>
 80071b0:	232d      	movs	r3, #45	; 0x2d
 80071b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80071b6:	e798      	b.n	80070ea <_printf_float+0xaa>
 80071b8:	9a06      	ldr	r2, [sp, #24]
 80071ba:	2a47      	cmp	r2, #71	; 0x47
 80071bc:	d1be      	bne.n	800713c <_printf_float+0xfc>
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d1bc      	bne.n	800713c <_printf_float+0xfc>
 80071c2:	2301      	movs	r3, #1
 80071c4:	e7b9      	b.n	800713a <_printf_float+0xfa>
 80071c6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80071ca:	d118      	bne.n	80071fe <_printf_float+0x1be>
 80071cc:	2900      	cmp	r1, #0
 80071ce:	6863      	ldr	r3, [r4, #4]
 80071d0:	dd0b      	ble.n	80071ea <_printf_float+0x1aa>
 80071d2:	6121      	str	r1, [r4, #16]
 80071d4:	b913      	cbnz	r3, 80071dc <_printf_float+0x19c>
 80071d6:	6822      	ldr	r2, [r4, #0]
 80071d8:	07d0      	lsls	r0, r2, #31
 80071da:	d502      	bpl.n	80071e2 <_printf_float+0x1a2>
 80071dc:	3301      	adds	r3, #1
 80071de:	440b      	add	r3, r1
 80071e0:	6123      	str	r3, [r4, #16]
 80071e2:	65a1      	str	r1, [r4, #88]	; 0x58
 80071e4:	f04f 0900 	mov.w	r9, #0
 80071e8:	e7de      	b.n	80071a8 <_printf_float+0x168>
 80071ea:	b913      	cbnz	r3, 80071f2 <_printf_float+0x1b2>
 80071ec:	6822      	ldr	r2, [r4, #0]
 80071ee:	07d2      	lsls	r2, r2, #31
 80071f0:	d501      	bpl.n	80071f6 <_printf_float+0x1b6>
 80071f2:	3302      	adds	r3, #2
 80071f4:	e7f4      	b.n	80071e0 <_printf_float+0x1a0>
 80071f6:	2301      	movs	r3, #1
 80071f8:	e7f2      	b.n	80071e0 <_printf_float+0x1a0>
 80071fa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80071fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007200:	4299      	cmp	r1, r3
 8007202:	db05      	blt.n	8007210 <_printf_float+0x1d0>
 8007204:	6823      	ldr	r3, [r4, #0]
 8007206:	6121      	str	r1, [r4, #16]
 8007208:	07d8      	lsls	r0, r3, #31
 800720a:	d5ea      	bpl.n	80071e2 <_printf_float+0x1a2>
 800720c:	1c4b      	adds	r3, r1, #1
 800720e:	e7e7      	b.n	80071e0 <_printf_float+0x1a0>
 8007210:	2900      	cmp	r1, #0
 8007212:	bfd4      	ite	le
 8007214:	f1c1 0202 	rsble	r2, r1, #2
 8007218:	2201      	movgt	r2, #1
 800721a:	4413      	add	r3, r2
 800721c:	e7e0      	b.n	80071e0 <_printf_float+0x1a0>
 800721e:	6823      	ldr	r3, [r4, #0]
 8007220:	055a      	lsls	r2, r3, #21
 8007222:	d407      	bmi.n	8007234 <_printf_float+0x1f4>
 8007224:	6923      	ldr	r3, [r4, #16]
 8007226:	4642      	mov	r2, r8
 8007228:	4631      	mov	r1, r6
 800722a:	4628      	mov	r0, r5
 800722c:	47b8      	blx	r7
 800722e:	3001      	adds	r0, #1
 8007230:	d12c      	bne.n	800728c <_printf_float+0x24c>
 8007232:	e764      	b.n	80070fe <_printf_float+0xbe>
 8007234:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007238:	f240 80e0 	bls.w	80073fc <_printf_float+0x3bc>
 800723c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007240:	2200      	movs	r2, #0
 8007242:	2300      	movs	r3, #0
 8007244:	f7f9 fc40 	bl	8000ac8 <__aeabi_dcmpeq>
 8007248:	2800      	cmp	r0, #0
 800724a:	d034      	beq.n	80072b6 <_printf_float+0x276>
 800724c:	4a37      	ldr	r2, [pc, #220]	; (800732c <_printf_float+0x2ec>)
 800724e:	2301      	movs	r3, #1
 8007250:	4631      	mov	r1, r6
 8007252:	4628      	mov	r0, r5
 8007254:	47b8      	blx	r7
 8007256:	3001      	adds	r0, #1
 8007258:	f43f af51 	beq.w	80070fe <_printf_float+0xbe>
 800725c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007260:	429a      	cmp	r2, r3
 8007262:	db02      	blt.n	800726a <_printf_float+0x22a>
 8007264:	6823      	ldr	r3, [r4, #0]
 8007266:	07d8      	lsls	r0, r3, #31
 8007268:	d510      	bpl.n	800728c <_printf_float+0x24c>
 800726a:	ee18 3a10 	vmov	r3, s16
 800726e:	4652      	mov	r2, sl
 8007270:	4631      	mov	r1, r6
 8007272:	4628      	mov	r0, r5
 8007274:	47b8      	blx	r7
 8007276:	3001      	adds	r0, #1
 8007278:	f43f af41 	beq.w	80070fe <_printf_float+0xbe>
 800727c:	f04f 0800 	mov.w	r8, #0
 8007280:	f104 091a 	add.w	r9, r4, #26
 8007284:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007286:	3b01      	subs	r3, #1
 8007288:	4543      	cmp	r3, r8
 800728a:	dc09      	bgt.n	80072a0 <_printf_float+0x260>
 800728c:	6823      	ldr	r3, [r4, #0]
 800728e:	079b      	lsls	r3, r3, #30
 8007290:	f100 8107 	bmi.w	80074a2 <_printf_float+0x462>
 8007294:	68e0      	ldr	r0, [r4, #12]
 8007296:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007298:	4298      	cmp	r0, r3
 800729a:	bfb8      	it	lt
 800729c:	4618      	movlt	r0, r3
 800729e:	e730      	b.n	8007102 <_printf_float+0xc2>
 80072a0:	2301      	movs	r3, #1
 80072a2:	464a      	mov	r2, r9
 80072a4:	4631      	mov	r1, r6
 80072a6:	4628      	mov	r0, r5
 80072a8:	47b8      	blx	r7
 80072aa:	3001      	adds	r0, #1
 80072ac:	f43f af27 	beq.w	80070fe <_printf_float+0xbe>
 80072b0:	f108 0801 	add.w	r8, r8, #1
 80072b4:	e7e6      	b.n	8007284 <_printf_float+0x244>
 80072b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	dc39      	bgt.n	8007330 <_printf_float+0x2f0>
 80072bc:	4a1b      	ldr	r2, [pc, #108]	; (800732c <_printf_float+0x2ec>)
 80072be:	2301      	movs	r3, #1
 80072c0:	4631      	mov	r1, r6
 80072c2:	4628      	mov	r0, r5
 80072c4:	47b8      	blx	r7
 80072c6:	3001      	adds	r0, #1
 80072c8:	f43f af19 	beq.w	80070fe <_printf_float+0xbe>
 80072cc:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80072d0:	4313      	orrs	r3, r2
 80072d2:	d102      	bne.n	80072da <_printf_float+0x29a>
 80072d4:	6823      	ldr	r3, [r4, #0]
 80072d6:	07d9      	lsls	r1, r3, #31
 80072d8:	d5d8      	bpl.n	800728c <_printf_float+0x24c>
 80072da:	ee18 3a10 	vmov	r3, s16
 80072de:	4652      	mov	r2, sl
 80072e0:	4631      	mov	r1, r6
 80072e2:	4628      	mov	r0, r5
 80072e4:	47b8      	blx	r7
 80072e6:	3001      	adds	r0, #1
 80072e8:	f43f af09 	beq.w	80070fe <_printf_float+0xbe>
 80072ec:	f04f 0900 	mov.w	r9, #0
 80072f0:	f104 0a1a 	add.w	sl, r4, #26
 80072f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072f6:	425b      	negs	r3, r3
 80072f8:	454b      	cmp	r3, r9
 80072fa:	dc01      	bgt.n	8007300 <_printf_float+0x2c0>
 80072fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072fe:	e792      	b.n	8007226 <_printf_float+0x1e6>
 8007300:	2301      	movs	r3, #1
 8007302:	4652      	mov	r2, sl
 8007304:	4631      	mov	r1, r6
 8007306:	4628      	mov	r0, r5
 8007308:	47b8      	blx	r7
 800730a:	3001      	adds	r0, #1
 800730c:	f43f aef7 	beq.w	80070fe <_printf_float+0xbe>
 8007310:	f109 0901 	add.w	r9, r9, #1
 8007314:	e7ee      	b.n	80072f4 <_printf_float+0x2b4>
 8007316:	bf00      	nop
 8007318:	7fefffff 	.word	0x7fefffff
 800731c:	0800b7dc 	.word	0x0800b7dc
 8007320:	0800b7e0 	.word	0x0800b7e0
 8007324:	0800b7e4 	.word	0x0800b7e4
 8007328:	0800b7e8 	.word	0x0800b7e8
 800732c:	0800b7ec 	.word	0x0800b7ec
 8007330:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007332:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007334:	429a      	cmp	r2, r3
 8007336:	bfa8      	it	ge
 8007338:	461a      	movge	r2, r3
 800733a:	2a00      	cmp	r2, #0
 800733c:	4691      	mov	r9, r2
 800733e:	dc37      	bgt.n	80073b0 <_printf_float+0x370>
 8007340:	f04f 0b00 	mov.w	fp, #0
 8007344:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007348:	f104 021a 	add.w	r2, r4, #26
 800734c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800734e:	9305      	str	r3, [sp, #20]
 8007350:	eba3 0309 	sub.w	r3, r3, r9
 8007354:	455b      	cmp	r3, fp
 8007356:	dc33      	bgt.n	80073c0 <_printf_float+0x380>
 8007358:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800735c:	429a      	cmp	r2, r3
 800735e:	db3b      	blt.n	80073d8 <_printf_float+0x398>
 8007360:	6823      	ldr	r3, [r4, #0]
 8007362:	07da      	lsls	r2, r3, #31
 8007364:	d438      	bmi.n	80073d8 <_printf_float+0x398>
 8007366:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800736a:	eba2 0903 	sub.w	r9, r2, r3
 800736e:	9b05      	ldr	r3, [sp, #20]
 8007370:	1ad2      	subs	r2, r2, r3
 8007372:	4591      	cmp	r9, r2
 8007374:	bfa8      	it	ge
 8007376:	4691      	movge	r9, r2
 8007378:	f1b9 0f00 	cmp.w	r9, #0
 800737c:	dc35      	bgt.n	80073ea <_printf_float+0x3aa>
 800737e:	f04f 0800 	mov.w	r8, #0
 8007382:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007386:	f104 0a1a 	add.w	sl, r4, #26
 800738a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800738e:	1a9b      	subs	r3, r3, r2
 8007390:	eba3 0309 	sub.w	r3, r3, r9
 8007394:	4543      	cmp	r3, r8
 8007396:	f77f af79 	ble.w	800728c <_printf_float+0x24c>
 800739a:	2301      	movs	r3, #1
 800739c:	4652      	mov	r2, sl
 800739e:	4631      	mov	r1, r6
 80073a0:	4628      	mov	r0, r5
 80073a2:	47b8      	blx	r7
 80073a4:	3001      	adds	r0, #1
 80073a6:	f43f aeaa 	beq.w	80070fe <_printf_float+0xbe>
 80073aa:	f108 0801 	add.w	r8, r8, #1
 80073ae:	e7ec      	b.n	800738a <_printf_float+0x34a>
 80073b0:	4613      	mov	r3, r2
 80073b2:	4631      	mov	r1, r6
 80073b4:	4642      	mov	r2, r8
 80073b6:	4628      	mov	r0, r5
 80073b8:	47b8      	blx	r7
 80073ba:	3001      	adds	r0, #1
 80073bc:	d1c0      	bne.n	8007340 <_printf_float+0x300>
 80073be:	e69e      	b.n	80070fe <_printf_float+0xbe>
 80073c0:	2301      	movs	r3, #1
 80073c2:	4631      	mov	r1, r6
 80073c4:	4628      	mov	r0, r5
 80073c6:	9205      	str	r2, [sp, #20]
 80073c8:	47b8      	blx	r7
 80073ca:	3001      	adds	r0, #1
 80073cc:	f43f ae97 	beq.w	80070fe <_printf_float+0xbe>
 80073d0:	9a05      	ldr	r2, [sp, #20]
 80073d2:	f10b 0b01 	add.w	fp, fp, #1
 80073d6:	e7b9      	b.n	800734c <_printf_float+0x30c>
 80073d8:	ee18 3a10 	vmov	r3, s16
 80073dc:	4652      	mov	r2, sl
 80073de:	4631      	mov	r1, r6
 80073e0:	4628      	mov	r0, r5
 80073e2:	47b8      	blx	r7
 80073e4:	3001      	adds	r0, #1
 80073e6:	d1be      	bne.n	8007366 <_printf_float+0x326>
 80073e8:	e689      	b.n	80070fe <_printf_float+0xbe>
 80073ea:	9a05      	ldr	r2, [sp, #20]
 80073ec:	464b      	mov	r3, r9
 80073ee:	4442      	add	r2, r8
 80073f0:	4631      	mov	r1, r6
 80073f2:	4628      	mov	r0, r5
 80073f4:	47b8      	blx	r7
 80073f6:	3001      	adds	r0, #1
 80073f8:	d1c1      	bne.n	800737e <_printf_float+0x33e>
 80073fa:	e680      	b.n	80070fe <_printf_float+0xbe>
 80073fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80073fe:	2a01      	cmp	r2, #1
 8007400:	dc01      	bgt.n	8007406 <_printf_float+0x3c6>
 8007402:	07db      	lsls	r3, r3, #31
 8007404:	d53a      	bpl.n	800747c <_printf_float+0x43c>
 8007406:	2301      	movs	r3, #1
 8007408:	4642      	mov	r2, r8
 800740a:	4631      	mov	r1, r6
 800740c:	4628      	mov	r0, r5
 800740e:	47b8      	blx	r7
 8007410:	3001      	adds	r0, #1
 8007412:	f43f ae74 	beq.w	80070fe <_printf_float+0xbe>
 8007416:	ee18 3a10 	vmov	r3, s16
 800741a:	4652      	mov	r2, sl
 800741c:	4631      	mov	r1, r6
 800741e:	4628      	mov	r0, r5
 8007420:	47b8      	blx	r7
 8007422:	3001      	adds	r0, #1
 8007424:	f43f ae6b 	beq.w	80070fe <_printf_float+0xbe>
 8007428:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800742c:	2200      	movs	r2, #0
 800742e:	2300      	movs	r3, #0
 8007430:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8007434:	f7f9 fb48 	bl	8000ac8 <__aeabi_dcmpeq>
 8007438:	b9d8      	cbnz	r0, 8007472 <_printf_float+0x432>
 800743a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800743e:	f108 0201 	add.w	r2, r8, #1
 8007442:	4631      	mov	r1, r6
 8007444:	4628      	mov	r0, r5
 8007446:	47b8      	blx	r7
 8007448:	3001      	adds	r0, #1
 800744a:	d10e      	bne.n	800746a <_printf_float+0x42a>
 800744c:	e657      	b.n	80070fe <_printf_float+0xbe>
 800744e:	2301      	movs	r3, #1
 8007450:	4652      	mov	r2, sl
 8007452:	4631      	mov	r1, r6
 8007454:	4628      	mov	r0, r5
 8007456:	47b8      	blx	r7
 8007458:	3001      	adds	r0, #1
 800745a:	f43f ae50 	beq.w	80070fe <_printf_float+0xbe>
 800745e:	f108 0801 	add.w	r8, r8, #1
 8007462:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007464:	3b01      	subs	r3, #1
 8007466:	4543      	cmp	r3, r8
 8007468:	dcf1      	bgt.n	800744e <_printf_float+0x40e>
 800746a:	464b      	mov	r3, r9
 800746c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007470:	e6da      	b.n	8007228 <_printf_float+0x1e8>
 8007472:	f04f 0800 	mov.w	r8, #0
 8007476:	f104 0a1a 	add.w	sl, r4, #26
 800747a:	e7f2      	b.n	8007462 <_printf_float+0x422>
 800747c:	2301      	movs	r3, #1
 800747e:	4642      	mov	r2, r8
 8007480:	e7df      	b.n	8007442 <_printf_float+0x402>
 8007482:	2301      	movs	r3, #1
 8007484:	464a      	mov	r2, r9
 8007486:	4631      	mov	r1, r6
 8007488:	4628      	mov	r0, r5
 800748a:	47b8      	blx	r7
 800748c:	3001      	adds	r0, #1
 800748e:	f43f ae36 	beq.w	80070fe <_printf_float+0xbe>
 8007492:	f108 0801 	add.w	r8, r8, #1
 8007496:	68e3      	ldr	r3, [r4, #12]
 8007498:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800749a:	1a5b      	subs	r3, r3, r1
 800749c:	4543      	cmp	r3, r8
 800749e:	dcf0      	bgt.n	8007482 <_printf_float+0x442>
 80074a0:	e6f8      	b.n	8007294 <_printf_float+0x254>
 80074a2:	f04f 0800 	mov.w	r8, #0
 80074a6:	f104 0919 	add.w	r9, r4, #25
 80074aa:	e7f4      	b.n	8007496 <_printf_float+0x456>

080074ac <_printf_common>:
 80074ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074b0:	4616      	mov	r6, r2
 80074b2:	4699      	mov	r9, r3
 80074b4:	688a      	ldr	r2, [r1, #8]
 80074b6:	690b      	ldr	r3, [r1, #16]
 80074b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80074bc:	4293      	cmp	r3, r2
 80074be:	bfb8      	it	lt
 80074c0:	4613      	movlt	r3, r2
 80074c2:	6033      	str	r3, [r6, #0]
 80074c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80074c8:	4607      	mov	r7, r0
 80074ca:	460c      	mov	r4, r1
 80074cc:	b10a      	cbz	r2, 80074d2 <_printf_common+0x26>
 80074ce:	3301      	adds	r3, #1
 80074d0:	6033      	str	r3, [r6, #0]
 80074d2:	6823      	ldr	r3, [r4, #0]
 80074d4:	0699      	lsls	r1, r3, #26
 80074d6:	bf42      	ittt	mi
 80074d8:	6833      	ldrmi	r3, [r6, #0]
 80074da:	3302      	addmi	r3, #2
 80074dc:	6033      	strmi	r3, [r6, #0]
 80074de:	6825      	ldr	r5, [r4, #0]
 80074e0:	f015 0506 	ands.w	r5, r5, #6
 80074e4:	d106      	bne.n	80074f4 <_printf_common+0x48>
 80074e6:	f104 0a19 	add.w	sl, r4, #25
 80074ea:	68e3      	ldr	r3, [r4, #12]
 80074ec:	6832      	ldr	r2, [r6, #0]
 80074ee:	1a9b      	subs	r3, r3, r2
 80074f0:	42ab      	cmp	r3, r5
 80074f2:	dc26      	bgt.n	8007542 <_printf_common+0x96>
 80074f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80074f8:	1e13      	subs	r3, r2, #0
 80074fa:	6822      	ldr	r2, [r4, #0]
 80074fc:	bf18      	it	ne
 80074fe:	2301      	movne	r3, #1
 8007500:	0692      	lsls	r2, r2, #26
 8007502:	d42b      	bmi.n	800755c <_printf_common+0xb0>
 8007504:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007508:	4649      	mov	r1, r9
 800750a:	4638      	mov	r0, r7
 800750c:	47c0      	blx	r8
 800750e:	3001      	adds	r0, #1
 8007510:	d01e      	beq.n	8007550 <_printf_common+0xa4>
 8007512:	6823      	ldr	r3, [r4, #0]
 8007514:	6922      	ldr	r2, [r4, #16]
 8007516:	f003 0306 	and.w	r3, r3, #6
 800751a:	2b04      	cmp	r3, #4
 800751c:	bf02      	ittt	eq
 800751e:	68e5      	ldreq	r5, [r4, #12]
 8007520:	6833      	ldreq	r3, [r6, #0]
 8007522:	1aed      	subeq	r5, r5, r3
 8007524:	68a3      	ldr	r3, [r4, #8]
 8007526:	bf0c      	ite	eq
 8007528:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800752c:	2500      	movne	r5, #0
 800752e:	4293      	cmp	r3, r2
 8007530:	bfc4      	itt	gt
 8007532:	1a9b      	subgt	r3, r3, r2
 8007534:	18ed      	addgt	r5, r5, r3
 8007536:	2600      	movs	r6, #0
 8007538:	341a      	adds	r4, #26
 800753a:	42b5      	cmp	r5, r6
 800753c:	d11a      	bne.n	8007574 <_printf_common+0xc8>
 800753e:	2000      	movs	r0, #0
 8007540:	e008      	b.n	8007554 <_printf_common+0xa8>
 8007542:	2301      	movs	r3, #1
 8007544:	4652      	mov	r2, sl
 8007546:	4649      	mov	r1, r9
 8007548:	4638      	mov	r0, r7
 800754a:	47c0      	blx	r8
 800754c:	3001      	adds	r0, #1
 800754e:	d103      	bne.n	8007558 <_printf_common+0xac>
 8007550:	f04f 30ff 	mov.w	r0, #4294967295
 8007554:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007558:	3501      	adds	r5, #1
 800755a:	e7c6      	b.n	80074ea <_printf_common+0x3e>
 800755c:	18e1      	adds	r1, r4, r3
 800755e:	1c5a      	adds	r2, r3, #1
 8007560:	2030      	movs	r0, #48	; 0x30
 8007562:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007566:	4422      	add	r2, r4
 8007568:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800756c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007570:	3302      	adds	r3, #2
 8007572:	e7c7      	b.n	8007504 <_printf_common+0x58>
 8007574:	2301      	movs	r3, #1
 8007576:	4622      	mov	r2, r4
 8007578:	4649      	mov	r1, r9
 800757a:	4638      	mov	r0, r7
 800757c:	47c0      	blx	r8
 800757e:	3001      	adds	r0, #1
 8007580:	d0e6      	beq.n	8007550 <_printf_common+0xa4>
 8007582:	3601      	adds	r6, #1
 8007584:	e7d9      	b.n	800753a <_printf_common+0x8e>
	...

08007588 <_printf_i>:
 8007588:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800758c:	7e0f      	ldrb	r7, [r1, #24]
 800758e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007590:	2f78      	cmp	r7, #120	; 0x78
 8007592:	4691      	mov	r9, r2
 8007594:	4680      	mov	r8, r0
 8007596:	460c      	mov	r4, r1
 8007598:	469a      	mov	sl, r3
 800759a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800759e:	d807      	bhi.n	80075b0 <_printf_i+0x28>
 80075a0:	2f62      	cmp	r7, #98	; 0x62
 80075a2:	d80a      	bhi.n	80075ba <_printf_i+0x32>
 80075a4:	2f00      	cmp	r7, #0
 80075a6:	f000 80d4 	beq.w	8007752 <_printf_i+0x1ca>
 80075aa:	2f58      	cmp	r7, #88	; 0x58
 80075ac:	f000 80c0 	beq.w	8007730 <_printf_i+0x1a8>
 80075b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80075b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80075b8:	e03a      	b.n	8007630 <_printf_i+0xa8>
 80075ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80075be:	2b15      	cmp	r3, #21
 80075c0:	d8f6      	bhi.n	80075b0 <_printf_i+0x28>
 80075c2:	a101      	add	r1, pc, #4	; (adr r1, 80075c8 <_printf_i+0x40>)
 80075c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80075c8:	08007621 	.word	0x08007621
 80075cc:	08007635 	.word	0x08007635
 80075d0:	080075b1 	.word	0x080075b1
 80075d4:	080075b1 	.word	0x080075b1
 80075d8:	080075b1 	.word	0x080075b1
 80075dc:	080075b1 	.word	0x080075b1
 80075e0:	08007635 	.word	0x08007635
 80075e4:	080075b1 	.word	0x080075b1
 80075e8:	080075b1 	.word	0x080075b1
 80075ec:	080075b1 	.word	0x080075b1
 80075f0:	080075b1 	.word	0x080075b1
 80075f4:	08007739 	.word	0x08007739
 80075f8:	08007661 	.word	0x08007661
 80075fc:	080076f3 	.word	0x080076f3
 8007600:	080075b1 	.word	0x080075b1
 8007604:	080075b1 	.word	0x080075b1
 8007608:	0800775b 	.word	0x0800775b
 800760c:	080075b1 	.word	0x080075b1
 8007610:	08007661 	.word	0x08007661
 8007614:	080075b1 	.word	0x080075b1
 8007618:	080075b1 	.word	0x080075b1
 800761c:	080076fb 	.word	0x080076fb
 8007620:	682b      	ldr	r3, [r5, #0]
 8007622:	1d1a      	adds	r2, r3, #4
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	602a      	str	r2, [r5, #0]
 8007628:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800762c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007630:	2301      	movs	r3, #1
 8007632:	e09f      	b.n	8007774 <_printf_i+0x1ec>
 8007634:	6820      	ldr	r0, [r4, #0]
 8007636:	682b      	ldr	r3, [r5, #0]
 8007638:	0607      	lsls	r7, r0, #24
 800763a:	f103 0104 	add.w	r1, r3, #4
 800763e:	6029      	str	r1, [r5, #0]
 8007640:	d501      	bpl.n	8007646 <_printf_i+0xbe>
 8007642:	681e      	ldr	r6, [r3, #0]
 8007644:	e003      	b.n	800764e <_printf_i+0xc6>
 8007646:	0646      	lsls	r6, r0, #25
 8007648:	d5fb      	bpl.n	8007642 <_printf_i+0xba>
 800764a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800764e:	2e00      	cmp	r6, #0
 8007650:	da03      	bge.n	800765a <_printf_i+0xd2>
 8007652:	232d      	movs	r3, #45	; 0x2d
 8007654:	4276      	negs	r6, r6
 8007656:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800765a:	485a      	ldr	r0, [pc, #360]	; (80077c4 <_printf_i+0x23c>)
 800765c:	230a      	movs	r3, #10
 800765e:	e012      	b.n	8007686 <_printf_i+0xfe>
 8007660:	682b      	ldr	r3, [r5, #0]
 8007662:	6820      	ldr	r0, [r4, #0]
 8007664:	1d19      	adds	r1, r3, #4
 8007666:	6029      	str	r1, [r5, #0]
 8007668:	0605      	lsls	r5, r0, #24
 800766a:	d501      	bpl.n	8007670 <_printf_i+0xe8>
 800766c:	681e      	ldr	r6, [r3, #0]
 800766e:	e002      	b.n	8007676 <_printf_i+0xee>
 8007670:	0641      	lsls	r1, r0, #25
 8007672:	d5fb      	bpl.n	800766c <_printf_i+0xe4>
 8007674:	881e      	ldrh	r6, [r3, #0]
 8007676:	4853      	ldr	r0, [pc, #332]	; (80077c4 <_printf_i+0x23c>)
 8007678:	2f6f      	cmp	r7, #111	; 0x6f
 800767a:	bf0c      	ite	eq
 800767c:	2308      	moveq	r3, #8
 800767e:	230a      	movne	r3, #10
 8007680:	2100      	movs	r1, #0
 8007682:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007686:	6865      	ldr	r5, [r4, #4]
 8007688:	60a5      	str	r5, [r4, #8]
 800768a:	2d00      	cmp	r5, #0
 800768c:	bfa2      	ittt	ge
 800768e:	6821      	ldrge	r1, [r4, #0]
 8007690:	f021 0104 	bicge.w	r1, r1, #4
 8007694:	6021      	strge	r1, [r4, #0]
 8007696:	b90e      	cbnz	r6, 800769c <_printf_i+0x114>
 8007698:	2d00      	cmp	r5, #0
 800769a:	d04b      	beq.n	8007734 <_printf_i+0x1ac>
 800769c:	4615      	mov	r5, r2
 800769e:	fbb6 f1f3 	udiv	r1, r6, r3
 80076a2:	fb03 6711 	mls	r7, r3, r1, r6
 80076a6:	5dc7      	ldrb	r7, [r0, r7]
 80076a8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80076ac:	4637      	mov	r7, r6
 80076ae:	42bb      	cmp	r3, r7
 80076b0:	460e      	mov	r6, r1
 80076b2:	d9f4      	bls.n	800769e <_printf_i+0x116>
 80076b4:	2b08      	cmp	r3, #8
 80076b6:	d10b      	bne.n	80076d0 <_printf_i+0x148>
 80076b8:	6823      	ldr	r3, [r4, #0]
 80076ba:	07de      	lsls	r6, r3, #31
 80076bc:	d508      	bpl.n	80076d0 <_printf_i+0x148>
 80076be:	6923      	ldr	r3, [r4, #16]
 80076c0:	6861      	ldr	r1, [r4, #4]
 80076c2:	4299      	cmp	r1, r3
 80076c4:	bfde      	ittt	le
 80076c6:	2330      	movle	r3, #48	; 0x30
 80076c8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80076cc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80076d0:	1b52      	subs	r2, r2, r5
 80076d2:	6122      	str	r2, [r4, #16]
 80076d4:	f8cd a000 	str.w	sl, [sp]
 80076d8:	464b      	mov	r3, r9
 80076da:	aa03      	add	r2, sp, #12
 80076dc:	4621      	mov	r1, r4
 80076de:	4640      	mov	r0, r8
 80076e0:	f7ff fee4 	bl	80074ac <_printf_common>
 80076e4:	3001      	adds	r0, #1
 80076e6:	d14a      	bne.n	800777e <_printf_i+0x1f6>
 80076e8:	f04f 30ff 	mov.w	r0, #4294967295
 80076ec:	b004      	add	sp, #16
 80076ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076f2:	6823      	ldr	r3, [r4, #0]
 80076f4:	f043 0320 	orr.w	r3, r3, #32
 80076f8:	6023      	str	r3, [r4, #0]
 80076fa:	4833      	ldr	r0, [pc, #204]	; (80077c8 <_printf_i+0x240>)
 80076fc:	2778      	movs	r7, #120	; 0x78
 80076fe:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007702:	6823      	ldr	r3, [r4, #0]
 8007704:	6829      	ldr	r1, [r5, #0]
 8007706:	061f      	lsls	r7, r3, #24
 8007708:	f851 6b04 	ldr.w	r6, [r1], #4
 800770c:	d402      	bmi.n	8007714 <_printf_i+0x18c>
 800770e:	065f      	lsls	r7, r3, #25
 8007710:	bf48      	it	mi
 8007712:	b2b6      	uxthmi	r6, r6
 8007714:	07df      	lsls	r7, r3, #31
 8007716:	bf48      	it	mi
 8007718:	f043 0320 	orrmi.w	r3, r3, #32
 800771c:	6029      	str	r1, [r5, #0]
 800771e:	bf48      	it	mi
 8007720:	6023      	strmi	r3, [r4, #0]
 8007722:	b91e      	cbnz	r6, 800772c <_printf_i+0x1a4>
 8007724:	6823      	ldr	r3, [r4, #0]
 8007726:	f023 0320 	bic.w	r3, r3, #32
 800772a:	6023      	str	r3, [r4, #0]
 800772c:	2310      	movs	r3, #16
 800772e:	e7a7      	b.n	8007680 <_printf_i+0xf8>
 8007730:	4824      	ldr	r0, [pc, #144]	; (80077c4 <_printf_i+0x23c>)
 8007732:	e7e4      	b.n	80076fe <_printf_i+0x176>
 8007734:	4615      	mov	r5, r2
 8007736:	e7bd      	b.n	80076b4 <_printf_i+0x12c>
 8007738:	682b      	ldr	r3, [r5, #0]
 800773a:	6826      	ldr	r6, [r4, #0]
 800773c:	6961      	ldr	r1, [r4, #20]
 800773e:	1d18      	adds	r0, r3, #4
 8007740:	6028      	str	r0, [r5, #0]
 8007742:	0635      	lsls	r5, r6, #24
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	d501      	bpl.n	800774c <_printf_i+0x1c4>
 8007748:	6019      	str	r1, [r3, #0]
 800774a:	e002      	b.n	8007752 <_printf_i+0x1ca>
 800774c:	0670      	lsls	r0, r6, #25
 800774e:	d5fb      	bpl.n	8007748 <_printf_i+0x1c0>
 8007750:	8019      	strh	r1, [r3, #0]
 8007752:	2300      	movs	r3, #0
 8007754:	6123      	str	r3, [r4, #16]
 8007756:	4615      	mov	r5, r2
 8007758:	e7bc      	b.n	80076d4 <_printf_i+0x14c>
 800775a:	682b      	ldr	r3, [r5, #0]
 800775c:	1d1a      	adds	r2, r3, #4
 800775e:	602a      	str	r2, [r5, #0]
 8007760:	681d      	ldr	r5, [r3, #0]
 8007762:	6862      	ldr	r2, [r4, #4]
 8007764:	2100      	movs	r1, #0
 8007766:	4628      	mov	r0, r5
 8007768:	f7f8 fd32 	bl	80001d0 <memchr>
 800776c:	b108      	cbz	r0, 8007772 <_printf_i+0x1ea>
 800776e:	1b40      	subs	r0, r0, r5
 8007770:	6060      	str	r0, [r4, #4]
 8007772:	6863      	ldr	r3, [r4, #4]
 8007774:	6123      	str	r3, [r4, #16]
 8007776:	2300      	movs	r3, #0
 8007778:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800777c:	e7aa      	b.n	80076d4 <_printf_i+0x14c>
 800777e:	6923      	ldr	r3, [r4, #16]
 8007780:	462a      	mov	r2, r5
 8007782:	4649      	mov	r1, r9
 8007784:	4640      	mov	r0, r8
 8007786:	47d0      	blx	sl
 8007788:	3001      	adds	r0, #1
 800778a:	d0ad      	beq.n	80076e8 <_printf_i+0x160>
 800778c:	6823      	ldr	r3, [r4, #0]
 800778e:	079b      	lsls	r3, r3, #30
 8007790:	d413      	bmi.n	80077ba <_printf_i+0x232>
 8007792:	68e0      	ldr	r0, [r4, #12]
 8007794:	9b03      	ldr	r3, [sp, #12]
 8007796:	4298      	cmp	r0, r3
 8007798:	bfb8      	it	lt
 800779a:	4618      	movlt	r0, r3
 800779c:	e7a6      	b.n	80076ec <_printf_i+0x164>
 800779e:	2301      	movs	r3, #1
 80077a0:	4632      	mov	r2, r6
 80077a2:	4649      	mov	r1, r9
 80077a4:	4640      	mov	r0, r8
 80077a6:	47d0      	blx	sl
 80077a8:	3001      	adds	r0, #1
 80077aa:	d09d      	beq.n	80076e8 <_printf_i+0x160>
 80077ac:	3501      	adds	r5, #1
 80077ae:	68e3      	ldr	r3, [r4, #12]
 80077b0:	9903      	ldr	r1, [sp, #12]
 80077b2:	1a5b      	subs	r3, r3, r1
 80077b4:	42ab      	cmp	r3, r5
 80077b6:	dcf2      	bgt.n	800779e <_printf_i+0x216>
 80077b8:	e7eb      	b.n	8007792 <_printf_i+0x20a>
 80077ba:	2500      	movs	r5, #0
 80077bc:	f104 0619 	add.w	r6, r4, #25
 80077c0:	e7f5      	b.n	80077ae <_printf_i+0x226>
 80077c2:	bf00      	nop
 80077c4:	0800b7ee 	.word	0x0800b7ee
 80077c8:	0800b7ff 	.word	0x0800b7ff

080077cc <_scanf_float>:
 80077cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077d0:	b087      	sub	sp, #28
 80077d2:	4617      	mov	r7, r2
 80077d4:	9303      	str	r3, [sp, #12]
 80077d6:	688b      	ldr	r3, [r1, #8]
 80077d8:	1e5a      	subs	r2, r3, #1
 80077da:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80077de:	bf83      	ittte	hi
 80077e0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80077e4:	195b      	addhi	r3, r3, r5
 80077e6:	9302      	strhi	r3, [sp, #8]
 80077e8:	2300      	movls	r3, #0
 80077ea:	bf86      	itte	hi
 80077ec:	f240 135d 	movwhi	r3, #349	; 0x15d
 80077f0:	608b      	strhi	r3, [r1, #8]
 80077f2:	9302      	strls	r3, [sp, #8]
 80077f4:	680b      	ldr	r3, [r1, #0]
 80077f6:	468b      	mov	fp, r1
 80077f8:	2500      	movs	r5, #0
 80077fa:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80077fe:	f84b 3b1c 	str.w	r3, [fp], #28
 8007802:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007806:	4680      	mov	r8, r0
 8007808:	460c      	mov	r4, r1
 800780a:	465e      	mov	r6, fp
 800780c:	46aa      	mov	sl, r5
 800780e:	46a9      	mov	r9, r5
 8007810:	9501      	str	r5, [sp, #4]
 8007812:	68a2      	ldr	r2, [r4, #8]
 8007814:	b152      	cbz	r2, 800782c <_scanf_float+0x60>
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	781b      	ldrb	r3, [r3, #0]
 800781a:	2b4e      	cmp	r3, #78	; 0x4e
 800781c:	d864      	bhi.n	80078e8 <_scanf_float+0x11c>
 800781e:	2b40      	cmp	r3, #64	; 0x40
 8007820:	d83c      	bhi.n	800789c <_scanf_float+0xd0>
 8007822:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8007826:	b2c8      	uxtb	r0, r1
 8007828:	280e      	cmp	r0, #14
 800782a:	d93a      	bls.n	80078a2 <_scanf_float+0xd6>
 800782c:	f1b9 0f00 	cmp.w	r9, #0
 8007830:	d003      	beq.n	800783a <_scanf_float+0x6e>
 8007832:	6823      	ldr	r3, [r4, #0]
 8007834:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007838:	6023      	str	r3, [r4, #0]
 800783a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800783e:	f1ba 0f01 	cmp.w	sl, #1
 8007842:	f200 8113 	bhi.w	8007a6c <_scanf_float+0x2a0>
 8007846:	455e      	cmp	r6, fp
 8007848:	f200 8105 	bhi.w	8007a56 <_scanf_float+0x28a>
 800784c:	2501      	movs	r5, #1
 800784e:	4628      	mov	r0, r5
 8007850:	b007      	add	sp, #28
 8007852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007856:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800785a:	2a0d      	cmp	r2, #13
 800785c:	d8e6      	bhi.n	800782c <_scanf_float+0x60>
 800785e:	a101      	add	r1, pc, #4	; (adr r1, 8007864 <_scanf_float+0x98>)
 8007860:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007864:	080079a3 	.word	0x080079a3
 8007868:	0800782d 	.word	0x0800782d
 800786c:	0800782d 	.word	0x0800782d
 8007870:	0800782d 	.word	0x0800782d
 8007874:	08007a03 	.word	0x08007a03
 8007878:	080079db 	.word	0x080079db
 800787c:	0800782d 	.word	0x0800782d
 8007880:	0800782d 	.word	0x0800782d
 8007884:	080079b1 	.word	0x080079b1
 8007888:	0800782d 	.word	0x0800782d
 800788c:	0800782d 	.word	0x0800782d
 8007890:	0800782d 	.word	0x0800782d
 8007894:	0800782d 	.word	0x0800782d
 8007898:	08007969 	.word	0x08007969
 800789c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80078a0:	e7db      	b.n	800785a <_scanf_float+0x8e>
 80078a2:	290e      	cmp	r1, #14
 80078a4:	d8c2      	bhi.n	800782c <_scanf_float+0x60>
 80078a6:	a001      	add	r0, pc, #4	; (adr r0, 80078ac <_scanf_float+0xe0>)
 80078a8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80078ac:	0800795b 	.word	0x0800795b
 80078b0:	0800782d 	.word	0x0800782d
 80078b4:	0800795b 	.word	0x0800795b
 80078b8:	080079ef 	.word	0x080079ef
 80078bc:	0800782d 	.word	0x0800782d
 80078c0:	08007909 	.word	0x08007909
 80078c4:	08007945 	.word	0x08007945
 80078c8:	08007945 	.word	0x08007945
 80078cc:	08007945 	.word	0x08007945
 80078d0:	08007945 	.word	0x08007945
 80078d4:	08007945 	.word	0x08007945
 80078d8:	08007945 	.word	0x08007945
 80078dc:	08007945 	.word	0x08007945
 80078e0:	08007945 	.word	0x08007945
 80078e4:	08007945 	.word	0x08007945
 80078e8:	2b6e      	cmp	r3, #110	; 0x6e
 80078ea:	d809      	bhi.n	8007900 <_scanf_float+0x134>
 80078ec:	2b60      	cmp	r3, #96	; 0x60
 80078ee:	d8b2      	bhi.n	8007856 <_scanf_float+0x8a>
 80078f0:	2b54      	cmp	r3, #84	; 0x54
 80078f2:	d077      	beq.n	80079e4 <_scanf_float+0x218>
 80078f4:	2b59      	cmp	r3, #89	; 0x59
 80078f6:	d199      	bne.n	800782c <_scanf_float+0x60>
 80078f8:	2d07      	cmp	r5, #7
 80078fa:	d197      	bne.n	800782c <_scanf_float+0x60>
 80078fc:	2508      	movs	r5, #8
 80078fe:	e029      	b.n	8007954 <_scanf_float+0x188>
 8007900:	2b74      	cmp	r3, #116	; 0x74
 8007902:	d06f      	beq.n	80079e4 <_scanf_float+0x218>
 8007904:	2b79      	cmp	r3, #121	; 0x79
 8007906:	e7f6      	b.n	80078f6 <_scanf_float+0x12a>
 8007908:	6821      	ldr	r1, [r4, #0]
 800790a:	05c8      	lsls	r0, r1, #23
 800790c:	d51a      	bpl.n	8007944 <_scanf_float+0x178>
 800790e:	9b02      	ldr	r3, [sp, #8]
 8007910:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007914:	6021      	str	r1, [r4, #0]
 8007916:	f109 0901 	add.w	r9, r9, #1
 800791a:	b11b      	cbz	r3, 8007924 <_scanf_float+0x158>
 800791c:	3b01      	subs	r3, #1
 800791e:	3201      	adds	r2, #1
 8007920:	9302      	str	r3, [sp, #8]
 8007922:	60a2      	str	r2, [r4, #8]
 8007924:	68a3      	ldr	r3, [r4, #8]
 8007926:	3b01      	subs	r3, #1
 8007928:	60a3      	str	r3, [r4, #8]
 800792a:	6923      	ldr	r3, [r4, #16]
 800792c:	3301      	adds	r3, #1
 800792e:	6123      	str	r3, [r4, #16]
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	3b01      	subs	r3, #1
 8007934:	2b00      	cmp	r3, #0
 8007936:	607b      	str	r3, [r7, #4]
 8007938:	f340 8084 	ble.w	8007a44 <_scanf_float+0x278>
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	3301      	adds	r3, #1
 8007940:	603b      	str	r3, [r7, #0]
 8007942:	e766      	b.n	8007812 <_scanf_float+0x46>
 8007944:	eb1a 0f05 	cmn.w	sl, r5
 8007948:	f47f af70 	bne.w	800782c <_scanf_float+0x60>
 800794c:	6822      	ldr	r2, [r4, #0]
 800794e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8007952:	6022      	str	r2, [r4, #0]
 8007954:	f806 3b01 	strb.w	r3, [r6], #1
 8007958:	e7e4      	b.n	8007924 <_scanf_float+0x158>
 800795a:	6822      	ldr	r2, [r4, #0]
 800795c:	0610      	lsls	r0, r2, #24
 800795e:	f57f af65 	bpl.w	800782c <_scanf_float+0x60>
 8007962:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007966:	e7f4      	b.n	8007952 <_scanf_float+0x186>
 8007968:	f1ba 0f00 	cmp.w	sl, #0
 800796c:	d10e      	bne.n	800798c <_scanf_float+0x1c0>
 800796e:	f1b9 0f00 	cmp.w	r9, #0
 8007972:	d10e      	bne.n	8007992 <_scanf_float+0x1c6>
 8007974:	6822      	ldr	r2, [r4, #0]
 8007976:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800797a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800797e:	d108      	bne.n	8007992 <_scanf_float+0x1c6>
 8007980:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007984:	6022      	str	r2, [r4, #0]
 8007986:	f04f 0a01 	mov.w	sl, #1
 800798a:	e7e3      	b.n	8007954 <_scanf_float+0x188>
 800798c:	f1ba 0f02 	cmp.w	sl, #2
 8007990:	d055      	beq.n	8007a3e <_scanf_float+0x272>
 8007992:	2d01      	cmp	r5, #1
 8007994:	d002      	beq.n	800799c <_scanf_float+0x1d0>
 8007996:	2d04      	cmp	r5, #4
 8007998:	f47f af48 	bne.w	800782c <_scanf_float+0x60>
 800799c:	3501      	adds	r5, #1
 800799e:	b2ed      	uxtb	r5, r5
 80079a0:	e7d8      	b.n	8007954 <_scanf_float+0x188>
 80079a2:	f1ba 0f01 	cmp.w	sl, #1
 80079a6:	f47f af41 	bne.w	800782c <_scanf_float+0x60>
 80079aa:	f04f 0a02 	mov.w	sl, #2
 80079ae:	e7d1      	b.n	8007954 <_scanf_float+0x188>
 80079b0:	b97d      	cbnz	r5, 80079d2 <_scanf_float+0x206>
 80079b2:	f1b9 0f00 	cmp.w	r9, #0
 80079b6:	f47f af3c 	bne.w	8007832 <_scanf_float+0x66>
 80079ba:	6822      	ldr	r2, [r4, #0]
 80079bc:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80079c0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80079c4:	f47f af39 	bne.w	800783a <_scanf_float+0x6e>
 80079c8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80079cc:	6022      	str	r2, [r4, #0]
 80079ce:	2501      	movs	r5, #1
 80079d0:	e7c0      	b.n	8007954 <_scanf_float+0x188>
 80079d2:	2d03      	cmp	r5, #3
 80079d4:	d0e2      	beq.n	800799c <_scanf_float+0x1d0>
 80079d6:	2d05      	cmp	r5, #5
 80079d8:	e7de      	b.n	8007998 <_scanf_float+0x1cc>
 80079da:	2d02      	cmp	r5, #2
 80079dc:	f47f af26 	bne.w	800782c <_scanf_float+0x60>
 80079e0:	2503      	movs	r5, #3
 80079e2:	e7b7      	b.n	8007954 <_scanf_float+0x188>
 80079e4:	2d06      	cmp	r5, #6
 80079e6:	f47f af21 	bne.w	800782c <_scanf_float+0x60>
 80079ea:	2507      	movs	r5, #7
 80079ec:	e7b2      	b.n	8007954 <_scanf_float+0x188>
 80079ee:	6822      	ldr	r2, [r4, #0]
 80079f0:	0591      	lsls	r1, r2, #22
 80079f2:	f57f af1b 	bpl.w	800782c <_scanf_float+0x60>
 80079f6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80079fa:	6022      	str	r2, [r4, #0]
 80079fc:	f8cd 9004 	str.w	r9, [sp, #4]
 8007a00:	e7a8      	b.n	8007954 <_scanf_float+0x188>
 8007a02:	6822      	ldr	r2, [r4, #0]
 8007a04:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8007a08:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007a0c:	d006      	beq.n	8007a1c <_scanf_float+0x250>
 8007a0e:	0550      	lsls	r0, r2, #21
 8007a10:	f57f af0c 	bpl.w	800782c <_scanf_float+0x60>
 8007a14:	f1b9 0f00 	cmp.w	r9, #0
 8007a18:	f43f af0f 	beq.w	800783a <_scanf_float+0x6e>
 8007a1c:	0591      	lsls	r1, r2, #22
 8007a1e:	bf58      	it	pl
 8007a20:	9901      	ldrpl	r1, [sp, #4]
 8007a22:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007a26:	bf58      	it	pl
 8007a28:	eba9 0101 	subpl.w	r1, r9, r1
 8007a2c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8007a30:	bf58      	it	pl
 8007a32:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007a36:	6022      	str	r2, [r4, #0]
 8007a38:	f04f 0900 	mov.w	r9, #0
 8007a3c:	e78a      	b.n	8007954 <_scanf_float+0x188>
 8007a3e:	f04f 0a03 	mov.w	sl, #3
 8007a42:	e787      	b.n	8007954 <_scanf_float+0x188>
 8007a44:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007a48:	4639      	mov	r1, r7
 8007a4a:	4640      	mov	r0, r8
 8007a4c:	4798      	blx	r3
 8007a4e:	2800      	cmp	r0, #0
 8007a50:	f43f aedf 	beq.w	8007812 <_scanf_float+0x46>
 8007a54:	e6ea      	b.n	800782c <_scanf_float+0x60>
 8007a56:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007a5a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007a5e:	463a      	mov	r2, r7
 8007a60:	4640      	mov	r0, r8
 8007a62:	4798      	blx	r3
 8007a64:	6923      	ldr	r3, [r4, #16]
 8007a66:	3b01      	subs	r3, #1
 8007a68:	6123      	str	r3, [r4, #16]
 8007a6a:	e6ec      	b.n	8007846 <_scanf_float+0x7a>
 8007a6c:	1e6b      	subs	r3, r5, #1
 8007a6e:	2b06      	cmp	r3, #6
 8007a70:	d825      	bhi.n	8007abe <_scanf_float+0x2f2>
 8007a72:	2d02      	cmp	r5, #2
 8007a74:	d836      	bhi.n	8007ae4 <_scanf_float+0x318>
 8007a76:	455e      	cmp	r6, fp
 8007a78:	f67f aee8 	bls.w	800784c <_scanf_float+0x80>
 8007a7c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007a80:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007a84:	463a      	mov	r2, r7
 8007a86:	4640      	mov	r0, r8
 8007a88:	4798      	blx	r3
 8007a8a:	6923      	ldr	r3, [r4, #16]
 8007a8c:	3b01      	subs	r3, #1
 8007a8e:	6123      	str	r3, [r4, #16]
 8007a90:	e7f1      	b.n	8007a76 <_scanf_float+0x2aa>
 8007a92:	9802      	ldr	r0, [sp, #8]
 8007a94:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007a98:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8007a9c:	9002      	str	r0, [sp, #8]
 8007a9e:	463a      	mov	r2, r7
 8007aa0:	4640      	mov	r0, r8
 8007aa2:	4798      	blx	r3
 8007aa4:	6923      	ldr	r3, [r4, #16]
 8007aa6:	3b01      	subs	r3, #1
 8007aa8:	6123      	str	r3, [r4, #16]
 8007aaa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007aae:	fa5f fa8a 	uxtb.w	sl, sl
 8007ab2:	f1ba 0f02 	cmp.w	sl, #2
 8007ab6:	d1ec      	bne.n	8007a92 <_scanf_float+0x2c6>
 8007ab8:	3d03      	subs	r5, #3
 8007aba:	b2ed      	uxtb	r5, r5
 8007abc:	1b76      	subs	r6, r6, r5
 8007abe:	6823      	ldr	r3, [r4, #0]
 8007ac0:	05da      	lsls	r2, r3, #23
 8007ac2:	d52f      	bpl.n	8007b24 <_scanf_float+0x358>
 8007ac4:	055b      	lsls	r3, r3, #21
 8007ac6:	d510      	bpl.n	8007aea <_scanf_float+0x31e>
 8007ac8:	455e      	cmp	r6, fp
 8007aca:	f67f aebf 	bls.w	800784c <_scanf_float+0x80>
 8007ace:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007ad2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007ad6:	463a      	mov	r2, r7
 8007ad8:	4640      	mov	r0, r8
 8007ada:	4798      	blx	r3
 8007adc:	6923      	ldr	r3, [r4, #16]
 8007ade:	3b01      	subs	r3, #1
 8007ae0:	6123      	str	r3, [r4, #16]
 8007ae2:	e7f1      	b.n	8007ac8 <_scanf_float+0x2fc>
 8007ae4:	46aa      	mov	sl, r5
 8007ae6:	9602      	str	r6, [sp, #8]
 8007ae8:	e7df      	b.n	8007aaa <_scanf_float+0x2de>
 8007aea:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007aee:	6923      	ldr	r3, [r4, #16]
 8007af0:	2965      	cmp	r1, #101	; 0x65
 8007af2:	f103 33ff 	add.w	r3, r3, #4294967295
 8007af6:	f106 35ff 	add.w	r5, r6, #4294967295
 8007afa:	6123      	str	r3, [r4, #16]
 8007afc:	d00c      	beq.n	8007b18 <_scanf_float+0x34c>
 8007afe:	2945      	cmp	r1, #69	; 0x45
 8007b00:	d00a      	beq.n	8007b18 <_scanf_float+0x34c>
 8007b02:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007b06:	463a      	mov	r2, r7
 8007b08:	4640      	mov	r0, r8
 8007b0a:	4798      	blx	r3
 8007b0c:	6923      	ldr	r3, [r4, #16]
 8007b0e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007b12:	3b01      	subs	r3, #1
 8007b14:	1eb5      	subs	r5, r6, #2
 8007b16:	6123      	str	r3, [r4, #16]
 8007b18:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007b1c:	463a      	mov	r2, r7
 8007b1e:	4640      	mov	r0, r8
 8007b20:	4798      	blx	r3
 8007b22:	462e      	mov	r6, r5
 8007b24:	6825      	ldr	r5, [r4, #0]
 8007b26:	f015 0510 	ands.w	r5, r5, #16
 8007b2a:	d158      	bne.n	8007bde <_scanf_float+0x412>
 8007b2c:	7035      	strb	r5, [r6, #0]
 8007b2e:	6823      	ldr	r3, [r4, #0]
 8007b30:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007b34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b38:	d11c      	bne.n	8007b74 <_scanf_float+0x3a8>
 8007b3a:	9b01      	ldr	r3, [sp, #4]
 8007b3c:	454b      	cmp	r3, r9
 8007b3e:	eba3 0209 	sub.w	r2, r3, r9
 8007b42:	d124      	bne.n	8007b8e <_scanf_float+0x3c2>
 8007b44:	2200      	movs	r2, #0
 8007b46:	4659      	mov	r1, fp
 8007b48:	4640      	mov	r0, r8
 8007b4a:	f002 fba9 	bl	800a2a0 <_strtod_r>
 8007b4e:	9b03      	ldr	r3, [sp, #12]
 8007b50:	6821      	ldr	r1, [r4, #0]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f011 0f02 	tst.w	r1, #2
 8007b58:	ec57 6b10 	vmov	r6, r7, d0
 8007b5c:	f103 0204 	add.w	r2, r3, #4
 8007b60:	d020      	beq.n	8007ba4 <_scanf_float+0x3d8>
 8007b62:	9903      	ldr	r1, [sp, #12]
 8007b64:	600a      	str	r2, [r1, #0]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	e9c3 6700 	strd	r6, r7, [r3]
 8007b6c:	68e3      	ldr	r3, [r4, #12]
 8007b6e:	3301      	adds	r3, #1
 8007b70:	60e3      	str	r3, [r4, #12]
 8007b72:	e66c      	b.n	800784e <_scanf_float+0x82>
 8007b74:	9b04      	ldr	r3, [sp, #16]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d0e4      	beq.n	8007b44 <_scanf_float+0x378>
 8007b7a:	9905      	ldr	r1, [sp, #20]
 8007b7c:	230a      	movs	r3, #10
 8007b7e:	462a      	mov	r2, r5
 8007b80:	3101      	adds	r1, #1
 8007b82:	4640      	mov	r0, r8
 8007b84:	f002 fc14 	bl	800a3b0 <_strtol_r>
 8007b88:	9b04      	ldr	r3, [sp, #16]
 8007b8a:	9e05      	ldr	r6, [sp, #20]
 8007b8c:	1ac2      	subs	r2, r0, r3
 8007b8e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007b92:	429e      	cmp	r6, r3
 8007b94:	bf28      	it	cs
 8007b96:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8007b9a:	4912      	ldr	r1, [pc, #72]	; (8007be4 <_scanf_float+0x418>)
 8007b9c:	4630      	mov	r0, r6
 8007b9e:	f000 f8e7 	bl	8007d70 <siprintf>
 8007ba2:	e7cf      	b.n	8007b44 <_scanf_float+0x378>
 8007ba4:	f011 0f04 	tst.w	r1, #4
 8007ba8:	9903      	ldr	r1, [sp, #12]
 8007baa:	600a      	str	r2, [r1, #0]
 8007bac:	d1db      	bne.n	8007b66 <_scanf_float+0x39a>
 8007bae:	f8d3 8000 	ldr.w	r8, [r3]
 8007bb2:	ee10 2a10 	vmov	r2, s0
 8007bb6:	ee10 0a10 	vmov	r0, s0
 8007bba:	463b      	mov	r3, r7
 8007bbc:	4639      	mov	r1, r7
 8007bbe:	f7f8 ffb5 	bl	8000b2c <__aeabi_dcmpun>
 8007bc2:	b128      	cbz	r0, 8007bd0 <_scanf_float+0x404>
 8007bc4:	4808      	ldr	r0, [pc, #32]	; (8007be8 <_scanf_float+0x41c>)
 8007bc6:	f000 f9e5 	bl	8007f94 <nanf>
 8007bca:	ed88 0a00 	vstr	s0, [r8]
 8007bce:	e7cd      	b.n	8007b6c <_scanf_float+0x3a0>
 8007bd0:	4630      	mov	r0, r6
 8007bd2:	4639      	mov	r1, r7
 8007bd4:	f7f9 f808 	bl	8000be8 <__aeabi_d2f>
 8007bd8:	f8c8 0000 	str.w	r0, [r8]
 8007bdc:	e7c6      	b.n	8007b6c <_scanf_float+0x3a0>
 8007bde:	2500      	movs	r5, #0
 8007be0:	e635      	b.n	800784e <_scanf_float+0x82>
 8007be2:	bf00      	nop
 8007be4:	0800b810 	.word	0x0800b810
 8007be8:	0800bba5 	.word	0x0800bba5

08007bec <std>:
 8007bec:	2300      	movs	r3, #0
 8007bee:	b510      	push	{r4, lr}
 8007bf0:	4604      	mov	r4, r0
 8007bf2:	e9c0 3300 	strd	r3, r3, [r0]
 8007bf6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007bfa:	6083      	str	r3, [r0, #8]
 8007bfc:	8181      	strh	r1, [r0, #12]
 8007bfe:	6643      	str	r3, [r0, #100]	; 0x64
 8007c00:	81c2      	strh	r2, [r0, #14]
 8007c02:	6183      	str	r3, [r0, #24]
 8007c04:	4619      	mov	r1, r3
 8007c06:	2208      	movs	r2, #8
 8007c08:	305c      	adds	r0, #92	; 0x5c
 8007c0a:	f000 f914 	bl	8007e36 <memset>
 8007c0e:	4b0d      	ldr	r3, [pc, #52]	; (8007c44 <std+0x58>)
 8007c10:	6263      	str	r3, [r4, #36]	; 0x24
 8007c12:	4b0d      	ldr	r3, [pc, #52]	; (8007c48 <std+0x5c>)
 8007c14:	62a3      	str	r3, [r4, #40]	; 0x28
 8007c16:	4b0d      	ldr	r3, [pc, #52]	; (8007c4c <std+0x60>)
 8007c18:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007c1a:	4b0d      	ldr	r3, [pc, #52]	; (8007c50 <std+0x64>)
 8007c1c:	6323      	str	r3, [r4, #48]	; 0x30
 8007c1e:	4b0d      	ldr	r3, [pc, #52]	; (8007c54 <std+0x68>)
 8007c20:	6224      	str	r4, [r4, #32]
 8007c22:	429c      	cmp	r4, r3
 8007c24:	d006      	beq.n	8007c34 <std+0x48>
 8007c26:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007c2a:	4294      	cmp	r4, r2
 8007c2c:	d002      	beq.n	8007c34 <std+0x48>
 8007c2e:	33d0      	adds	r3, #208	; 0xd0
 8007c30:	429c      	cmp	r4, r3
 8007c32:	d105      	bne.n	8007c40 <std+0x54>
 8007c34:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007c38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c3c:	f000 b99e 	b.w	8007f7c <__retarget_lock_init_recursive>
 8007c40:	bd10      	pop	{r4, pc}
 8007c42:	bf00      	nop
 8007c44:	08007db1 	.word	0x08007db1
 8007c48:	08007dd3 	.word	0x08007dd3
 8007c4c:	08007e0b 	.word	0x08007e0b
 8007c50:	08007e2f 	.word	0x08007e2f
 8007c54:	200005d4 	.word	0x200005d4

08007c58 <stdio_exit_handler>:
 8007c58:	4a02      	ldr	r2, [pc, #8]	; (8007c64 <stdio_exit_handler+0xc>)
 8007c5a:	4903      	ldr	r1, [pc, #12]	; (8007c68 <stdio_exit_handler+0x10>)
 8007c5c:	4803      	ldr	r0, [pc, #12]	; (8007c6c <stdio_exit_handler+0x14>)
 8007c5e:	f000 b869 	b.w	8007d34 <_fwalk_sglue>
 8007c62:	bf00      	nop
 8007c64:	20000038 	.word	0x20000038
 8007c68:	0800a771 	.word	0x0800a771
 8007c6c:	20000044 	.word	0x20000044

08007c70 <cleanup_stdio>:
 8007c70:	6841      	ldr	r1, [r0, #4]
 8007c72:	4b0c      	ldr	r3, [pc, #48]	; (8007ca4 <cleanup_stdio+0x34>)
 8007c74:	4299      	cmp	r1, r3
 8007c76:	b510      	push	{r4, lr}
 8007c78:	4604      	mov	r4, r0
 8007c7a:	d001      	beq.n	8007c80 <cleanup_stdio+0x10>
 8007c7c:	f002 fd78 	bl	800a770 <_fflush_r>
 8007c80:	68a1      	ldr	r1, [r4, #8]
 8007c82:	4b09      	ldr	r3, [pc, #36]	; (8007ca8 <cleanup_stdio+0x38>)
 8007c84:	4299      	cmp	r1, r3
 8007c86:	d002      	beq.n	8007c8e <cleanup_stdio+0x1e>
 8007c88:	4620      	mov	r0, r4
 8007c8a:	f002 fd71 	bl	800a770 <_fflush_r>
 8007c8e:	68e1      	ldr	r1, [r4, #12]
 8007c90:	4b06      	ldr	r3, [pc, #24]	; (8007cac <cleanup_stdio+0x3c>)
 8007c92:	4299      	cmp	r1, r3
 8007c94:	d004      	beq.n	8007ca0 <cleanup_stdio+0x30>
 8007c96:	4620      	mov	r0, r4
 8007c98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c9c:	f002 bd68 	b.w	800a770 <_fflush_r>
 8007ca0:	bd10      	pop	{r4, pc}
 8007ca2:	bf00      	nop
 8007ca4:	200005d4 	.word	0x200005d4
 8007ca8:	2000063c 	.word	0x2000063c
 8007cac:	200006a4 	.word	0x200006a4

08007cb0 <global_stdio_init.part.0>:
 8007cb0:	b510      	push	{r4, lr}
 8007cb2:	4b0b      	ldr	r3, [pc, #44]	; (8007ce0 <global_stdio_init.part.0+0x30>)
 8007cb4:	4c0b      	ldr	r4, [pc, #44]	; (8007ce4 <global_stdio_init.part.0+0x34>)
 8007cb6:	4a0c      	ldr	r2, [pc, #48]	; (8007ce8 <global_stdio_init.part.0+0x38>)
 8007cb8:	601a      	str	r2, [r3, #0]
 8007cba:	4620      	mov	r0, r4
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	2104      	movs	r1, #4
 8007cc0:	f7ff ff94 	bl	8007bec <std>
 8007cc4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007cc8:	2201      	movs	r2, #1
 8007cca:	2109      	movs	r1, #9
 8007ccc:	f7ff ff8e 	bl	8007bec <std>
 8007cd0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007cd4:	2202      	movs	r2, #2
 8007cd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007cda:	2112      	movs	r1, #18
 8007cdc:	f7ff bf86 	b.w	8007bec <std>
 8007ce0:	2000070c 	.word	0x2000070c
 8007ce4:	200005d4 	.word	0x200005d4
 8007ce8:	08007c59 	.word	0x08007c59

08007cec <__sfp_lock_acquire>:
 8007cec:	4801      	ldr	r0, [pc, #4]	; (8007cf4 <__sfp_lock_acquire+0x8>)
 8007cee:	f000 b946 	b.w	8007f7e <__retarget_lock_acquire_recursive>
 8007cf2:	bf00      	nop
 8007cf4:	20000715 	.word	0x20000715

08007cf8 <__sfp_lock_release>:
 8007cf8:	4801      	ldr	r0, [pc, #4]	; (8007d00 <__sfp_lock_release+0x8>)
 8007cfa:	f000 b941 	b.w	8007f80 <__retarget_lock_release_recursive>
 8007cfe:	bf00      	nop
 8007d00:	20000715 	.word	0x20000715

08007d04 <__sinit>:
 8007d04:	b510      	push	{r4, lr}
 8007d06:	4604      	mov	r4, r0
 8007d08:	f7ff fff0 	bl	8007cec <__sfp_lock_acquire>
 8007d0c:	6a23      	ldr	r3, [r4, #32]
 8007d0e:	b11b      	cbz	r3, 8007d18 <__sinit+0x14>
 8007d10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d14:	f7ff bff0 	b.w	8007cf8 <__sfp_lock_release>
 8007d18:	4b04      	ldr	r3, [pc, #16]	; (8007d2c <__sinit+0x28>)
 8007d1a:	6223      	str	r3, [r4, #32]
 8007d1c:	4b04      	ldr	r3, [pc, #16]	; (8007d30 <__sinit+0x2c>)
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d1f5      	bne.n	8007d10 <__sinit+0xc>
 8007d24:	f7ff ffc4 	bl	8007cb0 <global_stdio_init.part.0>
 8007d28:	e7f2      	b.n	8007d10 <__sinit+0xc>
 8007d2a:	bf00      	nop
 8007d2c:	08007c71 	.word	0x08007c71
 8007d30:	2000070c 	.word	0x2000070c

08007d34 <_fwalk_sglue>:
 8007d34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d38:	4607      	mov	r7, r0
 8007d3a:	4688      	mov	r8, r1
 8007d3c:	4614      	mov	r4, r2
 8007d3e:	2600      	movs	r6, #0
 8007d40:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007d44:	f1b9 0901 	subs.w	r9, r9, #1
 8007d48:	d505      	bpl.n	8007d56 <_fwalk_sglue+0x22>
 8007d4a:	6824      	ldr	r4, [r4, #0]
 8007d4c:	2c00      	cmp	r4, #0
 8007d4e:	d1f7      	bne.n	8007d40 <_fwalk_sglue+0xc>
 8007d50:	4630      	mov	r0, r6
 8007d52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d56:	89ab      	ldrh	r3, [r5, #12]
 8007d58:	2b01      	cmp	r3, #1
 8007d5a:	d907      	bls.n	8007d6c <_fwalk_sglue+0x38>
 8007d5c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007d60:	3301      	adds	r3, #1
 8007d62:	d003      	beq.n	8007d6c <_fwalk_sglue+0x38>
 8007d64:	4629      	mov	r1, r5
 8007d66:	4638      	mov	r0, r7
 8007d68:	47c0      	blx	r8
 8007d6a:	4306      	orrs	r6, r0
 8007d6c:	3568      	adds	r5, #104	; 0x68
 8007d6e:	e7e9      	b.n	8007d44 <_fwalk_sglue+0x10>

08007d70 <siprintf>:
 8007d70:	b40e      	push	{r1, r2, r3}
 8007d72:	b500      	push	{lr}
 8007d74:	b09c      	sub	sp, #112	; 0x70
 8007d76:	ab1d      	add	r3, sp, #116	; 0x74
 8007d78:	9002      	str	r0, [sp, #8]
 8007d7a:	9006      	str	r0, [sp, #24]
 8007d7c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007d80:	4809      	ldr	r0, [pc, #36]	; (8007da8 <siprintf+0x38>)
 8007d82:	9107      	str	r1, [sp, #28]
 8007d84:	9104      	str	r1, [sp, #16]
 8007d86:	4909      	ldr	r1, [pc, #36]	; (8007dac <siprintf+0x3c>)
 8007d88:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d8c:	9105      	str	r1, [sp, #20]
 8007d8e:	6800      	ldr	r0, [r0, #0]
 8007d90:	9301      	str	r3, [sp, #4]
 8007d92:	a902      	add	r1, sp, #8
 8007d94:	f002 fb68 	bl	800a468 <_svfiprintf_r>
 8007d98:	9b02      	ldr	r3, [sp, #8]
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	701a      	strb	r2, [r3, #0]
 8007d9e:	b01c      	add	sp, #112	; 0x70
 8007da0:	f85d eb04 	ldr.w	lr, [sp], #4
 8007da4:	b003      	add	sp, #12
 8007da6:	4770      	bx	lr
 8007da8:	20000090 	.word	0x20000090
 8007dac:	ffff0208 	.word	0xffff0208

08007db0 <__sread>:
 8007db0:	b510      	push	{r4, lr}
 8007db2:	460c      	mov	r4, r1
 8007db4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007db8:	f000 f882 	bl	8007ec0 <_read_r>
 8007dbc:	2800      	cmp	r0, #0
 8007dbe:	bfab      	itete	ge
 8007dc0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007dc2:	89a3      	ldrhlt	r3, [r4, #12]
 8007dc4:	181b      	addge	r3, r3, r0
 8007dc6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007dca:	bfac      	ite	ge
 8007dcc:	6563      	strge	r3, [r4, #84]	; 0x54
 8007dce:	81a3      	strhlt	r3, [r4, #12]
 8007dd0:	bd10      	pop	{r4, pc}

08007dd2 <__swrite>:
 8007dd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007dd6:	461f      	mov	r7, r3
 8007dd8:	898b      	ldrh	r3, [r1, #12]
 8007dda:	05db      	lsls	r3, r3, #23
 8007ddc:	4605      	mov	r5, r0
 8007dde:	460c      	mov	r4, r1
 8007de0:	4616      	mov	r6, r2
 8007de2:	d505      	bpl.n	8007df0 <__swrite+0x1e>
 8007de4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007de8:	2302      	movs	r3, #2
 8007dea:	2200      	movs	r2, #0
 8007dec:	f000 f856 	bl	8007e9c <_lseek_r>
 8007df0:	89a3      	ldrh	r3, [r4, #12]
 8007df2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007df6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007dfa:	81a3      	strh	r3, [r4, #12]
 8007dfc:	4632      	mov	r2, r6
 8007dfe:	463b      	mov	r3, r7
 8007e00:	4628      	mov	r0, r5
 8007e02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007e06:	f000 b87d 	b.w	8007f04 <_write_r>

08007e0a <__sseek>:
 8007e0a:	b510      	push	{r4, lr}
 8007e0c:	460c      	mov	r4, r1
 8007e0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e12:	f000 f843 	bl	8007e9c <_lseek_r>
 8007e16:	1c43      	adds	r3, r0, #1
 8007e18:	89a3      	ldrh	r3, [r4, #12]
 8007e1a:	bf15      	itete	ne
 8007e1c:	6560      	strne	r0, [r4, #84]	; 0x54
 8007e1e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007e22:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007e26:	81a3      	strheq	r3, [r4, #12]
 8007e28:	bf18      	it	ne
 8007e2a:	81a3      	strhne	r3, [r4, #12]
 8007e2c:	bd10      	pop	{r4, pc}

08007e2e <__sclose>:
 8007e2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e32:	f000 b823 	b.w	8007e7c <_close_r>

08007e36 <memset>:
 8007e36:	4402      	add	r2, r0
 8007e38:	4603      	mov	r3, r0
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	d100      	bne.n	8007e40 <memset+0xa>
 8007e3e:	4770      	bx	lr
 8007e40:	f803 1b01 	strb.w	r1, [r3], #1
 8007e44:	e7f9      	b.n	8007e3a <memset+0x4>

08007e46 <strstr>:
 8007e46:	780a      	ldrb	r2, [r1, #0]
 8007e48:	b570      	push	{r4, r5, r6, lr}
 8007e4a:	b96a      	cbnz	r2, 8007e68 <strstr+0x22>
 8007e4c:	bd70      	pop	{r4, r5, r6, pc}
 8007e4e:	429a      	cmp	r2, r3
 8007e50:	d109      	bne.n	8007e66 <strstr+0x20>
 8007e52:	460c      	mov	r4, r1
 8007e54:	4605      	mov	r5, r0
 8007e56:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d0f6      	beq.n	8007e4c <strstr+0x6>
 8007e5e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8007e62:	429e      	cmp	r6, r3
 8007e64:	d0f7      	beq.n	8007e56 <strstr+0x10>
 8007e66:	3001      	adds	r0, #1
 8007e68:	7803      	ldrb	r3, [r0, #0]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d1ef      	bne.n	8007e4e <strstr+0x8>
 8007e6e:	4618      	mov	r0, r3
 8007e70:	e7ec      	b.n	8007e4c <strstr+0x6>
	...

08007e74 <_localeconv_r>:
 8007e74:	4800      	ldr	r0, [pc, #0]	; (8007e78 <_localeconv_r+0x4>)
 8007e76:	4770      	bx	lr
 8007e78:	20000184 	.word	0x20000184

08007e7c <_close_r>:
 8007e7c:	b538      	push	{r3, r4, r5, lr}
 8007e7e:	4d06      	ldr	r5, [pc, #24]	; (8007e98 <_close_r+0x1c>)
 8007e80:	2300      	movs	r3, #0
 8007e82:	4604      	mov	r4, r0
 8007e84:	4608      	mov	r0, r1
 8007e86:	602b      	str	r3, [r5, #0]
 8007e88:	f7fa f977 	bl	800217a <_close>
 8007e8c:	1c43      	adds	r3, r0, #1
 8007e8e:	d102      	bne.n	8007e96 <_close_r+0x1a>
 8007e90:	682b      	ldr	r3, [r5, #0]
 8007e92:	b103      	cbz	r3, 8007e96 <_close_r+0x1a>
 8007e94:	6023      	str	r3, [r4, #0]
 8007e96:	bd38      	pop	{r3, r4, r5, pc}
 8007e98:	20000710 	.word	0x20000710

08007e9c <_lseek_r>:
 8007e9c:	b538      	push	{r3, r4, r5, lr}
 8007e9e:	4d07      	ldr	r5, [pc, #28]	; (8007ebc <_lseek_r+0x20>)
 8007ea0:	4604      	mov	r4, r0
 8007ea2:	4608      	mov	r0, r1
 8007ea4:	4611      	mov	r1, r2
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	602a      	str	r2, [r5, #0]
 8007eaa:	461a      	mov	r2, r3
 8007eac:	f7fa f98c 	bl	80021c8 <_lseek>
 8007eb0:	1c43      	adds	r3, r0, #1
 8007eb2:	d102      	bne.n	8007eba <_lseek_r+0x1e>
 8007eb4:	682b      	ldr	r3, [r5, #0]
 8007eb6:	b103      	cbz	r3, 8007eba <_lseek_r+0x1e>
 8007eb8:	6023      	str	r3, [r4, #0]
 8007eba:	bd38      	pop	{r3, r4, r5, pc}
 8007ebc:	20000710 	.word	0x20000710

08007ec0 <_read_r>:
 8007ec0:	b538      	push	{r3, r4, r5, lr}
 8007ec2:	4d07      	ldr	r5, [pc, #28]	; (8007ee0 <_read_r+0x20>)
 8007ec4:	4604      	mov	r4, r0
 8007ec6:	4608      	mov	r0, r1
 8007ec8:	4611      	mov	r1, r2
 8007eca:	2200      	movs	r2, #0
 8007ecc:	602a      	str	r2, [r5, #0]
 8007ece:	461a      	mov	r2, r3
 8007ed0:	f7fa f91a 	bl	8002108 <_read>
 8007ed4:	1c43      	adds	r3, r0, #1
 8007ed6:	d102      	bne.n	8007ede <_read_r+0x1e>
 8007ed8:	682b      	ldr	r3, [r5, #0]
 8007eda:	b103      	cbz	r3, 8007ede <_read_r+0x1e>
 8007edc:	6023      	str	r3, [r4, #0]
 8007ede:	bd38      	pop	{r3, r4, r5, pc}
 8007ee0:	20000710 	.word	0x20000710

08007ee4 <_sbrk_r>:
 8007ee4:	b538      	push	{r3, r4, r5, lr}
 8007ee6:	4d06      	ldr	r5, [pc, #24]	; (8007f00 <_sbrk_r+0x1c>)
 8007ee8:	2300      	movs	r3, #0
 8007eea:	4604      	mov	r4, r0
 8007eec:	4608      	mov	r0, r1
 8007eee:	602b      	str	r3, [r5, #0]
 8007ef0:	f7fa f978 	bl	80021e4 <_sbrk>
 8007ef4:	1c43      	adds	r3, r0, #1
 8007ef6:	d102      	bne.n	8007efe <_sbrk_r+0x1a>
 8007ef8:	682b      	ldr	r3, [r5, #0]
 8007efa:	b103      	cbz	r3, 8007efe <_sbrk_r+0x1a>
 8007efc:	6023      	str	r3, [r4, #0]
 8007efe:	bd38      	pop	{r3, r4, r5, pc}
 8007f00:	20000710 	.word	0x20000710

08007f04 <_write_r>:
 8007f04:	b538      	push	{r3, r4, r5, lr}
 8007f06:	4d07      	ldr	r5, [pc, #28]	; (8007f24 <_write_r+0x20>)
 8007f08:	4604      	mov	r4, r0
 8007f0a:	4608      	mov	r0, r1
 8007f0c:	4611      	mov	r1, r2
 8007f0e:	2200      	movs	r2, #0
 8007f10:	602a      	str	r2, [r5, #0]
 8007f12:	461a      	mov	r2, r3
 8007f14:	f7fa f915 	bl	8002142 <_write>
 8007f18:	1c43      	adds	r3, r0, #1
 8007f1a:	d102      	bne.n	8007f22 <_write_r+0x1e>
 8007f1c:	682b      	ldr	r3, [r5, #0]
 8007f1e:	b103      	cbz	r3, 8007f22 <_write_r+0x1e>
 8007f20:	6023      	str	r3, [r4, #0]
 8007f22:	bd38      	pop	{r3, r4, r5, pc}
 8007f24:	20000710 	.word	0x20000710

08007f28 <__errno>:
 8007f28:	4b01      	ldr	r3, [pc, #4]	; (8007f30 <__errno+0x8>)
 8007f2a:	6818      	ldr	r0, [r3, #0]
 8007f2c:	4770      	bx	lr
 8007f2e:	bf00      	nop
 8007f30:	20000090 	.word	0x20000090

08007f34 <__libc_init_array>:
 8007f34:	b570      	push	{r4, r5, r6, lr}
 8007f36:	4d0d      	ldr	r5, [pc, #52]	; (8007f6c <__libc_init_array+0x38>)
 8007f38:	4c0d      	ldr	r4, [pc, #52]	; (8007f70 <__libc_init_array+0x3c>)
 8007f3a:	1b64      	subs	r4, r4, r5
 8007f3c:	10a4      	asrs	r4, r4, #2
 8007f3e:	2600      	movs	r6, #0
 8007f40:	42a6      	cmp	r6, r4
 8007f42:	d109      	bne.n	8007f58 <__libc_init_array+0x24>
 8007f44:	4d0b      	ldr	r5, [pc, #44]	; (8007f74 <__libc_init_array+0x40>)
 8007f46:	4c0c      	ldr	r4, [pc, #48]	; (8007f78 <__libc_init_array+0x44>)
 8007f48:	f003 fb04 	bl	800b554 <_init>
 8007f4c:	1b64      	subs	r4, r4, r5
 8007f4e:	10a4      	asrs	r4, r4, #2
 8007f50:	2600      	movs	r6, #0
 8007f52:	42a6      	cmp	r6, r4
 8007f54:	d105      	bne.n	8007f62 <__libc_init_array+0x2e>
 8007f56:	bd70      	pop	{r4, r5, r6, pc}
 8007f58:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f5c:	4798      	blx	r3
 8007f5e:	3601      	adds	r6, #1
 8007f60:	e7ee      	b.n	8007f40 <__libc_init_array+0xc>
 8007f62:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f66:	4798      	blx	r3
 8007f68:	3601      	adds	r6, #1
 8007f6a:	e7f2      	b.n	8007f52 <__libc_init_array+0x1e>
 8007f6c:	0800bc08 	.word	0x0800bc08
 8007f70:	0800bc08 	.word	0x0800bc08
 8007f74:	0800bc08 	.word	0x0800bc08
 8007f78:	0800bc0c 	.word	0x0800bc0c

08007f7c <__retarget_lock_init_recursive>:
 8007f7c:	4770      	bx	lr

08007f7e <__retarget_lock_acquire_recursive>:
 8007f7e:	4770      	bx	lr

08007f80 <__retarget_lock_release_recursive>:
 8007f80:	4770      	bx	lr

08007f82 <strcpy>:
 8007f82:	4603      	mov	r3, r0
 8007f84:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007f88:	f803 2b01 	strb.w	r2, [r3], #1
 8007f8c:	2a00      	cmp	r2, #0
 8007f8e:	d1f9      	bne.n	8007f84 <strcpy+0x2>
 8007f90:	4770      	bx	lr
	...

08007f94 <nanf>:
 8007f94:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007f9c <nanf+0x8>
 8007f98:	4770      	bx	lr
 8007f9a:	bf00      	nop
 8007f9c:	7fc00000 	.word	0x7fc00000

08007fa0 <quorem>:
 8007fa0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fa4:	6903      	ldr	r3, [r0, #16]
 8007fa6:	690c      	ldr	r4, [r1, #16]
 8007fa8:	42a3      	cmp	r3, r4
 8007faa:	4607      	mov	r7, r0
 8007fac:	db7e      	blt.n	80080ac <quorem+0x10c>
 8007fae:	3c01      	subs	r4, #1
 8007fb0:	f101 0814 	add.w	r8, r1, #20
 8007fb4:	f100 0514 	add.w	r5, r0, #20
 8007fb8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007fbc:	9301      	str	r3, [sp, #4]
 8007fbe:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007fc2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007fc6:	3301      	adds	r3, #1
 8007fc8:	429a      	cmp	r2, r3
 8007fca:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007fce:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007fd2:	fbb2 f6f3 	udiv	r6, r2, r3
 8007fd6:	d331      	bcc.n	800803c <quorem+0x9c>
 8007fd8:	f04f 0e00 	mov.w	lr, #0
 8007fdc:	4640      	mov	r0, r8
 8007fde:	46ac      	mov	ip, r5
 8007fe0:	46f2      	mov	sl, lr
 8007fe2:	f850 2b04 	ldr.w	r2, [r0], #4
 8007fe6:	b293      	uxth	r3, r2
 8007fe8:	fb06 e303 	mla	r3, r6, r3, lr
 8007fec:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007ff0:	0c1a      	lsrs	r2, r3, #16
 8007ff2:	b29b      	uxth	r3, r3
 8007ff4:	ebaa 0303 	sub.w	r3, sl, r3
 8007ff8:	f8dc a000 	ldr.w	sl, [ip]
 8007ffc:	fa13 f38a 	uxtah	r3, r3, sl
 8008000:	fb06 220e 	mla	r2, r6, lr, r2
 8008004:	9300      	str	r3, [sp, #0]
 8008006:	9b00      	ldr	r3, [sp, #0]
 8008008:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800800c:	b292      	uxth	r2, r2
 800800e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008012:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008016:	f8bd 3000 	ldrh.w	r3, [sp]
 800801a:	4581      	cmp	r9, r0
 800801c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008020:	f84c 3b04 	str.w	r3, [ip], #4
 8008024:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008028:	d2db      	bcs.n	8007fe2 <quorem+0x42>
 800802a:	f855 300b 	ldr.w	r3, [r5, fp]
 800802e:	b92b      	cbnz	r3, 800803c <quorem+0x9c>
 8008030:	9b01      	ldr	r3, [sp, #4]
 8008032:	3b04      	subs	r3, #4
 8008034:	429d      	cmp	r5, r3
 8008036:	461a      	mov	r2, r3
 8008038:	d32c      	bcc.n	8008094 <quorem+0xf4>
 800803a:	613c      	str	r4, [r7, #16]
 800803c:	4638      	mov	r0, r7
 800803e:	f001 f93b 	bl	80092b8 <__mcmp>
 8008042:	2800      	cmp	r0, #0
 8008044:	db22      	blt.n	800808c <quorem+0xec>
 8008046:	3601      	adds	r6, #1
 8008048:	4629      	mov	r1, r5
 800804a:	2000      	movs	r0, #0
 800804c:	f858 2b04 	ldr.w	r2, [r8], #4
 8008050:	f8d1 c000 	ldr.w	ip, [r1]
 8008054:	b293      	uxth	r3, r2
 8008056:	1ac3      	subs	r3, r0, r3
 8008058:	0c12      	lsrs	r2, r2, #16
 800805a:	fa13 f38c 	uxtah	r3, r3, ip
 800805e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8008062:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008066:	b29b      	uxth	r3, r3
 8008068:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800806c:	45c1      	cmp	r9, r8
 800806e:	f841 3b04 	str.w	r3, [r1], #4
 8008072:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008076:	d2e9      	bcs.n	800804c <quorem+0xac>
 8008078:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800807c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008080:	b922      	cbnz	r2, 800808c <quorem+0xec>
 8008082:	3b04      	subs	r3, #4
 8008084:	429d      	cmp	r5, r3
 8008086:	461a      	mov	r2, r3
 8008088:	d30a      	bcc.n	80080a0 <quorem+0x100>
 800808a:	613c      	str	r4, [r7, #16]
 800808c:	4630      	mov	r0, r6
 800808e:	b003      	add	sp, #12
 8008090:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008094:	6812      	ldr	r2, [r2, #0]
 8008096:	3b04      	subs	r3, #4
 8008098:	2a00      	cmp	r2, #0
 800809a:	d1ce      	bne.n	800803a <quorem+0x9a>
 800809c:	3c01      	subs	r4, #1
 800809e:	e7c9      	b.n	8008034 <quorem+0x94>
 80080a0:	6812      	ldr	r2, [r2, #0]
 80080a2:	3b04      	subs	r3, #4
 80080a4:	2a00      	cmp	r2, #0
 80080a6:	d1f0      	bne.n	800808a <quorem+0xea>
 80080a8:	3c01      	subs	r4, #1
 80080aa:	e7eb      	b.n	8008084 <quorem+0xe4>
 80080ac:	2000      	movs	r0, #0
 80080ae:	e7ee      	b.n	800808e <quorem+0xee>

080080b0 <_dtoa_r>:
 80080b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080b4:	ed2d 8b04 	vpush	{d8-d9}
 80080b8:	69c5      	ldr	r5, [r0, #28]
 80080ba:	b093      	sub	sp, #76	; 0x4c
 80080bc:	ed8d 0b02 	vstr	d0, [sp, #8]
 80080c0:	ec57 6b10 	vmov	r6, r7, d0
 80080c4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80080c8:	9107      	str	r1, [sp, #28]
 80080ca:	4604      	mov	r4, r0
 80080cc:	920a      	str	r2, [sp, #40]	; 0x28
 80080ce:	930d      	str	r3, [sp, #52]	; 0x34
 80080d0:	b975      	cbnz	r5, 80080f0 <_dtoa_r+0x40>
 80080d2:	2010      	movs	r0, #16
 80080d4:	f7fe fe58 	bl	8006d88 <malloc>
 80080d8:	4602      	mov	r2, r0
 80080da:	61e0      	str	r0, [r4, #28]
 80080dc:	b920      	cbnz	r0, 80080e8 <_dtoa_r+0x38>
 80080de:	4bae      	ldr	r3, [pc, #696]	; (8008398 <_dtoa_r+0x2e8>)
 80080e0:	21ef      	movs	r1, #239	; 0xef
 80080e2:	48ae      	ldr	r0, [pc, #696]	; (800839c <_dtoa_r+0x2ec>)
 80080e4:	f002 fbb0 	bl	800a848 <__assert_func>
 80080e8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80080ec:	6005      	str	r5, [r0, #0]
 80080ee:	60c5      	str	r5, [r0, #12]
 80080f0:	69e3      	ldr	r3, [r4, #28]
 80080f2:	6819      	ldr	r1, [r3, #0]
 80080f4:	b151      	cbz	r1, 800810c <_dtoa_r+0x5c>
 80080f6:	685a      	ldr	r2, [r3, #4]
 80080f8:	604a      	str	r2, [r1, #4]
 80080fa:	2301      	movs	r3, #1
 80080fc:	4093      	lsls	r3, r2
 80080fe:	608b      	str	r3, [r1, #8]
 8008100:	4620      	mov	r0, r4
 8008102:	f000 fe53 	bl	8008dac <_Bfree>
 8008106:	69e3      	ldr	r3, [r4, #28]
 8008108:	2200      	movs	r2, #0
 800810a:	601a      	str	r2, [r3, #0]
 800810c:	1e3b      	subs	r3, r7, #0
 800810e:	bfbb      	ittet	lt
 8008110:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008114:	9303      	strlt	r3, [sp, #12]
 8008116:	2300      	movge	r3, #0
 8008118:	2201      	movlt	r2, #1
 800811a:	bfac      	ite	ge
 800811c:	f8c8 3000 	strge.w	r3, [r8]
 8008120:	f8c8 2000 	strlt.w	r2, [r8]
 8008124:	4b9e      	ldr	r3, [pc, #632]	; (80083a0 <_dtoa_r+0x2f0>)
 8008126:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800812a:	ea33 0308 	bics.w	r3, r3, r8
 800812e:	d11b      	bne.n	8008168 <_dtoa_r+0xb8>
 8008130:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008132:	f242 730f 	movw	r3, #9999	; 0x270f
 8008136:	6013      	str	r3, [r2, #0]
 8008138:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800813c:	4333      	orrs	r3, r6
 800813e:	f000 8593 	beq.w	8008c68 <_dtoa_r+0xbb8>
 8008142:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008144:	b963      	cbnz	r3, 8008160 <_dtoa_r+0xb0>
 8008146:	4b97      	ldr	r3, [pc, #604]	; (80083a4 <_dtoa_r+0x2f4>)
 8008148:	e027      	b.n	800819a <_dtoa_r+0xea>
 800814a:	4b97      	ldr	r3, [pc, #604]	; (80083a8 <_dtoa_r+0x2f8>)
 800814c:	9300      	str	r3, [sp, #0]
 800814e:	3308      	adds	r3, #8
 8008150:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008152:	6013      	str	r3, [r2, #0]
 8008154:	9800      	ldr	r0, [sp, #0]
 8008156:	b013      	add	sp, #76	; 0x4c
 8008158:	ecbd 8b04 	vpop	{d8-d9}
 800815c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008160:	4b90      	ldr	r3, [pc, #576]	; (80083a4 <_dtoa_r+0x2f4>)
 8008162:	9300      	str	r3, [sp, #0]
 8008164:	3303      	adds	r3, #3
 8008166:	e7f3      	b.n	8008150 <_dtoa_r+0xa0>
 8008168:	ed9d 7b02 	vldr	d7, [sp, #8]
 800816c:	2200      	movs	r2, #0
 800816e:	ec51 0b17 	vmov	r0, r1, d7
 8008172:	eeb0 8a47 	vmov.f32	s16, s14
 8008176:	eef0 8a67 	vmov.f32	s17, s15
 800817a:	2300      	movs	r3, #0
 800817c:	f7f8 fca4 	bl	8000ac8 <__aeabi_dcmpeq>
 8008180:	4681      	mov	r9, r0
 8008182:	b160      	cbz	r0, 800819e <_dtoa_r+0xee>
 8008184:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008186:	2301      	movs	r3, #1
 8008188:	6013      	str	r3, [r2, #0]
 800818a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800818c:	2b00      	cmp	r3, #0
 800818e:	f000 8568 	beq.w	8008c62 <_dtoa_r+0xbb2>
 8008192:	4b86      	ldr	r3, [pc, #536]	; (80083ac <_dtoa_r+0x2fc>)
 8008194:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008196:	6013      	str	r3, [r2, #0]
 8008198:	3b01      	subs	r3, #1
 800819a:	9300      	str	r3, [sp, #0]
 800819c:	e7da      	b.n	8008154 <_dtoa_r+0xa4>
 800819e:	aa10      	add	r2, sp, #64	; 0x40
 80081a0:	a911      	add	r1, sp, #68	; 0x44
 80081a2:	4620      	mov	r0, r4
 80081a4:	eeb0 0a48 	vmov.f32	s0, s16
 80081a8:	eef0 0a68 	vmov.f32	s1, s17
 80081ac:	f001 f99a 	bl	80094e4 <__d2b>
 80081b0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80081b4:	4682      	mov	sl, r0
 80081b6:	2d00      	cmp	r5, #0
 80081b8:	d07f      	beq.n	80082ba <_dtoa_r+0x20a>
 80081ba:	ee18 3a90 	vmov	r3, s17
 80081be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80081c2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80081c6:	ec51 0b18 	vmov	r0, r1, d8
 80081ca:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80081ce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80081d2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80081d6:	4619      	mov	r1, r3
 80081d8:	2200      	movs	r2, #0
 80081da:	4b75      	ldr	r3, [pc, #468]	; (80083b0 <_dtoa_r+0x300>)
 80081dc:	f7f8 f854 	bl	8000288 <__aeabi_dsub>
 80081e0:	a367      	add	r3, pc, #412	; (adr r3, 8008380 <_dtoa_r+0x2d0>)
 80081e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081e6:	f7f8 fa07 	bl	80005f8 <__aeabi_dmul>
 80081ea:	a367      	add	r3, pc, #412	; (adr r3, 8008388 <_dtoa_r+0x2d8>)
 80081ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081f0:	f7f8 f84c 	bl	800028c <__adddf3>
 80081f4:	4606      	mov	r6, r0
 80081f6:	4628      	mov	r0, r5
 80081f8:	460f      	mov	r7, r1
 80081fa:	f7f8 f993 	bl	8000524 <__aeabi_i2d>
 80081fe:	a364      	add	r3, pc, #400	; (adr r3, 8008390 <_dtoa_r+0x2e0>)
 8008200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008204:	f7f8 f9f8 	bl	80005f8 <__aeabi_dmul>
 8008208:	4602      	mov	r2, r0
 800820a:	460b      	mov	r3, r1
 800820c:	4630      	mov	r0, r6
 800820e:	4639      	mov	r1, r7
 8008210:	f7f8 f83c 	bl	800028c <__adddf3>
 8008214:	4606      	mov	r6, r0
 8008216:	460f      	mov	r7, r1
 8008218:	f7f8 fc9e 	bl	8000b58 <__aeabi_d2iz>
 800821c:	2200      	movs	r2, #0
 800821e:	4683      	mov	fp, r0
 8008220:	2300      	movs	r3, #0
 8008222:	4630      	mov	r0, r6
 8008224:	4639      	mov	r1, r7
 8008226:	f7f8 fc59 	bl	8000adc <__aeabi_dcmplt>
 800822a:	b148      	cbz	r0, 8008240 <_dtoa_r+0x190>
 800822c:	4658      	mov	r0, fp
 800822e:	f7f8 f979 	bl	8000524 <__aeabi_i2d>
 8008232:	4632      	mov	r2, r6
 8008234:	463b      	mov	r3, r7
 8008236:	f7f8 fc47 	bl	8000ac8 <__aeabi_dcmpeq>
 800823a:	b908      	cbnz	r0, 8008240 <_dtoa_r+0x190>
 800823c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008240:	f1bb 0f16 	cmp.w	fp, #22
 8008244:	d857      	bhi.n	80082f6 <_dtoa_r+0x246>
 8008246:	4b5b      	ldr	r3, [pc, #364]	; (80083b4 <_dtoa_r+0x304>)
 8008248:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800824c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008250:	ec51 0b18 	vmov	r0, r1, d8
 8008254:	f7f8 fc42 	bl	8000adc <__aeabi_dcmplt>
 8008258:	2800      	cmp	r0, #0
 800825a:	d04e      	beq.n	80082fa <_dtoa_r+0x24a>
 800825c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008260:	2300      	movs	r3, #0
 8008262:	930c      	str	r3, [sp, #48]	; 0x30
 8008264:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008266:	1b5b      	subs	r3, r3, r5
 8008268:	1e5a      	subs	r2, r3, #1
 800826a:	bf45      	ittet	mi
 800826c:	f1c3 0301 	rsbmi	r3, r3, #1
 8008270:	9305      	strmi	r3, [sp, #20]
 8008272:	2300      	movpl	r3, #0
 8008274:	2300      	movmi	r3, #0
 8008276:	9206      	str	r2, [sp, #24]
 8008278:	bf54      	ite	pl
 800827a:	9305      	strpl	r3, [sp, #20]
 800827c:	9306      	strmi	r3, [sp, #24]
 800827e:	f1bb 0f00 	cmp.w	fp, #0
 8008282:	db3c      	blt.n	80082fe <_dtoa_r+0x24e>
 8008284:	9b06      	ldr	r3, [sp, #24]
 8008286:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800828a:	445b      	add	r3, fp
 800828c:	9306      	str	r3, [sp, #24]
 800828e:	2300      	movs	r3, #0
 8008290:	9308      	str	r3, [sp, #32]
 8008292:	9b07      	ldr	r3, [sp, #28]
 8008294:	2b09      	cmp	r3, #9
 8008296:	d868      	bhi.n	800836a <_dtoa_r+0x2ba>
 8008298:	2b05      	cmp	r3, #5
 800829a:	bfc4      	itt	gt
 800829c:	3b04      	subgt	r3, #4
 800829e:	9307      	strgt	r3, [sp, #28]
 80082a0:	9b07      	ldr	r3, [sp, #28]
 80082a2:	f1a3 0302 	sub.w	r3, r3, #2
 80082a6:	bfcc      	ite	gt
 80082a8:	2500      	movgt	r5, #0
 80082aa:	2501      	movle	r5, #1
 80082ac:	2b03      	cmp	r3, #3
 80082ae:	f200 8085 	bhi.w	80083bc <_dtoa_r+0x30c>
 80082b2:	e8df f003 	tbb	[pc, r3]
 80082b6:	3b2e      	.short	0x3b2e
 80082b8:	5839      	.short	0x5839
 80082ba:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80082be:	441d      	add	r5, r3
 80082c0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80082c4:	2b20      	cmp	r3, #32
 80082c6:	bfc1      	itttt	gt
 80082c8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80082cc:	fa08 f803 	lslgt.w	r8, r8, r3
 80082d0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80082d4:	fa26 f303 	lsrgt.w	r3, r6, r3
 80082d8:	bfd6      	itet	le
 80082da:	f1c3 0320 	rsble	r3, r3, #32
 80082de:	ea48 0003 	orrgt.w	r0, r8, r3
 80082e2:	fa06 f003 	lslle.w	r0, r6, r3
 80082e6:	f7f8 f90d 	bl	8000504 <__aeabi_ui2d>
 80082ea:	2201      	movs	r2, #1
 80082ec:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80082f0:	3d01      	subs	r5, #1
 80082f2:	920e      	str	r2, [sp, #56]	; 0x38
 80082f4:	e76f      	b.n	80081d6 <_dtoa_r+0x126>
 80082f6:	2301      	movs	r3, #1
 80082f8:	e7b3      	b.n	8008262 <_dtoa_r+0x1b2>
 80082fa:	900c      	str	r0, [sp, #48]	; 0x30
 80082fc:	e7b2      	b.n	8008264 <_dtoa_r+0x1b4>
 80082fe:	9b05      	ldr	r3, [sp, #20]
 8008300:	eba3 030b 	sub.w	r3, r3, fp
 8008304:	9305      	str	r3, [sp, #20]
 8008306:	f1cb 0300 	rsb	r3, fp, #0
 800830a:	9308      	str	r3, [sp, #32]
 800830c:	2300      	movs	r3, #0
 800830e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008310:	e7bf      	b.n	8008292 <_dtoa_r+0x1e2>
 8008312:	2300      	movs	r3, #0
 8008314:	9309      	str	r3, [sp, #36]	; 0x24
 8008316:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008318:	2b00      	cmp	r3, #0
 800831a:	dc52      	bgt.n	80083c2 <_dtoa_r+0x312>
 800831c:	2301      	movs	r3, #1
 800831e:	9301      	str	r3, [sp, #4]
 8008320:	9304      	str	r3, [sp, #16]
 8008322:	461a      	mov	r2, r3
 8008324:	920a      	str	r2, [sp, #40]	; 0x28
 8008326:	e00b      	b.n	8008340 <_dtoa_r+0x290>
 8008328:	2301      	movs	r3, #1
 800832a:	e7f3      	b.n	8008314 <_dtoa_r+0x264>
 800832c:	2300      	movs	r3, #0
 800832e:	9309      	str	r3, [sp, #36]	; 0x24
 8008330:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008332:	445b      	add	r3, fp
 8008334:	9301      	str	r3, [sp, #4]
 8008336:	3301      	adds	r3, #1
 8008338:	2b01      	cmp	r3, #1
 800833a:	9304      	str	r3, [sp, #16]
 800833c:	bfb8      	it	lt
 800833e:	2301      	movlt	r3, #1
 8008340:	69e0      	ldr	r0, [r4, #28]
 8008342:	2100      	movs	r1, #0
 8008344:	2204      	movs	r2, #4
 8008346:	f102 0614 	add.w	r6, r2, #20
 800834a:	429e      	cmp	r6, r3
 800834c:	d93d      	bls.n	80083ca <_dtoa_r+0x31a>
 800834e:	6041      	str	r1, [r0, #4]
 8008350:	4620      	mov	r0, r4
 8008352:	f000 fceb 	bl	8008d2c <_Balloc>
 8008356:	9000      	str	r0, [sp, #0]
 8008358:	2800      	cmp	r0, #0
 800835a:	d139      	bne.n	80083d0 <_dtoa_r+0x320>
 800835c:	4b16      	ldr	r3, [pc, #88]	; (80083b8 <_dtoa_r+0x308>)
 800835e:	4602      	mov	r2, r0
 8008360:	f240 11af 	movw	r1, #431	; 0x1af
 8008364:	e6bd      	b.n	80080e2 <_dtoa_r+0x32>
 8008366:	2301      	movs	r3, #1
 8008368:	e7e1      	b.n	800832e <_dtoa_r+0x27e>
 800836a:	2501      	movs	r5, #1
 800836c:	2300      	movs	r3, #0
 800836e:	9307      	str	r3, [sp, #28]
 8008370:	9509      	str	r5, [sp, #36]	; 0x24
 8008372:	f04f 33ff 	mov.w	r3, #4294967295
 8008376:	9301      	str	r3, [sp, #4]
 8008378:	9304      	str	r3, [sp, #16]
 800837a:	2200      	movs	r2, #0
 800837c:	2312      	movs	r3, #18
 800837e:	e7d1      	b.n	8008324 <_dtoa_r+0x274>
 8008380:	636f4361 	.word	0x636f4361
 8008384:	3fd287a7 	.word	0x3fd287a7
 8008388:	8b60c8b3 	.word	0x8b60c8b3
 800838c:	3fc68a28 	.word	0x3fc68a28
 8008390:	509f79fb 	.word	0x509f79fb
 8008394:	3fd34413 	.word	0x3fd34413
 8008398:	0800b822 	.word	0x0800b822
 800839c:	0800b839 	.word	0x0800b839
 80083a0:	7ff00000 	.word	0x7ff00000
 80083a4:	0800b81e 	.word	0x0800b81e
 80083a8:	0800b815 	.word	0x0800b815
 80083ac:	0800b7ed 	.word	0x0800b7ed
 80083b0:	3ff80000 	.word	0x3ff80000
 80083b4:	0800b928 	.word	0x0800b928
 80083b8:	0800b891 	.word	0x0800b891
 80083bc:	2301      	movs	r3, #1
 80083be:	9309      	str	r3, [sp, #36]	; 0x24
 80083c0:	e7d7      	b.n	8008372 <_dtoa_r+0x2c2>
 80083c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083c4:	9301      	str	r3, [sp, #4]
 80083c6:	9304      	str	r3, [sp, #16]
 80083c8:	e7ba      	b.n	8008340 <_dtoa_r+0x290>
 80083ca:	3101      	adds	r1, #1
 80083cc:	0052      	lsls	r2, r2, #1
 80083ce:	e7ba      	b.n	8008346 <_dtoa_r+0x296>
 80083d0:	69e3      	ldr	r3, [r4, #28]
 80083d2:	9a00      	ldr	r2, [sp, #0]
 80083d4:	601a      	str	r2, [r3, #0]
 80083d6:	9b04      	ldr	r3, [sp, #16]
 80083d8:	2b0e      	cmp	r3, #14
 80083da:	f200 80a8 	bhi.w	800852e <_dtoa_r+0x47e>
 80083de:	2d00      	cmp	r5, #0
 80083e0:	f000 80a5 	beq.w	800852e <_dtoa_r+0x47e>
 80083e4:	f1bb 0f00 	cmp.w	fp, #0
 80083e8:	dd38      	ble.n	800845c <_dtoa_r+0x3ac>
 80083ea:	4bc0      	ldr	r3, [pc, #768]	; (80086ec <_dtoa_r+0x63c>)
 80083ec:	f00b 020f 	and.w	r2, fp, #15
 80083f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80083f4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80083f8:	e9d3 6700 	ldrd	r6, r7, [r3]
 80083fc:	ea4f 182b 	mov.w	r8, fp, asr #4
 8008400:	d019      	beq.n	8008436 <_dtoa_r+0x386>
 8008402:	4bbb      	ldr	r3, [pc, #748]	; (80086f0 <_dtoa_r+0x640>)
 8008404:	ec51 0b18 	vmov	r0, r1, d8
 8008408:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800840c:	f7f8 fa1e 	bl	800084c <__aeabi_ddiv>
 8008410:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008414:	f008 080f 	and.w	r8, r8, #15
 8008418:	2503      	movs	r5, #3
 800841a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80086f0 <_dtoa_r+0x640>
 800841e:	f1b8 0f00 	cmp.w	r8, #0
 8008422:	d10a      	bne.n	800843a <_dtoa_r+0x38a>
 8008424:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008428:	4632      	mov	r2, r6
 800842a:	463b      	mov	r3, r7
 800842c:	f7f8 fa0e 	bl	800084c <__aeabi_ddiv>
 8008430:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008434:	e02b      	b.n	800848e <_dtoa_r+0x3de>
 8008436:	2502      	movs	r5, #2
 8008438:	e7ef      	b.n	800841a <_dtoa_r+0x36a>
 800843a:	f018 0f01 	tst.w	r8, #1
 800843e:	d008      	beq.n	8008452 <_dtoa_r+0x3a2>
 8008440:	4630      	mov	r0, r6
 8008442:	4639      	mov	r1, r7
 8008444:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008448:	f7f8 f8d6 	bl	80005f8 <__aeabi_dmul>
 800844c:	3501      	adds	r5, #1
 800844e:	4606      	mov	r6, r0
 8008450:	460f      	mov	r7, r1
 8008452:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008456:	f109 0908 	add.w	r9, r9, #8
 800845a:	e7e0      	b.n	800841e <_dtoa_r+0x36e>
 800845c:	f000 809f 	beq.w	800859e <_dtoa_r+0x4ee>
 8008460:	f1cb 0600 	rsb	r6, fp, #0
 8008464:	4ba1      	ldr	r3, [pc, #644]	; (80086ec <_dtoa_r+0x63c>)
 8008466:	4fa2      	ldr	r7, [pc, #648]	; (80086f0 <_dtoa_r+0x640>)
 8008468:	f006 020f 	and.w	r2, r6, #15
 800846c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008474:	ec51 0b18 	vmov	r0, r1, d8
 8008478:	f7f8 f8be 	bl	80005f8 <__aeabi_dmul>
 800847c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008480:	1136      	asrs	r6, r6, #4
 8008482:	2300      	movs	r3, #0
 8008484:	2502      	movs	r5, #2
 8008486:	2e00      	cmp	r6, #0
 8008488:	d17e      	bne.n	8008588 <_dtoa_r+0x4d8>
 800848a:	2b00      	cmp	r3, #0
 800848c:	d1d0      	bne.n	8008430 <_dtoa_r+0x380>
 800848e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008490:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008494:	2b00      	cmp	r3, #0
 8008496:	f000 8084 	beq.w	80085a2 <_dtoa_r+0x4f2>
 800849a:	4b96      	ldr	r3, [pc, #600]	; (80086f4 <_dtoa_r+0x644>)
 800849c:	2200      	movs	r2, #0
 800849e:	4640      	mov	r0, r8
 80084a0:	4649      	mov	r1, r9
 80084a2:	f7f8 fb1b 	bl	8000adc <__aeabi_dcmplt>
 80084a6:	2800      	cmp	r0, #0
 80084a8:	d07b      	beq.n	80085a2 <_dtoa_r+0x4f2>
 80084aa:	9b04      	ldr	r3, [sp, #16]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d078      	beq.n	80085a2 <_dtoa_r+0x4f2>
 80084b0:	9b01      	ldr	r3, [sp, #4]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	dd39      	ble.n	800852a <_dtoa_r+0x47a>
 80084b6:	4b90      	ldr	r3, [pc, #576]	; (80086f8 <_dtoa_r+0x648>)
 80084b8:	2200      	movs	r2, #0
 80084ba:	4640      	mov	r0, r8
 80084bc:	4649      	mov	r1, r9
 80084be:	f7f8 f89b 	bl	80005f8 <__aeabi_dmul>
 80084c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80084c6:	9e01      	ldr	r6, [sp, #4]
 80084c8:	f10b 37ff 	add.w	r7, fp, #4294967295
 80084cc:	3501      	adds	r5, #1
 80084ce:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80084d2:	4628      	mov	r0, r5
 80084d4:	f7f8 f826 	bl	8000524 <__aeabi_i2d>
 80084d8:	4642      	mov	r2, r8
 80084da:	464b      	mov	r3, r9
 80084dc:	f7f8 f88c 	bl	80005f8 <__aeabi_dmul>
 80084e0:	4b86      	ldr	r3, [pc, #536]	; (80086fc <_dtoa_r+0x64c>)
 80084e2:	2200      	movs	r2, #0
 80084e4:	f7f7 fed2 	bl	800028c <__adddf3>
 80084e8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80084ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80084f0:	9303      	str	r3, [sp, #12]
 80084f2:	2e00      	cmp	r6, #0
 80084f4:	d158      	bne.n	80085a8 <_dtoa_r+0x4f8>
 80084f6:	4b82      	ldr	r3, [pc, #520]	; (8008700 <_dtoa_r+0x650>)
 80084f8:	2200      	movs	r2, #0
 80084fa:	4640      	mov	r0, r8
 80084fc:	4649      	mov	r1, r9
 80084fe:	f7f7 fec3 	bl	8000288 <__aeabi_dsub>
 8008502:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008506:	4680      	mov	r8, r0
 8008508:	4689      	mov	r9, r1
 800850a:	f7f8 fb05 	bl	8000b18 <__aeabi_dcmpgt>
 800850e:	2800      	cmp	r0, #0
 8008510:	f040 8296 	bne.w	8008a40 <_dtoa_r+0x990>
 8008514:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008518:	4640      	mov	r0, r8
 800851a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800851e:	4649      	mov	r1, r9
 8008520:	f7f8 fadc 	bl	8000adc <__aeabi_dcmplt>
 8008524:	2800      	cmp	r0, #0
 8008526:	f040 8289 	bne.w	8008a3c <_dtoa_r+0x98c>
 800852a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800852e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008530:	2b00      	cmp	r3, #0
 8008532:	f2c0 814e 	blt.w	80087d2 <_dtoa_r+0x722>
 8008536:	f1bb 0f0e 	cmp.w	fp, #14
 800853a:	f300 814a 	bgt.w	80087d2 <_dtoa_r+0x722>
 800853e:	4b6b      	ldr	r3, [pc, #428]	; (80086ec <_dtoa_r+0x63c>)
 8008540:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008544:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008548:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800854a:	2b00      	cmp	r3, #0
 800854c:	f280 80dc 	bge.w	8008708 <_dtoa_r+0x658>
 8008550:	9b04      	ldr	r3, [sp, #16]
 8008552:	2b00      	cmp	r3, #0
 8008554:	f300 80d8 	bgt.w	8008708 <_dtoa_r+0x658>
 8008558:	f040 826f 	bne.w	8008a3a <_dtoa_r+0x98a>
 800855c:	4b68      	ldr	r3, [pc, #416]	; (8008700 <_dtoa_r+0x650>)
 800855e:	2200      	movs	r2, #0
 8008560:	4640      	mov	r0, r8
 8008562:	4649      	mov	r1, r9
 8008564:	f7f8 f848 	bl	80005f8 <__aeabi_dmul>
 8008568:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800856c:	f7f8 faca 	bl	8000b04 <__aeabi_dcmpge>
 8008570:	9e04      	ldr	r6, [sp, #16]
 8008572:	4637      	mov	r7, r6
 8008574:	2800      	cmp	r0, #0
 8008576:	f040 8245 	bne.w	8008a04 <_dtoa_r+0x954>
 800857a:	9d00      	ldr	r5, [sp, #0]
 800857c:	2331      	movs	r3, #49	; 0x31
 800857e:	f805 3b01 	strb.w	r3, [r5], #1
 8008582:	f10b 0b01 	add.w	fp, fp, #1
 8008586:	e241      	b.n	8008a0c <_dtoa_r+0x95c>
 8008588:	07f2      	lsls	r2, r6, #31
 800858a:	d505      	bpl.n	8008598 <_dtoa_r+0x4e8>
 800858c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008590:	f7f8 f832 	bl	80005f8 <__aeabi_dmul>
 8008594:	3501      	adds	r5, #1
 8008596:	2301      	movs	r3, #1
 8008598:	1076      	asrs	r6, r6, #1
 800859a:	3708      	adds	r7, #8
 800859c:	e773      	b.n	8008486 <_dtoa_r+0x3d6>
 800859e:	2502      	movs	r5, #2
 80085a0:	e775      	b.n	800848e <_dtoa_r+0x3de>
 80085a2:	9e04      	ldr	r6, [sp, #16]
 80085a4:	465f      	mov	r7, fp
 80085a6:	e792      	b.n	80084ce <_dtoa_r+0x41e>
 80085a8:	9900      	ldr	r1, [sp, #0]
 80085aa:	4b50      	ldr	r3, [pc, #320]	; (80086ec <_dtoa_r+0x63c>)
 80085ac:	ed9d 7b02 	vldr	d7, [sp, #8]
 80085b0:	4431      	add	r1, r6
 80085b2:	9102      	str	r1, [sp, #8]
 80085b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80085b6:	eeb0 9a47 	vmov.f32	s18, s14
 80085ba:	eef0 9a67 	vmov.f32	s19, s15
 80085be:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80085c2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80085c6:	2900      	cmp	r1, #0
 80085c8:	d044      	beq.n	8008654 <_dtoa_r+0x5a4>
 80085ca:	494e      	ldr	r1, [pc, #312]	; (8008704 <_dtoa_r+0x654>)
 80085cc:	2000      	movs	r0, #0
 80085ce:	f7f8 f93d 	bl	800084c <__aeabi_ddiv>
 80085d2:	ec53 2b19 	vmov	r2, r3, d9
 80085d6:	f7f7 fe57 	bl	8000288 <__aeabi_dsub>
 80085da:	9d00      	ldr	r5, [sp, #0]
 80085dc:	ec41 0b19 	vmov	d9, r0, r1
 80085e0:	4649      	mov	r1, r9
 80085e2:	4640      	mov	r0, r8
 80085e4:	f7f8 fab8 	bl	8000b58 <__aeabi_d2iz>
 80085e8:	4606      	mov	r6, r0
 80085ea:	f7f7 ff9b 	bl	8000524 <__aeabi_i2d>
 80085ee:	4602      	mov	r2, r0
 80085f0:	460b      	mov	r3, r1
 80085f2:	4640      	mov	r0, r8
 80085f4:	4649      	mov	r1, r9
 80085f6:	f7f7 fe47 	bl	8000288 <__aeabi_dsub>
 80085fa:	3630      	adds	r6, #48	; 0x30
 80085fc:	f805 6b01 	strb.w	r6, [r5], #1
 8008600:	ec53 2b19 	vmov	r2, r3, d9
 8008604:	4680      	mov	r8, r0
 8008606:	4689      	mov	r9, r1
 8008608:	f7f8 fa68 	bl	8000adc <__aeabi_dcmplt>
 800860c:	2800      	cmp	r0, #0
 800860e:	d164      	bne.n	80086da <_dtoa_r+0x62a>
 8008610:	4642      	mov	r2, r8
 8008612:	464b      	mov	r3, r9
 8008614:	4937      	ldr	r1, [pc, #220]	; (80086f4 <_dtoa_r+0x644>)
 8008616:	2000      	movs	r0, #0
 8008618:	f7f7 fe36 	bl	8000288 <__aeabi_dsub>
 800861c:	ec53 2b19 	vmov	r2, r3, d9
 8008620:	f7f8 fa5c 	bl	8000adc <__aeabi_dcmplt>
 8008624:	2800      	cmp	r0, #0
 8008626:	f040 80b6 	bne.w	8008796 <_dtoa_r+0x6e6>
 800862a:	9b02      	ldr	r3, [sp, #8]
 800862c:	429d      	cmp	r5, r3
 800862e:	f43f af7c 	beq.w	800852a <_dtoa_r+0x47a>
 8008632:	4b31      	ldr	r3, [pc, #196]	; (80086f8 <_dtoa_r+0x648>)
 8008634:	ec51 0b19 	vmov	r0, r1, d9
 8008638:	2200      	movs	r2, #0
 800863a:	f7f7 ffdd 	bl	80005f8 <__aeabi_dmul>
 800863e:	4b2e      	ldr	r3, [pc, #184]	; (80086f8 <_dtoa_r+0x648>)
 8008640:	ec41 0b19 	vmov	d9, r0, r1
 8008644:	2200      	movs	r2, #0
 8008646:	4640      	mov	r0, r8
 8008648:	4649      	mov	r1, r9
 800864a:	f7f7 ffd5 	bl	80005f8 <__aeabi_dmul>
 800864e:	4680      	mov	r8, r0
 8008650:	4689      	mov	r9, r1
 8008652:	e7c5      	b.n	80085e0 <_dtoa_r+0x530>
 8008654:	ec51 0b17 	vmov	r0, r1, d7
 8008658:	f7f7 ffce 	bl	80005f8 <__aeabi_dmul>
 800865c:	9b02      	ldr	r3, [sp, #8]
 800865e:	9d00      	ldr	r5, [sp, #0]
 8008660:	930f      	str	r3, [sp, #60]	; 0x3c
 8008662:	ec41 0b19 	vmov	d9, r0, r1
 8008666:	4649      	mov	r1, r9
 8008668:	4640      	mov	r0, r8
 800866a:	f7f8 fa75 	bl	8000b58 <__aeabi_d2iz>
 800866e:	4606      	mov	r6, r0
 8008670:	f7f7 ff58 	bl	8000524 <__aeabi_i2d>
 8008674:	3630      	adds	r6, #48	; 0x30
 8008676:	4602      	mov	r2, r0
 8008678:	460b      	mov	r3, r1
 800867a:	4640      	mov	r0, r8
 800867c:	4649      	mov	r1, r9
 800867e:	f7f7 fe03 	bl	8000288 <__aeabi_dsub>
 8008682:	f805 6b01 	strb.w	r6, [r5], #1
 8008686:	9b02      	ldr	r3, [sp, #8]
 8008688:	429d      	cmp	r5, r3
 800868a:	4680      	mov	r8, r0
 800868c:	4689      	mov	r9, r1
 800868e:	f04f 0200 	mov.w	r2, #0
 8008692:	d124      	bne.n	80086de <_dtoa_r+0x62e>
 8008694:	4b1b      	ldr	r3, [pc, #108]	; (8008704 <_dtoa_r+0x654>)
 8008696:	ec51 0b19 	vmov	r0, r1, d9
 800869a:	f7f7 fdf7 	bl	800028c <__adddf3>
 800869e:	4602      	mov	r2, r0
 80086a0:	460b      	mov	r3, r1
 80086a2:	4640      	mov	r0, r8
 80086a4:	4649      	mov	r1, r9
 80086a6:	f7f8 fa37 	bl	8000b18 <__aeabi_dcmpgt>
 80086aa:	2800      	cmp	r0, #0
 80086ac:	d173      	bne.n	8008796 <_dtoa_r+0x6e6>
 80086ae:	ec53 2b19 	vmov	r2, r3, d9
 80086b2:	4914      	ldr	r1, [pc, #80]	; (8008704 <_dtoa_r+0x654>)
 80086b4:	2000      	movs	r0, #0
 80086b6:	f7f7 fde7 	bl	8000288 <__aeabi_dsub>
 80086ba:	4602      	mov	r2, r0
 80086bc:	460b      	mov	r3, r1
 80086be:	4640      	mov	r0, r8
 80086c0:	4649      	mov	r1, r9
 80086c2:	f7f8 fa0b 	bl	8000adc <__aeabi_dcmplt>
 80086c6:	2800      	cmp	r0, #0
 80086c8:	f43f af2f 	beq.w	800852a <_dtoa_r+0x47a>
 80086cc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80086ce:	1e6b      	subs	r3, r5, #1
 80086d0:	930f      	str	r3, [sp, #60]	; 0x3c
 80086d2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80086d6:	2b30      	cmp	r3, #48	; 0x30
 80086d8:	d0f8      	beq.n	80086cc <_dtoa_r+0x61c>
 80086da:	46bb      	mov	fp, r7
 80086dc:	e04a      	b.n	8008774 <_dtoa_r+0x6c4>
 80086de:	4b06      	ldr	r3, [pc, #24]	; (80086f8 <_dtoa_r+0x648>)
 80086e0:	f7f7 ff8a 	bl	80005f8 <__aeabi_dmul>
 80086e4:	4680      	mov	r8, r0
 80086e6:	4689      	mov	r9, r1
 80086e8:	e7bd      	b.n	8008666 <_dtoa_r+0x5b6>
 80086ea:	bf00      	nop
 80086ec:	0800b928 	.word	0x0800b928
 80086f0:	0800b900 	.word	0x0800b900
 80086f4:	3ff00000 	.word	0x3ff00000
 80086f8:	40240000 	.word	0x40240000
 80086fc:	401c0000 	.word	0x401c0000
 8008700:	40140000 	.word	0x40140000
 8008704:	3fe00000 	.word	0x3fe00000
 8008708:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800870c:	9d00      	ldr	r5, [sp, #0]
 800870e:	4642      	mov	r2, r8
 8008710:	464b      	mov	r3, r9
 8008712:	4630      	mov	r0, r6
 8008714:	4639      	mov	r1, r7
 8008716:	f7f8 f899 	bl	800084c <__aeabi_ddiv>
 800871a:	f7f8 fa1d 	bl	8000b58 <__aeabi_d2iz>
 800871e:	9001      	str	r0, [sp, #4]
 8008720:	f7f7 ff00 	bl	8000524 <__aeabi_i2d>
 8008724:	4642      	mov	r2, r8
 8008726:	464b      	mov	r3, r9
 8008728:	f7f7 ff66 	bl	80005f8 <__aeabi_dmul>
 800872c:	4602      	mov	r2, r0
 800872e:	460b      	mov	r3, r1
 8008730:	4630      	mov	r0, r6
 8008732:	4639      	mov	r1, r7
 8008734:	f7f7 fda8 	bl	8000288 <__aeabi_dsub>
 8008738:	9e01      	ldr	r6, [sp, #4]
 800873a:	9f04      	ldr	r7, [sp, #16]
 800873c:	3630      	adds	r6, #48	; 0x30
 800873e:	f805 6b01 	strb.w	r6, [r5], #1
 8008742:	9e00      	ldr	r6, [sp, #0]
 8008744:	1bae      	subs	r6, r5, r6
 8008746:	42b7      	cmp	r7, r6
 8008748:	4602      	mov	r2, r0
 800874a:	460b      	mov	r3, r1
 800874c:	d134      	bne.n	80087b8 <_dtoa_r+0x708>
 800874e:	f7f7 fd9d 	bl	800028c <__adddf3>
 8008752:	4642      	mov	r2, r8
 8008754:	464b      	mov	r3, r9
 8008756:	4606      	mov	r6, r0
 8008758:	460f      	mov	r7, r1
 800875a:	f7f8 f9dd 	bl	8000b18 <__aeabi_dcmpgt>
 800875e:	b9c8      	cbnz	r0, 8008794 <_dtoa_r+0x6e4>
 8008760:	4642      	mov	r2, r8
 8008762:	464b      	mov	r3, r9
 8008764:	4630      	mov	r0, r6
 8008766:	4639      	mov	r1, r7
 8008768:	f7f8 f9ae 	bl	8000ac8 <__aeabi_dcmpeq>
 800876c:	b110      	cbz	r0, 8008774 <_dtoa_r+0x6c4>
 800876e:	9b01      	ldr	r3, [sp, #4]
 8008770:	07db      	lsls	r3, r3, #31
 8008772:	d40f      	bmi.n	8008794 <_dtoa_r+0x6e4>
 8008774:	4651      	mov	r1, sl
 8008776:	4620      	mov	r0, r4
 8008778:	f000 fb18 	bl	8008dac <_Bfree>
 800877c:	2300      	movs	r3, #0
 800877e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008780:	702b      	strb	r3, [r5, #0]
 8008782:	f10b 0301 	add.w	r3, fp, #1
 8008786:	6013      	str	r3, [r2, #0]
 8008788:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800878a:	2b00      	cmp	r3, #0
 800878c:	f43f ace2 	beq.w	8008154 <_dtoa_r+0xa4>
 8008790:	601d      	str	r5, [r3, #0]
 8008792:	e4df      	b.n	8008154 <_dtoa_r+0xa4>
 8008794:	465f      	mov	r7, fp
 8008796:	462b      	mov	r3, r5
 8008798:	461d      	mov	r5, r3
 800879a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800879e:	2a39      	cmp	r2, #57	; 0x39
 80087a0:	d106      	bne.n	80087b0 <_dtoa_r+0x700>
 80087a2:	9a00      	ldr	r2, [sp, #0]
 80087a4:	429a      	cmp	r2, r3
 80087a6:	d1f7      	bne.n	8008798 <_dtoa_r+0x6e8>
 80087a8:	9900      	ldr	r1, [sp, #0]
 80087aa:	2230      	movs	r2, #48	; 0x30
 80087ac:	3701      	adds	r7, #1
 80087ae:	700a      	strb	r2, [r1, #0]
 80087b0:	781a      	ldrb	r2, [r3, #0]
 80087b2:	3201      	adds	r2, #1
 80087b4:	701a      	strb	r2, [r3, #0]
 80087b6:	e790      	b.n	80086da <_dtoa_r+0x62a>
 80087b8:	4ba3      	ldr	r3, [pc, #652]	; (8008a48 <_dtoa_r+0x998>)
 80087ba:	2200      	movs	r2, #0
 80087bc:	f7f7 ff1c 	bl	80005f8 <__aeabi_dmul>
 80087c0:	2200      	movs	r2, #0
 80087c2:	2300      	movs	r3, #0
 80087c4:	4606      	mov	r6, r0
 80087c6:	460f      	mov	r7, r1
 80087c8:	f7f8 f97e 	bl	8000ac8 <__aeabi_dcmpeq>
 80087cc:	2800      	cmp	r0, #0
 80087ce:	d09e      	beq.n	800870e <_dtoa_r+0x65e>
 80087d0:	e7d0      	b.n	8008774 <_dtoa_r+0x6c4>
 80087d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80087d4:	2a00      	cmp	r2, #0
 80087d6:	f000 80ca 	beq.w	800896e <_dtoa_r+0x8be>
 80087da:	9a07      	ldr	r2, [sp, #28]
 80087dc:	2a01      	cmp	r2, #1
 80087de:	f300 80ad 	bgt.w	800893c <_dtoa_r+0x88c>
 80087e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80087e4:	2a00      	cmp	r2, #0
 80087e6:	f000 80a5 	beq.w	8008934 <_dtoa_r+0x884>
 80087ea:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80087ee:	9e08      	ldr	r6, [sp, #32]
 80087f0:	9d05      	ldr	r5, [sp, #20]
 80087f2:	9a05      	ldr	r2, [sp, #20]
 80087f4:	441a      	add	r2, r3
 80087f6:	9205      	str	r2, [sp, #20]
 80087f8:	9a06      	ldr	r2, [sp, #24]
 80087fa:	2101      	movs	r1, #1
 80087fc:	441a      	add	r2, r3
 80087fe:	4620      	mov	r0, r4
 8008800:	9206      	str	r2, [sp, #24]
 8008802:	f000 fbd3 	bl	8008fac <__i2b>
 8008806:	4607      	mov	r7, r0
 8008808:	b165      	cbz	r5, 8008824 <_dtoa_r+0x774>
 800880a:	9b06      	ldr	r3, [sp, #24]
 800880c:	2b00      	cmp	r3, #0
 800880e:	dd09      	ble.n	8008824 <_dtoa_r+0x774>
 8008810:	42ab      	cmp	r3, r5
 8008812:	9a05      	ldr	r2, [sp, #20]
 8008814:	bfa8      	it	ge
 8008816:	462b      	movge	r3, r5
 8008818:	1ad2      	subs	r2, r2, r3
 800881a:	9205      	str	r2, [sp, #20]
 800881c:	9a06      	ldr	r2, [sp, #24]
 800881e:	1aed      	subs	r5, r5, r3
 8008820:	1ad3      	subs	r3, r2, r3
 8008822:	9306      	str	r3, [sp, #24]
 8008824:	9b08      	ldr	r3, [sp, #32]
 8008826:	b1f3      	cbz	r3, 8008866 <_dtoa_r+0x7b6>
 8008828:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800882a:	2b00      	cmp	r3, #0
 800882c:	f000 80a3 	beq.w	8008976 <_dtoa_r+0x8c6>
 8008830:	2e00      	cmp	r6, #0
 8008832:	dd10      	ble.n	8008856 <_dtoa_r+0x7a6>
 8008834:	4639      	mov	r1, r7
 8008836:	4632      	mov	r2, r6
 8008838:	4620      	mov	r0, r4
 800883a:	f000 fc77 	bl	800912c <__pow5mult>
 800883e:	4652      	mov	r2, sl
 8008840:	4601      	mov	r1, r0
 8008842:	4607      	mov	r7, r0
 8008844:	4620      	mov	r0, r4
 8008846:	f000 fbc7 	bl	8008fd8 <__multiply>
 800884a:	4651      	mov	r1, sl
 800884c:	4680      	mov	r8, r0
 800884e:	4620      	mov	r0, r4
 8008850:	f000 faac 	bl	8008dac <_Bfree>
 8008854:	46c2      	mov	sl, r8
 8008856:	9b08      	ldr	r3, [sp, #32]
 8008858:	1b9a      	subs	r2, r3, r6
 800885a:	d004      	beq.n	8008866 <_dtoa_r+0x7b6>
 800885c:	4651      	mov	r1, sl
 800885e:	4620      	mov	r0, r4
 8008860:	f000 fc64 	bl	800912c <__pow5mult>
 8008864:	4682      	mov	sl, r0
 8008866:	2101      	movs	r1, #1
 8008868:	4620      	mov	r0, r4
 800886a:	f000 fb9f 	bl	8008fac <__i2b>
 800886e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008870:	2b00      	cmp	r3, #0
 8008872:	4606      	mov	r6, r0
 8008874:	f340 8081 	ble.w	800897a <_dtoa_r+0x8ca>
 8008878:	461a      	mov	r2, r3
 800887a:	4601      	mov	r1, r0
 800887c:	4620      	mov	r0, r4
 800887e:	f000 fc55 	bl	800912c <__pow5mult>
 8008882:	9b07      	ldr	r3, [sp, #28]
 8008884:	2b01      	cmp	r3, #1
 8008886:	4606      	mov	r6, r0
 8008888:	dd7a      	ble.n	8008980 <_dtoa_r+0x8d0>
 800888a:	f04f 0800 	mov.w	r8, #0
 800888e:	6933      	ldr	r3, [r6, #16]
 8008890:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008894:	6918      	ldr	r0, [r3, #16]
 8008896:	f000 fb3b 	bl	8008f10 <__hi0bits>
 800889a:	f1c0 0020 	rsb	r0, r0, #32
 800889e:	9b06      	ldr	r3, [sp, #24]
 80088a0:	4418      	add	r0, r3
 80088a2:	f010 001f 	ands.w	r0, r0, #31
 80088a6:	f000 8094 	beq.w	80089d2 <_dtoa_r+0x922>
 80088aa:	f1c0 0320 	rsb	r3, r0, #32
 80088ae:	2b04      	cmp	r3, #4
 80088b0:	f340 8085 	ble.w	80089be <_dtoa_r+0x90e>
 80088b4:	9b05      	ldr	r3, [sp, #20]
 80088b6:	f1c0 001c 	rsb	r0, r0, #28
 80088ba:	4403      	add	r3, r0
 80088bc:	9305      	str	r3, [sp, #20]
 80088be:	9b06      	ldr	r3, [sp, #24]
 80088c0:	4403      	add	r3, r0
 80088c2:	4405      	add	r5, r0
 80088c4:	9306      	str	r3, [sp, #24]
 80088c6:	9b05      	ldr	r3, [sp, #20]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	dd05      	ble.n	80088d8 <_dtoa_r+0x828>
 80088cc:	4651      	mov	r1, sl
 80088ce:	461a      	mov	r2, r3
 80088d0:	4620      	mov	r0, r4
 80088d2:	f000 fc85 	bl	80091e0 <__lshift>
 80088d6:	4682      	mov	sl, r0
 80088d8:	9b06      	ldr	r3, [sp, #24]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	dd05      	ble.n	80088ea <_dtoa_r+0x83a>
 80088de:	4631      	mov	r1, r6
 80088e0:	461a      	mov	r2, r3
 80088e2:	4620      	mov	r0, r4
 80088e4:	f000 fc7c 	bl	80091e0 <__lshift>
 80088e8:	4606      	mov	r6, r0
 80088ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d072      	beq.n	80089d6 <_dtoa_r+0x926>
 80088f0:	4631      	mov	r1, r6
 80088f2:	4650      	mov	r0, sl
 80088f4:	f000 fce0 	bl	80092b8 <__mcmp>
 80088f8:	2800      	cmp	r0, #0
 80088fa:	da6c      	bge.n	80089d6 <_dtoa_r+0x926>
 80088fc:	2300      	movs	r3, #0
 80088fe:	4651      	mov	r1, sl
 8008900:	220a      	movs	r2, #10
 8008902:	4620      	mov	r0, r4
 8008904:	f000 fa74 	bl	8008df0 <__multadd>
 8008908:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800890a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800890e:	4682      	mov	sl, r0
 8008910:	2b00      	cmp	r3, #0
 8008912:	f000 81b0 	beq.w	8008c76 <_dtoa_r+0xbc6>
 8008916:	2300      	movs	r3, #0
 8008918:	4639      	mov	r1, r7
 800891a:	220a      	movs	r2, #10
 800891c:	4620      	mov	r0, r4
 800891e:	f000 fa67 	bl	8008df0 <__multadd>
 8008922:	9b01      	ldr	r3, [sp, #4]
 8008924:	2b00      	cmp	r3, #0
 8008926:	4607      	mov	r7, r0
 8008928:	f300 8096 	bgt.w	8008a58 <_dtoa_r+0x9a8>
 800892c:	9b07      	ldr	r3, [sp, #28]
 800892e:	2b02      	cmp	r3, #2
 8008930:	dc59      	bgt.n	80089e6 <_dtoa_r+0x936>
 8008932:	e091      	b.n	8008a58 <_dtoa_r+0x9a8>
 8008934:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008936:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800893a:	e758      	b.n	80087ee <_dtoa_r+0x73e>
 800893c:	9b04      	ldr	r3, [sp, #16]
 800893e:	1e5e      	subs	r6, r3, #1
 8008940:	9b08      	ldr	r3, [sp, #32]
 8008942:	42b3      	cmp	r3, r6
 8008944:	bfbf      	itttt	lt
 8008946:	9b08      	ldrlt	r3, [sp, #32]
 8008948:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800894a:	9608      	strlt	r6, [sp, #32]
 800894c:	1af3      	sublt	r3, r6, r3
 800894e:	bfb4      	ite	lt
 8008950:	18d2      	addlt	r2, r2, r3
 8008952:	1b9e      	subge	r6, r3, r6
 8008954:	9b04      	ldr	r3, [sp, #16]
 8008956:	bfbc      	itt	lt
 8008958:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800895a:	2600      	movlt	r6, #0
 800895c:	2b00      	cmp	r3, #0
 800895e:	bfb7      	itett	lt
 8008960:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8008964:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8008968:	1a9d      	sublt	r5, r3, r2
 800896a:	2300      	movlt	r3, #0
 800896c:	e741      	b.n	80087f2 <_dtoa_r+0x742>
 800896e:	9e08      	ldr	r6, [sp, #32]
 8008970:	9d05      	ldr	r5, [sp, #20]
 8008972:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008974:	e748      	b.n	8008808 <_dtoa_r+0x758>
 8008976:	9a08      	ldr	r2, [sp, #32]
 8008978:	e770      	b.n	800885c <_dtoa_r+0x7ac>
 800897a:	9b07      	ldr	r3, [sp, #28]
 800897c:	2b01      	cmp	r3, #1
 800897e:	dc19      	bgt.n	80089b4 <_dtoa_r+0x904>
 8008980:	9b02      	ldr	r3, [sp, #8]
 8008982:	b9bb      	cbnz	r3, 80089b4 <_dtoa_r+0x904>
 8008984:	9b03      	ldr	r3, [sp, #12]
 8008986:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800898a:	b99b      	cbnz	r3, 80089b4 <_dtoa_r+0x904>
 800898c:	9b03      	ldr	r3, [sp, #12]
 800898e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008992:	0d1b      	lsrs	r3, r3, #20
 8008994:	051b      	lsls	r3, r3, #20
 8008996:	b183      	cbz	r3, 80089ba <_dtoa_r+0x90a>
 8008998:	9b05      	ldr	r3, [sp, #20]
 800899a:	3301      	adds	r3, #1
 800899c:	9305      	str	r3, [sp, #20]
 800899e:	9b06      	ldr	r3, [sp, #24]
 80089a0:	3301      	adds	r3, #1
 80089a2:	9306      	str	r3, [sp, #24]
 80089a4:	f04f 0801 	mov.w	r8, #1
 80089a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	f47f af6f 	bne.w	800888e <_dtoa_r+0x7de>
 80089b0:	2001      	movs	r0, #1
 80089b2:	e774      	b.n	800889e <_dtoa_r+0x7ee>
 80089b4:	f04f 0800 	mov.w	r8, #0
 80089b8:	e7f6      	b.n	80089a8 <_dtoa_r+0x8f8>
 80089ba:	4698      	mov	r8, r3
 80089bc:	e7f4      	b.n	80089a8 <_dtoa_r+0x8f8>
 80089be:	d082      	beq.n	80088c6 <_dtoa_r+0x816>
 80089c0:	9a05      	ldr	r2, [sp, #20]
 80089c2:	331c      	adds	r3, #28
 80089c4:	441a      	add	r2, r3
 80089c6:	9205      	str	r2, [sp, #20]
 80089c8:	9a06      	ldr	r2, [sp, #24]
 80089ca:	441a      	add	r2, r3
 80089cc:	441d      	add	r5, r3
 80089ce:	9206      	str	r2, [sp, #24]
 80089d0:	e779      	b.n	80088c6 <_dtoa_r+0x816>
 80089d2:	4603      	mov	r3, r0
 80089d4:	e7f4      	b.n	80089c0 <_dtoa_r+0x910>
 80089d6:	9b04      	ldr	r3, [sp, #16]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	dc37      	bgt.n	8008a4c <_dtoa_r+0x99c>
 80089dc:	9b07      	ldr	r3, [sp, #28]
 80089de:	2b02      	cmp	r3, #2
 80089e0:	dd34      	ble.n	8008a4c <_dtoa_r+0x99c>
 80089e2:	9b04      	ldr	r3, [sp, #16]
 80089e4:	9301      	str	r3, [sp, #4]
 80089e6:	9b01      	ldr	r3, [sp, #4]
 80089e8:	b963      	cbnz	r3, 8008a04 <_dtoa_r+0x954>
 80089ea:	4631      	mov	r1, r6
 80089ec:	2205      	movs	r2, #5
 80089ee:	4620      	mov	r0, r4
 80089f0:	f000 f9fe 	bl	8008df0 <__multadd>
 80089f4:	4601      	mov	r1, r0
 80089f6:	4606      	mov	r6, r0
 80089f8:	4650      	mov	r0, sl
 80089fa:	f000 fc5d 	bl	80092b8 <__mcmp>
 80089fe:	2800      	cmp	r0, #0
 8008a00:	f73f adbb 	bgt.w	800857a <_dtoa_r+0x4ca>
 8008a04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a06:	9d00      	ldr	r5, [sp, #0]
 8008a08:	ea6f 0b03 	mvn.w	fp, r3
 8008a0c:	f04f 0800 	mov.w	r8, #0
 8008a10:	4631      	mov	r1, r6
 8008a12:	4620      	mov	r0, r4
 8008a14:	f000 f9ca 	bl	8008dac <_Bfree>
 8008a18:	2f00      	cmp	r7, #0
 8008a1a:	f43f aeab 	beq.w	8008774 <_dtoa_r+0x6c4>
 8008a1e:	f1b8 0f00 	cmp.w	r8, #0
 8008a22:	d005      	beq.n	8008a30 <_dtoa_r+0x980>
 8008a24:	45b8      	cmp	r8, r7
 8008a26:	d003      	beq.n	8008a30 <_dtoa_r+0x980>
 8008a28:	4641      	mov	r1, r8
 8008a2a:	4620      	mov	r0, r4
 8008a2c:	f000 f9be 	bl	8008dac <_Bfree>
 8008a30:	4639      	mov	r1, r7
 8008a32:	4620      	mov	r0, r4
 8008a34:	f000 f9ba 	bl	8008dac <_Bfree>
 8008a38:	e69c      	b.n	8008774 <_dtoa_r+0x6c4>
 8008a3a:	2600      	movs	r6, #0
 8008a3c:	4637      	mov	r7, r6
 8008a3e:	e7e1      	b.n	8008a04 <_dtoa_r+0x954>
 8008a40:	46bb      	mov	fp, r7
 8008a42:	4637      	mov	r7, r6
 8008a44:	e599      	b.n	800857a <_dtoa_r+0x4ca>
 8008a46:	bf00      	nop
 8008a48:	40240000 	.word	0x40240000
 8008a4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	f000 80c8 	beq.w	8008be4 <_dtoa_r+0xb34>
 8008a54:	9b04      	ldr	r3, [sp, #16]
 8008a56:	9301      	str	r3, [sp, #4]
 8008a58:	2d00      	cmp	r5, #0
 8008a5a:	dd05      	ble.n	8008a68 <_dtoa_r+0x9b8>
 8008a5c:	4639      	mov	r1, r7
 8008a5e:	462a      	mov	r2, r5
 8008a60:	4620      	mov	r0, r4
 8008a62:	f000 fbbd 	bl	80091e0 <__lshift>
 8008a66:	4607      	mov	r7, r0
 8008a68:	f1b8 0f00 	cmp.w	r8, #0
 8008a6c:	d05b      	beq.n	8008b26 <_dtoa_r+0xa76>
 8008a6e:	6879      	ldr	r1, [r7, #4]
 8008a70:	4620      	mov	r0, r4
 8008a72:	f000 f95b 	bl	8008d2c <_Balloc>
 8008a76:	4605      	mov	r5, r0
 8008a78:	b928      	cbnz	r0, 8008a86 <_dtoa_r+0x9d6>
 8008a7a:	4b83      	ldr	r3, [pc, #524]	; (8008c88 <_dtoa_r+0xbd8>)
 8008a7c:	4602      	mov	r2, r0
 8008a7e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8008a82:	f7ff bb2e 	b.w	80080e2 <_dtoa_r+0x32>
 8008a86:	693a      	ldr	r2, [r7, #16]
 8008a88:	3202      	adds	r2, #2
 8008a8a:	0092      	lsls	r2, r2, #2
 8008a8c:	f107 010c 	add.w	r1, r7, #12
 8008a90:	300c      	adds	r0, #12
 8008a92:	f001 fec1 	bl	800a818 <memcpy>
 8008a96:	2201      	movs	r2, #1
 8008a98:	4629      	mov	r1, r5
 8008a9a:	4620      	mov	r0, r4
 8008a9c:	f000 fba0 	bl	80091e0 <__lshift>
 8008aa0:	9b00      	ldr	r3, [sp, #0]
 8008aa2:	3301      	adds	r3, #1
 8008aa4:	9304      	str	r3, [sp, #16]
 8008aa6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008aaa:	4413      	add	r3, r2
 8008aac:	9308      	str	r3, [sp, #32]
 8008aae:	9b02      	ldr	r3, [sp, #8]
 8008ab0:	f003 0301 	and.w	r3, r3, #1
 8008ab4:	46b8      	mov	r8, r7
 8008ab6:	9306      	str	r3, [sp, #24]
 8008ab8:	4607      	mov	r7, r0
 8008aba:	9b04      	ldr	r3, [sp, #16]
 8008abc:	4631      	mov	r1, r6
 8008abe:	3b01      	subs	r3, #1
 8008ac0:	4650      	mov	r0, sl
 8008ac2:	9301      	str	r3, [sp, #4]
 8008ac4:	f7ff fa6c 	bl	8007fa0 <quorem>
 8008ac8:	4641      	mov	r1, r8
 8008aca:	9002      	str	r0, [sp, #8]
 8008acc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008ad0:	4650      	mov	r0, sl
 8008ad2:	f000 fbf1 	bl	80092b8 <__mcmp>
 8008ad6:	463a      	mov	r2, r7
 8008ad8:	9005      	str	r0, [sp, #20]
 8008ada:	4631      	mov	r1, r6
 8008adc:	4620      	mov	r0, r4
 8008ade:	f000 fc07 	bl	80092f0 <__mdiff>
 8008ae2:	68c2      	ldr	r2, [r0, #12]
 8008ae4:	4605      	mov	r5, r0
 8008ae6:	bb02      	cbnz	r2, 8008b2a <_dtoa_r+0xa7a>
 8008ae8:	4601      	mov	r1, r0
 8008aea:	4650      	mov	r0, sl
 8008aec:	f000 fbe4 	bl	80092b8 <__mcmp>
 8008af0:	4602      	mov	r2, r0
 8008af2:	4629      	mov	r1, r5
 8008af4:	4620      	mov	r0, r4
 8008af6:	9209      	str	r2, [sp, #36]	; 0x24
 8008af8:	f000 f958 	bl	8008dac <_Bfree>
 8008afc:	9b07      	ldr	r3, [sp, #28]
 8008afe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b00:	9d04      	ldr	r5, [sp, #16]
 8008b02:	ea43 0102 	orr.w	r1, r3, r2
 8008b06:	9b06      	ldr	r3, [sp, #24]
 8008b08:	4319      	orrs	r1, r3
 8008b0a:	d110      	bne.n	8008b2e <_dtoa_r+0xa7e>
 8008b0c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008b10:	d029      	beq.n	8008b66 <_dtoa_r+0xab6>
 8008b12:	9b05      	ldr	r3, [sp, #20]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	dd02      	ble.n	8008b1e <_dtoa_r+0xa6e>
 8008b18:	9b02      	ldr	r3, [sp, #8]
 8008b1a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8008b1e:	9b01      	ldr	r3, [sp, #4]
 8008b20:	f883 9000 	strb.w	r9, [r3]
 8008b24:	e774      	b.n	8008a10 <_dtoa_r+0x960>
 8008b26:	4638      	mov	r0, r7
 8008b28:	e7ba      	b.n	8008aa0 <_dtoa_r+0x9f0>
 8008b2a:	2201      	movs	r2, #1
 8008b2c:	e7e1      	b.n	8008af2 <_dtoa_r+0xa42>
 8008b2e:	9b05      	ldr	r3, [sp, #20]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	db04      	blt.n	8008b3e <_dtoa_r+0xa8e>
 8008b34:	9907      	ldr	r1, [sp, #28]
 8008b36:	430b      	orrs	r3, r1
 8008b38:	9906      	ldr	r1, [sp, #24]
 8008b3a:	430b      	orrs	r3, r1
 8008b3c:	d120      	bne.n	8008b80 <_dtoa_r+0xad0>
 8008b3e:	2a00      	cmp	r2, #0
 8008b40:	dded      	ble.n	8008b1e <_dtoa_r+0xa6e>
 8008b42:	4651      	mov	r1, sl
 8008b44:	2201      	movs	r2, #1
 8008b46:	4620      	mov	r0, r4
 8008b48:	f000 fb4a 	bl	80091e0 <__lshift>
 8008b4c:	4631      	mov	r1, r6
 8008b4e:	4682      	mov	sl, r0
 8008b50:	f000 fbb2 	bl	80092b8 <__mcmp>
 8008b54:	2800      	cmp	r0, #0
 8008b56:	dc03      	bgt.n	8008b60 <_dtoa_r+0xab0>
 8008b58:	d1e1      	bne.n	8008b1e <_dtoa_r+0xa6e>
 8008b5a:	f019 0f01 	tst.w	r9, #1
 8008b5e:	d0de      	beq.n	8008b1e <_dtoa_r+0xa6e>
 8008b60:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008b64:	d1d8      	bne.n	8008b18 <_dtoa_r+0xa68>
 8008b66:	9a01      	ldr	r2, [sp, #4]
 8008b68:	2339      	movs	r3, #57	; 0x39
 8008b6a:	7013      	strb	r3, [r2, #0]
 8008b6c:	462b      	mov	r3, r5
 8008b6e:	461d      	mov	r5, r3
 8008b70:	3b01      	subs	r3, #1
 8008b72:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008b76:	2a39      	cmp	r2, #57	; 0x39
 8008b78:	d06c      	beq.n	8008c54 <_dtoa_r+0xba4>
 8008b7a:	3201      	adds	r2, #1
 8008b7c:	701a      	strb	r2, [r3, #0]
 8008b7e:	e747      	b.n	8008a10 <_dtoa_r+0x960>
 8008b80:	2a00      	cmp	r2, #0
 8008b82:	dd07      	ble.n	8008b94 <_dtoa_r+0xae4>
 8008b84:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008b88:	d0ed      	beq.n	8008b66 <_dtoa_r+0xab6>
 8008b8a:	9a01      	ldr	r2, [sp, #4]
 8008b8c:	f109 0301 	add.w	r3, r9, #1
 8008b90:	7013      	strb	r3, [r2, #0]
 8008b92:	e73d      	b.n	8008a10 <_dtoa_r+0x960>
 8008b94:	9b04      	ldr	r3, [sp, #16]
 8008b96:	9a08      	ldr	r2, [sp, #32]
 8008b98:	f803 9c01 	strb.w	r9, [r3, #-1]
 8008b9c:	4293      	cmp	r3, r2
 8008b9e:	d043      	beq.n	8008c28 <_dtoa_r+0xb78>
 8008ba0:	4651      	mov	r1, sl
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	220a      	movs	r2, #10
 8008ba6:	4620      	mov	r0, r4
 8008ba8:	f000 f922 	bl	8008df0 <__multadd>
 8008bac:	45b8      	cmp	r8, r7
 8008bae:	4682      	mov	sl, r0
 8008bb0:	f04f 0300 	mov.w	r3, #0
 8008bb4:	f04f 020a 	mov.w	r2, #10
 8008bb8:	4641      	mov	r1, r8
 8008bba:	4620      	mov	r0, r4
 8008bbc:	d107      	bne.n	8008bce <_dtoa_r+0xb1e>
 8008bbe:	f000 f917 	bl	8008df0 <__multadd>
 8008bc2:	4680      	mov	r8, r0
 8008bc4:	4607      	mov	r7, r0
 8008bc6:	9b04      	ldr	r3, [sp, #16]
 8008bc8:	3301      	adds	r3, #1
 8008bca:	9304      	str	r3, [sp, #16]
 8008bcc:	e775      	b.n	8008aba <_dtoa_r+0xa0a>
 8008bce:	f000 f90f 	bl	8008df0 <__multadd>
 8008bd2:	4639      	mov	r1, r7
 8008bd4:	4680      	mov	r8, r0
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	220a      	movs	r2, #10
 8008bda:	4620      	mov	r0, r4
 8008bdc:	f000 f908 	bl	8008df0 <__multadd>
 8008be0:	4607      	mov	r7, r0
 8008be2:	e7f0      	b.n	8008bc6 <_dtoa_r+0xb16>
 8008be4:	9b04      	ldr	r3, [sp, #16]
 8008be6:	9301      	str	r3, [sp, #4]
 8008be8:	9d00      	ldr	r5, [sp, #0]
 8008bea:	4631      	mov	r1, r6
 8008bec:	4650      	mov	r0, sl
 8008bee:	f7ff f9d7 	bl	8007fa0 <quorem>
 8008bf2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008bf6:	9b00      	ldr	r3, [sp, #0]
 8008bf8:	f805 9b01 	strb.w	r9, [r5], #1
 8008bfc:	1aea      	subs	r2, r5, r3
 8008bfe:	9b01      	ldr	r3, [sp, #4]
 8008c00:	4293      	cmp	r3, r2
 8008c02:	dd07      	ble.n	8008c14 <_dtoa_r+0xb64>
 8008c04:	4651      	mov	r1, sl
 8008c06:	2300      	movs	r3, #0
 8008c08:	220a      	movs	r2, #10
 8008c0a:	4620      	mov	r0, r4
 8008c0c:	f000 f8f0 	bl	8008df0 <__multadd>
 8008c10:	4682      	mov	sl, r0
 8008c12:	e7ea      	b.n	8008bea <_dtoa_r+0xb3a>
 8008c14:	9b01      	ldr	r3, [sp, #4]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	bfc8      	it	gt
 8008c1a:	461d      	movgt	r5, r3
 8008c1c:	9b00      	ldr	r3, [sp, #0]
 8008c1e:	bfd8      	it	le
 8008c20:	2501      	movle	r5, #1
 8008c22:	441d      	add	r5, r3
 8008c24:	f04f 0800 	mov.w	r8, #0
 8008c28:	4651      	mov	r1, sl
 8008c2a:	2201      	movs	r2, #1
 8008c2c:	4620      	mov	r0, r4
 8008c2e:	f000 fad7 	bl	80091e0 <__lshift>
 8008c32:	4631      	mov	r1, r6
 8008c34:	4682      	mov	sl, r0
 8008c36:	f000 fb3f 	bl	80092b8 <__mcmp>
 8008c3a:	2800      	cmp	r0, #0
 8008c3c:	dc96      	bgt.n	8008b6c <_dtoa_r+0xabc>
 8008c3e:	d102      	bne.n	8008c46 <_dtoa_r+0xb96>
 8008c40:	f019 0f01 	tst.w	r9, #1
 8008c44:	d192      	bne.n	8008b6c <_dtoa_r+0xabc>
 8008c46:	462b      	mov	r3, r5
 8008c48:	461d      	mov	r5, r3
 8008c4a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008c4e:	2a30      	cmp	r2, #48	; 0x30
 8008c50:	d0fa      	beq.n	8008c48 <_dtoa_r+0xb98>
 8008c52:	e6dd      	b.n	8008a10 <_dtoa_r+0x960>
 8008c54:	9a00      	ldr	r2, [sp, #0]
 8008c56:	429a      	cmp	r2, r3
 8008c58:	d189      	bne.n	8008b6e <_dtoa_r+0xabe>
 8008c5a:	f10b 0b01 	add.w	fp, fp, #1
 8008c5e:	2331      	movs	r3, #49	; 0x31
 8008c60:	e796      	b.n	8008b90 <_dtoa_r+0xae0>
 8008c62:	4b0a      	ldr	r3, [pc, #40]	; (8008c8c <_dtoa_r+0xbdc>)
 8008c64:	f7ff ba99 	b.w	800819a <_dtoa_r+0xea>
 8008c68:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	f47f aa6d 	bne.w	800814a <_dtoa_r+0x9a>
 8008c70:	4b07      	ldr	r3, [pc, #28]	; (8008c90 <_dtoa_r+0xbe0>)
 8008c72:	f7ff ba92 	b.w	800819a <_dtoa_r+0xea>
 8008c76:	9b01      	ldr	r3, [sp, #4]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	dcb5      	bgt.n	8008be8 <_dtoa_r+0xb38>
 8008c7c:	9b07      	ldr	r3, [sp, #28]
 8008c7e:	2b02      	cmp	r3, #2
 8008c80:	f73f aeb1 	bgt.w	80089e6 <_dtoa_r+0x936>
 8008c84:	e7b0      	b.n	8008be8 <_dtoa_r+0xb38>
 8008c86:	bf00      	nop
 8008c88:	0800b891 	.word	0x0800b891
 8008c8c:	0800b7ec 	.word	0x0800b7ec
 8008c90:	0800b815 	.word	0x0800b815

08008c94 <_free_r>:
 8008c94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008c96:	2900      	cmp	r1, #0
 8008c98:	d044      	beq.n	8008d24 <_free_r+0x90>
 8008c9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c9e:	9001      	str	r0, [sp, #4]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	f1a1 0404 	sub.w	r4, r1, #4
 8008ca6:	bfb8      	it	lt
 8008ca8:	18e4      	addlt	r4, r4, r3
 8008caa:	f7fe f91d 	bl	8006ee8 <__malloc_lock>
 8008cae:	4a1e      	ldr	r2, [pc, #120]	; (8008d28 <_free_r+0x94>)
 8008cb0:	9801      	ldr	r0, [sp, #4]
 8008cb2:	6813      	ldr	r3, [r2, #0]
 8008cb4:	b933      	cbnz	r3, 8008cc4 <_free_r+0x30>
 8008cb6:	6063      	str	r3, [r4, #4]
 8008cb8:	6014      	str	r4, [r2, #0]
 8008cba:	b003      	add	sp, #12
 8008cbc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008cc0:	f7fe b918 	b.w	8006ef4 <__malloc_unlock>
 8008cc4:	42a3      	cmp	r3, r4
 8008cc6:	d908      	bls.n	8008cda <_free_r+0x46>
 8008cc8:	6825      	ldr	r5, [r4, #0]
 8008cca:	1961      	adds	r1, r4, r5
 8008ccc:	428b      	cmp	r3, r1
 8008cce:	bf01      	itttt	eq
 8008cd0:	6819      	ldreq	r1, [r3, #0]
 8008cd2:	685b      	ldreq	r3, [r3, #4]
 8008cd4:	1949      	addeq	r1, r1, r5
 8008cd6:	6021      	streq	r1, [r4, #0]
 8008cd8:	e7ed      	b.n	8008cb6 <_free_r+0x22>
 8008cda:	461a      	mov	r2, r3
 8008cdc:	685b      	ldr	r3, [r3, #4]
 8008cde:	b10b      	cbz	r3, 8008ce4 <_free_r+0x50>
 8008ce0:	42a3      	cmp	r3, r4
 8008ce2:	d9fa      	bls.n	8008cda <_free_r+0x46>
 8008ce4:	6811      	ldr	r1, [r2, #0]
 8008ce6:	1855      	adds	r5, r2, r1
 8008ce8:	42a5      	cmp	r5, r4
 8008cea:	d10b      	bne.n	8008d04 <_free_r+0x70>
 8008cec:	6824      	ldr	r4, [r4, #0]
 8008cee:	4421      	add	r1, r4
 8008cf0:	1854      	adds	r4, r2, r1
 8008cf2:	42a3      	cmp	r3, r4
 8008cf4:	6011      	str	r1, [r2, #0]
 8008cf6:	d1e0      	bne.n	8008cba <_free_r+0x26>
 8008cf8:	681c      	ldr	r4, [r3, #0]
 8008cfa:	685b      	ldr	r3, [r3, #4]
 8008cfc:	6053      	str	r3, [r2, #4]
 8008cfe:	440c      	add	r4, r1
 8008d00:	6014      	str	r4, [r2, #0]
 8008d02:	e7da      	b.n	8008cba <_free_r+0x26>
 8008d04:	d902      	bls.n	8008d0c <_free_r+0x78>
 8008d06:	230c      	movs	r3, #12
 8008d08:	6003      	str	r3, [r0, #0]
 8008d0a:	e7d6      	b.n	8008cba <_free_r+0x26>
 8008d0c:	6825      	ldr	r5, [r4, #0]
 8008d0e:	1961      	adds	r1, r4, r5
 8008d10:	428b      	cmp	r3, r1
 8008d12:	bf04      	itt	eq
 8008d14:	6819      	ldreq	r1, [r3, #0]
 8008d16:	685b      	ldreq	r3, [r3, #4]
 8008d18:	6063      	str	r3, [r4, #4]
 8008d1a:	bf04      	itt	eq
 8008d1c:	1949      	addeq	r1, r1, r5
 8008d1e:	6021      	streq	r1, [r4, #0]
 8008d20:	6054      	str	r4, [r2, #4]
 8008d22:	e7ca      	b.n	8008cba <_free_r+0x26>
 8008d24:	b003      	add	sp, #12
 8008d26:	bd30      	pop	{r4, r5, pc}
 8008d28:	200005cc 	.word	0x200005cc

08008d2c <_Balloc>:
 8008d2c:	b570      	push	{r4, r5, r6, lr}
 8008d2e:	69c6      	ldr	r6, [r0, #28]
 8008d30:	4604      	mov	r4, r0
 8008d32:	460d      	mov	r5, r1
 8008d34:	b976      	cbnz	r6, 8008d54 <_Balloc+0x28>
 8008d36:	2010      	movs	r0, #16
 8008d38:	f7fe f826 	bl	8006d88 <malloc>
 8008d3c:	4602      	mov	r2, r0
 8008d3e:	61e0      	str	r0, [r4, #28]
 8008d40:	b920      	cbnz	r0, 8008d4c <_Balloc+0x20>
 8008d42:	4b18      	ldr	r3, [pc, #96]	; (8008da4 <_Balloc+0x78>)
 8008d44:	4818      	ldr	r0, [pc, #96]	; (8008da8 <_Balloc+0x7c>)
 8008d46:	216b      	movs	r1, #107	; 0x6b
 8008d48:	f001 fd7e 	bl	800a848 <__assert_func>
 8008d4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008d50:	6006      	str	r6, [r0, #0]
 8008d52:	60c6      	str	r6, [r0, #12]
 8008d54:	69e6      	ldr	r6, [r4, #28]
 8008d56:	68f3      	ldr	r3, [r6, #12]
 8008d58:	b183      	cbz	r3, 8008d7c <_Balloc+0x50>
 8008d5a:	69e3      	ldr	r3, [r4, #28]
 8008d5c:	68db      	ldr	r3, [r3, #12]
 8008d5e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008d62:	b9b8      	cbnz	r0, 8008d94 <_Balloc+0x68>
 8008d64:	2101      	movs	r1, #1
 8008d66:	fa01 f605 	lsl.w	r6, r1, r5
 8008d6a:	1d72      	adds	r2, r6, #5
 8008d6c:	0092      	lsls	r2, r2, #2
 8008d6e:	4620      	mov	r0, r4
 8008d70:	f7fd fff4 	bl	8006d5c <_calloc_r>
 8008d74:	b160      	cbz	r0, 8008d90 <_Balloc+0x64>
 8008d76:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008d7a:	e00e      	b.n	8008d9a <_Balloc+0x6e>
 8008d7c:	2221      	movs	r2, #33	; 0x21
 8008d7e:	2104      	movs	r1, #4
 8008d80:	4620      	mov	r0, r4
 8008d82:	f7fd ffeb 	bl	8006d5c <_calloc_r>
 8008d86:	69e3      	ldr	r3, [r4, #28]
 8008d88:	60f0      	str	r0, [r6, #12]
 8008d8a:	68db      	ldr	r3, [r3, #12]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d1e4      	bne.n	8008d5a <_Balloc+0x2e>
 8008d90:	2000      	movs	r0, #0
 8008d92:	bd70      	pop	{r4, r5, r6, pc}
 8008d94:	6802      	ldr	r2, [r0, #0]
 8008d96:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008da0:	e7f7      	b.n	8008d92 <_Balloc+0x66>
 8008da2:	bf00      	nop
 8008da4:	0800b822 	.word	0x0800b822
 8008da8:	0800b8a2 	.word	0x0800b8a2

08008dac <_Bfree>:
 8008dac:	b570      	push	{r4, r5, r6, lr}
 8008dae:	69c6      	ldr	r6, [r0, #28]
 8008db0:	4605      	mov	r5, r0
 8008db2:	460c      	mov	r4, r1
 8008db4:	b976      	cbnz	r6, 8008dd4 <_Bfree+0x28>
 8008db6:	2010      	movs	r0, #16
 8008db8:	f7fd ffe6 	bl	8006d88 <malloc>
 8008dbc:	4602      	mov	r2, r0
 8008dbe:	61e8      	str	r0, [r5, #28]
 8008dc0:	b920      	cbnz	r0, 8008dcc <_Bfree+0x20>
 8008dc2:	4b09      	ldr	r3, [pc, #36]	; (8008de8 <_Bfree+0x3c>)
 8008dc4:	4809      	ldr	r0, [pc, #36]	; (8008dec <_Bfree+0x40>)
 8008dc6:	218f      	movs	r1, #143	; 0x8f
 8008dc8:	f001 fd3e 	bl	800a848 <__assert_func>
 8008dcc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008dd0:	6006      	str	r6, [r0, #0]
 8008dd2:	60c6      	str	r6, [r0, #12]
 8008dd4:	b13c      	cbz	r4, 8008de6 <_Bfree+0x3a>
 8008dd6:	69eb      	ldr	r3, [r5, #28]
 8008dd8:	6862      	ldr	r2, [r4, #4]
 8008dda:	68db      	ldr	r3, [r3, #12]
 8008ddc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008de0:	6021      	str	r1, [r4, #0]
 8008de2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008de6:	bd70      	pop	{r4, r5, r6, pc}
 8008de8:	0800b822 	.word	0x0800b822
 8008dec:	0800b8a2 	.word	0x0800b8a2

08008df0 <__multadd>:
 8008df0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008df4:	690d      	ldr	r5, [r1, #16]
 8008df6:	4607      	mov	r7, r0
 8008df8:	460c      	mov	r4, r1
 8008dfa:	461e      	mov	r6, r3
 8008dfc:	f101 0c14 	add.w	ip, r1, #20
 8008e00:	2000      	movs	r0, #0
 8008e02:	f8dc 3000 	ldr.w	r3, [ip]
 8008e06:	b299      	uxth	r1, r3
 8008e08:	fb02 6101 	mla	r1, r2, r1, r6
 8008e0c:	0c1e      	lsrs	r6, r3, #16
 8008e0e:	0c0b      	lsrs	r3, r1, #16
 8008e10:	fb02 3306 	mla	r3, r2, r6, r3
 8008e14:	b289      	uxth	r1, r1
 8008e16:	3001      	adds	r0, #1
 8008e18:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008e1c:	4285      	cmp	r5, r0
 8008e1e:	f84c 1b04 	str.w	r1, [ip], #4
 8008e22:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008e26:	dcec      	bgt.n	8008e02 <__multadd+0x12>
 8008e28:	b30e      	cbz	r6, 8008e6e <__multadd+0x7e>
 8008e2a:	68a3      	ldr	r3, [r4, #8]
 8008e2c:	42ab      	cmp	r3, r5
 8008e2e:	dc19      	bgt.n	8008e64 <__multadd+0x74>
 8008e30:	6861      	ldr	r1, [r4, #4]
 8008e32:	4638      	mov	r0, r7
 8008e34:	3101      	adds	r1, #1
 8008e36:	f7ff ff79 	bl	8008d2c <_Balloc>
 8008e3a:	4680      	mov	r8, r0
 8008e3c:	b928      	cbnz	r0, 8008e4a <__multadd+0x5a>
 8008e3e:	4602      	mov	r2, r0
 8008e40:	4b0c      	ldr	r3, [pc, #48]	; (8008e74 <__multadd+0x84>)
 8008e42:	480d      	ldr	r0, [pc, #52]	; (8008e78 <__multadd+0x88>)
 8008e44:	21ba      	movs	r1, #186	; 0xba
 8008e46:	f001 fcff 	bl	800a848 <__assert_func>
 8008e4a:	6922      	ldr	r2, [r4, #16]
 8008e4c:	3202      	adds	r2, #2
 8008e4e:	f104 010c 	add.w	r1, r4, #12
 8008e52:	0092      	lsls	r2, r2, #2
 8008e54:	300c      	adds	r0, #12
 8008e56:	f001 fcdf 	bl	800a818 <memcpy>
 8008e5a:	4621      	mov	r1, r4
 8008e5c:	4638      	mov	r0, r7
 8008e5e:	f7ff ffa5 	bl	8008dac <_Bfree>
 8008e62:	4644      	mov	r4, r8
 8008e64:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008e68:	3501      	adds	r5, #1
 8008e6a:	615e      	str	r6, [r3, #20]
 8008e6c:	6125      	str	r5, [r4, #16]
 8008e6e:	4620      	mov	r0, r4
 8008e70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e74:	0800b891 	.word	0x0800b891
 8008e78:	0800b8a2 	.word	0x0800b8a2

08008e7c <__s2b>:
 8008e7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e80:	460c      	mov	r4, r1
 8008e82:	4615      	mov	r5, r2
 8008e84:	461f      	mov	r7, r3
 8008e86:	2209      	movs	r2, #9
 8008e88:	3308      	adds	r3, #8
 8008e8a:	4606      	mov	r6, r0
 8008e8c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008e90:	2100      	movs	r1, #0
 8008e92:	2201      	movs	r2, #1
 8008e94:	429a      	cmp	r2, r3
 8008e96:	db09      	blt.n	8008eac <__s2b+0x30>
 8008e98:	4630      	mov	r0, r6
 8008e9a:	f7ff ff47 	bl	8008d2c <_Balloc>
 8008e9e:	b940      	cbnz	r0, 8008eb2 <__s2b+0x36>
 8008ea0:	4602      	mov	r2, r0
 8008ea2:	4b19      	ldr	r3, [pc, #100]	; (8008f08 <__s2b+0x8c>)
 8008ea4:	4819      	ldr	r0, [pc, #100]	; (8008f0c <__s2b+0x90>)
 8008ea6:	21d3      	movs	r1, #211	; 0xd3
 8008ea8:	f001 fcce 	bl	800a848 <__assert_func>
 8008eac:	0052      	lsls	r2, r2, #1
 8008eae:	3101      	adds	r1, #1
 8008eb0:	e7f0      	b.n	8008e94 <__s2b+0x18>
 8008eb2:	9b08      	ldr	r3, [sp, #32]
 8008eb4:	6143      	str	r3, [r0, #20]
 8008eb6:	2d09      	cmp	r5, #9
 8008eb8:	f04f 0301 	mov.w	r3, #1
 8008ebc:	6103      	str	r3, [r0, #16]
 8008ebe:	dd16      	ble.n	8008eee <__s2b+0x72>
 8008ec0:	f104 0909 	add.w	r9, r4, #9
 8008ec4:	46c8      	mov	r8, r9
 8008ec6:	442c      	add	r4, r5
 8008ec8:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008ecc:	4601      	mov	r1, r0
 8008ece:	3b30      	subs	r3, #48	; 0x30
 8008ed0:	220a      	movs	r2, #10
 8008ed2:	4630      	mov	r0, r6
 8008ed4:	f7ff ff8c 	bl	8008df0 <__multadd>
 8008ed8:	45a0      	cmp	r8, r4
 8008eda:	d1f5      	bne.n	8008ec8 <__s2b+0x4c>
 8008edc:	f1a5 0408 	sub.w	r4, r5, #8
 8008ee0:	444c      	add	r4, r9
 8008ee2:	1b2d      	subs	r5, r5, r4
 8008ee4:	1963      	adds	r3, r4, r5
 8008ee6:	42bb      	cmp	r3, r7
 8008ee8:	db04      	blt.n	8008ef4 <__s2b+0x78>
 8008eea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008eee:	340a      	adds	r4, #10
 8008ef0:	2509      	movs	r5, #9
 8008ef2:	e7f6      	b.n	8008ee2 <__s2b+0x66>
 8008ef4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008ef8:	4601      	mov	r1, r0
 8008efa:	3b30      	subs	r3, #48	; 0x30
 8008efc:	220a      	movs	r2, #10
 8008efe:	4630      	mov	r0, r6
 8008f00:	f7ff ff76 	bl	8008df0 <__multadd>
 8008f04:	e7ee      	b.n	8008ee4 <__s2b+0x68>
 8008f06:	bf00      	nop
 8008f08:	0800b891 	.word	0x0800b891
 8008f0c:	0800b8a2 	.word	0x0800b8a2

08008f10 <__hi0bits>:
 8008f10:	0c03      	lsrs	r3, r0, #16
 8008f12:	041b      	lsls	r3, r3, #16
 8008f14:	b9d3      	cbnz	r3, 8008f4c <__hi0bits+0x3c>
 8008f16:	0400      	lsls	r0, r0, #16
 8008f18:	2310      	movs	r3, #16
 8008f1a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008f1e:	bf04      	itt	eq
 8008f20:	0200      	lsleq	r0, r0, #8
 8008f22:	3308      	addeq	r3, #8
 8008f24:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008f28:	bf04      	itt	eq
 8008f2a:	0100      	lsleq	r0, r0, #4
 8008f2c:	3304      	addeq	r3, #4
 8008f2e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008f32:	bf04      	itt	eq
 8008f34:	0080      	lsleq	r0, r0, #2
 8008f36:	3302      	addeq	r3, #2
 8008f38:	2800      	cmp	r0, #0
 8008f3a:	db05      	blt.n	8008f48 <__hi0bits+0x38>
 8008f3c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008f40:	f103 0301 	add.w	r3, r3, #1
 8008f44:	bf08      	it	eq
 8008f46:	2320      	moveq	r3, #32
 8008f48:	4618      	mov	r0, r3
 8008f4a:	4770      	bx	lr
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	e7e4      	b.n	8008f1a <__hi0bits+0xa>

08008f50 <__lo0bits>:
 8008f50:	6803      	ldr	r3, [r0, #0]
 8008f52:	f013 0207 	ands.w	r2, r3, #7
 8008f56:	d00c      	beq.n	8008f72 <__lo0bits+0x22>
 8008f58:	07d9      	lsls	r1, r3, #31
 8008f5a:	d422      	bmi.n	8008fa2 <__lo0bits+0x52>
 8008f5c:	079a      	lsls	r2, r3, #30
 8008f5e:	bf49      	itett	mi
 8008f60:	085b      	lsrmi	r3, r3, #1
 8008f62:	089b      	lsrpl	r3, r3, #2
 8008f64:	6003      	strmi	r3, [r0, #0]
 8008f66:	2201      	movmi	r2, #1
 8008f68:	bf5c      	itt	pl
 8008f6a:	6003      	strpl	r3, [r0, #0]
 8008f6c:	2202      	movpl	r2, #2
 8008f6e:	4610      	mov	r0, r2
 8008f70:	4770      	bx	lr
 8008f72:	b299      	uxth	r1, r3
 8008f74:	b909      	cbnz	r1, 8008f7a <__lo0bits+0x2a>
 8008f76:	0c1b      	lsrs	r3, r3, #16
 8008f78:	2210      	movs	r2, #16
 8008f7a:	b2d9      	uxtb	r1, r3
 8008f7c:	b909      	cbnz	r1, 8008f82 <__lo0bits+0x32>
 8008f7e:	3208      	adds	r2, #8
 8008f80:	0a1b      	lsrs	r3, r3, #8
 8008f82:	0719      	lsls	r1, r3, #28
 8008f84:	bf04      	itt	eq
 8008f86:	091b      	lsreq	r3, r3, #4
 8008f88:	3204      	addeq	r2, #4
 8008f8a:	0799      	lsls	r1, r3, #30
 8008f8c:	bf04      	itt	eq
 8008f8e:	089b      	lsreq	r3, r3, #2
 8008f90:	3202      	addeq	r2, #2
 8008f92:	07d9      	lsls	r1, r3, #31
 8008f94:	d403      	bmi.n	8008f9e <__lo0bits+0x4e>
 8008f96:	085b      	lsrs	r3, r3, #1
 8008f98:	f102 0201 	add.w	r2, r2, #1
 8008f9c:	d003      	beq.n	8008fa6 <__lo0bits+0x56>
 8008f9e:	6003      	str	r3, [r0, #0]
 8008fa0:	e7e5      	b.n	8008f6e <__lo0bits+0x1e>
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	e7e3      	b.n	8008f6e <__lo0bits+0x1e>
 8008fa6:	2220      	movs	r2, #32
 8008fa8:	e7e1      	b.n	8008f6e <__lo0bits+0x1e>
	...

08008fac <__i2b>:
 8008fac:	b510      	push	{r4, lr}
 8008fae:	460c      	mov	r4, r1
 8008fb0:	2101      	movs	r1, #1
 8008fb2:	f7ff febb 	bl	8008d2c <_Balloc>
 8008fb6:	4602      	mov	r2, r0
 8008fb8:	b928      	cbnz	r0, 8008fc6 <__i2b+0x1a>
 8008fba:	4b05      	ldr	r3, [pc, #20]	; (8008fd0 <__i2b+0x24>)
 8008fbc:	4805      	ldr	r0, [pc, #20]	; (8008fd4 <__i2b+0x28>)
 8008fbe:	f240 1145 	movw	r1, #325	; 0x145
 8008fc2:	f001 fc41 	bl	800a848 <__assert_func>
 8008fc6:	2301      	movs	r3, #1
 8008fc8:	6144      	str	r4, [r0, #20]
 8008fca:	6103      	str	r3, [r0, #16]
 8008fcc:	bd10      	pop	{r4, pc}
 8008fce:	bf00      	nop
 8008fd0:	0800b891 	.word	0x0800b891
 8008fd4:	0800b8a2 	.word	0x0800b8a2

08008fd8 <__multiply>:
 8008fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fdc:	4691      	mov	r9, r2
 8008fde:	690a      	ldr	r2, [r1, #16]
 8008fe0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008fe4:	429a      	cmp	r2, r3
 8008fe6:	bfb8      	it	lt
 8008fe8:	460b      	movlt	r3, r1
 8008fea:	460c      	mov	r4, r1
 8008fec:	bfbc      	itt	lt
 8008fee:	464c      	movlt	r4, r9
 8008ff0:	4699      	movlt	r9, r3
 8008ff2:	6927      	ldr	r7, [r4, #16]
 8008ff4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008ff8:	68a3      	ldr	r3, [r4, #8]
 8008ffa:	6861      	ldr	r1, [r4, #4]
 8008ffc:	eb07 060a 	add.w	r6, r7, sl
 8009000:	42b3      	cmp	r3, r6
 8009002:	b085      	sub	sp, #20
 8009004:	bfb8      	it	lt
 8009006:	3101      	addlt	r1, #1
 8009008:	f7ff fe90 	bl	8008d2c <_Balloc>
 800900c:	b930      	cbnz	r0, 800901c <__multiply+0x44>
 800900e:	4602      	mov	r2, r0
 8009010:	4b44      	ldr	r3, [pc, #272]	; (8009124 <__multiply+0x14c>)
 8009012:	4845      	ldr	r0, [pc, #276]	; (8009128 <__multiply+0x150>)
 8009014:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8009018:	f001 fc16 	bl	800a848 <__assert_func>
 800901c:	f100 0514 	add.w	r5, r0, #20
 8009020:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009024:	462b      	mov	r3, r5
 8009026:	2200      	movs	r2, #0
 8009028:	4543      	cmp	r3, r8
 800902a:	d321      	bcc.n	8009070 <__multiply+0x98>
 800902c:	f104 0314 	add.w	r3, r4, #20
 8009030:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009034:	f109 0314 	add.w	r3, r9, #20
 8009038:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800903c:	9202      	str	r2, [sp, #8]
 800903e:	1b3a      	subs	r2, r7, r4
 8009040:	3a15      	subs	r2, #21
 8009042:	f022 0203 	bic.w	r2, r2, #3
 8009046:	3204      	adds	r2, #4
 8009048:	f104 0115 	add.w	r1, r4, #21
 800904c:	428f      	cmp	r7, r1
 800904e:	bf38      	it	cc
 8009050:	2204      	movcc	r2, #4
 8009052:	9201      	str	r2, [sp, #4]
 8009054:	9a02      	ldr	r2, [sp, #8]
 8009056:	9303      	str	r3, [sp, #12]
 8009058:	429a      	cmp	r2, r3
 800905a:	d80c      	bhi.n	8009076 <__multiply+0x9e>
 800905c:	2e00      	cmp	r6, #0
 800905e:	dd03      	ble.n	8009068 <__multiply+0x90>
 8009060:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009064:	2b00      	cmp	r3, #0
 8009066:	d05b      	beq.n	8009120 <__multiply+0x148>
 8009068:	6106      	str	r6, [r0, #16]
 800906a:	b005      	add	sp, #20
 800906c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009070:	f843 2b04 	str.w	r2, [r3], #4
 8009074:	e7d8      	b.n	8009028 <__multiply+0x50>
 8009076:	f8b3 a000 	ldrh.w	sl, [r3]
 800907a:	f1ba 0f00 	cmp.w	sl, #0
 800907e:	d024      	beq.n	80090ca <__multiply+0xf2>
 8009080:	f104 0e14 	add.w	lr, r4, #20
 8009084:	46a9      	mov	r9, r5
 8009086:	f04f 0c00 	mov.w	ip, #0
 800908a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800908e:	f8d9 1000 	ldr.w	r1, [r9]
 8009092:	fa1f fb82 	uxth.w	fp, r2
 8009096:	b289      	uxth	r1, r1
 8009098:	fb0a 110b 	mla	r1, sl, fp, r1
 800909c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80090a0:	f8d9 2000 	ldr.w	r2, [r9]
 80090a4:	4461      	add	r1, ip
 80090a6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80090aa:	fb0a c20b 	mla	r2, sl, fp, ip
 80090ae:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80090b2:	b289      	uxth	r1, r1
 80090b4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80090b8:	4577      	cmp	r7, lr
 80090ba:	f849 1b04 	str.w	r1, [r9], #4
 80090be:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80090c2:	d8e2      	bhi.n	800908a <__multiply+0xb2>
 80090c4:	9a01      	ldr	r2, [sp, #4]
 80090c6:	f845 c002 	str.w	ip, [r5, r2]
 80090ca:	9a03      	ldr	r2, [sp, #12]
 80090cc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80090d0:	3304      	adds	r3, #4
 80090d2:	f1b9 0f00 	cmp.w	r9, #0
 80090d6:	d021      	beq.n	800911c <__multiply+0x144>
 80090d8:	6829      	ldr	r1, [r5, #0]
 80090da:	f104 0c14 	add.w	ip, r4, #20
 80090de:	46ae      	mov	lr, r5
 80090e0:	f04f 0a00 	mov.w	sl, #0
 80090e4:	f8bc b000 	ldrh.w	fp, [ip]
 80090e8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80090ec:	fb09 220b 	mla	r2, r9, fp, r2
 80090f0:	4452      	add	r2, sl
 80090f2:	b289      	uxth	r1, r1
 80090f4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80090f8:	f84e 1b04 	str.w	r1, [lr], #4
 80090fc:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009100:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009104:	f8be 1000 	ldrh.w	r1, [lr]
 8009108:	fb09 110a 	mla	r1, r9, sl, r1
 800910c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8009110:	4567      	cmp	r7, ip
 8009112:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009116:	d8e5      	bhi.n	80090e4 <__multiply+0x10c>
 8009118:	9a01      	ldr	r2, [sp, #4]
 800911a:	50a9      	str	r1, [r5, r2]
 800911c:	3504      	adds	r5, #4
 800911e:	e799      	b.n	8009054 <__multiply+0x7c>
 8009120:	3e01      	subs	r6, #1
 8009122:	e79b      	b.n	800905c <__multiply+0x84>
 8009124:	0800b891 	.word	0x0800b891
 8009128:	0800b8a2 	.word	0x0800b8a2

0800912c <__pow5mult>:
 800912c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009130:	4615      	mov	r5, r2
 8009132:	f012 0203 	ands.w	r2, r2, #3
 8009136:	4606      	mov	r6, r0
 8009138:	460f      	mov	r7, r1
 800913a:	d007      	beq.n	800914c <__pow5mult+0x20>
 800913c:	4c25      	ldr	r4, [pc, #148]	; (80091d4 <__pow5mult+0xa8>)
 800913e:	3a01      	subs	r2, #1
 8009140:	2300      	movs	r3, #0
 8009142:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009146:	f7ff fe53 	bl	8008df0 <__multadd>
 800914a:	4607      	mov	r7, r0
 800914c:	10ad      	asrs	r5, r5, #2
 800914e:	d03d      	beq.n	80091cc <__pow5mult+0xa0>
 8009150:	69f4      	ldr	r4, [r6, #28]
 8009152:	b97c      	cbnz	r4, 8009174 <__pow5mult+0x48>
 8009154:	2010      	movs	r0, #16
 8009156:	f7fd fe17 	bl	8006d88 <malloc>
 800915a:	4602      	mov	r2, r0
 800915c:	61f0      	str	r0, [r6, #28]
 800915e:	b928      	cbnz	r0, 800916c <__pow5mult+0x40>
 8009160:	4b1d      	ldr	r3, [pc, #116]	; (80091d8 <__pow5mult+0xac>)
 8009162:	481e      	ldr	r0, [pc, #120]	; (80091dc <__pow5mult+0xb0>)
 8009164:	f240 11b3 	movw	r1, #435	; 0x1b3
 8009168:	f001 fb6e 	bl	800a848 <__assert_func>
 800916c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009170:	6004      	str	r4, [r0, #0]
 8009172:	60c4      	str	r4, [r0, #12]
 8009174:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8009178:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800917c:	b94c      	cbnz	r4, 8009192 <__pow5mult+0x66>
 800917e:	f240 2171 	movw	r1, #625	; 0x271
 8009182:	4630      	mov	r0, r6
 8009184:	f7ff ff12 	bl	8008fac <__i2b>
 8009188:	2300      	movs	r3, #0
 800918a:	f8c8 0008 	str.w	r0, [r8, #8]
 800918e:	4604      	mov	r4, r0
 8009190:	6003      	str	r3, [r0, #0]
 8009192:	f04f 0900 	mov.w	r9, #0
 8009196:	07eb      	lsls	r3, r5, #31
 8009198:	d50a      	bpl.n	80091b0 <__pow5mult+0x84>
 800919a:	4639      	mov	r1, r7
 800919c:	4622      	mov	r2, r4
 800919e:	4630      	mov	r0, r6
 80091a0:	f7ff ff1a 	bl	8008fd8 <__multiply>
 80091a4:	4639      	mov	r1, r7
 80091a6:	4680      	mov	r8, r0
 80091a8:	4630      	mov	r0, r6
 80091aa:	f7ff fdff 	bl	8008dac <_Bfree>
 80091ae:	4647      	mov	r7, r8
 80091b0:	106d      	asrs	r5, r5, #1
 80091b2:	d00b      	beq.n	80091cc <__pow5mult+0xa0>
 80091b4:	6820      	ldr	r0, [r4, #0]
 80091b6:	b938      	cbnz	r0, 80091c8 <__pow5mult+0x9c>
 80091b8:	4622      	mov	r2, r4
 80091ba:	4621      	mov	r1, r4
 80091bc:	4630      	mov	r0, r6
 80091be:	f7ff ff0b 	bl	8008fd8 <__multiply>
 80091c2:	6020      	str	r0, [r4, #0]
 80091c4:	f8c0 9000 	str.w	r9, [r0]
 80091c8:	4604      	mov	r4, r0
 80091ca:	e7e4      	b.n	8009196 <__pow5mult+0x6a>
 80091cc:	4638      	mov	r0, r7
 80091ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80091d2:	bf00      	nop
 80091d4:	0800b9f0 	.word	0x0800b9f0
 80091d8:	0800b822 	.word	0x0800b822
 80091dc:	0800b8a2 	.word	0x0800b8a2

080091e0 <__lshift>:
 80091e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091e4:	460c      	mov	r4, r1
 80091e6:	6849      	ldr	r1, [r1, #4]
 80091e8:	6923      	ldr	r3, [r4, #16]
 80091ea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80091ee:	68a3      	ldr	r3, [r4, #8]
 80091f0:	4607      	mov	r7, r0
 80091f2:	4691      	mov	r9, r2
 80091f4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80091f8:	f108 0601 	add.w	r6, r8, #1
 80091fc:	42b3      	cmp	r3, r6
 80091fe:	db0b      	blt.n	8009218 <__lshift+0x38>
 8009200:	4638      	mov	r0, r7
 8009202:	f7ff fd93 	bl	8008d2c <_Balloc>
 8009206:	4605      	mov	r5, r0
 8009208:	b948      	cbnz	r0, 800921e <__lshift+0x3e>
 800920a:	4602      	mov	r2, r0
 800920c:	4b28      	ldr	r3, [pc, #160]	; (80092b0 <__lshift+0xd0>)
 800920e:	4829      	ldr	r0, [pc, #164]	; (80092b4 <__lshift+0xd4>)
 8009210:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8009214:	f001 fb18 	bl	800a848 <__assert_func>
 8009218:	3101      	adds	r1, #1
 800921a:	005b      	lsls	r3, r3, #1
 800921c:	e7ee      	b.n	80091fc <__lshift+0x1c>
 800921e:	2300      	movs	r3, #0
 8009220:	f100 0114 	add.w	r1, r0, #20
 8009224:	f100 0210 	add.w	r2, r0, #16
 8009228:	4618      	mov	r0, r3
 800922a:	4553      	cmp	r3, sl
 800922c:	db33      	blt.n	8009296 <__lshift+0xb6>
 800922e:	6920      	ldr	r0, [r4, #16]
 8009230:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009234:	f104 0314 	add.w	r3, r4, #20
 8009238:	f019 091f 	ands.w	r9, r9, #31
 800923c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009240:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009244:	d02b      	beq.n	800929e <__lshift+0xbe>
 8009246:	f1c9 0e20 	rsb	lr, r9, #32
 800924a:	468a      	mov	sl, r1
 800924c:	2200      	movs	r2, #0
 800924e:	6818      	ldr	r0, [r3, #0]
 8009250:	fa00 f009 	lsl.w	r0, r0, r9
 8009254:	4310      	orrs	r0, r2
 8009256:	f84a 0b04 	str.w	r0, [sl], #4
 800925a:	f853 2b04 	ldr.w	r2, [r3], #4
 800925e:	459c      	cmp	ip, r3
 8009260:	fa22 f20e 	lsr.w	r2, r2, lr
 8009264:	d8f3      	bhi.n	800924e <__lshift+0x6e>
 8009266:	ebac 0304 	sub.w	r3, ip, r4
 800926a:	3b15      	subs	r3, #21
 800926c:	f023 0303 	bic.w	r3, r3, #3
 8009270:	3304      	adds	r3, #4
 8009272:	f104 0015 	add.w	r0, r4, #21
 8009276:	4584      	cmp	ip, r0
 8009278:	bf38      	it	cc
 800927a:	2304      	movcc	r3, #4
 800927c:	50ca      	str	r2, [r1, r3]
 800927e:	b10a      	cbz	r2, 8009284 <__lshift+0xa4>
 8009280:	f108 0602 	add.w	r6, r8, #2
 8009284:	3e01      	subs	r6, #1
 8009286:	4638      	mov	r0, r7
 8009288:	612e      	str	r6, [r5, #16]
 800928a:	4621      	mov	r1, r4
 800928c:	f7ff fd8e 	bl	8008dac <_Bfree>
 8009290:	4628      	mov	r0, r5
 8009292:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009296:	f842 0f04 	str.w	r0, [r2, #4]!
 800929a:	3301      	adds	r3, #1
 800929c:	e7c5      	b.n	800922a <__lshift+0x4a>
 800929e:	3904      	subs	r1, #4
 80092a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80092a4:	f841 2f04 	str.w	r2, [r1, #4]!
 80092a8:	459c      	cmp	ip, r3
 80092aa:	d8f9      	bhi.n	80092a0 <__lshift+0xc0>
 80092ac:	e7ea      	b.n	8009284 <__lshift+0xa4>
 80092ae:	bf00      	nop
 80092b0:	0800b891 	.word	0x0800b891
 80092b4:	0800b8a2 	.word	0x0800b8a2

080092b8 <__mcmp>:
 80092b8:	b530      	push	{r4, r5, lr}
 80092ba:	6902      	ldr	r2, [r0, #16]
 80092bc:	690c      	ldr	r4, [r1, #16]
 80092be:	1b12      	subs	r2, r2, r4
 80092c0:	d10e      	bne.n	80092e0 <__mcmp+0x28>
 80092c2:	f100 0314 	add.w	r3, r0, #20
 80092c6:	3114      	adds	r1, #20
 80092c8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80092cc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80092d0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80092d4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80092d8:	42a5      	cmp	r5, r4
 80092da:	d003      	beq.n	80092e4 <__mcmp+0x2c>
 80092dc:	d305      	bcc.n	80092ea <__mcmp+0x32>
 80092de:	2201      	movs	r2, #1
 80092e0:	4610      	mov	r0, r2
 80092e2:	bd30      	pop	{r4, r5, pc}
 80092e4:	4283      	cmp	r3, r0
 80092e6:	d3f3      	bcc.n	80092d0 <__mcmp+0x18>
 80092e8:	e7fa      	b.n	80092e0 <__mcmp+0x28>
 80092ea:	f04f 32ff 	mov.w	r2, #4294967295
 80092ee:	e7f7      	b.n	80092e0 <__mcmp+0x28>

080092f0 <__mdiff>:
 80092f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092f4:	460c      	mov	r4, r1
 80092f6:	4606      	mov	r6, r0
 80092f8:	4611      	mov	r1, r2
 80092fa:	4620      	mov	r0, r4
 80092fc:	4690      	mov	r8, r2
 80092fe:	f7ff ffdb 	bl	80092b8 <__mcmp>
 8009302:	1e05      	subs	r5, r0, #0
 8009304:	d110      	bne.n	8009328 <__mdiff+0x38>
 8009306:	4629      	mov	r1, r5
 8009308:	4630      	mov	r0, r6
 800930a:	f7ff fd0f 	bl	8008d2c <_Balloc>
 800930e:	b930      	cbnz	r0, 800931e <__mdiff+0x2e>
 8009310:	4b3a      	ldr	r3, [pc, #232]	; (80093fc <__mdiff+0x10c>)
 8009312:	4602      	mov	r2, r0
 8009314:	f240 2137 	movw	r1, #567	; 0x237
 8009318:	4839      	ldr	r0, [pc, #228]	; (8009400 <__mdiff+0x110>)
 800931a:	f001 fa95 	bl	800a848 <__assert_func>
 800931e:	2301      	movs	r3, #1
 8009320:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009324:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009328:	bfa4      	itt	ge
 800932a:	4643      	movge	r3, r8
 800932c:	46a0      	movge	r8, r4
 800932e:	4630      	mov	r0, r6
 8009330:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009334:	bfa6      	itte	ge
 8009336:	461c      	movge	r4, r3
 8009338:	2500      	movge	r5, #0
 800933a:	2501      	movlt	r5, #1
 800933c:	f7ff fcf6 	bl	8008d2c <_Balloc>
 8009340:	b920      	cbnz	r0, 800934c <__mdiff+0x5c>
 8009342:	4b2e      	ldr	r3, [pc, #184]	; (80093fc <__mdiff+0x10c>)
 8009344:	4602      	mov	r2, r0
 8009346:	f240 2145 	movw	r1, #581	; 0x245
 800934a:	e7e5      	b.n	8009318 <__mdiff+0x28>
 800934c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009350:	6926      	ldr	r6, [r4, #16]
 8009352:	60c5      	str	r5, [r0, #12]
 8009354:	f104 0914 	add.w	r9, r4, #20
 8009358:	f108 0514 	add.w	r5, r8, #20
 800935c:	f100 0e14 	add.w	lr, r0, #20
 8009360:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009364:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009368:	f108 0210 	add.w	r2, r8, #16
 800936c:	46f2      	mov	sl, lr
 800936e:	2100      	movs	r1, #0
 8009370:	f859 3b04 	ldr.w	r3, [r9], #4
 8009374:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009378:	fa11 f88b 	uxtah	r8, r1, fp
 800937c:	b299      	uxth	r1, r3
 800937e:	0c1b      	lsrs	r3, r3, #16
 8009380:	eba8 0801 	sub.w	r8, r8, r1
 8009384:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009388:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800938c:	fa1f f888 	uxth.w	r8, r8
 8009390:	1419      	asrs	r1, r3, #16
 8009392:	454e      	cmp	r6, r9
 8009394:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009398:	f84a 3b04 	str.w	r3, [sl], #4
 800939c:	d8e8      	bhi.n	8009370 <__mdiff+0x80>
 800939e:	1b33      	subs	r3, r6, r4
 80093a0:	3b15      	subs	r3, #21
 80093a2:	f023 0303 	bic.w	r3, r3, #3
 80093a6:	3304      	adds	r3, #4
 80093a8:	3415      	adds	r4, #21
 80093aa:	42a6      	cmp	r6, r4
 80093ac:	bf38      	it	cc
 80093ae:	2304      	movcc	r3, #4
 80093b0:	441d      	add	r5, r3
 80093b2:	4473      	add	r3, lr
 80093b4:	469e      	mov	lr, r3
 80093b6:	462e      	mov	r6, r5
 80093b8:	4566      	cmp	r6, ip
 80093ba:	d30e      	bcc.n	80093da <__mdiff+0xea>
 80093bc:	f10c 0203 	add.w	r2, ip, #3
 80093c0:	1b52      	subs	r2, r2, r5
 80093c2:	f022 0203 	bic.w	r2, r2, #3
 80093c6:	3d03      	subs	r5, #3
 80093c8:	45ac      	cmp	ip, r5
 80093ca:	bf38      	it	cc
 80093cc:	2200      	movcc	r2, #0
 80093ce:	4413      	add	r3, r2
 80093d0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80093d4:	b17a      	cbz	r2, 80093f6 <__mdiff+0x106>
 80093d6:	6107      	str	r7, [r0, #16]
 80093d8:	e7a4      	b.n	8009324 <__mdiff+0x34>
 80093da:	f856 8b04 	ldr.w	r8, [r6], #4
 80093de:	fa11 f288 	uxtah	r2, r1, r8
 80093e2:	1414      	asrs	r4, r2, #16
 80093e4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80093e8:	b292      	uxth	r2, r2
 80093ea:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80093ee:	f84e 2b04 	str.w	r2, [lr], #4
 80093f2:	1421      	asrs	r1, r4, #16
 80093f4:	e7e0      	b.n	80093b8 <__mdiff+0xc8>
 80093f6:	3f01      	subs	r7, #1
 80093f8:	e7ea      	b.n	80093d0 <__mdiff+0xe0>
 80093fa:	bf00      	nop
 80093fc:	0800b891 	.word	0x0800b891
 8009400:	0800b8a2 	.word	0x0800b8a2

08009404 <__ulp>:
 8009404:	b082      	sub	sp, #8
 8009406:	ed8d 0b00 	vstr	d0, [sp]
 800940a:	9a01      	ldr	r2, [sp, #4]
 800940c:	4b0f      	ldr	r3, [pc, #60]	; (800944c <__ulp+0x48>)
 800940e:	4013      	ands	r3, r2
 8009410:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8009414:	2b00      	cmp	r3, #0
 8009416:	dc08      	bgt.n	800942a <__ulp+0x26>
 8009418:	425b      	negs	r3, r3
 800941a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800941e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009422:	da04      	bge.n	800942e <__ulp+0x2a>
 8009424:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009428:	4113      	asrs	r3, r2
 800942a:	2200      	movs	r2, #0
 800942c:	e008      	b.n	8009440 <__ulp+0x3c>
 800942e:	f1a2 0314 	sub.w	r3, r2, #20
 8009432:	2b1e      	cmp	r3, #30
 8009434:	bfda      	itte	le
 8009436:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800943a:	40da      	lsrle	r2, r3
 800943c:	2201      	movgt	r2, #1
 800943e:	2300      	movs	r3, #0
 8009440:	4619      	mov	r1, r3
 8009442:	4610      	mov	r0, r2
 8009444:	ec41 0b10 	vmov	d0, r0, r1
 8009448:	b002      	add	sp, #8
 800944a:	4770      	bx	lr
 800944c:	7ff00000 	.word	0x7ff00000

08009450 <__b2d>:
 8009450:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009454:	6906      	ldr	r6, [r0, #16]
 8009456:	f100 0814 	add.w	r8, r0, #20
 800945a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800945e:	1f37      	subs	r7, r6, #4
 8009460:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009464:	4610      	mov	r0, r2
 8009466:	f7ff fd53 	bl	8008f10 <__hi0bits>
 800946a:	f1c0 0320 	rsb	r3, r0, #32
 800946e:	280a      	cmp	r0, #10
 8009470:	600b      	str	r3, [r1, #0]
 8009472:	491b      	ldr	r1, [pc, #108]	; (80094e0 <__b2d+0x90>)
 8009474:	dc15      	bgt.n	80094a2 <__b2d+0x52>
 8009476:	f1c0 0c0b 	rsb	ip, r0, #11
 800947a:	fa22 f30c 	lsr.w	r3, r2, ip
 800947e:	45b8      	cmp	r8, r7
 8009480:	ea43 0501 	orr.w	r5, r3, r1
 8009484:	bf34      	ite	cc
 8009486:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800948a:	2300      	movcs	r3, #0
 800948c:	3015      	adds	r0, #21
 800948e:	fa02 f000 	lsl.w	r0, r2, r0
 8009492:	fa23 f30c 	lsr.w	r3, r3, ip
 8009496:	4303      	orrs	r3, r0
 8009498:	461c      	mov	r4, r3
 800949a:	ec45 4b10 	vmov	d0, r4, r5
 800949e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094a2:	45b8      	cmp	r8, r7
 80094a4:	bf3a      	itte	cc
 80094a6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80094aa:	f1a6 0708 	subcc.w	r7, r6, #8
 80094ae:	2300      	movcs	r3, #0
 80094b0:	380b      	subs	r0, #11
 80094b2:	d012      	beq.n	80094da <__b2d+0x8a>
 80094b4:	f1c0 0120 	rsb	r1, r0, #32
 80094b8:	fa23 f401 	lsr.w	r4, r3, r1
 80094bc:	4082      	lsls	r2, r0
 80094be:	4322      	orrs	r2, r4
 80094c0:	4547      	cmp	r7, r8
 80094c2:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 80094c6:	bf8c      	ite	hi
 80094c8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80094cc:	2200      	movls	r2, #0
 80094ce:	4083      	lsls	r3, r0
 80094d0:	40ca      	lsrs	r2, r1
 80094d2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80094d6:	4313      	orrs	r3, r2
 80094d8:	e7de      	b.n	8009498 <__b2d+0x48>
 80094da:	ea42 0501 	orr.w	r5, r2, r1
 80094de:	e7db      	b.n	8009498 <__b2d+0x48>
 80094e0:	3ff00000 	.word	0x3ff00000

080094e4 <__d2b>:
 80094e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80094e8:	460f      	mov	r7, r1
 80094ea:	2101      	movs	r1, #1
 80094ec:	ec59 8b10 	vmov	r8, r9, d0
 80094f0:	4616      	mov	r6, r2
 80094f2:	f7ff fc1b 	bl	8008d2c <_Balloc>
 80094f6:	4604      	mov	r4, r0
 80094f8:	b930      	cbnz	r0, 8009508 <__d2b+0x24>
 80094fa:	4602      	mov	r2, r0
 80094fc:	4b24      	ldr	r3, [pc, #144]	; (8009590 <__d2b+0xac>)
 80094fe:	4825      	ldr	r0, [pc, #148]	; (8009594 <__d2b+0xb0>)
 8009500:	f240 310f 	movw	r1, #783	; 0x30f
 8009504:	f001 f9a0 	bl	800a848 <__assert_func>
 8009508:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800950c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009510:	bb2d      	cbnz	r5, 800955e <__d2b+0x7a>
 8009512:	9301      	str	r3, [sp, #4]
 8009514:	f1b8 0300 	subs.w	r3, r8, #0
 8009518:	d026      	beq.n	8009568 <__d2b+0x84>
 800951a:	4668      	mov	r0, sp
 800951c:	9300      	str	r3, [sp, #0]
 800951e:	f7ff fd17 	bl	8008f50 <__lo0bits>
 8009522:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009526:	b1e8      	cbz	r0, 8009564 <__d2b+0x80>
 8009528:	f1c0 0320 	rsb	r3, r0, #32
 800952c:	fa02 f303 	lsl.w	r3, r2, r3
 8009530:	430b      	orrs	r3, r1
 8009532:	40c2      	lsrs	r2, r0
 8009534:	6163      	str	r3, [r4, #20]
 8009536:	9201      	str	r2, [sp, #4]
 8009538:	9b01      	ldr	r3, [sp, #4]
 800953a:	61a3      	str	r3, [r4, #24]
 800953c:	2b00      	cmp	r3, #0
 800953e:	bf14      	ite	ne
 8009540:	2202      	movne	r2, #2
 8009542:	2201      	moveq	r2, #1
 8009544:	6122      	str	r2, [r4, #16]
 8009546:	b1bd      	cbz	r5, 8009578 <__d2b+0x94>
 8009548:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800954c:	4405      	add	r5, r0
 800954e:	603d      	str	r5, [r7, #0]
 8009550:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009554:	6030      	str	r0, [r6, #0]
 8009556:	4620      	mov	r0, r4
 8009558:	b003      	add	sp, #12
 800955a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800955e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009562:	e7d6      	b.n	8009512 <__d2b+0x2e>
 8009564:	6161      	str	r1, [r4, #20]
 8009566:	e7e7      	b.n	8009538 <__d2b+0x54>
 8009568:	a801      	add	r0, sp, #4
 800956a:	f7ff fcf1 	bl	8008f50 <__lo0bits>
 800956e:	9b01      	ldr	r3, [sp, #4]
 8009570:	6163      	str	r3, [r4, #20]
 8009572:	3020      	adds	r0, #32
 8009574:	2201      	movs	r2, #1
 8009576:	e7e5      	b.n	8009544 <__d2b+0x60>
 8009578:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800957c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009580:	6038      	str	r0, [r7, #0]
 8009582:	6918      	ldr	r0, [r3, #16]
 8009584:	f7ff fcc4 	bl	8008f10 <__hi0bits>
 8009588:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800958c:	e7e2      	b.n	8009554 <__d2b+0x70>
 800958e:	bf00      	nop
 8009590:	0800b891 	.word	0x0800b891
 8009594:	0800b8a2 	.word	0x0800b8a2

08009598 <__ratio>:
 8009598:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800959c:	4688      	mov	r8, r1
 800959e:	4669      	mov	r1, sp
 80095a0:	4681      	mov	r9, r0
 80095a2:	f7ff ff55 	bl	8009450 <__b2d>
 80095a6:	a901      	add	r1, sp, #4
 80095a8:	4640      	mov	r0, r8
 80095aa:	ec55 4b10 	vmov	r4, r5, d0
 80095ae:	f7ff ff4f 	bl	8009450 <__b2d>
 80095b2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80095b6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80095ba:	eba3 0c02 	sub.w	ip, r3, r2
 80095be:	e9dd 3200 	ldrd	r3, r2, [sp]
 80095c2:	1a9b      	subs	r3, r3, r2
 80095c4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80095c8:	ec51 0b10 	vmov	r0, r1, d0
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	bfd6      	itet	le
 80095d0:	460a      	movle	r2, r1
 80095d2:	462a      	movgt	r2, r5
 80095d4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80095d8:	468b      	mov	fp, r1
 80095da:	462f      	mov	r7, r5
 80095dc:	bfd4      	ite	le
 80095de:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80095e2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80095e6:	4620      	mov	r0, r4
 80095e8:	ee10 2a10 	vmov	r2, s0
 80095ec:	465b      	mov	r3, fp
 80095ee:	4639      	mov	r1, r7
 80095f0:	f7f7 f92c 	bl	800084c <__aeabi_ddiv>
 80095f4:	ec41 0b10 	vmov	d0, r0, r1
 80095f8:	b003      	add	sp, #12
 80095fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080095fe <__copybits>:
 80095fe:	3901      	subs	r1, #1
 8009600:	b570      	push	{r4, r5, r6, lr}
 8009602:	1149      	asrs	r1, r1, #5
 8009604:	6914      	ldr	r4, [r2, #16]
 8009606:	3101      	adds	r1, #1
 8009608:	f102 0314 	add.w	r3, r2, #20
 800960c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009610:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009614:	1f05      	subs	r5, r0, #4
 8009616:	42a3      	cmp	r3, r4
 8009618:	d30c      	bcc.n	8009634 <__copybits+0x36>
 800961a:	1aa3      	subs	r3, r4, r2
 800961c:	3b11      	subs	r3, #17
 800961e:	f023 0303 	bic.w	r3, r3, #3
 8009622:	3211      	adds	r2, #17
 8009624:	42a2      	cmp	r2, r4
 8009626:	bf88      	it	hi
 8009628:	2300      	movhi	r3, #0
 800962a:	4418      	add	r0, r3
 800962c:	2300      	movs	r3, #0
 800962e:	4288      	cmp	r0, r1
 8009630:	d305      	bcc.n	800963e <__copybits+0x40>
 8009632:	bd70      	pop	{r4, r5, r6, pc}
 8009634:	f853 6b04 	ldr.w	r6, [r3], #4
 8009638:	f845 6f04 	str.w	r6, [r5, #4]!
 800963c:	e7eb      	b.n	8009616 <__copybits+0x18>
 800963e:	f840 3b04 	str.w	r3, [r0], #4
 8009642:	e7f4      	b.n	800962e <__copybits+0x30>

08009644 <__any_on>:
 8009644:	f100 0214 	add.w	r2, r0, #20
 8009648:	6900      	ldr	r0, [r0, #16]
 800964a:	114b      	asrs	r3, r1, #5
 800964c:	4298      	cmp	r0, r3
 800964e:	b510      	push	{r4, lr}
 8009650:	db11      	blt.n	8009676 <__any_on+0x32>
 8009652:	dd0a      	ble.n	800966a <__any_on+0x26>
 8009654:	f011 011f 	ands.w	r1, r1, #31
 8009658:	d007      	beq.n	800966a <__any_on+0x26>
 800965a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800965e:	fa24 f001 	lsr.w	r0, r4, r1
 8009662:	fa00 f101 	lsl.w	r1, r0, r1
 8009666:	428c      	cmp	r4, r1
 8009668:	d10b      	bne.n	8009682 <__any_on+0x3e>
 800966a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800966e:	4293      	cmp	r3, r2
 8009670:	d803      	bhi.n	800967a <__any_on+0x36>
 8009672:	2000      	movs	r0, #0
 8009674:	bd10      	pop	{r4, pc}
 8009676:	4603      	mov	r3, r0
 8009678:	e7f7      	b.n	800966a <__any_on+0x26>
 800967a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800967e:	2900      	cmp	r1, #0
 8009680:	d0f5      	beq.n	800966e <__any_on+0x2a>
 8009682:	2001      	movs	r0, #1
 8009684:	e7f6      	b.n	8009674 <__any_on+0x30>

08009686 <sulp>:
 8009686:	b570      	push	{r4, r5, r6, lr}
 8009688:	4604      	mov	r4, r0
 800968a:	460d      	mov	r5, r1
 800968c:	ec45 4b10 	vmov	d0, r4, r5
 8009690:	4616      	mov	r6, r2
 8009692:	f7ff feb7 	bl	8009404 <__ulp>
 8009696:	ec51 0b10 	vmov	r0, r1, d0
 800969a:	b17e      	cbz	r6, 80096bc <sulp+0x36>
 800969c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80096a0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	dd09      	ble.n	80096bc <sulp+0x36>
 80096a8:	051b      	lsls	r3, r3, #20
 80096aa:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80096ae:	2400      	movs	r4, #0
 80096b0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80096b4:	4622      	mov	r2, r4
 80096b6:	462b      	mov	r3, r5
 80096b8:	f7f6 ff9e 	bl	80005f8 <__aeabi_dmul>
 80096bc:	bd70      	pop	{r4, r5, r6, pc}
	...

080096c0 <_strtod_l>:
 80096c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096c4:	ed2d 8b02 	vpush	{d8}
 80096c8:	b09b      	sub	sp, #108	; 0x6c
 80096ca:	4604      	mov	r4, r0
 80096cc:	9213      	str	r2, [sp, #76]	; 0x4c
 80096ce:	2200      	movs	r2, #0
 80096d0:	9216      	str	r2, [sp, #88]	; 0x58
 80096d2:	460d      	mov	r5, r1
 80096d4:	f04f 0800 	mov.w	r8, #0
 80096d8:	f04f 0900 	mov.w	r9, #0
 80096dc:	460a      	mov	r2, r1
 80096de:	9215      	str	r2, [sp, #84]	; 0x54
 80096e0:	7811      	ldrb	r1, [r2, #0]
 80096e2:	292b      	cmp	r1, #43	; 0x2b
 80096e4:	d04c      	beq.n	8009780 <_strtod_l+0xc0>
 80096e6:	d83a      	bhi.n	800975e <_strtod_l+0x9e>
 80096e8:	290d      	cmp	r1, #13
 80096ea:	d834      	bhi.n	8009756 <_strtod_l+0x96>
 80096ec:	2908      	cmp	r1, #8
 80096ee:	d834      	bhi.n	800975a <_strtod_l+0x9a>
 80096f0:	2900      	cmp	r1, #0
 80096f2:	d03d      	beq.n	8009770 <_strtod_l+0xb0>
 80096f4:	2200      	movs	r2, #0
 80096f6:	920a      	str	r2, [sp, #40]	; 0x28
 80096f8:	9e15      	ldr	r6, [sp, #84]	; 0x54
 80096fa:	7832      	ldrb	r2, [r6, #0]
 80096fc:	2a30      	cmp	r2, #48	; 0x30
 80096fe:	f040 80b4 	bne.w	800986a <_strtod_l+0x1aa>
 8009702:	7872      	ldrb	r2, [r6, #1]
 8009704:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8009708:	2a58      	cmp	r2, #88	; 0x58
 800970a:	d170      	bne.n	80097ee <_strtod_l+0x12e>
 800970c:	9302      	str	r3, [sp, #8]
 800970e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009710:	9301      	str	r3, [sp, #4]
 8009712:	ab16      	add	r3, sp, #88	; 0x58
 8009714:	9300      	str	r3, [sp, #0]
 8009716:	4a8e      	ldr	r2, [pc, #568]	; (8009950 <_strtod_l+0x290>)
 8009718:	ab17      	add	r3, sp, #92	; 0x5c
 800971a:	a915      	add	r1, sp, #84	; 0x54
 800971c:	4620      	mov	r0, r4
 800971e:	f001 f919 	bl	800a954 <__gethex>
 8009722:	f010 070f 	ands.w	r7, r0, #15
 8009726:	4605      	mov	r5, r0
 8009728:	d005      	beq.n	8009736 <_strtod_l+0x76>
 800972a:	2f06      	cmp	r7, #6
 800972c:	d12a      	bne.n	8009784 <_strtod_l+0xc4>
 800972e:	3601      	adds	r6, #1
 8009730:	2300      	movs	r3, #0
 8009732:	9615      	str	r6, [sp, #84]	; 0x54
 8009734:	930a      	str	r3, [sp, #40]	; 0x28
 8009736:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009738:	2b00      	cmp	r3, #0
 800973a:	f040 857f 	bne.w	800a23c <_strtod_l+0xb7c>
 800973e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009740:	b1db      	cbz	r3, 800977a <_strtod_l+0xba>
 8009742:	4642      	mov	r2, r8
 8009744:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009748:	ec43 2b10 	vmov	d0, r2, r3
 800974c:	b01b      	add	sp, #108	; 0x6c
 800974e:	ecbd 8b02 	vpop	{d8}
 8009752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009756:	2920      	cmp	r1, #32
 8009758:	d1cc      	bne.n	80096f4 <_strtod_l+0x34>
 800975a:	3201      	adds	r2, #1
 800975c:	e7bf      	b.n	80096de <_strtod_l+0x1e>
 800975e:	292d      	cmp	r1, #45	; 0x2d
 8009760:	d1c8      	bne.n	80096f4 <_strtod_l+0x34>
 8009762:	2101      	movs	r1, #1
 8009764:	910a      	str	r1, [sp, #40]	; 0x28
 8009766:	1c51      	adds	r1, r2, #1
 8009768:	9115      	str	r1, [sp, #84]	; 0x54
 800976a:	7852      	ldrb	r2, [r2, #1]
 800976c:	2a00      	cmp	r2, #0
 800976e:	d1c3      	bne.n	80096f8 <_strtod_l+0x38>
 8009770:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009772:	9515      	str	r5, [sp, #84]	; 0x54
 8009774:	2b00      	cmp	r3, #0
 8009776:	f040 855f 	bne.w	800a238 <_strtod_l+0xb78>
 800977a:	4642      	mov	r2, r8
 800977c:	464b      	mov	r3, r9
 800977e:	e7e3      	b.n	8009748 <_strtod_l+0x88>
 8009780:	2100      	movs	r1, #0
 8009782:	e7ef      	b.n	8009764 <_strtod_l+0xa4>
 8009784:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009786:	b13a      	cbz	r2, 8009798 <_strtod_l+0xd8>
 8009788:	2135      	movs	r1, #53	; 0x35
 800978a:	a818      	add	r0, sp, #96	; 0x60
 800978c:	f7ff ff37 	bl	80095fe <__copybits>
 8009790:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009792:	4620      	mov	r0, r4
 8009794:	f7ff fb0a 	bl	8008dac <_Bfree>
 8009798:	3f01      	subs	r7, #1
 800979a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800979c:	2f04      	cmp	r7, #4
 800979e:	d806      	bhi.n	80097ae <_strtod_l+0xee>
 80097a0:	e8df f007 	tbb	[pc, r7]
 80097a4:	201d0314 	.word	0x201d0314
 80097a8:	14          	.byte	0x14
 80097a9:	00          	.byte	0x00
 80097aa:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 80097ae:	05e9      	lsls	r1, r5, #23
 80097b0:	bf48      	it	mi
 80097b2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 80097b6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80097ba:	0d1b      	lsrs	r3, r3, #20
 80097bc:	051b      	lsls	r3, r3, #20
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d1b9      	bne.n	8009736 <_strtod_l+0x76>
 80097c2:	f7fe fbb1 	bl	8007f28 <__errno>
 80097c6:	2322      	movs	r3, #34	; 0x22
 80097c8:	6003      	str	r3, [r0, #0]
 80097ca:	e7b4      	b.n	8009736 <_strtod_l+0x76>
 80097cc:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 80097d0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80097d4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80097d8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80097dc:	e7e7      	b.n	80097ae <_strtod_l+0xee>
 80097de:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8009958 <_strtod_l+0x298>
 80097e2:	e7e4      	b.n	80097ae <_strtod_l+0xee>
 80097e4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80097e8:	f04f 38ff 	mov.w	r8, #4294967295
 80097ec:	e7df      	b.n	80097ae <_strtod_l+0xee>
 80097ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80097f0:	1c5a      	adds	r2, r3, #1
 80097f2:	9215      	str	r2, [sp, #84]	; 0x54
 80097f4:	785b      	ldrb	r3, [r3, #1]
 80097f6:	2b30      	cmp	r3, #48	; 0x30
 80097f8:	d0f9      	beq.n	80097ee <_strtod_l+0x12e>
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d09b      	beq.n	8009736 <_strtod_l+0x76>
 80097fe:	2301      	movs	r3, #1
 8009800:	f04f 0a00 	mov.w	sl, #0
 8009804:	9304      	str	r3, [sp, #16]
 8009806:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009808:	930b      	str	r3, [sp, #44]	; 0x2c
 800980a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800980e:	46d3      	mov	fp, sl
 8009810:	220a      	movs	r2, #10
 8009812:	9815      	ldr	r0, [sp, #84]	; 0x54
 8009814:	7806      	ldrb	r6, [r0, #0]
 8009816:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800981a:	b2d9      	uxtb	r1, r3
 800981c:	2909      	cmp	r1, #9
 800981e:	d926      	bls.n	800986e <_strtod_l+0x1ae>
 8009820:	494c      	ldr	r1, [pc, #304]	; (8009954 <_strtod_l+0x294>)
 8009822:	2201      	movs	r2, #1
 8009824:	f000 ffe6 	bl	800a7f4 <strncmp>
 8009828:	2800      	cmp	r0, #0
 800982a:	d030      	beq.n	800988e <_strtod_l+0x1ce>
 800982c:	2000      	movs	r0, #0
 800982e:	4632      	mov	r2, r6
 8009830:	9005      	str	r0, [sp, #20]
 8009832:	465e      	mov	r6, fp
 8009834:	4603      	mov	r3, r0
 8009836:	2a65      	cmp	r2, #101	; 0x65
 8009838:	d001      	beq.n	800983e <_strtod_l+0x17e>
 800983a:	2a45      	cmp	r2, #69	; 0x45
 800983c:	d113      	bne.n	8009866 <_strtod_l+0x1a6>
 800983e:	b91e      	cbnz	r6, 8009848 <_strtod_l+0x188>
 8009840:	9a04      	ldr	r2, [sp, #16]
 8009842:	4302      	orrs	r2, r0
 8009844:	d094      	beq.n	8009770 <_strtod_l+0xb0>
 8009846:	2600      	movs	r6, #0
 8009848:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800984a:	1c6a      	adds	r2, r5, #1
 800984c:	9215      	str	r2, [sp, #84]	; 0x54
 800984e:	786a      	ldrb	r2, [r5, #1]
 8009850:	2a2b      	cmp	r2, #43	; 0x2b
 8009852:	d074      	beq.n	800993e <_strtod_l+0x27e>
 8009854:	2a2d      	cmp	r2, #45	; 0x2d
 8009856:	d078      	beq.n	800994a <_strtod_l+0x28a>
 8009858:	f04f 0c00 	mov.w	ip, #0
 800985c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8009860:	2909      	cmp	r1, #9
 8009862:	d97f      	bls.n	8009964 <_strtod_l+0x2a4>
 8009864:	9515      	str	r5, [sp, #84]	; 0x54
 8009866:	2700      	movs	r7, #0
 8009868:	e09e      	b.n	80099a8 <_strtod_l+0x2e8>
 800986a:	2300      	movs	r3, #0
 800986c:	e7c8      	b.n	8009800 <_strtod_l+0x140>
 800986e:	f1bb 0f08 	cmp.w	fp, #8
 8009872:	bfd8      	it	le
 8009874:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8009876:	f100 0001 	add.w	r0, r0, #1
 800987a:	bfda      	itte	le
 800987c:	fb02 3301 	mlale	r3, r2, r1, r3
 8009880:	9309      	strle	r3, [sp, #36]	; 0x24
 8009882:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8009886:	f10b 0b01 	add.w	fp, fp, #1
 800988a:	9015      	str	r0, [sp, #84]	; 0x54
 800988c:	e7c1      	b.n	8009812 <_strtod_l+0x152>
 800988e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009890:	1c5a      	adds	r2, r3, #1
 8009892:	9215      	str	r2, [sp, #84]	; 0x54
 8009894:	785a      	ldrb	r2, [r3, #1]
 8009896:	f1bb 0f00 	cmp.w	fp, #0
 800989a:	d037      	beq.n	800990c <_strtod_l+0x24c>
 800989c:	9005      	str	r0, [sp, #20]
 800989e:	465e      	mov	r6, fp
 80098a0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80098a4:	2b09      	cmp	r3, #9
 80098a6:	d912      	bls.n	80098ce <_strtod_l+0x20e>
 80098a8:	2301      	movs	r3, #1
 80098aa:	e7c4      	b.n	8009836 <_strtod_l+0x176>
 80098ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80098ae:	1c5a      	adds	r2, r3, #1
 80098b0:	9215      	str	r2, [sp, #84]	; 0x54
 80098b2:	785a      	ldrb	r2, [r3, #1]
 80098b4:	3001      	adds	r0, #1
 80098b6:	2a30      	cmp	r2, #48	; 0x30
 80098b8:	d0f8      	beq.n	80098ac <_strtod_l+0x1ec>
 80098ba:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80098be:	2b08      	cmp	r3, #8
 80098c0:	f200 84c1 	bhi.w	800a246 <_strtod_l+0xb86>
 80098c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80098c6:	9005      	str	r0, [sp, #20]
 80098c8:	2000      	movs	r0, #0
 80098ca:	930b      	str	r3, [sp, #44]	; 0x2c
 80098cc:	4606      	mov	r6, r0
 80098ce:	3a30      	subs	r2, #48	; 0x30
 80098d0:	f100 0301 	add.w	r3, r0, #1
 80098d4:	d014      	beq.n	8009900 <_strtod_l+0x240>
 80098d6:	9905      	ldr	r1, [sp, #20]
 80098d8:	4419      	add	r1, r3
 80098da:	9105      	str	r1, [sp, #20]
 80098dc:	4633      	mov	r3, r6
 80098de:	eb00 0c06 	add.w	ip, r0, r6
 80098e2:	210a      	movs	r1, #10
 80098e4:	4563      	cmp	r3, ip
 80098e6:	d113      	bne.n	8009910 <_strtod_l+0x250>
 80098e8:	1833      	adds	r3, r6, r0
 80098ea:	2b08      	cmp	r3, #8
 80098ec:	f106 0601 	add.w	r6, r6, #1
 80098f0:	4406      	add	r6, r0
 80098f2:	dc1a      	bgt.n	800992a <_strtod_l+0x26a>
 80098f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80098f6:	230a      	movs	r3, #10
 80098f8:	fb03 2301 	mla	r3, r3, r1, r2
 80098fc:	9309      	str	r3, [sp, #36]	; 0x24
 80098fe:	2300      	movs	r3, #0
 8009900:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009902:	1c51      	adds	r1, r2, #1
 8009904:	9115      	str	r1, [sp, #84]	; 0x54
 8009906:	7852      	ldrb	r2, [r2, #1]
 8009908:	4618      	mov	r0, r3
 800990a:	e7c9      	b.n	80098a0 <_strtod_l+0x1e0>
 800990c:	4658      	mov	r0, fp
 800990e:	e7d2      	b.n	80098b6 <_strtod_l+0x1f6>
 8009910:	2b08      	cmp	r3, #8
 8009912:	f103 0301 	add.w	r3, r3, #1
 8009916:	dc03      	bgt.n	8009920 <_strtod_l+0x260>
 8009918:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800991a:	434f      	muls	r7, r1
 800991c:	9709      	str	r7, [sp, #36]	; 0x24
 800991e:	e7e1      	b.n	80098e4 <_strtod_l+0x224>
 8009920:	2b10      	cmp	r3, #16
 8009922:	bfd8      	it	le
 8009924:	fb01 fa0a 	mulle.w	sl, r1, sl
 8009928:	e7dc      	b.n	80098e4 <_strtod_l+0x224>
 800992a:	2e10      	cmp	r6, #16
 800992c:	bfdc      	itt	le
 800992e:	230a      	movle	r3, #10
 8009930:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8009934:	e7e3      	b.n	80098fe <_strtod_l+0x23e>
 8009936:	2300      	movs	r3, #0
 8009938:	9305      	str	r3, [sp, #20]
 800993a:	2301      	movs	r3, #1
 800993c:	e780      	b.n	8009840 <_strtod_l+0x180>
 800993e:	f04f 0c00 	mov.w	ip, #0
 8009942:	1caa      	adds	r2, r5, #2
 8009944:	9215      	str	r2, [sp, #84]	; 0x54
 8009946:	78aa      	ldrb	r2, [r5, #2]
 8009948:	e788      	b.n	800985c <_strtod_l+0x19c>
 800994a:	f04f 0c01 	mov.w	ip, #1
 800994e:	e7f8      	b.n	8009942 <_strtod_l+0x282>
 8009950:	0800ba00 	.word	0x0800ba00
 8009954:	0800b9fc 	.word	0x0800b9fc
 8009958:	7ff00000 	.word	0x7ff00000
 800995c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800995e:	1c51      	adds	r1, r2, #1
 8009960:	9115      	str	r1, [sp, #84]	; 0x54
 8009962:	7852      	ldrb	r2, [r2, #1]
 8009964:	2a30      	cmp	r2, #48	; 0x30
 8009966:	d0f9      	beq.n	800995c <_strtod_l+0x29c>
 8009968:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800996c:	2908      	cmp	r1, #8
 800996e:	f63f af7a 	bhi.w	8009866 <_strtod_l+0x1a6>
 8009972:	3a30      	subs	r2, #48	; 0x30
 8009974:	9208      	str	r2, [sp, #32]
 8009976:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009978:	920c      	str	r2, [sp, #48]	; 0x30
 800997a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800997c:	1c57      	adds	r7, r2, #1
 800997e:	9715      	str	r7, [sp, #84]	; 0x54
 8009980:	7852      	ldrb	r2, [r2, #1]
 8009982:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8009986:	f1be 0f09 	cmp.w	lr, #9
 800998a:	d938      	bls.n	80099fe <_strtod_l+0x33e>
 800998c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800998e:	1a7f      	subs	r7, r7, r1
 8009990:	2f08      	cmp	r7, #8
 8009992:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8009996:	dc03      	bgt.n	80099a0 <_strtod_l+0x2e0>
 8009998:	9908      	ldr	r1, [sp, #32]
 800999a:	428f      	cmp	r7, r1
 800999c:	bfa8      	it	ge
 800999e:	460f      	movge	r7, r1
 80099a0:	f1bc 0f00 	cmp.w	ip, #0
 80099a4:	d000      	beq.n	80099a8 <_strtod_l+0x2e8>
 80099a6:	427f      	negs	r7, r7
 80099a8:	2e00      	cmp	r6, #0
 80099aa:	d14f      	bne.n	8009a4c <_strtod_l+0x38c>
 80099ac:	9904      	ldr	r1, [sp, #16]
 80099ae:	4301      	orrs	r1, r0
 80099b0:	f47f aec1 	bne.w	8009736 <_strtod_l+0x76>
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	f47f aedb 	bne.w	8009770 <_strtod_l+0xb0>
 80099ba:	2a69      	cmp	r2, #105	; 0x69
 80099bc:	d029      	beq.n	8009a12 <_strtod_l+0x352>
 80099be:	dc26      	bgt.n	8009a0e <_strtod_l+0x34e>
 80099c0:	2a49      	cmp	r2, #73	; 0x49
 80099c2:	d026      	beq.n	8009a12 <_strtod_l+0x352>
 80099c4:	2a4e      	cmp	r2, #78	; 0x4e
 80099c6:	f47f aed3 	bne.w	8009770 <_strtod_l+0xb0>
 80099ca:	499b      	ldr	r1, [pc, #620]	; (8009c38 <_strtod_l+0x578>)
 80099cc:	a815      	add	r0, sp, #84	; 0x54
 80099ce:	f001 fa01 	bl	800add4 <__match>
 80099d2:	2800      	cmp	r0, #0
 80099d4:	f43f aecc 	beq.w	8009770 <_strtod_l+0xb0>
 80099d8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80099da:	781b      	ldrb	r3, [r3, #0]
 80099dc:	2b28      	cmp	r3, #40	; 0x28
 80099de:	d12f      	bne.n	8009a40 <_strtod_l+0x380>
 80099e0:	4996      	ldr	r1, [pc, #600]	; (8009c3c <_strtod_l+0x57c>)
 80099e2:	aa18      	add	r2, sp, #96	; 0x60
 80099e4:	a815      	add	r0, sp, #84	; 0x54
 80099e6:	f001 fa09 	bl	800adfc <__hexnan>
 80099ea:	2805      	cmp	r0, #5
 80099ec:	d128      	bne.n	8009a40 <_strtod_l+0x380>
 80099ee:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80099f0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80099f4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80099f8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80099fc:	e69b      	b.n	8009736 <_strtod_l+0x76>
 80099fe:	9f08      	ldr	r7, [sp, #32]
 8009a00:	210a      	movs	r1, #10
 8009a02:	fb01 2107 	mla	r1, r1, r7, r2
 8009a06:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8009a0a:	9208      	str	r2, [sp, #32]
 8009a0c:	e7b5      	b.n	800997a <_strtod_l+0x2ba>
 8009a0e:	2a6e      	cmp	r2, #110	; 0x6e
 8009a10:	e7d9      	b.n	80099c6 <_strtod_l+0x306>
 8009a12:	498b      	ldr	r1, [pc, #556]	; (8009c40 <_strtod_l+0x580>)
 8009a14:	a815      	add	r0, sp, #84	; 0x54
 8009a16:	f001 f9dd 	bl	800add4 <__match>
 8009a1a:	2800      	cmp	r0, #0
 8009a1c:	f43f aea8 	beq.w	8009770 <_strtod_l+0xb0>
 8009a20:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009a22:	4988      	ldr	r1, [pc, #544]	; (8009c44 <_strtod_l+0x584>)
 8009a24:	3b01      	subs	r3, #1
 8009a26:	a815      	add	r0, sp, #84	; 0x54
 8009a28:	9315      	str	r3, [sp, #84]	; 0x54
 8009a2a:	f001 f9d3 	bl	800add4 <__match>
 8009a2e:	b910      	cbnz	r0, 8009a36 <_strtod_l+0x376>
 8009a30:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009a32:	3301      	adds	r3, #1
 8009a34:	9315      	str	r3, [sp, #84]	; 0x54
 8009a36:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8009c54 <_strtod_l+0x594>
 8009a3a:	f04f 0800 	mov.w	r8, #0
 8009a3e:	e67a      	b.n	8009736 <_strtod_l+0x76>
 8009a40:	4881      	ldr	r0, [pc, #516]	; (8009c48 <_strtod_l+0x588>)
 8009a42:	f000 fef9 	bl	800a838 <nan>
 8009a46:	ec59 8b10 	vmov	r8, r9, d0
 8009a4a:	e674      	b.n	8009736 <_strtod_l+0x76>
 8009a4c:	9b05      	ldr	r3, [sp, #20]
 8009a4e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009a50:	1afb      	subs	r3, r7, r3
 8009a52:	f1bb 0f00 	cmp.w	fp, #0
 8009a56:	bf08      	it	eq
 8009a58:	46b3      	moveq	fp, r6
 8009a5a:	2e10      	cmp	r6, #16
 8009a5c:	9308      	str	r3, [sp, #32]
 8009a5e:	4635      	mov	r5, r6
 8009a60:	bfa8      	it	ge
 8009a62:	2510      	movge	r5, #16
 8009a64:	f7f6 fd4e 	bl	8000504 <__aeabi_ui2d>
 8009a68:	2e09      	cmp	r6, #9
 8009a6a:	4680      	mov	r8, r0
 8009a6c:	4689      	mov	r9, r1
 8009a6e:	dd13      	ble.n	8009a98 <_strtod_l+0x3d8>
 8009a70:	4b76      	ldr	r3, [pc, #472]	; (8009c4c <_strtod_l+0x58c>)
 8009a72:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8009a76:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009a7a:	f7f6 fdbd 	bl	80005f8 <__aeabi_dmul>
 8009a7e:	4680      	mov	r8, r0
 8009a80:	4650      	mov	r0, sl
 8009a82:	4689      	mov	r9, r1
 8009a84:	f7f6 fd3e 	bl	8000504 <__aeabi_ui2d>
 8009a88:	4602      	mov	r2, r0
 8009a8a:	460b      	mov	r3, r1
 8009a8c:	4640      	mov	r0, r8
 8009a8e:	4649      	mov	r1, r9
 8009a90:	f7f6 fbfc 	bl	800028c <__adddf3>
 8009a94:	4680      	mov	r8, r0
 8009a96:	4689      	mov	r9, r1
 8009a98:	2e0f      	cmp	r6, #15
 8009a9a:	dc38      	bgt.n	8009b0e <_strtod_l+0x44e>
 8009a9c:	9b08      	ldr	r3, [sp, #32]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	f43f ae49 	beq.w	8009736 <_strtod_l+0x76>
 8009aa4:	dd24      	ble.n	8009af0 <_strtod_l+0x430>
 8009aa6:	2b16      	cmp	r3, #22
 8009aa8:	dc0b      	bgt.n	8009ac2 <_strtod_l+0x402>
 8009aaa:	4968      	ldr	r1, [pc, #416]	; (8009c4c <_strtod_l+0x58c>)
 8009aac:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009ab0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ab4:	4642      	mov	r2, r8
 8009ab6:	464b      	mov	r3, r9
 8009ab8:	f7f6 fd9e 	bl	80005f8 <__aeabi_dmul>
 8009abc:	4680      	mov	r8, r0
 8009abe:	4689      	mov	r9, r1
 8009ac0:	e639      	b.n	8009736 <_strtod_l+0x76>
 8009ac2:	9a08      	ldr	r2, [sp, #32]
 8009ac4:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8009ac8:	4293      	cmp	r3, r2
 8009aca:	db20      	blt.n	8009b0e <_strtod_l+0x44e>
 8009acc:	4c5f      	ldr	r4, [pc, #380]	; (8009c4c <_strtod_l+0x58c>)
 8009ace:	f1c6 060f 	rsb	r6, r6, #15
 8009ad2:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8009ad6:	4642      	mov	r2, r8
 8009ad8:	464b      	mov	r3, r9
 8009ada:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ade:	f7f6 fd8b 	bl	80005f8 <__aeabi_dmul>
 8009ae2:	9b08      	ldr	r3, [sp, #32]
 8009ae4:	1b9e      	subs	r6, r3, r6
 8009ae6:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8009aea:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009aee:	e7e3      	b.n	8009ab8 <_strtod_l+0x3f8>
 8009af0:	9b08      	ldr	r3, [sp, #32]
 8009af2:	3316      	adds	r3, #22
 8009af4:	db0b      	blt.n	8009b0e <_strtod_l+0x44e>
 8009af6:	9b05      	ldr	r3, [sp, #20]
 8009af8:	1bdf      	subs	r7, r3, r7
 8009afa:	4b54      	ldr	r3, [pc, #336]	; (8009c4c <_strtod_l+0x58c>)
 8009afc:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8009b00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009b04:	4640      	mov	r0, r8
 8009b06:	4649      	mov	r1, r9
 8009b08:	f7f6 fea0 	bl	800084c <__aeabi_ddiv>
 8009b0c:	e7d6      	b.n	8009abc <_strtod_l+0x3fc>
 8009b0e:	9b08      	ldr	r3, [sp, #32]
 8009b10:	1b75      	subs	r5, r6, r5
 8009b12:	441d      	add	r5, r3
 8009b14:	2d00      	cmp	r5, #0
 8009b16:	dd70      	ble.n	8009bfa <_strtod_l+0x53a>
 8009b18:	f015 030f 	ands.w	r3, r5, #15
 8009b1c:	d00a      	beq.n	8009b34 <_strtod_l+0x474>
 8009b1e:	494b      	ldr	r1, [pc, #300]	; (8009c4c <_strtod_l+0x58c>)
 8009b20:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009b24:	4642      	mov	r2, r8
 8009b26:	464b      	mov	r3, r9
 8009b28:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009b2c:	f7f6 fd64 	bl	80005f8 <__aeabi_dmul>
 8009b30:	4680      	mov	r8, r0
 8009b32:	4689      	mov	r9, r1
 8009b34:	f035 050f 	bics.w	r5, r5, #15
 8009b38:	d04d      	beq.n	8009bd6 <_strtod_l+0x516>
 8009b3a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8009b3e:	dd22      	ble.n	8009b86 <_strtod_l+0x4c6>
 8009b40:	2500      	movs	r5, #0
 8009b42:	46ab      	mov	fp, r5
 8009b44:	9509      	str	r5, [sp, #36]	; 0x24
 8009b46:	9505      	str	r5, [sp, #20]
 8009b48:	2322      	movs	r3, #34	; 0x22
 8009b4a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8009c54 <_strtod_l+0x594>
 8009b4e:	6023      	str	r3, [r4, #0]
 8009b50:	f04f 0800 	mov.w	r8, #0
 8009b54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	f43f aded 	beq.w	8009736 <_strtod_l+0x76>
 8009b5c:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009b5e:	4620      	mov	r0, r4
 8009b60:	f7ff f924 	bl	8008dac <_Bfree>
 8009b64:	9905      	ldr	r1, [sp, #20]
 8009b66:	4620      	mov	r0, r4
 8009b68:	f7ff f920 	bl	8008dac <_Bfree>
 8009b6c:	4659      	mov	r1, fp
 8009b6e:	4620      	mov	r0, r4
 8009b70:	f7ff f91c 	bl	8008dac <_Bfree>
 8009b74:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009b76:	4620      	mov	r0, r4
 8009b78:	f7ff f918 	bl	8008dac <_Bfree>
 8009b7c:	4629      	mov	r1, r5
 8009b7e:	4620      	mov	r0, r4
 8009b80:	f7ff f914 	bl	8008dac <_Bfree>
 8009b84:	e5d7      	b.n	8009736 <_strtod_l+0x76>
 8009b86:	4b32      	ldr	r3, [pc, #200]	; (8009c50 <_strtod_l+0x590>)
 8009b88:	9304      	str	r3, [sp, #16]
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	112d      	asrs	r5, r5, #4
 8009b8e:	4640      	mov	r0, r8
 8009b90:	4649      	mov	r1, r9
 8009b92:	469a      	mov	sl, r3
 8009b94:	2d01      	cmp	r5, #1
 8009b96:	dc21      	bgt.n	8009bdc <_strtod_l+0x51c>
 8009b98:	b10b      	cbz	r3, 8009b9e <_strtod_l+0x4de>
 8009b9a:	4680      	mov	r8, r0
 8009b9c:	4689      	mov	r9, r1
 8009b9e:	492c      	ldr	r1, [pc, #176]	; (8009c50 <_strtod_l+0x590>)
 8009ba0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8009ba4:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8009ba8:	4642      	mov	r2, r8
 8009baa:	464b      	mov	r3, r9
 8009bac:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009bb0:	f7f6 fd22 	bl	80005f8 <__aeabi_dmul>
 8009bb4:	4b27      	ldr	r3, [pc, #156]	; (8009c54 <_strtod_l+0x594>)
 8009bb6:	460a      	mov	r2, r1
 8009bb8:	400b      	ands	r3, r1
 8009bba:	4927      	ldr	r1, [pc, #156]	; (8009c58 <_strtod_l+0x598>)
 8009bbc:	428b      	cmp	r3, r1
 8009bbe:	4680      	mov	r8, r0
 8009bc0:	d8be      	bhi.n	8009b40 <_strtod_l+0x480>
 8009bc2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009bc6:	428b      	cmp	r3, r1
 8009bc8:	bf86      	itte	hi
 8009bca:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8009c5c <_strtod_l+0x59c>
 8009bce:	f04f 38ff 	movhi.w	r8, #4294967295
 8009bd2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	9304      	str	r3, [sp, #16]
 8009bda:	e07b      	b.n	8009cd4 <_strtod_l+0x614>
 8009bdc:	07ea      	lsls	r2, r5, #31
 8009bde:	d505      	bpl.n	8009bec <_strtod_l+0x52c>
 8009be0:	9b04      	ldr	r3, [sp, #16]
 8009be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009be6:	f7f6 fd07 	bl	80005f8 <__aeabi_dmul>
 8009bea:	2301      	movs	r3, #1
 8009bec:	9a04      	ldr	r2, [sp, #16]
 8009bee:	3208      	adds	r2, #8
 8009bf0:	f10a 0a01 	add.w	sl, sl, #1
 8009bf4:	106d      	asrs	r5, r5, #1
 8009bf6:	9204      	str	r2, [sp, #16]
 8009bf8:	e7cc      	b.n	8009b94 <_strtod_l+0x4d4>
 8009bfa:	d0ec      	beq.n	8009bd6 <_strtod_l+0x516>
 8009bfc:	426d      	negs	r5, r5
 8009bfe:	f015 020f 	ands.w	r2, r5, #15
 8009c02:	d00a      	beq.n	8009c1a <_strtod_l+0x55a>
 8009c04:	4b11      	ldr	r3, [pc, #68]	; (8009c4c <_strtod_l+0x58c>)
 8009c06:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009c0a:	4640      	mov	r0, r8
 8009c0c:	4649      	mov	r1, r9
 8009c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c12:	f7f6 fe1b 	bl	800084c <__aeabi_ddiv>
 8009c16:	4680      	mov	r8, r0
 8009c18:	4689      	mov	r9, r1
 8009c1a:	112d      	asrs	r5, r5, #4
 8009c1c:	d0db      	beq.n	8009bd6 <_strtod_l+0x516>
 8009c1e:	2d1f      	cmp	r5, #31
 8009c20:	dd1e      	ble.n	8009c60 <_strtod_l+0x5a0>
 8009c22:	2500      	movs	r5, #0
 8009c24:	46ab      	mov	fp, r5
 8009c26:	9509      	str	r5, [sp, #36]	; 0x24
 8009c28:	9505      	str	r5, [sp, #20]
 8009c2a:	2322      	movs	r3, #34	; 0x22
 8009c2c:	f04f 0800 	mov.w	r8, #0
 8009c30:	f04f 0900 	mov.w	r9, #0
 8009c34:	6023      	str	r3, [r4, #0]
 8009c36:	e78d      	b.n	8009b54 <_strtod_l+0x494>
 8009c38:	0800b7e9 	.word	0x0800b7e9
 8009c3c:	0800ba14 	.word	0x0800ba14
 8009c40:	0800b7e1 	.word	0x0800b7e1
 8009c44:	0800b818 	.word	0x0800b818
 8009c48:	0800bba5 	.word	0x0800bba5
 8009c4c:	0800b928 	.word	0x0800b928
 8009c50:	0800b900 	.word	0x0800b900
 8009c54:	7ff00000 	.word	0x7ff00000
 8009c58:	7ca00000 	.word	0x7ca00000
 8009c5c:	7fefffff 	.word	0x7fefffff
 8009c60:	f015 0310 	ands.w	r3, r5, #16
 8009c64:	bf18      	it	ne
 8009c66:	236a      	movne	r3, #106	; 0x6a
 8009c68:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800a00c <_strtod_l+0x94c>
 8009c6c:	9304      	str	r3, [sp, #16]
 8009c6e:	4640      	mov	r0, r8
 8009c70:	4649      	mov	r1, r9
 8009c72:	2300      	movs	r3, #0
 8009c74:	07ea      	lsls	r2, r5, #31
 8009c76:	d504      	bpl.n	8009c82 <_strtod_l+0x5c2>
 8009c78:	e9da 2300 	ldrd	r2, r3, [sl]
 8009c7c:	f7f6 fcbc 	bl	80005f8 <__aeabi_dmul>
 8009c80:	2301      	movs	r3, #1
 8009c82:	106d      	asrs	r5, r5, #1
 8009c84:	f10a 0a08 	add.w	sl, sl, #8
 8009c88:	d1f4      	bne.n	8009c74 <_strtod_l+0x5b4>
 8009c8a:	b10b      	cbz	r3, 8009c90 <_strtod_l+0x5d0>
 8009c8c:	4680      	mov	r8, r0
 8009c8e:	4689      	mov	r9, r1
 8009c90:	9b04      	ldr	r3, [sp, #16]
 8009c92:	b1bb      	cbz	r3, 8009cc4 <_strtod_l+0x604>
 8009c94:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8009c98:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	4649      	mov	r1, r9
 8009ca0:	dd10      	ble.n	8009cc4 <_strtod_l+0x604>
 8009ca2:	2b1f      	cmp	r3, #31
 8009ca4:	f340 811e 	ble.w	8009ee4 <_strtod_l+0x824>
 8009ca8:	2b34      	cmp	r3, #52	; 0x34
 8009caa:	bfde      	ittt	le
 8009cac:	f04f 33ff 	movle.w	r3, #4294967295
 8009cb0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8009cb4:	4093      	lslle	r3, r2
 8009cb6:	f04f 0800 	mov.w	r8, #0
 8009cba:	bfcc      	ite	gt
 8009cbc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8009cc0:	ea03 0901 	andle.w	r9, r3, r1
 8009cc4:	2200      	movs	r2, #0
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	4640      	mov	r0, r8
 8009cca:	4649      	mov	r1, r9
 8009ccc:	f7f6 fefc 	bl	8000ac8 <__aeabi_dcmpeq>
 8009cd0:	2800      	cmp	r0, #0
 8009cd2:	d1a6      	bne.n	8009c22 <_strtod_l+0x562>
 8009cd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cd6:	9300      	str	r3, [sp, #0]
 8009cd8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009cda:	4633      	mov	r3, r6
 8009cdc:	465a      	mov	r2, fp
 8009cde:	4620      	mov	r0, r4
 8009ce0:	f7ff f8cc 	bl	8008e7c <__s2b>
 8009ce4:	9009      	str	r0, [sp, #36]	; 0x24
 8009ce6:	2800      	cmp	r0, #0
 8009ce8:	f43f af2a 	beq.w	8009b40 <_strtod_l+0x480>
 8009cec:	9a08      	ldr	r2, [sp, #32]
 8009cee:	9b05      	ldr	r3, [sp, #20]
 8009cf0:	2a00      	cmp	r2, #0
 8009cf2:	eba3 0307 	sub.w	r3, r3, r7
 8009cf6:	bfa8      	it	ge
 8009cf8:	2300      	movge	r3, #0
 8009cfa:	930c      	str	r3, [sp, #48]	; 0x30
 8009cfc:	2500      	movs	r5, #0
 8009cfe:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009d02:	9312      	str	r3, [sp, #72]	; 0x48
 8009d04:	46ab      	mov	fp, r5
 8009d06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d08:	4620      	mov	r0, r4
 8009d0a:	6859      	ldr	r1, [r3, #4]
 8009d0c:	f7ff f80e 	bl	8008d2c <_Balloc>
 8009d10:	9005      	str	r0, [sp, #20]
 8009d12:	2800      	cmp	r0, #0
 8009d14:	f43f af18 	beq.w	8009b48 <_strtod_l+0x488>
 8009d18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d1a:	691a      	ldr	r2, [r3, #16]
 8009d1c:	3202      	adds	r2, #2
 8009d1e:	f103 010c 	add.w	r1, r3, #12
 8009d22:	0092      	lsls	r2, r2, #2
 8009d24:	300c      	adds	r0, #12
 8009d26:	f000 fd77 	bl	800a818 <memcpy>
 8009d2a:	ec49 8b10 	vmov	d0, r8, r9
 8009d2e:	aa18      	add	r2, sp, #96	; 0x60
 8009d30:	a917      	add	r1, sp, #92	; 0x5c
 8009d32:	4620      	mov	r0, r4
 8009d34:	f7ff fbd6 	bl	80094e4 <__d2b>
 8009d38:	ec49 8b18 	vmov	d8, r8, r9
 8009d3c:	9016      	str	r0, [sp, #88]	; 0x58
 8009d3e:	2800      	cmp	r0, #0
 8009d40:	f43f af02 	beq.w	8009b48 <_strtod_l+0x488>
 8009d44:	2101      	movs	r1, #1
 8009d46:	4620      	mov	r0, r4
 8009d48:	f7ff f930 	bl	8008fac <__i2b>
 8009d4c:	4683      	mov	fp, r0
 8009d4e:	2800      	cmp	r0, #0
 8009d50:	f43f aefa 	beq.w	8009b48 <_strtod_l+0x488>
 8009d54:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8009d56:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009d58:	2e00      	cmp	r6, #0
 8009d5a:	bfab      	itete	ge
 8009d5c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8009d5e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8009d60:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8009d62:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8009d66:	bfac      	ite	ge
 8009d68:	eb06 0a03 	addge.w	sl, r6, r3
 8009d6c:	1b9f      	sublt	r7, r3, r6
 8009d6e:	9b04      	ldr	r3, [sp, #16]
 8009d70:	1af6      	subs	r6, r6, r3
 8009d72:	4416      	add	r6, r2
 8009d74:	4ba0      	ldr	r3, [pc, #640]	; (8009ff8 <_strtod_l+0x938>)
 8009d76:	3e01      	subs	r6, #1
 8009d78:	429e      	cmp	r6, r3
 8009d7a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009d7e:	f280 80c4 	bge.w	8009f0a <_strtod_l+0x84a>
 8009d82:	1b9b      	subs	r3, r3, r6
 8009d84:	2b1f      	cmp	r3, #31
 8009d86:	eba2 0203 	sub.w	r2, r2, r3
 8009d8a:	f04f 0101 	mov.w	r1, #1
 8009d8e:	f300 80b0 	bgt.w	8009ef2 <_strtod_l+0x832>
 8009d92:	fa01 f303 	lsl.w	r3, r1, r3
 8009d96:	930e      	str	r3, [sp, #56]	; 0x38
 8009d98:	2300      	movs	r3, #0
 8009d9a:	930d      	str	r3, [sp, #52]	; 0x34
 8009d9c:	eb0a 0602 	add.w	r6, sl, r2
 8009da0:	9b04      	ldr	r3, [sp, #16]
 8009da2:	45b2      	cmp	sl, r6
 8009da4:	4417      	add	r7, r2
 8009da6:	441f      	add	r7, r3
 8009da8:	4653      	mov	r3, sl
 8009daa:	bfa8      	it	ge
 8009dac:	4633      	movge	r3, r6
 8009dae:	42bb      	cmp	r3, r7
 8009db0:	bfa8      	it	ge
 8009db2:	463b      	movge	r3, r7
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	bfc2      	ittt	gt
 8009db8:	1af6      	subgt	r6, r6, r3
 8009dba:	1aff      	subgt	r7, r7, r3
 8009dbc:	ebaa 0a03 	subgt.w	sl, sl, r3
 8009dc0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	dd17      	ble.n	8009df6 <_strtod_l+0x736>
 8009dc6:	4659      	mov	r1, fp
 8009dc8:	461a      	mov	r2, r3
 8009dca:	4620      	mov	r0, r4
 8009dcc:	f7ff f9ae 	bl	800912c <__pow5mult>
 8009dd0:	4683      	mov	fp, r0
 8009dd2:	2800      	cmp	r0, #0
 8009dd4:	f43f aeb8 	beq.w	8009b48 <_strtod_l+0x488>
 8009dd8:	4601      	mov	r1, r0
 8009dda:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009ddc:	4620      	mov	r0, r4
 8009dde:	f7ff f8fb 	bl	8008fd8 <__multiply>
 8009de2:	900b      	str	r0, [sp, #44]	; 0x2c
 8009de4:	2800      	cmp	r0, #0
 8009de6:	f43f aeaf 	beq.w	8009b48 <_strtod_l+0x488>
 8009dea:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009dec:	4620      	mov	r0, r4
 8009dee:	f7fe ffdd 	bl	8008dac <_Bfree>
 8009df2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009df4:	9316      	str	r3, [sp, #88]	; 0x58
 8009df6:	2e00      	cmp	r6, #0
 8009df8:	f300 808c 	bgt.w	8009f14 <_strtod_l+0x854>
 8009dfc:	9b08      	ldr	r3, [sp, #32]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	dd08      	ble.n	8009e14 <_strtod_l+0x754>
 8009e02:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009e04:	9905      	ldr	r1, [sp, #20]
 8009e06:	4620      	mov	r0, r4
 8009e08:	f7ff f990 	bl	800912c <__pow5mult>
 8009e0c:	9005      	str	r0, [sp, #20]
 8009e0e:	2800      	cmp	r0, #0
 8009e10:	f43f ae9a 	beq.w	8009b48 <_strtod_l+0x488>
 8009e14:	2f00      	cmp	r7, #0
 8009e16:	dd08      	ble.n	8009e2a <_strtod_l+0x76a>
 8009e18:	9905      	ldr	r1, [sp, #20]
 8009e1a:	463a      	mov	r2, r7
 8009e1c:	4620      	mov	r0, r4
 8009e1e:	f7ff f9df 	bl	80091e0 <__lshift>
 8009e22:	9005      	str	r0, [sp, #20]
 8009e24:	2800      	cmp	r0, #0
 8009e26:	f43f ae8f 	beq.w	8009b48 <_strtod_l+0x488>
 8009e2a:	f1ba 0f00 	cmp.w	sl, #0
 8009e2e:	dd08      	ble.n	8009e42 <_strtod_l+0x782>
 8009e30:	4659      	mov	r1, fp
 8009e32:	4652      	mov	r2, sl
 8009e34:	4620      	mov	r0, r4
 8009e36:	f7ff f9d3 	bl	80091e0 <__lshift>
 8009e3a:	4683      	mov	fp, r0
 8009e3c:	2800      	cmp	r0, #0
 8009e3e:	f43f ae83 	beq.w	8009b48 <_strtod_l+0x488>
 8009e42:	9a05      	ldr	r2, [sp, #20]
 8009e44:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009e46:	4620      	mov	r0, r4
 8009e48:	f7ff fa52 	bl	80092f0 <__mdiff>
 8009e4c:	4605      	mov	r5, r0
 8009e4e:	2800      	cmp	r0, #0
 8009e50:	f43f ae7a 	beq.w	8009b48 <_strtod_l+0x488>
 8009e54:	68c3      	ldr	r3, [r0, #12]
 8009e56:	930b      	str	r3, [sp, #44]	; 0x2c
 8009e58:	2300      	movs	r3, #0
 8009e5a:	60c3      	str	r3, [r0, #12]
 8009e5c:	4659      	mov	r1, fp
 8009e5e:	f7ff fa2b 	bl	80092b8 <__mcmp>
 8009e62:	2800      	cmp	r0, #0
 8009e64:	da60      	bge.n	8009f28 <_strtod_l+0x868>
 8009e66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e68:	ea53 0308 	orrs.w	r3, r3, r8
 8009e6c:	f040 8084 	bne.w	8009f78 <_strtod_l+0x8b8>
 8009e70:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d17f      	bne.n	8009f78 <_strtod_l+0x8b8>
 8009e78:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009e7c:	0d1b      	lsrs	r3, r3, #20
 8009e7e:	051b      	lsls	r3, r3, #20
 8009e80:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009e84:	d978      	bls.n	8009f78 <_strtod_l+0x8b8>
 8009e86:	696b      	ldr	r3, [r5, #20]
 8009e88:	b913      	cbnz	r3, 8009e90 <_strtod_l+0x7d0>
 8009e8a:	692b      	ldr	r3, [r5, #16]
 8009e8c:	2b01      	cmp	r3, #1
 8009e8e:	dd73      	ble.n	8009f78 <_strtod_l+0x8b8>
 8009e90:	4629      	mov	r1, r5
 8009e92:	2201      	movs	r2, #1
 8009e94:	4620      	mov	r0, r4
 8009e96:	f7ff f9a3 	bl	80091e0 <__lshift>
 8009e9a:	4659      	mov	r1, fp
 8009e9c:	4605      	mov	r5, r0
 8009e9e:	f7ff fa0b 	bl	80092b8 <__mcmp>
 8009ea2:	2800      	cmp	r0, #0
 8009ea4:	dd68      	ble.n	8009f78 <_strtod_l+0x8b8>
 8009ea6:	9904      	ldr	r1, [sp, #16]
 8009ea8:	4a54      	ldr	r2, [pc, #336]	; (8009ffc <_strtod_l+0x93c>)
 8009eaa:	464b      	mov	r3, r9
 8009eac:	2900      	cmp	r1, #0
 8009eae:	f000 8084 	beq.w	8009fba <_strtod_l+0x8fa>
 8009eb2:	ea02 0109 	and.w	r1, r2, r9
 8009eb6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009eba:	dc7e      	bgt.n	8009fba <_strtod_l+0x8fa>
 8009ebc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009ec0:	f77f aeb3 	ble.w	8009c2a <_strtod_l+0x56a>
 8009ec4:	4b4e      	ldr	r3, [pc, #312]	; (800a000 <_strtod_l+0x940>)
 8009ec6:	4640      	mov	r0, r8
 8009ec8:	4649      	mov	r1, r9
 8009eca:	2200      	movs	r2, #0
 8009ecc:	f7f6 fb94 	bl	80005f8 <__aeabi_dmul>
 8009ed0:	4b4a      	ldr	r3, [pc, #296]	; (8009ffc <_strtod_l+0x93c>)
 8009ed2:	400b      	ands	r3, r1
 8009ed4:	4680      	mov	r8, r0
 8009ed6:	4689      	mov	r9, r1
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	f47f ae3f 	bne.w	8009b5c <_strtod_l+0x49c>
 8009ede:	2322      	movs	r3, #34	; 0x22
 8009ee0:	6023      	str	r3, [r4, #0]
 8009ee2:	e63b      	b.n	8009b5c <_strtod_l+0x49c>
 8009ee4:	f04f 32ff 	mov.w	r2, #4294967295
 8009ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8009eec:	ea03 0808 	and.w	r8, r3, r8
 8009ef0:	e6e8      	b.n	8009cc4 <_strtod_l+0x604>
 8009ef2:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8009ef6:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8009efa:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8009efe:	36e2      	adds	r6, #226	; 0xe2
 8009f00:	fa01 f306 	lsl.w	r3, r1, r6
 8009f04:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8009f08:	e748      	b.n	8009d9c <_strtod_l+0x6dc>
 8009f0a:	2100      	movs	r1, #0
 8009f0c:	2301      	movs	r3, #1
 8009f0e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8009f12:	e743      	b.n	8009d9c <_strtod_l+0x6dc>
 8009f14:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009f16:	4632      	mov	r2, r6
 8009f18:	4620      	mov	r0, r4
 8009f1a:	f7ff f961 	bl	80091e0 <__lshift>
 8009f1e:	9016      	str	r0, [sp, #88]	; 0x58
 8009f20:	2800      	cmp	r0, #0
 8009f22:	f47f af6b 	bne.w	8009dfc <_strtod_l+0x73c>
 8009f26:	e60f      	b.n	8009b48 <_strtod_l+0x488>
 8009f28:	46ca      	mov	sl, r9
 8009f2a:	d171      	bne.n	800a010 <_strtod_l+0x950>
 8009f2c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009f2e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009f32:	b352      	cbz	r2, 8009f8a <_strtod_l+0x8ca>
 8009f34:	4a33      	ldr	r2, [pc, #204]	; (800a004 <_strtod_l+0x944>)
 8009f36:	4293      	cmp	r3, r2
 8009f38:	d12a      	bne.n	8009f90 <_strtod_l+0x8d0>
 8009f3a:	9b04      	ldr	r3, [sp, #16]
 8009f3c:	4641      	mov	r1, r8
 8009f3e:	b1fb      	cbz	r3, 8009f80 <_strtod_l+0x8c0>
 8009f40:	4b2e      	ldr	r3, [pc, #184]	; (8009ffc <_strtod_l+0x93c>)
 8009f42:	ea09 0303 	and.w	r3, r9, r3
 8009f46:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009f4a:	f04f 32ff 	mov.w	r2, #4294967295
 8009f4e:	d81a      	bhi.n	8009f86 <_strtod_l+0x8c6>
 8009f50:	0d1b      	lsrs	r3, r3, #20
 8009f52:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009f56:	fa02 f303 	lsl.w	r3, r2, r3
 8009f5a:	4299      	cmp	r1, r3
 8009f5c:	d118      	bne.n	8009f90 <_strtod_l+0x8d0>
 8009f5e:	4b2a      	ldr	r3, [pc, #168]	; (800a008 <_strtod_l+0x948>)
 8009f60:	459a      	cmp	sl, r3
 8009f62:	d102      	bne.n	8009f6a <_strtod_l+0x8aa>
 8009f64:	3101      	adds	r1, #1
 8009f66:	f43f adef 	beq.w	8009b48 <_strtod_l+0x488>
 8009f6a:	4b24      	ldr	r3, [pc, #144]	; (8009ffc <_strtod_l+0x93c>)
 8009f6c:	ea0a 0303 	and.w	r3, sl, r3
 8009f70:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8009f74:	f04f 0800 	mov.w	r8, #0
 8009f78:	9b04      	ldr	r3, [sp, #16]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d1a2      	bne.n	8009ec4 <_strtod_l+0x804>
 8009f7e:	e5ed      	b.n	8009b5c <_strtod_l+0x49c>
 8009f80:	f04f 33ff 	mov.w	r3, #4294967295
 8009f84:	e7e9      	b.n	8009f5a <_strtod_l+0x89a>
 8009f86:	4613      	mov	r3, r2
 8009f88:	e7e7      	b.n	8009f5a <_strtod_l+0x89a>
 8009f8a:	ea53 0308 	orrs.w	r3, r3, r8
 8009f8e:	d08a      	beq.n	8009ea6 <_strtod_l+0x7e6>
 8009f90:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f92:	b1e3      	cbz	r3, 8009fce <_strtod_l+0x90e>
 8009f94:	ea13 0f0a 	tst.w	r3, sl
 8009f98:	d0ee      	beq.n	8009f78 <_strtod_l+0x8b8>
 8009f9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f9c:	9a04      	ldr	r2, [sp, #16]
 8009f9e:	4640      	mov	r0, r8
 8009fa0:	4649      	mov	r1, r9
 8009fa2:	b1c3      	cbz	r3, 8009fd6 <_strtod_l+0x916>
 8009fa4:	f7ff fb6f 	bl	8009686 <sulp>
 8009fa8:	4602      	mov	r2, r0
 8009faa:	460b      	mov	r3, r1
 8009fac:	ec51 0b18 	vmov	r0, r1, d8
 8009fb0:	f7f6 f96c 	bl	800028c <__adddf3>
 8009fb4:	4680      	mov	r8, r0
 8009fb6:	4689      	mov	r9, r1
 8009fb8:	e7de      	b.n	8009f78 <_strtod_l+0x8b8>
 8009fba:	4013      	ands	r3, r2
 8009fbc:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009fc0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8009fc4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8009fc8:	f04f 38ff 	mov.w	r8, #4294967295
 8009fcc:	e7d4      	b.n	8009f78 <_strtod_l+0x8b8>
 8009fce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009fd0:	ea13 0f08 	tst.w	r3, r8
 8009fd4:	e7e0      	b.n	8009f98 <_strtod_l+0x8d8>
 8009fd6:	f7ff fb56 	bl	8009686 <sulp>
 8009fda:	4602      	mov	r2, r0
 8009fdc:	460b      	mov	r3, r1
 8009fde:	ec51 0b18 	vmov	r0, r1, d8
 8009fe2:	f7f6 f951 	bl	8000288 <__aeabi_dsub>
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	2300      	movs	r3, #0
 8009fea:	4680      	mov	r8, r0
 8009fec:	4689      	mov	r9, r1
 8009fee:	f7f6 fd6b 	bl	8000ac8 <__aeabi_dcmpeq>
 8009ff2:	2800      	cmp	r0, #0
 8009ff4:	d0c0      	beq.n	8009f78 <_strtod_l+0x8b8>
 8009ff6:	e618      	b.n	8009c2a <_strtod_l+0x56a>
 8009ff8:	fffffc02 	.word	0xfffffc02
 8009ffc:	7ff00000 	.word	0x7ff00000
 800a000:	39500000 	.word	0x39500000
 800a004:	000fffff 	.word	0x000fffff
 800a008:	7fefffff 	.word	0x7fefffff
 800a00c:	0800ba28 	.word	0x0800ba28
 800a010:	4659      	mov	r1, fp
 800a012:	4628      	mov	r0, r5
 800a014:	f7ff fac0 	bl	8009598 <__ratio>
 800a018:	ec57 6b10 	vmov	r6, r7, d0
 800a01c:	ee10 0a10 	vmov	r0, s0
 800a020:	2200      	movs	r2, #0
 800a022:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a026:	4639      	mov	r1, r7
 800a028:	f7f6 fd62 	bl	8000af0 <__aeabi_dcmple>
 800a02c:	2800      	cmp	r0, #0
 800a02e:	d071      	beq.n	800a114 <_strtod_l+0xa54>
 800a030:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a032:	2b00      	cmp	r3, #0
 800a034:	d17c      	bne.n	800a130 <_strtod_l+0xa70>
 800a036:	f1b8 0f00 	cmp.w	r8, #0
 800a03a:	d15a      	bne.n	800a0f2 <_strtod_l+0xa32>
 800a03c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a040:	2b00      	cmp	r3, #0
 800a042:	d15d      	bne.n	800a100 <_strtod_l+0xa40>
 800a044:	4b90      	ldr	r3, [pc, #576]	; (800a288 <_strtod_l+0xbc8>)
 800a046:	2200      	movs	r2, #0
 800a048:	4630      	mov	r0, r6
 800a04a:	4639      	mov	r1, r7
 800a04c:	f7f6 fd46 	bl	8000adc <__aeabi_dcmplt>
 800a050:	2800      	cmp	r0, #0
 800a052:	d15c      	bne.n	800a10e <_strtod_l+0xa4e>
 800a054:	4630      	mov	r0, r6
 800a056:	4639      	mov	r1, r7
 800a058:	4b8c      	ldr	r3, [pc, #560]	; (800a28c <_strtod_l+0xbcc>)
 800a05a:	2200      	movs	r2, #0
 800a05c:	f7f6 facc 	bl	80005f8 <__aeabi_dmul>
 800a060:	4606      	mov	r6, r0
 800a062:	460f      	mov	r7, r1
 800a064:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800a068:	9606      	str	r6, [sp, #24]
 800a06a:	9307      	str	r3, [sp, #28]
 800a06c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a070:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800a074:	4b86      	ldr	r3, [pc, #536]	; (800a290 <_strtod_l+0xbd0>)
 800a076:	ea0a 0303 	and.w	r3, sl, r3
 800a07a:	930d      	str	r3, [sp, #52]	; 0x34
 800a07c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a07e:	4b85      	ldr	r3, [pc, #532]	; (800a294 <_strtod_l+0xbd4>)
 800a080:	429a      	cmp	r2, r3
 800a082:	f040 8090 	bne.w	800a1a6 <_strtod_l+0xae6>
 800a086:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800a08a:	ec49 8b10 	vmov	d0, r8, r9
 800a08e:	f7ff f9b9 	bl	8009404 <__ulp>
 800a092:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a096:	ec51 0b10 	vmov	r0, r1, d0
 800a09a:	f7f6 faad 	bl	80005f8 <__aeabi_dmul>
 800a09e:	4642      	mov	r2, r8
 800a0a0:	464b      	mov	r3, r9
 800a0a2:	f7f6 f8f3 	bl	800028c <__adddf3>
 800a0a6:	460b      	mov	r3, r1
 800a0a8:	4979      	ldr	r1, [pc, #484]	; (800a290 <_strtod_l+0xbd0>)
 800a0aa:	4a7b      	ldr	r2, [pc, #492]	; (800a298 <_strtod_l+0xbd8>)
 800a0ac:	4019      	ands	r1, r3
 800a0ae:	4291      	cmp	r1, r2
 800a0b0:	4680      	mov	r8, r0
 800a0b2:	d944      	bls.n	800a13e <_strtod_l+0xa7e>
 800a0b4:	ee18 2a90 	vmov	r2, s17
 800a0b8:	4b78      	ldr	r3, [pc, #480]	; (800a29c <_strtod_l+0xbdc>)
 800a0ba:	429a      	cmp	r2, r3
 800a0bc:	d104      	bne.n	800a0c8 <_strtod_l+0xa08>
 800a0be:	ee18 3a10 	vmov	r3, s16
 800a0c2:	3301      	adds	r3, #1
 800a0c4:	f43f ad40 	beq.w	8009b48 <_strtod_l+0x488>
 800a0c8:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800a29c <_strtod_l+0xbdc>
 800a0cc:	f04f 38ff 	mov.w	r8, #4294967295
 800a0d0:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a0d2:	4620      	mov	r0, r4
 800a0d4:	f7fe fe6a 	bl	8008dac <_Bfree>
 800a0d8:	9905      	ldr	r1, [sp, #20]
 800a0da:	4620      	mov	r0, r4
 800a0dc:	f7fe fe66 	bl	8008dac <_Bfree>
 800a0e0:	4659      	mov	r1, fp
 800a0e2:	4620      	mov	r0, r4
 800a0e4:	f7fe fe62 	bl	8008dac <_Bfree>
 800a0e8:	4629      	mov	r1, r5
 800a0ea:	4620      	mov	r0, r4
 800a0ec:	f7fe fe5e 	bl	8008dac <_Bfree>
 800a0f0:	e609      	b.n	8009d06 <_strtod_l+0x646>
 800a0f2:	f1b8 0f01 	cmp.w	r8, #1
 800a0f6:	d103      	bne.n	800a100 <_strtod_l+0xa40>
 800a0f8:	f1b9 0f00 	cmp.w	r9, #0
 800a0fc:	f43f ad95 	beq.w	8009c2a <_strtod_l+0x56a>
 800a100:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800a258 <_strtod_l+0xb98>
 800a104:	4f60      	ldr	r7, [pc, #384]	; (800a288 <_strtod_l+0xbc8>)
 800a106:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a10a:	2600      	movs	r6, #0
 800a10c:	e7ae      	b.n	800a06c <_strtod_l+0x9ac>
 800a10e:	4f5f      	ldr	r7, [pc, #380]	; (800a28c <_strtod_l+0xbcc>)
 800a110:	2600      	movs	r6, #0
 800a112:	e7a7      	b.n	800a064 <_strtod_l+0x9a4>
 800a114:	4b5d      	ldr	r3, [pc, #372]	; (800a28c <_strtod_l+0xbcc>)
 800a116:	4630      	mov	r0, r6
 800a118:	4639      	mov	r1, r7
 800a11a:	2200      	movs	r2, #0
 800a11c:	f7f6 fa6c 	bl	80005f8 <__aeabi_dmul>
 800a120:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a122:	4606      	mov	r6, r0
 800a124:	460f      	mov	r7, r1
 800a126:	2b00      	cmp	r3, #0
 800a128:	d09c      	beq.n	800a064 <_strtod_l+0x9a4>
 800a12a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a12e:	e79d      	b.n	800a06c <_strtod_l+0x9ac>
 800a130:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800a260 <_strtod_l+0xba0>
 800a134:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a138:	ec57 6b17 	vmov	r6, r7, d7
 800a13c:	e796      	b.n	800a06c <_strtod_l+0x9ac>
 800a13e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800a142:	9b04      	ldr	r3, [sp, #16]
 800a144:	46ca      	mov	sl, r9
 800a146:	2b00      	cmp	r3, #0
 800a148:	d1c2      	bne.n	800a0d0 <_strtod_l+0xa10>
 800a14a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a14e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a150:	0d1b      	lsrs	r3, r3, #20
 800a152:	051b      	lsls	r3, r3, #20
 800a154:	429a      	cmp	r2, r3
 800a156:	d1bb      	bne.n	800a0d0 <_strtod_l+0xa10>
 800a158:	4630      	mov	r0, r6
 800a15a:	4639      	mov	r1, r7
 800a15c:	f7f6 fd94 	bl	8000c88 <__aeabi_d2lz>
 800a160:	f7f6 fa1c 	bl	800059c <__aeabi_l2d>
 800a164:	4602      	mov	r2, r0
 800a166:	460b      	mov	r3, r1
 800a168:	4630      	mov	r0, r6
 800a16a:	4639      	mov	r1, r7
 800a16c:	f7f6 f88c 	bl	8000288 <__aeabi_dsub>
 800a170:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a172:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a176:	ea43 0308 	orr.w	r3, r3, r8
 800a17a:	4313      	orrs	r3, r2
 800a17c:	4606      	mov	r6, r0
 800a17e:	460f      	mov	r7, r1
 800a180:	d054      	beq.n	800a22c <_strtod_l+0xb6c>
 800a182:	a339      	add	r3, pc, #228	; (adr r3, 800a268 <_strtod_l+0xba8>)
 800a184:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a188:	f7f6 fca8 	bl	8000adc <__aeabi_dcmplt>
 800a18c:	2800      	cmp	r0, #0
 800a18e:	f47f ace5 	bne.w	8009b5c <_strtod_l+0x49c>
 800a192:	a337      	add	r3, pc, #220	; (adr r3, 800a270 <_strtod_l+0xbb0>)
 800a194:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a198:	4630      	mov	r0, r6
 800a19a:	4639      	mov	r1, r7
 800a19c:	f7f6 fcbc 	bl	8000b18 <__aeabi_dcmpgt>
 800a1a0:	2800      	cmp	r0, #0
 800a1a2:	d095      	beq.n	800a0d0 <_strtod_l+0xa10>
 800a1a4:	e4da      	b.n	8009b5c <_strtod_l+0x49c>
 800a1a6:	9b04      	ldr	r3, [sp, #16]
 800a1a8:	b333      	cbz	r3, 800a1f8 <_strtod_l+0xb38>
 800a1aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a1ac:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a1b0:	d822      	bhi.n	800a1f8 <_strtod_l+0xb38>
 800a1b2:	a331      	add	r3, pc, #196	; (adr r3, 800a278 <_strtod_l+0xbb8>)
 800a1b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1b8:	4630      	mov	r0, r6
 800a1ba:	4639      	mov	r1, r7
 800a1bc:	f7f6 fc98 	bl	8000af0 <__aeabi_dcmple>
 800a1c0:	b1a0      	cbz	r0, 800a1ec <_strtod_l+0xb2c>
 800a1c2:	4639      	mov	r1, r7
 800a1c4:	4630      	mov	r0, r6
 800a1c6:	f7f6 fcef 	bl	8000ba8 <__aeabi_d2uiz>
 800a1ca:	2801      	cmp	r0, #1
 800a1cc:	bf38      	it	cc
 800a1ce:	2001      	movcc	r0, #1
 800a1d0:	f7f6 f998 	bl	8000504 <__aeabi_ui2d>
 800a1d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a1d6:	4606      	mov	r6, r0
 800a1d8:	460f      	mov	r7, r1
 800a1da:	bb23      	cbnz	r3, 800a226 <_strtod_l+0xb66>
 800a1dc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a1e0:	9010      	str	r0, [sp, #64]	; 0x40
 800a1e2:	9311      	str	r3, [sp, #68]	; 0x44
 800a1e4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a1e8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800a1ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a1ee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a1f0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800a1f4:	1a9b      	subs	r3, r3, r2
 800a1f6:	930f      	str	r3, [sp, #60]	; 0x3c
 800a1f8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a1fc:	eeb0 0a48 	vmov.f32	s0, s16
 800a200:	eef0 0a68 	vmov.f32	s1, s17
 800a204:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800a208:	f7ff f8fc 	bl	8009404 <__ulp>
 800a20c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a210:	ec53 2b10 	vmov	r2, r3, d0
 800a214:	f7f6 f9f0 	bl	80005f8 <__aeabi_dmul>
 800a218:	ec53 2b18 	vmov	r2, r3, d8
 800a21c:	f7f6 f836 	bl	800028c <__adddf3>
 800a220:	4680      	mov	r8, r0
 800a222:	4689      	mov	r9, r1
 800a224:	e78d      	b.n	800a142 <_strtod_l+0xa82>
 800a226:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800a22a:	e7db      	b.n	800a1e4 <_strtod_l+0xb24>
 800a22c:	a314      	add	r3, pc, #80	; (adr r3, 800a280 <_strtod_l+0xbc0>)
 800a22e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a232:	f7f6 fc53 	bl	8000adc <__aeabi_dcmplt>
 800a236:	e7b3      	b.n	800a1a0 <_strtod_l+0xae0>
 800a238:	2300      	movs	r3, #0
 800a23a:	930a      	str	r3, [sp, #40]	; 0x28
 800a23c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a23e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a240:	6013      	str	r3, [r2, #0]
 800a242:	f7ff ba7c 	b.w	800973e <_strtod_l+0x7e>
 800a246:	2a65      	cmp	r2, #101	; 0x65
 800a248:	f43f ab75 	beq.w	8009936 <_strtod_l+0x276>
 800a24c:	2a45      	cmp	r2, #69	; 0x45
 800a24e:	f43f ab72 	beq.w	8009936 <_strtod_l+0x276>
 800a252:	2301      	movs	r3, #1
 800a254:	f7ff bbaa 	b.w	80099ac <_strtod_l+0x2ec>
 800a258:	00000000 	.word	0x00000000
 800a25c:	bff00000 	.word	0xbff00000
 800a260:	00000000 	.word	0x00000000
 800a264:	3ff00000 	.word	0x3ff00000
 800a268:	94a03595 	.word	0x94a03595
 800a26c:	3fdfffff 	.word	0x3fdfffff
 800a270:	35afe535 	.word	0x35afe535
 800a274:	3fe00000 	.word	0x3fe00000
 800a278:	ffc00000 	.word	0xffc00000
 800a27c:	41dfffff 	.word	0x41dfffff
 800a280:	94a03595 	.word	0x94a03595
 800a284:	3fcfffff 	.word	0x3fcfffff
 800a288:	3ff00000 	.word	0x3ff00000
 800a28c:	3fe00000 	.word	0x3fe00000
 800a290:	7ff00000 	.word	0x7ff00000
 800a294:	7fe00000 	.word	0x7fe00000
 800a298:	7c9fffff 	.word	0x7c9fffff
 800a29c:	7fefffff 	.word	0x7fefffff

0800a2a0 <_strtod_r>:
 800a2a0:	4b01      	ldr	r3, [pc, #4]	; (800a2a8 <_strtod_r+0x8>)
 800a2a2:	f7ff ba0d 	b.w	80096c0 <_strtod_l>
 800a2a6:	bf00      	nop
 800a2a8:	20000094 	.word	0x20000094

0800a2ac <_strtol_l.constprop.0>:
 800a2ac:	2b01      	cmp	r3, #1
 800a2ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a2b2:	d001      	beq.n	800a2b8 <_strtol_l.constprop.0+0xc>
 800a2b4:	2b24      	cmp	r3, #36	; 0x24
 800a2b6:	d906      	bls.n	800a2c6 <_strtol_l.constprop.0+0x1a>
 800a2b8:	f7fd fe36 	bl	8007f28 <__errno>
 800a2bc:	2316      	movs	r3, #22
 800a2be:	6003      	str	r3, [r0, #0]
 800a2c0:	2000      	movs	r0, #0
 800a2c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2c6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800a3ac <_strtol_l.constprop.0+0x100>
 800a2ca:	460d      	mov	r5, r1
 800a2cc:	462e      	mov	r6, r5
 800a2ce:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a2d2:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800a2d6:	f017 0708 	ands.w	r7, r7, #8
 800a2da:	d1f7      	bne.n	800a2cc <_strtol_l.constprop.0+0x20>
 800a2dc:	2c2d      	cmp	r4, #45	; 0x2d
 800a2de:	d132      	bne.n	800a346 <_strtol_l.constprop.0+0x9a>
 800a2e0:	782c      	ldrb	r4, [r5, #0]
 800a2e2:	2701      	movs	r7, #1
 800a2e4:	1cb5      	adds	r5, r6, #2
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d05b      	beq.n	800a3a2 <_strtol_l.constprop.0+0xf6>
 800a2ea:	2b10      	cmp	r3, #16
 800a2ec:	d109      	bne.n	800a302 <_strtol_l.constprop.0+0x56>
 800a2ee:	2c30      	cmp	r4, #48	; 0x30
 800a2f0:	d107      	bne.n	800a302 <_strtol_l.constprop.0+0x56>
 800a2f2:	782c      	ldrb	r4, [r5, #0]
 800a2f4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a2f8:	2c58      	cmp	r4, #88	; 0x58
 800a2fa:	d14d      	bne.n	800a398 <_strtol_l.constprop.0+0xec>
 800a2fc:	786c      	ldrb	r4, [r5, #1]
 800a2fe:	2310      	movs	r3, #16
 800a300:	3502      	adds	r5, #2
 800a302:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800a306:	f108 38ff 	add.w	r8, r8, #4294967295
 800a30a:	f04f 0e00 	mov.w	lr, #0
 800a30e:	fbb8 f9f3 	udiv	r9, r8, r3
 800a312:	4676      	mov	r6, lr
 800a314:	fb03 8a19 	mls	sl, r3, r9, r8
 800a318:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800a31c:	f1bc 0f09 	cmp.w	ip, #9
 800a320:	d816      	bhi.n	800a350 <_strtol_l.constprop.0+0xa4>
 800a322:	4664      	mov	r4, ip
 800a324:	42a3      	cmp	r3, r4
 800a326:	dd24      	ble.n	800a372 <_strtol_l.constprop.0+0xc6>
 800a328:	f1be 3fff 	cmp.w	lr, #4294967295
 800a32c:	d008      	beq.n	800a340 <_strtol_l.constprop.0+0x94>
 800a32e:	45b1      	cmp	r9, r6
 800a330:	d31c      	bcc.n	800a36c <_strtol_l.constprop.0+0xc0>
 800a332:	d101      	bne.n	800a338 <_strtol_l.constprop.0+0x8c>
 800a334:	45a2      	cmp	sl, r4
 800a336:	db19      	blt.n	800a36c <_strtol_l.constprop.0+0xc0>
 800a338:	fb06 4603 	mla	r6, r6, r3, r4
 800a33c:	f04f 0e01 	mov.w	lr, #1
 800a340:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a344:	e7e8      	b.n	800a318 <_strtol_l.constprop.0+0x6c>
 800a346:	2c2b      	cmp	r4, #43	; 0x2b
 800a348:	bf04      	itt	eq
 800a34a:	782c      	ldrbeq	r4, [r5, #0]
 800a34c:	1cb5      	addeq	r5, r6, #2
 800a34e:	e7ca      	b.n	800a2e6 <_strtol_l.constprop.0+0x3a>
 800a350:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800a354:	f1bc 0f19 	cmp.w	ip, #25
 800a358:	d801      	bhi.n	800a35e <_strtol_l.constprop.0+0xb2>
 800a35a:	3c37      	subs	r4, #55	; 0x37
 800a35c:	e7e2      	b.n	800a324 <_strtol_l.constprop.0+0x78>
 800a35e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800a362:	f1bc 0f19 	cmp.w	ip, #25
 800a366:	d804      	bhi.n	800a372 <_strtol_l.constprop.0+0xc6>
 800a368:	3c57      	subs	r4, #87	; 0x57
 800a36a:	e7db      	b.n	800a324 <_strtol_l.constprop.0+0x78>
 800a36c:	f04f 3eff 	mov.w	lr, #4294967295
 800a370:	e7e6      	b.n	800a340 <_strtol_l.constprop.0+0x94>
 800a372:	f1be 3fff 	cmp.w	lr, #4294967295
 800a376:	d105      	bne.n	800a384 <_strtol_l.constprop.0+0xd8>
 800a378:	2322      	movs	r3, #34	; 0x22
 800a37a:	6003      	str	r3, [r0, #0]
 800a37c:	4646      	mov	r6, r8
 800a37e:	b942      	cbnz	r2, 800a392 <_strtol_l.constprop.0+0xe6>
 800a380:	4630      	mov	r0, r6
 800a382:	e79e      	b.n	800a2c2 <_strtol_l.constprop.0+0x16>
 800a384:	b107      	cbz	r7, 800a388 <_strtol_l.constprop.0+0xdc>
 800a386:	4276      	negs	r6, r6
 800a388:	2a00      	cmp	r2, #0
 800a38a:	d0f9      	beq.n	800a380 <_strtol_l.constprop.0+0xd4>
 800a38c:	f1be 0f00 	cmp.w	lr, #0
 800a390:	d000      	beq.n	800a394 <_strtol_l.constprop.0+0xe8>
 800a392:	1e69      	subs	r1, r5, #1
 800a394:	6011      	str	r1, [r2, #0]
 800a396:	e7f3      	b.n	800a380 <_strtol_l.constprop.0+0xd4>
 800a398:	2430      	movs	r4, #48	; 0x30
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d1b1      	bne.n	800a302 <_strtol_l.constprop.0+0x56>
 800a39e:	2308      	movs	r3, #8
 800a3a0:	e7af      	b.n	800a302 <_strtol_l.constprop.0+0x56>
 800a3a2:	2c30      	cmp	r4, #48	; 0x30
 800a3a4:	d0a5      	beq.n	800a2f2 <_strtol_l.constprop.0+0x46>
 800a3a6:	230a      	movs	r3, #10
 800a3a8:	e7ab      	b.n	800a302 <_strtol_l.constprop.0+0x56>
 800a3aa:	bf00      	nop
 800a3ac:	0800ba51 	.word	0x0800ba51

0800a3b0 <_strtol_r>:
 800a3b0:	f7ff bf7c 	b.w	800a2ac <_strtol_l.constprop.0>

0800a3b4 <__ssputs_r>:
 800a3b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3b8:	688e      	ldr	r6, [r1, #8]
 800a3ba:	461f      	mov	r7, r3
 800a3bc:	42be      	cmp	r6, r7
 800a3be:	680b      	ldr	r3, [r1, #0]
 800a3c0:	4682      	mov	sl, r0
 800a3c2:	460c      	mov	r4, r1
 800a3c4:	4690      	mov	r8, r2
 800a3c6:	d82c      	bhi.n	800a422 <__ssputs_r+0x6e>
 800a3c8:	898a      	ldrh	r2, [r1, #12]
 800a3ca:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a3ce:	d026      	beq.n	800a41e <__ssputs_r+0x6a>
 800a3d0:	6965      	ldr	r5, [r4, #20]
 800a3d2:	6909      	ldr	r1, [r1, #16]
 800a3d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a3d8:	eba3 0901 	sub.w	r9, r3, r1
 800a3dc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a3e0:	1c7b      	adds	r3, r7, #1
 800a3e2:	444b      	add	r3, r9
 800a3e4:	106d      	asrs	r5, r5, #1
 800a3e6:	429d      	cmp	r5, r3
 800a3e8:	bf38      	it	cc
 800a3ea:	461d      	movcc	r5, r3
 800a3ec:	0553      	lsls	r3, r2, #21
 800a3ee:	d527      	bpl.n	800a440 <__ssputs_r+0x8c>
 800a3f0:	4629      	mov	r1, r5
 800a3f2:	f7fc fcf9 	bl	8006de8 <_malloc_r>
 800a3f6:	4606      	mov	r6, r0
 800a3f8:	b360      	cbz	r0, 800a454 <__ssputs_r+0xa0>
 800a3fa:	6921      	ldr	r1, [r4, #16]
 800a3fc:	464a      	mov	r2, r9
 800a3fe:	f000 fa0b 	bl	800a818 <memcpy>
 800a402:	89a3      	ldrh	r3, [r4, #12]
 800a404:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a408:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a40c:	81a3      	strh	r3, [r4, #12]
 800a40e:	6126      	str	r6, [r4, #16]
 800a410:	6165      	str	r5, [r4, #20]
 800a412:	444e      	add	r6, r9
 800a414:	eba5 0509 	sub.w	r5, r5, r9
 800a418:	6026      	str	r6, [r4, #0]
 800a41a:	60a5      	str	r5, [r4, #8]
 800a41c:	463e      	mov	r6, r7
 800a41e:	42be      	cmp	r6, r7
 800a420:	d900      	bls.n	800a424 <__ssputs_r+0x70>
 800a422:	463e      	mov	r6, r7
 800a424:	6820      	ldr	r0, [r4, #0]
 800a426:	4632      	mov	r2, r6
 800a428:	4641      	mov	r1, r8
 800a42a:	f000 f9c9 	bl	800a7c0 <memmove>
 800a42e:	68a3      	ldr	r3, [r4, #8]
 800a430:	1b9b      	subs	r3, r3, r6
 800a432:	60a3      	str	r3, [r4, #8]
 800a434:	6823      	ldr	r3, [r4, #0]
 800a436:	4433      	add	r3, r6
 800a438:	6023      	str	r3, [r4, #0]
 800a43a:	2000      	movs	r0, #0
 800a43c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a440:	462a      	mov	r2, r5
 800a442:	f000 fd88 	bl	800af56 <_realloc_r>
 800a446:	4606      	mov	r6, r0
 800a448:	2800      	cmp	r0, #0
 800a44a:	d1e0      	bne.n	800a40e <__ssputs_r+0x5a>
 800a44c:	6921      	ldr	r1, [r4, #16]
 800a44e:	4650      	mov	r0, sl
 800a450:	f7fe fc20 	bl	8008c94 <_free_r>
 800a454:	230c      	movs	r3, #12
 800a456:	f8ca 3000 	str.w	r3, [sl]
 800a45a:	89a3      	ldrh	r3, [r4, #12]
 800a45c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a460:	81a3      	strh	r3, [r4, #12]
 800a462:	f04f 30ff 	mov.w	r0, #4294967295
 800a466:	e7e9      	b.n	800a43c <__ssputs_r+0x88>

0800a468 <_svfiprintf_r>:
 800a468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a46c:	4698      	mov	r8, r3
 800a46e:	898b      	ldrh	r3, [r1, #12]
 800a470:	061b      	lsls	r3, r3, #24
 800a472:	b09d      	sub	sp, #116	; 0x74
 800a474:	4607      	mov	r7, r0
 800a476:	460d      	mov	r5, r1
 800a478:	4614      	mov	r4, r2
 800a47a:	d50e      	bpl.n	800a49a <_svfiprintf_r+0x32>
 800a47c:	690b      	ldr	r3, [r1, #16]
 800a47e:	b963      	cbnz	r3, 800a49a <_svfiprintf_r+0x32>
 800a480:	2140      	movs	r1, #64	; 0x40
 800a482:	f7fc fcb1 	bl	8006de8 <_malloc_r>
 800a486:	6028      	str	r0, [r5, #0]
 800a488:	6128      	str	r0, [r5, #16]
 800a48a:	b920      	cbnz	r0, 800a496 <_svfiprintf_r+0x2e>
 800a48c:	230c      	movs	r3, #12
 800a48e:	603b      	str	r3, [r7, #0]
 800a490:	f04f 30ff 	mov.w	r0, #4294967295
 800a494:	e0d0      	b.n	800a638 <_svfiprintf_r+0x1d0>
 800a496:	2340      	movs	r3, #64	; 0x40
 800a498:	616b      	str	r3, [r5, #20]
 800a49a:	2300      	movs	r3, #0
 800a49c:	9309      	str	r3, [sp, #36]	; 0x24
 800a49e:	2320      	movs	r3, #32
 800a4a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a4a4:	f8cd 800c 	str.w	r8, [sp, #12]
 800a4a8:	2330      	movs	r3, #48	; 0x30
 800a4aa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a650 <_svfiprintf_r+0x1e8>
 800a4ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a4b2:	f04f 0901 	mov.w	r9, #1
 800a4b6:	4623      	mov	r3, r4
 800a4b8:	469a      	mov	sl, r3
 800a4ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a4be:	b10a      	cbz	r2, 800a4c4 <_svfiprintf_r+0x5c>
 800a4c0:	2a25      	cmp	r2, #37	; 0x25
 800a4c2:	d1f9      	bne.n	800a4b8 <_svfiprintf_r+0x50>
 800a4c4:	ebba 0b04 	subs.w	fp, sl, r4
 800a4c8:	d00b      	beq.n	800a4e2 <_svfiprintf_r+0x7a>
 800a4ca:	465b      	mov	r3, fp
 800a4cc:	4622      	mov	r2, r4
 800a4ce:	4629      	mov	r1, r5
 800a4d0:	4638      	mov	r0, r7
 800a4d2:	f7ff ff6f 	bl	800a3b4 <__ssputs_r>
 800a4d6:	3001      	adds	r0, #1
 800a4d8:	f000 80a9 	beq.w	800a62e <_svfiprintf_r+0x1c6>
 800a4dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a4de:	445a      	add	r2, fp
 800a4e0:	9209      	str	r2, [sp, #36]	; 0x24
 800a4e2:	f89a 3000 	ldrb.w	r3, [sl]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	f000 80a1 	beq.w	800a62e <_svfiprintf_r+0x1c6>
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	f04f 32ff 	mov.w	r2, #4294967295
 800a4f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a4f6:	f10a 0a01 	add.w	sl, sl, #1
 800a4fa:	9304      	str	r3, [sp, #16]
 800a4fc:	9307      	str	r3, [sp, #28]
 800a4fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a502:	931a      	str	r3, [sp, #104]	; 0x68
 800a504:	4654      	mov	r4, sl
 800a506:	2205      	movs	r2, #5
 800a508:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a50c:	4850      	ldr	r0, [pc, #320]	; (800a650 <_svfiprintf_r+0x1e8>)
 800a50e:	f7f5 fe5f 	bl	80001d0 <memchr>
 800a512:	9a04      	ldr	r2, [sp, #16]
 800a514:	b9d8      	cbnz	r0, 800a54e <_svfiprintf_r+0xe6>
 800a516:	06d0      	lsls	r0, r2, #27
 800a518:	bf44      	itt	mi
 800a51a:	2320      	movmi	r3, #32
 800a51c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a520:	0711      	lsls	r1, r2, #28
 800a522:	bf44      	itt	mi
 800a524:	232b      	movmi	r3, #43	; 0x2b
 800a526:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a52a:	f89a 3000 	ldrb.w	r3, [sl]
 800a52e:	2b2a      	cmp	r3, #42	; 0x2a
 800a530:	d015      	beq.n	800a55e <_svfiprintf_r+0xf6>
 800a532:	9a07      	ldr	r2, [sp, #28]
 800a534:	4654      	mov	r4, sl
 800a536:	2000      	movs	r0, #0
 800a538:	f04f 0c0a 	mov.w	ip, #10
 800a53c:	4621      	mov	r1, r4
 800a53e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a542:	3b30      	subs	r3, #48	; 0x30
 800a544:	2b09      	cmp	r3, #9
 800a546:	d94d      	bls.n	800a5e4 <_svfiprintf_r+0x17c>
 800a548:	b1b0      	cbz	r0, 800a578 <_svfiprintf_r+0x110>
 800a54a:	9207      	str	r2, [sp, #28]
 800a54c:	e014      	b.n	800a578 <_svfiprintf_r+0x110>
 800a54e:	eba0 0308 	sub.w	r3, r0, r8
 800a552:	fa09 f303 	lsl.w	r3, r9, r3
 800a556:	4313      	orrs	r3, r2
 800a558:	9304      	str	r3, [sp, #16]
 800a55a:	46a2      	mov	sl, r4
 800a55c:	e7d2      	b.n	800a504 <_svfiprintf_r+0x9c>
 800a55e:	9b03      	ldr	r3, [sp, #12]
 800a560:	1d19      	adds	r1, r3, #4
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	9103      	str	r1, [sp, #12]
 800a566:	2b00      	cmp	r3, #0
 800a568:	bfbb      	ittet	lt
 800a56a:	425b      	neglt	r3, r3
 800a56c:	f042 0202 	orrlt.w	r2, r2, #2
 800a570:	9307      	strge	r3, [sp, #28]
 800a572:	9307      	strlt	r3, [sp, #28]
 800a574:	bfb8      	it	lt
 800a576:	9204      	strlt	r2, [sp, #16]
 800a578:	7823      	ldrb	r3, [r4, #0]
 800a57a:	2b2e      	cmp	r3, #46	; 0x2e
 800a57c:	d10c      	bne.n	800a598 <_svfiprintf_r+0x130>
 800a57e:	7863      	ldrb	r3, [r4, #1]
 800a580:	2b2a      	cmp	r3, #42	; 0x2a
 800a582:	d134      	bne.n	800a5ee <_svfiprintf_r+0x186>
 800a584:	9b03      	ldr	r3, [sp, #12]
 800a586:	1d1a      	adds	r2, r3, #4
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	9203      	str	r2, [sp, #12]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	bfb8      	it	lt
 800a590:	f04f 33ff 	movlt.w	r3, #4294967295
 800a594:	3402      	adds	r4, #2
 800a596:	9305      	str	r3, [sp, #20]
 800a598:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800a660 <_svfiprintf_r+0x1f8>
 800a59c:	7821      	ldrb	r1, [r4, #0]
 800a59e:	2203      	movs	r2, #3
 800a5a0:	4650      	mov	r0, sl
 800a5a2:	f7f5 fe15 	bl	80001d0 <memchr>
 800a5a6:	b138      	cbz	r0, 800a5b8 <_svfiprintf_r+0x150>
 800a5a8:	9b04      	ldr	r3, [sp, #16]
 800a5aa:	eba0 000a 	sub.w	r0, r0, sl
 800a5ae:	2240      	movs	r2, #64	; 0x40
 800a5b0:	4082      	lsls	r2, r0
 800a5b2:	4313      	orrs	r3, r2
 800a5b4:	3401      	adds	r4, #1
 800a5b6:	9304      	str	r3, [sp, #16]
 800a5b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5bc:	4825      	ldr	r0, [pc, #148]	; (800a654 <_svfiprintf_r+0x1ec>)
 800a5be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a5c2:	2206      	movs	r2, #6
 800a5c4:	f7f5 fe04 	bl	80001d0 <memchr>
 800a5c8:	2800      	cmp	r0, #0
 800a5ca:	d038      	beq.n	800a63e <_svfiprintf_r+0x1d6>
 800a5cc:	4b22      	ldr	r3, [pc, #136]	; (800a658 <_svfiprintf_r+0x1f0>)
 800a5ce:	bb1b      	cbnz	r3, 800a618 <_svfiprintf_r+0x1b0>
 800a5d0:	9b03      	ldr	r3, [sp, #12]
 800a5d2:	3307      	adds	r3, #7
 800a5d4:	f023 0307 	bic.w	r3, r3, #7
 800a5d8:	3308      	adds	r3, #8
 800a5da:	9303      	str	r3, [sp, #12]
 800a5dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5de:	4433      	add	r3, r6
 800a5e0:	9309      	str	r3, [sp, #36]	; 0x24
 800a5e2:	e768      	b.n	800a4b6 <_svfiprintf_r+0x4e>
 800a5e4:	fb0c 3202 	mla	r2, ip, r2, r3
 800a5e8:	460c      	mov	r4, r1
 800a5ea:	2001      	movs	r0, #1
 800a5ec:	e7a6      	b.n	800a53c <_svfiprintf_r+0xd4>
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	3401      	adds	r4, #1
 800a5f2:	9305      	str	r3, [sp, #20]
 800a5f4:	4619      	mov	r1, r3
 800a5f6:	f04f 0c0a 	mov.w	ip, #10
 800a5fa:	4620      	mov	r0, r4
 800a5fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a600:	3a30      	subs	r2, #48	; 0x30
 800a602:	2a09      	cmp	r2, #9
 800a604:	d903      	bls.n	800a60e <_svfiprintf_r+0x1a6>
 800a606:	2b00      	cmp	r3, #0
 800a608:	d0c6      	beq.n	800a598 <_svfiprintf_r+0x130>
 800a60a:	9105      	str	r1, [sp, #20]
 800a60c:	e7c4      	b.n	800a598 <_svfiprintf_r+0x130>
 800a60e:	fb0c 2101 	mla	r1, ip, r1, r2
 800a612:	4604      	mov	r4, r0
 800a614:	2301      	movs	r3, #1
 800a616:	e7f0      	b.n	800a5fa <_svfiprintf_r+0x192>
 800a618:	ab03      	add	r3, sp, #12
 800a61a:	9300      	str	r3, [sp, #0]
 800a61c:	462a      	mov	r2, r5
 800a61e:	4b0f      	ldr	r3, [pc, #60]	; (800a65c <_svfiprintf_r+0x1f4>)
 800a620:	a904      	add	r1, sp, #16
 800a622:	4638      	mov	r0, r7
 800a624:	f7fc fd0c 	bl	8007040 <_printf_float>
 800a628:	1c42      	adds	r2, r0, #1
 800a62a:	4606      	mov	r6, r0
 800a62c:	d1d6      	bne.n	800a5dc <_svfiprintf_r+0x174>
 800a62e:	89ab      	ldrh	r3, [r5, #12]
 800a630:	065b      	lsls	r3, r3, #25
 800a632:	f53f af2d 	bmi.w	800a490 <_svfiprintf_r+0x28>
 800a636:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a638:	b01d      	add	sp, #116	; 0x74
 800a63a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a63e:	ab03      	add	r3, sp, #12
 800a640:	9300      	str	r3, [sp, #0]
 800a642:	462a      	mov	r2, r5
 800a644:	4b05      	ldr	r3, [pc, #20]	; (800a65c <_svfiprintf_r+0x1f4>)
 800a646:	a904      	add	r1, sp, #16
 800a648:	4638      	mov	r0, r7
 800a64a:	f7fc ff9d 	bl	8007588 <_printf_i>
 800a64e:	e7eb      	b.n	800a628 <_svfiprintf_r+0x1c0>
 800a650:	0800bb51 	.word	0x0800bb51
 800a654:	0800bb5b 	.word	0x0800bb5b
 800a658:	08007041 	.word	0x08007041
 800a65c:	0800a3b5 	.word	0x0800a3b5
 800a660:	0800bb57 	.word	0x0800bb57

0800a664 <__sflush_r>:
 800a664:	898a      	ldrh	r2, [r1, #12]
 800a666:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a66a:	4605      	mov	r5, r0
 800a66c:	0710      	lsls	r0, r2, #28
 800a66e:	460c      	mov	r4, r1
 800a670:	d458      	bmi.n	800a724 <__sflush_r+0xc0>
 800a672:	684b      	ldr	r3, [r1, #4]
 800a674:	2b00      	cmp	r3, #0
 800a676:	dc05      	bgt.n	800a684 <__sflush_r+0x20>
 800a678:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	dc02      	bgt.n	800a684 <__sflush_r+0x20>
 800a67e:	2000      	movs	r0, #0
 800a680:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a684:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a686:	2e00      	cmp	r6, #0
 800a688:	d0f9      	beq.n	800a67e <__sflush_r+0x1a>
 800a68a:	2300      	movs	r3, #0
 800a68c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a690:	682f      	ldr	r7, [r5, #0]
 800a692:	6a21      	ldr	r1, [r4, #32]
 800a694:	602b      	str	r3, [r5, #0]
 800a696:	d032      	beq.n	800a6fe <__sflush_r+0x9a>
 800a698:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a69a:	89a3      	ldrh	r3, [r4, #12]
 800a69c:	075a      	lsls	r2, r3, #29
 800a69e:	d505      	bpl.n	800a6ac <__sflush_r+0x48>
 800a6a0:	6863      	ldr	r3, [r4, #4]
 800a6a2:	1ac0      	subs	r0, r0, r3
 800a6a4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a6a6:	b10b      	cbz	r3, 800a6ac <__sflush_r+0x48>
 800a6a8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a6aa:	1ac0      	subs	r0, r0, r3
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	4602      	mov	r2, r0
 800a6b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a6b2:	6a21      	ldr	r1, [r4, #32]
 800a6b4:	4628      	mov	r0, r5
 800a6b6:	47b0      	blx	r6
 800a6b8:	1c43      	adds	r3, r0, #1
 800a6ba:	89a3      	ldrh	r3, [r4, #12]
 800a6bc:	d106      	bne.n	800a6cc <__sflush_r+0x68>
 800a6be:	6829      	ldr	r1, [r5, #0]
 800a6c0:	291d      	cmp	r1, #29
 800a6c2:	d82b      	bhi.n	800a71c <__sflush_r+0xb8>
 800a6c4:	4a29      	ldr	r2, [pc, #164]	; (800a76c <__sflush_r+0x108>)
 800a6c6:	410a      	asrs	r2, r1
 800a6c8:	07d6      	lsls	r6, r2, #31
 800a6ca:	d427      	bmi.n	800a71c <__sflush_r+0xb8>
 800a6cc:	2200      	movs	r2, #0
 800a6ce:	6062      	str	r2, [r4, #4]
 800a6d0:	04d9      	lsls	r1, r3, #19
 800a6d2:	6922      	ldr	r2, [r4, #16]
 800a6d4:	6022      	str	r2, [r4, #0]
 800a6d6:	d504      	bpl.n	800a6e2 <__sflush_r+0x7e>
 800a6d8:	1c42      	adds	r2, r0, #1
 800a6da:	d101      	bne.n	800a6e0 <__sflush_r+0x7c>
 800a6dc:	682b      	ldr	r3, [r5, #0]
 800a6de:	b903      	cbnz	r3, 800a6e2 <__sflush_r+0x7e>
 800a6e0:	6560      	str	r0, [r4, #84]	; 0x54
 800a6e2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a6e4:	602f      	str	r7, [r5, #0]
 800a6e6:	2900      	cmp	r1, #0
 800a6e8:	d0c9      	beq.n	800a67e <__sflush_r+0x1a>
 800a6ea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a6ee:	4299      	cmp	r1, r3
 800a6f0:	d002      	beq.n	800a6f8 <__sflush_r+0x94>
 800a6f2:	4628      	mov	r0, r5
 800a6f4:	f7fe face 	bl	8008c94 <_free_r>
 800a6f8:	2000      	movs	r0, #0
 800a6fa:	6360      	str	r0, [r4, #52]	; 0x34
 800a6fc:	e7c0      	b.n	800a680 <__sflush_r+0x1c>
 800a6fe:	2301      	movs	r3, #1
 800a700:	4628      	mov	r0, r5
 800a702:	47b0      	blx	r6
 800a704:	1c41      	adds	r1, r0, #1
 800a706:	d1c8      	bne.n	800a69a <__sflush_r+0x36>
 800a708:	682b      	ldr	r3, [r5, #0]
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d0c5      	beq.n	800a69a <__sflush_r+0x36>
 800a70e:	2b1d      	cmp	r3, #29
 800a710:	d001      	beq.n	800a716 <__sflush_r+0xb2>
 800a712:	2b16      	cmp	r3, #22
 800a714:	d101      	bne.n	800a71a <__sflush_r+0xb6>
 800a716:	602f      	str	r7, [r5, #0]
 800a718:	e7b1      	b.n	800a67e <__sflush_r+0x1a>
 800a71a:	89a3      	ldrh	r3, [r4, #12]
 800a71c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a720:	81a3      	strh	r3, [r4, #12]
 800a722:	e7ad      	b.n	800a680 <__sflush_r+0x1c>
 800a724:	690f      	ldr	r7, [r1, #16]
 800a726:	2f00      	cmp	r7, #0
 800a728:	d0a9      	beq.n	800a67e <__sflush_r+0x1a>
 800a72a:	0793      	lsls	r3, r2, #30
 800a72c:	680e      	ldr	r6, [r1, #0]
 800a72e:	bf08      	it	eq
 800a730:	694b      	ldreq	r3, [r1, #20]
 800a732:	600f      	str	r7, [r1, #0]
 800a734:	bf18      	it	ne
 800a736:	2300      	movne	r3, #0
 800a738:	eba6 0807 	sub.w	r8, r6, r7
 800a73c:	608b      	str	r3, [r1, #8]
 800a73e:	f1b8 0f00 	cmp.w	r8, #0
 800a742:	dd9c      	ble.n	800a67e <__sflush_r+0x1a>
 800a744:	6a21      	ldr	r1, [r4, #32]
 800a746:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a748:	4643      	mov	r3, r8
 800a74a:	463a      	mov	r2, r7
 800a74c:	4628      	mov	r0, r5
 800a74e:	47b0      	blx	r6
 800a750:	2800      	cmp	r0, #0
 800a752:	dc06      	bgt.n	800a762 <__sflush_r+0xfe>
 800a754:	89a3      	ldrh	r3, [r4, #12]
 800a756:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a75a:	81a3      	strh	r3, [r4, #12]
 800a75c:	f04f 30ff 	mov.w	r0, #4294967295
 800a760:	e78e      	b.n	800a680 <__sflush_r+0x1c>
 800a762:	4407      	add	r7, r0
 800a764:	eba8 0800 	sub.w	r8, r8, r0
 800a768:	e7e9      	b.n	800a73e <__sflush_r+0xda>
 800a76a:	bf00      	nop
 800a76c:	dfbffffe 	.word	0xdfbffffe

0800a770 <_fflush_r>:
 800a770:	b538      	push	{r3, r4, r5, lr}
 800a772:	690b      	ldr	r3, [r1, #16]
 800a774:	4605      	mov	r5, r0
 800a776:	460c      	mov	r4, r1
 800a778:	b913      	cbnz	r3, 800a780 <_fflush_r+0x10>
 800a77a:	2500      	movs	r5, #0
 800a77c:	4628      	mov	r0, r5
 800a77e:	bd38      	pop	{r3, r4, r5, pc}
 800a780:	b118      	cbz	r0, 800a78a <_fflush_r+0x1a>
 800a782:	6a03      	ldr	r3, [r0, #32]
 800a784:	b90b      	cbnz	r3, 800a78a <_fflush_r+0x1a>
 800a786:	f7fd fabd 	bl	8007d04 <__sinit>
 800a78a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d0f3      	beq.n	800a77a <_fflush_r+0xa>
 800a792:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a794:	07d0      	lsls	r0, r2, #31
 800a796:	d404      	bmi.n	800a7a2 <_fflush_r+0x32>
 800a798:	0599      	lsls	r1, r3, #22
 800a79a:	d402      	bmi.n	800a7a2 <_fflush_r+0x32>
 800a79c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a79e:	f7fd fbee 	bl	8007f7e <__retarget_lock_acquire_recursive>
 800a7a2:	4628      	mov	r0, r5
 800a7a4:	4621      	mov	r1, r4
 800a7a6:	f7ff ff5d 	bl	800a664 <__sflush_r>
 800a7aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a7ac:	07da      	lsls	r2, r3, #31
 800a7ae:	4605      	mov	r5, r0
 800a7b0:	d4e4      	bmi.n	800a77c <_fflush_r+0xc>
 800a7b2:	89a3      	ldrh	r3, [r4, #12]
 800a7b4:	059b      	lsls	r3, r3, #22
 800a7b6:	d4e1      	bmi.n	800a77c <_fflush_r+0xc>
 800a7b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a7ba:	f7fd fbe1 	bl	8007f80 <__retarget_lock_release_recursive>
 800a7be:	e7dd      	b.n	800a77c <_fflush_r+0xc>

0800a7c0 <memmove>:
 800a7c0:	4288      	cmp	r0, r1
 800a7c2:	b510      	push	{r4, lr}
 800a7c4:	eb01 0402 	add.w	r4, r1, r2
 800a7c8:	d902      	bls.n	800a7d0 <memmove+0x10>
 800a7ca:	4284      	cmp	r4, r0
 800a7cc:	4623      	mov	r3, r4
 800a7ce:	d807      	bhi.n	800a7e0 <memmove+0x20>
 800a7d0:	1e43      	subs	r3, r0, #1
 800a7d2:	42a1      	cmp	r1, r4
 800a7d4:	d008      	beq.n	800a7e8 <memmove+0x28>
 800a7d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a7da:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a7de:	e7f8      	b.n	800a7d2 <memmove+0x12>
 800a7e0:	4402      	add	r2, r0
 800a7e2:	4601      	mov	r1, r0
 800a7e4:	428a      	cmp	r2, r1
 800a7e6:	d100      	bne.n	800a7ea <memmove+0x2a>
 800a7e8:	bd10      	pop	{r4, pc}
 800a7ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a7ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a7f2:	e7f7      	b.n	800a7e4 <memmove+0x24>

0800a7f4 <strncmp>:
 800a7f4:	b510      	push	{r4, lr}
 800a7f6:	b16a      	cbz	r2, 800a814 <strncmp+0x20>
 800a7f8:	3901      	subs	r1, #1
 800a7fa:	1884      	adds	r4, r0, r2
 800a7fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a800:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a804:	429a      	cmp	r2, r3
 800a806:	d103      	bne.n	800a810 <strncmp+0x1c>
 800a808:	42a0      	cmp	r0, r4
 800a80a:	d001      	beq.n	800a810 <strncmp+0x1c>
 800a80c:	2a00      	cmp	r2, #0
 800a80e:	d1f5      	bne.n	800a7fc <strncmp+0x8>
 800a810:	1ad0      	subs	r0, r2, r3
 800a812:	bd10      	pop	{r4, pc}
 800a814:	4610      	mov	r0, r2
 800a816:	e7fc      	b.n	800a812 <strncmp+0x1e>

0800a818 <memcpy>:
 800a818:	440a      	add	r2, r1
 800a81a:	4291      	cmp	r1, r2
 800a81c:	f100 33ff 	add.w	r3, r0, #4294967295
 800a820:	d100      	bne.n	800a824 <memcpy+0xc>
 800a822:	4770      	bx	lr
 800a824:	b510      	push	{r4, lr}
 800a826:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a82a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a82e:	4291      	cmp	r1, r2
 800a830:	d1f9      	bne.n	800a826 <memcpy+0xe>
 800a832:	bd10      	pop	{r4, pc}
 800a834:	0000      	movs	r0, r0
	...

0800a838 <nan>:
 800a838:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a840 <nan+0x8>
 800a83c:	4770      	bx	lr
 800a83e:	bf00      	nop
 800a840:	00000000 	.word	0x00000000
 800a844:	7ff80000 	.word	0x7ff80000

0800a848 <__assert_func>:
 800a848:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a84a:	4614      	mov	r4, r2
 800a84c:	461a      	mov	r2, r3
 800a84e:	4b09      	ldr	r3, [pc, #36]	; (800a874 <__assert_func+0x2c>)
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	4605      	mov	r5, r0
 800a854:	68d8      	ldr	r0, [r3, #12]
 800a856:	b14c      	cbz	r4, 800a86c <__assert_func+0x24>
 800a858:	4b07      	ldr	r3, [pc, #28]	; (800a878 <__assert_func+0x30>)
 800a85a:	9100      	str	r1, [sp, #0]
 800a85c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a860:	4906      	ldr	r1, [pc, #24]	; (800a87c <__assert_func+0x34>)
 800a862:	462b      	mov	r3, r5
 800a864:	f000 fbb4 	bl	800afd0 <fiprintf>
 800a868:	f000 fbc4 	bl	800aff4 <abort>
 800a86c:	4b04      	ldr	r3, [pc, #16]	; (800a880 <__assert_func+0x38>)
 800a86e:	461c      	mov	r4, r3
 800a870:	e7f3      	b.n	800a85a <__assert_func+0x12>
 800a872:	bf00      	nop
 800a874:	20000090 	.word	0x20000090
 800a878:	0800bb6a 	.word	0x0800bb6a
 800a87c:	0800bb77 	.word	0x0800bb77
 800a880:	0800bba5 	.word	0x0800bba5

0800a884 <rshift>:
 800a884:	6903      	ldr	r3, [r0, #16]
 800a886:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a88a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a88e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a892:	f100 0414 	add.w	r4, r0, #20
 800a896:	dd45      	ble.n	800a924 <rshift+0xa0>
 800a898:	f011 011f 	ands.w	r1, r1, #31
 800a89c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a8a0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a8a4:	d10c      	bne.n	800a8c0 <rshift+0x3c>
 800a8a6:	f100 0710 	add.w	r7, r0, #16
 800a8aa:	4629      	mov	r1, r5
 800a8ac:	42b1      	cmp	r1, r6
 800a8ae:	d334      	bcc.n	800a91a <rshift+0x96>
 800a8b0:	1a9b      	subs	r3, r3, r2
 800a8b2:	009b      	lsls	r3, r3, #2
 800a8b4:	1eea      	subs	r2, r5, #3
 800a8b6:	4296      	cmp	r6, r2
 800a8b8:	bf38      	it	cc
 800a8ba:	2300      	movcc	r3, #0
 800a8bc:	4423      	add	r3, r4
 800a8be:	e015      	b.n	800a8ec <rshift+0x68>
 800a8c0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a8c4:	f1c1 0820 	rsb	r8, r1, #32
 800a8c8:	40cf      	lsrs	r7, r1
 800a8ca:	f105 0e04 	add.w	lr, r5, #4
 800a8ce:	46a1      	mov	r9, r4
 800a8d0:	4576      	cmp	r6, lr
 800a8d2:	46f4      	mov	ip, lr
 800a8d4:	d815      	bhi.n	800a902 <rshift+0x7e>
 800a8d6:	1a9a      	subs	r2, r3, r2
 800a8d8:	0092      	lsls	r2, r2, #2
 800a8da:	3a04      	subs	r2, #4
 800a8dc:	3501      	adds	r5, #1
 800a8de:	42ae      	cmp	r6, r5
 800a8e0:	bf38      	it	cc
 800a8e2:	2200      	movcc	r2, #0
 800a8e4:	18a3      	adds	r3, r4, r2
 800a8e6:	50a7      	str	r7, [r4, r2]
 800a8e8:	b107      	cbz	r7, 800a8ec <rshift+0x68>
 800a8ea:	3304      	adds	r3, #4
 800a8ec:	1b1a      	subs	r2, r3, r4
 800a8ee:	42a3      	cmp	r3, r4
 800a8f0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a8f4:	bf08      	it	eq
 800a8f6:	2300      	moveq	r3, #0
 800a8f8:	6102      	str	r2, [r0, #16]
 800a8fa:	bf08      	it	eq
 800a8fc:	6143      	streq	r3, [r0, #20]
 800a8fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a902:	f8dc c000 	ldr.w	ip, [ip]
 800a906:	fa0c fc08 	lsl.w	ip, ip, r8
 800a90a:	ea4c 0707 	orr.w	r7, ip, r7
 800a90e:	f849 7b04 	str.w	r7, [r9], #4
 800a912:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a916:	40cf      	lsrs	r7, r1
 800a918:	e7da      	b.n	800a8d0 <rshift+0x4c>
 800a91a:	f851 cb04 	ldr.w	ip, [r1], #4
 800a91e:	f847 cf04 	str.w	ip, [r7, #4]!
 800a922:	e7c3      	b.n	800a8ac <rshift+0x28>
 800a924:	4623      	mov	r3, r4
 800a926:	e7e1      	b.n	800a8ec <rshift+0x68>

0800a928 <__hexdig_fun>:
 800a928:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a92c:	2b09      	cmp	r3, #9
 800a92e:	d802      	bhi.n	800a936 <__hexdig_fun+0xe>
 800a930:	3820      	subs	r0, #32
 800a932:	b2c0      	uxtb	r0, r0
 800a934:	4770      	bx	lr
 800a936:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a93a:	2b05      	cmp	r3, #5
 800a93c:	d801      	bhi.n	800a942 <__hexdig_fun+0x1a>
 800a93e:	3847      	subs	r0, #71	; 0x47
 800a940:	e7f7      	b.n	800a932 <__hexdig_fun+0xa>
 800a942:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a946:	2b05      	cmp	r3, #5
 800a948:	d801      	bhi.n	800a94e <__hexdig_fun+0x26>
 800a94a:	3827      	subs	r0, #39	; 0x27
 800a94c:	e7f1      	b.n	800a932 <__hexdig_fun+0xa>
 800a94e:	2000      	movs	r0, #0
 800a950:	4770      	bx	lr
	...

0800a954 <__gethex>:
 800a954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a958:	4617      	mov	r7, r2
 800a95a:	680a      	ldr	r2, [r1, #0]
 800a95c:	b085      	sub	sp, #20
 800a95e:	f102 0b02 	add.w	fp, r2, #2
 800a962:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a966:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a96a:	4681      	mov	r9, r0
 800a96c:	468a      	mov	sl, r1
 800a96e:	9302      	str	r3, [sp, #8]
 800a970:	32fe      	adds	r2, #254	; 0xfe
 800a972:	eb02 030b 	add.w	r3, r2, fp
 800a976:	46d8      	mov	r8, fp
 800a978:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800a97c:	9301      	str	r3, [sp, #4]
 800a97e:	2830      	cmp	r0, #48	; 0x30
 800a980:	d0f7      	beq.n	800a972 <__gethex+0x1e>
 800a982:	f7ff ffd1 	bl	800a928 <__hexdig_fun>
 800a986:	4604      	mov	r4, r0
 800a988:	2800      	cmp	r0, #0
 800a98a:	d138      	bne.n	800a9fe <__gethex+0xaa>
 800a98c:	49a7      	ldr	r1, [pc, #668]	; (800ac2c <__gethex+0x2d8>)
 800a98e:	2201      	movs	r2, #1
 800a990:	4640      	mov	r0, r8
 800a992:	f7ff ff2f 	bl	800a7f4 <strncmp>
 800a996:	4606      	mov	r6, r0
 800a998:	2800      	cmp	r0, #0
 800a99a:	d169      	bne.n	800aa70 <__gethex+0x11c>
 800a99c:	f898 0001 	ldrb.w	r0, [r8, #1]
 800a9a0:	465d      	mov	r5, fp
 800a9a2:	f7ff ffc1 	bl	800a928 <__hexdig_fun>
 800a9a6:	2800      	cmp	r0, #0
 800a9a8:	d064      	beq.n	800aa74 <__gethex+0x120>
 800a9aa:	465a      	mov	r2, fp
 800a9ac:	7810      	ldrb	r0, [r2, #0]
 800a9ae:	2830      	cmp	r0, #48	; 0x30
 800a9b0:	4690      	mov	r8, r2
 800a9b2:	f102 0201 	add.w	r2, r2, #1
 800a9b6:	d0f9      	beq.n	800a9ac <__gethex+0x58>
 800a9b8:	f7ff ffb6 	bl	800a928 <__hexdig_fun>
 800a9bc:	2301      	movs	r3, #1
 800a9be:	fab0 f480 	clz	r4, r0
 800a9c2:	0964      	lsrs	r4, r4, #5
 800a9c4:	465e      	mov	r6, fp
 800a9c6:	9301      	str	r3, [sp, #4]
 800a9c8:	4642      	mov	r2, r8
 800a9ca:	4615      	mov	r5, r2
 800a9cc:	3201      	adds	r2, #1
 800a9ce:	7828      	ldrb	r0, [r5, #0]
 800a9d0:	f7ff ffaa 	bl	800a928 <__hexdig_fun>
 800a9d4:	2800      	cmp	r0, #0
 800a9d6:	d1f8      	bne.n	800a9ca <__gethex+0x76>
 800a9d8:	4994      	ldr	r1, [pc, #592]	; (800ac2c <__gethex+0x2d8>)
 800a9da:	2201      	movs	r2, #1
 800a9dc:	4628      	mov	r0, r5
 800a9de:	f7ff ff09 	bl	800a7f4 <strncmp>
 800a9e2:	b978      	cbnz	r0, 800aa04 <__gethex+0xb0>
 800a9e4:	b946      	cbnz	r6, 800a9f8 <__gethex+0xa4>
 800a9e6:	1c6e      	adds	r6, r5, #1
 800a9e8:	4632      	mov	r2, r6
 800a9ea:	4615      	mov	r5, r2
 800a9ec:	3201      	adds	r2, #1
 800a9ee:	7828      	ldrb	r0, [r5, #0]
 800a9f0:	f7ff ff9a 	bl	800a928 <__hexdig_fun>
 800a9f4:	2800      	cmp	r0, #0
 800a9f6:	d1f8      	bne.n	800a9ea <__gethex+0x96>
 800a9f8:	1b73      	subs	r3, r6, r5
 800a9fa:	009e      	lsls	r6, r3, #2
 800a9fc:	e004      	b.n	800aa08 <__gethex+0xb4>
 800a9fe:	2400      	movs	r4, #0
 800aa00:	4626      	mov	r6, r4
 800aa02:	e7e1      	b.n	800a9c8 <__gethex+0x74>
 800aa04:	2e00      	cmp	r6, #0
 800aa06:	d1f7      	bne.n	800a9f8 <__gethex+0xa4>
 800aa08:	782b      	ldrb	r3, [r5, #0]
 800aa0a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800aa0e:	2b50      	cmp	r3, #80	; 0x50
 800aa10:	d13d      	bne.n	800aa8e <__gethex+0x13a>
 800aa12:	786b      	ldrb	r3, [r5, #1]
 800aa14:	2b2b      	cmp	r3, #43	; 0x2b
 800aa16:	d02f      	beq.n	800aa78 <__gethex+0x124>
 800aa18:	2b2d      	cmp	r3, #45	; 0x2d
 800aa1a:	d031      	beq.n	800aa80 <__gethex+0x12c>
 800aa1c:	1c69      	adds	r1, r5, #1
 800aa1e:	f04f 0b00 	mov.w	fp, #0
 800aa22:	7808      	ldrb	r0, [r1, #0]
 800aa24:	f7ff ff80 	bl	800a928 <__hexdig_fun>
 800aa28:	1e42      	subs	r2, r0, #1
 800aa2a:	b2d2      	uxtb	r2, r2
 800aa2c:	2a18      	cmp	r2, #24
 800aa2e:	d82e      	bhi.n	800aa8e <__gethex+0x13a>
 800aa30:	f1a0 0210 	sub.w	r2, r0, #16
 800aa34:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800aa38:	f7ff ff76 	bl	800a928 <__hexdig_fun>
 800aa3c:	f100 3cff 	add.w	ip, r0, #4294967295
 800aa40:	fa5f fc8c 	uxtb.w	ip, ip
 800aa44:	f1bc 0f18 	cmp.w	ip, #24
 800aa48:	d91d      	bls.n	800aa86 <__gethex+0x132>
 800aa4a:	f1bb 0f00 	cmp.w	fp, #0
 800aa4e:	d000      	beq.n	800aa52 <__gethex+0xfe>
 800aa50:	4252      	negs	r2, r2
 800aa52:	4416      	add	r6, r2
 800aa54:	f8ca 1000 	str.w	r1, [sl]
 800aa58:	b1dc      	cbz	r4, 800aa92 <__gethex+0x13e>
 800aa5a:	9b01      	ldr	r3, [sp, #4]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	bf14      	ite	ne
 800aa60:	f04f 0800 	movne.w	r8, #0
 800aa64:	f04f 0806 	moveq.w	r8, #6
 800aa68:	4640      	mov	r0, r8
 800aa6a:	b005      	add	sp, #20
 800aa6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa70:	4645      	mov	r5, r8
 800aa72:	4626      	mov	r6, r4
 800aa74:	2401      	movs	r4, #1
 800aa76:	e7c7      	b.n	800aa08 <__gethex+0xb4>
 800aa78:	f04f 0b00 	mov.w	fp, #0
 800aa7c:	1ca9      	adds	r1, r5, #2
 800aa7e:	e7d0      	b.n	800aa22 <__gethex+0xce>
 800aa80:	f04f 0b01 	mov.w	fp, #1
 800aa84:	e7fa      	b.n	800aa7c <__gethex+0x128>
 800aa86:	230a      	movs	r3, #10
 800aa88:	fb03 0002 	mla	r0, r3, r2, r0
 800aa8c:	e7d0      	b.n	800aa30 <__gethex+0xdc>
 800aa8e:	4629      	mov	r1, r5
 800aa90:	e7e0      	b.n	800aa54 <__gethex+0x100>
 800aa92:	eba5 0308 	sub.w	r3, r5, r8
 800aa96:	3b01      	subs	r3, #1
 800aa98:	4621      	mov	r1, r4
 800aa9a:	2b07      	cmp	r3, #7
 800aa9c:	dc0a      	bgt.n	800aab4 <__gethex+0x160>
 800aa9e:	4648      	mov	r0, r9
 800aaa0:	f7fe f944 	bl	8008d2c <_Balloc>
 800aaa4:	4604      	mov	r4, r0
 800aaa6:	b940      	cbnz	r0, 800aaba <__gethex+0x166>
 800aaa8:	4b61      	ldr	r3, [pc, #388]	; (800ac30 <__gethex+0x2dc>)
 800aaaa:	4602      	mov	r2, r0
 800aaac:	21e4      	movs	r1, #228	; 0xe4
 800aaae:	4861      	ldr	r0, [pc, #388]	; (800ac34 <__gethex+0x2e0>)
 800aab0:	f7ff feca 	bl	800a848 <__assert_func>
 800aab4:	3101      	adds	r1, #1
 800aab6:	105b      	asrs	r3, r3, #1
 800aab8:	e7ef      	b.n	800aa9a <__gethex+0x146>
 800aaba:	f100 0a14 	add.w	sl, r0, #20
 800aabe:	2300      	movs	r3, #0
 800aac0:	495a      	ldr	r1, [pc, #360]	; (800ac2c <__gethex+0x2d8>)
 800aac2:	f8cd a004 	str.w	sl, [sp, #4]
 800aac6:	469b      	mov	fp, r3
 800aac8:	45a8      	cmp	r8, r5
 800aaca:	d342      	bcc.n	800ab52 <__gethex+0x1fe>
 800aacc:	9801      	ldr	r0, [sp, #4]
 800aace:	f840 bb04 	str.w	fp, [r0], #4
 800aad2:	eba0 000a 	sub.w	r0, r0, sl
 800aad6:	1080      	asrs	r0, r0, #2
 800aad8:	6120      	str	r0, [r4, #16]
 800aada:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800aade:	4658      	mov	r0, fp
 800aae0:	f7fe fa16 	bl	8008f10 <__hi0bits>
 800aae4:	683d      	ldr	r5, [r7, #0]
 800aae6:	eba8 0000 	sub.w	r0, r8, r0
 800aaea:	42a8      	cmp	r0, r5
 800aaec:	dd59      	ble.n	800aba2 <__gethex+0x24e>
 800aaee:	eba0 0805 	sub.w	r8, r0, r5
 800aaf2:	4641      	mov	r1, r8
 800aaf4:	4620      	mov	r0, r4
 800aaf6:	f7fe fda5 	bl	8009644 <__any_on>
 800aafa:	4683      	mov	fp, r0
 800aafc:	b1b8      	cbz	r0, 800ab2e <__gethex+0x1da>
 800aafe:	f108 33ff 	add.w	r3, r8, #4294967295
 800ab02:	1159      	asrs	r1, r3, #5
 800ab04:	f003 021f 	and.w	r2, r3, #31
 800ab08:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800ab0c:	f04f 0b01 	mov.w	fp, #1
 800ab10:	fa0b f202 	lsl.w	r2, fp, r2
 800ab14:	420a      	tst	r2, r1
 800ab16:	d00a      	beq.n	800ab2e <__gethex+0x1da>
 800ab18:	455b      	cmp	r3, fp
 800ab1a:	dd06      	ble.n	800ab2a <__gethex+0x1d6>
 800ab1c:	f1a8 0102 	sub.w	r1, r8, #2
 800ab20:	4620      	mov	r0, r4
 800ab22:	f7fe fd8f 	bl	8009644 <__any_on>
 800ab26:	2800      	cmp	r0, #0
 800ab28:	d138      	bne.n	800ab9c <__gethex+0x248>
 800ab2a:	f04f 0b02 	mov.w	fp, #2
 800ab2e:	4641      	mov	r1, r8
 800ab30:	4620      	mov	r0, r4
 800ab32:	f7ff fea7 	bl	800a884 <rshift>
 800ab36:	4446      	add	r6, r8
 800ab38:	68bb      	ldr	r3, [r7, #8]
 800ab3a:	42b3      	cmp	r3, r6
 800ab3c:	da41      	bge.n	800abc2 <__gethex+0x26e>
 800ab3e:	4621      	mov	r1, r4
 800ab40:	4648      	mov	r0, r9
 800ab42:	f7fe f933 	bl	8008dac <_Bfree>
 800ab46:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ab48:	2300      	movs	r3, #0
 800ab4a:	6013      	str	r3, [r2, #0]
 800ab4c:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800ab50:	e78a      	b.n	800aa68 <__gethex+0x114>
 800ab52:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800ab56:	2a2e      	cmp	r2, #46	; 0x2e
 800ab58:	d014      	beq.n	800ab84 <__gethex+0x230>
 800ab5a:	2b20      	cmp	r3, #32
 800ab5c:	d106      	bne.n	800ab6c <__gethex+0x218>
 800ab5e:	9b01      	ldr	r3, [sp, #4]
 800ab60:	f843 bb04 	str.w	fp, [r3], #4
 800ab64:	f04f 0b00 	mov.w	fp, #0
 800ab68:	9301      	str	r3, [sp, #4]
 800ab6a:	465b      	mov	r3, fp
 800ab6c:	7828      	ldrb	r0, [r5, #0]
 800ab6e:	9303      	str	r3, [sp, #12]
 800ab70:	f7ff feda 	bl	800a928 <__hexdig_fun>
 800ab74:	9b03      	ldr	r3, [sp, #12]
 800ab76:	f000 000f 	and.w	r0, r0, #15
 800ab7a:	4098      	lsls	r0, r3
 800ab7c:	ea4b 0b00 	orr.w	fp, fp, r0
 800ab80:	3304      	adds	r3, #4
 800ab82:	e7a1      	b.n	800aac8 <__gethex+0x174>
 800ab84:	45a8      	cmp	r8, r5
 800ab86:	d8e8      	bhi.n	800ab5a <__gethex+0x206>
 800ab88:	2201      	movs	r2, #1
 800ab8a:	4628      	mov	r0, r5
 800ab8c:	9303      	str	r3, [sp, #12]
 800ab8e:	f7ff fe31 	bl	800a7f4 <strncmp>
 800ab92:	4926      	ldr	r1, [pc, #152]	; (800ac2c <__gethex+0x2d8>)
 800ab94:	9b03      	ldr	r3, [sp, #12]
 800ab96:	2800      	cmp	r0, #0
 800ab98:	d1df      	bne.n	800ab5a <__gethex+0x206>
 800ab9a:	e795      	b.n	800aac8 <__gethex+0x174>
 800ab9c:	f04f 0b03 	mov.w	fp, #3
 800aba0:	e7c5      	b.n	800ab2e <__gethex+0x1da>
 800aba2:	da0b      	bge.n	800abbc <__gethex+0x268>
 800aba4:	eba5 0800 	sub.w	r8, r5, r0
 800aba8:	4621      	mov	r1, r4
 800abaa:	4642      	mov	r2, r8
 800abac:	4648      	mov	r0, r9
 800abae:	f7fe fb17 	bl	80091e0 <__lshift>
 800abb2:	eba6 0608 	sub.w	r6, r6, r8
 800abb6:	4604      	mov	r4, r0
 800abb8:	f100 0a14 	add.w	sl, r0, #20
 800abbc:	f04f 0b00 	mov.w	fp, #0
 800abc0:	e7ba      	b.n	800ab38 <__gethex+0x1e4>
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	42b3      	cmp	r3, r6
 800abc6:	dd73      	ble.n	800acb0 <__gethex+0x35c>
 800abc8:	1b9e      	subs	r6, r3, r6
 800abca:	42b5      	cmp	r5, r6
 800abcc:	dc34      	bgt.n	800ac38 <__gethex+0x2e4>
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	2b02      	cmp	r3, #2
 800abd2:	d023      	beq.n	800ac1c <__gethex+0x2c8>
 800abd4:	2b03      	cmp	r3, #3
 800abd6:	d025      	beq.n	800ac24 <__gethex+0x2d0>
 800abd8:	2b01      	cmp	r3, #1
 800abda:	d115      	bne.n	800ac08 <__gethex+0x2b4>
 800abdc:	42b5      	cmp	r5, r6
 800abde:	d113      	bne.n	800ac08 <__gethex+0x2b4>
 800abe0:	2d01      	cmp	r5, #1
 800abe2:	d10b      	bne.n	800abfc <__gethex+0x2a8>
 800abe4:	9a02      	ldr	r2, [sp, #8]
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	6013      	str	r3, [r2, #0]
 800abea:	2301      	movs	r3, #1
 800abec:	6123      	str	r3, [r4, #16]
 800abee:	f8ca 3000 	str.w	r3, [sl]
 800abf2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800abf4:	f04f 0862 	mov.w	r8, #98	; 0x62
 800abf8:	601c      	str	r4, [r3, #0]
 800abfa:	e735      	b.n	800aa68 <__gethex+0x114>
 800abfc:	1e69      	subs	r1, r5, #1
 800abfe:	4620      	mov	r0, r4
 800ac00:	f7fe fd20 	bl	8009644 <__any_on>
 800ac04:	2800      	cmp	r0, #0
 800ac06:	d1ed      	bne.n	800abe4 <__gethex+0x290>
 800ac08:	4621      	mov	r1, r4
 800ac0a:	4648      	mov	r0, r9
 800ac0c:	f7fe f8ce 	bl	8008dac <_Bfree>
 800ac10:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ac12:	2300      	movs	r3, #0
 800ac14:	6013      	str	r3, [r2, #0]
 800ac16:	f04f 0850 	mov.w	r8, #80	; 0x50
 800ac1a:	e725      	b.n	800aa68 <__gethex+0x114>
 800ac1c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d1f2      	bne.n	800ac08 <__gethex+0x2b4>
 800ac22:	e7df      	b.n	800abe4 <__gethex+0x290>
 800ac24:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d1dc      	bne.n	800abe4 <__gethex+0x290>
 800ac2a:	e7ed      	b.n	800ac08 <__gethex+0x2b4>
 800ac2c:	0800b9fc 	.word	0x0800b9fc
 800ac30:	0800b891 	.word	0x0800b891
 800ac34:	0800bba6 	.word	0x0800bba6
 800ac38:	f106 38ff 	add.w	r8, r6, #4294967295
 800ac3c:	f1bb 0f00 	cmp.w	fp, #0
 800ac40:	d133      	bne.n	800acaa <__gethex+0x356>
 800ac42:	f1b8 0f00 	cmp.w	r8, #0
 800ac46:	d004      	beq.n	800ac52 <__gethex+0x2fe>
 800ac48:	4641      	mov	r1, r8
 800ac4a:	4620      	mov	r0, r4
 800ac4c:	f7fe fcfa 	bl	8009644 <__any_on>
 800ac50:	4683      	mov	fp, r0
 800ac52:	ea4f 1268 	mov.w	r2, r8, asr #5
 800ac56:	2301      	movs	r3, #1
 800ac58:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800ac5c:	f008 081f 	and.w	r8, r8, #31
 800ac60:	fa03 f308 	lsl.w	r3, r3, r8
 800ac64:	4213      	tst	r3, r2
 800ac66:	4631      	mov	r1, r6
 800ac68:	4620      	mov	r0, r4
 800ac6a:	bf18      	it	ne
 800ac6c:	f04b 0b02 	orrne.w	fp, fp, #2
 800ac70:	1bad      	subs	r5, r5, r6
 800ac72:	f7ff fe07 	bl	800a884 <rshift>
 800ac76:	687e      	ldr	r6, [r7, #4]
 800ac78:	f04f 0802 	mov.w	r8, #2
 800ac7c:	f1bb 0f00 	cmp.w	fp, #0
 800ac80:	d04a      	beq.n	800ad18 <__gethex+0x3c4>
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	2b02      	cmp	r3, #2
 800ac86:	d016      	beq.n	800acb6 <__gethex+0x362>
 800ac88:	2b03      	cmp	r3, #3
 800ac8a:	d018      	beq.n	800acbe <__gethex+0x36a>
 800ac8c:	2b01      	cmp	r3, #1
 800ac8e:	d109      	bne.n	800aca4 <__gethex+0x350>
 800ac90:	f01b 0f02 	tst.w	fp, #2
 800ac94:	d006      	beq.n	800aca4 <__gethex+0x350>
 800ac96:	f8da 3000 	ldr.w	r3, [sl]
 800ac9a:	ea4b 0b03 	orr.w	fp, fp, r3
 800ac9e:	f01b 0f01 	tst.w	fp, #1
 800aca2:	d10f      	bne.n	800acc4 <__gethex+0x370>
 800aca4:	f048 0810 	orr.w	r8, r8, #16
 800aca8:	e036      	b.n	800ad18 <__gethex+0x3c4>
 800acaa:	f04f 0b01 	mov.w	fp, #1
 800acae:	e7d0      	b.n	800ac52 <__gethex+0x2fe>
 800acb0:	f04f 0801 	mov.w	r8, #1
 800acb4:	e7e2      	b.n	800ac7c <__gethex+0x328>
 800acb6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800acb8:	f1c3 0301 	rsb	r3, r3, #1
 800acbc:	930f      	str	r3, [sp, #60]	; 0x3c
 800acbe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d0ef      	beq.n	800aca4 <__gethex+0x350>
 800acc4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800acc8:	f104 0214 	add.w	r2, r4, #20
 800accc:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800acd0:	9301      	str	r3, [sp, #4]
 800acd2:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800acd6:	2300      	movs	r3, #0
 800acd8:	4694      	mov	ip, r2
 800acda:	f852 1b04 	ldr.w	r1, [r2], #4
 800acde:	f1b1 3fff 	cmp.w	r1, #4294967295
 800ace2:	d01e      	beq.n	800ad22 <__gethex+0x3ce>
 800ace4:	3101      	adds	r1, #1
 800ace6:	f8cc 1000 	str.w	r1, [ip]
 800acea:	f1b8 0f02 	cmp.w	r8, #2
 800acee:	f104 0214 	add.w	r2, r4, #20
 800acf2:	d13d      	bne.n	800ad70 <__gethex+0x41c>
 800acf4:	683b      	ldr	r3, [r7, #0]
 800acf6:	3b01      	subs	r3, #1
 800acf8:	42ab      	cmp	r3, r5
 800acfa:	d10b      	bne.n	800ad14 <__gethex+0x3c0>
 800acfc:	1169      	asrs	r1, r5, #5
 800acfe:	2301      	movs	r3, #1
 800ad00:	f005 051f 	and.w	r5, r5, #31
 800ad04:	fa03 f505 	lsl.w	r5, r3, r5
 800ad08:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ad0c:	421d      	tst	r5, r3
 800ad0e:	bf18      	it	ne
 800ad10:	f04f 0801 	movne.w	r8, #1
 800ad14:	f048 0820 	orr.w	r8, r8, #32
 800ad18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ad1a:	601c      	str	r4, [r3, #0]
 800ad1c:	9b02      	ldr	r3, [sp, #8]
 800ad1e:	601e      	str	r6, [r3, #0]
 800ad20:	e6a2      	b.n	800aa68 <__gethex+0x114>
 800ad22:	4290      	cmp	r0, r2
 800ad24:	f842 3c04 	str.w	r3, [r2, #-4]
 800ad28:	d8d6      	bhi.n	800acd8 <__gethex+0x384>
 800ad2a:	68a2      	ldr	r2, [r4, #8]
 800ad2c:	4593      	cmp	fp, r2
 800ad2e:	db17      	blt.n	800ad60 <__gethex+0x40c>
 800ad30:	6861      	ldr	r1, [r4, #4]
 800ad32:	4648      	mov	r0, r9
 800ad34:	3101      	adds	r1, #1
 800ad36:	f7fd fff9 	bl	8008d2c <_Balloc>
 800ad3a:	4682      	mov	sl, r0
 800ad3c:	b918      	cbnz	r0, 800ad46 <__gethex+0x3f2>
 800ad3e:	4b1b      	ldr	r3, [pc, #108]	; (800adac <__gethex+0x458>)
 800ad40:	4602      	mov	r2, r0
 800ad42:	2184      	movs	r1, #132	; 0x84
 800ad44:	e6b3      	b.n	800aaae <__gethex+0x15a>
 800ad46:	6922      	ldr	r2, [r4, #16]
 800ad48:	3202      	adds	r2, #2
 800ad4a:	f104 010c 	add.w	r1, r4, #12
 800ad4e:	0092      	lsls	r2, r2, #2
 800ad50:	300c      	adds	r0, #12
 800ad52:	f7ff fd61 	bl	800a818 <memcpy>
 800ad56:	4621      	mov	r1, r4
 800ad58:	4648      	mov	r0, r9
 800ad5a:	f7fe f827 	bl	8008dac <_Bfree>
 800ad5e:	4654      	mov	r4, sl
 800ad60:	6922      	ldr	r2, [r4, #16]
 800ad62:	1c51      	adds	r1, r2, #1
 800ad64:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800ad68:	6121      	str	r1, [r4, #16]
 800ad6a:	2101      	movs	r1, #1
 800ad6c:	6151      	str	r1, [r2, #20]
 800ad6e:	e7bc      	b.n	800acea <__gethex+0x396>
 800ad70:	6921      	ldr	r1, [r4, #16]
 800ad72:	4559      	cmp	r1, fp
 800ad74:	dd0b      	ble.n	800ad8e <__gethex+0x43a>
 800ad76:	2101      	movs	r1, #1
 800ad78:	4620      	mov	r0, r4
 800ad7a:	f7ff fd83 	bl	800a884 <rshift>
 800ad7e:	68bb      	ldr	r3, [r7, #8]
 800ad80:	3601      	adds	r6, #1
 800ad82:	42b3      	cmp	r3, r6
 800ad84:	f6ff aedb 	blt.w	800ab3e <__gethex+0x1ea>
 800ad88:	f04f 0801 	mov.w	r8, #1
 800ad8c:	e7c2      	b.n	800ad14 <__gethex+0x3c0>
 800ad8e:	f015 051f 	ands.w	r5, r5, #31
 800ad92:	d0f9      	beq.n	800ad88 <__gethex+0x434>
 800ad94:	9b01      	ldr	r3, [sp, #4]
 800ad96:	441a      	add	r2, r3
 800ad98:	f1c5 0520 	rsb	r5, r5, #32
 800ad9c:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800ada0:	f7fe f8b6 	bl	8008f10 <__hi0bits>
 800ada4:	42a8      	cmp	r0, r5
 800ada6:	dbe6      	blt.n	800ad76 <__gethex+0x422>
 800ada8:	e7ee      	b.n	800ad88 <__gethex+0x434>
 800adaa:	bf00      	nop
 800adac:	0800b891 	.word	0x0800b891

0800adb0 <L_shift>:
 800adb0:	f1c2 0208 	rsb	r2, r2, #8
 800adb4:	0092      	lsls	r2, r2, #2
 800adb6:	b570      	push	{r4, r5, r6, lr}
 800adb8:	f1c2 0620 	rsb	r6, r2, #32
 800adbc:	6843      	ldr	r3, [r0, #4]
 800adbe:	6804      	ldr	r4, [r0, #0]
 800adc0:	fa03 f506 	lsl.w	r5, r3, r6
 800adc4:	432c      	orrs	r4, r5
 800adc6:	40d3      	lsrs	r3, r2
 800adc8:	6004      	str	r4, [r0, #0]
 800adca:	f840 3f04 	str.w	r3, [r0, #4]!
 800adce:	4288      	cmp	r0, r1
 800add0:	d3f4      	bcc.n	800adbc <L_shift+0xc>
 800add2:	bd70      	pop	{r4, r5, r6, pc}

0800add4 <__match>:
 800add4:	b530      	push	{r4, r5, lr}
 800add6:	6803      	ldr	r3, [r0, #0]
 800add8:	3301      	adds	r3, #1
 800adda:	f811 4b01 	ldrb.w	r4, [r1], #1
 800adde:	b914      	cbnz	r4, 800ade6 <__match+0x12>
 800ade0:	6003      	str	r3, [r0, #0]
 800ade2:	2001      	movs	r0, #1
 800ade4:	bd30      	pop	{r4, r5, pc}
 800ade6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800adea:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800adee:	2d19      	cmp	r5, #25
 800adf0:	bf98      	it	ls
 800adf2:	3220      	addls	r2, #32
 800adf4:	42a2      	cmp	r2, r4
 800adf6:	d0f0      	beq.n	800adda <__match+0x6>
 800adf8:	2000      	movs	r0, #0
 800adfa:	e7f3      	b.n	800ade4 <__match+0x10>

0800adfc <__hexnan>:
 800adfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae00:	680b      	ldr	r3, [r1, #0]
 800ae02:	6801      	ldr	r1, [r0, #0]
 800ae04:	115e      	asrs	r6, r3, #5
 800ae06:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ae0a:	f013 031f 	ands.w	r3, r3, #31
 800ae0e:	b087      	sub	sp, #28
 800ae10:	bf18      	it	ne
 800ae12:	3604      	addne	r6, #4
 800ae14:	2500      	movs	r5, #0
 800ae16:	1f37      	subs	r7, r6, #4
 800ae18:	4682      	mov	sl, r0
 800ae1a:	4690      	mov	r8, r2
 800ae1c:	9301      	str	r3, [sp, #4]
 800ae1e:	f846 5c04 	str.w	r5, [r6, #-4]
 800ae22:	46b9      	mov	r9, r7
 800ae24:	463c      	mov	r4, r7
 800ae26:	9502      	str	r5, [sp, #8]
 800ae28:	46ab      	mov	fp, r5
 800ae2a:	784a      	ldrb	r2, [r1, #1]
 800ae2c:	1c4b      	adds	r3, r1, #1
 800ae2e:	9303      	str	r3, [sp, #12]
 800ae30:	b342      	cbz	r2, 800ae84 <__hexnan+0x88>
 800ae32:	4610      	mov	r0, r2
 800ae34:	9105      	str	r1, [sp, #20]
 800ae36:	9204      	str	r2, [sp, #16]
 800ae38:	f7ff fd76 	bl	800a928 <__hexdig_fun>
 800ae3c:	2800      	cmp	r0, #0
 800ae3e:	d14f      	bne.n	800aee0 <__hexnan+0xe4>
 800ae40:	9a04      	ldr	r2, [sp, #16]
 800ae42:	9905      	ldr	r1, [sp, #20]
 800ae44:	2a20      	cmp	r2, #32
 800ae46:	d818      	bhi.n	800ae7a <__hexnan+0x7e>
 800ae48:	9b02      	ldr	r3, [sp, #8]
 800ae4a:	459b      	cmp	fp, r3
 800ae4c:	dd13      	ble.n	800ae76 <__hexnan+0x7a>
 800ae4e:	454c      	cmp	r4, r9
 800ae50:	d206      	bcs.n	800ae60 <__hexnan+0x64>
 800ae52:	2d07      	cmp	r5, #7
 800ae54:	dc04      	bgt.n	800ae60 <__hexnan+0x64>
 800ae56:	462a      	mov	r2, r5
 800ae58:	4649      	mov	r1, r9
 800ae5a:	4620      	mov	r0, r4
 800ae5c:	f7ff ffa8 	bl	800adb0 <L_shift>
 800ae60:	4544      	cmp	r4, r8
 800ae62:	d950      	bls.n	800af06 <__hexnan+0x10a>
 800ae64:	2300      	movs	r3, #0
 800ae66:	f1a4 0904 	sub.w	r9, r4, #4
 800ae6a:	f844 3c04 	str.w	r3, [r4, #-4]
 800ae6e:	f8cd b008 	str.w	fp, [sp, #8]
 800ae72:	464c      	mov	r4, r9
 800ae74:	461d      	mov	r5, r3
 800ae76:	9903      	ldr	r1, [sp, #12]
 800ae78:	e7d7      	b.n	800ae2a <__hexnan+0x2e>
 800ae7a:	2a29      	cmp	r2, #41	; 0x29
 800ae7c:	d155      	bne.n	800af2a <__hexnan+0x12e>
 800ae7e:	3102      	adds	r1, #2
 800ae80:	f8ca 1000 	str.w	r1, [sl]
 800ae84:	f1bb 0f00 	cmp.w	fp, #0
 800ae88:	d04f      	beq.n	800af2a <__hexnan+0x12e>
 800ae8a:	454c      	cmp	r4, r9
 800ae8c:	d206      	bcs.n	800ae9c <__hexnan+0xa0>
 800ae8e:	2d07      	cmp	r5, #7
 800ae90:	dc04      	bgt.n	800ae9c <__hexnan+0xa0>
 800ae92:	462a      	mov	r2, r5
 800ae94:	4649      	mov	r1, r9
 800ae96:	4620      	mov	r0, r4
 800ae98:	f7ff ff8a 	bl	800adb0 <L_shift>
 800ae9c:	4544      	cmp	r4, r8
 800ae9e:	d934      	bls.n	800af0a <__hexnan+0x10e>
 800aea0:	f1a8 0204 	sub.w	r2, r8, #4
 800aea4:	4623      	mov	r3, r4
 800aea6:	f853 1b04 	ldr.w	r1, [r3], #4
 800aeaa:	f842 1f04 	str.w	r1, [r2, #4]!
 800aeae:	429f      	cmp	r7, r3
 800aeb0:	d2f9      	bcs.n	800aea6 <__hexnan+0xaa>
 800aeb2:	1b3b      	subs	r3, r7, r4
 800aeb4:	f023 0303 	bic.w	r3, r3, #3
 800aeb8:	3304      	adds	r3, #4
 800aeba:	3e03      	subs	r6, #3
 800aebc:	3401      	adds	r4, #1
 800aebe:	42a6      	cmp	r6, r4
 800aec0:	bf38      	it	cc
 800aec2:	2304      	movcc	r3, #4
 800aec4:	4443      	add	r3, r8
 800aec6:	2200      	movs	r2, #0
 800aec8:	f843 2b04 	str.w	r2, [r3], #4
 800aecc:	429f      	cmp	r7, r3
 800aece:	d2fb      	bcs.n	800aec8 <__hexnan+0xcc>
 800aed0:	683b      	ldr	r3, [r7, #0]
 800aed2:	b91b      	cbnz	r3, 800aedc <__hexnan+0xe0>
 800aed4:	4547      	cmp	r7, r8
 800aed6:	d126      	bne.n	800af26 <__hexnan+0x12a>
 800aed8:	2301      	movs	r3, #1
 800aeda:	603b      	str	r3, [r7, #0]
 800aedc:	2005      	movs	r0, #5
 800aede:	e025      	b.n	800af2c <__hexnan+0x130>
 800aee0:	3501      	adds	r5, #1
 800aee2:	2d08      	cmp	r5, #8
 800aee4:	f10b 0b01 	add.w	fp, fp, #1
 800aee8:	dd06      	ble.n	800aef8 <__hexnan+0xfc>
 800aeea:	4544      	cmp	r4, r8
 800aeec:	d9c3      	bls.n	800ae76 <__hexnan+0x7a>
 800aeee:	2300      	movs	r3, #0
 800aef0:	f844 3c04 	str.w	r3, [r4, #-4]
 800aef4:	2501      	movs	r5, #1
 800aef6:	3c04      	subs	r4, #4
 800aef8:	6822      	ldr	r2, [r4, #0]
 800aefa:	f000 000f 	and.w	r0, r0, #15
 800aefe:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800af02:	6020      	str	r0, [r4, #0]
 800af04:	e7b7      	b.n	800ae76 <__hexnan+0x7a>
 800af06:	2508      	movs	r5, #8
 800af08:	e7b5      	b.n	800ae76 <__hexnan+0x7a>
 800af0a:	9b01      	ldr	r3, [sp, #4]
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d0df      	beq.n	800aed0 <__hexnan+0xd4>
 800af10:	f1c3 0320 	rsb	r3, r3, #32
 800af14:	f04f 32ff 	mov.w	r2, #4294967295
 800af18:	40da      	lsrs	r2, r3
 800af1a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800af1e:	4013      	ands	r3, r2
 800af20:	f846 3c04 	str.w	r3, [r6, #-4]
 800af24:	e7d4      	b.n	800aed0 <__hexnan+0xd4>
 800af26:	3f04      	subs	r7, #4
 800af28:	e7d2      	b.n	800aed0 <__hexnan+0xd4>
 800af2a:	2004      	movs	r0, #4
 800af2c:	b007      	add	sp, #28
 800af2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800af32 <__ascii_mbtowc>:
 800af32:	b082      	sub	sp, #8
 800af34:	b901      	cbnz	r1, 800af38 <__ascii_mbtowc+0x6>
 800af36:	a901      	add	r1, sp, #4
 800af38:	b142      	cbz	r2, 800af4c <__ascii_mbtowc+0x1a>
 800af3a:	b14b      	cbz	r3, 800af50 <__ascii_mbtowc+0x1e>
 800af3c:	7813      	ldrb	r3, [r2, #0]
 800af3e:	600b      	str	r3, [r1, #0]
 800af40:	7812      	ldrb	r2, [r2, #0]
 800af42:	1e10      	subs	r0, r2, #0
 800af44:	bf18      	it	ne
 800af46:	2001      	movne	r0, #1
 800af48:	b002      	add	sp, #8
 800af4a:	4770      	bx	lr
 800af4c:	4610      	mov	r0, r2
 800af4e:	e7fb      	b.n	800af48 <__ascii_mbtowc+0x16>
 800af50:	f06f 0001 	mvn.w	r0, #1
 800af54:	e7f8      	b.n	800af48 <__ascii_mbtowc+0x16>

0800af56 <_realloc_r>:
 800af56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af5a:	4680      	mov	r8, r0
 800af5c:	4614      	mov	r4, r2
 800af5e:	460e      	mov	r6, r1
 800af60:	b921      	cbnz	r1, 800af6c <_realloc_r+0x16>
 800af62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800af66:	4611      	mov	r1, r2
 800af68:	f7fb bf3e 	b.w	8006de8 <_malloc_r>
 800af6c:	b92a      	cbnz	r2, 800af7a <_realloc_r+0x24>
 800af6e:	f7fd fe91 	bl	8008c94 <_free_r>
 800af72:	4625      	mov	r5, r4
 800af74:	4628      	mov	r0, r5
 800af76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af7a:	f000 f842 	bl	800b002 <_malloc_usable_size_r>
 800af7e:	4284      	cmp	r4, r0
 800af80:	4607      	mov	r7, r0
 800af82:	d802      	bhi.n	800af8a <_realloc_r+0x34>
 800af84:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800af88:	d812      	bhi.n	800afb0 <_realloc_r+0x5a>
 800af8a:	4621      	mov	r1, r4
 800af8c:	4640      	mov	r0, r8
 800af8e:	f7fb ff2b 	bl	8006de8 <_malloc_r>
 800af92:	4605      	mov	r5, r0
 800af94:	2800      	cmp	r0, #0
 800af96:	d0ed      	beq.n	800af74 <_realloc_r+0x1e>
 800af98:	42bc      	cmp	r4, r7
 800af9a:	4622      	mov	r2, r4
 800af9c:	4631      	mov	r1, r6
 800af9e:	bf28      	it	cs
 800afa0:	463a      	movcs	r2, r7
 800afa2:	f7ff fc39 	bl	800a818 <memcpy>
 800afa6:	4631      	mov	r1, r6
 800afa8:	4640      	mov	r0, r8
 800afaa:	f7fd fe73 	bl	8008c94 <_free_r>
 800afae:	e7e1      	b.n	800af74 <_realloc_r+0x1e>
 800afb0:	4635      	mov	r5, r6
 800afb2:	e7df      	b.n	800af74 <_realloc_r+0x1e>

0800afb4 <__ascii_wctomb>:
 800afb4:	b149      	cbz	r1, 800afca <__ascii_wctomb+0x16>
 800afb6:	2aff      	cmp	r2, #255	; 0xff
 800afb8:	bf85      	ittet	hi
 800afba:	238a      	movhi	r3, #138	; 0x8a
 800afbc:	6003      	strhi	r3, [r0, #0]
 800afbe:	700a      	strbls	r2, [r1, #0]
 800afc0:	f04f 30ff 	movhi.w	r0, #4294967295
 800afc4:	bf98      	it	ls
 800afc6:	2001      	movls	r0, #1
 800afc8:	4770      	bx	lr
 800afca:	4608      	mov	r0, r1
 800afcc:	4770      	bx	lr
	...

0800afd0 <fiprintf>:
 800afd0:	b40e      	push	{r1, r2, r3}
 800afd2:	b503      	push	{r0, r1, lr}
 800afd4:	4601      	mov	r1, r0
 800afd6:	ab03      	add	r3, sp, #12
 800afd8:	4805      	ldr	r0, [pc, #20]	; (800aff0 <fiprintf+0x20>)
 800afda:	f853 2b04 	ldr.w	r2, [r3], #4
 800afde:	6800      	ldr	r0, [r0, #0]
 800afe0:	9301      	str	r3, [sp, #4]
 800afe2:	f000 f83f 	bl	800b064 <_vfiprintf_r>
 800afe6:	b002      	add	sp, #8
 800afe8:	f85d eb04 	ldr.w	lr, [sp], #4
 800afec:	b003      	add	sp, #12
 800afee:	4770      	bx	lr
 800aff0:	20000090 	.word	0x20000090

0800aff4 <abort>:
 800aff4:	b508      	push	{r3, lr}
 800aff6:	2006      	movs	r0, #6
 800aff8:	f000 fa0c 	bl	800b414 <raise>
 800affc:	2001      	movs	r0, #1
 800affe:	f7f7 f879 	bl	80020f4 <_exit>

0800b002 <_malloc_usable_size_r>:
 800b002:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b006:	1f18      	subs	r0, r3, #4
 800b008:	2b00      	cmp	r3, #0
 800b00a:	bfbc      	itt	lt
 800b00c:	580b      	ldrlt	r3, [r1, r0]
 800b00e:	18c0      	addlt	r0, r0, r3
 800b010:	4770      	bx	lr

0800b012 <__sfputc_r>:
 800b012:	6893      	ldr	r3, [r2, #8]
 800b014:	3b01      	subs	r3, #1
 800b016:	2b00      	cmp	r3, #0
 800b018:	b410      	push	{r4}
 800b01a:	6093      	str	r3, [r2, #8]
 800b01c:	da08      	bge.n	800b030 <__sfputc_r+0x1e>
 800b01e:	6994      	ldr	r4, [r2, #24]
 800b020:	42a3      	cmp	r3, r4
 800b022:	db01      	blt.n	800b028 <__sfputc_r+0x16>
 800b024:	290a      	cmp	r1, #10
 800b026:	d103      	bne.n	800b030 <__sfputc_r+0x1e>
 800b028:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b02c:	f000 b934 	b.w	800b298 <__swbuf_r>
 800b030:	6813      	ldr	r3, [r2, #0]
 800b032:	1c58      	adds	r0, r3, #1
 800b034:	6010      	str	r0, [r2, #0]
 800b036:	7019      	strb	r1, [r3, #0]
 800b038:	4608      	mov	r0, r1
 800b03a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b03e:	4770      	bx	lr

0800b040 <__sfputs_r>:
 800b040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b042:	4606      	mov	r6, r0
 800b044:	460f      	mov	r7, r1
 800b046:	4614      	mov	r4, r2
 800b048:	18d5      	adds	r5, r2, r3
 800b04a:	42ac      	cmp	r4, r5
 800b04c:	d101      	bne.n	800b052 <__sfputs_r+0x12>
 800b04e:	2000      	movs	r0, #0
 800b050:	e007      	b.n	800b062 <__sfputs_r+0x22>
 800b052:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b056:	463a      	mov	r2, r7
 800b058:	4630      	mov	r0, r6
 800b05a:	f7ff ffda 	bl	800b012 <__sfputc_r>
 800b05e:	1c43      	adds	r3, r0, #1
 800b060:	d1f3      	bne.n	800b04a <__sfputs_r+0xa>
 800b062:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b064 <_vfiprintf_r>:
 800b064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b068:	460d      	mov	r5, r1
 800b06a:	b09d      	sub	sp, #116	; 0x74
 800b06c:	4614      	mov	r4, r2
 800b06e:	4698      	mov	r8, r3
 800b070:	4606      	mov	r6, r0
 800b072:	b118      	cbz	r0, 800b07c <_vfiprintf_r+0x18>
 800b074:	6a03      	ldr	r3, [r0, #32]
 800b076:	b90b      	cbnz	r3, 800b07c <_vfiprintf_r+0x18>
 800b078:	f7fc fe44 	bl	8007d04 <__sinit>
 800b07c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b07e:	07d9      	lsls	r1, r3, #31
 800b080:	d405      	bmi.n	800b08e <_vfiprintf_r+0x2a>
 800b082:	89ab      	ldrh	r3, [r5, #12]
 800b084:	059a      	lsls	r2, r3, #22
 800b086:	d402      	bmi.n	800b08e <_vfiprintf_r+0x2a>
 800b088:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b08a:	f7fc ff78 	bl	8007f7e <__retarget_lock_acquire_recursive>
 800b08e:	89ab      	ldrh	r3, [r5, #12]
 800b090:	071b      	lsls	r3, r3, #28
 800b092:	d501      	bpl.n	800b098 <_vfiprintf_r+0x34>
 800b094:	692b      	ldr	r3, [r5, #16]
 800b096:	b99b      	cbnz	r3, 800b0c0 <_vfiprintf_r+0x5c>
 800b098:	4629      	mov	r1, r5
 800b09a:	4630      	mov	r0, r6
 800b09c:	f000 f93a 	bl	800b314 <__swsetup_r>
 800b0a0:	b170      	cbz	r0, 800b0c0 <_vfiprintf_r+0x5c>
 800b0a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b0a4:	07dc      	lsls	r4, r3, #31
 800b0a6:	d504      	bpl.n	800b0b2 <_vfiprintf_r+0x4e>
 800b0a8:	f04f 30ff 	mov.w	r0, #4294967295
 800b0ac:	b01d      	add	sp, #116	; 0x74
 800b0ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0b2:	89ab      	ldrh	r3, [r5, #12]
 800b0b4:	0598      	lsls	r0, r3, #22
 800b0b6:	d4f7      	bmi.n	800b0a8 <_vfiprintf_r+0x44>
 800b0b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b0ba:	f7fc ff61 	bl	8007f80 <__retarget_lock_release_recursive>
 800b0be:	e7f3      	b.n	800b0a8 <_vfiprintf_r+0x44>
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	9309      	str	r3, [sp, #36]	; 0x24
 800b0c4:	2320      	movs	r3, #32
 800b0c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b0ca:	f8cd 800c 	str.w	r8, [sp, #12]
 800b0ce:	2330      	movs	r3, #48	; 0x30
 800b0d0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800b284 <_vfiprintf_r+0x220>
 800b0d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b0d8:	f04f 0901 	mov.w	r9, #1
 800b0dc:	4623      	mov	r3, r4
 800b0de:	469a      	mov	sl, r3
 800b0e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b0e4:	b10a      	cbz	r2, 800b0ea <_vfiprintf_r+0x86>
 800b0e6:	2a25      	cmp	r2, #37	; 0x25
 800b0e8:	d1f9      	bne.n	800b0de <_vfiprintf_r+0x7a>
 800b0ea:	ebba 0b04 	subs.w	fp, sl, r4
 800b0ee:	d00b      	beq.n	800b108 <_vfiprintf_r+0xa4>
 800b0f0:	465b      	mov	r3, fp
 800b0f2:	4622      	mov	r2, r4
 800b0f4:	4629      	mov	r1, r5
 800b0f6:	4630      	mov	r0, r6
 800b0f8:	f7ff ffa2 	bl	800b040 <__sfputs_r>
 800b0fc:	3001      	adds	r0, #1
 800b0fe:	f000 80a9 	beq.w	800b254 <_vfiprintf_r+0x1f0>
 800b102:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b104:	445a      	add	r2, fp
 800b106:	9209      	str	r2, [sp, #36]	; 0x24
 800b108:	f89a 3000 	ldrb.w	r3, [sl]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	f000 80a1 	beq.w	800b254 <_vfiprintf_r+0x1f0>
 800b112:	2300      	movs	r3, #0
 800b114:	f04f 32ff 	mov.w	r2, #4294967295
 800b118:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b11c:	f10a 0a01 	add.w	sl, sl, #1
 800b120:	9304      	str	r3, [sp, #16]
 800b122:	9307      	str	r3, [sp, #28]
 800b124:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b128:	931a      	str	r3, [sp, #104]	; 0x68
 800b12a:	4654      	mov	r4, sl
 800b12c:	2205      	movs	r2, #5
 800b12e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b132:	4854      	ldr	r0, [pc, #336]	; (800b284 <_vfiprintf_r+0x220>)
 800b134:	f7f5 f84c 	bl	80001d0 <memchr>
 800b138:	9a04      	ldr	r2, [sp, #16]
 800b13a:	b9d8      	cbnz	r0, 800b174 <_vfiprintf_r+0x110>
 800b13c:	06d1      	lsls	r1, r2, #27
 800b13e:	bf44      	itt	mi
 800b140:	2320      	movmi	r3, #32
 800b142:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b146:	0713      	lsls	r3, r2, #28
 800b148:	bf44      	itt	mi
 800b14a:	232b      	movmi	r3, #43	; 0x2b
 800b14c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b150:	f89a 3000 	ldrb.w	r3, [sl]
 800b154:	2b2a      	cmp	r3, #42	; 0x2a
 800b156:	d015      	beq.n	800b184 <_vfiprintf_r+0x120>
 800b158:	9a07      	ldr	r2, [sp, #28]
 800b15a:	4654      	mov	r4, sl
 800b15c:	2000      	movs	r0, #0
 800b15e:	f04f 0c0a 	mov.w	ip, #10
 800b162:	4621      	mov	r1, r4
 800b164:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b168:	3b30      	subs	r3, #48	; 0x30
 800b16a:	2b09      	cmp	r3, #9
 800b16c:	d94d      	bls.n	800b20a <_vfiprintf_r+0x1a6>
 800b16e:	b1b0      	cbz	r0, 800b19e <_vfiprintf_r+0x13a>
 800b170:	9207      	str	r2, [sp, #28]
 800b172:	e014      	b.n	800b19e <_vfiprintf_r+0x13a>
 800b174:	eba0 0308 	sub.w	r3, r0, r8
 800b178:	fa09 f303 	lsl.w	r3, r9, r3
 800b17c:	4313      	orrs	r3, r2
 800b17e:	9304      	str	r3, [sp, #16]
 800b180:	46a2      	mov	sl, r4
 800b182:	e7d2      	b.n	800b12a <_vfiprintf_r+0xc6>
 800b184:	9b03      	ldr	r3, [sp, #12]
 800b186:	1d19      	adds	r1, r3, #4
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	9103      	str	r1, [sp, #12]
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	bfbb      	ittet	lt
 800b190:	425b      	neglt	r3, r3
 800b192:	f042 0202 	orrlt.w	r2, r2, #2
 800b196:	9307      	strge	r3, [sp, #28]
 800b198:	9307      	strlt	r3, [sp, #28]
 800b19a:	bfb8      	it	lt
 800b19c:	9204      	strlt	r2, [sp, #16]
 800b19e:	7823      	ldrb	r3, [r4, #0]
 800b1a0:	2b2e      	cmp	r3, #46	; 0x2e
 800b1a2:	d10c      	bne.n	800b1be <_vfiprintf_r+0x15a>
 800b1a4:	7863      	ldrb	r3, [r4, #1]
 800b1a6:	2b2a      	cmp	r3, #42	; 0x2a
 800b1a8:	d134      	bne.n	800b214 <_vfiprintf_r+0x1b0>
 800b1aa:	9b03      	ldr	r3, [sp, #12]
 800b1ac:	1d1a      	adds	r2, r3, #4
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	9203      	str	r2, [sp, #12]
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	bfb8      	it	lt
 800b1b6:	f04f 33ff 	movlt.w	r3, #4294967295
 800b1ba:	3402      	adds	r4, #2
 800b1bc:	9305      	str	r3, [sp, #20]
 800b1be:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800b294 <_vfiprintf_r+0x230>
 800b1c2:	7821      	ldrb	r1, [r4, #0]
 800b1c4:	2203      	movs	r2, #3
 800b1c6:	4650      	mov	r0, sl
 800b1c8:	f7f5 f802 	bl	80001d0 <memchr>
 800b1cc:	b138      	cbz	r0, 800b1de <_vfiprintf_r+0x17a>
 800b1ce:	9b04      	ldr	r3, [sp, #16]
 800b1d0:	eba0 000a 	sub.w	r0, r0, sl
 800b1d4:	2240      	movs	r2, #64	; 0x40
 800b1d6:	4082      	lsls	r2, r0
 800b1d8:	4313      	orrs	r3, r2
 800b1da:	3401      	adds	r4, #1
 800b1dc:	9304      	str	r3, [sp, #16]
 800b1de:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b1e2:	4829      	ldr	r0, [pc, #164]	; (800b288 <_vfiprintf_r+0x224>)
 800b1e4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b1e8:	2206      	movs	r2, #6
 800b1ea:	f7f4 fff1 	bl	80001d0 <memchr>
 800b1ee:	2800      	cmp	r0, #0
 800b1f0:	d03f      	beq.n	800b272 <_vfiprintf_r+0x20e>
 800b1f2:	4b26      	ldr	r3, [pc, #152]	; (800b28c <_vfiprintf_r+0x228>)
 800b1f4:	bb1b      	cbnz	r3, 800b23e <_vfiprintf_r+0x1da>
 800b1f6:	9b03      	ldr	r3, [sp, #12]
 800b1f8:	3307      	adds	r3, #7
 800b1fa:	f023 0307 	bic.w	r3, r3, #7
 800b1fe:	3308      	adds	r3, #8
 800b200:	9303      	str	r3, [sp, #12]
 800b202:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b204:	443b      	add	r3, r7
 800b206:	9309      	str	r3, [sp, #36]	; 0x24
 800b208:	e768      	b.n	800b0dc <_vfiprintf_r+0x78>
 800b20a:	fb0c 3202 	mla	r2, ip, r2, r3
 800b20e:	460c      	mov	r4, r1
 800b210:	2001      	movs	r0, #1
 800b212:	e7a6      	b.n	800b162 <_vfiprintf_r+0xfe>
 800b214:	2300      	movs	r3, #0
 800b216:	3401      	adds	r4, #1
 800b218:	9305      	str	r3, [sp, #20]
 800b21a:	4619      	mov	r1, r3
 800b21c:	f04f 0c0a 	mov.w	ip, #10
 800b220:	4620      	mov	r0, r4
 800b222:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b226:	3a30      	subs	r2, #48	; 0x30
 800b228:	2a09      	cmp	r2, #9
 800b22a:	d903      	bls.n	800b234 <_vfiprintf_r+0x1d0>
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d0c6      	beq.n	800b1be <_vfiprintf_r+0x15a>
 800b230:	9105      	str	r1, [sp, #20]
 800b232:	e7c4      	b.n	800b1be <_vfiprintf_r+0x15a>
 800b234:	fb0c 2101 	mla	r1, ip, r1, r2
 800b238:	4604      	mov	r4, r0
 800b23a:	2301      	movs	r3, #1
 800b23c:	e7f0      	b.n	800b220 <_vfiprintf_r+0x1bc>
 800b23e:	ab03      	add	r3, sp, #12
 800b240:	9300      	str	r3, [sp, #0]
 800b242:	462a      	mov	r2, r5
 800b244:	4b12      	ldr	r3, [pc, #72]	; (800b290 <_vfiprintf_r+0x22c>)
 800b246:	a904      	add	r1, sp, #16
 800b248:	4630      	mov	r0, r6
 800b24a:	f7fb fef9 	bl	8007040 <_printf_float>
 800b24e:	4607      	mov	r7, r0
 800b250:	1c78      	adds	r0, r7, #1
 800b252:	d1d6      	bne.n	800b202 <_vfiprintf_r+0x19e>
 800b254:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b256:	07d9      	lsls	r1, r3, #31
 800b258:	d405      	bmi.n	800b266 <_vfiprintf_r+0x202>
 800b25a:	89ab      	ldrh	r3, [r5, #12]
 800b25c:	059a      	lsls	r2, r3, #22
 800b25e:	d402      	bmi.n	800b266 <_vfiprintf_r+0x202>
 800b260:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b262:	f7fc fe8d 	bl	8007f80 <__retarget_lock_release_recursive>
 800b266:	89ab      	ldrh	r3, [r5, #12]
 800b268:	065b      	lsls	r3, r3, #25
 800b26a:	f53f af1d 	bmi.w	800b0a8 <_vfiprintf_r+0x44>
 800b26e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b270:	e71c      	b.n	800b0ac <_vfiprintf_r+0x48>
 800b272:	ab03      	add	r3, sp, #12
 800b274:	9300      	str	r3, [sp, #0]
 800b276:	462a      	mov	r2, r5
 800b278:	4b05      	ldr	r3, [pc, #20]	; (800b290 <_vfiprintf_r+0x22c>)
 800b27a:	a904      	add	r1, sp, #16
 800b27c:	4630      	mov	r0, r6
 800b27e:	f7fc f983 	bl	8007588 <_printf_i>
 800b282:	e7e4      	b.n	800b24e <_vfiprintf_r+0x1ea>
 800b284:	0800bb51 	.word	0x0800bb51
 800b288:	0800bb5b 	.word	0x0800bb5b
 800b28c:	08007041 	.word	0x08007041
 800b290:	0800b041 	.word	0x0800b041
 800b294:	0800bb57 	.word	0x0800bb57

0800b298 <__swbuf_r>:
 800b298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b29a:	460e      	mov	r6, r1
 800b29c:	4614      	mov	r4, r2
 800b29e:	4605      	mov	r5, r0
 800b2a0:	b118      	cbz	r0, 800b2aa <__swbuf_r+0x12>
 800b2a2:	6a03      	ldr	r3, [r0, #32]
 800b2a4:	b90b      	cbnz	r3, 800b2aa <__swbuf_r+0x12>
 800b2a6:	f7fc fd2d 	bl	8007d04 <__sinit>
 800b2aa:	69a3      	ldr	r3, [r4, #24]
 800b2ac:	60a3      	str	r3, [r4, #8]
 800b2ae:	89a3      	ldrh	r3, [r4, #12]
 800b2b0:	071a      	lsls	r2, r3, #28
 800b2b2:	d525      	bpl.n	800b300 <__swbuf_r+0x68>
 800b2b4:	6923      	ldr	r3, [r4, #16]
 800b2b6:	b31b      	cbz	r3, 800b300 <__swbuf_r+0x68>
 800b2b8:	6823      	ldr	r3, [r4, #0]
 800b2ba:	6922      	ldr	r2, [r4, #16]
 800b2bc:	1a98      	subs	r0, r3, r2
 800b2be:	6963      	ldr	r3, [r4, #20]
 800b2c0:	b2f6      	uxtb	r6, r6
 800b2c2:	4283      	cmp	r3, r0
 800b2c4:	4637      	mov	r7, r6
 800b2c6:	dc04      	bgt.n	800b2d2 <__swbuf_r+0x3a>
 800b2c8:	4621      	mov	r1, r4
 800b2ca:	4628      	mov	r0, r5
 800b2cc:	f7ff fa50 	bl	800a770 <_fflush_r>
 800b2d0:	b9e0      	cbnz	r0, 800b30c <__swbuf_r+0x74>
 800b2d2:	68a3      	ldr	r3, [r4, #8]
 800b2d4:	3b01      	subs	r3, #1
 800b2d6:	60a3      	str	r3, [r4, #8]
 800b2d8:	6823      	ldr	r3, [r4, #0]
 800b2da:	1c5a      	adds	r2, r3, #1
 800b2dc:	6022      	str	r2, [r4, #0]
 800b2de:	701e      	strb	r6, [r3, #0]
 800b2e0:	6962      	ldr	r2, [r4, #20]
 800b2e2:	1c43      	adds	r3, r0, #1
 800b2e4:	429a      	cmp	r2, r3
 800b2e6:	d004      	beq.n	800b2f2 <__swbuf_r+0x5a>
 800b2e8:	89a3      	ldrh	r3, [r4, #12]
 800b2ea:	07db      	lsls	r3, r3, #31
 800b2ec:	d506      	bpl.n	800b2fc <__swbuf_r+0x64>
 800b2ee:	2e0a      	cmp	r6, #10
 800b2f0:	d104      	bne.n	800b2fc <__swbuf_r+0x64>
 800b2f2:	4621      	mov	r1, r4
 800b2f4:	4628      	mov	r0, r5
 800b2f6:	f7ff fa3b 	bl	800a770 <_fflush_r>
 800b2fa:	b938      	cbnz	r0, 800b30c <__swbuf_r+0x74>
 800b2fc:	4638      	mov	r0, r7
 800b2fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b300:	4621      	mov	r1, r4
 800b302:	4628      	mov	r0, r5
 800b304:	f000 f806 	bl	800b314 <__swsetup_r>
 800b308:	2800      	cmp	r0, #0
 800b30a:	d0d5      	beq.n	800b2b8 <__swbuf_r+0x20>
 800b30c:	f04f 37ff 	mov.w	r7, #4294967295
 800b310:	e7f4      	b.n	800b2fc <__swbuf_r+0x64>
	...

0800b314 <__swsetup_r>:
 800b314:	b538      	push	{r3, r4, r5, lr}
 800b316:	4b2a      	ldr	r3, [pc, #168]	; (800b3c0 <__swsetup_r+0xac>)
 800b318:	4605      	mov	r5, r0
 800b31a:	6818      	ldr	r0, [r3, #0]
 800b31c:	460c      	mov	r4, r1
 800b31e:	b118      	cbz	r0, 800b328 <__swsetup_r+0x14>
 800b320:	6a03      	ldr	r3, [r0, #32]
 800b322:	b90b      	cbnz	r3, 800b328 <__swsetup_r+0x14>
 800b324:	f7fc fcee 	bl	8007d04 <__sinit>
 800b328:	89a3      	ldrh	r3, [r4, #12]
 800b32a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b32e:	0718      	lsls	r0, r3, #28
 800b330:	d422      	bmi.n	800b378 <__swsetup_r+0x64>
 800b332:	06d9      	lsls	r1, r3, #27
 800b334:	d407      	bmi.n	800b346 <__swsetup_r+0x32>
 800b336:	2309      	movs	r3, #9
 800b338:	602b      	str	r3, [r5, #0]
 800b33a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b33e:	81a3      	strh	r3, [r4, #12]
 800b340:	f04f 30ff 	mov.w	r0, #4294967295
 800b344:	e034      	b.n	800b3b0 <__swsetup_r+0x9c>
 800b346:	0758      	lsls	r0, r3, #29
 800b348:	d512      	bpl.n	800b370 <__swsetup_r+0x5c>
 800b34a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b34c:	b141      	cbz	r1, 800b360 <__swsetup_r+0x4c>
 800b34e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b352:	4299      	cmp	r1, r3
 800b354:	d002      	beq.n	800b35c <__swsetup_r+0x48>
 800b356:	4628      	mov	r0, r5
 800b358:	f7fd fc9c 	bl	8008c94 <_free_r>
 800b35c:	2300      	movs	r3, #0
 800b35e:	6363      	str	r3, [r4, #52]	; 0x34
 800b360:	89a3      	ldrh	r3, [r4, #12]
 800b362:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b366:	81a3      	strh	r3, [r4, #12]
 800b368:	2300      	movs	r3, #0
 800b36a:	6063      	str	r3, [r4, #4]
 800b36c:	6923      	ldr	r3, [r4, #16]
 800b36e:	6023      	str	r3, [r4, #0]
 800b370:	89a3      	ldrh	r3, [r4, #12]
 800b372:	f043 0308 	orr.w	r3, r3, #8
 800b376:	81a3      	strh	r3, [r4, #12]
 800b378:	6923      	ldr	r3, [r4, #16]
 800b37a:	b94b      	cbnz	r3, 800b390 <__swsetup_r+0x7c>
 800b37c:	89a3      	ldrh	r3, [r4, #12]
 800b37e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b382:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b386:	d003      	beq.n	800b390 <__swsetup_r+0x7c>
 800b388:	4621      	mov	r1, r4
 800b38a:	4628      	mov	r0, r5
 800b38c:	f000 f884 	bl	800b498 <__smakebuf_r>
 800b390:	89a0      	ldrh	r0, [r4, #12]
 800b392:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b396:	f010 0301 	ands.w	r3, r0, #1
 800b39a:	d00a      	beq.n	800b3b2 <__swsetup_r+0x9e>
 800b39c:	2300      	movs	r3, #0
 800b39e:	60a3      	str	r3, [r4, #8]
 800b3a0:	6963      	ldr	r3, [r4, #20]
 800b3a2:	425b      	negs	r3, r3
 800b3a4:	61a3      	str	r3, [r4, #24]
 800b3a6:	6923      	ldr	r3, [r4, #16]
 800b3a8:	b943      	cbnz	r3, 800b3bc <__swsetup_r+0xa8>
 800b3aa:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b3ae:	d1c4      	bne.n	800b33a <__swsetup_r+0x26>
 800b3b0:	bd38      	pop	{r3, r4, r5, pc}
 800b3b2:	0781      	lsls	r1, r0, #30
 800b3b4:	bf58      	it	pl
 800b3b6:	6963      	ldrpl	r3, [r4, #20]
 800b3b8:	60a3      	str	r3, [r4, #8]
 800b3ba:	e7f4      	b.n	800b3a6 <__swsetup_r+0x92>
 800b3bc:	2000      	movs	r0, #0
 800b3be:	e7f7      	b.n	800b3b0 <__swsetup_r+0x9c>
 800b3c0:	20000090 	.word	0x20000090

0800b3c4 <_raise_r>:
 800b3c4:	291f      	cmp	r1, #31
 800b3c6:	b538      	push	{r3, r4, r5, lr}
 800b3c8:	4604      	mov	r4, r0
 800b3ca:	460d      	mov	r5, r1
 800b3cc:	d904      	bls.n	800b3d8 <_raise_r+0x14>
 800b3ce:	2316      	movs	r3, #22
 800b3d0:	6003      	str	r3, [r0, #0]
 800b3d2:	f04f 30ff 	mov.w	r0, #4294967295
 800b3d6:	bd38      	pop	{r3, r4, r5, pc}
 800b3d8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800b3da:	b112      	cbz	r2, 800b3e2 <_raise_r+0x1e>
 800b3dc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b3e0:	b94b      	cbnz	r3, 800b3f6 <_raise_r+0x32>
 800b3e2:	4620      	mov	r0, r4
 800b3e4:	f000 f830 	bl	800b448 <_getpid_r>
 800b3e8:	462a      	mov	r2, r5
 800b3ea:	4601      	mov	r1, r0
 800b3ec:	4620      	mov	r0, r4
 800b3ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b3f2:	f000 b817 	b.w	800b424 <_kill_r>
 800b3f6:	2b01      	cmp	r3, #1
 800b3f8:	d00a      	beq.n	800b410 <_raise_r+0x4c>
 800b3fa:	1c59      	adds	r1, r3, #1
 800b3fc:	d103      	bne.n	800b406 <_raise_r+0x42>
 800b3fe:	2316      	movs	r3, #22
 800b400:	6003      	str	r3, [r0, #0]
 800b402:	2001      	movs	r0, #1
 800b404:	e7e7      	b.n	800b3d6 <_raise_r+0x12>
 800b406:	2400      	movs	r4, #0
 800b408:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b40c:	4628      	mov	r0, r5
 800b40e:	4798      	blx	r3
 800b410:	2000      	movs	r0, #0
 800b412:	e7e0      	b.n	800b3d6 <_raise_r+0x12>

0800b414 <raise>:
 800b414:	4b02      	ldr	r3, [pc, #8]	; (800b420 <raise+0xc>)
 800b416:	4601      	mov	r1, r0
 800b418:	6818      	ldr	r0, [r3, #0]
 800b41a:	f7ff bfd3 	b.w	800b3c4 <_raise_r>
 800b41e:	bf00      	nop
 800b420:	20000090 	.word	0x20000090

0800b424 <_kill_r>:
 800b424:	b538      	push	{r3, r4, r5, lr}
 800b426:	4d07      	ldr	r5, [pc, #28]	; (800b444 <_kill_r+0x20>)
 800b428:	2300      	movs	r3, #0
 800b42a:	4604      	mov	r4, r0
 800b42c:	4608      	mov	r0, r1
 800b42e:	4611      	mov	r1, r2
 800b430:	602b      	str	r3, [r5, #0]
 800b432:	f7f6 fe4f 	bl	80020d4 <_kill>
 800b436:	1c43      	adds	r3, r0, #1
 800b438:	d102      	bne.n	800b440 <_kill_r+0x1c>
 800b43a:	682b      	ldr	r3, [r5, #0]
 800b43c:	b103      	cbz	r3, 800b440 <_kill_r+0x1c>
 800b43e:	6023      	str	r3, [r4, #0]
 800b440:	bd38      	pop	{r3, r4, r5, pc}
 800b442:	bf00      	nop
 800b444:	20000710 	.word	0x20000710

0800b448 <_getpid_r>:
 800b448:	f7f6 be3c 	b.w	80020c4 <_getpid>

0800b44c <__swhatbuf_r>:
 800b44c:	b570      	push	{r4, r5, r6, lr}
 800b44e:	460c      	mov	r4, r1
 800b450:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b454:	2900      	cmp	r1, #0
 800b456:	b096      	sub	sp, #88	; 0x58
 800b458:	4615      	mov	r5, r2
 800b45a:	461e      	mov	r6, r3
 800b45c:	da0d      	bge.n	800b47a <__swhatbuf_r+0x2e>
 800b45e:	89a3      	ldrh	r3, [r4, #12]
 800b460:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b464:	f04f 0100 	mov.w	r1, #0
 800b468:	bf0c      	ite	eq
 800b46a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b46e:	2340      	movne	r3, #64	; 0x40
 800b470:	2000      	movs	r0, #0
 800b472:	6031      	str	r1, [r6, #0]
 800b474:	602b      	str	r3, [r5, #0]
 800b476:	b016      	add	sp, #88	; 0x58
 800b478:	bd70      	pop	{r4, r5, r6, pc}
 800b47a:	466a      	mov	r2, sp
 800b47c:	f000 f848 	bl	800b510 <_fstat_r>
 800b480:	2800      	cmp	r0, #0
 800b482:	dbec      	blt.n	800b45e <__swhatbuf_r+0x12>
 800b484:	9901      	ldr	r1, [sp, #4]
 800b486:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b48a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b48e:	4259      	negs	r1, r3
 800b490:	4159      	adcs	r1, r3
 800b492:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b496:	e7eb      	b.n	800b470 <__swhatbuf_r+0x24>

0800b498 <__smakebuf_r>:
 800b498:	898b      	ldrh	r3, [r1, #12]
 800b49a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b49c:	079d      	lsls	r5, r3, #30
 800b49e:	4606      	mov	r6, r0
 800b4a0:	460c      	mov	r4, r1
 800b4a2:	d507      	bpl.n	800b4b4 <__smakebuf_r+0x1c>
 800b4a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b4a8:	6023      	str	r3, [r4, #0]
 800b4aa:	6123      	str	r3, [r4, #16]
 800b4ac:	2301      	movs	r3, #1
 800b4ae:	6163      	str	r3, [r4, #20]
 800b4b0:	b002      	add	sp, #8
 800b4b2:	bd70      	pop	{r4, r5, r6, pc}
 800b4b4:	ab01      	add	r3, sp, #4
 800b4b6:	466a      	mov	r2, sp
 800b4b8:	f7ff ffc8 	bl	800b44c <__swhatbuf_r>
 800b4bc:	9900      	ldr	r1, [sp, #0]
 800b4be:	4605      	mov	r5, r0
 800b4c0:	4630      	mov	r0, r6
 800b4c2:	f7fb fc91 	bl	8006de8 <_malloc_r>
 800b4c6:	b948      	cbnz	r0, 800b4dc <__smakebuf_r+0x44>
 800b4c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b4cc:	059a      	lsls	r2, r3, #22
 800b4ce:	d4ef      	bmi.n	800b4b0 <__smakebuf_r+0x18>
 800b4d0:	f023 0303 	bic.w	r3, r3, #3
 800b4d4:	f043 0302 	orr.w	r3, r3, #2
 800b4d8:	81a3      	strh	r3, [r4, #12]
 800b4da:	e7e3      	b.n	800b4a4 <__smakebuf_r+0xc>
 800b4dc:	89a3      	ldrh	r3, [r4, #12]
 800b4de:	6020      	str	r0, [r4, #0]
 800b4e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b4e4:	81a3      	strh	r3, [r4, #12]
 800b4e6:	9b00      	ldr	r3, [sp, #0]
 800b4e8:	6163      	str	r3, [r4, #20]
 800b4ea:	9b01      	ldr	r3, [sp, #4]
 800b4ec:	6120      	str	r0, [r4, #16]
 800b4ee:	b15b      	cbz	r3, 800b508 <__smakebuf_r+0x70>
 800b4f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b4f4:	4630      	mov	r0, r6
 800b4f6:	f000 f81d 	bl	800b534 <_isatty_r>
 800b4fa:	b128      	cbz	r0, 800b508 <__smakebuf_r+0x70>
 800b4fc:	89a3      	ldrh	r3, [r4, #12]
 800b4fe:	f023 0303 	bic.w	r3, r3, #3
 800b502:	f043 0301 	orr.w	r3, r3, #1
 800b506:	81a3      	strh	r3, [r4, #12]
 800b508:	89a3      	ldrh	r3, [r4, #12]
 800b50a:	431d      	orrs	r5, r3
 800b50c:	81a5      	strh	r5, [r4, #12]
 800b50e:	e7cf      	b.n	800b4b0 <__smakebuf_r+0x18>

0800b510 <_fstat_r>:
 800b510:	b538      	push	{r3, r4, r5, lr}
 800b512:	4d07      	ldr	r5, [pc, #28]	; (800b530 <_fstat_r+0x20>)
 800b514:	2300      	movs	r3, #0
 800b516:	4604      	mov	r4, r0
 800b518:	4608      	mov	r0, r1
 800b51a:	4611      	mov	r1, r2
 800b51c:	602b      	str	r3, [r5, #0]
 800b51e:	f7f6 fe38 	bl	8002192 <_fstat>
 800b522:	1c43      	adds	r3, r0, #1
 800b524:	d102      	bne.n	800b52c <_fstat_r+0x1c>
 800b526:	682b      	ldr	r3, [r5, #0]
 800b528:	b103      	cbz	r3, 800b52c <_fstat_r+0x1c>
 800b52a:	6023      	str	r3, [r4, #0]
 800b52c:	bd38      	pop	{r3, r4, r5, pc}
 800b52e:	bf00      	nop
 800b530:	20000710 	.word	0x20000710

0800b534 <_isatty_r>:
 800b534:	b538      	push	{r3, r4, r5, lr}
 800b536:	4d06      	ldr	r5, [pc, #24]	; (800b550 <_isatty_r+0x1c>)
 800b538:	2300      	movs	r3, #0
 800b53a:	4604      	mov	r4, r0
 800b53c:	4608      	mov	r0, r1
 800b53e:	602b      	str	r3, [r5, #0]
 800b540:	f7f6 fe37 	bl	80021b2 <_isatty>
 800b544:	1c43      	adds	r3, r0, #1
 800b546:	d102      	bne.n	800b54e <_isatty_r+0x1a>
 800b548:	682b      	ldr	r3, [r5, #0]
 800b54a:	b103      	cbz	r3, 800b54e <_isatty_r+0x1a>
 800b54c:	6023      	str	r3, [r4, #0]
 800b54e:	bd38      	pop	{r3, r4, r5, pc}
 800b550:	20000710 	.word	0x20000710

0800b554 <_init>:
 800b554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b556:	bf00      	nop
 800b558:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b55a:	bc08      	pop	{r3}
 800b55c:	469e      	mov	lr, r3
 800b55e:	4770      	bx	lr

0800b560 <_fini>:
 800b560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b562:	bf00      	nop
 800b564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b566:	bc08      	pop	{r3}
 800b568:	469e      	mov	lr, r3
 800b56a:	4770      	bx	lr
